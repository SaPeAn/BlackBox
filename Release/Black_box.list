
Black_box.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000037ec  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005bc  080038f8  080038f8  000138f8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003eb4  08003eb4  00020080  2**0
                  CONTENTS
  4 .ARM          00000000  08003eb4  08003eb4  00020080  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003eb4  08003eb4  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003eb4  08003eb4  00013eb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003eb8  08003eb8  00013eb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  08003ebc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001178  20000080  08003f3c  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200011f8  08003f3c  000211f8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   000157b6  00000000  00000000  000200a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000034a5  00000000  00000000  0003585f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    0000cec9  00000000  00000000  00038d04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e78  00000000  00000000  00045bd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001680  00000000  00000000  00046a48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00019b63  00000000  00000000  000480c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00017066  00000000  00000000  00061c2b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00093f63  00000000  00000000  00078c91  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0010cbf4  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002fe0  00000000  00000000  0010cc44  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000080 	.word	0x20000080
 8000128:	00000000 	.word	0x00000000
 800012c:	080038e0 	.word	0x080038e0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000084 	.word	0x20000084
 8000148:	080038e0 	.word	0x080038e0

0800014c <RingBuf_Clear>:
 *
 * @param[in] rb #RINGBUF_t structure instance
 * @return #RINGBUF_STATUS enum
 */
RINGBUF_STATUS RingBuf_Clear(RINGBUF_t *rb) {
    if (rb->buf == NULL) return RINGBUF_PARAM_ERR;
 800014c:	6802      	ldr	r2, [r0, #0]
RINGBUF_STATUS RingBuf_Clear(RINGBUF_t *rb) {
 800014e:	4603      	mov	r3, r0
    if (rb->buf == NULL) return RINGBUF_PARAM_ERR;
 8000150:	b11a      	cbz	r2, 800015a <RingBuf_Clear+0xe>
    rb->head = rb->tail = 0;
 8000152:	2000      	movs	r0, #0
 8000154:	6058      	str	r0, [r3, #4]
 8000156:	6098      	str	r0, [r3, #8]
    return RINGBUF_OK;
 8000158:	4770      	bx	lr
    if (rb->buf == NULL) return RINGBUF_PARAM_ERR;
 800015a:	2002      	movs	r0, #2
}
 800015c:	4770      	bx	lr

0800015e <RingBuf_Init>:
RINGBUF_STATUS RingBuf_Init(void *buf, u16_t size, size_t cellsize, RINGBUF_t *rb) {
 800015e:	b510      	push	{r4, lr}
 8000160:	461c      	mov	r4, r3
    rb->size = size; // size of array
 8000162:	60d9      	str	r1, [r3, #12]
    rb->buf = buf;      // set pointer to buffer
 8000164:	6018      	str	r0, [r3, #0]
    rb->cell_size = cellsize; // size of 1 cell of array
 8000166:	611a      	str	r2, [r3, #16]
    RingBuf_Clear(rb); // clear all
 8000168:	4618      	mov	r0, r3
 800016a:	f7ff ffef 	bl	800014c <RingBuf_Clear>
    return rb->buf ? RINGBUF_OK : RINGBUF_PARAM_ERR;
 800016e:	6823      	ldr	r3, [r4, #0]
 8000170:	2b00      	cmp	r3, #0
}
 8000172:	bf0c      	ite	eq
 8000174:	2002      	moveq	r0, #2
 8000176:	2000      	movne	r0, #0
 8000178:	bd10      	pop	{r4, pc}

0800017a <RingBuf_Available>:
 * @param[out] len Size to read [bytes]
 * @param[in] rb #RINGBUF_t structure instance
 * @return #RINGBUF_STATUS enum
 */
RINGBUF_STATUS RingBuf_Available(u16_t *len, RINGBUF_t *rb) {
    if (rb->buf == NULL) return RINGBUF_PARAM_ERR;
 800017a:	680b      	ldr	r3, [r1, #0]
 800017c:	b173      	cbz	r3, 800019c <RingBuf_Available+0x22>
    if (rb->head < rb->tail)
 800017e:	688a      	ldr	r2, [r1, #8]
 8000180:	684b      	ldr	r3, [r1, #4]
 8000182:	429a      	cmp	r2, r3
        *len = rb->size - rb->tail + rb->head;
 8000184:	bf3d      	ittte	cc
 8000186:	68cb      	ldrcc	r3, [r1, #12]
 8000188:	684a      	ldrcc	r2, [r1, #4]
 800018a:	6889      	ldrcc	r1, [r1, #8]
    else
        *len = rb->head - rb->tail;
 800018c:	688b      	ldrcs	r3, [r1, #8]
 800018e:	bf2c      	ite	cs
 8000190:	684a      	ldrcs	r2, [r1, #4]
        *len = rb->size - rb->tail + rb->head;
 8000192:	185b      	addcc	r3, r3, r1
        *len = rb->head - rb->tail;
 8000194:	1a9b      	subs	r3, r3, r2
 8000196:	8003      	strh	r3, [r0, #0]
    return RINGBUF_OK;
 8000198:	2000      	movs	r0, #0
 800019a:	4770      	bx	lr
    if (rb->buf == NULL) return RINGBUF_PARAM_ERR;
 800019c:	2002      	movs	r0, #2
}
 800019e:	4770      	bx	lr

080001a0 <RingBuf_BytePut>:
 * @param[in] data Data byte to be put [bytes]
 * @param[in] rb #RINGBUF_t structure instance
 * @return #RINGBUF_STATUS enum
 */
RINGBUF_STATUS RingBuf_BytePut(const u8_t data, RINGBUF_t *rb) {
    if (rb->buf == NULL) return RINGBUF_PARAM_ERR;
 80001a0:	680a      	ldr	r2, [r1, #0]
RINGBUF_STATUS RingBuf_BytePut(const u8_t data, RINGBUF_t *rb) {
 80001a2:	b510      	push	{r4, lr}
    if (rb->buf == NULL) return RINGBUF_PARAM_ERR;
 80001a4:	b152      	cbz	r2, 80001bc <RingBuf_BytePut+0x1c>
    rb->buf[rb->head++] = data; // put byte in cell and increment data
 80001a6:	688b      	ldr	r3, [r1, #8]
 80001a8:	1c5c      	adds	r4, r3, #1
 80001aa:	608c      	str	r4, [r1, #8]
 80001ac:	54d0      	strb	r0, [r2, r3]
    if (rb->head >= rb->size) // if overflow
 80001ae:	688a      	ldr	r2, [r1, #8]
 80001b0:	68cb      	ldr	r3, [r1, #12]
 80001b2:	2000      	movs	r0, #0
 80001b4:	429a      	cmp	r2, r3
 80001b6:	d300      	bcc.n	80001ba <RingBuf_BytePut+0x1a>
        rb->head = 0;   // set to start
 80001b8:	6088      	str	r0, [r1, #8]
    return RINGBUF_OK;
}
 80001ba:	bd10      	pop	{r4, pc}
    if (rb->buf == NULL) return RINGBUF_PARAM_ERR;
 80001bc:	2002      	movs	r0, #2
 80001be:	e7fc      	b.n	80001ba <RingBuf_BytePut+0x1a>

080001c0 <RingBuf_DataWatch>:
 * @param[out] data Data from buffer
 * @param[in] len Length of data to be read [bytes]
 * @param[in] rb #RINGBUF_t structure instance
 * @return #RINGBUF_STATUS enum
 */
RINGBUF_STATUS RingBuf_DataWatch(void *data, u16_t len, RINGBUF_t *rb) {
 80001c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80001c4:	4688      	mov	r8, r1
 80001c6:	4614      	mov	r4, r2
    if (data == NULL)
 80001c8:	4607      	mov	r7, r0
 80001ca:	2800      	cmp	r0, #0
 80001cc:	d031      	beq.n	8000232 <RingBuf_DataWatch+0x72>
        return RINGBUF_PARAM_ERR;
    if (len > rb->size)
 80001ce:	68d3      	ldr	r3, [r2, #12]
 80001d0:	4299      	cmp	r1, r3
 80001d2:	d830      	bhi.n	8000236 <RingBuf_DataWatch+0x76>
        return RINGBUF_OVERFLOW;
    // OUTPUT data index start address
    u16_t s_addr = 0;
    // available space in the end of buffer
    u16_t space = rb->size - rb->tail;
 80001d4:	68d1      	ldr	r1, [r2, #12]
 80001d6:	6855      	ldr	r5, [r2, #4]
 80001d8:	fa1f f981 	uxth.w	r9, r1
 80001dc:	b2ad      	uxth	r5, r5
 80001de:	eba9 0605 	sub.w	r6, r9, r5
 80001e2:	b2b6      	uxth	r6, r6
    u16_t loc_tail = rb->tail;
    if (len > space) { // if len > available space
 80001e4:	45b0      	cmp	r8, r6
    u16_t loc_tail = rb->tail;
 80001e6:	6853      	ldr	r3, [r2, #4]
    if (len > space) { // if len > available space
 80001e8:	d810      	bhi.n	800020c <RingBuf_DataWatch+0x4c>
    u16_t s_addr = 0;
 80001ea:	2600      	movs	r6, #0
    u16_t loc_tail = rb->tail;
 80001ec:	b29b      	uxth	r3, r3
        s_addr = space;
        // new length - len-space
        len -= space;
    }
    // copy all the data from the buf storage
    memcpy(&data[s_addr * rb->cell_size], &rb->buf[loc_tail * rb->cell_size], len * rb->cell_size);
 80001ee:	6920      	ldr	r0, [r4, #16]
 80001f0:	6821      	ldr	r1, [r4, #0]
 80001f2:	6925      	ldr	r5, [r4, #16]
 80001f4:	6922      	ldr	r2, [r4, #16]
 80001f6:	fb05 1103 	mla	r1, r5, r3, r1
 80001fa:	fb02 f208 	mul.w	r2, r2, r8
 80001fe:	fb00 7006 	mla	r0, r0, r6, r7
 8000202:	f002 feeb 	bl	8002fdc <memcpy>
 8000206:	2000      	movs	r0, #0
    return RINGBUF_OK;
}
 8000208:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        memcpy(&data[s_addr * rb->cell_size], &rb->buf[loc_tail * rb->cell_size], space * rb->cell_size);
 800020c:	6922      	ldr	r2, [r4, #16]
 800020e:	f8d4 c000 	ldr.w	ip, [r4]
 8000212:	6921      	ldr	r1, [r4, #16]
 8000214:	6922      	ldr	r2, [r4, #16]
 8000216:	b29b      	uxth	r3, r3
 8000218:	fb01 c103 	mla	r1, r1, r3, ip
 800021c:	4372      	muls	r2, r6
 800021e:	f002 fedd 	bl	8002fdc <memcpy>
        len -= space;
 8000222:	eb08 0105 	add.w	r1, r8, r5
 8000226:	eba1 0109 	sub.w	r1, r1, r9
        loc_tail = 0;
 800022a:	2300      	movs	r3, #0
        len -= space;
 800022c:	fa1f f881 	uxth.w	r8, r1
 8000230:	e7dd      	b.n	80001ee <RingBuf_DataWatch+0x2e>
        return RINGBUF_PARAM_ERR;
 8000232:	2002      	movs	r0, #2
 8000234:	e7e8      	b.n	8000208 <RingBuf_DataWatch+0x48>
        return RINGBUF_OVERFLOW;
 8000236:	2003      	movs	r0, #3
 8000238:	e7e6      	b.n	8000208 <RingBuf_DataWatch+0x48>

0800023a <RingBuf_DataRead>:
RINGBUF_STATUS RingBuf_DataRead(void *data, u16_t len, RINGBUF_t *rb) {
 800023a:	b538      	push	{r3, r4, r5, lr}
    if (rb->buf == NULL) return RINGBUF_PARAM_ERR;
 800023c:	6813      	ldr	r3, [r2, #0]
RINGBUF_STATUS RingBuf_DataRead(void *data, u16_t len, RINGBUF_t *rb) {
 800023e:	460d      	mov	r5, r1
 8000240:	4614      	mov	r4, r2
    if (rb->buf == NULL) return RINGBUF_PARAM_ERR;
 8000242:	b15b      	cbz	r3, 800025c <RingBuf_DataRead+0x22>
    RINGBUF_STATUS st = RingBuf_DataWatch(data, len, rb);
 8000244:	f7ff ffbc 	bl	80001c0 <RingBuf_DataWatch>
    if (st != RINGBUF_OK)
 8000248:	b938      	cbnz	r0, 800025a <RingBuf_DataRead+0x20>
    rb->tail += len;
 800024a:	6861      	ldr	r1, [r4, #4]
 800024c:	440d      	add	r5, r1
 800024e:	6065      	str	r5, [r4, #4]
    if (rb->tail >= rb->size)
 8000250:	6862      	ldr	r2, [r4, #4]
 8000252:	68e3      	ldr	r3, [r4, #12]
 8000254:	429a      	cmp	r2, r3
 8000256:	d300      	bcc.n	800025a <RingBuf_DataRead+0x20>
        rb->tail = 0;
 8000258:	6060      	str	r0, [r4, #4]
}
 800025a:	bd38      	pop	{r3, r4, r5, pc}
    if (rb->buf == NULL) return RINGBUF_PARAM_ERR;
 800025c:	2002      	movs	r0, #2
 800025e:	e7fc      	b.n	800025a <RingBuf_DataRead+0x20>

08000260 <lcd_sendcommands>:
  lcd_bufupload();
  DISP_INIT_SEND_DAT;
}

void lcd_sendcommands(uint8_t* data, uint8_t N)
{
 8000260:	b570      	push	{r4, r5, r6, lr}
 8000262:	4604      	mov	r4, r0
 8000264:	460d      	mov	r5, r1
  DISP_INIT_SEND_COM;
 8000266:	4e09      	ldr	r6, [pc, #36]	; (800028c <lcd_sendcommands+0x2c>)
 8000268:	2200      	movs	r2, #0
 800026a:	4630      	mov	r0, r6
 800026c:	2102      	movs	r1, #2
 800026e:	f001 fbb7 	bl	80019e0 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi2, data, N, 10);
 8000272:	462a      	mov	r2, r5
 8000274:	4621      	mov	r1, r4
 8000276:	230a      	movs	r3, #10
 8000278:	4805      	ldr	r0, [pc, #20]	; (8000290 <lcd_sendcommands+0x30>)
 800027a:	f002 f9b3 	bl	80025e4 <HAL_SPI_Transmit>
  DISP_INIT_SEND_DAT;
 800027e:	4630      	mov	r0, r6
}
 8000280:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  DISP_INIT_SEND_DAT;
 8000284:	2201      	movs	r2, #1
 8000286:	2102      	movs	r1, #2
 8000288:	f001 bbaa 	b.w	80019e0 <HAL_GPIO_WritePin>
 800028c:	40010800 	.word	0x40010800
 8000290:	200005a0 	.word	0x200005a0

08000294 <lcd_bufupload>:

void lcd_bufupload(void)
{
 8000294:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8000298:	24b0      	movs	r4, #176	; 0xb0
  for(uint8_t j = 0; j < 8; j++)
  {
	uint8_t tmp_arr[] = {(0xB0 + j), 0x10, 0x00};
 800029a:	f04f 0810 	mov.w	r8, #16
 800029e:	2700      	movs	r7, #0
 80002a0:	4d0d      	ldr	r5, [pc, #52]	; (80002d8 <lcd_bufupload+0x44>)
    lcd_sendcommands(tmp_arr, 3);
    HAL_SPI_Transmit(&hspi2, dispbuffer[j], 128, 10);
 80002a2:	4e0e      	ldr	r6, [pc, #56]	; (80002dc <lcd_bufupload+0x48>)
    lcd_sendcommands(tmp_arr, 3);
 80002a4:	2103      	movs	r1, #3
	uint8_t tmp_arr[] = {(0xB0 + j), 0x10, 0x00};
 80002a6:	f88d 4004 	strb.w	r4, [sp, #4]
    lcd_sendcommands(tmp_arr, 3);
 80002aa:	a801      	add	r0, sp, #4
  for(uint8_t j = 0; j < 8; j++)
 80002ac:	3401      	adds	r4, #1
	uint8_t tmp_arr[] = {(0xB0 + j), 0x10, 0x00};
 80002ae:	f88d 8005 	strb.w	r8, [sp, #5]
 80002b2:	f88d 7006 	strb.w	r7, [sp, #6]
  for(uint8_t j = 0; j < 8; j++)
 80002b6:	b2e4      	uxtb	r4, r4
    lcd_sendcommands(tmp_arr, 3);
 80002b8:	f7ff ffd2 	bl	8000260 <lcd_sendcommands>
    HAL_SPI_Transmit(&hspi2, dispbuffer[j], 128, 10);
 80002bc:	4629      	mov	r1, r5
 80002be:	230a      	movs	r3, #10
 80002c0:	2280      	movs	r2, #128	; 0x80
 80002c2:	4630      	mov	r0, r6
 80002c4:	f002 f98e 	bl	80025e4 <HAL_SPI_Transmit>
  for(uint8_t j = 0; j < 8; j++)
 80002c8:	2cb8      	cmp	r4, #184	; 0xb8
 80002ca:	f105 0580 	add.w	r5, r5, #128	; 0x80
 80002ce:	d1e9      	bne.n	80002a4 <lcd_bufupload+0x10>
  }
}
 80002d0:	b002      	add	sp, #8
 80002d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80002d6:	bf00      	nop
 80002d8:	2000009c 	.word	0x2000009c
 80002dc:	200005a0 	.word	0x200005a0

080002e0 <lcd_bufwsmb8x5>:


/******************************************/
void lcd_bufwsmb8x5(const uint8_t ch, uint8_t pg, uint8_t cl)
{
 80002e0:	b5f0      	push	{r4, r5, r6, r7, lr}
	for(uint8_t i = 0; i < 5; i++)
	  {
	    dispbuffer[pg][cl + i] = char_8x5[ch][i];
 80002e2:	4d09      	ldr	r5, [pc, #36]	; (8000308 <lcd_bufwsmb8x5+0x28>)
 80002e4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80002e8:	4b08      	ldr	r3, [pc, #32]	; (800030c <lcd_bufwsmb8x5+0x2c>)
 80002ea:	182f      	adds	r7, r5, r0
 80002ec:	5828      	ldr	r0, [r5, r0]
 80002ee:	eb02 14c1 	add.w	r4, r2, r1, lsl #7
 80002f2:	5118      	str	r0, [r3, r4]
 80002f4:	191e      	adds	r6, r3, r4
	  }
	cl = cl+5;
	dispbuffer[pg][cl] = 0x00;
 80002f6:	eb03 13c1 	add.w	r3, r3, r1, lsl #7
 80002fa:	2100      	movs	r1, #0
	    dispbuffer[pg][cl + i] = char_8x5[ch][i];
 80002fc:	7938      	ldrb	r0, [r7, #4]
	cl = cl+5;
 80002fe:	3205      	adds	r2, #5
	dispbuffer[pg][cl] = 0x00;
 8000300:	b2d2      	uxtb	r2, r2
	    dispbuffer[pg][cl + i] = char_8x5[ch][i];
 8000302:	7130      	strb	r0, [r6, #4]
	dispbuffer[pg][cl] = 0x00;
 8000304:	5499      	strb	r1, [r3, r2]
	cl++;
}
 8000306:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000308:	08003905 	.word	0x08003905
 800030c:	2000009c 	.word	0x2000009c

08000310 <lcd_bufwstr8x5>:

uint8_t lcd_bufwstr8x5(uint8_t *str, uint8_t pg, uint8_t cl, uint8_t newline_fl)
{
 8000310:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if(str == NULL) str = str_null;
 8000314:	4f12      	ldr	r7, [pc, #72]	; (8000360 <lcd_bufwstr8x5+0x50>)
{
 8000316:	4689      	mov	r9, r1
 8000318:	4614      	mov	r4, r2
 800031a:	4698      	mov	r8, r3
  if(str == NULL) str = str_null;
 800031c:	2800      	cmp	r0, #0
 800031e:	bf18      	it	ne
 8000320:	4607      	movne	r7, r0
  uint8_t i = 0;
  while(str[i])
 8000322:	2600      	movs	r6, #0
 8000324:	b2f5      	uxtb	r5, r6
 8000326:	5d78      	ldrb	r0, [r7, r5]
 8000328:	b910      	cbnz	r0, 8000330 <lcd_bufwstr8x5+0x20>
    }
    if(pg > 7) return 0;
    i++;
  }
  return i;
}
 800032a:	4628      	mov	r0, r5
 800032c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	lcd_bufwsmb8x5(str[i], pg, cl);
 8000330:	4622      	mov	r2, r4
    cl += 6;
 8000332:	3406      	adds	r4, #6
	lcd_bufwsmb8x5(str[i], pg, cl);
 8000334:	4649      	mov	r1, r9
    cl += 6;
 8000336:	b2e4      	uxtb	r4, r4
	lcd_bufwsmb8x5(str[i], pg, cl);
 8000338:	f7ff ffd2 	bl	80002e0 <lcd_bufwsmb8x5>
    if(cl > 122)
 800033c:	2c7a      	cmp	r4, #122	; 0x7a
 800033e:	d907      	bls.n	8000350 <lcd_bufwstr8x5+0x40>
      if(newline_fl)
 8000340:	f1b8 0f00 	cmp.w	r8, #0
 8000344:	d0f1      	beq.n	800032a <lcd_bufwstr8x5+0x1a>
        cl = 0;
 8000346:	2400      	movs	r4, #0
        pg++;
 8000348:	f109 0101 	add.w	r1, r9, #1
 800034c:	fa5f f981 	uxtb.w	r9, r1
    if(pg > 7) return 0;
 8000350:	f1b9 0f07 	cmp.w	r9, #7
 8000354:	f106 0601 	add.w	r6, r6, #1
 8000358:	d9e4      	bls.n	8000324 <lcd_bufwstr8x5+0x14>
 800035a:	2500      	movs	r5, #0
 800035c:	e7e5      	b.n	800032a <lcd_bufwstr8x5+0x1a>
 800035e:	bf00      	nop
 8000360:	20000000 	.word	0x20000000

08000364 <lcd_buferase>:
}

void lcd_buferase(void)
{
  for(uint8_t j = 0; j < 8; j++)
    for(uint8_t i = 0; i < 128; i++) dispbuffer[j][i] = 0;
 8000364:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000368:	2100      	movs	r1, #0
 800036a:	4801      	ldr	r0, [pc, #4]	; (8000370 <lcd_buferase+0xc>)
 800036c:	f002 be44 	b.w	8002ff8 <memset>
 8000370:	2000009c 	.word	0x2000009c

08000374 <lcd_init>:
{
 8000374:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  DISP_RESET_OFF;
 8000376:	2201      	movs	r2, #1
 8000378:	2104      	movs	r1, #4
 800037a:	481f      	ldr	r0, [pc, #124]	; (80003f8 <lcd_init+0x84>)
 800037c:	f001 fb30 	bl	80019e0 <HAL_GPIO_WritePin>
  DISP_INIT_SEND_DAT;
 8000380:	2201      	movs	r2, #1
 8000382:	2102      	movs	r1, #2
 8000384:	481c      	ldr	r0, [pc, #112]	; (80003f8 <lcd_init+0x84>)
 8000386:	f001 fb2b 	bl	80019e0 <HAL_GPIO_WritePin>
  HAL_Delay(2);
 800038a:	2002      	movs	r0, #2
 800038c:	f000 fe4e 	bl	800102c <HAL_Delay>
  DISP_RESET_ON;
 8000390:	2200      	movs	r2, #0
 8000392:	2104      	movs	r1, #4
 8000394:	4818      	ldr	r0, [pc, #96]	; (80003f8 <lcd_init+0x84>)
 8000396:	f001 fb23 	bl	80019e0 <HAL_GPIO_WritePin>
  HAL_Delay(2);
 800039a:	2002      	movs	r0, #2
 800039c:	f000 fe46 	bl	800102c <HAL_Delay>
  DISP_RESET_OFF;
 80003a0:	2201      	movs	r2, #1
 80003a2:	2104      	movs	r1, #4
 80003a4:	4814      	ldr	r0, [pc, #80]	; (80003f8 <lcd_init+0x84>)
 80003a6:	f001 fb1b 	bl	80019e0 <HAL_GPIO_WritePin>
  DISP_INIT_SEND_COM;
 80003aa:	2200      	movs	r2, #0
 80003ac:	2102      	movs	r1, #2
 80003ae:	4812      	ldr	r0, [pc, #72]	; (80003f8 <lcd_init+0x84>)
 80003b0:	f001 fb16 	bl	80019e0 <HAL_GPIO_WritePin>
  uint8_t init_data_array[13] = {
 80003b4:	466a      	mov	r2, sp
 80003b6:	4615      	mov	r5, r2
 80003b8:	4b10      	ldr	r3, [pc, #64]	; (80003fc <lcd_init+0x88>)
 80003ba:	f103 0608 	add.w	r6, r3, #8
 80003be:	4614      	mov	r4, r2
 80003c0:	6818      	ldr	r0, [r3, #0]
 80003c2:	6859      	ldr	r1, [r3, #4]
 80003c4:	3308      	adds	r3, #8
 80003c6:	c403      	stmia	r4!, {r0, r1}
 80003c8:	42b3      	cmp	r3, r6
 80003ca:	4622      	mov	r2, r4
 80003cc:	d1f7      	bne.n	80003be <lcd_init+0x4a>
 80003ce:	6818      	ldr	r0, [r3, #0]
 80003d0:	791b      	ldrb	r3, [r3, #4]
  HAL_SPI_Transmit(&hspi2, init_data_array, 13, 20);
 80003d2:	4629      	mov	r1, r5
 80003d4:	220d      	movs	r2, #13
  uint8_t init_data_array[13] = {
 80003d6:	6020      	str	r0, [r4, #0]
 80003d8:	7123      	strb	r3, [r4, #4]
  HAL_SPI_Transmit(&hspi2, init_data_array, 13, 20);
 80003da:	4809      	ldr	r0, [pc, #36]	; (8000400 <lcd_init+0x8c>)
 80003dc:	2314      	movs	r3, #20
 80003de:	f002 f901 	bl	80025e4 <HAL_SPI_Transmit>
  lcd_buferase();
 80003e2:	f7ff ffbf 	bl	8000364 <lcd_buferase>
  lcd_bufupload();
 80003e6:	f7ff ff55 	bl	8000294 <lcd_bufupload>
  DISP_INIT_SEND_DAT;
 80003ea:	2201      	movs	r2, #1
 80003ec:	2102      	movs	r1, #2
 80003ee:	4802      	ldr	r0, [pc, #8]	; (80003f8 <lcd_init+0x84>)
 80003f0:	f001 faf6 	bl	80019e0 <HAL_GPIO_WritePin>
}
 80003f4:	b004      	add	sp, #16
 80003f6:	bd70      	pop	{r4, r5, r6, pc}
 80003f8:	40010800 	.word	0x40010800
 80003fc:	080038f8 	.word	0x080038f8
 8000400:	200005a0 	.word	0x200005a0

08000404 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000404:	b510      	push	{r4, lr}
 8000406:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000408:	2214      	movs	r2, #20
 800040a:	2100      	movs	r1, #0
 800040c:	a80c      	add	r0, sp, #48	; 0x30
 800040e:	f002 fdf3 	bl	8002ff8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000412:	2214      	movs	r2, #20
 8000414:	2100      	movs	r1, #0
 8000416:	eb0d 0002 	add.w	r0, sp, r2
 800041a:	f002 fded 	bl	8002ff8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800041e:	2210      	movs	r2, #16
 8000420:	2100      	movs	r1, #0
 8000422:	a801      	add	r0, sp, #4
 8000424:	f002 fde8 	bl	8002ff8 <memset>
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000428:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800042a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800042e:	2105      	movs	r1, #5
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000430:	2201      	movs	r2, #1
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000432:	e9cd 130a 	strd	r1, r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000436:	e9cd 4311 	strd	r4, r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800043a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800043e:	a80a      	add	r0, sp, #40	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000440:	e9cd 220d 	strd	r2, r2, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000444:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000446:	f001 fad7 	bl	80019f8 <HAL_RCC_OscConfig>
 800044a:	b108      	cbz	r0, 8000450 <SystemClock_Config+0x4c>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800044c:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800044e:	e7fe      	b.n	800044e <SystemClock_Config+0x4a>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000450:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000452:	e9cd 3405 	strd	r3, r4, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000456:	f44f 6380 	mov.w	r3, #1024	; 0x400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800045a:	9007      	str	r0, [sp, #28]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800045c:	e9cd 3008 	strd	r3, r0, [sp, #32]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000460:	4621      	mov	r1, r4
 8000462:	a805      	add	r0, sp, #20
 8000464:	f001 fc9e 	bl	8001da4 <HAL_RCC_ClockConfig>
 8000468:	b108      	cbz	r0, 800046e <SystemClock_Config+0x6a>
 800046a:	b672      	cpsid	i
  while (1)
 800046c:	e7fe      	b.n	800046c <SystemClock_Config+0x68>
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800046e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000472:	2203      	movs	r2, #3
 8000474:	e9cd 2301 	strd	r2, r3, [sp, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000478:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800047c:	a801      	add	r0, sp, #4
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800047e:	9303      	str	r3, [sp, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000480:	f001 fd4c 	bl	8001f1c <HAL_RCCEx_PeriphCLKConfig>
 8000484:	b108      	cbz	r0, 800048a <SystemClock_Config+0x86>
 8000486:	b672      	cpsid	i
  while (1)
 8000488:	e7fe      	b.n	8000488 <SystemClock_Config+0x84>
}
 800048a:	b014      	add	sp, #80	; 0x50
 800048c:	bd10      	pop	{r4, pc}
	...

08000490 <main>:
{
 8000490:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000494:	f04f 0a10 	mov.w	sl, #16
{
 8000498:	b09b      	sub	sp, #108	; 0x6c
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800049a:	4cab      	ldr	r4, [pc, #684]	; (8000748 <main+0x2b8>)
  HAL_Init();
 800049c:	f000 fda2 	bl	8000fe4 <HAL_Init>
  SystemClock_Config();
 80004a0:	f7ff ffb0 	bl	8000404 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004a4:	4652      	mov	r2, sl
 80004a6:	2100      	movs	r1, #0
 80004a8:	a812      	add	r0, sp, #72	; 0x48
 80004aa:	f002 fda5 	bl	8002ff8 <memset>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004ae:	69a3      	ldr	r3, [r4, #24]
  HAL_GPIO_WritePin(SHUTDOWN_GPIO_Port, SHUTDOWN_Pin, GPIO_PIN_SET);
 80004b0:	2201      	movs	r2, #1
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004b2:	ea43 030a 	orr.w	r3, r3, sl
 80004b6:	61a3      	str	r3, [r4, #24]
 80004b8:	69a3      	ldr	r3, [r4, #24]
  HAL_GPIO_WritePin(SHUTDOWN_GPIO_Port, SHUTDOWN_Pin, GPIO_PIN_SET);
 80004ba:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004be:	ea03 030a 	and.w	r3, r3, sl
 80004c2:	9305      	str	r3, [sp, #20]
 80004c4:	9b05      	ldr	r3, [sp, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80004c6:	69a3      	ldr	r3, [r4, #24]
  HAL_GPIO_WritePin(SHUTDOWN_GPIO_Port, SHUTDOWN_Pin, GPIO_PIN_SET);
 80004c8:	48a0      	ldr	r0, [pc, #640]	; (800074c <main+0x2bc>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80004ca:	f043 0320 	orr.w	r3, r3, #32
 80004ce:	61a3      	str	r3, [r4, #24]
 80004d0:	69a3      	ldr	r3, [r4, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004d2:	2500      	movs	r5, #0
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80004d4:	f003 0320 	and.w	r3, r3, #32
 80004d8:	9306      	str	r3, [sp, #24]
 80004da:	9b06      	ldr	r3, [sp, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004dc:	69a3      	ldr	r3, [r4, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004de:	f04f 0802 	mov.w	r8, #2
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004e2:	f043 0304 	orr.w	r3, r3, #4
 80004e6:	61a3      	str	r3, [r4, #24]
 80004e8:	69a3      	ldr	r3, [r4, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80004ea:	f04f 0911 	mov.w	r9, #17
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004ee:	f003 0304 	and.w	r3, r3, #4
 80004f2:	9307      	str	r3, [sp, #28]
 80004f4:	9b07      	ldr	r3, [sp, #28]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004f6:	69a3      	ldr	r3, [r4, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004f8:	2601      	movs	r6, #1
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004fa:	f043 0308 	orr.w	r3, r3, #8
 80004fe:	61a3      	str	r3, [r4, #24]
 8000500:	69a3      	ldr	r3, [r4, #24]
  GPIO_InitStruct.Pin = JOYSTICK_BTN_Pin;
 8000502:	2708      	movs	r7, #8
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000504:	f003 0308 	and.w	r3, r3, #8
 8000508:	9308      	str	r3, [sp, #32]
 800050a:	9b08      	ldr	r3, [sp, #32]
  HAL_GPIO_WritePin(SHUTDOWN_GPIO_Port, SHUTDOWN_Pin, GPIO_PIN_SET);
 800050c:	f001 fa68 	bl	80019e0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, DISP_RS_Pin|DISP_RSE_Pin, GPIO_PIN_RESET);
 8000510:	2200      	movs	r2, #0
 8000512:	2106      	movs	r1, #6
 8000514:	488e      	ldr	r0, [pc, #568]	; (8000750 <main+0x2c0>)
 8000516:	f001 fa63 	bl	80019e0 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800051a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  HAL_GPIO_Init(SHUTDOWN_GPIO_Port, &GPIO_InitStruct);
 800051e:	488b      	ldr	r0, [pc, #556]	; (800074c <main+0x2bc>)
 8000520:	a912      	add	r1, sp, #72	; 0x48
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000522:	e9cd 3912 	strd	r3, r9, [sp, #72]	; 0x48
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000526:	e9cd 5814 	strd	r5, r8, [sp, #80]	; 0x50
  HAL_GPIO_Init(SHUTDOWN_GPIO_Port, &GPIO_InitStruct);
 800052a:	f001 f97f 	bl	800182c <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800052e:	2306      	movs	r3, #6
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000530:	4887      	ldr	r0, [pc, #540]	; (8000750 <main+0x2c0>)
 8000532:	a912      	add	r1, sp, #72	; 0x48
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000534:	e9cd 3612 	strd	r3, r6, [sp, #72]	; 0x48
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000538:	e9cd 5814 	strd	r5, r8, [sp, #80]	; 0x50
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800053c:	f001 f976 	bl	800182c <HAL_GPIO_Init>
  HAL_GPIO_Init(JOYSTICK_BTN_GPIO_Port, &GPIO_InitStruct);
 8000540:	4883      	ldr	r0, [pc, #524]	; (8000750 <main+0x2c0>)
 8000542:	a912      	add	r1, sp, #72	; 0x48
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000544:	e9cd 7512 	strd	r7, r5, [sp, #72]	; 0x48
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000548:	9614      	str	r6, [sp, #80]	; 0x50
  HAL_GPIO_Init(JOYSTICK_BTN_GPIO_Port, &GPIO_InitStruct);
 800054a:	f001 f96f 	bl	800182c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = BTN_1_Pin|BTN_2_Pin|BTN_3_Pin|BTN_4_Pin;
 800054e:	23f0      	movs	r3, #240	; 0xf0
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000550:	4880      	ldr	r0, [pc, #512]	; (8000754 <main+0x2c4>)
 8000552:	a912      	add	r1, sp, #72	; 0x48
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000554:	e9cd 3512 	strd	r3, r5, [sp, #72]	; 0x48
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000558:	9614      	str	r6, [sp, #80]	; 0x50
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800055a:	f001 f967 	bl	800182c <HAL_GPIO_Init>
  __HAL_RCC_DMA1_CLK_ENABLE();
 800055e:	6963      	ldr	r3, [r4, #20]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000560:	462a      	mov	r2, r5
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000562:	4333      	orrs	r3, r6
 8000564:	6163      	str	r3, [r4, #20]
 8000566:	6963      	ldr	r3, [r4, #20]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000568:	4629      	mov	r1, r5
  __HAL_RCC_DMA1_CLK_ENABLE();
 800056a:	4033      	ands	r3, r6
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800056c:	200b      	movs	r0, #11
  __HAL_RCC_DMA1_CLK_ENABLE();
 800056e:	9304      	str	r3, [sp, #16]
 8000570:	9b04      	ldr	r3, [sp, #16]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000572:	f000 ffa7 	bl	80014c4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000576:	200b      	movs	r0, #11
 8000578:	f000 ffd6 	bl	8001528 <HAL_NVIC_EnableIRQ>
  hadc1.Instance = ADC1;
 800057c:	4c76      	ldr	r4, [pc, #472]	; (8000758 <main+0x2c8>)
 800057e:	4b77      	ldr	r3, [pc, #476]	; (800075c <main+0x2cc>)
  ADC_ChannelConfTypeDef sConfig = {0};
 8000580:	e9cd 5512 	strd	r5, r5, [sp, #72]	; 0x48
  hadc1.Instance = ADC1;
 8000584:	6023      	str	r3, [r4, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000586:	f44f 7380 	mov.w	r3, #256	; 0x100
  ADC_ChannelConfTypeDef sConfig = {0};
 800058a:	9514      	str	r5, [sp, #80]	; 0x50
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800058c:	60a3      	str	r3, [r4, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800058e:	7325      	strb	r5, [r4, #12]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000590:	f44f 2360 	mov.w	r3, #917504	; 0xe0000
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000594:	7525      	strb	r5, [r4, #20]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000596:	6065      	str	r5, [r4, #4]
  hadc1.Init.NbrOfConversion = 5;
 8000598:	2505      	movs	r5, #5
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800059a:	4620      	mov	r0, r4
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800059c:	61e3      	str	r3, [r4, #28]
  hadc1.Init.NbrOfConversion = 5;
 800059e:	6125      	str	r5, [r4, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80005a0:	f000 ff00 	bl	80013a4 <HAL_ADC_Init>
 80005a4:	b108      	cbz	r0, 80005aa <main+0x11a>
 80005a6:	b672      	cpsid	i
  while (1)
 80005a8:	e7fe      	b.n	80005a8 <main+0x118>
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 80005aa:	2307      	movs	r3, #7
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80005ac:	e9cd 0612 	strd	r0, r6, [sp, #72]	; 0x48
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005b0:	a912      	add	r1, sp, #72	; 0x48
 80005b2:	4620      	mov	r0, r4
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 80005b4:	9314      	str	r3, [sp, #80]	; 0x50
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005b6:	f000 fd87 	bl	80010c8 <HAL_ADC_ConfigChannel>
 80005ba:	b108      	cbz	r0, 80005c0 <main+0x130>
 80005bc:	b672      	cpsid	i
  while (1)
 80005be:	e7fe      	b.n	80005be <main+0x12e>
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005c0:	4620      	mov	r0, r4
 80005c2:	a912      	add	r1, sp, #72	; 0x48
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80005c4:	e9cd 7812 	strd	r7, r8, [sp, #72]	; 0x48
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005c8:	f000 fd7e 	bl	80010c8 <HAL_ADC_ConfigChannel>
 80005cc:	b108      	cbz	r0, 80005d2 <main+0x142>
 80005ce:	b672      	cpsid	i
  while (1)
 80005d0:	e7fe      	b.n	80005d0 <main+0x140>
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80005d2:	f04f 0809 	mov.w	r8, #9
 80005d6:	2303      	movs	r3, #3
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005d8:	4620      	mov	r0, r4
 80005da:	a912      	add	r1, sp, #72	; 0x48
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80005dc:	e9cd 8312 	strd	r8, r3, [sp, #72]	; 0x48
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005e0:	f000 fd72 	bl	80010c8 <HAL_ADC_ConfigChannel>
 80005e4:	b108      	cbz	r0, 80005ea <main+0x15a>
 80005e6:	b672      	cpsid	i
  while (1)
 80005e8:	e7fe      	b.n	80005e8 <main+0x158>
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80005ea:	2304      	movs	r3, #4
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005ec:	4620      	mov	r0, r4
 80005ee:	a912      	add	r1, sp, #72	; 0x48
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80005f0:	f8cd a048 	str.w	sl, [sp, #72]	; 0x48
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80005f4:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005f6:	f000 fd67 	bl	80010c8 <HAL_ADC_ConfigChannel>
 80005fa:	b108      	cbz	r0, 8000600 <main+0x170>
 80005fc:	b672      	cpsid	i
  while (1)
 80005fe:	e7fe      	b.n	80005fe <main+0x16e>
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000600:	4620      	mov	r0, r4
 8000602:	a912      	add	r1, sp, #72	; 0x48
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8000604:	e9cd 9512 	strd	r9, r5, [sp, #72]	; 0x48
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000608:	f000 fd5e 	bl	80010c8 <HAL_ADC_ConfigChannel>
 800060c:	4603      	mov	r3, r0
 800060e:	b108      	cbz	r0, 8000614 <main+0x184>
 8000610:	b672      	cpsid	i
  while (1)
 8000612:	e7fe      	b.n	8000612 <main+0x182>
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000614:	f44f 7282 	mov.w	r2, #260	; 0x104
  hspi2.Instance = SPI2;
 8000618:	4851      	ldr	r0, [pc, #324]	; (8000760 <main+0x2d0>)
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800061a:	f8df e148 	ldr.w	lr, [pc, #328]	; 8000764 <main+0x2d4>
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800061e:	e9c0 3302 	strd	r3, r3, [r0, #8]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000622:	e9c0 e200 	strd	lr, r2, [r0]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000626:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 800062a:	f44f 2280 	mov.w	r2, #262144	; 0x40000
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800062e:	e9c0 3308 	strd	r3, r3, [r0, #32]
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000632:	6283      	str	r3, [r0, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000634:	230a      	movs	r3, #10
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000636:	e9c0 2706 	strd	r2, r7, [r0, #24]
  hspi2.Init.CRCPolynomial = 10;
 800063a:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800063c:	f001 ff7a 	bl	8002534 <HAL_SPI_Init>
 8000640:	4604      	mov	r4, r0
 8000642:	b108      	cbz	r0, 8000648 <main+0x1b8>
 8000644:	b672      	cpsid	i
  while (1)
 8000646:	e7fe      	b.n	8000646 <main+0x1b6>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000648:	4601      	mov	r1, r0
 800064a:	221c      	movs	r2, #28
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800064c:	e9cd 0009 	strd	r0, r0, [sp, #36]	; 0x24
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000650:	a80b      	add	r0, sp, #44	; 0x2c
 8000652:	f002 fcd1 	bl	8002ff8 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000656:	2220      	movs	r2, #32
 8000658:	4621      	mov	r1, r4
 800065a:	a812      	add	r0, sp, #72	; 0x48
 800065c:	f002 fccc 	bl	8002ff8 <memset>
  htim1.Instance = TIM1;
 8000660:	4e41      	ldr	r6, [pc, #260]	; (8000768 <main+0x2d8>)
 8000662:	4b42      	ldr	r3, [pc, #264]	; (800076c <main+0x2dc>)
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000664:	4630      	mov	r0, r6
  htim1.Init.Prescaler = 0;
 8000666:	e9c6 3400 	strd	r3, r4, [r6]
  htim1.Init.Period = 65535;
 800066a:	f64f 73ff 	movw	r3, #65535	; 0xffff
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800066e:	e9c6 4405 	strd	r4, r4, [r6, #20]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000672:	e9c6 3403 	strd	r3, r4, [r6, #12]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000676:	60b4      	str	r4, [r6, #8]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000678:	f002 f90e 	bl	8002898 <HAL_TIM_PWM_Init>
 800067c:	b108      	cbz	r0, 8000682 <main+0x1f2>
 800067e:	b672      	cpsid	i
  while (1)
 8000680:	e7fe      	b.n	8000680 <main+0x1f0>
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000682:	e9cd 0009 	strd	r0, r0, [sp, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000686:	a909      	add	r1, sp, #36	; 0x24
 8000688:	4630      	mov	r0, r6
 800068a:	f002 fa1b 	bl	8002ac4 <HAL_TIMEx_MasterConfigSynchronization>
 800068e:	4602      	mov	r2, r0
 8000690:	b108      	cbz	r0, 8000696 <main+0x206>
 8000692:	b672      	cpsid	i
  while (1)
 8000694:	e7fe      	b.n	8000694 <main+0x204>
  sConfigOC.Pulse = 50000;
 8000696:	f04f 0c60 	mov.w	ip, #96	; 0x60
 800069a:	f24c 3350 	movw	r3, #50000	; 0xc350
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800069e:	e9cd 000d 	strd	r0, r0, [sp, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80006a2:	e9cd 000f 	strd	r0, r0, [sp, #60]	; 0x3c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80006a6:	9011      	str	r0, [sp, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80006a8:	a90b      	add	r1, sp, #44	; 0x2c
 80006aa:	4630      	mov	r0, r6
  sConfigOC.Pulse = 50000;
 80006ac:	e9cd c30b 	strd	ip, r3, [sp, #44]	; 0x2c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80006b0:	f002 f94a 	bl	8002948 <HAL_TIM_PWM_ConfigChannel>
 80006b4:	b108      	cbz	r0, 80006ba <main+0x22a>
 80006b6:	b672      	cpsid	i
  while (1)
 80006b8:	e7fe      	b.n	80006b8 <main+0x228>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80006ba:	2300      	movs	r3, #0
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80006bc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80006c0:	4829      	ldr	r0, [pc, #164]	; (8000768 <main+0x2d8>)
 80006c2:	a912      	add	r1, sp, #72	; 0x48
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80006c4:	e9cd 3312 	strd	r3, r3, [sp, #72]	; 0x48
  sBreakDeadTimeConfig.DeadTime = 0;
 80006c8:	e9cd 3314 	strd	r3, r3, [sp, #80]	; 0x50
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80006cc:	9316      	str	r3, [sp, #88]	; 0x58
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80006ce:	9217      	str	r2, [sp, #92]	; 0x5c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80006d0:	9319      	str	r3, [sp, #100]	; 0x64
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80006d2:	f002 fa25 	bl	8002b20 <HAL_TIMEx_ConfigBreakDeadTime>
 80006d6:	4604      	mov	r4, r0
 80006d8:	b108      	cbz	r0, 80006de <main+0x24e>
 80006da:	b672      	cpsid	i
  while (1)
 80006dc:	e7fe      	b.n	80006dc <main+0x24c>
  HAL_TIM_MspPostInit(&htim1);
 80006de:	4822      	ldr	r0, [pc, #136]	; (8000768 <main+0x2d8>)
 80006e0:	f000 fb54 	bl	8000d8c <HAL_TIM_MspPostInit>
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 80006e4:	f04f 33ff 	mov.w	r3, #4294967295
  hrtc.Instance = RTC;
 80006e8:	4d21      	ldr	r5, [pc, #132]	; (8000770 <main+0x2e0>)
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 80006ea:	4f22      	ldr	r7, [pc, #136]	; (8000774 <main+0x2e4>)
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80006ec:	4628      	mov	r0, r5
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 80006ee:	e9c5 7300 	strd	r7, r3, [r5]
  RTC_TimeTypeDef sTime = {0};
 80006f2:	f8ad 402c 	strh.w	r4, [sp, #44]	; 0x2c
 80006f6:	f88d 402e 	strb.w	r4, [sp, #46]	; 0x2e
  RTC_DateTypeDef DateToUpdate = {0};
 80006fa:	9412      	str	r4, [sp, #72]	; 0x48
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_NONE;
 80006fc:	60ac      	str	r4, [r5, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80006fe:	f001 fe67 	bl	80023d0 <HAL_RTC_Init>
 8000702:	b108      	cbz	r0, 8000708 <main+0x278>
 8000704:	b672      	cpsid	i
  while (1)
 8000706:	e7fe      	b.n	8000706 <main+0x276>
  sTime.Hours = 0x0;
 8000708:	f88d 002c 	strb.w	r0, [sp, #44]	; 0x2c
  sTime.Minutes = 0x0;
 800070c:	f88d 002d 	strb.w	r0, [sp, #45]	; 0x2d
  sTime.Seconds = 0x0;
 8000710:	f88d 002e 	strb.w	r0, [sp, #46]	; 0x2e
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000714:	2201      	movs	r2, #1
 8000716:	4628      	mov	r0, r5
 8000718:	a90b      	add	r1, sp, #44	; 0x2c
 800071a:	f001 fd95 	bl	8002248 <HAL_RTC_SetTime>
 800071e:	b108      	cbz	r0, 8000724 <main+0x294>
 8000720:	b672      	cpsid	i
  while (1)
 8000722:	e7fe      	b.n	8000722 <main+0x292>
  DateToUpdate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000724:	2701      	movs	r7, #1
  DateToUpdate.Year = 0x0;
 8000726:	f88d 004b 	strb.w	r0, [sp, #75]	; 0x4b
  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BCD) != HAL_OK)
 800072a:	463a      	mov	r2, r7
 800072c:	4628      	mov	r0, r5
 800072e:	a912      	add	r1, sp, #72	; 0x48
  DateToUpdate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000730:	f88d 7048 	strb.w	r7, [sp, #72]	; 0x48
  DateToUpdate.Month = RTC_MONTH_JANUARY;
 8000734:	f88d 7049 	strb.w	r7, [sp, #73]	; 0x49
  DateToUpdate.Date = 0x1;
 8000738:	f88d 704a 	strb.w	r7, [sp, #74]	; 0x4a
  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BCD) != HAL_OK)
 800073c:	f001 fdd4 	bl	80022e8 <HAL_RTC_SetDate>
 8000740:	4603      	mov	r3, r0
 8000742:	b1c8      	cbz	r0, 8000778 <main+0x2e8>
 8000744:	b672      	cpsid	i
  while (1)
 8000746:	e7fe      	b.n	8000746 <main+0x2b6>
 8000748:	40021000 	.word	0x40021000
 800074c:	40011000 	.word	0x40011000
 8000750:	40010800 	.word	0x40010800
 8000754:	40010c00 	.word	0x40010c00
 8000758:	200004c0 	.word	0x200004c0
 800075c:	40012400 	.word	0x40012400
 8000760:	200005a0 	.word	0x200005a0
 8000764:	40003800 	.word	0x40003800
 8000768:	200005f8 	.word	0x200005f8
 800076c:	40012c00 	.word	0x40012c00
 8000770:	20000534 	.word	0x20000534
 8000774:	40002800 	.word	0x40002800
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000778:	f44f 7282 	mov.w	r2, #260	; 0x104
  hspi1.Instance = SPI1;
 800077c:	48b4      	ldr	r0, [pc, #720]	; (8000a50 <main+0x5c0>)
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800077e:	49b5      	ldr	r1, [pc, #724]	; (8000a54 <main+0x5c4>)
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000780:	e9c0 3302 	strd	r3, r3, [r0, #8]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000784:	e9c0 1200 	strd	r1, r2, [r0]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000788:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800078c:	2208      	movs	r2, #8
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800078e:	e9c0 3308 	strd	r3, r3, [r0, #32]
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000792:	6283      	str	r3, [r0, #40]	; 0x28
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000794:	f44f 2480 	mov.w	r4, #262144	; 0x40000
  hspi1.Init.CRCPolynomial = 10;
 8000798:	230a      	movs	r3, #10
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800079a:	e9c0 4206 	strd	r4, r2, [r0, #24]
  hspi1.Init.CRCPolynomial = 10;
 800079e:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80007a0:	f001 fec8 	bl	8002534 <HAL_SPI_Init>
 80007a4:	4603      	mov	r3, r0
 80007a6:	b108      	cbz	r0, 80007ac <main+0x31c>
 80007a8:	b672      	cpsid	i
  while (1)
 80007aa:	e7fe      	b.n	80007aa <main+0x31a>
  huart1.Init.BaudRate = 9600;
 80007ac:	f44f 5816 	mov.w	r8, #9600	; 0x2580
  huart1.Init.Mode = UART_MODE_TX_RX;
 80007b0:	250c      	movs	r5, #12
  huart1.Instance = USART1;
 80007b2:	48a9      	ldr	r0, [pc, #676]	; (8000a58 <main+0x5c8>)
  huart1.Init.BaudRate = 9600;
 80007b4:	4aa9      	ldr	r2, [pc, #676]	; (8000a5c <main+0x5cc>)
  huart1.Init.StopBits = UART_STOPBITS_1;
 80007b6:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart1.Init.BaudRate = 9600;
 80007ba:	e9c0 2800 	strd	r2, r8, [r0]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007be:	e9c0 5305 	strd	r5, r3, [r0, #20]
  huart1.Init.Parity = UART_PARITY_NONE;
 80007c2:	6103      	str	r3, [r0, #16]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80007c4:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80007c6:	f002 fa21 	bl	8002c0c <HAL_UART_Init>
 80007ca:	b108      	cbz	r0, 80007d0 <main+0x340>
 80007cc:	b672      	cpsid	i
  while (1)
 80007ce:	e7fe      	b.n	80007ce <main+0x33e>
  huart3.Instance = USART3;
 80007d0:	4ca3      	ldr	r4, [pc, #652]	; (8000a60 <main+0x5d0>)
 80007d2:	4ba4      	ldr	r3, [pc, #656]	; (8000a64 <main+0x5d4>)
  huart3.Init.Mode = UART_MODE_TX_RX;
 80007d4:	e9c4 0504 	strd	r0, r5, [r4, #16]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80007d8:	e9c4 0002 	strd	r0, r0, [r4, #8]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80007dc:	e9c4 0006 	strd	r0, r0, [r4, #24]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80007e0:	4620      	mov	r0, r4
  huart3.Init.BaudRate = 9600;
 80007e2:	e9c4 3800 	strd	r3, r8, [r4]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80007e6:	f002 fa11 	bl	8002c0c <HAL_UART_Init>
 80007ea:	4605      	mov	r5, r0
 80007ec:	b108      	cbz	r0, 80007f2 <main+0x362>
 80007ee:	b672      	cpsid	i
  while (1)
 80007f0:	e7fe      	b.n	80007f0 <main+0x360>
  lcd_init();
 80007f2:	f7ff fdbf 	bl	8000374 <lcd_init>
  RingBuf_Init(rx_buf, 1024, 1, &ringbuf);
 80007f6:	463a      	mov	r2, r7
 80007f8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80007fc:	4b9a      	ldr	r3, [pc, #616]	; (8000a68 <main+0x5d8>)
 80007fe:	489b      	ldr	r0, [pc, #620]	; (8000a6c <main+0x5dc>)
 8000800:	f7ff fcad 	bl	800015e <RingBuf_Init>
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, dutyCycle);
 8000804:	f44f 4230 	mov.w	r2, #45056	; 0xb000
 8000808:	6833      	ldr	r3, [r6, #0]
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800080a:	4629      	mov	r1, r5
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, dutyCycle);
 800080c:	635a      	str	r2, [r3, #52]	; 0x34
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800080e:	4898      	ldr	r0, [pc, #608]	; (8000a70 <main+0x5e0>)
 8000810:	f002 f956 	bl	8002ac0 <HAL_TIM_PWM_Start>
  HAL_UART_Receive_IT(&huart3, &temp_byte, 1);
 8000814:	4620      	mov	r0, r4
  uint16_t buf_len_prev = 0;
 8000816:	462c      	mov	r4, r5
  HAL_UART_Receive_IT(&huart3, &temp_byte, 1);
 8000818:	463a      	mov	r2, r7
 800081a:	4996      	ldr	r1, [pc, #600]	; (8000a74 <main+0x5e4>)
 800081c:	f002 fb9b 	bl	8002f56 <HAL_UART_Receive_IT>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)ADC_data.array, 5);
 8000820:	2205      	movs	r2, #5
 8000822:	4995      	ldr	r1, [pc, #596]	; (8000a78 <main+0x5e8>)
 8000824:	4895      	ldr	r0, [pc, #596]	; (8000a7c <main+0x5ec>)
 8000826:	f000 fd09 	bl	800123c <HAL_ADC_Start_DMA>
  adc_complete = 0;
 800082a:	4b95      	ldr	r3, [pc, #596]	; (8000a80 <main+0x5f0>)
  uint16_t buf_len = 0;
 800082c:	f8ad 5048 	strh.w	r5, [sp, #72]	; 0x48
  adc_complete = 0;
 8000830:	601d      	str	r5, [r3, #0]
  lcd_buferase();
 8000832:	f7ff fd97 	bl	8000364 <lcd_buferase>
  uint32_t temp_tick[3] = {0};
 8000836:	e9cd 5502 	strd	r5, r5, [sp, #8]
        RingBuf_DataRead(temp_str.UART_string, buf_len, &ringbuf);
 800083a:	f8df 9248 	ldr.w	r9, [pc, #584]	; 8000a84 <main+0x5f4>
    RingBuf_Available(&buf_len, &ringbuf);
 800083e:	498a      	ldr	r1, [pc, #552]	; (8000a68 <main+0x5d8>)
 8000840:	a812      	add	r0, sp, #72	; 0x48
 8000842:	f7ff fc9a 	bl	800017a <RingBuf_Available>
    if(buf_len)
 8000846:	f8bd 8048 	ldrh.w	r8, [sp, #72]	; 0x48
 800084a:	f1b8 0f00 	cmp.w	r8, #0
 800084e:	f000 80fc 	beq.w	8000a4a <main+0x5ba>
      if(buf_len_prev != buf_len)
 8000852:	45a0      	cmp	r8, r4
 8000854:	d002      	beq.n	800085c <main+0x3cc>
        temp_tick[2] = HAL_GetTick();
 8000856:	f000 fbe3 	bl	8001020 <HAL_GetTick>
 800085a:	4605      	mov	r5, r0
      if((HAL_GetTick() - temp_tick[2]) > period[2])
 800085c:	f000 fbe0 	bl	8001020 <HAL_GetTick>
 8000860:	1b40      	subs	r0, r0, r5
 8000862:	2805      	cmp	r0, #5
 8000864:	d90b      	bls.n	800087e <main+0x3ee>
        RingBuf_DataRead(temp_str.UART_string, buf_len, &ringbuf);
 8000866:	4a80      	ldr	r2, [pc, #512]	; (8000a68 <main+0x5d8>)
 8000868:	f8bd 1048 	ldrh.w	r1, [sp, #72]	; 0x48
 800086c:	4886      	ldr	r0, [pc, #536]	; (8000a88 <main+0x5f8>)
 800086e:	f7ff fce4 	bl	800023a <RingBuf_DataRead>
        temp_str.UART_string[buf_len] = '\0';
 8000872:	2200      	movs	r2, #0
 8000874:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8000878:	444b      	add	r3, r9
 800087a:	f883 2280 	strb.w	r2, [r3, #640]	; 0x280
    if(adc_avercomplete)
 800087e:	f8df b20c 	ldr.w	fp, [pc, #524]	; 8000a8c <main+0x5fc>
 8000882:	f8db 3000 	ldr.w	r3, [fp]
 8000886:	2b00      	cmp	r3, #0
 8000888:	d070      	beq.n	800096c <main+0x4dc>
      ADC_averdata.batlvl = ADC_averdata.batlvl / AVER_PERIOD;
 800088a:	2764      	movs	r7, #100	; 0x64
 800088c:	4c80      	ldr	r4, [pc, #512]	; (8000a90 <main+0x600>)
      sprintf((char*)temp_str.joyx, "Jx: %d.%02dV", joyVoltX/1000, (joyVoltX%1000)/10);
 800088e:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
      ADC_averdata.batlvl = ADC_averdata.batlvl / AVER_PERIOD;
 8000892:	6823      	ldr	r3, [r4, #0]
      ADC_averdata.jox /= AVER_PERIOD;
 8000894:	6862      	ldr	r2, [r4, #4]
      ADC_averdata.batlvl = ADC_averdata.batlvl / AVER_PERIOD;
 8000896:	fb93 f3f7 	sdiv	r3, r3, r7
 800089a:	6023      	str	r3, [r4, #0]
      ADC_averdata.joy /= AVER_PERIOD;
 800089c:	68a3      	ldr	r3, [r4, #8]
      ADC_averdata.jox /= AVER_PERIOD;
 800089e:	fb92 f2f7 	sdiv	r2, r2, r7
      ADC_averdata.joy /= AVER_PERIOD;
 80008a2:	fb93 f3f7 	sdiv	r3, r3, r7
 80008a6:	60a3      	str	r3, [r4, #8]
      ADC_averdata.tmpr /= AVER_PERIOD;
 80008a8:	68e3      	ldr	r3, [r4, #12]
      ADC_averdata.jox /= AVER_PERIOD;
 80008aa:	6062      	str	r2, [r4, #4]
      ADC_averdata.tmpr /= AVER_PERIOD;
 80008ac:	fb93 f3f7 	sdiv	r3, r3, r7
 80008b0:	60e3      	str	r3, [r4, #12]
      ADC_averdata.vref /= AVER_PERIOD;
 80008b2:	6923      	ldr	r3, [r4, #16]
      sprintf((char*)temp_str.joyx, "Jx: %d.%02dV", joyVoltX/1000, (joyVoltX%1000)/10);
 80008b4:	f04f 0a0a 	mov.w	sl, #10
      ADC_averdata.vref /= AVER_PERIOD;
 80008b8:	fb93 f1f7 	sdiv	r1, r3, r7
      joyVoltX = (ADC_averdata.jox * 1157) / ADC_averdata.vref;
 80008bc:	f240 4385 	movw	r3, #1157	; 0x485
 80008c0:	4353      	muls	r3, r2
 80008c2:	fb93 f3f1 	sdiv	r3, r3, r1
      sprintf((char*)temp_str.joyx, "Jx: %d.%02dV", joyVoltX/1000, (joyVoltX%1000)/10);
 80008c6:	fb93 f2f6 	sdiv	r2, r3, r6
 80008ca:	fb06 3312 	mls	r3, r6, r2, r3
      ADC_averdata.vref /= AVER_PERIOD;
 80008ce:	6121      	str	r1, [r4, #16]
      sprintf((char*)temp_str.joyx, "Jx: %d.%02dV", joyVoltX/1000, (joyVoltX%1000)/10);
 80008d0:	fb93 f3fa 	sdiv	r3, r3, sl
 80008d4:	496f      	ldr	r1, [pc, #444]	; (8000a94 <main+0x604>)
 80008d6:	4648      	mov	r0, r9
 80008d8:	f002 fb96 	bl	8003008 <siprintf>
      joyVoltY = (ADC_averdata.joy * 1157) / ADC_averdata.vref;
 80008dc:	f240 4285 	movw	r2, #1157	; 0x485
 80008e0:	68a3      	ldr	r3, [r4, #8]
      sprintf((char*)temp_str.joyy, "Jy: %d.%02dV", joyVoltY/1000, (joyVoltY%1000)/10);
 80008e2:	496d      	ldr	r1, [pc, #436]	; (8000a98 <main+0x608>)
      joyVoltY = (ADC_averdata.joy * 1157) / ADC_averdata.vref;
 80008e4:	4353      	muls	r3, r2
 80008e6:	6922      	ldr	r2, [r4, #16]
      sprintf((char*)temp_str.joyy, "Jy: %d.%02dV", joyVoltY/1000, (joyVoltY%1000)/10);
 80008e8:	486c      	ldr	r0, [pc, #432]	; (8000a9c <main+0x60c>)
      joyVoltY = (ADC_averdata.joy * 1157) / ADC_averdata.vref;
 80008ea:	fb93 f3f2 	sdiv	r3, r3, r2
      sprintf((char*)temp_str.joyy, "Jy: %d.%02dV", joyVoltY/1000, (joyVoltY%1000)/10);
 80008ee:	fb93 f2f6 	sdiv	r2, r3, r6
 80008f2:	fb06 3312 	mls	r3, r6, r2, r3
 80008f6:	fb93 f3fa 	sdiv	r3, r3, sl
 80008fa:	f002 fb85 	bl	8003008 <siprintf>
      Vbattery = (ADC_averdata.batlvl * 1580) / ADC_averdata.vref;
 80008fe:	f240 622c 	movw	r2, #1580	; 0x62c
 8000902:	6823      	ldr	r3, [r4, #0]
      sprintf((char*)temp_str.Vbat, "Vb: %d.%02dV", Vbattery/1000, (Vbattery%1000)/10);
 8000904:	4966      	ldr	r1, [pc, #408]	; (8000aa0 <main+0x610>)
      Vbattery = (ADC_averdata.batlvl * 1580) / ADC_averdata.vref;
 8000906:	4353      	muls	r3, r2
 8000908:	6922      	ldr	r2, [r4, #16]
      sprintf((char*)temp_str.Vbat, "Vb: %d.%02dV", Vbattery/1000, (Vbattery%1000)/10);
 800090a:	4866      	ldr	r0, [pc, #408]	; (8000aa4 <main+0x614>)
      Vbattery = (ADC_averdata.batlvl * 1580) / ADC_averdata.vref;
 800090c:	fb93 f3f2 	sdiv	r3, r3, r2
      sprintf((char*)temp_str.Vbat, "Vb: %d.%02dV", Vbattery/1000, (Vbattery%1000)/10);
 8000910:	fb93 f2f6 	sdiv	r2, r3, r6
 8000914:	fb06 3312 	mls	r3, r6, r2, r3
 8000918:	fb93 f3fa 	sdiv	r3, r3, sl
 800091c:	f002 fb74 	bl	8003008 <siprintf>
      Vpower = (4095 * 1157) / ADC_averdata.vref;
 8000920:	6923      	ldr	r3, [r4, #16]
 8000922:	4a61      	ldr	r2, [pc, #388]	; (8000aa8 <main+0x618>)
      sprintf((char*)temp_str.Vpowsup, "Vp: %d.%02dV", Vpower/1000, (Vpower%1000)/10);
 8000924:	4961      	ldr	r1, [pc, #388]	; (8000aac <main+0x61c>)
      Vpower = (4095 * 1157) / ADC_averdata.vref;
 8000926:	fb92 f3f3 	sdiv	r3, r2, r3
      sprintf((char*)temp_str.Vpowsup, "Vp: %d.%02dV", Vpower/1000, (Vpower%1000)/10);
 800092a:	fb93 f2f6 	sdiv	r2, r3, r6
 800092e:	fb06 3312 	mls	r3, r6, r2, r3
 8000932:	485f      	ldr	r0, [pc, #380]	; (8000ab0 <main+0x620>)
 8000934:	fb93 f3fa 	sdiv	r3, r3, sl
 8000938:	f002 fb66 	bl	8003008 <siprintf>
      Temperature = 358 - ((int)ADC_averdata.tmpr * 279) / (int)ADC_averdata.vref;
 800093c:	f240 1317 	movw	r3, #279	; 0x117
 8000940:	68e2      	ldr	r2, [r4, #12]
      sprintf((char*)temp_str.Temper, "T:  %d%cC",Temperature, 176);
 8000942:	495c      	ldr	r1, [pc, #368]	; (8000ab4 <main+0x624>)
      Temperature = 358 - ((int)ADC_averdata.tmpr * 279) / (int)ADC_averdata.vref;
 8000944:	435a      	muls	r2, r3
 8000946:	6923      	ldr	r3, [r4, #16]
      sprintf((char*)temp_str.Temper, "T:  %d%cC",Temperature, 176);
 8000948:	485b      	ldr	r0, [pc, #364]	; (8000ab8 <main+0x628>)
      Temperature = 358 - ((int)ADC_averdata.tmpr * 279) / (int)ADC_averdata.vref;
 800094a:	fb92 f2f3 	sdiv	r2, r2, r3
      sprintf((char*)temp_str.Temper, "T:  %d%cC",Temperature, 176);
 800094e:	23b0      	movs	r3, #176	; 0xb0
 8000950:	f5c2 72b3 	rsb	r2, r2, #358	; 0x166
 8000954:	f002 fb58 	bl	8003008 <siprintf>
      ADC_averdata.batlvl = 0;
 8000958:	2300      	movs	r3, #0
      ADC_averdata.jox = 0;
 800095a:	e9c4 3300 	strd	r3, r3, [r4]
      ADC_averdata.tmpr = 0;
 800095e:	e9c4 3302 	strd	r3, r3, [r4, #8]
      ADC_averdata.vref = 0;
 8000962:	6123      	str	r3, [r4, #16]
      adc_avercomplete = 0;
 8000964:	f8cb 3000 	str.w	r3, [fp]
      aver_counter = AVER_PERIOD;
 8000968:	4b54      	ldr	r3, [pc, #336]	; (8000abc <main+0x62c>)
 800096a:	601f      	str	r7, [r3, #0]
    sprintf((char*)temp_str.Seconds, "%02lu:%02lu:%02lu", (HAL_GetTick()/1000)/3600, ((HAL_GetTick()/1000)%3600)/60, (HAL_GetTick()/1000)%60);
 800096c:	f000 fb58 	bl	8001020 <HAL_GetTick>
 8000970:	4604      	mov	r4, r0
 8000972:	f000 fb55 	bl	8001020 <HAL_GetTick>
 8000976:	4606      	mov	r6, r0
 8000978:	f000 fb52 	bl	8001020 <HAL_GetTick>
 800097c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000980:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 8000984:	fbb6 f3f1 	udiv	r3, r6, r1
 8000988:	fbb3 f6f2 	udiv	r6, r3, r2
 800098c:	fbb0 f1f1 	udiv	r1, r0, r1
 8000990:	fb02 3316 	mls	r3, r2, r6, r3
 8000994:	223c      	movs	r2, #60	; 0x3c
 8000996:	fbb1 f0f2 	udiv	r0, r1, r2
 800099a:	fb02 1110 	mls	r1, r2, r0, r1
 800099e:	fbb3 f3f2 	udiv	r3, r3, r2
 80009a2:	4a47      	ldr	r2, [pc, #284]	; (8000ac0 <main+0x630>)
 80009a4:	9100      	str	r1, [sp, #0]
 80009a6:	fbb4 f2f2 	udiv	r2, r4, r2
 80009aa:	4946      	ldr	r1, [pc, #280]	; (8000ac4 <main+0x634>)
 80009ac:	4846      	ldr	r0, [pc, #280]	; (8000ac8 <main+0x638>)
 80009ae:	f002 fb2b 	bl	8003008 <siprintf>
    if((HAL_GetTick() - temp_tick[0]) > period[0])
 80009b2:	f000 fb35 	bl	8001020 <HAL_GetTick>
 80009b6:	9b02      	ldr	r3, [sp, #8]
 80009b8:	1ac0      	subs	r0, r0, r3
 80009ba:	2814      	cmp	r0, #20
 80009bc:	d92e      	bls.n	8000a1c <main+0x58c>
      temp_tick[0] = HAL_GetTick();
 80009be:	f000 fb2f 	bl	8001020 <HAL_GetTick>
 80009c2:	9002      	str	r0, [sp, #8]
      lcd_buferase();
 80009c4:	f7ff fcce 	bl	8000364 <lcd_buferase>
      lcd_bufwstr8x5(temp_str.joyx, 0, 0, 0);
 80009c8:	2300      	movs	r3, #0
 80009ca:	4648      	mov	r0, r9
 80009cc:	461a      	mov	r2, r3
 80009ce:	4619      	mov	r1, r3
 80009d0:	f7ff fc9e 	bl	8000310 <lcd_bufwstr8x5>
      lcd_bufwstr8x5(temp_str.joyy, 1, 0, 0);
 80009d4:	2300      	movs	r3, #0
 80009d6:	2101      	movs	r1, #1
 80009d8:	461a      	mov	r2, r3
 80009da:	4830      	ldr	r0, [pc, #192]	; (8000a9c <main+0x60c>)
 80009dc:	f7ff fc98 	bl	8000310 <lcd_bufwstr8x5>
      lcd_bufwstr8x5(temp_str.Vbat, 0, 65, 0);
 80009e0:	2300      	movs	r3, #0
 80009e2:	2241      	movs	r2, #65	; 0x41
 80009e4:	4619      	mov	r1, r3
 80009e6:	482f      	ldr	r0, [pc, #188]	; (8000aa4 <main+0x614>)
 80009e8:	f7ff fc92 	bl	8000310 <lcd_bufwstr8x5>
      lcd_bufwstr8x5(temp_str.Vpowsup, 1, 65, 0);
 80009ec:	2300      	movs	r3, #0
 80009ee:	2241      	movs	r2, #65	; 0x41
 80009f0:	2101      	movs	r1, #1
 80009f2:	482f      	ldr	r0, [pc, #188]	; (8000ab0 <main+0x620>)
 80009f4:	f7ff fc8c 	bl	8000310 <lcd_bufwstr8x5>
      lcd_bufwstr8x5(temp_str.Temper, 2, 0, 0);
 80009f8:	2300      	movs	r3, #0
 80009fa:	2102      	movs	r1, #2
 80009fc:	461a      	mov	r2, r3
 80009fe:	482e      	ldr	r0, [pc, #184]	; (8000ab8 <main+0x628>)
 8000a00:	f7ff fc86 	bl	8000310 <lcd_bufwstr8x5>
      lcd_bufwstr8x5(temp_str.Seconds, 2, 65, 0);
 8000a04:	2300      	movs	r3, #0
 8000a06:	2241      	movs	r2, #65	; 0x41
 8000a08:	2102      	movs	r1, #2
 8000a0a:	482f      	ldr	r0, [pc, #188]	; (8000ac8 <main+0x638>)
 8000a0c:	f7ff fc80 	bl	8000310 <lcd_bufwstr8x5>
      lcd_bufwstr8x5(temp_str.UART_string, 3, 0, 1);
 8000a10:	2301      	movs	r3, #1
 8000a12:	2200      	movs	r2, #0
 8000a14:	2103      	movs	r1, #3
 8000a16:	481c      	ldr	r0, [pc, #112]	; (8000a88 <main+0x5f8>)
 8000a18:	f7ff fc7a 	bl	8000310 <lcd_bufwstr8x5>
    if((HAL_GetTick() - temp_tick[1]) > period[1])
 8000a1c:	f000 fb00 	bl	8001020 <HAL_GetTick>
 8000a20:	9b03      	ldr	r3, [sp, #12]
 8000a22:	1ac0      	subs	r0, r0, r3
 8000a24:	2814      	cmp	r0, #20
 8000a26:	d904      	bls.n	8000a32 <main+0x5a2>
      temp_tick[1] = HAL_GetTick();
 8000a28:	f000 fafa 	bl	8001020 <HAL_GetTick>
 8000a2c:	9003      	str	r0, [sp, #12]
      lcd_bufupload();
 8000a2e:	f7ff fc31 	bl	8000294 <lcd_bufupload>
    if(adc_complete)
 8000a32:	4c13      	ldr	r4, [pc, #76]	; (8000a80 <main+0x5f0>)
 8000a34:	6823      	ldr	r3, [r4, #0]
 8000a36:	b133      	cbz	r3, 8000a46 <main+0x5b6>
      HAL_ADC_Start_DMA(&hadc1, (uint32_t*)ADC_data.array, 5);
 8000a38:	2205      	movs	r2, #5
 8000a3a:	490f      	ldr	r1, [pc, #60]	; (8000a78 <main+0x5e8>)
 8000a3c:	480f      	ldr	r0, [pc, #60]	; (8000a7c <main+0x5ec>)
 8000a3e:	f000 fbfd 	bl	800123c <HAL_ADC_Start_DMA>
      adc_complete = 0;
 8000a42:	2300      	movs	r3, #0
 8000a44:	6023      	str	r3, [r4, #0]
{
 8000a46:	4644      	mov	r4, r8
 8000a48:	e6f9      	b.n	800083e <main+0x3ae>
 8000a4a:	46a0      	mov	r8, r4
 8000a4c:	e717      	b.n	800087e <main+0x3ee>
 8000a4e:	bf00      	nop
 8000a50:	20000548 	.word	0x20000548
 8000a54:	40013000 	.word	0x40013000
 8000a58:	20000640 	.word	0x20000640
 8000a5c:	40013800 	.word	0x40013800
 8000a60:	20000684 	.word	0x20000684
 8000a64:	40004800 	.word	0x40004800
 8000a68:	200006c8 	.word	0x200006c8
 8000a6c:	200006dc 	.word	0x200006dc
 8000a70:	200005f8 	.word	0x200005f8
 8000a74:	20000adc 	.word	0x20000adc
 8000a78:	200004b0 	.word	0x200004b0
 8000a7c:	200004c0 	.word	0x200004c0
 8000a80:	20000008 	.word	0x20000008
 8000a84:	20000add 	.word	0x20000add
 8000a88:	20000d5d 	.word	0x20000d5d
 8000a8c:	200004bc 	.word	0x200004bc
 8000a90:	2000049c 	.word	0x2000049c
 8000a94:	08003e05 	.word	0x08003e05
 8000a98:	08003e12 	.word	0x08003e12
 8000a9c:	20000b5d 	.word	0x20000b5d
 8000aa0:	08003e1f 	.word	0x08003e1f
 8000aa4:	20000bdd 	.word	0x20000bdd
 8000aa8:	00484b7b 	.word	0x00484b7b
 8000aac:	08003e2c 	.word	0x08003e2c
 8000ab0:	20000c5d 	.word	0x20000c5d
 8000ab4:	08003e39 	.word	0x08003e39
 8000ab8:	20000cdd 	.word	0x20000cdd
 8000abc:	2000000c 	.word	0x2000000c
 8000ac0:	0036ee80 	.word	0x0036ee80
 8000ac4:	08003e43 	.word	0x08003e43
 8000ac8:	2000115d 	.word	0x2000115d

08000acc <HAL_UART_RxCpltCallback>:
{
 8000acc:	b538      	push	{r3, r4, r5, lr}
  if(huart == &huart3)
 8000ace:	4b08      	ldr	r3, [pc, #32]	; (8000af0 <HAL_UART_RxCpltCallback+0x24>)
{
 8000ad0:	4604      	mov	r4, r0
  if(huart == &huart3)
 8000ad2:	4298      	cmp	r0, r3
 8000ad4:	d10b      	bne.n	8000aee <HAL_UART_RxCpltCallback+0x22>
    RingBuf_BytePut(temp_byte, &ringbuf);
 8000ad6:	4d07      	ldr	r5, [pc, #28]	; (8000af4 <HAL_UART_RxCpltCallback+0x28>)
 8000ad8:	4907      	ldr	r1, [pc, #28]	; (8000af8 <HAL_UART_RxCpltCallback+0x2c>)
 8000ada:	7828      	ldrb	r0, [r5, #0]
 8000adc:	f7ff fb60 	bl	80001a0 <RingBuf_BytePut>
    HAL_UART_Receive_IT (&huart3, &temp_byte, 1);
 8000ae0:	4629      	mov	r1, r5
 8000ae2:	4620      	mov	r0, r4
}
 8000ae4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    HAL_UART_Receive_IT (&huart3, &temp_byte, 1);
 8000ae8:	2201      	movs	r2, #1
 8000aea:	f002 ba34 	b.w	8002f56 <HAL_UART_Receive_IT>
}
 8000aee:	bd38      	pop	{r3, r4, r5, pc}
 8000af0:	20000684 	.word	0x20000684
 8000af4:	20000adc 	.word	0x20000adc
 8000af8:	200006c8 	.word	0x200006c8

08000afc <HAL_UART_TxCpltCallback>:
}
 8000afc:	4770      	bx	lr
	...

08000b00 <HAL_ADC_ConvCpltCallback>:
  if(hadc->Instance == ADC1)
 8000b00:	6802      	ldr	r2, [r0, #0]
 8000b02:	4b13      	ldr	r3, [pc, #76]	; (8000b50 <HAL_ADC_ConvCpltCallback+0x50>)
{
 8000b04:	b530      	push	{r4, r5, lr}
  if(hadc->Instance == ADC1)
 8000b06:	429a      	cmp	r2, r3
 8000b08:	d11d      	bne.n	8000b46 <HAL_ADC_ConvCpltCallback+0x46>
    if(aver_counter)
 8000b0a:	4c12      	ldr	r4, [pc, #72]	; (8000b54 <HAL_ADC_ConvCpltCallback+0x54>)
 8000b0c:	6821      	ldr	r1, [r4, #0]
 8000b0e:	b1d9      	cbz	r1, 8000b48 <HAL_ADC_ConvCpltCallback+0x48>
      ADC_averdata.batlvl += (uint32_t) ADC_data.batlvl;
 8000b10:	4b11      	ldr	r3, [pc, #68]	; (8000b58 <HAL_ADC_ConvCpltCallback+0x58>)
 8000b12:	4a12      	ldr	r2, [pc, #72]	; (8000b5c <HAL_ADC_ConvCpltCallback+0x5c>)
 8000b14:	6818      	ldr	r0, [r3, #0]
 8000b16:	8815      	ldrh	r5, [r2, #0]
      aver_counter--;
 8000b18:	3901      	subs	r1, #1
      ADC_averdata.batlvl += (uint32_t) ADC_data.batlvl;
 8000b1a:	4428      	add	r0, r5
 8000b1c:	6018      	str	r0, [r3, #0]
      ADC_averdata.jox += (uint32_t) ADC_data.jox;
 8000b1e:	8855      	ldrh	r5, [r2, #2]
 8000b20:	6858      	ldr	r0, [r3, #4]
      aver_counter--;
 8000b22:	6021      	str	r1, [r4, #0]
      ADC_averdata.jox += (uint32_t) ADC_data.jox;
 8000b24:	4428      	add	r0, r5
 8000b26:	6058      	str	r0, [r3, #4]
      ADC_averdata.joy += (uint32_t) ADC_data.joy;
 8000b28:	8895      	ldrh	r5, [r2, #4]
 8000b2a:	6898      	ldr	r0, [r3, #8]
 8000b2c:	4428      	add	r0, r5
 8000b2e:	6098      	str	r0, [r3, #8]
      ADC_averdata.tmpr += (uint32_t) ADC_data.tmpr;
 8000b30:	88d5      	ldrh	r5, [r2, #6]
 8000b32:	68d8      	ldr	r0, [r3, #12]
 8000b34:	4428      	add	r0, r5
 8000b36:	60d8      	str	r0, [r3, #12]
      ADC_averdata.vref += (uint32_t) ADC_data.vref;
 8000b38:	8910      	ldrh	r0, [r2, #8]
 8000b3a:	691a      	ldr	r2, [r3, #16]
 8000b3c:	4402      	add	r2, r0
 8000b3e:	611a      	str	r2, [r3, #16]
    adc_complete = 1;
 8000b40:	2201      	movs	r2, #1
 8000b42:	4b07      	ldr	r3, [pc, #28]	; (8000b60 <HAL_ADC_ConvCpltCallback+0x60>)
 8000b44:	601a      	str	r2, [r3, #0]
}
 8000b46:	bd30      	pop	{r4, r5, pc}
    else adc_avercomplete = 1;
 8000b48:	2201      	movs	r2, #1
 8000b4a:	4b06      	ldr	r3, [pc, #24]	; (8000b64 <HAL_ADC_ConvCpltCallback+0x64>)
 8000b4c:	601a      	str	r2, [r3, #0]
 8000b4e:	e7f7      	b.n	8000b40 <HAL_ADC_ConvCpltCallback+0x40>
 8000b50:	40012400 	.word	0x40012400
 8000b54:	2000000c 	.word	0x2000000c
 8000b58:	2000049c 	.word	0x2000049c
 8000b5c:	200004b0 	.word	0x200004b0
 8000b60:	20000008 	.word	0x20000008
 8000b64:	200004bc 	.word	0x200004bc

08000b68 <Error_Handler>:
 8000b68:	b672      	cpsid	i
  while (1)
 8000b6a:	e7fe      	b.n	8000b6a <Error_Handler+0x2>

08000b6c <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000b6c:	4b0e      	ldr	r3, [pc, #56]	; (8000ba8 <HAL_MspInit+0x3c>)
{
 8000b6e:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 8000b70:	699a      	ldr	r2, [r3, #24]
 8000b72:	f042 0201 	orr.w	r2, r2, #1
 8000b76:	619a      	str	r2, [r3, #24]
 8000b78:	699a      	ldr	r2, [r3, #24]
 8000b7a:	f002 0201 	and.w	r2, r2, #1
 8000b7e:	9200      	str	r2, [sp, #0]
 8000b80:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b82:	69da      	ldr	r2, [r3, #28]
 8000b84:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000b88:	61da      	str	r2, [r3, #28]
 8000b8a:	69db      	ldr	r3, [r3, #28]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000b8c:	4a07      	ldr	r2, [pc, #28]	; (8000bac <HAL_MspInit+0x40>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b92:	9301      	str	r3, [sp, #4]
 8000b94:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000b96:	6853      	ldr	r3, [r2, #4]
 8000b98:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000b9c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000ba0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ba2:	b002      	add	sp, #8
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop
 8000ba8:	40021000 	.word	0x40021000
 8000bac:	40010000 	.word	0x40010000

08000bb0 <HAL_ADC_MspInit>:
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bb0:	2210      	movs	r2, #16
{
 8000bb2:	b530      	push	{r4, r5, lr}
 8000bb4:	4605      	mov	r5, r0
 8000bb6:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bb8:	eb0d 0002 	add.w	r0, sp, r2
 8000bbc:	2100      	movs	r1, #0
 8000bbe:	f002 fa1b 	bl	8002ff8 <memset>
  if(hadc->Instance==ADC1)
 8000bc2:	682a      	ldr	r2, [r5, #0]
 8000bc4:	4b23      	ldr	r3, [pc, #140]	; (8000c54 <HAL_ADC_MspInit+0xa4>)
 8000bc6:	429a      	cmp	r2, r3
 8000bc8:	d142      	bne.n	8000c50 <HAL_ADC_MspInit+0xa0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000bca:	f503 436c 	add.w	r3, r3, #60416	; 0xec00
 8000bce:	699a      	ldr	r2, [r3, #24]
    PA0-WKUP     ------> ADC1_IN0
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = BAT_LVL_CTRL_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000bd0:	2403      	movs	r4, #3
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000bd2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000bd6:	619a      	str	r2, [r3, #24]
 8000bd8:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(BAT_LVL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8000bda:	481f      	ldr	r0, [pc, #124]	; (8000c58 <HAL_ADC_MspInit+0xa8>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000bdc:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8000be0:	9201      	str	r2, [sp, #4]
 8000be2:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000be4:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(BAT_LVL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8000be6:	a904      	add	r1, sp, #16
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000be8:	f042 0204 	orr.w	r2, r2, #4
 8000bec:	619a      	str	r2, [r3, #24]
 8000bee:	699a      	ldr	r2, [r3, #24]
 8000bf0:	f002 0204 	and.w	r2, r2, #4
 8000bf4:	9202      	str	r2, [sp, #8]
 8000bf6:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bf8:	699a      	ldr	r2, [r3, #24]
 8000bfa:	f042 0208 	orr.w	r2, r2, #8
 8000bfe:	619a      	str	r2, [r3, #24]
 8000c00:	699b      	ldr	r3, [r3, #24]
 8000c02:	f003 0308 	and.w	r3, r3, #8
 8000c06:	9303      	str	r3, [sp, #12]
 8000c08:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c0a:	2301      	movs	r3, #1
 8000c0c:	e9cd 3404 	strd	r3, r4, [sp, #16]
    HAL_GPIO_Init(BAT_LVL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8000c10:	f000 fe0c 	bl	800182c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = JOYSTICK_OX_Pin|JOYSTICK_OY_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c14:	4811      	ldr	r0, [pc, #68]	; (8000c5c <HAL_ADC_MspInit+0xac>)
 8000c16:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c18:	e9cd 4404 	strd	r4, r4, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c1c:	f000 fe06 	bl	800182c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000c20:	2300      	movs	r3, #0
    hdma_adc1.Instance = DMA1_Channel1;
 8000c22:	4c0f      	ldr	r4, [pc, #60]	; (8000c60 <HAL_ADC_MspInit+0xb0>)
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000c24:	4a0f      	ldr	r2, [pc, #60]	; (8000c64 <HAL_ADC_MspInit+0xb4>)
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000c26:	2180      	movs	r1, #128	; 0x80
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000c28:	e9c4 2300 	strd	r2, r3, [r4]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000c2c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c30:	e9c4 1203 	strd	r1, r2, [r4, #12]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000c34:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_adc1.Init.Mode = DMA_NORMAL;
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000c38:	4620      	mov	r0, r4
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8000c3a:	e9c4 2305 	strd	r2, r3, [r4, #20]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c3e:	60a3      	str	r3, [r4, #8]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000c40:	61e3      	str	r3, [r4, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000c42:	f000 fc93 	bl	800156c <HAL_DMA_Init>
 8000c46:	b108      	cbz	r0, 8000c4c <HAL_ADC_MspInit+0x9c>
    {
      Error_Handler();
 8000c48:	f7ff ff8e 	bl	8000b68 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000c4c:	622c      	str	r4, [r5, #32]
 8000c4e:	6265      	str	r5, [r4, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000c50:	b009      	add	sp, #36	; 0x24
 8000c52:	bd30      	pop	{r4, r5, pc}
 8000c54:	40012400 	.word	0x40012400
 8000c58:	40010800 	.word	0x40010800
 8000c5c:	40010c00 	.word	0x40010c00
 8000c60:	200004f0 	.word	0x200004f0
 8000c64:	40020008 	.word	0x40020008

08000c68 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000c68:	b507      	push	{r0, r1, r2, lr}
  if(hrtc->Instance==RTC)
 8000c6a:	4b0b      	ldr	r3, [pc, #44]	; (8000c98 <HAL_RTC_MspInit+0x30>)
 8000c6c:	6802      	ldr	r2, [r0, #0]
 8000c6e:	429a      	cmp	r2, r3
 8000c70:	d10f      	bne.n	8000c92 <HAL_RTC_MspInit+0x2a>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 8000c72:	f000 febb 	bl	80019ec <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 8000c76:	4b09      	ldr	r3, [pc, #36]	; (8000c9c <HAL_RTC_MspInit+0x34>)
 8000c78:	69da      	ldr	r2, [r3, #28]
 8000c7a:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8000c7e:	61da      	str	r2, [r3, #28]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000c80:	2201      	movs	r2, #1
    __HAL_RCC_BKP_CLK_ENABLE();
 8000c82:	69db      	ldr	r3, [r3, #28]
 8000c84:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000c88:	9301      	str	r3, [sp, #4]
 8000c8a:	9b01      	ldr	r3, [sp, #4]
    __HAL_RCC_RTC_ENABLE();
 8000c8c:	4b04      	ldr	r3, [pc, #16]	; (8000ca0 <HAL_RTC_MspInit+0x38>)
 8000c8e:	f8c3 243c 	str.w	r2, [r3, #1084]	; 0x43c
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000c92:	b003      	add	sp, #12
 8000c94:	f85d fb04 	ldr.w	pc, [sp], #4
 8000c98:	40002800 	.word	0x40002800
 8000c9c:	40021000 	.word	0x40021000
 8000ca0:	42420000 	.word	0x42420000

08000ca4 <HAL_SPI_MspInit>:
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ca4:	2210      	movs	r2, #16
{
 8000ca6:	b510      	push	{r4, lr}
 8000ca8:	4604      	mov	r4, r0
 8000caa:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cac:	eb0d 0002 	add.w	r0, sp, r2
 8000cb0:	2100      	movs	r1, #0
 8000cb2:	f002 f9a1 	bl	8002ff8 <memset>
  if(hspi->Instance==SPI1)
 8000cb6:	6823      	ldr	r3, [r4, #0]
 8000cb8:	4a25      	ldr	r2, [pc, #148]	; (8000d50 <HAL_SPI_MspInit+0xac>)
 8000cba:	4293      	cmp	r3, r2
 8000cbc:	d127      	bne.n	8000d0e <HAL_SPI_MspInit+0x6a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000cbe:	4b25      	ldr	r3, [pc, #148]	; (8000d54 <HAL_SPI_MspInit+0xb0>)
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cc0:	21b0      	movs	r1, #176	; 0xb0
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000cc2:	699a      	ldr	r2, [r3, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cc4:	4824      	ldr	r0, [pc, #144]	; (8000d58 <HAL_SPI_MspInit+0xb4>)
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000cc6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000cca:	619a      	str	r2, [r3, #24]
 8000ccc:	699a      	ldr	r2, [r3, #24]
 8000cce:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8000cd2:	9200      	str	r2, [sp, #0]
 8000cd4:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cd6:	699a      	ldr	r2, [r3, #24]
 8000cd8:	f042 0204 	orr.w	r2, r2, #4
 8000cdc:	619a      	str	r2, [r3, #24]
 8000cde:	699b      	ldr	r3, [r3, #24]
 8000ce0:	f003 0304 	and.w	r3, r3, #4
 8000ce4:	9301      	str	r3, [sp, #4]
 8000ce6:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ce8:	2302      	movs	r3, #2
 8000cea:	e9cd 1304 	strd	r1, r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000cee:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cf0:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000cf2:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cf4:	f000 fd9a 	bl	800182c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cf8:	2040      	movs	r0, #64	; 0x40
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	e9cd 0304 	strd	r0, r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d00:	4815      	ldr	r0, [pc, #84]	; (8000d58 <HAL_SPI_MspInit+0xb4>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d02:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d04:	a904      	add	r1, sp, #16
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = DISP_SPI_CS_Pin|DISP_SPI_SCK_Pin|GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d06:	f000 fd91 	bl	800182c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000d0a:	b008      	add	sp, #32
 8000d0c:	bd10      	pop	{r4, pc}
  else if(hspi->Instance==SPI2)
 8000d0e:	4a13      	ldr	r2, [pc, #76]	; (8000d5c <HAL_SPI_MspInit+0xb8>)
 8000d10:	4293      	cmp	r3, r2
 8000d12:	d1fa      	bne.n	8000d0a <HAL_SPI_MspInit+0x66>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000d14:	4b0f      	ldr	r3, [pc, #60]	; (8000d54 <HAL_SPI_MspInit+0xb0>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d16:	4812      	ldr	r0, [pc, #72]	; (8000d60 <HAL_SPI_MspInit+0xbc>)
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000d18:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d1a:	a904      	add	r1, sp, #16
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000d1c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000d20:	61da      	str	r2, [r3, #28]
 8000d22:	69da      	ldr	r2, [r3, #28]
 8000d24:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8000d28:	9202      	str	r2, [sp, #8]
 8000d2a:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d2c:	699a      	ldr	r2, [r3, #24]
 8000d2e:	f042 0208 	orr.w	r2, r2, #8
 8000d32:	619a      	str	r2, [r3, #24]
 8000d34:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d36:	f44f 4230 	mov.w	r2, #45056	; 0xb000
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d3a:	f003 0308 	and.w	r3, r3, #8
 8000d3e:	9303      	str	r3, [sp, #12]
 8000d40:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d42:	2302      	movs	r3, #2
 8000d44:	e9cd 2304 	strd	r2, r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d48:	2303      	movs	r3, #3
 8000d4a:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d4c:	e7db      	b.n	8000d06 <HAL_SPI_MspInit+0x62>
 8000d4e:	bf00      	nop
 8000d50:	40013000 	.word	0x40013000
 8000d54:	40021000 	.word	0x40021000
 8000d58:	40010800 	.word	0x40010800
 8000d5c:	40003800 	.word	0x40003800
 8000d60:	40010c00 	.word	0x40010c00

08000d64 <HAL_TIM_PWM_MspInit>:
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
  if(htim_pwm->Instance==TIM1)
 8000d64:	6802      	ldr	r2, [r0, #0]
 8000d66:	4b08      	ldr	r3, [pc, #32]	; (8000d88 <HAL_TIM_PWM_MspInit+0x24>)
{
 8000d68:	b082      	sub	sp, #8
  if(htim_pwm->Instance==TIM1)
 8000d6a:	429a      	cmp	r2, r3
 8000d6c:	d10a      	bne.n	8000d84 <HAL_TIM_PWM_MspInit+0x20>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000d6e:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 8000d72:	699a      	ldr	r2, [r3, #24]
 8000d74:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000d78:	619a      	str	r2, [r3, #24]
 8000d7a:	699b      	ldr	r3, [r3, #24]
 8000d7c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000d80:	9301      	str	r3, [sp, #4]
 8000d82:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000d84:	b002      	add	sp, #8
 8000d86:	4770      	bx	lr
 8000d88:	40012c00 	.word	0x40012c00

08000d8c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000d8c:	b510      	push	{r4, lr}
 8000d8e:	4604      	mov	r4, r0
 8000d90:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d92:	2210      	movs	r2, #16
 8000d94:	2100      	movs	r1, #0
 8000d96:	a802      	add	r0, sp, #8
 8000d98:	f002 f92e 	bl	8002ff8 <memset>
  if(htim->Instance==TIM1)
 8000d9c:	6822      	ldr	r2, [r4, #0]
 8000d9e:	4b0d      	ldr	r3, [pc, #52]	; (8000dd4 <HAL_TIM_MspPostInit+0x48>)
 8000da0:	429a      	cmp	r2, r3
 8000da2:	d114      	bne.n	8000dce <HAL_TIM_MspPostInit+0x42>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000da4:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 8000da8:	699a      	ldr	r2, [r3, #24]
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = DISP_BRIGHT_PWM_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    HAL_GPIO_Init(DISP_BRIGHT_PWM_GPIO_Port, &GPIO_InitStruct);
 8000daa:	480b      	ldr	r0, [pc, #44]	; (8000dd8 <HAL_TIM_MspPostInit+0x4c>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dac:	f042 0204 	orr.w	r2, r2, #4
 8000db0:	619a      	str	r2, [r3, #24]
 8000db2:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000db4:	f44f 7280 	mov.w	r2, #256	; 0x100
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000db8:	f003 0304 	and.w	r3, r3, #4
 8000dbc:	9301      	str	r3, [sp, #4]
 8000dbe:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dc0:	2302      	movs	r3, #2
    HAL_GPIO_Init(DISP_BRIGHT_PWM_GPIO_Port, &GPIO_InitStruct);
 8000dc2:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dc4:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dc8:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(DISP_BRIGHT_PWM_GPIO_Port, &GPIO_InitStruct);
 8000dca:	f000 fd2f 	bl	800182c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000dce:	b006      	add	sp, #24
 8000dd0:	bd10      	pop	{r4, pc}
 8000dd2:	bf00      	nop
 8000dd4:	40012c00 	.word	0x40012c00
 8000dd8:	40010800 	.word	0x40010800

08000ddc <HAL_UART_MspInit>:
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ddc:	2210      	movs	r2, #16
{
 8000dde:	b510      	push	{r4, lr}
 8000de0:	4604      	mov	r4, r0
 8000de2:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000de4:	eb0d 0002 	add.w	r0, sp, r2
 8000de8:	2100      	movs	r1, #0
 8000dea:	f002 f905 	bl	8002ff8 <memset>
  if(huart->Instance==USART1)
 8000dee:	6823      	ldr	r3, [r4, #0]
 8000df0:	4a33      	ldr	r2, [pc, #204]	; (8000ec0 <HAL_UART_MspInit+0xe4>)
 8000df2:	4293      	cmp	r3, r2
 8000df4:	d131      	bne.n	8000e5a <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000df6:	4b33      	ldr	r3, [pc, #204]	; (8000ec4 <HAL_UART_MspInit+0xe8>)
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ESP_UART_TX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000df8:	f44f 7100 	mov.w	r1, #512	; 0x200
    __HAL_RCC_USART1_CLK_ENABLE();
 8000dfc:	699a      	ldr	r2, [r3, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(ESP_UART_TX_GPIO_Port, &GPIO_InitStruct);
 8000dfe:	4832      	ldr	r0, [pc, #200]	; (8000ec8 <HAL_UART_MspInit+0xec>)
    __HAL_RCC_USART1_CLK_ENABLE();
 8000e00:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000e04:	619a      	str	r2, [r3, #24]
 8000e06:	699a      	ldr	r2, [r3, #24]

    GPIO_InitStruct.Pin = ESP_UART_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e08:	2400      	movs	r4, #0
    __HAL_RCC_USART1_CLK_ENABLE();
 8000e0a:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8000e0e:	9200      	str	r2, [sp, #0]
 8000e10:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e12:	699a      	ldr	r2, [r3, #24]
 8000e14:	f042 0204 	orr.w	r2, r2, #4
 8000e18:	619a      	str	r2, [r3, #24]
 8000e1a:	699b      	ldr	r3, [r3, #24]
 8000e1c:	f003 0304 	and.w	r3, r3, #4
 8000e20:	9301      	str	r3, [sp, #4]
 8000e22:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e24:	2302      	movs	r3, #2
 8000e26:	e9cd 1304 	strd	r1, r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e2a:	2303      	movs	r3, #3
    HAL_GPIO_Init(ESP_UART_TX_GPIO_Port, &GPIO_InitStruct);
 8000e2c:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e2e:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(ESP_UART_TX_GPIO_Port, &GPIO_InitStruct);
 8000e30:	f000 fcfc 	bl	800182c <HAL_GPIO_Init>
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e34:	f44f 6380 	mov.w	r3, #1024	; 0x400
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(ESP_UART_RX_GPIO_Port, &GPIO_InitStruct);
 8000e38:	4823      	ldr	r0, [pc, #140]	; (8000ec8 <HAL_UART_MspInit+0xec>)
 8000e3a:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e3c:	e9cd 3404 	strd	r3, r4, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e40:	9406      	str	r4, [sp, #24]
    HAL_GPIO_Init(ESP_UART_RX_GPIO_Port, &GPIO_InitStruct);
 8000e42:	f000 fcf3 	bl	800182c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000e46:	2025      	movs	r0, #37	; 0x25
 8000e48:	4622      	mov	r2, r4
 8000e4a:	4621      	mov	r1, r4
 8000e4c:	f000 fb3a 	bl	80014c4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000e50:	2025      	movs	r0, #37	; 0x25
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(EXT_RX_GPIO_Port, &GPIO_InitStruct);

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000e52:	f000 fb69 	bl	8001528 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000e56:	b008      	add	sp, #32
 8000e58:	bd10      	pop	{r4, pc}
  else if(huart->Instance==USART3)
 8000e5a:	4a1c      	ldr	r2, [pc, #112]	; (8000ecc <HAL_UART_MspInit+0xf0>)
 8000e5c:	4293      	cmp	r3, r2
 8000e5e:	d1fa      	bne.n	8000e56 <HAL_UART_MspInit+0x7a>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000e60:	4b18      	ldr	r3, [pc, #96]	; (8000ec4 <HAL_UART_MspInit+0xe8>)
    HAL_GPIO_Init(EXT_TX_GPIO_Port, &GPIO_InitStruct);
 8000e62:	481b      	ldr	r0, [pc, #108]	; (8000ed0 <HAL_UART_MspInit+0xf4>)
    __HAL_RCC_USART3_CLK_ENABLE();
 8000e64:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(EXT_TX_GPIO_Port, &GPIO_InitStruct);
 8000e66:	a904      	add	r1, sp, #16
    __HAL_RCC_USART3_CLK_ENABLE();
 8000e68:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8000e6c:	61da      	str	r2, [r3, #28]
 8000e6e:	69da      	ldr	r2, [r3, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e70:	2400      	movs	r4, #0
    __HAL_RCC_USART3_CLK_ENABLE();
 8000e72:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 8000e76:	9202      	str	r2, [sp, #8]
 8000e78:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e7a:	699a      	ldr	r2, [r3, #24]
 8000e7c:	f042 0208 	orr.w	r2, r2, #8
 8000e80:	619a      	str	r2, [r3, #24]
 8000e82:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e84:	f44f 6280 	mov.w	r2, #1024	; 0x400
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e88:	f003 0308 	and.w	r3, r3, #8
 8000e8c:	9303      	str	r3, [sp, #12]
 8000e8e:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e90:	2302      	movs	r3, #2
 8000e92:	e9cd 2304 	strd	r2, r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e96:	2303      	movs	r3, #3
 8000e98:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(EXT_TX_GPIO_Port, &GPIO_InitStruct);
 8000e9a:	f000 fcc7 	bl	800182c <HAL_GPIO_Init>
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e9e:	f44f 6300 	mov.w	r3, #2048	; 0x800
    HAL_GPIO_Init(EXT_RX_GPIO_Port, &GPIO_InitStruct);
 8000ea2:	480b      	ldr	r0, [pc, #44]	; (8000ed0 <HAL_UART_MspInit+0xf4>)
 8000ea4:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ea6:	e9cd 3404 	strd	r3, r4, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eaa:	9406      	str	r4, [sp, #24]
    HAL_GPIO_Init(EXT_RX_GPIO_Port, &GPIO_InitStruct);
 8000eac:	f000 fcbe 	bl	800182c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000eb0:	2027      	movs	r0, #39	; 0x27
 8000eb2:	4622      	mov	r2, r4
 8000eb4:	4621      	mov	r1, r4
 8000eb6:	f000 fb05 	bl	80014c4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000eba:	2027      	movs	r0, #39	; 0x27
 8000ebc:	e7c9      	b.n	8000e52 <HAL_UART_MspInit+0x76>
 8000ebe:	bf00      	nop
 8000ec0:	40013800 	.word	0x40013800
 8000ec4:	40021000 	.word	0x40021000
 8000ec8:	40010800 	.word	0x40010800
 8000ecc:	40004800 	.word	0x40004800
 8000ed0:	40010c00 	.word	0x40010c00

08000ed4 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ed4:	e7fe      	b.n	8000ed4 <NMI_Handler>

08000ed6 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ed6:	e7fe      	b.n	8000ed6 <HardFault_Handler>

08000ed8 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ed8:	e7fe      	b.n	8000ed8 <MemManage_Handler>

08000eda <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000eda:	e7fe      	b.n	8000eda <BusFault_Handler>

08000edc <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000edc:	e7fe      	b.n	8000edc <UsageFault_Handler>

08000ede <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ede:	4770      	bx	lr

08000ee0 <DebugMon_Handler>:
 8000ee0:	4770      	bx	lr

08000ee2 <PendSV_Handler>:
 8000ee2:	4770      	bx	lr

08000ee4 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ee4:	f000 b890 	b.w	8001008 <HAL_IncTick>

08000ee8 <DMA1_Channel1_IRQHandler>:
void DMA1_Channel1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000ee8:	4801      	ldr	r0, [pc, #4]	; (8000ef0 <DMA1_Channel1_IRQHandler+0x8>)
 8000eea:	f000 bc0d 	b.w	8001708 <HAL_DMA_IRQHandler>
 8000eee:	bf00      	nop
 8000ef0:	200004f0 	.word	0x200004f0

08000ef4 <USART1_IRQHandler>:
void USART1_IRQHandler(void)
{
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000ef4:	4801      	ldr	r0, [pc, #4]	; (8000efc <USART1_IRQHandler+0x8>)
 8000ef6:	f001 bf0d 	b.w	8002d14 <HAL_UART_IRQHandler>
 8000efa:	bf00      	nop
 8000efc:	20000640 	.word	0x20000640

08000f00 <USART3_IRQHandler>:
void USART3_IRQHandler(void)
{
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000f00:	4801      	ldr	r0, [pc, #4]	; (8000f08 <USART3_IRQHandler+0x8>)
 8000f02:	f001 bf07 	b.w	8002d14 <HAL_UART_IRQHandler>
 8000f06:	bf00      	nop
 8000f08:	20000684 	.word	0x20000684

08000f0c <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f0c:	4a0b      	ldr	r2, [pc, #44]	; (8000f3c <_sbrk+0x30>)
{
 8000f0e:	4603      	mov	r3, r0
  if (NULL == __sbrk_heap_end)
 8000f10:	6811      	ldr	r1, [r2, #0]
{
 8000f12:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 8000f14:	b909      	cbnz	r1, 8000f1a <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 8000f16:	490a      	ldr	r1, [pc, #40]	; (8000f40 <_sbrk+0x34>)
 8000f18:	6011      	str	r1, [r2, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f1a:	6810      	ldr	r0, [r2, #0]
 8000f1c:	4909      	ldr	r1, [pc, #36]	; (8000f44 <_sbrk+0x38>)
 8000f1e:	4c0a      	ldr	r4, [pc, #40]	; (8000f48 <_sbrk+0x3c>)
 8000f20:	4403      	add	r3, r0
 8000f22:	1b09      	subs	r1, r1, r4
 8000f24:	428b      	cmp	r3, r1
 8000f26:	d906      	bls.n	8000f36 <_sbrk+0x2a>
  {
    errno = ENOMEM;
 8000f28:	f002 f82e 	bl	8002f88 <__errno>
 8000f2c:	230c      	movs	r3, #12
 8000f2e:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8000f30:	f04f 30ff 	mov.w	r0, #4294967295

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 8000f34:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 8000f36:	6013      	str	r3, [r2, #0]
  return (void *)prev_heap_end;
 8000f38:	e7fc      	b.n	8000f34 <_sbrk+0x28>
 8000f3a:	bf00      	nop
 8000f3c:	200011e0 	.word	0x200011e0
 8000f40:	200011f8 	.word	0x200011f8
 8000f44:	20005000 	.word	0x20005000
 8000f48:	00000400 	.word	0x00000400

08000f4c <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f4c:	4770      	bx	lr
	...

08000f50 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f50:	480c      	ldr	r0, [pc, #48]	; (8000f84 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000f52:	490d      	ldr	r1, [pc, #52]	; (8000f88 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000f54:	4a0d      	ldr	r2, [pc, #52]	; (8000f8c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000f56:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f58:	e002      	b.n	8000f60 <LoopCopyDataInit>

08000f5a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f5a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f5c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f5e:	3304      	adds	r3, #4

08000f60 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f60:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f62:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f64:	d3f9      	bcc.n	8000f5a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f66:	4a0a      	ldr	r2, [pc, #40]	; (8000f90 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000f68:	4c0a      	ldr	r4, [pc, #40]	; (8000f94 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000f6a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f6c:	e001      	b.n	8000f72 <LoopFillZerobss>

08000f6e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f6e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f70:	3204      	adds	r2, #4

08000f72 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f72:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f74:	d3fb      	bcc.n	8000f6e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000f76:	f7ff ffe9 	bl	8000f4c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f7a:	f002 f80b 	bl	8002f94 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000f7e:	f7ff fa87 	bl	8000490 <main>
  bx lr
 8000f82:	4770      	bx	lr
  ldr r0, =_sdata
 8000f84:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f88:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8000f8c:	08003ebc 	.word	0x08003ebc
  ldr r2, =_sbss
 8000f90:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8000f94:	200011f8 	.word	0x200011f8

08000f98 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000f98:	e7fe      	b.n	8000f98 <ADC1_2_IRQHandler>
	...

08000f9c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f9c:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f9e:	4b0e      	ldr	r3, [pc, #56]	; (8000fd8 <HAL_InitTick+0x3c>)
{
 8000fa0:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fa2:	7818      	ldrb	r0, [r3, #0]
 8000fa4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fa8:	fbb3 f3f0 	udiv	r3, r3, r0
 8000fac:	4a0b      	ldr	r2, [pc, #44]	; (8000fdc <HAL_InitTick+0x40>)
 8000fae:	6810      	ldr	r0, [r2, #0]
 8000fb0:	fbb0 f0f3 	udiv	r0, r0, r3
 8000fb4:	f000 fac6 	bl	8001544 <HAL_SYSTICK_Config>
 8000fb8:	4604      	mov	r4, r0
 8000fba:	b958      	cbnz	r0, 8000fd4 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fbc:	2d0f      	cmp	r5, #15
 8000fbe:	d809      	bhi.n	8000fd4 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fc0:	4602      	mov	r2, r0
 8000fc2:	4629      	mov	r1, r5
 8000fc4:	f04f 30ff 	mov.w	r0, #4294967295
 8000fc8:	f000 fa7c 	bl	80014c4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fcc:	4620      	mov	r0, r4
 8000fce:	4b04      	ldr	r3, [pc, #16]	; (8000fe0 <HAL_InitTick+0x44>)
 8000fd0:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000fd2:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000fd4:	2001      	movs	r0, #1
 8000fd6:	e7fc      	b.n	8000fd2 <HAL_InitTick+0x36>
 8000fd8:	20000014 	.word	0x20000014
 8000fdc:	20000010 	.word	0x20000010
 8000fe0:	20000018 	.word	0x20000018

08000fe4 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fe4:	4a07      	ldr	r2, [pc, #28]	; (8001004 <HAL_Init+0x20>)
{
 8000fe6:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fe8:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fea:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fec:	f043 0310 	orr.w	r3, r3, #16
 8000ff0:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ff2:	f000 fa55 	bl	80014a0 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ff6:	200f      	movs	r0, #15
 8000ff8:	f7ff ffd0 	bl	8000f9c <HAL_InitTick>
  HAL_MspInit();
 8000ffc:	f7ff fdb6 	bl	8000b6c <HAL_MspInit>
}
 8001000:	2000      	movs	r0, #0
 8001002:	bd08      	pop	{r3, pc}
 8001004:	40022000 	.word	0x40022000

08001008 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001008:	4a03      	ldr	r2, [pc, #12]	; (8001018 <HAL_IncTick+0x10>)
 800100a:	4b04      	ldr	r3, [pc, #16]	; (800101c <HAL_IncTick+0x14>)
 800100c:	6811      	ldr	r1, [r2, #0]
 800100e:	781b      	ldrb	r3, [r3, #0]
 8001010:	440b      	add	r3, r1
 8001012:	6013      	str	r3, [r2, #0]
}
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop
 8001018:	200011e4 	.word	0x200011e4
 800101c:	20000014 	.word	0x20000014

08001020 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001020:	4b01      	ldr	r3, [pc, #4]	; (8001028 <HAL_GetTick+0x8>)
 8001022:	6818      	ldr	r0, [r3, #0]
}
 8001024:	4770      	bx	lr
 8001026:	bf00      	nop
 8001028:	200011e4 	.word	0x200011e4

0800102c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800102c:	b538      	push	{r3, r4, r5, lr}
 800102e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001030:	f7ff fff6 	bl	8001020 <HAL_GetTick>
 8001034:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001036:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8001038:	bf1e      	ittt	ne
 800103a:	4b04      	ldrne	r3, [pc, #16]	; (800104c <HAL_Delay+0x20>)
 800103c:	781b      	ldrbne	r3, [r3, #0]
 800103e:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001040:	f7ff ffee 	bl	8001020 <HAL_GetTick>
 8001044:	1b43      	subs	r3, r0, r5
 8001046:	42a3      	cmp	r3, r4
 8001048:	d3fa      	bcc.n	8001040 <HAL_Delay+0x14>
  {
  }
}
 800104a:	bd38      	pop	{r3, r4, r5, pc}
 800104c:	20000014 	.word	0x20000014

08001050 <ADC_DMAConvCplt>:
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001050:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 8001052:	b510      	push	{r4, lr}
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001054:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001056:	f012 0f50 	tst.w	r2, #80	; 0x50
 800105a:	d11b      	bne.n	8001094 <ADC_DMAConvCplt+0x44>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800105c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800105e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001062:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001064:	681a      	ldr	r2, [r3, #0]
 8001066:	6892      	ldr	r2, [r2, #8]
 8001068:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 800106c:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
 8001070:	d10c      	bne.n	800108c <ADC_DMAConvCplt+0x3c>
 8001072:	7b1a      	ldrb	r2, [r3, #12]
 8001074:	b952      	cbnz	r2, 800108c <ADC_DMAConvCplt+0x3c>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001076:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001078:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800107c:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800107e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001080:	04d2      	lsls	r2, r2, #19
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001082:	bf5e      	ittt	pl
 8001084:	6a9a      	ldrpl	r2, [r3, #40]	; 0x28
 8001086:	f042 0201 	orrpl.w	r2, r2, #1
 800108a:	629a      	strpl	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800108c:	4618      	mov	r0, r3
 800108e:	f7ff fd37 	bl	8000b00 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8001092:	bd10      	pop	{r4, pc}
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8001094:	6a1b      	ldr	r3, [r3, #32]
}
 8001096:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    hadc->DMA_Handle->XferErrorCallback(hdma);
 800109a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800109c:	4718      	bx	r3

0800109e <HAL_ADC_ConvHalfCpltCallback>:
 800109e:	4770      	bx	lr

080010a0 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80010a0:	b508      	push	{r3, lr}
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80010a2:	6a40      	ldr	r0, [r0, #36]	; 0x24
 80010a4:	f7ff fffb 	bl	800109e <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80010a8:	bd08      	pop	{r3, pc}

080010aa <HAL_ADC_ErrorCallback>:
 80010aa:	4770      	bx	lr

080010ac <ADC_DMAError>:
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80010ac:	6a40      	ldr	r0, [r0, #36]	; 0x24
{
 80010ae:	b508      	push	{r3, lr}
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80010b0:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80010b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80010b6:	6283      	str	r3, [r0, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80010b8:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80010ba:	f043 0304 	orr.w	r3, r3, #4
 80010be:	62c3      	str	r3, [r0, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80010c0:	f7ff fff3 	bl	80010aa <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80010c4:	bd08      	pop	{r3, pc}
	...

080010c8 <HAL_ADC_ConfigChannel>:
  __IO uint32_t wait_loop_index = 0U;
 80010c8:	2300      	movs	r3, #0
{ 
 80010ca:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0U;
 80010cc:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 80010ce:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
{ 
 80010d2:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 80010d4:	2b01      	cmp	r3, #1
 80010d6:	d06c      	beq.n	80011b2 <HAL_ADC_ConfigChannel+0xea>
 80010d8:	2301      	movs	r3, #1
 80010da:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  if (sConfig->Rank < 7U)
 80010de:	684d      	ldr	r5, [r1, #4]
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80010e0:	6802      	ldr	r2, [r0, #0]
  if (sConfig->Rank < 7U)
 80010e2:	2d06      	cmp	r5, #6
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80010e4:	6808      	ldr	r0, [r1, #0]
 80010e6:	eb05 0385 	add.w	r3, r5, r5, lsl #2
  if (sConfig->Rank < 7U)
 80010ea:	d822      	bhi.n	8001132 <HAL_ADC_ConfigChannel+0x6a>
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80010ec:	261f      	movs	r6, #31
 80010ee:	6b55      	ldr	r5, [r2, #52]	; 0x34
 80010f0:	3b05      	subs	r3, #5
 80010f2:	409e      	lsls	r6, r3
 80010f4:	ea25 0506 	bic.w	r5, r5, r6
 80010f8:	fa00 f303 	lsl.w	r3, r0, r3
 80010fc:	432b      	orrs	r3, r5
 80010fe:	6353      	str	r3, [r2, #52]	; 0x34
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001100:	2809      	cmp	r0, #9
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001102:	688b      	ldr	r3, [r1, #8]
 8001104:	eb00 0540 	add.w	r5, r0, r0, lsl #1
 8001108:	f04f 0107 	mov.w	r1, #7
  if (sConfig->Channel >= ADC_CHANNEL_10)
 800110c:	d929      	bls.n	8001162 <HAL_ADC_ConfigChannel+0x9a>
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 800110e:	68d6      	ldr	r6, [r2, #12]
 8001110:	3d1e      	subs	r5, #30
 8001112:	40a9      	lsls	r1, r5
 8001114:	ea26 0101 	bic.w	r1, r6, r1
 8001118:	40ab      	lsls	r3, r5
 800111a:	430b      	orrs	r3, r1
 800111c:	60d3      	str	r3, [r2, #12]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800111e:	f1a0 0310 	sub.w	r3, r0, #16
 8001122:	2b01      	cmp	r3, #1
 8001124:	d925      	bls.n	8001172 <HAL_ADC_ConfigChannel+0xaa>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001126:	2000      	movs	r0, #0
  __HAL_UNLOCK(hadc);
 8001128:	2300      	movs	r3, #0
 800112a:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
}
 800112e:	b002      	add	sp, #8
 8001130:	bd70      	pop	{r4, r5, r6, pc}
  else if (sConfig->Rank < 13U)
 8001132:	2d0c      	cmp	r5, #12
 8001134:	f04f 051f 	mov.w	r5, #31
 8001138:	d809      	bhi.n	800114e <HAL_ADC_ConfigChannel+0x86>
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800113a:	6b16      	ldr	r6, [r2, #48]	; 0x30
 800113c:	3b23      	subs	r3, #35	; 0x23
 800113e:	409d      	lsls	r5, r3
 8001140:	ea26 0505 	bic.w	r5, r6, r5
 8001144:	fa00 f303 	lsl.w	r3, r0, r3
 8001148:	432b      	orrs	r3, r5
 800114a:	6313      	str	r3, [r2, #48]	; 0x30
 800114c:	e7d8      	b.n	8001100 <HAL_ADC_ConfigChannel+0x38>
    MODIFY_REG(hadc->Instance->SQR1                        ,
 800114e:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
 8001150:	3b41      	subs	r3, #65	; 0x41
 8001152:	409d      	lsls	r5, r3
 8001154:	ea26 0505 	bic.w	r5, r6, r5
 8001158:	fa00 f303 	lsl.w	r3, r0, r3
 800115c:	432b      	orrs	r3, r5
 800115e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8001160:	e7ce      	b.n	8001100 <HAL_ADC_ConfigChannel+0x38>
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001162:	6910      	ldr	r0, [r2, #16]
 8001164:	40a9      	lsls	r1, r5
 8001166:	ea20 0101 	bic.w	r1, r0, r1
 800116a:	40ab      	lsls	r3, r5
 800116c:	430b      	orrs	r3, r1
 800116e:	6113      	str	r3, [r2, #16]
 8001170:	e7d9      	b.n	8001126 <HAL_ADC_ConfigChannel+0x5e>
    if (hadc->Instance == ADC1)
 8001172:	4b11      	ldr	r3, [pc, #68]	; (80011b8 <HAL_ADC_ConfigChannel+0xf0>)
 8001174:	429a      	cmp	r2, r3
 8001176:	d116      	bne.n	80011a6 <HAL_ADC_ConfigChannel+0xde>
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001178:	6893      	ldr	r3, [r2, #8]
 800117a:	021b      	lsls	r3, r3, #8
 800117c:	d4d3      	bmi.n	8001126 <HAL_ADC_ConfigChannel+0x5e>
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800117e:	6893      	ldr	r3, [r2, #8]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001180:	2810      	cmp	r0, #16
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001182:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001186:	6093      	str	r3, [r2, #8]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001188:	d1cd      	bne.n	8001126 <HAL_ADC_ConfigChannel+0x5e>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800118a:	4b0c      	ldr	r3, [pc, #48]	; (80011bc <HAL_ADC_ConfigChannel+0xf4>)
 800118c:	4a0c      	ldr	r2, [pc, #48]	; (80011c0 <HAL_ADC_ConfigChannel+0xf8>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	fbb3 f3f2 	udiv	r3, r3, r2
 8001194:	220a      	movs	r2, #10
 8001196:	4353      	muls	r3, r2
            wait_loop_index--;
 8001198:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 800119a:	9b01      	ldr	r3, [sp, #4]
 800119c:	2b00      	cmp	r3, #0
 800119e:	d0c2      	beq.n	8001126 <HAL_ADC_ConfigChannel+0x5e>
            wait_loop_index--;
 80011a0:	9b01      	ldr	r3, [sp, #4]
 80011a2:	3b01      	subs	r3, #1
 80011a4:	e7f8      	b.n	8001198 <HAL_ADC_ConfigChannel+0xd0>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80011a6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
      tmp_hal_status = HAL_ERROR;
 80011a8:	2001      	movs	r0, #1
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80011aa:	f043 0320 	orr.w	r3, r3, #32
 80011ae:	62a3      	str	r3, [r4, #40]	; 0x28
      tmp_hal_status = HAL_ERROR;
 80011b0:	e7ba      	b.n	8001128 <HAL_ADC_ConfigChannel+0x60>
  __HAL_LOCK(hadc);
 80011b2:	2002      	movs	r0, #2
 80011b4:	e7bb      	b.n	800112e <HAL_ADC_ConfigChannel+0x66>
 80011b6:	bf00      	nop
 80011b8:	40012400 	.word	0x40012400
 80011bc:	20000010 	.word	0x20000010
 80011c0:	000f4240 	.word	0x000f4240

080011c4 <ADC_Enable>:
  __IO uint32_t wait_loop_index = 0U;
 80011c4:	2300      	movs	r3, #0
{
 80011c6:	b537      	push	{r0, r1, r2, r4, r5, lr}
  __IO uint32_t wait_loop_index = 0U;
 80011c8:	9301      	str	r3, [sp, #4]
  if (ADC_IS_ENABLE(hadc) == RESET)
 80011ca:	6803      	ldr	r3, [r0, #0]
{
 80011cc:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 80011ce:	689a      	ldr	r2, [r3, #8]
 80011d0:	07d2      	lsls	r2, r2, #31
 80011d2:	d502      	bpl.n	80011da <ADC_Enable+0x16>
  return HAL_OK;
 80011d4:	2000      	movs	r0, #0
}
 80011d6:	b003      	add	sp, #12
 80011d8:	bd30      	pop	{r4, r5, pc}
    __HAL_ADC_ENABLE(hadc);
 80011da:	689a      	ldr	r2, [r3, #8]
 80011dc:	f042 0201 	orr.w	r2, r2, #1
 80011e0:	609a      	str	r2, [r3, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80011e2:	4b14      	ldr	r3, [pc, #80]	; (8001234 <ADC_Enable+0x70>)
 80011e4:	4a14      	ldr	r2, [pc, #80]	; (8001238 <ADC_Enable+0x74>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	fbb3 f3f2 	udiv	r3, r3, r2
      wait_loop_index--;
 80011ec:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 80011ee:	9b01      	ldr	r3, [sp, #4]
 80011f0:	b9e3      	cbnz	r3, 800122c <ADC_Enable+0x68>
    tickstart = HAL_GetTick();
 80011f2:	f7ff ff15 	bl	8001020 <HAL_GetTick>
 80011f6:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) == RESET)
 80011f8:	6823      	ldr	r3, [r4, #0]
 80011fa:	689b      	ldr	r3, [r3, #8]
 80011fc:	07db      	lsls	r3, r3, #31
 80011fe:	d4e9      	bmi.n	80011d4 <ADC_Enable+0x10>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001200:	f7ff ff0e 	bl	8001020 <HAL_GetTick>
 8001204:	1b40      	subs	r0, r0, r5
 8001206:	2802      	cmp	r0, #2
 8001208:	d9f6      	bls.n	80011f8 <ADC_Enable+0x34>
        if(ADC_IS_ENABLE(hadc) == RESET)
 800120a:	6823      	ldr	r3, [r4, #0]
 800120c:	689b      	ldr	r3, [r3, #8]
 800120e:	f013 0301 	ands.w	r3, r3, #1
 8001212:	d1f1      	bne.n	80011f8 <ADC_Enable+0x34>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001214:	6aa2      	ldr	r2, [r4, #40]	; 0x28
          return HAL_ERROR;
 8001216:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001218:	f042 0210 	orr.w	r2, r2, #16
 800121c:	62a2      	str	r2, [r4, #40]	; 0x28
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800121e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
          __HAL_UNLOCK(hadc);
 8001220:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001224:	f042 0201 	orr.w	r2, r2, #1
 8001228:	62e2      	str	r2, [r4, #44]	; 0x2c
          return HAL_ERROR;
 800122a:	e7d4      	b.n	80011d6 <ADC_Enable+0x12>
      wait_loop_index--;
 800122c:	9b01      	ldr	r3, [sp, #4]
 800122e:	3b01      	subs	r3, #1
 8001230:	e7dc      	b.n	80011ec <ADC_Enable+0x28>
 8001232:	bf00      	nop
 8001234:	20000010 	.word	0x20000010
 8001238:	000f4240 	.word	0x000f4240

0800123c <HAL_ADC_Start_DMA>:
{
 800123c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8001240:	4b40      	ldr	r3, [pc, #256]	; (8001344 <HAL_ADC_Start_DMA+0x108>)
{
 8001242:	4690      	mov	r8, r2
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8001244:	6802      	ldr	r2, [r0, #0]
{
 8001246:	4604      	mov	r4, r0
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8001248:	429a      	cmp	r2, r3
{
 800124a:	460f      	mov	r7, r1
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 800124c:	d002      	beq.n	8001254 <HAL_ADC_Start_DMA+0x18>
 800124e:	493e      	ldr	r1, [pc, #248]	; (8001348 <HAL_ADC_Start_DMA+0x10c>)
 8001250:	428a      	cmp	r2, r1
 8001252:	d103      	bne.n	800125c <HAL_ADC_Start_DMA+0x20>
 8001254:	685b      	ldr	r3, [r3, #4]
 8001256:	f413 2f70 	tst.w	r3, #983040	; 0xf0000
 800125a:	d16e      	bne.n	800133a <HAL_ADC_Start_DMA+0xfe>
    __HAL_LOCK(hadc);
 800125c:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8001260:	2b01      	cmp	r3, #1
 8001262:	d06c      	beq.n	800133e <HAL_ADC_Start_DMA+0x102>
 8001264:	2301      	movs	r3, #1
    tmp_hal_status = ADC_Enable(hadc);
 8001266:	4620      	mov	r0, r4
    __HAL_LOCK(hadc);
 8001268:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
    tmp_hal_status = ADC_Enable(hadc);
 800126c:	f7ff ffaa 	bl	80011c4 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8001270:	4606      	mov	r6, r0
 8001272:	2800      	cmp	r0, #0
 8001274:	d15d      	bne.n	8001332 <HAL_ADC_Start_DMA+0xf6>
      ADC_STATE_CLR_SET(hadc->State,
 8001276:	6aa5      	ldr	r5, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001278:	6821      	ldr	r1, [r4, #0]
 800127a:	4b33      	ldr	r3, [pc, #204]	; (8001348 <HAL_ADC_Start_DMA+0x10c>)
      ADC_STATE_CLR_SET(hadc->State,
 800127c:	f425 6570 	bic.w	r5, r5, #3840	; 0xf00
 8001280:	f025 0501 	bic.w	r5, r5, #1
 8001284:	f445 7580 	orr.w	r5, r5, #256	; 0x100
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001288:	4299      	cmp	r1, r3
      ADC_STATE_CLR_SET(hadc->State,
 800128a:	62a5      	str	r5, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800128c:	d104      	bne.n	8001298 <HAL_ADC_Start_DMA+0x5c>
 800128e:	4a2d      	ldr	r2, [pc, #180]	; (8001344 <HAL_ADC_Start_DMA+0x108>)
 8001290:	6853      	ldr	r3, [r2, #4]
 8001292:	f413 2f70 	tst.w	r3, #983040	; 0xf0000
 8001296:	d13e      	bne.n	8001316 <HAL_ADC_Start_DMA+0xda>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001298:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800129a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800129e:	62a3      	str	r3, [r4, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80012a0:	684b      	ldr	r3, [r1, #4]
 80012a2:	055a      	lsls	r2, r3, #21
 80012a4:	d505      	bpl.n	80012b2 <HAL_ADC_Start_DMA+0x76>
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80012a6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80012a8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80012ac:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80012b0:	62a3      	str	r3, [r4, #40]	; 0x28
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80012b2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80012b4:	6a20      	ldr	r0, [r4, #32]
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80012b6:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80012ba:	bf18      	it	ne
 80012bc:	6ae3      	ldrne	r3, [r4, #44]	; 0x2c
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80012be:	463a      	mov	r2, r7
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80012c0:	bf18      	it	ne
 80012c2:	f023 0306 	bicne.w	r3, r3, #6
        ADC_CLEAR_ERRORCODE(hadc);
 80012c6:	62e3      	str	r3, [r4, #44]	; 0x2c
      __HAL_UNLOCK(hadc);
 80012c8:	2300      	movs	r3, #0
 80012ca:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80012ce:	4b1f      	ldr	r3, [pc, #124]	; (800134c <HAL_ADC_Start_DMA+0x110>)
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80012d0:	314c      	adds	r1, #76	; 0x4c
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80012d2:	6283      	str	r3, [r0, #40]	; 0x28
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80012d4:	4b1e      	ldr	r3, [pc, #120]	; (8001350 <HAL_ADC_Start_DMA+0x114>)
 80012d6:	62c3      	str	r3, [r0, #44]	; 0x2c
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80012d8:	4b1e      	ldr	r3, [pc, #120]	; (8001354 <HAL_ADC_Start_DMA+0x118>)
 80012da:	6303      	str	r3, [r0, #48]	; 0x30
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80012dc:	f06f 0302 	mvn.w	r3, #2
 80012e0:	f841 3c4c 	str.w	r3, [r1, #-76]
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80012e4:	f851 3c44 	ldr.w	r3, [r1, #-68]
 80012e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012ec:	f841 3c44 	str.w	r3, [r1, #-68]
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80012f0:	4643      	mov	r3, r8
 80012f2:	f000 f969 	bl	80015c8 <HAL_DMA_Start_IT>
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 80012f6:	6823      	ldr	r3, [r4, #0]
 80012f8:	689a      	ldr	r2, [r3, #8]
 80012fa:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 80012fe:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001302:	689a      	ldr	r2, [r3, #8]
 8001304:	bf0c      	ite	eq
 8001306:	f442 02a0 	orreq.w	r2, r2, #5242880	; 0x500000
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 800130a:	f442 1280 	orrne.w	r2, r2, #1048576	; 0x100000
 800130e:	609a      	str	r2, [r3, #8]
}
 8001310:	4630      	mov	r0, r6
 8001312:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001316:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001318:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800131c:	62a3      	str	r3, [r4, #40]	; 0x28
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800131e:	6853      	ldr	r3, [r2, #4]
 8001320:	055b      	lsls	r3, r3, #21
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001322:	bf41      	itttt	mi
 8001324:	6aa0      	ldrmi	r0, [r4, #40]	; 0x28
 8001326:	f420 5040 	bicmi.w	r0, r0, #12288	; 0x3000
 800132a:	f440 5080 	orrmi.w	r0, r0, #4096	; 0x1000
 800132e:	62a0      	strmi	r0, [r4, #40]	; 0x28
 8001330:	e7bf      	b.n	80012b2 <HAL_ADC_Start_DMA+0x76>
      __HAL_UNLOCK(hadc);
 8001332:	2300      	movs	r3, #0
 8001334:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 8001338:	e7ea      	b.n	8001310 <HAL_ADC_Start_DMA+0xd4>
    tmp_hal_status = HAL_ERROR;
 800133a:	2601      	movs	r6, #1
 800133c:	e7e8      	b.n	8001310 <HAL_ADC_Start_DMA+0xd4>
    __HAL_LOCK(hadc);
 800133e:	2602      	movs	r6, #2
 8001340:	e7e6      	b.n	8001310 <HAL_ADC_Start_DMA+0xd4>
 8001342:	bf00      	nop
 8001344:	40012400 	.word	0x40012400
 8001348:	40012800 	.word	0x40012800
 800134c:	08001051 	.word	0x08001051
 8001350:	080010a1 	.word	0x080010a1
 8001354:	080010ad 	.word	0x080010ad

08001358 <ADC_ConversionStop_Disable>:
{
 8001358:	b538      	push	{r3, r4, r5, lr}
  if (ADC_IS_ENABLE(hadc) != RESET)
 800135a:	6803      	ldr	r3, [r0, #0]
{
 800135c:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET)
 800135e:	689a      	ldr	r2, [r3, #8]
 8001360:	07d1      	lsls	r1, r2, #31
 8001362:	d401      	bmi.n	8001368 <ADC_ConversionStop_Disable+0x10>
  return HAL_OK;
 8001364:	2000      	movs	r0, #0
}
 8001366:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_ADC_DISABLE(hadc);
 8001368:	689a      	ldr	r2, [r3, #8]
 800136a:	f022 0201 	bic.w	r2, r2, #1
 800136e:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8001370:	f7ff fe56 	bl	8001020 <HAL_GetTick>
 8001374:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001376:	6823      	ldr	r3, [r4, #0]
 8001378:	689b      	ldr	r3, [r3, #8]
 800137a:	07db      	lsls	r3, r3, #31
 800137c:	d5f2      	bpl.n	8001364 <ADC_ConversionStop_Disable+0xc>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800137e:	f7ff fe4f 	bl	8001020 <HAL_GetTick>
 8001382:	1b40      	subs	r0, r0, r5
 8001384:	2802      	cmp	r0, #2
 8001386:	d9f6      	bls.n	8001376 <ADC_ConversionStop_Disable+0x1e>
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001388:	6823      	ldr	r3, [r4, #0]
 800138a:	689b      	ldr	r3, [r3, #8]
 800138c:	07da      	lsls	r2, r3, #31
 800138e:	d5f2      	bpl.n	8001376 <ADC_ConversionStop_Disable+0x1e>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001390:	6aa3      	ldr	r3, [r4, #40]	; 0x28
          return HAL_ERROR;
 8001392:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001394:	f043 0310 	orr.w	r3, r3, #16
 8001398:	62a3      	str	r3, [r4, #40]	; 0x28
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800139a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800139c:	f043 0301 	orr.w	r3, r3, #1
 80013a0:	62e3      	str	r3, [r4, #44]	; 0x2c
          return HAL_ERROR;
 80013a2:	e7e0      	b.n	8001366 <ADC_ConversionStop_Disable+0xe>

080013a4 <HAL_ADC_Init>:
{
 80013a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(hadc == NULL)
 80013a6:	4604      	mov	r4, r0
 80013a8:	2800      	cmp	r0, #0
 80013aa:	d06e      	beq.n	800148a <HAL_ADC_Init+0xe6>
  if (hadc->State == HAL_ADC_STATE_RESET)
 80013ac:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80013ae:	b923      	cbnz	r3, 80013ba <HAL_ADC_Init+0x16>
    ADC_CLEAR_ERRORCODE(hadc);
 80013b0:	62c3      	str	r3, [r0, #44]	; 0x2c
    hadc->Lock = HAL_UNLOCKED;
 80013b2:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    HAL_ADC_MspInit(hadc);
 80013b6:	f7ff fbfb 	bl	8000bb0 <HAL_ADC_MspInit>
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80013ba:	4620      	mov	r0, r4
 80013bc:	f7ff ffcc 	bl	8001358 <ADC_ConversionStop_Disable>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80013c0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80013c2:	f013 0310 	ands.w	r3, r3, #16
 80013c6:	d162      	bne.n	800148e <HAL_ADC_Init+0xea>
 80013c8:	2800      	cmp	r0, #0
 80013ca:	d160      	bne.n	800148e <HAL_ADC_Init+0xea>
    ADC_STATE_CLR_SET(hadc->State,
 80013cc:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80013ce:	69e5      	ldr	r5, [r4, #28]
 80013d0:	6861      	ldr	r1, [r4, #4]
    ADC_STATE_CLR_SET(hadc->State,
 80013d2:	f422 5288 	bic.w	r2, r2, #4352	; 0x1100
 80013d6:	f022 0202 	bic.w	r2, r2, #2
 80013da:	f042 0202 	orr.w	r2, r2, #2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80013de:	4329      	orrs	r1, r5
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80013e0:	68a5      	ldr	r5, [r4, #8]
    ADC_STATE_CLR_SET(hadc->State,
 80013e2:	62a2      	str	r2, [r4, #40]	; 0x28
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80013e4:	7b22      	ldrb	r2, [r4, #12]
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80013e6:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80013ea:	ea41 0142 	orr.w	r1, r1, r2, lsl #1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80013ee:	d037      	beq.n	8001460 <HAL_ADC_Init+0xbc>
 80013f0:	2d01      	cmp	r5, #1
 80013f2:	bf14      	ite	ne
 80013f4:	2700      	movne	r7, #0
 80013f6:	f44f 7780 	moveq.w	r7, #256	; 0x100
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80013fa:	7d26      	ldrb	r6, [r4, #20]
 80013fc:	2e01      	cmp	r6, #1
 80013fe:	d106      	bne.n	800140e <HAL_ADC_Init+0x6a>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001400:	bb82      	cbnz	r2, 8001464 <HAL_ADC_Init+0xc0>
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001402:	69a2      	ldr	r2, [r4, #24]
 8001404:	3a01      	subs	r2, #1
 8001406:	ea47 3642 	orr.w	r6, r7, r2, lsl #13
 800140a:	f446 6700 	orr.w	r7, r6, #2048	; 0x800
      MODIFY_REG(hadc->Instance->CR1,
 800140e:	6822      	ldr	r2, [r4, #0]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001410:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
      MODIFY_REG(hadc->Instance->CR1,
 8001414:	6856      	ldr	r6, [r2, #4]
 8001416:	f426 4669 	bic.w	r6, r6, #59648	; 0xe900
 800141a:	ea46 0607 	orr.w	r6, r6, r7
 800141e:	6056      	str	r6, [r2, #4]
      MODIFY_REG(hadc->Instance->CR2,
 8001420:	6897      	ldr	r7, [r2, #8]
 8001422:	4e1d      	ldr	r6, [pc, #116]	; (8001498 <HAL_ADC_Init+0xf4>)
 8001424:	ea06 0607 	and.w	r6, r6, r7
 8001428:	ea46 0601 	orr.w	r6, r6, r1
 800142c:	6096      	str	r6, [r2, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800142e:	d001      	beq.n	8001434 <HAL_ADC_Init+0x90>
 8001430:	2d01      	cmp	r5, #1
 8001432:	d102      	bne.n	800143a <HAL_ADC_Init+0x96>
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001434:	6923      	ldr	r3, [r4, #16]
 8001436:	3b01      	subs	r3, #1
 8001438:	051b      	lsls	r3, r3, #20
    MODIFY_REG(hadc->Instance->SQR1,
 800143a:	6ad5      	ldr	r5, [r2, #44]	; 0x2c
 800143c:	f425 0570 	bic.w	r5, r5, #15728640	; 0xf00000
 8001440:	432b      	orrs	r3, r5
 8001442:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001444:	6892      	ldr	r2, [r2, #8]
 8001446:	4b15      	ldr	r3, [pc, #84]	; (800149c <HAL_ADC_Init+0xf8>)
 8001448:	4013      	ands	r3, r2
 800144a:	4299      	cmp	r1, r3
 800144c:	d113      	bne.n	8001476 <HAL_ADC_Init+0xd2>
      ADC_CLEAR_ERRORCODE(hadc);
 800144e:	2300      	movs	r3, #0
 8001450:	62e3      	str	r3, [r4, #44]	; 0x2c
      ADC_STATE_CLR_SET(hadc->State,
 8001452:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001454:	f023 0303 	bic.w	r3, r3, #3
 8001458:	f043 0301 	orr.w	r3, r3, #1
 800145c:	62a3      	str	r3, [r4, #40]	; 0x28
}
 800145e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001460:	462f      	mov	r7, r5
 8001462:	e7ca      	b.n	80013fa <HAL_ADC_Init+0x56>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001464:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001466:	f042 0220 	orr.w	r2, r2, #32
 800146a:	62a2      	str	r2, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800146c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800146e:	f042 0201 	orr.w	r2, r2, #1
 8001472:	62e2      	str	r2, [r4, #44]	; 0x2c
 8001474:	e7cb      	b.n	800140e <HAL_ADC_Init+0x6a>
      ADC_STATE_CLR_SET(hadc->State,
 8001476:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001478:	f023 0312 	bic.w	r3, r3, #18
 800147c:	f043 0310 	orr.w	r3, r3, #16
 8001480:	62a3      	str	r3, [r4, #40]	; 0x28
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001482:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001484:	f043 0301 	orr.w	r3, r3, #1
 8001488:	62e3      	str	r3, [r4, #44]	; 0x2c
    return HAL_ERROR;
 800148a:	2001      	movs	r0, #1
 800148c:	e7e7      	b.n	800145e <HAL_ADC_Init+0xba>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800148e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001490:	f043 0310 	orr.w	r3, r3, #16
 8001494:	62a3      	str	r3, [r4, #40]	; 0x28
    tmp_hal_status = HAL_ERROR;
 8001496:	e7f8      	b.n	800148a <HAL_ADC_Init+0xe6>
 8001498:	ffe1f7fd 	.word	0xffe1f7fd
 800149c:	ff1f0efe 	.word	0xff1f0efe

080014a0 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014a0:	4907      	ldr	r1, [pc, #28]	; (80014c0 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80014a2:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014a4:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80014a6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014aa:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80014ae:	0412      	lsls	r2, r2, #16
 80014b0:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014b4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80014b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 80014bc:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80014be:	4770      	bx	lr
 80014c0:	e000ed00 	.word	0xe000ed00

080014c4 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014c4:	4b16      	ldr	r3, [pc, #88]	; (8001520 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014c6:	b530      	push	{r4, r5, lr}
 80014c8:	68dc      	ldr	r4, [r3, #12]
 80014ca:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014ce:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014d2:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014d4:	2b04      	cmp	r3, #4
 80014d6:	bf28      	it	cs
 80014d8:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014da:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014dc:	f04f 35ff 	mov.w	r5, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014e0:	bf98      	it	ls
 80014e2:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014e4:	fa05 f303 	lsl.w	r3, r5, r3
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014e8:	bf88      	it	hi
 80014ea:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014ec:	ea21 0303 	bic.w	r3, r1, r3
 80014f0:	40a3      	lsls	r3, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014f2:	fa05 f404 	lsl.w	r4, r5, r4
 80014f6:	ea22 0204 	bic.w	r2, r2, r4
  if ((int32_t)(IRQn) >= 0)
 80014fa:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014fc:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001500:	bfac      	ite	ge
 8001502:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001506:	4a07      	ldrlt	r2, [pc, #28]	; (8001524 <HAL_NVIC_SetPriority+0x60>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001508:	ea4f 1303 	mov.w	r3, r3, lsl #4
 800150c:	b2db      	uxtb	r3, r3
 800150e:	bfab      	itete	ge
 8001510:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001514:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001518:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800151c:	5413      	strblt	r3, [r2, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800151e:	bd30      	pop	{r4, r5, pc}
 8001520:	e000ed00 	.word	0xe000ed00
 8001524:	e000ed14 	.word	0xe000ed14

08001528 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001528:	2800      	cmp	r0, #0
 800152a:	db08      	blt.n	800153e <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800152c:	2301      	movs	r3, #1
 800152e:	0942      	lsrs	r2, r0, #5
 8001530:	f000 001f 	and.w	r0, r0, #31
 8001534:	fa03 f000 	lsl.w	r0, r3, r0
 8001538:	4b01      	ldr	r3, [pc, #4]	; (8001540 <HAL_NVIC_EnableIRQ+0x18>)
 800153a:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800153e:	4770      	bx	lr
 8001540:	e000e100 	.word	0xe000e100

08001544 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001544:	3801      	subs	r0, #1
 8001546:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800154a:	d20b      	bcs.n	8001564 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800154c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001550:	21f0      	movs	r1, #240	; 0xf0
 8001552:	4a05      	ldr	r2, [pc, #20]	; (8001568 <HAL_SYSTICK_Config+0x24>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001554:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001556:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800155a:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800155c:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800155e:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001560:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001562:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001564:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001566:	4770      	bx	lr
 8001568:	e000ed00 	.word	0xe000ed00

0800156c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800156c:	b510      	push	{r4, lr}
  uint32_t tmp = 0U;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800156e:	b320      	cbz	r0, 80015ba <HAL_DMA_Init+0x4e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001570:	2214      	movs	r2, #20
 8001572:	6801      	ldr	r1, [r0, #0]
 8001574:	4b12      	ldr	r3, [pc, #72]	; (80015c0 <HAL_DMA_Init+0x54>)
 8001576:	440b      	add	r3, r1
 8001578:	fbb3 f3f2 	udiv	r3, r3, r2
 800157c:	009b      	lsls	r3, r3, #2
 800157e:	6403      	str	r3, [r0, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001580:	4b10      	ldr	r3, [pc, #64]	; (80015c4 <HAL_DMA_Init+0x58>)

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001582:	680a      	ldr	r2, [r1, #0]
  hdma->DmaBaseAddress = DMA1;
 8001584:	63c3      	str	r3, [r0, #60]	; 0x3c
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001586:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
 800158a:	4323      	orrs	r3, r4
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800158c:	68c4      	ldr	r4, [r0, #12]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800158e:	f422 527f 	bic.w	r2, r2, #16320	; 0x3fc0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001592:	4323      	orrs	r3, r4
 8001594:	6904      	ldr	r4, [r0, #16]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001596:	f022 0230 	bic.w	r2, r2, #48	; 0x30
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800159a:	4323      	orrs	r3, r4
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800159c:	6944      	ldr	r4, [r0, #20]
 800159e:	4323      	orrs	r3, r4
 80015a0:	6984      	ldr	r4, [r0, #24]
 80015a2:	4323      	orrs	r3, r4
          hdma->Init.Mode                | hdma->Init.Priority;
 80015a4:	69c4      	ldr	r4, [r0, #28]
 80015a6:	4323      	orrs	r3, r4
  tmp |=  hdma->Init.Direction        |
 80015a8:	4313      	orrs	r3, r2

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80015aa:	600b      	str	r3, [r1, #0]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80015ac:	f44f 7280 	mov.w	r2, #256	; 0x100
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80015b0:	2300      	movs	r3, #0
  hdma->Lock = HAL_UNLOCKED;
 80015b2:	8402      	strh	r2, [r0, #32]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80015b4:	6383      	str	r3, [r0, #56]	; 0x38

  return HAL_OK;
 80015b6:	4618      	mov	r0, r3
}
 80015b8:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80015ba:	2001      	movs	r0, #1
 80015bc:	e7fc      	b.n	80015b8 <HAL_DMA_Init+0x4c>
 80015be:	bf00      	nop
 80015c0:	bffdfff8 	.word	0xbffdfff8
 80015c4:	40020000 	.word	0x40020000

080015c8 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80015c8:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80015ca:	f890 4020 	ldrb.w	r4, [r0, #32]
 80015ce:	2c01      	cmp	r4, #1
 80015d0:	d034      	beq.n	800163c <HAL_DMA_Start_IT+0x74>
 80015d2:	2401      	movs	r4, #1
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80015d4:	f890 5021 	ldrb.w	r5, [r0, #33]	; 0x21
  __HAL_LOCK(hdma);
 80015d8:	f880 4020 	strb.w	r4, [r0, #32]
  if(HAL_DMA_STATE_READY == hdma->State)
 80015dc:	42a5      	cmp	r5, r4
 80015de:	f04f 0600 	mov.w	r6, #0
 80015e2:	f04f 0402 	mov.w	r4, #2
 80015e6:	d127      	bne.n	8001638 <HAL_DMA_Start_IT+0x70>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80015e8:	f880 4021 	strb.w	r4, [r0, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80015ec:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80015ee:	6386      	str	r6, [r0, #56]	; 0x38
    __HAL_DMA_DISABLE(hdma);
 80015f0:	6826      	ldr	r6, [r4, #0]
 80015f2:	f026 0601 	bic.w	r6, r6, #1
 80015f6:	6026      	str	r6, [r4, #0]
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80015f8:	e9d0 670f 	ldrd	r6, r7, [r0, #60]	; 0x3c
 80015fc:	40bd      	lsls	r5, r7
 80015fe:	6075      	str	r5, [r6, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001600:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001602:	6843      	ldr	r3, [r0, #4]
 8001604:	2b10      	cmp	r3, #16
    if(NULL != hdma->XferHalfCpltCallback)
 8001606:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001608:	bf0b      	itete	eq
 800160a:	60a2      	streq	r2, [r4, #8]
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 800160c:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 800160e:	60e1      	streq	r1, [r4, #12]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8001610:	60e2      	strne	r2, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback)
 8001612:	b14b      	cbz	r3, 8001628 <HAL_DMA_Start_IT+0x60>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001614:	6823      	ldr	r3, [r4, #0]
 8001616:	f043 030e 	orr.w	r3, r3, #14
  HAL_StatusTypeDef status = HAL_OK;
 800161a:	2000      	movs	r0, #0
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800161c:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 800161e:	6823      	ldr	r3, [r4, #0]
 8001620:	f043 0301 	orr.w	r3, r3, #1
 8001624:	6023      	str	r3, [r4, #0]
}
 8001626:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001628:	6823      	ldr	r3, [r4, #0]
 800162a:	f023 0304 	bic.w	r3, r3, #4
 800162e:	6023      	str	r3, [r4, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001630:	6823      	ldr	r3, [r4, #0]
 8001632:	f043 030a 	orr.w	r3, r3, #10
 8001636:	e7f0      	b.n	800161a <HAL_DMA_Start_IT+0x52>
    __HAL_UNLOCK(hdma); 
 8001638:	f880 6020 	strb.w	r6, [r0, #32]
  __HAL_LOCK(hdma);
 800163c:	2002      	movs	r0, #2
 800163e:	e7f2      	b.n	8001626 <HAL_DMA_Start_IT+0x5e>

08001640 <HAL_DMA_Abort>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001640:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 8001644:	2b02      	cmp	r3, #2
 8001646:	d006      	beq.n	8001656 <HAL_DMA_Abort+0x16>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001648:	2304      	movs	r3, #4
 800164a:	6383      	str	r3, [r0, #56]	; 0x38
    __HAL_UNLOCK(hdma);
 800164c:	2300      	movs	r3, #0
 800164e:	f880 3020 	strb.w	r3, [r0, #32]
    return HAL_ERROR;
 8001652:	2001      	movs	r0, #1
 8001654:	4770      	bx	lr
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001656:	6803      	ldr	r3, [r0, #0]
 8001658:	681a      	ldr	r2, [r3, #0]
 800165a:	f022 020e 	bic.w	r2, r2, #14
 800165e:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 8001660:	681a      	ldr	r2, [r3, #0]
 8001662:	f022 0201 	bic.w	r2, r2, #1
 8001666:	601a      	str	r2, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001668:	2301      	movs	r3, #1
 800166a:	e9d0 210f 	ldrd	r2, r1, [r0, #60]	; 0x3c
 800166e:	408b      	lsls	r3, r1
 8001670:	6053      	str	r3, [r2, #4]
  __HAL_UNLOCK(hdma);      
 8001672:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001676:	8403      	strh	r3, [r0, #32]
  return status; 
 8001678:	2000      	movs	r0, #0
}
 800167a:	4770      	bx	lr

0800167c <HAL_DMA_Abort_IT>:
{  
 800167c:	b508      	push	{r3, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800167e:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 8001682:	2b02      	cmp	r3, #2
 8001684:	d003      	beq.n	800168e <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001686:	2304      	movs	r3, #4
 8001688:	6383      	str	r3, [r0, #56]	; 0x38
    status = HAL_ERROR;
 800168a:	2001      	movs	r0, #1
}
 800168c:	bd08      	pop	{r3, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800168e:	6803      	ldr	r3, [r0, #0]
 8001690:	681a      	ldr	r2, [r3, #0]
 8001692:	f022 020e 	bic.w	r2, r2, #14
 8001696:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 8001698:	681a      	ldr	r2, [r3, #0]
 800169a:	f022 0201 	bic.w	r2, r2, #1
 800169e:	601a      	str	r2, [r3, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80016a0:	4a17      	ldr	r2, [pc, #92]	; (8001700 <HAL_DMA_Abort_IT+0x84>)
 80016a2:	4293      	cmp	r3, r2
 80016a4:	d01c      	beq.n	80016e0 <HAL_DMA_Abort_IT+0x64>
 80016a6:	3214      	adds	r2, #20
 80016a8:	4293      	cmp	r3, r2
 80016aa:	d01b      	beq.n	80016e4 <HAL_DMA_Abort_IT+0x68>
 80016ac:	3214      	adds	r2, #20
 80016ae:	4293      	cmp	r3, r2
 80016b0:	d01a      	beq.n	80016e8 <HAL_DMA_Abort_IT+0x6c>
 80016b2:	3214      	adds	r2, #20
 80016b4:	4293      	cmp	r3, r2
 80016b6:	d01a      	beq.n	80016ee <HAL_DMA_Abort_IT+0x72>
 80016b8:	3214      	adds	r2, #20
 80016ba:	4293      	cmp	r3, r2
 80016bc:	d01a      	beq.n	80016f4 <HAL_DMA_Abort_IT+0x78>
 80016be:	3214      	adds	r2, #20
 80016c0:	4293      	cmp	r3, r2
 80016c2:	bf0c      	ite	eq
 80016c4:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
 80016c8:	f04f 7380 	movne.w	r3, #16777216	; 0x1000000
 80016cc:	4a0d      	ldr	r2, [pc, #52]	; (8001704 <HAL_DMA_Abort_IT+0x88>)
 80016ce:	6053      	str	r3, [r2, #4]
    __HAL_UNLOCK(hdma);
 80016d0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80016d4:	8403      	strh	r3, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 80016d6:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80016d8:	b17b      	cbz	r3, 80016fa <HAL_DMA_Abort_IT+0x7e>
      hdma->XferAbortCallback(hdma);
 80016da:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 80016dc:	2000      	movs	r0, #0
 80016de:	e7d5      	b.n	800168c <HAL_DMA_Abort_IT+0x10>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80016e0:	2301      	movs	r3, #1
 80016e2:	e7f3      	b.n	80016cc <HAL_DMA_Abort_IT+0x50>
 80016e4:	2310      	movs	r3, #16
 80016e6:	e7f1      	b.n	80016cc <HAL_DMA_Abort_IT+0x50>
 80016e8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80016ec:	e7ee      	b.n	80016cc <HAL_DMA_Abort_IT+0x50>
 80016ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016f2:	e7eb      	b.n	80016cc <HAL_DMA_Abort_IT+0x50>
 80016f4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80016f8:	e7e8      	b.n	80016cc <HAL_DMA_Abort_IT+0x50>
  HAL_StatusTypeDef status = HAL_OK;
 80016fa:	4618      	mov	r0, r3
 80016fc:	e7c6      	b.n	800168c <HAL_DMA_Abort_IT+0x10>
 80016fe:	bf00      	nop
 8001700:	40020008 	.word	0x40020008
 8001704:	40020000 	.word	0x40020000

08001708 <HAL_DMA_IRQHandler>:
{
 8001708:	b470      	push	{r4, r5, r6}
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800170a:	2504      	movs	r5, #4
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800170c:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800170e:	6c02      	ldr	r2, [r0, #64]	; 0x40
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001710:	6834      	ldr	r4, [r6, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8001712:	6803      	ldr	r3, [r0, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001714:	4095      	lsls	r5, r2
 8001716:	4225      	tst	r5, r4
  uint32_t source_it = hdma->Instance->CCR;
 8001718:	6819      	ldr	r1, [r3, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800171a:	d032      	beq.n	8001782 <HAL_DMA_IRQHandler+0x7a>
 800171c:	074d      	lsls	r5, r1, #29
 800171e:	d530      	bpl.n	8001782 <HAL_DMA_IRQHandler+0x7a>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001720:	681a      	ldr	r2, [r3, #0]
 8001722:	0696      	lsls	r6, r2, #26
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001724:	bf5e      	ittt	pl
 8001726:	681a      	ldrpl	r2, [r3, #0]
 8001728:	f022 0204 	bicpl.w	r2, r2, #4
 800172c:	601a      	strpl	r2, [r3, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800172e:	4a3d      	ldr	r2, [pc, #244]	; (8001824 <HAL_DMA_IRQHandler+0x11c>)
 8001730:	4293      	cmp	r3, r2
 8001732:	d019      	beq.n	8001768 <HAL_DMA_IRQHandler+0x60>
 8001734:	3214      	adds	r2, #20
 8001736:	4293      	cmp	r3, r2
 8001738:	d018      	beq.n	800176c <HAL_DMA_IRQHandler+0x64>
 800173a:	3214      	adds	r2, #20
 800173c:	4293      	cmp	r3, r2
 800173e:	d017      	beq.n	8001770 <HAL_DMA_IRQHandler+0x68>
 8001740:	3214      	adds	r2, #20
 8001742:	4293      	cmp	r3, r2
 8001744:	d017      	beq.n	8001776 <HAL_DMA_IRQHandler+0x6e>
 8001746:	3214      	adds	r2, #20
 8001748:	4293      	cmp	r3, r2
 800174a:	d017      	beq.n	800177c <HAL_DMA_IRQHandler+0x74>
 800174c:	3214      	adds	r2, #20
 800174e:	4293      	cmp	r3, r2
 8001750:	bf0c      	ite	eq
 8001752:	f44f 0380 	moveq.w	r3, #4194304	; 0x400000
 8001756:	f04f 6380 	movne.w	r3, #67108864	; 0x4000000
 800175a:	4a33      	ldr	r2, [pc, #204]	; (8001828 <HAL_DMA_IRQHandler+0x120>)
 800175c:	6053      	str	r3, [r2, #4]
    if(hdma->XferHalfCpltCallback != NULL)
 800175e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    if (hdma->XferErrorCallback != NULL)
 8001760:	2b00      	cmp	r3, #0
 8001762:	d05c      	beq.n	800181e <HAL_DMA_IRQHandler+0x116>
}
 8001764:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 8001766:	4718      	bx	r3
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001768:	2304      	movs	r3, #4
 800176a:	e7f6      	b.n	800175a <HAL_DMA_IRQHandler+0x52>
 800176c:	2340      	movs	r3, #64	; 0x40
 800176e:	e7f4      	b.n	800175a <HAL_DMA_IRQHandler+0x52>
 8001770:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001774:	e7f1      	b.n	800175a <HAL_DMA_IRQHandler+0x52>
 8001776:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800177a:	e7ee      	b.n	800175a <HAL_DMA_IRQHandler+0x52>
 800177c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001780:	e7eb      	b.n	800175a <HAL_DMA_IRQHandler+0x52>
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001782:	2502      	movs	r5, #2
 8001784:	4095      	lsls	r5, r2
 8001786:	4225      	tst	r5, r4
 8001788:	d035      	beq.n	80017f6 <HAL_DMA_IRQHandler+0xee>
 800178a:	078d      	lsls	r5, r1, #30
 800178c:	d533      	bpl.n	80017f6 <HAL_DMA_IRQHandler+0xee>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800178e:	681a      	ldr	r2, [r3, #0]
 8001790:	0694      	lsls	r4, r2, #26
 8001792:	d406      	bmi.n	80017a2 <HAL_DMA_IRQHandler+0x9a>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001794:	681a      	ldr	r2, [r3, #0]
 8001796:	f022 020a 	bic.w	r2, r2, #10
 800179a:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 800179c:	2201      	movs	r2, #1
 800179e:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80017a2:	4a20      	ldr	r2, [pc, #128]	; (8001824 <HAL_DMA_IRQHandler+0x11c>)
 80017a4:	4293      	cmp	r3, r2
 80017a6:	d019      	beq.n	80017dc <HAL_DMA_IRQHandler+0xd4>
 80017a8:	3214      	adds	r2, #20
 80017aa:	4293      	cmp	r3, r2
 80017ac:	d018      	beq.n	80017e0 <HAL_DMA_IRQHandler+0xd8>
 80017ae:	3214      	adds	r2, #20
 80017b0:	4293      	cmp	r3, r2
 80017b2:	d017      	beq.n	80017e4 <HAL_DMA_IRQHandler+0xdc>
 80017b4:	3214      	adds	r2, #20
 80017b6:	4293      	cmp	r3, r2
 80017b8:	d017      	beq.n	80017ea <HAL_DMA_IRQHandler+0xe2>
 80017ba:	3214      	adds	r2, #20
 80017bc:	4293      	cmp	r3, r2
 80017be:	d017      	beq.n	80017f0 <HAL_DMA_IRQHandler+0xe8>
 80017c0:	3214      	adds	r2, #20
 80017c2:	4293      	cmp	r3, r2
 80017c4:	bf0c      	ite	eq
 80017c6:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
 80017ca:	f04f 7300 	movne.w	r3, #33554432	; 0x2000000
 80017ce:	4a16      	ldr	r2, [pc, #88]	; (8001828 <HAL_DMA_IRQHandler+0x120>)
 80017d0:	6053      	str	r3, [r2, #4]
    __HAL_UNLOCK(hdma);
 80017d2:	2300      	movs	r3, #0
 80017d4:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferCpltCallback != NULL)
 80017d8:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80017da:	e7c1      	b.n	8001760 <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80017dc:	2302      	movs	r3, #2
 80017de:	e7f6      	b.n	80017ce <HAL_DMA_IRQHandler+0xc6>
 80017e0:	2320      	movs	r3, #32
 80017e2:	e7f4      	b.n	80017ce <HAL_DMA_IRQHandler+0xc6>
 80017e4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80017e8:	e7f1      	b.n	80017ce <HAL_DMA_IRQHandler+0xc6>
 80017ea:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80017ee:	e7ee      	b.n	80017ce <HAL_DMA_IRQHandler+0xc6>
 80017f0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80017f4:	e7eb      	b.n	80017ce <HAL_DMA_IRQHandler+0xc6>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80017f6:	2508      	movs	r5, #8
 80017f8:	4095      	lsls	r5, r2
 80017fa:	4225      	tst	r5, r4
 80017fc:	d00f      	beq.n	800181e <HAL_DMA_IRQHandler+0x116>
 80017fe:	0709      	lsls	r1, r1, #28
 8001800:	d50d      	bpl.n	800181e <HAL_DMA_IRQHandler+0x116>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001802:	6819      	ldr	r1, [r3, #0]
 8001804:	f021 010e 	bic.w	r1, r1, #14
 8001808:	6019      	str	r1, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800180a:	2301      	movs	r3, #1
 800180c:	fa03 f202 	lsl.w	r2, r3, r2
 8001810:	6072      	str	r2, [r6, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001812:	6383      	str	r3, [r0, #56]	; 0x38
    __HAL_UNLOCK(hdma);
 8001814:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001818:	8403      	strh	r3, [r0, #32]
    if (hdma->XferErrorCallback != NULL)
 800181a:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800181c:	e7a0      	b.n	8001760 <HAL_DMA_IRQHandler+0x58>
}
 800181e:	bc70      	pop	{r4, r5, r6}
 8001820:	4770      	bx	lr
 8001822:	bf00      	nop
 8001824:	40020008 	.word	0x40020008
 8001828:	40020000 	.word	0x40020000

0800182c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800182c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001830:	2200      	movs	r2, #0
  uint32_t position = 0x00u;
 8001832:	4616      	mov	r6, r2
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001834:	4f64      	ldr	r7, [pc, #400]	; (80019c8 <HAL_GPIO_Init+0x19c>)
 8001836:	4b65      	ldr	r3, [pc, #404]	; (80019cc <HAL_GPIO_Init+0x1a0>)
      switch (GPIO_Init->Mode)
 8001838:	f8df c194 	ldr.w	ip, [pc, #404]	; 80019d0 <HAL_GPIO_Init+0x1a4>
 800183c:	f8df e194 	ldr.w	lr, [pc, #404]	; 80019d4 <HAL_GPIO_Init+0x1a8>
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001840:	680d      	ldr	r5, [r1, #0]
 8001842:	fa35 f406 	lsrs.w	r4, r5, r6
 8001846:	d102      	bne.n	800184e <HAL_GPIO_Init+0x22>
      }
    }

	position++;
  }
}
 8001848:	b003      	add	sp, #12
 800184a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ioposition = (0x01uL << position);
 800184e:	f04f 0801 	mov.w	r8, #1
 8001852:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001856:	ea05 0408 	and.w	r4, r5, r8
    if (iocurrent == ioposition)
 800185a:	ea38 0505 	bics.w	r5, r8, r5
 800185e:	d17b      	bne.n	8001958 <HAL_GPIO_Init+0x12c>
      switch (GPIO_Init->Mode)
 8001860:	684d      	ldr	r5, [r1, #4]
 8001862:	2d03      	cmp	r5, #3
 8001864:	d807      	bhi.n	8001876 <HAL_GPIO_Init+0x4a>
 8001866:	3d01      	subs	r5, #1
 8001868:	2d02      	cmp	r5, #2
 800186a:	f200 8088 	bhi.w	800197e <HAL_GPIO_Init+0x152>
 800186e:	e8df f005 	tbb	[pc, r5]
 8001872:	9b96      	.short	0x9b96
 8001874:	a1          	.byte	0xa1
 8001875:	00          	.byte	0x00
 8001876:	2d12      	cmp	r5, #18
 8001878:	f000 8099 	beq.w	80019ae <HAL_GPIO_Init+0x182>
 800187c:	d86e      	bhi.n	800195c <HAL_GPIO_Init+0x130>
 800187e:	2d11      	cmp	r5, #17
 8001880:	f000 808f 	beq.w	80019a2 <HAL_GPIO_Init+0x176>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001884:	2cff      	cmp	r4, #255	; 0xff
 8001886:	bf98      	it	ls
 8001888:	4682      	movls	sl, r0
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800188a:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800188e:	bf88      	it	hi
 8001890:	f100 0a04 	addhi.w	sl, r0, #4
 8001894:	ea4f 0586 	mov.w	r5, r6, lsl #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001898:	f8da 8000 	ldr.w	r8, [sl]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800189c:	bf88      	it	hi
 800189e:	3d20      	subhi	r5, #32
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80018a0:	fa09 fb05 	lsl.w	fp, r9, r5
 80018a4:	ea28 080b 	bic.w	r8, r8, fp
 80018a8:	fa02 f505 	lsl.w	r5, r2, r5
 80018ac:	ea48 0505 	orr.w	r5, r8, r5
 80018b0:	f8ca 5000 	str.w	r5, [sl]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80018b4:	f8d1 a004 	ldr.w	sl, [r1, #4]
 80018b8:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 80018bc:	d04c      	beq.n	8001958 <HAL_GPIO_Init+0x12c>
        __HAL_RCC_AFIO_CLK_ENABLE();
 80018be:	69bd      	ldr	r5, [r7, #24]
 80018c0:	f026 0803 	bic.w	r8, r6, #3
 80018c4:	f045 0501 	orr.w	r5, r5, #1
 80018c8:	61bd      	str	r5, [r7, #24]
 80018ca:	69bd      	ldr	r5, [r7, #24]
 80018cc:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 80018d0:	f005 0501 	and.w	r5, r5, #1
 80018d4:	9501      	str	r5, [sp, #4]
 80018d6:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80018da:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 80018de:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80018e0:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2u];
 80018e4:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80018e8:	fa09 f90b 	lsl.w	r9, r9, fp
 80018ec:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80018f0:	4d39      	ldr	r5, [pc, #228]	; (80019d8 <HAL_GPIO_Init+0x1ac>)
 80018f2:	42a8      	cmp	r0, r5
 80018f4:	d062      	beq.n	80019bc <HAL_GPIO_Init+0x190>
 80018f6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80018fa:	42a8      	cmp	r0, r5
 80018fc:	d060      	beq.n	80019c0 <HAL_GPIO_Init+0x194>
 80018fe:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001902:	42a8      	cmp	r0, r5
 8001904:	d05e      	beq.n	80019c4 <HAL_GPIO_Init+0x198>
 8001906:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800190a:	42a8      	cmp	r0, r5
 800190c:	bf0c      	ite	eq
 800190e:	2503      	moveq	r5, #3
 8001910:	2504      	movne	r5, #4
 8001912:	fa05 f50b 	lsl.w	r5, r5, fp
 8001916:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2u] = temp;
 800191a:	f8c8 5008 	str.w	r5, [r8, #8]
          SET_BIT(EXTI->IMR, iocurrent);
 800191e:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001920:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 8001924:	bf14      	ite	ne
 8001926:	4325      	orrne	r5, r4
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001928:	43a5      	biceq	r5, r4
 800192a:	601d      	str	r5, [r3, #0]
          SET_BIT(EXTI->EMR, iocurrent);
 800192c:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800192e:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 8001932:	bf14      	ite	ne
 8001934:	4325      	orrne	r5, r4
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001936:	43a5      	biceq	r5, r4
 8001938:	605d      	str	r5, [r3, #4]
          SET_BIT(EXTI->RTSR, iocurrent);
 800193a:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800193c:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8001940:	bf14      	ite	ne
 8001942:	4325      	orrne	r5, r4
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001944:	43a5      	biceq	r5, r4
 8001946:	609d      	str	r5, [r3, #8]
          SET_BIT(EXTI->FTSR, iocurrent);
 8001948:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800194a:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 800194e:	bf14      	ite	ne
 8001950:	432c      	orrne	r4, r5
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001952:	ea25 0404 	biceq.w	r4, r5, r4
 8001956:	60dc      	str	r4, [r3, #12]
	position++;
 8001958:	3601      	adds	r6, #1
 800195a:	e771      	b.n	8001840 <HAL_GPIO_Init+0x14>
      switch (GPIO_Init->Mode)
 800195c:	f8df 907c 	ldr.w	r9, [pc, #124]	; 80019dc <HAL_GPIO_Init+0x1b0>
 8001960:	454d      	cmp	r5, r9
 8001962:	d00c      	beq.n	800197e <HAL_GPIO_Init+0x152>
 8001964:	d817      	bhi.n	8001996 <HAL_GPIO_Init+0x16a>
 8001966:	f5a9 1980 	sub.w	r9, r9, #1048576	; 0x100000
 800196a:	454d      	cmp	r5, r9
 800196c:	d007      	beq.n	800197e <HAL_GPIO_Init+0x152>
 800196e:	f509 2970 	add.w	r9, r9, #983040	; 0xf0000
 8001972:	454d      	cmp	r5, r9
 8001974:	d003      	beq.n	800197e <HAL_GPIO_Init+0x152>
 8001976:	f5a9 1980 	sub.w	r9, r9, #1048576	; 0x100000
 800197a:	454d      	cmp	r5, r9
 800197c:	d182      	bne.n	8001884 <HAL_GPIO_Init+0x58>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800197e:	688a      	ldr	r2, [r1, #8]
 8001980:	b1d2      	cbz	r2, 80019b8 <HAL_GPIO_Init+0x18c>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001982:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 8001984:	bf08      	it	eq
 8001986:	f8c0 8010 	streq.w	r8, [r0, #16]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800198a:	f04f 0208 	mov.w	r2, #8
            GPIOx->BRR = ioposition;
 800198e:	bf18      	it	ne
 8001990:	f8c0 8014 	strne.w	r8, [r0, #20]
 8001994:	e776      	b.n	8001884 <HAL_GPIO_Init+0x58>
      switch (GPIO_Init->Mode)
 8001996:	4565      	cmp	r5, ip
 8001998:	d0f1      	beq.n	800197e <HAL_GPIO_Init+0x152>
 800199a:	4575      	cmp	r5, lr
 800199c:	e7ee      	b.n	800197c <HAL_GPIO_Init+0x150>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800199e:	68ca      	ldr	r2, [r1, #12]
          break;
 80019a0:	e770      	b.n	8001884 <HAL_GPIO_Init+0x58>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80019a2:	68ca      	ldr	r2, [r1, #12]
 80019a4:	3204      	adds	r2, #4
          break;
 80019a6:	e76d      	b.n	8001884 <HAL_GPIO_Init+0x58>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80019a8:	68ca      	ldr	r2, [r1, #12]
 80019aa:	3208      	adds	r2, #8
          break;
 80019ac:	e76a      	b.n	8001884 <HAL_GPIO_Init+0x58>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80019ae:	68ca      	ldr	r2, [r1, #12]
 80019b0:	320c      	adds	r2, #12
          break;
 80019b2:	e767      	b.n	8001884 <HAL_GPIO_Init+0x58>
      switch (GPIO_Init->Mode)
 80019b4:	2200      	movs	r2, #0
 80019b6:	e765      	b.n	8001884 <HAL_GPIO_Init+0x58>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80019b8:	2204      	movs	r2, #4
 80019ba:	e763      	b.n	8001884 <HAL_GPIO_Init+0x58>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80019bc:	2500      	movs	r5, #0
 80019be:	e7a8      	b.n	8001912 <HAL_GPIO_Init+0xe6>
 80019c0:	2501      	movs	r5, #1
 80019c2:	e7a6      	b.n	8001912 <HAL_GPIO_Init+0xe6>
 80019c4:	2502      	movs	r5, #2
 80019c6:	e7a4      	b.n	8001912 <HAL_GPIO_Init+0xe6>
 80019c8:	40021000 	.word	0x40021000
 80019cc:	40010400 	.word	0x40010400
 80019d0:	10310000 	.word	0x10310000
 80019d4:	10320000 	.word	0x10320000
 80019d8:	40010800 	.word	0x40010800
 80019dc:	10220000 	.word	0x10220000

080019e0 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80019e0:	b10a      	cbz	r2, 80019e6 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80019e2:	6101      	str	r1, [r0, #16]
  }
}
 80019e4:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80019e6:	0409      	lsls	r1, r1, #16
 80019e8:	e7fb      	b.n	80019e2 <HAL_GPIO_WritePin+0x2>
	...

080019ec <HAL_PWR_EnableBkUpAccess>:
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 80019ec:	2201      	movs	r2, #1
 80019ee:	4b01      	ldr	r3, [pc, #4]	; (80019f4 <HAL_PWR_EnableBkUpAccess+0x8>)
 80019f0:	621a      	str	r2, [r3, #32]
}
 80019f2:	4770      	bx	lr
 80019f4:	420e0000 	.word	0x420e0000

080019f8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80019f8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80019fc:	4605      	mov	r5, r0
 80019fe:	b338      	cbz	r0, 8001a50 <HAL_RCC_OscConfig+0x58>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a00:	6803      	ldr	r3, [r0, #0]
 8001a02:	07db      	lsls	r3, r3, #31
 8001a04:	d410      	bmi.n	8001a28 <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a06:	682b      	ldr	r3, [r5, #0]
 8001a08:	079f      	lsls	r7, r3, #30
 8001a0a:	d45e      	bmi.n	8001aca <HAL_RCC_OscConfig+0xd2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a0c:	682b      	ldr	r3, [r5, #0]
 8001a0e:	0719      	lsls	r1, r3, #28
 8001a10:	f100 8095 	bmi.w	8001b3e <HAL_RCC_OscConfig+0x146>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a14:	682b      	ldr	r3, [r5, #0]
 8001a16:	075a      	lsls	r2, r3, #29
 8001a18:	f100 80c1 	bmi.w	8001b9e <HAL_RCC_OscConfig+0x1a6>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a1c:	69e8      	ldr	r0, [r5, #28]
 8001a1e:	2800      	cmp	r0, #0
 8001a20:	f040 812c 	bne.w	8001c7c <HAL_RCC_OscConfig+0x284>
        }
      }
    }
  }

  return HAL_OK;
 8001a24:	2000      	movs	r0, #0
 8001a26:	e029      	b.n	8001a7c <HAL_RCC_OscConfig+0x84>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001a28:	4c90      	ldr	r4, [pc, #576]	; (8001c6c <HAL_RCC_OscConfig+0x274>)
 8001a2a:	6863      	ldr	r3, [r4, #4]
 8001a2c:	f003 030c 	and.w	r3, r3, #12
 8001a30:	2b04      	cmp	r3, #4
 8001a32:	d007      	beq.n	8001a44 <HAL_RCC_OscConfig+0x4c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001a34:	6863      	ldr	r3, [r4, #4]
 8001a36:	f003 030c 	and.w	r3, r3, #12
 8001a3a:	2b08      	cmp	r3, #8
 8001a3c:	d10a      	bne.n	8001a54 <HAL_RCC_OscConfig+0x5c>
 8001a3e:	6863      	ldr	r3, [r4, #4]
 8001a40:	03de      	lsls	r6, r3, #15
 8001a42:	d507      	bpl.n	8001a54 <HAL_RCC_OscConfig+0x5c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a44:	6823      	ldr	r3, [r4, #0]
 8001a46:	039c      	lsls	r4, r3, #14
 8001a48:	d5dd      	bpl.n	8001a06 <HAL_RCC_OscConfig+0xe>
 8001a4a:	686b      	ldr	r3, [r5, #4]
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d1da      	bne.n	8001a06 <HAL_RCC_OscConfig+0xe>
          return HAL_ERROR;
 8001a50:	2001      	movs	r0, #1
 8001a52:	e013      	b.n	8001a7c <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a54:	686b      	ldr	r3, [r5, #4]
 8001a56:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a5a:	d112      	bne.n	8001a82 <HAL_RCC_OscConfig+0x8a>
 8001a5c:	6823      	ldr	r3, [r4, #0]
 8001a5e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a62:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001a64:	f7ff fadc 	bl	8001020 <HAL_GetTick>
 8001a68:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a6a:	6823      	ldr	r3, [r4, #0]
 8001a6c:	0398      	lsls	r0, r3, #14
 8001a6e:	d4ca      	bmi.n	8001a06 <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a70:	f7ff fad6 	bl	8001020 <HAL_GetTick>
 8001a74:	1b80      	subs	r0, r0, r6
 8001a76:	2864      	cmp	r0, #100	; 0x64
 8001a78:	d9f7      	bls.n	8001a6a <HAL_RCC_OscConfig+0x72>
            return HAL_TIMEOUT;
 8001a7a:	2003      	movs	r0, #3
}
 8001a7c:	b002      	add	sp, #8
 8001a7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a82:	b99b      	cbnz	r3, 8001aac <HAL_RCC_OscConfig+0xb4>
 8001a84:	6823      	ldr	r3, [r4, #0]
 8001a86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a8a:	6023      	str	r3, [r4, #0]
 8001a8c:	6823      	ldr	r3, [r4, #0]
 8001a8e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a92:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001a94:	f7ff fac4 	bl	8001020 <HAL_GetTick>
 8001a98:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a9a:	6823      	ldr	r3, [r4, #0]
 8001a9c:	0399      	lsls	r1, r3, #14
 8001a9e:	d5b2      	bpl.n	8001a06 <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001aa0:	f7ff fabe 	bl	8001020 <HAL_GetTick>
 8001aa4:	1b80      	subs	r0, r0, r6
 8001aa6:	2864      	cmp	r0, #100	; 0x64
 8001aa8:	d9f7      	bls.n	8001a9a <HAL_RCC_OscConfig+0xa2>
 8001aaa:	e7e6      	b.n	8001a7a <HAL_RCC_OscConfig+0x82>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001aac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ab0:	6823      	ldr	r3, [r4, #0]
 8001ab2:	d103      	bne.n	8001abc <HAL_RCC_OscConfig+0xc4>
 8001ab4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ab8:	6023      	str	r3, [r4, #0]
 8001aba:	e7cf      	b.n	8001a5c <HAL_RCC_OscConfig+0x64>
 8001abc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ac0:	6023      	str	r3, [r4, #0]
 8001ac2:	6823      	ldr	r3, [r4, #0]
 8001ac4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ac8:	e7cb      	b.n	8001a62 <HAL_RCC_OscConfig+0x6a>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001aca:	4c68      	ldr	r4, [pc, #416]	; (8001c6c <HAL_RCC_OscConfig+0x274>)
 8001acc:	6863      	ldr	r3, [r4, #4]
 8001ace:	f013 0f0c 	tst.w	r3, #12
 8001ad2:	d007      	beq.n	8001ae4 <HAL_RCC_OscConfig+0xec>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001ad4:	6863      	ldr	r3, [r4, #4]
 8001ad6:	f003 030c 	and.w	r3, r3, #12
 8001ada:	2b08      	cmp	r3, #8
 8001adc:	d110      	bne.n	8001b00 <HAL_RCC_OscConfig+0x108>
 8001ade:	6863      	ldr	r3, [r4, #4]
 8001ae0:	03da      	lsls	r2, r3, #15
 8001ae2:	d40d      	bmi.n	8001b00 <HAL_RCC_OscConfig+0x108>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ae4:	6823      	ldr	r3, [r4, #0]
 8001ae6:	079b      	lsls	r3, r3, #30
 8001ae8:	d502      	bpl.n	8001af0 <HAL_RCC_OscConfig+0xf8>
 8001aea:	692b      	ldr	r3, [r5, #16]
 8001aec:	2b01      	cmp	r3, #1
 8001aee:	d1af      	bne.n	8001a50 <HAL_RCC_OscConfig+0x58>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001af0:	6823      	ldr	r3, [r4, #0]
 8001af2:	696a      	ldr	r2, [r5, #20]
 8001af4:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001af8:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001afc:	6023      	str	r3, [r4, #0]
 8001afe:	e785      	b.n	8001a0c <HAL_RCC_OscConfig+0x14>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001b00:	692a      	ldr	r2, [r5, #16]
 8001b02:	4b5b      	ldr	r3, [pc, #364]	; (8001c70 <HAL_RCC_OscConfig+0x278>)
 8001b04:	b16a      	cbz	r2, 8001b22 <HAL_RCC_OscConfig+0x12a>
        __HAL_RCC_HSI_ENABLE();
 8001b06:	2201      	movs	r2, #1
 8001b08:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001b0a:	f7ff fa89 	bl	8001020 <HAL_GetTick>
 8001b0e:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b10:	6823      	ldr	r3, [r4, #0]
 8001b12:	079f      	lsls	r7, r3, #30
 8001b14:	d4ec      	bmi.n	8001af0 <HAL_RCC_OscConfig+0xf8>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b16:	f7ff fa83 	bl	8001020 <HAL_GetTick>
 8001b1a:	1b80      	subs	r0, r0, r6
 8001b1c:	2802      	cmp	r0, #2
 8001b1e:	d9f7      	bls.n	8001b10 <HAL_RCC_OscConfig+0x118>
 8001b20:	e7ab      	b.n	8001a7a <HAL_RCC_OscConfig+0x82>
        __HAL_RCC_HSI_DISABLE();
 8001b22:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001b24:	f7ff fa7c 	bl	8001020 <HAL_GetTick>
 8001b28:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b2a:	6823      	ldr	r3, [r4, #0]
 8001b2c:	0798      	lsls	r0, r3, #30
 8001b2e:	f57f af6d 	bpl.w	8001a0c <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b32:	f7ff fa75 	bl	8001020 <HAL_GetTick>
 8001b36:	1b80      	subs	r0, r0, r6
 8001b38:	2802      	cmp	r0, #2
 8001b3a:	d9f6      	bls.n	8001b2a <HAL_RCC_OscConfig+0x132>
 8001b3c:	e79d      	b.n	8001a7a <HAL_RCC_OscConfig+0x82>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b3e:	69aa      	ldr	r2, [r5, #24]
 8001b40:	4e4a      	ldr	r6, [pc, #296]	; (8001c6c <HAL_RCC_OscConfig+0x274>)
 8001b42:	4b4b      	ldr	r3, [pc, #300]	; (8001c70 <HAL_RCC_OscConfig+0x278>)
 8001b44:	b1e2      	cbz	r2, 8001b80 <HAL_RCC_OscConfig+0x188>
      __HAL_RCC_LSI_ENABLE();
 8001b46:	2201      	movs	r2, #1
 8001b48:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
      tickstart = HAL_GetTick();
 8001b4c:	f7ff fa68 	bl	8001020 <HAL_GetTick>
 8001b50:	4604      	mov	r4, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b52:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8001b54:	079b      	lsls	r3, r3, #30
 8001b56:	d50d      	bpl.n	8001b74 <HAL_RCC_OscConfig+0x17c>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001b58:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8001b5c:	4b45      	ldr	r3, [pc, #276]	; (8001c74 <HAL_RCC_OscConfig+0x27c>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	fbb3 f3f2 	udiv	r3, r3, r2
 8001b64:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 8001b66:	bf00      	nop
  }
  while (Delay --);
 8001b68:	9b01      	ldr	r3, [sp, #4]
 8001b6a:	1e5a      	subs	r2, r3, #1
 8001b6c:	9201      	str	r2, [sp, #4]
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d1f9      	bne.n	8001b66 <HAL_RCC_OscConfig+0x16e>
 8001b72:	e74f      	b.n	8001a14 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b74:	f7ff fa54 	bl	8001020 <HAL_GetTick>
 8001b78:	1b00      	subs	r0, r0, r4
 8001b7a:	2802      	cmp	r0, #2
 8001b7c:	d9e9      	bls.n	8001b52 <HAL_RCC_OscConfig+0x15a>
 8001b7e:	e77c      	b.n	8001a7a <HAL_RCC_OscConfig+0x82>
      __HAL_RCC_LSI_DISABLE();
 8001b80:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
      tickstart = HAL_GetTick();
 8001b84:	f7ff fa4c 	bl	8001020 <HAL_GetTick>
 8001b88:	4604      	mov	r4, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b8a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8001b8c:	079f      	lsls	r7, r3, #30
 8001b8e:	f57f af41 	bpl.w	8001a14 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b92:	f7ff fa45 	bl	8001020 <HAL_GetTick>
 8001b96:	1b00      	subs	r0, r0, r4
 8001b98:	2802      	cmp	r0, #2
 8001b9a:	d9f6      	bls.n	8001b8a <HAL_RCC_OscConfig+0x192>
 8001b9c:	e76d      	b.n	8001a7a <HAL_RCC_OscConfig+0x82>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b9e:	4c33      	ldr	r4, [pc, #204]	; (8001c6c <HAL_RCC_OscConfig+0x274>)
 8001ba0:	69e3      	ldr	r3, [r4, #28]
 8001ba2:	00d8      	lsls	r0, r3, #3
 8001ba4:	d424      	bmi.n	8001bf0 <HAL_RCC_OscConfig+0x1f8>
      pwrclkchanged = SET;
 8001ba6:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ba8:	69e3      	ldr	r3, [r4, #28]
 8001baa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bae:	61e3      	str	r3, [r4, #28]
 8001bb0:	69e3      	ldr	r3, [r4, #28]
 8001bb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bb6:	9300      	str	r3, [sp, #0]
 8001bb8:	9b00      	ldr	r3, [sp, #0]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bba:	4e2f      	ldr	r6, [pc, #188]	; (8001c78 <HAL_RCC_OscConfig+0x280>)
 8001bbc:	6833      	ldr	r3, [r6, #0]
 8001bbe:	05d9      	lsls	r1, r3, #23
 8001bc0:	d518      	bpl.n	8001bf4 <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001bc2:	68eb      	ldr	r3, [r5, #12]
 8001bc4:	2b01      	cmp	r3, #1
 8001bc6:	d126      	bne.n	8001c16 <HAL_RCC_OscConfig+0x21e>
 8001bc8:	6a23      	ldr	r3, [r4, #32]
 8001bca:	f043 0301 	orr.w	r3, r3, #1
 8001bce:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8001bd0:	f7ff fa26 	bl	8001020 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bd4:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8001bd8:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bda:	6a23      	ldr	r3, [r4, #32]
 8001bdc:	079b      	lsls	r3, r3, #30
 8001bde:	d53f      	bpl.n	8001c60 <HAL_RCC_OscConfig+0x268>
    if (pwrclkchanged == SET)
 8001be0:	2f00      	cmp	r7, #0
 8001be2:	f43f af1b 	beq.w	8001a1c <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001be6:	69e3      	ldr	r3, [r4, #28]
 8001be8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001bec:	61e3      	str	r3, [r4, #28]
 8001bee:	e715      	b.n	8001a1c <HAL_RCC_OscConfig+0x24>
    FlagStatus       pwrclkchanged = RESET;
 8001bf0:	2700      	movs	r7, #0
 8001bf2:	e7e2      	b.n	8001bba <HAL_RCC_OscConfig+0x1c2>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001bf4:	6833      	ldr	r3, [r6, #0]
 8001bf6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bfa:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8001bfc:	f7ff fa10 	bl	8001020 <HAL_GetTick>
 8001c00:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c02:	6833      	ldr	r3, [r6, #0]
 8001c04:	05da      	lsls	r2, r3, #23
 8001c06:	d4dc      	bmi.n	8001bc2 <HAL_RCC_OscConfig+0x1ca>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c08:	f7ff fa0a 	bl	8001020 <HAL_GetTick>
 8001c0c:	eba0 0008 	sub.w	r0, r0, r8
 8001c10:	2864      	cmp	r0, #100	; 0x64
 8001c12:	d9f6      	bls.n	8001c02 <HAL_RCC_OscConfig+0x20a>
 8001c14:	e731      	b.n	8001a7a <HAL_RCC_OscConfig+0x82>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c16:	b9ab      	cbnz	r3, 8001c44 <HAL_RCC_OscConfig+0x24c>
 8001c18:	6a23      	ldr	r3, [r4, #32]
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c1a:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c1e:	f023 0301 	bic.w	r3, r3, #1
 8001c22:	6223      	str	r3, [r4, #32]
 8001c24:	6a23      	ldr	r3, [r4, #32]
 8001c26:	f023 0304 	bic.w	r3, r3, #4
 8001c2a:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8001c2c:	f7ff f9f8 	bl	8001020 <HAL_GetTick>
 8001c30:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c32:	6a23      	ldr	r3, [r4, #32]
 8001c34:	0798      	lsls	r0, r3, #30
 8001c36:	d5d3      	bpl.n	8001be0 <HAL_RCC_OscConfig+0x1e8>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c38:	f7ff f9f2 	bl	8001020 <HAL_GetTick>
 8001c3c:	1b80      	subs	r0, r0, r6
 8001c3e:	4540      	cmp	r0, r8
 8001c40:	d9f7      	bls.n	8001c32 <HAL_RCC_OscConfig+0x23a>
 8001c42:	e71a      	b.n	8001a7a <HAL_RCC_OscConfig+0x82>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c44:	2b05      	cmp	r3, #5
 8001c46:	6a23      	ldr	r3, [r4, #32]
 8001c48:	d103      	bne.n	8001c52 <HAL_RCC_OscConfig+0x25a>
 8001c4a:	f043 0304 	orr.w	r3, r3, #4
 8001c4e:	6223      	str	r3, [r4, #32]
 8001c50:	e7ba      	b.n	8001bc8 <HAL_RCC_OscConfig+0x1d0>
 8001c52:	f023 0301 	bic.w	r3, r3, #1
 8001c56:	6223      	str	r3, [r4, #32]
 8001c58:	6a23      	ldr	r3, [r4, #32]
 8001c5a:	f023 0304 	bic.w	r3, r3, #4
 8001c5e:	e7b6      	b.n	8001bce <HAL_RCC_OscConfig+0x1d6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c60:	f7ff f9de 	bl	8001020 <HAL_GetTick>
 8001c64:	1b80      	subs	r0, r0, r6
 8001c66:	4540      	cmp	r0, r8
 8001c68:	d9b7      	bls.n	8001bda <HAL_RCC_OscConfig+0x1e2>
 8001c6a:	e706      	b.n	8001a7a <HAL_RCC_OscConfig+0x82>
 8001c6c:	40021000 	.word	0x40021000
 8001c70:	42420000 	.word	0x42420000
 8001c74:	20000010 	.word	0x20000010
 8001c78:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c7c:	4c2a      	ldr	r4, [pc, #168]	; (8001d28 <HAL_RCC_OscConfig+0x330>)
 8001c7e:	6863      	ldr	r3, [r4, #4]
 8001c80:	f003 030c 	and.w	r3, r3, #12
 8001c84:	2b08      	cmp	r3, #8
 8001c86:	d03e      	beq.n	8001d06 <HAL_RCC_OscConfig+0x30e>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c88:	2200      	movs	r2, #0
 8001c8a:	4b28      	ldr	r3, [pc, #160]	; (8001d2c <HAL_RCC_OscConfig+0x334>)
 8001c8c:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8001c8e:	661a      	str	r2, [r3, #96]	; 0x60
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c90:	d12c      	bne.n	8001cec <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 8001c92:	f7ff f9c5 	bl	8001020 <HAL_GetTick>
 8001c96:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c98:	6823      	ldr	r3, [r4, #0]
 8001c9a:	0199      	lsls	r1, r3, #6
 8001c9c:	d420      	bmi.n	8001ce0 <HAL_RCC_OscConfig+0x2e8>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001c9e:	6a2b      	ldr	r3, [r5, #32]
 8001ca0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ca4:	d105      	bne.n	8001cb2 <HAL_RCC_OscConfig+0x2ba>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001ca6:	6862      	ldr	r2, [r4, #4]
 8001ca8:	68a9      	ldr	r1, [r5, #8]
 8001caa:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8001cae:	430a      	orrs	r2, r1
 8001cb0:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001cb2:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8001cb4:	6862      	ldr	r2, [r4, #4]
 8001cb6:	430b      	orrs	r3, r1
 8001cb8:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8001cbc:	4313      	orrs	r3, r2
        __HAL_RCC_PLL_ENABLE();
 8001cbe:	2201      	movs	r2, #1
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001cc0:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 8001cc2:	4b1a      	ldr	r3, [pc, #104]	; (8001d2c <HAL_RCC_OscConfig+0x334>)
 8001cc4:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 8001cc6:	f7ff f9ab 	bl	8001020 <HAL_GetTick>
 8001cca:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ccc:	6823      	ldr	r3, [r4, #0]
 8001cce:	019a      	lsls	r2, r3, #6
 8001cd0:	f53f aea8 	bmi.w	8001a24 <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cd4:	f7ff f9a4 	bl	8001020 <HAL_GetTick>
 8001cd8:	1b40      	subs	r0, r0, r5
 8001cda:	2802      	cmp	r0, #2
 8001cdc:	d9f6      	bls.n	8001ccc <HAL_RCC_OscConfig+0x2d4>
 8001cde:	e6cc      	b.n	8001a7a <HAL_RCC_OscConfig+0x82>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ce0:	f7ff f99e 	bl	8001020 <HAL_GetTick>
 8001ce4:	1b80      	subs	r0, r0, r6
 8001ce6:	2802      	cmp	r0, #2
 8001ce8:	d9d6      	bls.n	8001c98 <HAL_RCC_OscConfig+0x2a0>
 8001cea:	e6c6      	b.n	8001a7a <HAL_RCC_OscConfig+0x82>
        tickstart = HAL_GetTick();
 8001cec:	f7ff f998 	bl	8001020 <HAL_GetTick>
 8001cf0:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cf2:	6823      	ldr	r3, [r4, #0]
 8001cf4:	019b      	lsls	r3, r3, #6
 8001cf6:	f57f ae95 	bpl.w	8001a24 <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cfa:	f7ff f991 	bl	8001020 <HAL_GetTick>
 8001cfe:	1b40      	subs	r0, r0, r5
 8001d00:	2802      	cmp	r0, #2
 8001d02:	d9f6      	bls.n	8001cf2 <HAL_RCC_OscConfig+0x2fa>
 8001d04:	e6b9      	b.n	8001a7a <HAL_RCC_OscConfig+0x82>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d06:	2801      	cmp	r0, #1
 8001d08:	f43f aeb8 	beq.w	8001a7c <HAL_RCC_OscConfig+0x84>
        pll_config = RCC->CFGR;
 8001d0c:	6863      	ldr	r3, [r4, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d0e:	6a2a      	ldr	r2, [r5, #32]
 8001d10:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 8001d14:	4291      	cmp	r1, r2
 8001d16:	f47f ae9b 	bne.w	8001a50 <HAL_RCC_OscConfig+0x58>
 8001d1a:	6a6a      	ldr	r2, [r5, #36]	; 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001d1c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d20:	4293      	cmp	r3, r2
 8001d22:	f43f ae7f 	beq.w	8001a24 <HAL_RCC_OscConfig+0x2c>
 8001d26:	e693      	b.n	8001a50 <HAL_RCC_OscConfig+0x58>
 8001d28:	40021000 	.word	0x40021000
 8001d2c:	42420000 	.word	0x42420000

08001d30 <HAL_RCC_GetSysClockFreq>:
{
 8001d30:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001d32:	4b18      	ldr	r3, [pc, #96]	; (8001d94 <HAL_RCC_GetSysClockFreq+0x64>)
{
 8001d34:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001d36:	ac02      	add	r4, sp, #8
 8001d38:	f103 0510 	add.w	r5, r3, #16
 8001d3c:	4622      	mov	r2, r4
 8001d3e:	6818      	ldr	r0, [r3, #0]
 8001d40:	6859      	ldr	r1, [r3, #4]
 8001d42:	3308      	adds	r3, #8
 8001d44:	c203      	stmia	r2!, {r0, r1}
 8001d46:	42ab      	cmp	r3, r5
 8001d48:	4614      	mov	r4, r2
 8001d4a:	d1f7      	bne.n	8001d3c <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001d4c:	f240 2301 	movw	r3, #513	; 0x201
  tmpreg = RCC->CFGR;
 8001d50:	4911      	ldr	r1, [pc, #68]	; (8001d98 <HAL_RCC_GetSysClockFreq+0x68>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001d52:	f8ad 3004 	strh.w	r3, [sp, #4]
  tmpreg = RCC->CFGR;
 8001d56:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8001d58:	f003 020c 	and.w	r2, r3, #12
 8001d5c:	2a08      	cmp	r2, #8
 8001d5e:	d117      	bne.n	8001d90 <HAL_RCC_GetSysClockFreq+0x60>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001d60:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8001d64:	3218      	adds	r2, #24
 8001d66:	446a      	add	r2, sp
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001d68:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001d6a:	f812 0c10 	ldrb.w	r0, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001d6e:	d50c      	bpl.n	8001d8a <HAL_RCC_GetSysClockFreq+0x5a>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001d70:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001d72:	4a0a      	ldr	r2, [pc, #40]	; (8001d9c <HAL_RCC_GetSysClockFreq+0x6c>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001d74:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001d78:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001d7a:	3318      	adds	r3, #24
 8001d7c:	446b      	add	r3, sp
 8001d7e:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001d82:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8001d86:	b007      	add	sp, #28
 8001d88:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001d8a:	4b05      	ldr	r3, [pc, #20]	; (8001da0 <HAL_RCC_GetSysClockFreq+0x70>)
 8001d8c:	4358      	muls	r0, r3
 8001d8e:	e7fa      	b.n	8001d86 <HAL_RCC_GetSysClockFreq+0x56>
      sysclockfreq = HSE_VALUE;
 8001d90:	4802      	ldr	r0, [pc, #8]	; (8001d9c <HAL_RCC_GetSysClockFreq+0x6c>)
  return sysclockfreq;
 8001d92:	e7f8      	b.n	8001d86 <HAL_RCC_GetSysClockFreq+0x56>
 8001d94:	08003e6d 	.word	0x08003e6d
 8001d98:	40021000 	.word	0x40021000
 8001d9c:	007a1200 	.word	0x007a1200
 8001da0:	003d0900 	.word	0x003d0900

08001da4 <HAL_RCC_ClockConfig>:
{
 8001da4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001da8:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 8001daa:	4604      	mov	r4, r0
 8001dac:	b910      	cbnz	r0, 8001db4 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8001dae:	2001      	movs	r0, #1
}
 8001db0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001db4:	4a44      	ldr	r2, [pc, #272]	; (8001ec8 <HAL_RCC_ClockConfig+0x124>)
 8001db6:	6813      	ldr	r3, [r2, #0]
 8001db8:	f003 0307 	and.w	r3, r3, #7
 8001dbc:	428b      	cmp	r3, r1
 8001dbe:	d328      	bcc.n	8001e12 <HAL_RCC_ClockConfig+0x6e>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001dc0:	6821      	ldr	r1, [r4, #0]
 8001dc2:	078e      	lsls	r6, r1, #30
 8001dc4:	d430      	bmi.n	8001e28 <HAL_RCC_ClockConfig+0x84>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001dc6:	07ca      	lsls	r2, r1, #31
 8001dc8:	d443      	bmi.n	8001e52 <HAL_RCC_ClockConfig+0xae>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001dca:	4a3f      	ldr	r2, [pc, #252]	; (8001ec8 <HAL_RCC_ClockConfig+0x124>)
 8001dcc:	6813      	ldr	r3, [r2, #0]
 8001dce:	f003 0307 	and.w	r3, r3, #7
 8001dd2:	42ab      	cmp	r3, r5
 8001dd4:	d865      	bhi.n	8001ea2 <HAL_RCC_ClockConfig+0xfe>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001dd6:	6822      	ldr	r2, [r4, #0]
 8001dd8:	4d3c      	ldr	r5, [pc, #240]	; (8001ecc <HAL_RCC_ClockConfig+0x128>)
 8001dda:	f012 0f04 	tst.w	r2, #4
 8001dde:	d16c      	bne.n	8001eba <HAL_RCC_ClockConfig+0x116>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001de0:	0713      	lsls	r3, r2, #28
 8001de2:	d506      	bpl.n	8001df2 <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001de4:	686b      	ldr	r3, [r5, #4]
 8001de6:	6922      	ldr	r2, [r4, #16]
 8001de8:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8001dec:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001df0:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001df2:	f7ff ff9d 	bl	8001d30 <HAL_RCC_GetSysClockFreq>
 8001df6:	686b      	ldr	r3, [r5, #4]
 8001df8:	4a35      	ldr	r2, [pc, #212]	; (8001ed0 <HAL_RCC_ClockConfig+0x12c>)
 8001dfa:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001dfe:	5cd3      	ldrb	r3, [r2, r3]
 8001e00:	40d8      	lsrs	r0, r3
 8001e02:	4b34      	ldr	r3, [pc, #208]	; (8001ed4 <HAL_RCC_ClockConfig+0x130>)
 8001e04:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8001e06:	4b34      	ldr	r3, [pc, #208]	; (8001ed8 <HAL_RCC_ClockConfig+0x134>)
 8001e08:	6818      	ldr	r0, [r3, #0]
 8001e0a:	f7ff f8c7 	bl	8000f9c <HAL_InitTick>
  return HAL_OK;
 8001e0e:	2000      	movs	r0, #0
 8001e10:	e7ce      	b.n	8001db0 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e12:	6813      	ldr	r3, [r2, #0]
 8001e14:	f023 0307 	bic.w	r3, r3, #7
 8001e18:	430b      	orrs	r3, r1
 8001e1a:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e1c:	6813      	ldr	r3, [r2, #0]
 8001e1e:	f003 0307 	and.w	r3, r3, #7
 8001e22:	428b      	cmp	r3, r1
 8001e24:	d1c3      	bne.n	8001dae <HAL_RCC_ClockConfig+0xa>
 8001e26:	e7cb      	b.n	8001dc0 <HAL_RCC_ClockConfig+0x1c>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e28:	4b28      	ldr	r3, [pc, #160]	; (8001ecc <HAL_RCC_ClockConfig+0x128>)
 8001e2a:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001e2e:	bf1e      	ittt	ne
 8001e30:	685a      	ldrne	r2, [r3, #4]
 8001e32:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 8001e36:	605a      	strne	r2, [r3, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e38:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001e3a:	bf42      	ittt	mi
 8001e3c:	685a      	ldrmi	r2, [r3, #4]
 8001e3e:	f442 5260 	orrmi.w	r2, r2, #14336	; 0x3800
 8001e42:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e44:	685a      	ldr	r2, [r3, #4]
 8001e46:	68a0      	ldr	r0, [r4, #8]
 8001e48:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001e4c:	4302      	orrs	r2, r0
 8001e4e:	605a      	str	r2, [r3, #4]
 8001e50:	e7b9      	b.n	8001dc6 <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e52:	6862      	ldr	r2, [r4, #4]
 8001e54:	4e1d      	ldr	r6, [pc, #116]	; (8001ecc <HAL_RCC_ClockConfig+0x128>)
 8001e56:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e58:	6833      	ldr	r3, [r6, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e5a:	d11a      	bne.n	8001e92 <HAL_RCC_ClockConfig+0xee>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e5c:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e60:	d0a5      	beq.n	8001dae <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e62:	6873      	ldr	r3, [r6, #4]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e64:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e68:	f023 0303 	bic.w	r3, r3, #3
 8001e6c:	4313      	orrs	r3, r2
 8001e6e:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8001e70:	f7ff f8d6 	bl	8001020 <HAL_GetTick>
 8001e74:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e76:	6873      	ldr	r3, [r6, #4]
 8001e78:	6862      	ldr	r2, [r4, #4]
 8001e7a:	f003 030c 	and.w	r3, r3, #12
 8001e7e:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001e82:	d0a2      	beq.n	8001dca <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e84:	f7ff f8cc 	bl	8001020 <HAL_GetTick>
 8001e88:	1bc0      	subs	r0, r0, r7
 8001e8a:	4540      	cmp	r0, r8
 8001e8c:	d9f3      	bls.n	8001e76 <HAL_RCC_ClockConfig+0xd2>
        return HAL_TIMEOUT;
 8001e8e:	2003      	movs	r0, #3
 8001e90:	e78e      	b.n	8001db0 <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e92:	2a02      	cmp	r2, #2
 8001e94:	d102      	bne.n	8001e9c <HAL_RCC_ClockConfig+0xf8>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e96:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001e9a:	e7e1      	b.n	8001e60 <HAL_RCC_ClockConfig+0xbc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e9c:	f013 0f02 	tst.w	r3, #2
 8001ea0:	e7de      	b.n	8001e60 <HAL_RCC_ClockConfig+0xbc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ea2:	6813      	ldr	r3, [r2, #0]
 8001ea4:	f023 0307 	bic.w	r3, r3, #7
 8001ea8:	432b      	orrs	r3, r5
 8001eaa:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001eac:	6813      	ldr	r3, [r2, #0]
 8001eae:	f003 0307 	and.w	r3, r3, #7
 8001eb2:	42ab      	cmp	r3, r5
 8001eb4:	f47f af7b 	bne.w	8001dae <HAL_RCC_ClockConfig+0xa>
 8001eb8:	e78d      	b.n	8001dd6 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001eba:	686b      	ldr	r3, [r5, #4]
 8001ebc:	68e1      	ldr	r1, [r4, #12]
 8001ebe:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001ec2:	430b      	orrs	r3, r1
 8001ec4:	606b      	str	r3, [r5, #4]
 8001ec6:	e78b      	b.n	8001de0 <HAL_RCC_ClockConfig+0x3c>
 8001ec8:	40022000 	.word	0x40022000
 8001ecc:	40021000 	.word	0x40021000
 8001ed0:	08003e55 	.word	0x08003e55
 8001ed4:	20000010 	.word	0x20000010
 8001ed8:	20000018 	.word	0x20000018

08001edc <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001edc:	4b04      	ldr	r3, [pc, #16]	; (8001ef0 <HAL_RCC_GetPCLK1Freq+0x14>)
 8001ede:	4a05      	ldr	r2, [pc, #20]	; (8001ef4 <HAL_RCC_GetPCLK1Freq+0x18>)
 8001ee0:	685b      	ldr	r3, [r3, #4]
 8001ee2:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8001ee6:	5cd3      	ldrb	r3, [r2, r3]
 8001ee8:	4a03      	ldr	r2, [pc, #12]	; (8001ef8 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001eea:	6810      	ldr	r0, [r2, #0]
}
 8001eec:	40d8      	lsrs	r0, r3
 8001eee:	4770      	bx	lr
 8001ef0:	40021000 	.word	0x40021000
 8001ef4:	08003e65 	.word	0x08003e65
 8001ef8:	20000010 	.word	0x20000010

08001efc <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001efc:	4b04      	ldr	r3, [pc, #16]	; (8001f10 <HAL_RCC_GetPCLK2Freq+0x14>)
 8001efe:	4a05      	ldr	r2, [pc, #20]	; (8001f14 <HAL_RCC_GetPCLK2Freq+0x18>)
 8001f00:	685b      	ldr	r3, [r3, #4]
 8001f02:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8001f06:	5cd3      	ldrb	r3, [r2, r3]
 8001f08:	4a03      	ldr	r2, [pc, #12]	; (8001f18 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8001f0a:	6810      	ldr	r0, [r2, #0]
}
 8001f0c:	40d8      	lsrs	r0, r3
 8001f0e:	4770      	bx	lr
 8001f10:	40021000 	.word	0x40021000
 8001f14:	08003e65 	.word	0x08003e65
 8001f18:	20000010 	.word	0x20000010

08001f1c <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001f1c:	6803      	ldr	r3, [r0, #0]
{
 8001f1e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001f22:	07d9      	lsls	r1, r3, #31
{
 8001f24:	4605      	mov	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001f26:	d520      	bpl.n	8001f6a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f28:	4c36      	ldr	r4, [pc, #216]	; (8002004 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8001f2a:	69e3      	ldr	r3, [r4, #28]
 8001f2c:	00da      	lsls	r2, r3, #3
 8001f2e:	d432      	bmi.n	8001f96 <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
 8001f30:	2601      	movs	r6, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f32:	69e3      	ldr	r3, [r4, #28]
 8001f34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f38:	61e3      	str	r3, [r4, #28]
 8001f3a:	69e3      	ldr	r3, [r4, #28]
 8001f3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f40:	9301      	str	r3, [sp, #4]
 8001f42:	9b01      	ldr	r3, [sp, #4]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f44:	4f30      	ldr	r7, [pc, #192]	; (8002008 <HAL_RCCEx_PeriphCLKConfig+0xec>)
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	05db      	lsls	r3, r3, #23
 8001f4a:	d526      	bpl.n	8001f9a <HAL_RCCEx_PeriphCLKConfig+0x7e>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001f4c:	6a23      	ldr	r3, [r4, #32]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001f4e:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8001f52:	d136      	bne.n	8001fc2 <HAL_RCCEx_PeriphCLKConfig+0xa6>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001f54:	6a23      	ldr	r3, [r4, #32]
 8001f56:	686a      	ldr	r2, [r5, #4]
 8001f58:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f5c:	4313      	orrs	r3, r2
 8001f5e:	6223      	str	r3, [r4, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001f60:	b11e      	cbz	r6, 8001f6a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f62:	69e3      	ldr	r3, [r4, #28]
 8001f64:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f68:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001f6a:	6828      	ldr	r0, [r5, #0]
 8001f6c:	0783      	lsls	r3, r0, #30
 8001f6e:	d506      	bpl.n	8001f7e <HAL_RCCEx_PeriphCLKConfig+0x62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001f70:	4924      	ldr	r1, [pc, #144]	; (8002004 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8001f72:	68ab      	ldr	r3, [r5, #8]
 8001f74:	684a      	ldr	r2, [r1, #4]
 8001f76:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8001f7a:	431a      	orrs	r2, r3
 8001f7c:	604a      	str	r2, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001f7e:	f010 0010 	ands.w	r0, r0, #16
 8001f82:	d01b      	beq.n	8001fbc <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001f84:	4a1f      	ldr	r2, [pc, #124]	; (8002004 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8001f86:	68e9      	ldr	r1, [r5, #12]
 8001f88:	6853      	ldr	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8001f8a:	2000      	movs	r0, #0
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001f8c:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001f90:	430b      	orrs	r3, r1
 8001f92:	6053      	str	r3, [r2, #4]
 8001f94:	e012      	b.n	8001fbc <HAL_RCCEx_PeriphCLKConfig+0xa0>
    FlagStatus pwrclkchanged = RESET;
 8001f96:	2600      	movs	r6, #0
 8001f98:	e7d4      	b.n	8001f44 <HAL_RCCEx_PeriphCLKConfig+0x28>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fa0:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8001fa2:	f7ff f83d 	bl	8001020 <HAL_GetTick>
 8001fa6:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	05d8      	lsls	r0, r3, #23
 8001fac:	d4ce      	bmi.n	8001f4c <HAL_RCCEx_PeriphCLKConfig+0x30>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fae:	f7ff f837 	bl	8001020 <HAL_GetTick>
 8001fb2:	eba0 0008 	sub.w	r0, r0, r8
 8001fb6:	2864      	cmp	r0, #100	; 0x64
 8001fb8:	d9f6      	bls.n	8001fa8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
          return HAL_TIMEOUT;
 8001fba:	2003      	movs	r0, #3
}
 8001fbc:	b002      	add	sp, #8
 8001fbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001fc2:	686a      	ldr	r2, [r5, #4]
 8001fc4:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8001fc8:	429a      	cmp	r2, r3
 8001fca:	d0c3      	beq.n	8001f54 <HAL_RCCEx_PeriphCLKConfig+0x38>
      __HAL_RCC_BACKUPRESET_FORCE();
 8001fcc:	2001      	movs	r0, #1
 8001fce:	4a0f      	ldr	r2, [pc, #60]	; (800200c <HAL_RCCEx_PeriphCLKConfig+0xf0>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001fd0:	6a23      	ldr	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 8001fd2:	f8c2 0440 	str.w	r0, [r2, #1088]	; 0x440
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001fd6:	2000      	movs	r0, #0
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001fd8:	f423 7140 	bic.w	r1, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001fdc:	f8c2 0440 	str.w	r0, [r2, #1088]	; 0x440
      RCC->BDCR = temp_reg;
 8001fe0:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001fe2:	07d9      	lsls	r1, r3, #31
 8001fe4:	d5b6      	bpl.n	8001f54 <HAL_RCCEx_PeriphCLKConfig+0x38>
        tickstart = HAL_GetTick();
 8001fe6:	f7ff f81b 	bl	8001020 <HAL_GetTick>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fea:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8001fee:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ff0:	6a23      	ldr	r3, [r4, #32]
 8001ff2:	079a      	lsls	r2, r3, #30
 8001ff4:	d4ae      	bmi.n	8001f54 <HAL_RCCEx_PeriphCLKConfig+0x38>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ff6:	f7ff f813 	bl	8001020 <HAL_GetTick>
 8001ffa:	1bc0      	subs	r0, r0, r7
 8001ffc:	4540      	cmp	r0, r8
 8001ffe:	d9f7      	bls.n	8001ff0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002000:	e7db      	b.n	8001fba <HAL_RCCEx_PeriphCLKConfig+0x9e>
 8002002:	bf00      	nop
 8002004:	40021000 	.word	0x40021000
 8002008:	40007000 	.word	0x40007000
 800200c:	42420000 	.word	0x42420000

08002010 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8002010:	4602      	mov	r2, r0
 8002012:	b570      	push	{r4, r5, r6, lr}
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002014:	4b33      	ldr	r3, [pc, #204]	; (80020e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd4>)
{
 8002016:	b086      	sub	sp, #24
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002018:	ad02      	add	r5, sp, #8
 800201a:	f103 0610 	add.w	r6, r3, #16
 800201e:	462c      	mov	r4, r5
 8002020:	6818      	ldr	r0, [r3, #0]
 8002022:	6859      	ldr	r1, [r3, #4]
 8002024:	3308      	adds	r3, #8
 8002026:	c403      	stmia	r4!, {r0, r1}
 8002028:	42b3      	cmp	r3, r6
 800202a:	4625      	mov	r5, r4
 800202c:	d1f7      	bne.n	800201e <HAL_RCCEx_GetPeriphCLKFreq+0xe>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800202e:	f240 2301 	movw	r3, #513	; 0x201
  uint32_t temp_reg = 0U, frequency = 0U;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8002032:	2a02      	cmp	r2, #2
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002034:	f8ad 3004 	strh.w	r3, [sp, #4]
  switch (PeriphClk)
 8002038:	d047      	beq.n	80020ca <HAL_RCCEx_GetPeriphCLKFreq+0xba>
 800203a:	2a10      	cmp	r2, #16
 800203c:	d003      	beq.n	8002046 <HAL_RCCEx_GetPeriphCLKFreq+0x36>
 800203e:	2a01      	cmp	r2, #1
 8002040:	d024      	beq.n	800208c <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
  uint32_t temp_reg = 0U, frequency = 0U;
 8002042:	2000      	movs	r0, #0
    default:
    {
      break;
    }
  }
  return (frequency);
 8002044:	e036      	b.n	80020b4 <HAL_RCCEx_GetPeriphCLKFreq+0xa4>
      temp_reg = RCC->CFGR;
 8002046:	4a28      	ldr	r2, [pc, #160]	; (80020e8 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>)
 8002048:	6851      	ldr	r1, [r2, #4]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 800204a:	6810      	ldr	r0, [r2, #0]
 800204c:	f010 7080 	ands.w	r0, r0, #16777216	; 0x1000000
 8002050:	d030      	beq.n	80020b4 <HAL_RCCEx_GetPeriphCLKFreq+0xa4>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002052:	f3c1 4383 	ubfx	r3, r1, #18, #4
 8002056:	3318      	adds	r3, #24
 8002058:	446b      	add	r3, sp
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800205a:	03c9      	lsls	r1, r1, #15
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800205c:	f813 0c10 	ldrb.w	r0, [r3, #-16]
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002060:	bf49      	itett	mi
 8002062:	6853      	ldrmi	r3, [r2, #4]
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002064:	4b21      	ldrpl	r3, [pc, #132]	; (80020ec <HAL_RCCEx_GetPeriphCLKFreq+0xdc>)
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002066:	f3c3 4340 	ubfxmi	r3, r3, #17, #1
 800206a:	3318      	addmi	r3, #24
 800206c:	bf41      	itttt	mi
 800206e:	446b      	addmi	r3, sp
 8002070:	f813 1c14 	ldrbmi.w	r1, [r3, #-20]
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8002074:	4b1e      	ldrmi	r3, [pc, #120]	; (80020f0 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>)
 8002076:	fbb3 f3f1 	udivmi	r3, r3, r1
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800207a:	4358      	muls	r0, r3
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 800207c:	6853      	ldr	r3, [r2, #4]
 800207e:	025b      	lsls	r3, r3, #9
 8002080:	d418      	bmi.n	80020b4 <HAL_RCCEx_GetPeriphCLKFreq+0xa4>
          frequency = (pllclk * 2) / 3;
 8002082:	2303      	movs	r3, #3
 8002084:	0040      	lsls	r0, r0, #1
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8002086:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 800208a:	e013      	b.n	80020b4 <HAL_RCCEx_GetPeriphCLKFreq+0xa4>
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 800208c:	f240 3102 	movw	r1, #770	; 0x302
      temp_reg = RCC->BDCR;
 8002090:	4a15      	ldr	r2, [pc, #84]	; (80020e8 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>)
 8002092:	6a13      	ldr	r3, [r2, #32]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8002094:	4019      	ands	r1, r3
 8002096:	f5b1 7f81 	cmp.w	r1, #258	; 0x102
 800209a:	d01f      	beq.n	80020dc <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 800209c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80020a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80020a4:	d108      	bne.n	80020b8 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
        frequency = LSI_VALUE;
 80020a6:	f649 4340 	movw	r3, #40000	; 0x9c40
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80020aa:	6a50      	ldr	r0, [r2, #36]	; 0x24
        frequency = LSI_VALUE;
 80020ac:	f010 0002 	ands.w	r0, r0, #2
        frequency = HSE_VALUE / 128U;
 80020b0:	bf18      	it	ne
 80020b2:	4618      	movne	r0, r3
}
 80020b4:	b006      	add	sp, #24
 80020b6:	bd70      	pop	{r4, r5, r6, pc}
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80020b8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80020bc:	d1c1      	bne.n	8002042 <HAL_RCCEx_GetPeriphCLKFreq+0x32>
 80020be:	6810      	ldr	r0, [r2, #0]
        frequency = HSE_VALUE / 128U;
 80020c0:	f24f 4324 	movw	r3, #62500	; 0xf424
 80020c4:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
 80020c8:	e7f2      	b.n	80020b0 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80020ca:	f7ff ff17 	bl	8001efc <HAL_RCC_GetPCLK2Freq>
 80020ce:	4b06      	ldr	r3, [pc, #24]	; (80020e8 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>)
 80020d0:	685b      	ldr	r3, [r3, #4]
 80020d2:	f3c3 3381 	ubfx	r3, r3, #14, #2
 80020d6:	3301      	adds	r3, #1
 80020d8:	005b      	lsls	r3, r3, #1
 80020da:	e7d4      	b.n	8002086 <HAL_RCCEx_GetPeriphCLKFreq+0x76>
        frequency = LSE_VALUE;
 80020dc:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80020e0:	e7e8      	b.n	80020b4 <HAL_RCCEx_GetPeriphCLKFreq+0xa4>
 80020e2:	bf00      	nop
 80020e4:	08003e6d 	.word	0x08003e6d
 80020e8:	40021000 	.word	0x40021000
 80020ec:	003d0900 	.word	0x003d0900
 80020f0:	007a1200 	.word	0x007a1200

080020f4 <RTC_ReadTimeCounter>:
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
  uint32_t timecounter = 0U;

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 80020f4:	6803      	ldr	r3, [r0, #0]
{
 80020f6:	b530      	push	{r4, r5, lr}
  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 80020f8:	699a      	ldr	r2, [r3, #24]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 80020fa:	69d8      	ldr	r0, [r3, #28]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 80020fc:	6999      	ldr	r1, [r3, #24]

  if (high1 != high2)
 80020fe:	b295      	uxth	r5, r2
 8002100:	b28c      	uxth	r4, r1
 8002102:	42a5      	cmp	r5, r4
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 8002104:	bf17      	itett	ne
 8002106:	69d8      	ldrne	r0, [r3, #28]
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 8002108:	b280      	uxtheq	r0, r0
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 800210a:	b280      	uxthne	r0, r0
 800210c:	ea40 4001 	orrne.w	r0, r0, r1, lsl #16
    timecounter = (((uint32_t) high1 << 16U) | low);
 8002110:	bf08      	it	eq
 8002112:	ea40 4002 	orreq.w	r0, r0, r2, lsl #16
  }

  return timecounter;
}
 8002116:	bd30      	pop	{r4, r5, pc}

08002118 <RTC_ReadAlarmCounter>:
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
  uint16_t high1 = 0U, low = 0U;

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 8002118:	6803      	ldr	r3, [r0, #0]
 800211a:	6a18      	ldr	r0, [r3, #32]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 800211c:	6a5b      	ldr	r3, [r3, #36]	; 0x24

  return (((uint32_t) high1 << 16U) | low);
 800211e:	b29b      	uxth	r3, r3
}
 8002120:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8002124:	4770      	bx	lr

08002126 <RTC_Bcd2ToByte>:
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
  uint32_t tmp = 0U;
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
  return (tmp + (Value & (uint8_t)0x0F));
 8002126:	220a      	movs	r2, #10
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 8002128:	0903      	lsrs	r3, r0, #4
  return (tmp + (Value & (uint8_t)0x0F));
 800212a:	f000 000f 	and.w	r0, r0, #15
 800212e:	fb02 0003 	mla	r0, r2, r3, r0
}
 8002132:	b2c0      	uxtb	r0, r0
 8002134:	4770      	bx	lr

08002136 <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 8002136:	b530      	push	{r4, r5, lr}
 8002138:	4603      	mov	r3, r0
  uint32_t year = 0U, weekday = 0U;

  year = 2000U + nYear;
 800213a:	f500 64fa 	add.w	r4, r0, #2000	; 0x7d0

  if (nMonth < 3U)
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 800213e:	2017      	movs	r0, #23
 8002140:	2509      	movs	r5, #9
 8002142:	4348      	muls	r0, r1
  if (nMonth < 3U)
 8002144:	2902      	cmp	r1, #2
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 8002146:	fbb0 f5f5 	udiv	r5, r0, r5
  if (nMonth < 3U)
 800214a:	d817      	bhi.n	800217c <RTC_WeekDayNum+0x46>
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 800214c:	3204      	adds	r2, #4
 800214e:	1910      	adds	r0, r2, r4
 8002150:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8002154:	f203 73cf 	addw	r3, r3, #1999	; 0x7cf
 8002158:	fbb3 f2f2 	udiv	r2, r3, r2
 800215c:	4428      	add	r0, r5
 800215e:	eb00 0093 	add.w	r0, r0, r3, lsr #2
 8002162:	4410      	add	r0, r2
 8002164:	2264      	movs	r2, #100	; 0x64
 8002166:	fbb3 f3f2 	udiv	r3, r3, r2
 800216a:	1ac0      	subs	r0, r0, r3
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 800216c:	2307      	movs	r3, #7
 800216e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002172:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8002176:	1ac0      	subs	r0, r0, r3
  }

  return (uint8_t)weekday;
}
 8002178:	b2c0      	uxtb	r0, r0
 800217a:	bd30      	pop	{r4, r5, pc}
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 800217c:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8002180:	fbb4 f3f3 	udiv	r3, r4, r3
 8002184:	1c90      	adds	r0, r2, #2
 8002186:	4420      	add	r0, r4
 8002188:	4428      	add	r0, r5
 800218a:	eb00 0094 	add.w	r0, r0, r4, lsr #2
 800218e:	4418      	add	r0, r3
 8002190:	2364      	movs	r3, #100	; 0x64
 8002192:	fbb4 f4f3 	udiv	r4, r4, r3
 8002196:	1b00      	subs	r0, r0, r4
 8002198:	e7e8      	b.n	800216c <RTC_WeekDayNum+0x36>

0800219a <RTC_EnterInitMode>:
{
 800219a:	b538      	push	{r3, r4, r5, lr}
 800219c:	4604      	mov	r4, r0
  tickstart = HAL_GetTick();
 800219e:	f7fe ff3f 	bl	8001020 <HAL_GetTick>
 80021a2:	4605      	mov	r5, r0
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80021a4:	6823      	ldr	r3, [r4, #0]
 80021a6:	685a      	ldr	r2, [r3, #4]
 80021a8:	0692      	lsls	r2, r2, #26
 80021aa:	d505      	bpl.n	80021b8 <RTC_EnterInitMode+0x1e>
  return HAL_OK;
 80021ac:	2000      	movs	r0, #0
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80021ae:	685a      	ldr	r2, [r3, #4]
 80021b0:	f042 0210 	orr.w	r2, r2, #16
 80021b4:	605a      	str	r2, [r3, #4]
}
 80021b6:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80021b8:	f7fe ff32 	bl	8001020 <HAL_GetTick>
 80021bc:	1b40      	subs	r0, r0, r5
 80021be:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80021c2:	d9ef      	bls.n	80021a4 <RTC_EnterInitMode+0xa>
      return HAL_TIMEOUT;
 80021c4:	2003      	movs	r0, #3
 80021c6:	e7f6      	b.n	80021b6 <RTC_EnterInitMode+0x1c>

080021c8 <RTC_ExitInitMode>:
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80021c8:	6802      	ldr	r2, [r0, #0]
{
 80021ca:	b538      	push	{r3, r4, r5, lr}
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80021cc:	6853      	ldr	r3, [r2, #4]
{
 80021ce:	4604      	mov	r4, r0
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80021d0:	f023 0310 	bic.w	r3, r3, #16
 80021d4:	6053      	str	r3, [r2, #4]
  tickstart = HAL_GetTick();
 80021d6:	f7fe ff23 	bl	8001020 <HAL_GetTick>
 80021da:	4605      	mov	r5, r0
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80021dc:	6823      	ldr	r3, [r4, #0]
 80021de:	685b      	ldr	r3, [r3, #4]
 80021e0:	069b      	lsls	r3, r3, #26
 80021e2:	d501      	bpl.n	80021e8 <RTC_ExitInitMode+0x20>
  return HAL_OK;
 80021e4:	2000      	movs	r0, #0
}
 80021e6:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80021e8:	f7fe ff1a 	bl	8001020 <HAL_GetTick>
 80021ec:	1b40      	subs	r0, r0, r5
 80021ee:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80021f2:	d9f3      	bls.n	80021dc <RTC_ExitInitMode+0x14>
      return HAL_TIMEOUT;
 80021f4:	2003      	movs	r0, #3
 80021f6:	e7f6      	b.n	80021e6 <RTC_ExitInitMode+0x1e>

080021f8 <RTC_WriteTimeCounter>:
{
 80021f8:	b538      	push	{r3, r4, r5, lr}
 80021fa:	4605      	mov	r5, r0
 80021fc:	460c      	mov	r4, r1
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80021fe:	f7ff ffcc 	bl	800219a <RTC_EnterInitMode>
 8002202:	b958      	cbnz	r0, 800221c <RTC_WriteTimeCounter+0x24>
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 8002204:	682b      	ldr	r3, [r5, #0]
 8002206:	0c22      	lsrs	r2, r4, #16
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 8002208:	b2a4      	uxth	r4, r4
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 800220a:	619a      	str	r2, [r3, #24]
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 800220c:	4628      	mov	r0, r5
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 800220e:	61dc      	str	r4, [r3, #28]
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8002210:	f7ff ffda 	bl	80021c8 <RTC_ExitInitMode>
    status = HAL_ERROR;
 8002214:	3800      	subs	r0, #0
 8002216:	bf18      	it	ne
 8002218:	2001      	movne	r0, #1
}
 800221a:	bd38      	pop	{r3, r4, r5, pc}
    status = HAL_ERROR;
 800221c:	2001      	movs	r0, #1
 800221e:	e7fc      	b.n	800221a <RTC_WriteTimeCounter+0x22>

08002220 <RTC_WriteAlarmCounter>:
{
 8002220:	b538      	push	{r3, r4, r5, lr}
 8002222:	4605      	mov	r5, r0
 8002224:	460c      	mov	r4, r1
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8002226:	f7ff ffb8 	bl	800219a <RTC_EnterInitMode>
 800222a:	b958      	cbnz	r0, 8002244 <RTC_WriteAlarmCounter+0x24>
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 800222c:	682b      	ldr	r3, [r5, #0]
 800222e:	0c22      	lsrs	r2, r4, #16
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 8002230:	b2a4      	uxth	r4, r4
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 8002232:	621a      	str	r2, [r3, #32]
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8002234:	4628      	mov	r0, r5
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 8002236:	625c      	str	r4, [r3, #36]	; 0x24
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8002238:	f7ff ffc6 	bl	80021c8 <RTC_ExitInitMode>
    status = HAL_ERROR;
 800223c:	3800      	subs	r0, #0
 800223e:	bf18      	it	ne
 8002240:	2001      	movne	r0, #1
}
 8002242:	bd38      	pop	{r3, r4, r5, pc}
    status = HAL_ERROR;
 8002244:	2001      	movs	r0, #1
 8002246:	e7fc      	b.n	8002242 <RTC_WriteAlarmCounter+0x22>

08002248 <HAL_RTC_SetTime>:
{
 8002248:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((hrtc == NULL) || (sTime == NULL))
 800224a:	4604      	mov	r4, r0
 800224c:	b1e0      	cbz	r0, 8002288 <HAL_RTC_SetTime+0x40>
 800224e:	b1d9      	cbz	r1, 8002288 <HAL_RTC_SetTime+0x40>
  __HAL_LOCK(hrtc);
 8002250:	7c03      	ldrb	r3, [r0, #16]
 8002252:	2502      	movs	r5, #2
 8002254:	2b01      	cmp	r3, #1
 8002256:	d044      	beq.n	80022e2 <HAL_RTC_SetTime+0x9a>
 8002258:	2301      	movs	r3, #1
  hrtc->State = HAL_RTC_STATE_BUSY;
 800225a:	7445      	strb	r5, [r0, #17]
  __HAL_LOCK(hrtc);
 800225c:	7403      	strb	r3, [r0, #16]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 800225e:	7808      	ldrb	r0, [r1, #0]
                              ((uint32_t)sTime->Minutes * 60U) + \
 8002260:	784d      	ldrb	r5, [r1, #1]
                              ((uint32_t)sTime->Seconds));
 8002262:	788f      	ldrb	r7, [r1, #2]
  if (Format == RTC_FORMAT_BIN)
 8002264:	b992      	cbnz	r2, 800228c <HAL_RTC_SetTime+0x44>
                              ((uint32_t)sTime->Minutes * 60U) + \
 8002266:	263c      	movs	r6, #60	; 0x3c
 8002268:	4375      	muls	r5, r6
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 800226a:	f44f 6661 	mov.w	r6, #3600	; 0xe10
 800226e:	fb06 5500 	mla	r5, r6, r0, r5
 8002272:	19ee      	adds	r6, r5, r7
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8002274:	4631      	mov	r1, r6
 8002276:	4620      	mov	r0, r4
 8002278:	f7ff ffbe 	bl	80021f8 <RTC_WriteTimeCounter>
 800227c:	4605      	mov	r5, r0
 800227e:	b1b0      	cbz	r0, 80022ae <HAL_RTC_SetTime+0x66>
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002280:	2304      	movs	r3, #4
 8002282:	7463      	strb	r3, [r4, #17]
    __HAL_UNLOCK(hrtc);
 8002284:	2300      	movs	r3, #0
 8002286:	7423      	strb	r3, [r4, #16]
    return HAL_ERROR;
 8002288:	2501      	movs	r5, #1
 800228a:	e02a      	b.n	80022e2 <HAL_RTC_SetTime+0x9a>
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 800228c:	f7ff ff4b 	bl	8002126 <RTC_Bcd2ToByte>
 8002290:	4601      	mov	r1, r0
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 8002292:	4628      	mov	r0, r5
 8002294:	f7ff ff47 	bl	8002126 <RTC_Bcd2ToByte>
 8002298:	263c      	movs	r6, #60	; 0x3c
 800229a:	4346      	muls	r6, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 800229c:	f44f 6061 	mov.w	r0, #3600	; 0xe10
 80022a0:	fb00 6601 	mla	r6, r0, r1, r6
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 80022a4:	4638      	mov	r0, r7
 80022a6:	f7ff ff3e 	bl	8002126 <RTC_Bcd2ToByte>
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 80022aa:	4406      	add	r6, r0
 80022ac:	e7e2      	b.n	8002274 <HAL_RTC_SetTime+0x2c>
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 80022ae:	6822      	ldr	r2, [r4, #0]
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 80022b0:	4620      	mov	r0, r4
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 80022b2:	6853      	ldr	r3, [r2, #4]
 80022b4:	f023 0305 	bic.w	r3, r3, #5
 80022b8:	6053      	str	r3, [r2, #4]
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 80022ba:	f7ff ff2d 	bl	8002118 <RTC_ReadAlarmCounter>
      if (counter_alarm < counter_time)
 80022be:	4286      	cmp	r6, r0
 80022c0:	d90b      	bls.n	80022da <HAL_RTC_SetTime+0x92>
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 80022c2:	f500 31a8 	add.w	r1, r0, #86016	; 0x15000
 80022c6:	f501 71c0 	add.w	r1, r1, #384	; 0x180
 80022ca:	4620      	mov	r0, r4
 80022cc:	f7ff ffa8 	bl	8002220 <RTC_WriteAlarmCounter>
 80022d0:	b118      	cbz	r0, 80022da <HAL_RTC_SetTime+0x92>
          hrtc->State = HAL_RTC_STATE_ERROR;
 80022d2:	2304      	movs	r3, #4
          __HAL_UNLOCK(hrtc);
 80022d4:	7425      	strb	r5, [r4, #16]
          hrtc->State = HAL_RTC_STATE_ERROR;
 80022d6:	7463      	strb	r3, [r4, #17]
          return HAL_ERROR;
 80022d8:	e7d6      	b.n	8002288 <HAL_RTC_SetTime+0x40>
    hrtc->State = HAL_RTC_STATE_READY;
 80022da:	2301      	movs	r3, #1
 80022dc:	7463      	strb	r3, [r4, #17]
    __HAL_UNLOCK(hrtc);
 80022de:	2300      	movs	r3, #0
 80022e0:	7423      	strb	r3, [r4, #16]
}
 80022e2:	4628      	mov	r0, r5
 80022e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080022e8 <HAL_RTC_SetDate>:
{
 80022e8:	b570      	push	{r4, r5, r6, lr}
 80022ea:	460d      	mov	r5, r1
  if ((hrtc == NULL) || (sDate == NULL))
 80022ec:	4604      	mov	r4, r0
 80022ee:	b350      	cbz	r0, 8002346 <HAL_RTC_SetDate+0x5e>
 80022f0:	b349      	cbz	r1, 8002346 <HAL_RTC_SetDate+0x5e>
  __HAL_LOCK(hrtc);
 80022f2:	7c03      	ldrb	r3, [r0, #16]
 80022f4:	2002      	movs	r0, #2
 80022f6:	2b01      	cmp	r3, #1
 80022f8:	d048      	beq.n	800238c <HAL_RTC_SetDate+0xa4>
 80022fa:	2301      	movs	r3, #1
  hrtc->State = HAL_RTC_STATE_BUSY;
 80022fc:	7460      	strb	r0, [r4, #17]
  __HAL_LOCK(hrtc);
 80022fe:	7423      	strb	r3, [r4, #16]
  if (Format == RTC_FORMAT_BIN)
 8002300:	78c8      	ldrb	r0, [r1, #3]
 8002302:	bb12      	cbnz	r2, 800234a <HAL_RTC_SetDate+0x62>
    hrtc->DateToUpdate.Year  = sDate->Year;
 8002304:	73e0      	strb	r0, [r4, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 8002306:	784b      	ldrb	r3, [r1, #1]
 8002308:	7363      	strb	r3, [r4, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 800230a:	788b      	ldrb	r3, [r1, #2]
 800230c:	73a3      	strb	r3, [r4, #14]
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 800230e:	7ba2      	ldrb	r2, [r4, #14]
 8002310:	7b61      	ldrb	r1, [r4, #13]
 8002312:	7be0      	ldrb	r0, [r4, #15]
 8002314:	f7ff ff0f 	bl	8002136 <RTC_WeekDayNum>
 8002318:	7320      	strb	r0, [r4, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 800231a:	7028      	strb	r0, [r5, #0]
  counter_time = RTC_ReadTimeCounter(hrtc);
 800231c:	4620      	mov	r0, r4
 800231e:	f7ff fee9 	bl	80020f4 <RTC_ReadTimeCounter>
  if (hours > 24U)
 8002322:	4b1b      	ldr	r3, [pc, #108]	; (8002390 <HAL_RTC_SetDate+0xa8>)
 8002324:	4298      	cmp	r0, r3
 8002326:	d92d      	bls.n	8002384 <HAL_RTC_SetDate+0x9c>
    counter_time -= ((hours / 24U) * 24U * 3600U);
 8002328:	4d1a      	ldr	r5, [pc, #104]	; (8002394 <HAL_RTC_SetDate+0xac>)
 800232a:	fbb0 f1f5 	udiv	r1, r0, r5
 800232e:	fb05 0511 	mls	r5, r5, r1, r0
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8002332:	4620      	mov	r0, r4
 8002334:	4629      	mov	r1, r5
 8002336:	f7ff ff5f 	bl	80021f8 <RTC_WriteTimeCounter>
 800233a:	4606      	mov	r6, r0
 800233c:	b188      	cbz	r0, 8002362 <HAL_RTC_SetDate+0x7a>
      hrtc->State = HAL_RTC_STATE_ERROR;
 800233e:	2304      	movs	r3, #4
 8002340:	7463      	strb	r3, [r4, #17]
      __HAL_UNLOCK(hrtc);
 8002342:	2300      	movs	r3, #0
 8002344:	7423      	strb	r3, [r4, #16]
    return HAL_ERROR;
 8002346:	2001      	movs	r0, #1
 8002348:	e020      	b.n	800238c <HAL_RTC_SetDate+0xa4>
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 800234a:	f7ff feec 	bl	8002126 <RTC_Bcd2ToByte>
 800234e:	73e0      	strb	r0, [r4, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 8002350:	7848      	ldrb	r0, [r1, #1]
 8002352:	f7ff fee8 	bl	8002126 <RTC_Bcd2ToByte>
 8002356:	7360      	strb	r0, [r4, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 8002358:	7888      	ldrb	r0, [r1, #2]
 800235a:	f7ff fee4 	bl	8002126 <RTC_Bcd2ToByte>
 800235e:	73a0      	strb	r0, [r4, #14]
 8002360:	e7d5      	b.n	800230e <HAL_RTC_SetDate+0x26>
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8002362:	4620      	mov	r0, r4
 8002364:	f7ff fed8 	bl	8002118 <RTC_ReadAlarmCounter>
      if (counter_alarm < counter_time)
 8002368:	4285      	cmp	r5, r0
 800236a:	d90b      	bls.n	8002384 <HAL_RTC_SetDate+0x9c>
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 800236c:	f500 31a8 	add.w	r1, r0, #86016	; 0x15000
 8002370:	f501 71c0 	add.w	r1, r1, #384	; 0x180
 8002374:	4620      	mov	r0, r4
 8002376:	f7ff ff53 	bl	8002220 <RTC_WriteAlarmCounter>
 800237a:	b118      	cbz	r0, 8002384 <HAL_RTC_SetDate+0x9c>
          hrtc->State = HAL_RTC_STATE_ERROR;
 800237c:	2304      	movs	r3, #4
          __HAL_UNLOCK(hrtc);
 800237e:	7426      	strb	r6, [r4, #16]
          hrtc->State = HAL_RTC_STATE_ERROR;
 8002380:	7463      	strb	r3, [r4, #17]
          return HAL_ERROR;
 8002382:	e7e0      	b.n	8002346 <HAL_RTC_SetDate+0x5e>
  hrtc->State = HAL_RTC_STATE_READY ;
 8002384:	2301      	movs	r3, #1
  __HAL_UNLOCK(hrtc);
 8002386:	2000      	movs	r0, #0
  hrtc->State = HAL_RTC_STATE_READY ;
 8002388:	7463      	strb	r3, [r4, #17]
  __HAL_UNLOCK(hrtc);
 800238a:	7420      	strb	r0, [r4, #16]
}
 800238c:	bd70      	pop	{r4, r5, r6, pc}
 800238e:	bf00      	nop
 8002390:	00015f8f 	.word	0x00015f8f
 8002394:	00015180 	.word	0x00015180

08002398 <HAL_RTC_WaitForSynchro>:
{
 8002398:	b538      	push	{r3, r4, r5, lr}
  if (hrtc == NULL)
 800239a:	4604      	mov	r4, r0
 800239c:	b1a8      	cbz	r0, 80023ca <HAL_RTC_WaitForSynchro+0x32>
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 800239e:	6802      	ldr	r2, [r0, #0]
 80023a0:	6853      	ldr	r3, [r2, #4]
 80023a2:	f023 0308 	bic.w	r3, r3, #8
 80023a6:	6053      	str	r3, [r2, #4]
  tickstart = HAL_GetTick();
 80023a8:	f7fe fe3a 	bl	8001020 <HAL_GetTick>
 80023ac:	4605      	mov	r5, r0
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 80023ae:	6823      	ldr	r3, [r4, #0]
 80023b0:	685b      	ldr	r3, [r3, #4]
 80023b2:	071b      	lsls	r3, r3, #28
 80023b4:	d501      	bpl.n	80023ba <HAL_RTC_WaitForSynchro+0x22>
  return HAL_OK;
 80023b6:	2000      	movs	r0, #0
}
 80023b8:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80023ba:	f7fe fe31 	bl	8001020 <HAL_GetTick>
 80023be:	1b40      	subs	r0, r0, r5
 80023c0:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80023c4:	d9f3      	bls.n	80023ae <HAL_RTC_WaitForSynchro+0x16>
      return HAL_TIMEOUT;
 80023c6:	2003      	movs	r0, #3
 80023c8:	e7f6      	b.n	80023b8 <HAL_RTC_WaitForSynchro+0x20>
    return HAL_ERROR;
 80023ca:	2001      	movs	r0, #1
 80023cc:	e7f4      	b.n	80023b8 <HAL_RTC_WaitForSynchro+0x20>
	...

080023d0 <HAL_RTC_Init>:
{
 80023d0:	b510      	push	{r4, lr}
  if (hrtc == NULL)
 80023d2:	4604      	mov	r4, r0
 80023d4:	b170      	cbz	r0, 80023f4 <HAL_RTC_Init+0x24>
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80023d6:	7c43      	ldrb	r3, [r0, #17]
 80023d8:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80023dc:	b913      	cbnz	r3, 80023e4 <HAL_RTC_Init+0x14>
    hrtc->Lock = HAL_UNLOCKED;
 80023de:	7402      	strb	r2, [r0, #16]
    HAL_RTC_MspInit(hrtc);
 80023e0:	f7fe fc42 	bl	8000c68 <HAL_RTC_MspInit>
  hrtc->State = HAL_RTC_STATE_BUSY;
 80023e4:	2302      	movs	r3, #2
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80023e6:	4620      	mov	r0, r4
  hrtc->State = HAL_RTC_STATE_BUSY;
 80023e8:	7463      	strb	r3, [r4, #17]
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80023ea:	f7ff ffd5 	bl	8002398 <HAL_RTC_WaitForSynchro>
 80023ee:	b118      	cbz	r0, 80023f8 <HAL_RTC_Init+0x28>
        hrtc->State = HAL_RTC_STATE_ERROR;
 80023f0:	2304      	movs	r3, #4
 80023f2:	7463      	strb	r3, [r4, #17]
    return HAL_ERROR;
 80023f4:	2001      	movs	r0, #1
 80023f6:	e036      	b.n	8002466 <HAL_RTC_Init+0x96>
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80023f8:	4620      	mov	r0, r4
 80023fa:	f7ff fece 	bl	800219a <RTC_EnterInitMode>
 80023fe:	2800      	cmp	r0, #0
 8002400:	d1f6      	bne.n	80023f0 <HAL_RTC_Init+0x20>
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 8002402:	6822      	ldr	r2, [r4, #0]
    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8002404:	68a0      	ldr	r0, [r4, #8]
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 8002406:	6853      	ldr	r3, [r2, #4]
 8002408:	f023 0307 	bic.w	r3, r3, #7
 800240c:	6053      	str	r3, [r2, #4]
    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 800240e:	4a16      	ldr	r2, [pc, #88]	; (8002468 <HAL_RTC_Init+0x98>)
 8002410:	b118      	cbz	r0, 800241a <HAL_RTC_Init+0x4a>
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 8002412:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8002414:	f021 0101 	bic.w	r1, r1, #1
 8002418:	6311      	str	r1, [r2, #48]	; 0x30
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 800241a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800241c:	f423 7360 	bic.w	r3, r3, #896	; 0x380
 8002420:	4303      	orrs	r3, r0
 8002422:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 8002424:	6860      	ldr	r0, [r4, #4]
 8002426:	1c43      	adds	r3, r0, #1
 8002428:	d105      	bne.n	8002436 <HAL_RTC_Init+0x66>
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 800242a:	2001      	movs	r0, #1
 800242c:	f7ff fdf0 	bl	8002010 <HAL_RCCEx_GetPeriphCLKFreq>
      if (prescaler == 0U)
 8002430:	2800      	cmp	r0, #0
 8002432:	d0dd      	beq.n	80023f0 <HAL_RTC_Init+0x20>
        prescaler = prescaler - 1U;
 8002434:	3801      	subs	r0, #1
    MODIFY_REG(hrtc->Instance->PRLH, RTC_PRLH_PRL, (prescaler >> 16U));
 8002436:	6822      	ldr	r2, [r4, #0]
 8002438:	6893      	ldr	r3, [r2, #8]
 800243a:	f023 030f 	bic.w	r3, r3, #15
 800243e:	ea43 4310 	orr.w	r3, r3, r0, lsr #16
 8002442:	6093      	str	r3, [r2, #8]
    MODIFY_REG(hrtc->Instance->PRLL, RTC_PRLL_PRL, (prescaler & RTC_PRLL_PRL));
 8002444:	68d3      	ldr	r3, [r2, #12]
 8002446:	b280      	uxth	r0, r0
 8002448:	0c1b      	lsrs	r3, r3, #16
 800244a:	041b      	lsls	r3, r3, #16
 800244c:	4318      	orrs	r0, r3
 800244e:	60d0      	str	r0, [r2, #12]
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8002450:	4620      	mov	r0, r4
 8002452:	f7ff feb9 	bl	80021c8 <RTC_ExitInitMode>
 8002456:	2301      	movs	r3, #1
 8002458:	b110      	cbz	r0, 8002460 <HAL_RTC_Init+0x90>
      hrtc->State = HAL_RTC_STATE_ERROR;
 800245a:	2204      	movs	r2, #4
 800245c:	7462      	strb	r2, [r4, #17]
      return HAL_ERROR;
 800245e:	e7c9      	b.n	80023f4 <HAL_RTC_Init+0x24>
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 8002460:	7363      	strb	r3, [r4, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 8002462:	81e3      	strh	r3, [r4, #14]
    hrtc->State = HAL_RTC_STATE_READY;
 8002464:	7463      	strb	r3, [r4, #17]
}
 8002466:	bd10      	pop	{r4, pc}
 8002468:	40006c00 	.word	0x40006c00

0800246c <SPI_WaitFlagStateUntilTimeout.constprop.0>:
  * @param  State flag state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 800246c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8002470:	461c      	mov	r4, r3
 8002472:	4616      	mov	r6, r2
 8002474:	460f      	mov	r7, r1
 8002476:	4605      	mov	r5, r0
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002478:	f7fe fdd2 	bl	8001020 <HAL_GetTick>
 800247c:	4434      	add	r4, r6
 800247e:	1a24      	subs	r4, r4, r0
  tmp_tickstart = HAL_GetTick();
 8002480:	f7fe fdce 	bl	8001020 <HAL_GetTick>
 8002484:	4680      	mov	r8, r0

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002486:	4b23      	ldr	r3, [pc, #140]	; (8002514 <SPI_WaitFlagStateUntilTimeout.constprop.0+0xa8>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f3c3 33cb 	ubfx	r3, r3, #15, #12
 800248e:	4363      	muls	r3, r4

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002490:	682a      	ldr	r2, [r5, #0]
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
      {
        tmp_timeout = 0U;
      }
      count--;
 8002492:	9301      	str	r3, [sp, #4]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002494:	6893      	ldr	r3, [r2, #8]
 8002496:	ea37 0303 	bics.w	r3, r7, r3
 800249a:	d001      	beq.n	80024a0 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x34>
    }
  }

  return HAL_OK;
 800249c:	2000      	movs	r0, #0
 800249e:	e02e      	b.n	80024fe <SPI_WaitFlagStateUntilTimeout.constprop.0+0x92>
    if (Timeout != HAL_MAX_DELAY)
 80024a0:	1c73      	adds	r3, r6, #1
 80024a2:	d0f7      	beq.n	8002494 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x28>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80024a4:	f7fe fdbc 	bl	8001020 <HAL_GetTick>
 80024a8:	eba0 0008 	sub.w	r0, r0, r8
 80024ac:	42a0      	cmp	r0, r4
 80024ae:	d329      	bcc.n	8002504 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x98>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80024b0:	682b      	ldr	r3, [r5, #0]
 80024b2:	685a      	ldr	r2, [r3, #4]
 80024b4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80024b8:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80024ba:	686a      	ldr	r2, [r5, #4]
 80024bc:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 80024c0:	d10a      	bne.n	80024d8 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x6c>
 80024c2:	68aa      	ldr	r2, [r5, #8]
 80024c4:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 80024c8:	d002      	beq.n	80024d0 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x64>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80024ca:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 80024ce:	d103      	bne.n	80024d8 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x6c>
          __HAL_SPI_DISABLE(hspi);
 80024d0:	681a      	ldr	r2, [r3, #0]
 80024d2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80024d6:	601a      	str	r2, [r3, #0]
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80024d8:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 80024da:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 80024de:	d107      	bne.n	80024f0 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x84>
          SPI_RESET_CRC(hspi);
 80024e0:	681a      	ldr	r2, [r3, #0]
 80024e2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80024e6:	601a      	str	r2, [r3, #0]
 80024e8:	681a      	ldr	r2, [r3, #0]
 80024ea:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80024ee:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 80024f0:	2301      	movs	r3, #1
 80024f2:	f885 3051 	strb.w	r3, [r5, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 80024f6:	2300      	movs	r3, #0
        return HAL_TIMEOUT;
 80024f8:	2003      	movs	r0, #3
        __HAL_UNLOCK(hspi);
 80024fa:	f885 3050 	strb.w	r3, [r5, #80]	; 0x50
}
 80024fe:	b002      	add	sp, #8
 8002500:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if(count == 0U)
 8002504:	9b01      	ldr	r3, [sp, #4]
        tmp_timeout = 0U;
 8002506:	2b00      	cmp	r3, #0
      count--;
 8002508:	9b01      	ldr	r3, [sp, #4]
        tmp_timeout = 0U;
 800250a:	bf08      	it	eq
 800250c:	2400      	moveq	r4, #0
      count--;
 800250e:	3b01      	subs	r3, #1
 8002510:	e7be      	b.n	8002490 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x24>
 8002512:	bf00      	nop
 8002514:	20000010 	.word	0x20000010

08002518 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002518:	b510      	push	{r4, lr}
 800251a:	4613      	mov	r3, r2
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800251c:	460a      	mov	r2, r1
 800251e:	2180      	movs	r1, #128	; 0x80
{
 8002520:	4604      	mov	r4, r0
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002522:	f7ff ffa3 	bl	800246c <SPI_WaitFlagStateUntilTimeout.constprop.0>
 8002526:	b120      	cbz	r0, 8002532 <SPI_EndRxTxTransaction+0x1a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
 8002528:	2003      	movs	r0, #3
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800252a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800252c:	f043 0320 	orr.w	r3, r3, #32
 8002530:	6563      	str	r3, [r4, #84]	; 0x54
  }
  return HAL_OK;
}
 8002532:	bd10      	pop	{r4, pc}

08002534 <HAL_SPI_Init>:
{
 8002534:	b510      	push	{r4, lr}
  if (hspi == NULL)
 8002536:	4604      	mov	r4, r0
 8002538:	2800      	cmp	r0, #0
 800253a:	d051      	beq.n	80025e0 <HAL_SPI_Init+0xac>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800253c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800253e:	2b00      	cmp	r3, #0
 8002540:	d14a      	bne.n	80025d8 <HAL_SPI_Init+0xa4>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002542:	6842      	ldr	r2, [r0, #4]
 8002544:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8002548:	d000      	beq.n	800254c <HAL_SPI_Init+0x18>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800254a:	61c3      	str	r3, [r0, #28]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800254c:	2300      	movs	r3, #0
 800254e:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8002550:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 8002554:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002558:	b923      	cbnz	r3, 8002564 <HAL_SPI_Init+0x30>
    HAL_SPI_MspInit(hspi);
 800255a:	4620      	mov	r0, r4
    hspi->Lock = HAL_UNLOCKED;
 800255c:	f884 2050 	strb.w	r2, [r4, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 8002560:	f7fe fba0 	bl	8000ca4 <HAL_SPI_MspInit>
  hspi->State = HAL_SPI_STATE_BUSY;
 8002564:	2302      	movs	r3, #2
  __HAL_SPI_DISABLE(hspi);
 8002566:	6822      	ldr	r2, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 8002568:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 800256c:	6813      	ldr	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800256e:	68a0      	ldr	r0, [r4, #8]
  __HAL_SPI_DISABLE(hspi);
 8002570:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002574:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002576:	6863      	ldr	r3, [r4, #4]
 8002578:	f400 4004 	and.w	r0, r0, #33792	; 0x8400
 800257c:	f403 7382 	and.w	r3, r3, #260	; 0x104
 8002580:	4303      	orrs	r3, r0
 8002582:	68e0      	ldr	r0, [r4, #12]
 8002584:	69a1      	ldr	r1, [r4, #24]
 8002586:	f400 6000 	and.w	r0, r0, #2048	; 0x800
 800258a:	4303      	orrs	r3, r0
 800258c:	6920      	ldr	r0, [r4, #16]
 800258e:	f000 0002 	and.w	r0, r0, #2
 8002592:	4303      	orrs	r3, r0
 8002594:	6960      	ldr	r0, [r4, #20]
 8002596:	f000 0001 	and.w	r0, r0, #1
 800259a:	4303      	orrs	r3, r0
 800259c:	f401 7000 	and.w	r0, r1, #512	; 0x200
 80025a0:	4303      	orrs	r3, r0
 80025a2:	69e0      	ldr	r0, [r4, #28]
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80025a4:	0c09      	lsrs	r1, r1, #16
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80025a6:	f000 0038 	and.w	r0, r0, #56	; 0x38
 80025aa:	4303      	orrs	r3, r0
 80025ac:	6a20      	ldr	r0, [r4, #32]
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80025ae:	f001 0104 	and.w	r1, r1, #4
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80025b2:	f000 0080 	and.w	r0, r0, #128	; 0x80
 80025b6:	4303      	orrs	r3, r0
 80025b8:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80025ba:	f400 5000 	and.w	r0, r0, #8192	; 0x2000
 80025be:	4303      	orrs	r3, r0
 80025c0:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80025c2:	6051      	str	r1, [r2, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80025c4:	69d3      	ldr	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80025c6:	2000      	movs	r0, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80025c8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80025cc:	61d3      	str	r3, [r2, #28]
  hspi->State     = HAL_SPI_STATE_READY;
 80025ce:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80025d0:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80025d2:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
}
 80025d6:	bd10      	pop	{r4, pc}
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80025d8:	2300      	movs	r3, #0
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80025da:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80025de:	e7b5      	b.n	800254c <HAL_SPI_Init+0x18>
    return HAL_ERROR;
 80025e0:	2001      	movs	r0, #1
 80025e2:	e7f8      	b.n	80025d6 <HAL_SPI_Init+0xa2>

080025e4 <HAL_SPI_Transmit>:
{
 80025e4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80025e8:	461e      	mov	r6, r3
  __HAL_LOCK(hspi);
 80025ea:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
{
 80025ee:	4604      	mov	r4, r0
  __HAL_LOCK(hspi);
 80025f0:	2b01      	cmp	r3, #1
{
 80025f2:	460d      	mov	r5, r1
 80025f4:	4617      	mov	r7, r2
  __HAL_LOCK(hspi);
 80025f6:	f000 80a0 	beq.w	800273a <HAL_SPI_Transmit+0x156>
 80025fa:	2301      	movs	r3, #1
 80025fc:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 8002600:	f7fe fd0e 	bl	8001020 <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 8002604:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
  tickstart = HAL_GetTick();
 8002608:	4680      	mov	r8, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 800260a:	2b01      	cmp	r3, #1
 800260c:	b2d8      	uxtb	r0, r3
 800260e:	f040 8092 	bne.w	8002736 <HAL_SPI_Transmit+0x152>
  if ((pData == NULL) || (Size == 0U))
 8002612:	2d00      	cmp	r5, #0
 8002614:	d05d      	beq.n	80026d2 <HAL_SPI_Transmit+0xee>
 8002616:	2f00      	cmp	r7, #0
 8002618:	d05b      	beq.n	80026d2 <HAL_SPI_Transmit+0xee>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800261a:	2303      	movs	r3, #3
 800261c:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002620:	2300      	movs	r3, #0
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002622:	68a2      	ldr	r2, [r4, #8]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002624:	6563      	str	r3, [r4, #84]	; 0x54
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002626:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
  hspi->RxISR       = NULL;
 800262a:	e9c4 3310 	strd	r3, r3, [r4, #64]	; 0x40
  hspi->TxXferCount = Size;
 800262e:	86e7      	strh	r7, [r4, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002630:	63a3      	str	r3, [r4, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002632:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002634:	87e3      	strh	r3, [r4, #62]	; 0x3e
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002636:	6325      	str	r5, [r4, #48]	; 0x30
    __HAL_SPI_DISABLE(hspi);
 8002638:	6823      	ldr	r3, [r4, #0]
  hspi->TxXferSize  = Size;
 800263a:	86a7      	strh	r7, [r4, #52]	; 0x34
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800263c:	d107      	bne.n	800264e <HAL_SPI_Transmit+0x6a>
    __HAL_SPI_DISABLE(hspi);
 800263e:	681a      	ldr	r2, [r3, #0]
 8002640:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002644:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002646:	681a      	ldr	r2, [r3, #0]
 8002648:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800264c:	601a      	str	r2, [r3, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800264e:	681a      	ldr	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002650:	68e1      	ldr	r1, [r4, #12]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002652:	0652      	lsls	r2, r2, #25
    __HAL_SPI_ENABLE(hspi);
 8002654:	bf5e      	ittt	pl
 8002656:	681a      	ldrpl	r2, [r3, #0]
 8002658:	f042 0240 	orrpl.w	r2, r2, #64	; 0x40
 800265c:	601a      	strpl	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800265e:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002662:	6862      	ldr	r2, [r4, #4]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002664:	d141      	bne.n	80026ea <HAL_SPI_Transmit+0x106>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002666:	b10a      	cbz	r2, 800266c <HAL_SPI_Transmit+0x88>
 8002668:	2f01      	cmp	r7, #1
 800266a:	d107      	bne.n	800267c <HAL_SPI_Transmit+0x98>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800266c:	f835 2b02 	ldrh.w	r2, [r5], #2
 8002670:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002672:	6325      	str	r5, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8002674:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8002676:	3b01      	subs	r3, #1
 8002678:	b29b      	uxth	r3, r3
 800267a:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 800267c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800267e:	b29b      	uxth	r3, r3
 8002680:	b9a3      	cbnz	r3, 80026ac <HAL_SPI_Transmit+0xc8>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002682:	4642      	mov	r2, r8
 8002684:	4631      	mov	r1, r6
 8002686:	4620      	mov	r0, r4
 8002688:	f7ff ff46 	bl	8002518 <SPI_EndRxTxTransaction>
 800268c:	2800      	cmp	r0, #0
 800268e:	d14f      	bne.n	8002730 <HAL_SPI_Transmit+0x14c>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002690:	68a3      	ldr	r3, [r4, #8]
 8002692:	b933      	cbnz	r3, 80026a2 <HAL_SPI_Transmit+0xbe>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002694:	9301      	str	r3, [sp, #4]
 8002696:	6823      	ldr	r3, [r4, #0]
 8002698:	68da      	ldr	r2, [r3, #12]
 800269a:	9201      	str	r2, [sp, #4]
 800269c:	689b      	ldr	r3, [r3, #8]
 800269e:	9301      	str	r3, [sp, #4]
 80026a0:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80026a2:	6d60      	ldr	r0, [r4, #84]	; 0x54
    errorcode = HAL_BUSY;
 80026a4:	3800      	subs	r0, #0
 80026a6:	bf18      	it	ne
 80026a8:	2001      	movne	r0, #1
error:
 80026aa:	e012      	b.n	80026d2 <HAL_SPI_Transmit+0xee>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80026ac:	6822      	ldr	r2, [r4, #0]
 80026ae:	6893      	ldr	r3, [r2, #8]
 80026b0:	0798      	lsls	r0, r3, #30
 80026b2:	d505      	bpl.n	80026c0 <HAL_SPI_Transmit+0xdc>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80026b4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80026b6:	f833 1b02 	ldrh.w	r1, [r3], #2
 80026ba:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80026bc:	6323      	str	r3, [r4, #48]	; 0x30
 80026be:	e7d9      	b.n	8002674 <HAL_SPI_Transmit+0x90>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80026c0:	f7fe fcae 	bl	8001020 <HAL_GetTick>
 80026c4:	eba0 0008 	sub.w	r0, r0, r8
 80026c8:	42b0      	cmp	r0, r6
 80026ca:	d30b      	bcc.n	80026e4 <HAL_SPI_Transmit+0x100>
 80026cc:	1c71      	adds	r1, r6, #1
 80026ce:	d0d5      	beq.n	800267c <HAL_SPI_Transmit+0x98>
          errorcode = HAL_TIMEOUT;
 80026d0:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 80026d2:	2301      	movs	r3, #1
 80026d4:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80026d8:	2300      	movs	r3, #0
 80026da:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 80026de:	b002      	add	sp, #8
 80026e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80026e4:	2e00      	cmp	r6, #0
 80026e6:	d1c9      	bne.n	800267c <HAL_SPI_Transmit+0x98>
 80026e8:	e7f2      	b.n	80026d0 <HAL_SPI_Transmit+0xec>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80026ea:	b10a      	cbz	r2, 80026f0 <HAL_SPI_Transmit+0x10c>
 80026ec:	2f01      	cmp	r7, #1
 80026ee:	d108      	bne.n	8002702 <HAL_SPI_Transmit+0x11e>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80026f0:	782a      	ldrb	r2, [r5, #0]
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80026f2:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80026f4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80026f6:	3301      	adds	r3, #1
 80026f8:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 80026fa:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80026fc:	3b01      	subs	r3, #1
 80026fe:	b29b      	uxth	r3, r3
 8002700:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 8002702:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8002704:	b29b      	uxth	r3, r3
 8002706:	2b00      	cmp	r3, #0
 8002708:	d0bb      	beq.n	8002682 <HAL_SPI_Transmit+0x9e>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800270a:	6823      	ldr	r3, [r4, #0]
 800270c:	689a      	ldr	r2, [r3, #8]
 800270e:	0792      	lsls	r2, r2, #30
 8002710:	d502      	bpl.n	8002718 <HAL_SPI_Transmit+0x134>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002712:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8002714:	7812      	ldrb	r2, [r2, #0]
 8002716:	e7ec      	b.n	80026f2 <HAL_SPI_Transmit+0x10e>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002718:	f7fe fc82 	bl	8001020 <HAL_GetTick>
 800271c:	eba0 0008 	sub.w	r0, r0, r8
 8002720:	42b0      	cmp	r0, r6
 8002722:	d302      	bcc.n	800272a <HAL_SPI_Transmit+0x146>
 8002724:	1c73      	adds	r3, r6, #1
 8002726:	d0ec      	beq.n	8002702 <HAL_SPI_Transmit+0x11e>
 8002728:	e7d2      	b.n	80026d0 <HAL_SPI_Transmit+0xec>
 800272a:	2e00      	cmp	r6, #0
 800272c:	d1e9      	bne.n	8002702 <HAL_SPI_Transmit+0x11e>
 800272e:	e7cf      	b.n	80026d0 <HAL_SPI_Transmit+0xec>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002730:	2320      	movs	r3, #32
 8002732:	6563      	str	r3, [r4, #84]	; 0x54
 8002734:	e7ac      	b.n	8002690 <HAL_SPI_Transmit+0xac>
    errorcode = HAL_BUSY;
 8002736:	2002      	movs	r0, #2
 8002738:	e7cb      	b.n	80026d2 <HAL_SPI_Transmit+0xee>
  __HAL_LOCK(hspi);
 800273a:	2002      	movs	r0, #2
 800273c:	e7cf      	b.n	80026de <HAL_SPI_Transmit+0xfa>
	...

08002740 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002740:	6a03      	ldr	r3, [r0, #32]
{
 8002742:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002744:	f023 0301 	bic.w	r3, r3, #1
 8002748:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800274a:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800274c:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800274e:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002750:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002752:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8002756:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002758:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 800275a:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 800275e:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002760:	4d0a      	ldr	r5, [pc, #40]	; (800278c <TIM_OC1_SetConfig+0x4c>)
 8002762:	42a8      	cmp	r0, r5
 8002764:	d10b      	bne.n	800277e <TIM_OC1_SetConfig+0x3e>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002766:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 8002768:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 800276c:	432b      	orrs	r3, r5
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800276e:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002772:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
 8002776:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 8002778:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 800277c:	432c      	orrs	r4, r5
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800277e:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002780:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002782:	684a      	ldr	r2, [r1, #4]
 8002784:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002786:	6203      	str	r3, [r0, #32]
}
 8002788:	bd70      	pop	{r4, r5, r6, pc}
 800278a:	bf00      	nop
 800278c:	40012c00 	.word	0x40012c00

08002790 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002790:	6a03      	ldr	r3, [r0, #32]
{
 8002792:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002794:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002798:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800279a:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800279c:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800279e:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80027a0:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80027a2:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 80027a6:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80027a8:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 80027aa:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80027ae:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80027b2:	4d0b      	ldr	r5, [pc, #44]	; (80027e0 <TIM_OC3_SetConfig+0x50>)
 80027b4:	42a8      	cmp	r0, r5
 80027b6:	d10d      	bne.n	80027d4 <TIM_OC3_SetConfig+0x44>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80027b8:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 80027ba:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80027be:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80027c2:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80027c6:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
 80027ca:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC3NE;
 80027cc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80027d0:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80027d4:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80027d6:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80027d8:	684a      	ldr	r2, [r1, #4]
 80027da:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80027dc:	6203      	str	r3, [r0, #32]
}
 80027de:	bd70      	pop	{r4, r5, r6, pc}
 80027e0:	40012c00 	.word	0x40012c00

080027e4 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80027e4:	6a03      	ldr	r3, [r0, #32]
{
 80027e6:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80027e8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80027ec:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80027ee:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80027f0:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80027f2:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80027f4:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80027f6:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80027fa:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80027fe:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 8002800:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002804:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002808:	4d06      	ldr	r5, [pc, #24]	; (8002824 <TIM_OC4_SetConfig+0x40>)
 800280a:	42a8      	cmp	r0, r5

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800280c:	bf02      	ittt	eq
 800280e:	694d      	ldreq	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002810:	f424 4480 	biceq.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002814:	ea44 1485 	orreq.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002818:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800281a:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800281c:	684a      	ldr	r2, [r1, #4]
 800281e:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002820:	6203      	str	r3, [r0, #32]
}
 8002822:	bd30      	pop	{r4, r5, pc}
 8002824:	40012c00 	.word	0x40012c00

08002828 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002828:	4a1a      	ldr	r2, [pc, #104]	; (8002894 <TIM_Base_SetConfig+0x6c>)
  tmpcr1 = TIMx->CR1;
 800282a:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800282c:	4290      	cmp	r0, r2
 800282e:	d00a      	beq.n	8002846 <TIM_Base_SetConfig+0x1e>
 8002830:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002834:	d007      	beq.n	8002846 <TIM_Base_SetConfig+0x1e>
 8002836:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800283a:	4290      	cmp	r0, r2
 800283c:	d003      	beq.n	8002846 <TIM_Base_SetConfig+0x1e>
 800283e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002842:	4290      	cmp	r0, r2
 8002844:	d115      	bne.n	8002872 <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= Structure->CounterMode;
 8002846:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002848:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800284c:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800284e:	4a11      	ldr	r2, [pc, #68]	; (8002894 <TIM_Base_SetConfig+0x6c>)
 8002850:	4290      	cmp	r0, r2
 8002852:	d00a      	beq.n	800286a <TIM_Base_SetConfig+0x42>
 8002854:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002858:	d007      	beq.n	800286a <TIM_Base_SetConfig+0x42>
 800285a:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800285e:	4290      	cmp	r0, r2
 8002860:	d003      	beq.n	800286a <TIM_Base_SetConfig+0x42>
 8002862:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002866:	4290      	cmp	r0, r2
 8002868:	d103      	bne.n	8002872 <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800286a:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 800286c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002870:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002872:	694a      	ldr	r2, [r1, #20]
 8002874:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002878:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 800287a:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800287c:	688b      	ldr	r3, [r1, #8]
 800287e:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8002880:	680b      	ldr	r3, [r1, #0]
 8002882:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002884:	4b03      	ldr	r3, [pc, #12]	; (8002894 <TIM_Base_SetConfig+0x6c>)
 8002886:	4298      	cmp	r0, r3
    TIMx->RCR = Structure->RepetitionCounter;
 8002888:	bf04      	itt	eq
 800288a:	690b      	ldreq	r3, [r1, #16]
 800288c:	6303      	streq	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 800288e:	2301      	movs	r3, #1
 8002890:	6143      	str	r3, [r0, #20]
}
 8002892:	4770      	bx	lr
 8002894:	40012c00 	.word	0x40012c00

08002898 <HAL_TIM_PWM_Init>:
{
 8002898:	b510      	push	{r4, lr}
  if (htim == NULL)
 800289a:	4604      	mov	r4, r0
 800289c:	b330      	cbz	r0, 80028ec <HAL_TIM_PWM_Init+0x54>
  if (htim->State == HAL_TIM_STATE_RESET)
 800289e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80028a2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80028a6:	b91b      	cbnz	r3, 80028b0 <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 80028a8:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 80028ac:	f7fe fa5a 	bl	8000d64 <HAL_TIM_PWM_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 80028b0:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80028b2:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 80028b4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80028b8:	1d21      	adds	r1, r4, #4
 80028ba:	f7ff ffb5 	bl	8002828 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80028be:	2301      	movs	r3, #1
  return HAL_OK;
 80028c0:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80028c2:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028c6:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 80028ca:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 80028ce:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80028d2:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028d6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80028da:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80028de:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80028e2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 80028e6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 80028ea:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80028ec:	2001      	movs	r0, #1
 80028ee:	e7fc      	b.n	80028ea <HAL_TIM_PWM_Init+0x52>

080028f0 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80028f0:	6a03      	ldr	r3, [r0, #32]
{
 80028f2:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80028f4:	f023 0310 	bic.w	r3, r3, #16
 80028f8:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 80028fa:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 80028fc:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 80028fe:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002900:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002902:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002906:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800290a:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 800290c:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002910:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002914:	4d0b      	ldr	r5, [pc, #44]	; (8002944 <TIM_OC2_SetConfig+0x54>)
 8002916:	42a8      	cmp	r0, r5
 8002918:	d10d      	bne.n	8002936 <TIM_OC2_SetConfig+0x46>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800291a:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 800291c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002920:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002924:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002928:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
 800292c:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC2NE;
 800292e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002932:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
  TIMx->CR2 = tmpcr2;
 8002936:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8002938:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 800293a:	684a      	ldr	r2, [r1, #4]
 800293c:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 800293e:	6203      	str	r3, [r0, #32]
}
 8002940:	bd70      	pop	{r4, r5, r6, pc}
 8002942:	bf00      	nop
 8002944:	40012c00 	.word	0x40012c00

08002948 <HAL_TIM_PWM_ConfigChannel>:
{
 8002948:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 800294a:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 800294e:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8002950:	2b01      	cmp	r3, #1
 8002952:	d052      	beq.n	80029fa <HAL_TIM_PWM_ConfigChannel+0xb2>
 8002954:	2301      	movs	r3, #1
  switch (Channel)
 8002956:	2a08      	cmp	r2, #8
  __HAL_LOCK(htim);
 8002958:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  switch (Channel)
 800295c:	d03c      	beq.n	80029d8 <HAL_TIM_PWM_ConfigChannel+0x90>
 800295e:	d806      	bhi.n	800296e <HAL_TIM_PWM_ConfigChannel+0x26>
 8002960:	b1c2      	cbz	r2, 8002994 <HAL_TIM_PWM_ConfigChannel+0x4c>
 8002962:	2a04      	cmp	r2, #4
 8002964:	d027      	beq.n	80029b6 <HAL_TIM_PWM_ConfigChannel+0x6e>
  __HAL_UNLOCK(htim);
 8002966:	2000      	movs	r0, #0
 8002968:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 800296c:	bd38      	pop	{r3, r4, r5, pc}
  switch (Channel)
 800296e:	2a0c      	cmp	r2, #12
 8002970:	d1f9      	bne.n	8002966 <HAL_TIM_PWM_ConfigChannel+0x1e>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002972:	6800      	ldr	r0, [r0, #0]
 8002974:	f7ff ff36 	bl	80027e4 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002978:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800297a:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800297c:	69da      	ldr	r2, [r3, #28]
 800297e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002982:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002984:	69da      	ldr	r2, [r3, #28]
 8002986:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800298a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800298c:	69da      	ldr	r2, [r3, #28]
 800298e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002992:	e030      	b.n	80029f6 <HAL_TIM_PWM_ConfigChannel+0xae>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002994:	6800      	ldr	r0, [r0, #0]
 8002996:	f7ff fed3 	bl	8002740 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800299a:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800299c:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800299e:	699a      	ldr	r2, [r3, #24]
 80029a0:	f042 0208 	orr.w	r2, r2, #8
 80029a4:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80029a6:	699a      	ldr	r2, [r3, #24]
 80029a8:	f022 0204 	bic.w	r2, r2, #4
 80029ac:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80029ae:	699a      	ldr	r2, [r3, #24]
 80029b0:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80029b2:	619a      	str	r2, [r3, #24]
      break;
 80029b4:	e7d7      	b.n	8002966 <HAL_TIM_PWM_ConfigChannel+0x1e>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80029b6:	6800      	ldr	r0, [r0, #0]
 80029b8:	f7ff ff9a 	bl	80028f0 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80029bc:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80029be:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80029c0:	699a      	ldr	r2, [r3, #24]
 80029c2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80029c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80029c8:	699a      	ldr	r2, [r3, #24]
 80029ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80029ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80029d0:	699a      	ldr	r2, [r3, #24]
 80029d2:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80029d6:	e7ec      	b.n	80029b2 <HAL_TIM_PWM_ConfigChannel+0x6a>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80029d8:	6800      	ldr	r0, [r0, #0]
 80029da:	f7ff fed9 	bl	8002790 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80029de:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80029e0:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80029e2:	69da      	ldr	r2, [r3, #28]
 80029e4:	f042 0208 	orr.w	r2, r2, #8
 80029e8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80029ea:	69da      	ldr	r2, [r3, #28]
 80029ec:	f022 0204 	bic.w	r2, r2, #4
 80029f0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80029f2:	69da      	ldr	r2, [r3, #28]
 80029f4:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80029f6:	61da      	str	r2, [r3, #28]
      break;
 80029f8:	e7b5      	b.n	8002966 <HAL_TIM_PWM_ConfigChannel+0x1e>
  __HAL_LOCK(htim);
 80029fa:	2002      	movs	r0, #2
 80029fc:	e7b6      	b.n	800296c <HAL_TIM_PWM_ConfigChannel+0x24>

080029fe <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80029fe:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002a00:	2401      	movs	r4, #1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002a02:	6a03      	ldr	r3, [r0, #32]
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002a04:	f001 011f 	and.w	r1, r1, #31
 8002a08:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 8002a0a:	ea23 0304 	bic.w	r3, r3, r4
 8002a0e:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002a10:	6a03      	ldr	r3, [r0, #32]
 8002a12:	408a      	lsls	r2, r1
 8002a14:	431a      	orrs	r2, r3
 8002a16:	6202      	str	r2, [r0, #32]
}
 8002a18:	bd10      	pop	{r4, pc}
	...

08002a1c <HAL_TIM_OC_Start>:
{
 8002a1c:	b510      	push	{r4, lr}
 8002a1e:	4604      	mov	r4, r0
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002a20:	b929      	cbnz	r1, 8002a2e <HAL_TIM_OC_Start+0x12>
 8002a22:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8002a26:	2b01      	cmp	r3, #1
 8002a28:	d021      	beq.n	8002a6e <HAL_TIM_OC_Start+0x52>
    return HAL_ERROR;
 8002a2a:	2001      	movs	r0, #1
}
 8002a2c:	bd10      	pop	{r4, pc}
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002a2e:	2904      	cmp	r1, #4
 8002a30:	d107      	bne.n	8002a42 <HAL_TIM_OC_Start+0x26>
 8002a32:	f890 303f 	ldrb.w	r3, [r0, #63]	; 0x3f
 8002a36:	2b01      	cmp	r3, #1
 8002a38:	d1f7      	bne.n	8002a2a <HAL_TIM_OC_Start+0xe>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002a3a:	2302      	movs	r3, #2
 8002a3c:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8002a40:	e018      	b.n	8002a74 <HAL_TIM_OC_Start+0x58>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002a42:	2908      	cmp	r1, #8
 8002a44:	d107      	bne.n	8002a56 <HAL_TIM_OC_Start+0x3a>
 8002a46:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8002a4a:	2b01      	cmp	r3, #1
 8002a4c:	d1ed      	bne.n	8002a2a <HAL_TIM_OC_Start+0xe>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002a4e:	2302      	movs	r3, #2
 8002a50:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8002a54:	e00e      	b.n	8002a74 <HAL_TIM_OC_Start+0x58>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002a56:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8002a5a:	2b01      	cmp	r3, #1
 8002a5c:	d1e5      	bne.n	8002a2a <HAL_TIM_OC_Start+0xe>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002a5e:	2904      	cmp	r1, #4
 8002a60:	d0eb      	beq.n	8002a3a <HAL_TIM_OC_Start+0x1e>
 8002a62:	2908      	cmp	r1, #8
 8002a64:	d0f3      	beq.n	8002a4e <HAL_TIM_OC_Start+0x32>
 8002a66:	2302      	movs	r3, #2
 8002a68:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
 8002a6c:	e002      	b.n	8002a74 <HAL_TIM_OC_Start+0x58>
 8002a6e:	2302      	movs	r3, #2
 8002a70:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002a74:	2201      	movs	r2, #1
 8002a76:	6820      	ldr	r0, [r4, #0]
 8002a78:	f7ff ffc1 	bl	80029fe <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002a7c:	6823      	ldr	r3, [r4, #0]
 8002a7e:	4a0e      	ldr	r2, [pc, #56]	; (8002ab8 <HAL_TIM_OC_Start+0x9c>)
 8002a80:	4293      	cmp	r3, r2
 8002a82:	d10a      	bne.n	8002a9a <HAL_TIM_OC_Start+0x7e>
    __HAL_TIM_MOE_ENABLE(htim);
 8002a84:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002a86:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002a8a:	645a      	str	r2, [r3, #68]	; 0x44
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002a8c:	689a      	ldr	r2, [r3, #8]
 8002a8e:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a92:	2a06      	cmp	r2, #6
 8002a94:	d10b      	bne.n	8002aae <HAL_TIM_OC_Start+0x92>
  return HAL_OK;
 8002a96:	2000      	movs	r0, #0
 8002a98:	e7c8      	b.n	8002a2c <HAL_TIM_OC_Start+0x10>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a9e:	d0f5      	beq.n	8002a8c <HAL_TIM_OC_Start+0x70>
 8002aa0:	4a06      	ldr	r2, [pc, #24]	; (8002abc <HAL_TIM_OC_Start+0xa0>)
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	d0f2      	beq.n	8002a8c <HAL_TIM_OC_Start+0x70>
 8002aa6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d0ee      	beq.n	8002a8c <HAL_TIM_OC_Start+0x70>
    __HAL_TIM_ENABLE(htim);
 8002aae:	681a      	ldr	r2, [r3, #0]
 8002ab0:	f042 0201 	orr.w	r2, r2, #1
 8002ab4:	601a      	str	r2, [r3, #0]
 8002ab6:	e7ee      	b.n	8002a96 <HAL_TIM_OC_Start+0x7a>
 8002ab8:	40012c00 	.word	0x40012c00
 8002abc:	40000400 	.word	0x40000400

08002ac0 <HAL_TIM_PWM_Start>:
 8002ac0:	f7ff bfac 	b.w	8002a1c <HAL_TIM_OC_Start>

08002ac4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002ac4:	b530      	push	{r4, r5, lr}
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002ac6:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8002aca:	4602      	mov	r2, r0
  __HAL_LOCK(htim);
 8002acc:	2b01      	cmp	r3, #1
 8002ace:	f04f 0002 	mov.w	r0, #2
 8002ad2:	d022      	beq.n	8002b1a <HAL_TIMEx_MasterConfigSynchronization+0x56>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002ad4:	6813      	ldr	r3, [r2, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8002ad6:	f882 003d 	strb.w	r0, [r2, #61]	; 0x3d
  tmpcr2 = htim->Instance->CR2;
 8002ada:	685c      	ldr	r4, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002adc:	680d      	ldr	r5, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 8002ade:	f024 0470 	bic.w	r4, r4, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002ae2:	432c      	orrs	r4, r5
  tmpsmcr = htim->Instance->SMCR;
 8002ae4:	6898      	ldr	r0, [r3, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002ae6:	605c      	str	r4, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ae8:	4c0c      	ldr	r4, [pc, #48]	; (8002b1c <HAL_TIMEx_MasterConfigSynchronization+0x58>)
 8002aea:	42a3      	cmp	r3, r4
 8002aec:	d00a      	beq.n	8002b04 <HAL_TIMEx_MasterConfigSynchronization+0x40>
 8002aee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002af2:	d007      	beq.n	8002b04 <HAL_TIMEx_MasterConfigSynchronization+0x40>
 8002af4:	f5a4 3494 	sub.w	r4, r4, #75776	; 0x12800
 8002af8:	42a3      	cmp	r3, r4
 8002afa:	d003      	beq.n	8002b04 <HAL_TIMEx_MasterConfigSynchronization+0x40>
 8002afc:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002b00:	42a3      	cmp	r3, r4
 8002b02:	d104      	bne.n	8002b0e <HAL_TIMEx_MasterConfigSynchronization+0x4a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002b04:	6849      	ldr	r1, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002b06:	f020 0080 	bic.w	r0, r0, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002b0a:	4301      	orrs	r1, r0

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002b0c:	6099      	str	r1, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002b0e:	2301      	movs	r3, #1

  __HAL_UNLOCK(htim);
 8002b10:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8002b12:	f882 303d 	strb.w	r3, [r2, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8002b16:	f882 003c 	strb.w	r0, [r2, #60]	; 0x3c

  return HAL_OK;
}
 8002b1a:	bd30      	pop	{r4, r5, pc}
 8002b1c:	40012c00 	.word	0x40012c00

08002b20 <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8002b20:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002b24:	2b01      	cmp	r3, #1
 8002b26:	d01f      	beq.n	8002b68 <HAL_TIMEx_ConfigBreakDeadTime+0x48>
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002b28:	68cb      	ldr	r3, [r1, #12]
 8002b2a:	688a      	ldr	r2, [r1, #8]
 8002b2c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b30:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002b32:	684a      	ldr	r2, [r1, #4]
 8002b34:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002b38:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8002b3a:	680a      	ldr	r2, [r1, #0]
 8002b3c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002b40:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8002b42:	690a      	ldr	r2, [r1, #16]
 8002b44:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002b48:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8002b4a:	694a      	ldr	r2, [r1, #20]
 8002b4c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002b50:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002b52:	69ca      	ldr	r2, [r1, #28]
 8002b54:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002b58:	4313      	orrs	r3, r2


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8002b5a:	6802      	ldr	r2, [r0, #0]
 8002b5c:	6453      	str	r3, [r2, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8002b5e:	2300      	movs	r3, #0
 8002b60:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 8002b64:	4618      	mov	r0, r3
 8002b66:	4770      	bx	lr
  __HAL_LOCK(htim);
 8002b68:	2002      	movs	r0, #2
}
 8002b6a:	4770      	bx	lr

08002b6c <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002b6c:	6803      	ldr	r3, [r0, #0]
 8002b6e:	68da      	ldr	r2, [r3, #12]
 8002b70:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002b74:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b76:	695a      	ldr	r2, [r3, #20]
 8002b78:	f022 0201 	bic.w	r2, r2, #1
 8002b7c:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002b7e:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8002b80:	2a01      	cmp	r2, #1
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002b82:	bf02      	ittt	eq
 8002b84:	68da      	ldreq	r2, [r3, #12]
 8002b86:	f022 0210 	biceq.w	r2, r2, #16
 8002b8a:	60da      	streq	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002b8c:	2320      	movs	r3, #32
 8002b8e:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b92:	2300      	movs	r3, #0
 8002b94:	6303      	str	r3, [r0, #48]	; 0x30
}
 8002b96:	4770      	bx	lr

08002b98 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002b98:	b510      	push	{r4, lr}
 8002b9a:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002b9c:	6803      	ldr	r3, [r0, #0]
 8002b9e:	68c1      	ldr	r1, [r0, #12]
 8002ba0:	691a      	ldr	r2, [r3, #16]
 8002ba2:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8002ba6:	430a      	orrs	r2, r1
 8002ba8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002baa:	6882      	ldr	r2, [r0, #8]
 8002bac:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1,
 8002bae:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002bb0:	4302      	orrs	r2, r0
 8002bb2:	6960      	ldr	r0, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 8002bb4:	f421 51b0 	bic.w	r1, r1, #5632	; 0x1600
 8002bb8:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002bbc:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 8002bbe:	430a      	orrs	r2, r1
 8002bc0:	60da      	str	r2, [r3, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002bc2:	695a      	ldr	r2, [r3, #20]
 8002bc4:	69a1      	ldr	r1, [r4, #24]
 8002bc6:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002bca:	430a      	orrs	r2, r1
 8002bcc:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002bce:	4a0e      	ldr	r2, [pc, #56]	; (8002c08 <UART_SetConfig+0x70>)
 8002bd0:	4293      	cmp	r3, r2
 8002bd2:	d115      	bne.n	8002c00 <UART_SetConfig+0x68>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002bd4:	f7ff f992 	bl	8001efc <HAL_RCC_GetPCLK2Freq>
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002bd8:	2319      	movs	r3, #25
 8002bda:	4343      	muls	r3, r0
 8002bdc:	6862      	ldr	r2, [r4, #4]
 8002bde:	6820      	ldr	r0, [r4, #0]
 8002be0:	0092      	lsls	r2, r2, #2
 8002be2:	fbb3 f3f2 	udiv	r3, r3, r2
 8002be6:	2264      	movs	r2, #100	; 0x64
 8002be8:	fbb3 f1f2 	udiv	r1, r3, r2
 8002bec:	fb02 3311 	mls	r3, r2, r1, r3
 8002bf0:	011b      	lsls	r3, r3, #4
 8002bf2:	3332      	adds	r3, #50	; 0x32
 8002bf4:	fbb3 f3f2 	udiv	r3, r3, r2
 8002bf8:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8002bfc:	6083      	str	r3, [r0, #8]
#endif /* USART_CR1_OVER8 */
}
 8002bfe:	bd10      	pop	{r4, pc}
    pclk = HAL_RCC_GetPCLK1Freq();
 8002c00:	f7ff f96c 	bl	8001edc <HAL_RCC_GetPCLK1Freq>
 8002c04:	e7e8      	b.n	8002bd8 <UART_SetConfig+0x40>
 8002c06:	bf00      	nop
 8002c08:	40013800 	.word	0x40013800

08002c0c <HAL_UART_Init>:
{
 8002c0c:	b510      	push	{r4, lr}
  if (huart == NULL)
 8002c0e:	4604      	mov	r4, r0
 8002c10:	b340      	cbz	r0, 8002c64 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 8002c12:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002c16:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002c1a:	b91b      	cbnz	r3, 8002c24 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8002c1c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_UART_MspInit(huart);
 8002c20:	f7fe f8dc 	bl	8000ddc <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8002c24:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8002c26:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8002c28:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UART_DISABLE(huart);
 8002c2c:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 8002c2e:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 8002c30:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002c34:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8002c36:	f7ff ffaf 	bl	8002b98 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002c3a:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c3c:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002c3e:	691a      	ldr	r2, [r3, #16]
 8002c40:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002c44:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002c46:	695a      	ldr	r2, [r3, #20]
 8002c48:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002c4c:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8002c4e:	68da      	ldr	r2, [r3, #12]
 8002c50:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002c54:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8002c56:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c58:	6420      	str	r0, [r4, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002c5a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002c5e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
}
 8002c62:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002c64:	2001      	movs	r0, #1
 8002c66:	e7fc      	b.n	8002c62 <HAL_UART_Init+0x56>

08002c68 <HAL_UART_ErrorCallback>:
 8002c68:	4770      	bx	lr

08002c6a <UART_DMAAbortOnError>:
{
 8002c6a:	b508      	push	{r3, lr}
  huart->RxXferCount = 0x00U;
 8002c6c:	2300      	movs	r3, #0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002c6e:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0x00U;
 8002c70:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002c72:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 8002c74:	f7ff fff8 	bl	8002c68 <HAL_UART_ErrorCallback>
}
 8002c78:	bd08      	pop	{r3, pc}

08002c7a <HAL_UARTEx_RxEventCallback>:
}
 8002c7a:	4770      	bx	lr

08002c7c <UART_Receive_IT.part.0.isra.0>:
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
 8002c7c:	b507      	push	{r0, r1, r2, lr}
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c7e:	6881      	ldr	r1, [r0, #8]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002c80:	6a83      	ldr	r3, [r0, #40]	; 0x28
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c82:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002c86:	6802      	ldr	r2, [r0, #0]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c88:	d134      	bne.n	8002cf4 <UART_Receive_IT.part.0.isra.0+0x78>
 8002c8a:	6901      	ldr	r1, [r0, #16]
 8002c8c:	2900      	cmp	r1, #0
 8002c8e:	d134      	bne.n	8002cfa <UART_Receive_IT.part.0.isra.0+0x7e>
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002c90:	6852      	ldr	r2, [r2, #4]
 8002c92:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002c96:	f823 2b02 	strh.w	r2, [r3], #2
    if (--huart->RxXferCount == 0U)
 8002c9a:	8dc2      	ldrh	r2, [r0, #46]	; 0x2e
      huart->pRxBuffPtr += 1U;
 8002c9c:	6283      	str	r3, [r0, #40]	; 0x28
    if (--huart->RxXferCount == 0U)
 8002c9e:	3a01      	subs	r2, #1
 8002ca0:	b292      	uxth	r2, r2
 8002ca2:	85c2      	strh	r2, [r0, #46]	; 0x2e
 8002ca4:	bb1a      	cbnz	r2, 8002cee <UART_Receive_IT.part.0.isra.0+0x72>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002ca6:	6803      	ldr	r3, [r0, #0]
 8002ca8:	68d9      	ldr	r1, [r3, #12]
 8002caa:	f021 0120 	bic.w	r1, r1, #32
 8002cae:	60d9      	str	r1, [r3, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002cb0:	68d9      	ldr	r1, [r3, #12]
 8002cb2:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8002cb6:	60d9      	str	r1, [r3, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002cb8:	6959      	ldr	r1, [r3, #20]
 8002cba:	f021 0101 	bic.w	r1, r1, #1
 8002cbe:	6159      	str	r1, [r3, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8002cc0:	2120      	movs	r1, #32
 8002cc2:	f880 103e 	strb.w	r1, [r0, #62]	; 0x3e
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002cc6:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8002cc8:	2901      	cmp	r1, #1
 8002cca:	d120      	bne.n	8002d0e <UART_Receive_IT.part.0.isra.0+0x92>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ccc:	6302      	str	r2, [r0, #48]	; 0x30
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002cce:	68d9      	ldr	r1, [r3, #12]
 8002cd0:	f021 0110 	bic.w	r1, r1, #16
 8002cd4:	60d9      	str	r1, [r3, #12]
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002cd6:	6819      	ldr	r1, [r3, #0]
 8002cd8:	06c9      	lsls	r1, r1, #27
 8002cda:	d505      	bpl.n	8002ce8 <UART_Receive_IT.part.0.isra.0+0x6c>
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002cdc:	9201      	str	r2, [sp, #4]
 8002cde:	681a      	ldr	r2, [r3, #0]
 8002ce0:	9201      	str	r2, [sp, #4]
 8002ce2:	685b      	ldr	r3, [r3, #4]
 8002ce4:	9301      	str	r3, [sp, #4]
 8002ce6:	9b01      	ldr	r3, [sp, #4]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002ce8:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8002cea:	f7ff ffc6 	bl	8002c7a <HAL_UARTEx_RxEventCallback>
}
 8002cee:	b003      	add	sp, #12
 8002cf0:	f85d fb04 	ldr.w	pc, [sp], #4
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002cf4:	b939      	cbnz	r1, 8002d06 <UART_Receive_IT.part.0.isra.0+0x8a>
 8002cf6:	6901      	ldr	r1, [r0, #16]
 8002cf8:	b929      	cbnz	r1, 8002d06 <UART_Receive_IT.part.0.isra.0+0x8a>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002cfa:	6852      	ldr	r2, [r2, #4]
 8002cfc:	b2d2      	uxtb	r2, r2
 8002cfe:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr += 1U;
 8002d00:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8002d02:	3301      	adds	r3, #1
 8002d04:	e7c9      	b.n	8002c9a <UART_Receive_IT.part.0.isra.0+0x1e>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002d06:	6852      	ldr	r2, [r2, #4]
 8002d08:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002d0c:	e7f7      	b.n	8002cfe <UART_Receive_IT.part.0.isra.0+0x82>
       HAL_UART_RxCpltCallback(huart);
 8002d0e:	f7fd fedd 	bl	8000acc <HAL_UART_RxCpltCallback>
 8002d12:	e7ec      	b.n	8002cee <UART_Receive_IT.part.0.isra.0+0x72>

08002d14 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002d14:	6803      	ldr	r3, [r0, #0]
{
 8002d16:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002d18:	681a      	ldr	r2, [r3, #0]
{
 8002d1a:	4604      	mov	r4, r0
  if (errorflags == RESET)
 8002d1c:	f012 0f0f 	tst.w	r2, #15
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002d20:	68d9      	ldr	r1, [r3, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002d22:	695d      	ldr	r5, [r3, #20]
  if (errorflags == RESET)
 8002d24:	d10c      	bne.n	8002d40 <HAL_UART_IRQHandler+0x2c>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002d26:	0695      	lsls	r5, r2, #26
 8002d28:	d567      	bpl.n	8002dfa <HAL_UART_IRQHandler+0xe6>
 8002d2a:	068d      	lsls	r5, r1, #26
 8002d2c:	d565      	bpl.n	8002dfa <HAL_UART_IRQHandler+0xe6>
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002d2e:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8002d32:	2b22      	cmp	r3, #34	; 0x22
 8002d34:	d15b      	bne.n	8002dee <HAL_UART_IRQHandler+0xda>
}
 8002d36:	b003      	add	sp, #12
 8002d38:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002d3c:	f7ff bf9e 	b.w	8002c7c <UART_Receive_IT.part.0.isra.0>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002d40:	f005 0001 	and.w	r0, r5, #1
 8002d44:	f401 7590 	and.w	r5, r1, #288	; 0x120
 8002d48:	4305      	orrs	r5, r0
 8002d4a:	d056      	beq.n	8002dfa <HAL_UART_IRQHandler+0xe6>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002d4c:	07d5      	lsls	r5, r2, #31
 8002d4e:	d505      	bpl.n	8002d5c <HAL_UART_IRQHandler+0x48>
 8002d50:	05cb      	lsls	r3, r1, #23
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002d52:	bf42      	ittt	mi
 8002d54:	6c23      	ldrmi	r3, [r4, #64]	; 0x40
 8002d56:	f043 0301 	orrmi.w	r3, r3, #1
 8002d5a:	6423      	strmi	r3, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002d5c:	0755      	lsls	r5, r2, #29
 8002d5e:	d504      	bpl.n	8002d6a <HAL_UART_IRQHandler+0x56>
 8002d60:	b118      	cbz	r0, 8002d6a <HAL_UART_IRQHandler+0x56>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002d62:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002d64:	f043 0302 	orr.w	r3, r3, #2
 8002d68:	6423      	str	r3, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002d6a:	0793      	lsls	r3, r2, #30
 8002d6c:	d504      	bpl.n	8002d78 <HAL_UART_IRQHandler+0x64>
 8002d6e:	b118      	cbz	r0, 8002d78 <HAL_UART_IRQHandler+0x64>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002d70:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002d72:	f043 0304 	orr.w	r3, r3, #4
 8002d76:	6423      	str	r3, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8002d78:	0715      	lsls	r5, r2, #28
 8002d7a:	d507      	bpl.n	8002d8c <HAL_UART_IRQHandler+0x78>
 8002d7c:	f001 0320 	and.w	r3, r1, #32
 8002d80:	4303      	orrs	r3, r0
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002d82:	bf1e      	ittt	ne
 8002d84:	6c23      	ldrne	r3, [r4, #64]	; 0x40
 8002d86:	f043 0308 	orrne.w	r3, r3, #8
 8002d8a:	6423      	strne	r3, [r4, #64]	; 0x40
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002d8c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002d8e:	b373      	cbz	r3, 8002dee <HAL_UART_IRQHandler+0xda>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002d90:	0692      	lsls	r2, r2, #26
 8002d92:	d508      	bpl.n	8002da6 <HAL_UART_IRQHandler+0x92>
 8002d94:	068b      	lsls	r3, r1, #26
 8002d96:	d506      	bpl.n	8002da6 <HAL_UART_IRQHandler+0x92>
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002d98:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 8002d9c:	2b22      	cmp	r3, #34	; 0x22
 8002d9e:	d102      	bne.n	8002da6 <HAL_UART_IRQHandler+0x92>
 8002da0:	4620      	mov	r0, r4
 8002da2:	f7ff ff6b 	bl	8002c7c <UART_Receive_IT.part.0.isra.0>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002da6:	6823      	ldr	r3, [r4, #0]
        UART_EndRxTransfer(huart);
 8002da8:	4620      	mov	r0, r4
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002daa:	695b      	ldr	r3, [r3, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002dac:	6c25      	ldr	r5, [r4, #64]	; 0x40
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002dae:	f003 0340 	and.w	r3, r3, #64	; 0x40
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002db2:	f005 0508 	and.w	r5, r5, #8
 8002db6:	431d      	orrs	r5, r3
 8002db8:	d01b      	beq.n	8002df2 <HAL_UART_IRQHandler+0xde>
        UART_EndRxTransfer(huart);
 8002dba:	f7ff fed7 	bl	8002b6c <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002dbe:	6823      	ldr	r3, [r4, #0]
 8002dc0:	695a      	ldr	r2, [r3, #20]
 8002dc2:	0655      	lsls	r5, r2, #25
 8002dc4:	d510      	bpl.n	8002de8 <HAL_UART_IRQHandler+0xd4>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002dc6:	695a      	ldr	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 8002dc8:	6ba0      	ldr	r0, [r4, #56]	; 0x38
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002dca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002dce:	615a      	str	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 8002dd0:	b150      	cbz	r0, 8002de8 <HAL_UART_IRQHandler+0xd4>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002dd2:	4b53      	ldr	r3, [pc, #332]	; (8002f20 <HAL_UART_IRQHandler+0x20c>)
 8002dd4:	6343      	str	r3, [r0, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002dd6:	f7fe fc51 	bl	800167c <HAL_DMA_Abort_IT>
 8002dda:	b140      	cbz	r0, 8002dee <HAL_UART_IRQHandler+0xda>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002ddc:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8002dde:	6b43      	ldr	r3, [r0, #52]	; 0x34
}
 8002de0:	b003      	add	sp, #12
 8002de2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002de6:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 8002de8:	4620      	mov	r0, r4
 8002dea:	f7ff ff3d 	bl	8002c68 <HAL_UART_ErrorCallback>
}
 8002dee:	b003      	add	sp, #12
 8002df0:	bd30      	pop	{r4, r5, pc}
        HAL_UART_ErrorCallback(huart);
 8002df2:	f7ff ff39 	bl	8002c68 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002df6:	6425      	str	r5, [r4, #64]	; 0x40
 8002df8:	e7f9      	b.n	8002dee <HAL_UART_IRQHandler+0xda>
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002dfa:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8002dfc:	2801      	cmp	r0, #1
 8002dfe:	d155      	bne.n	8002eac <HAL_UART_IRQHandler+0x198>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8002e00:	06d0      	lsls	r0, r2, #27
 8002e02:	d553      	bpl.n	8002eac <HAL_UART_IRQHandler+0x198>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8002e04:	06cd      	lsls	r5, r1, #27
 8002e06:	d551      	bpl.n	8002eac <HAL_UART_IRQHandler+0x198>
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002e08:	2100      	movs	r1, #0
 8002e0a:	9101      	str	r1, [sp, #4]
 8002e0c:	681a      	ldr	r2, [r3, #0]
 8002e0e:	9201      	str	r2, [sp, #4]
 8002e10:	685a      	ldr	r2, [r3, #4]
 8002e12:	9201      	str	r2, [sp, #4]
 8002e14:	9a01      	ldr	r2, [sp, #4]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e16:	695a      	ldr	r2, [r3, #20]
 8002e18:	f012 0240 	ands.w	r2, r2, #64	; 0x40
 8002e1c:	d02a      	beq.n	8002e74 <HAL_UART_IRQHandler+0x160>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002e1e:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8002e20:	6802      	ldr	r2, [r0, #0]
 8002e22:	6852      	ldr	r2, [r2, #4]
 8002e24:	b292      	uxth	r2, r2
      if (  (nb_remaining_rx_data > 0U)
 8002e26:	2a00      	cmp	r2, #0
 8002e28:	d0e1      	beq.n	8002dee <HAL_UART_IRQHandler+0xda>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8002e2a:	8da5      	ldrh	r5, [r4, #44]	; 0x2c
 8002e2c:	4295      	cmp	r5, r2
 8002e2e:	d9de      	bls.n	8002dee <HAL_UART_IRQHandler+0xda>
        huart->RxXferCount = nb_remaining_rx_data;
 8002e30:	85e2      	strh	r2, [r4, #46]	; 0x2e
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002e32:	6982      	ldr	r2, [r0, #24]
 8002e34:	2a20      	cmp	r2, #32
 8002e36:	d015      	beq.n	8002e64 <HAL_UART_IRQHandler+0x150>
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002e38:	68da      	ldr	r2, [r3, #12]
 8002e3a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002e3e:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e40:	695a      	ldr	r2, [r3, #20]
 8002e42:	f022 0201 	bic.w	r2, r2, #1
 8002e46:	615a      	str	r2, [r3, #20]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002e48:	695a      	ldr	r2, [r3, #20]
 8002e4a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002e4e:	615a      	str	r2, [r3, #20]
          huart->RxState = HAL_UART_STATE_READY;
 8002e50:	2220      	movs	r2, #32
 8002e52:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e56:	6321      	str	r1, [r4, #48]	; 0x30
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002e58:	68da      	ldr	r2, [r3, #12]
 8002e5a:	f022 0210 	bic.w	r2, r2, #16
 8002e5e:	60da      	str	r2, [r3, #12]
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002e60:	f7fe fbee 	bl	8001640 <HAL_DMA_Abort>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002e64:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 8002e66:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 8002e68:	1ac9      	subs	r1, r1, r3
 8002e6a:	b289      	uxth	r1, r1
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002e6c:	4620      	mov	r0, r4
 8002e6e:	f7ff ff04 	bl	8002c7a <HAL_UARTEx_RxEventCallback>
 8002e72:	e7bc      	b.n	8002dee <HAL_UART_IRQHandler+0xda>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002e74:	8de1      	ldrh	r1, [r4, #46]	; 0x2e
 8002e76:	b288      	uxth	r0, r1
      if (  (huart->RxXferCount > 0U)
 8002e78:	8de1      	ldrh	r1, [r4, #46]	; 0x2e
 8002e7a:	b289      	uxth	r1, r1
 8002e7c:	2900      	cmp	r1, #0
 8002e7e:	d0b6      	beq.n	8002dee <HAL_UART_IRQHandler+0xda>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002e80:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 8002e82:	1a09      	subs	r1, r1, r0
 8002e84:	b289      	uxth	r1, r1
          &&(nb_rx_data > 0U) )
 8002e86:	2900      	cmp	r1, #0
 8002e88:	d0b1      	beq.n	8002dee <HAL_UART_IRQHandler+0xda>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002e8a:	68d8      	ldr	r0, [r3, #12]
 8002e8c:	f420 7090 	bic.w	r0, r0, #288	; 0x120
 8002e90:	60d8      	str	r0, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e92:	6958      	ldr	r0, [r3, #20]
 8002e94:	f020 0001 	bic.w	r0, r0, #1
 8002e98:	6158      	str	r0, [r3, #20]
        huart->RxState = HAL_UART_STATE_READY;
 8002e9a:	2020      	movs	r0, #32
 8002e9c:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ea0:	6322      	str	r2, [r4, #48]	; 0x30
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002ea2:	68da      	ldr	r2, [r3, #12]
 8002ea4:	f022 0210 	bic.w	r2, r2, #16
 8002ea8:	60da      	str	r2, [r3, #12]
 8002eaa:	e7df      	b.n	8002e6c <HAL_UART_IRQHandler+0x158>
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002eac:	0610      	lsls	r0, r2, #24
 8002eae:	d526      	bpl.n	8002efe <HAL_UART_IRQHandler+0x1ea>
 8002eb0:	060d      	lsls	r5, r1, #24
 8002eb2:	d524      	bpl.n	8002efe <HAL_UART_IRQHandler+0x1ea>
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002eb4:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 8002eb8:	2a21      	cmp	r2, #33	; 0x21
 8002eba:	d198      	bne.n	8002dee <HAL_UART_IRQHandler+0xda>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ebc:	68a1      	ldr	r1, [r4, #8]
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8002ebe:	6a22      	ldr	r2, [r4, #32]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ec0:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8002ec4:	d116      	bne.n	8002ef4 <HAL_UART_IRQHandler+0x1e0>
 8002ec6:	6921      	ldr	r1, [r4, #16]
 8002ec8:	b9a1      	cbnz	r1, 8002ef4 <HAL_UART_IRQHandler+0x1e0>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002eca:	f832 1b02 	ldrh.w	r1, [r2], #2
 8002ece:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8002ed2:	6059      	str	r1, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002ed4:	6222      	str	r2, [r4, #32]
    if (--huart->TxXferCount == 0U)
 8002ed6:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 8002ed8:	3a01      	subs	r2, #1
 8002eda:	b292      	uxth	r2, r2
 8002edc:	84e2      	strh	r2, [r4, #38]	; 0x26
 8002ede:	2a00      	cmp	r2, #0
 8002ee0:	d185      	bne.n	8002dee <HAL_UART_IRQHandler+0xda>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002ee2:	68da      	ldr	r2, [r3, #12]
 8002ee4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002ee8:	60da      	str	r2, [r3, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002eea:	68da      	ldr	r2, [r3, #12]
 8002eec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002ef0:	60da      	str	r2, [r3, #12]
 8002ef2:	e77c      	b.n	8002dee <HAL_UART_IRQHandler+0xda>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002ef4:	1c51      	adds	r1, r2, #1
 8002ef6:	6221      	str	r1, [r4, #32]
 8002ef8:	7812      	ldrb	r2, [r2, #0]
 8002efa:	605a      	str	r2, [r3, #4]
 8002efc:	e7eb      	b.n	8002ed6 <HAL_UART_IRQHandler+0x1c2>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002efe:	0650      	lsls	r0, r2, #25
 8002f00:	f57f af75 	bpl.w	8002dee <HAL_UART_IRQHandler+0xda>
 8002f04:	064a      	lsls	r2, r1, #25
 8002f06:	f57f af72 	bpl.w	8002dee <HAL_UART_IRQHandler+0xda>
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002f0a:	68da      	ldr	r2, [r3, #12]
  HAL_UART_TxCpltCallback(huart);
 8002f0c:	4620      	mov	r0, r4
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002f0e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002f12:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8002f14:	2320      	movs	r3, #32
 8002f16:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  HAL_UART_TxCpltCallback(huart);
 8002f1a:	f7fd fdef 	bl	8000afc <HAL_UART_TxCpltCallback>
  return HAL_OK;
 8002f1e:	e766      	b.n	8002dee <HAL_UART_IRQHandler+0xda>
 8002f20:	08002c6b 	.word	0x08002c6b

08002f24 <UART_Start_Receive_IT>:
  huart->RxXferCount = Size;
 8002f24:	85c2      	strh	r2, [r0, #46]	; 0x2e
  huart->RxXferSize = Size;
 8002f26:	8582      	strh	r2, [r0, #44]	; 0x2c
  huart->pRxBuffPtr = pData;
 8002f28:	6281      	str	r1, [r0, #40]	; 0x28
{
 8002f2a:	4603      	mov	r3, r0
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002f2c:	2222      	movs	r2, #34	; 0x22
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f2e:	2000      	movs	r0, #0
 8002f30:	6418      	str	r0, [r3, #64]	; 0x40
  __HAL_UNLOCK(huart);
 8002f32:	f883 003c 	strb.w	r0, [r3, #60]	; 0x3c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002f36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	68da      	ldr	r2, [r3, #12]
 8002f3e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f42:	60da      	str	r2, [r3, #12]
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002f44:	695a      	ldr	r2, [r3, #20]
 8002f46:	f042 0201 	orr.w	r2, r2, #1
 8002f4a:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002f4c:	68da      	ldr	r2, [r3, #12]
 8002f4e:	f042 0220 	orr.w	r2, r2, #32
 8002f52:	60da      	str	r2, [r3, #12]
}
 8002f54:	4770      	bx	lr

08002f56 <HAL_UART_Receive_IT>:
{
 8002f56:	b470      	push	{r4, r5, r6}
  if (huart->RxState == HAL_UART_STATE_READY)
 8002f58:	f890 603e 	ldrb.w	r6, [r0, #62]	; 0x3e
 8002f5c:	2e20      	cmp	r6, #32
 8002f5e:	d110      	bne.n	8002f82 <HAL_UART_Receive_IT+0x2c>
    if ((pData == NULL) || (Size == 0U))
 8002f60:	b161      	cbz	r1, 8002f7c <HAL_UART_Receive_IT+0x26>
 8002f62:	b15a      	cbz	r2, 8002f7c <HAL_UART_Receive_IT+0x26>
    __HAL_LOCK(huart);
 8002f64:	f890 403c 	ldrb.w	r4, [r0, #60]	; 0x3c
 8002f68:	2c01      	cmp	r4, #1
 8002f6a:	d00a      	beq.n	8002f82 <HAL_UART_Receive_IT+0x2c>
 8002f6c:	2401      	movs	r4, #1
 8002f6e:	f880 403c 	strb.w	r4, [r0, #60]	; 0x3c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f72:	2400      	movs	r4, #0
 8002f74:	6304      	str	r4, [r0, #48]	; 0x30
}
 8002f76:	bc70      	pop	{r4, r5, r6}
    return(UART_Start_Receive_IT(huart, pData, Size));
 8002f78:	f7ff bfd4 	b.w	8002f24 <UART_Start_Receive_IT>
      return HAL_ERROR;
 8002f7c:	2001      	movs	r0, #1
}
 8002f7e:	bc70      	pop	{r4, r5, r6}
 8002f80:	4770      	bx	lr
    return HAL_BUSY;
 8002f82:	2002      	movs	r0, #2
 8002f84:	e7fb      	b.n	8002f7e <HAL_UART_Receive_IT+0x28>
	...

08002f88 <__errno>:
 8002f88:	4b01      	ldr	r3, [pc, #4]	; (8002f90 <__errno+0x8>)
 8002f8a:	6818      	ldr	r0, [r3, #0]
 8002f8c:	4770      	bx	lr
 8002f8e:	bf00      	nop
 8002f90:	2000001c 	.word	0x2000001c

08002f94 <__libc_init_array>:
 8002f94:	b570      	push	{r4, r5, r6, lr}
 8002f96:	2600      	movs	r6, #0
 8002f98:	4d0c      	ldr	r5, [pc, #48]	; (8002fcc <__libc_init_array+0x38>)
 8002f9a:	4c0d      	ldr	r4, [pc, #52]	; (8002fd0 <__libc_init_array+0x3c>)
 8002f9c:	1b64      	subs	r4, r4, r5
 8002f9e:	10a4      	asrs	r4, r4, #2
 8002fa0:	42a6      	cmp	r6, r4
 8002fa2:	d109      	bne.n	8002fb8 <__libc_init_array+0x24>
 8002fa4:	f000 fc9c 	bl	80038e0 <_init>
 8002fa8:	2600      	movs	r6, #0
 8002faa:	4d0a      	ldr	r5, [pc, #40]	; (8002fd4 <__libc_init_array+0x40>)
 8002fac:	4c0a      	ldr	r4, [pc, #40]	; (8002fd8 <__libc_init_array+0x44>)
 8002fae:	1b64      	subs	r4, r4, r5
 8002fb0:	10a4      	asrs	r4, r4, #2
 8002fb2:	42a6      	cmp	r6, r4
 8002fb4:	d105      	bne.n	8002fc2 <__libc_init_array+0x2e>
 8002fb6:	bd70      	pop	{r4, r5, r6, pc}
 8002fb8:	f855 3b04 	ldr.w	r3, [r5], #4
 8002fbc:	4798      	blx	r3
 8002fbe:	3601      	adds	r6, #1
 8002fc0:	e7ee      	b.n	8002fa0 <__libc_init_array+0xc>
 8002fc2:	f855 3b04 	ldr.w	r3, [r5], #4
 8002fc6:	4798      	blx	r3
 8002fc8:	3601      	adds	r6, #1
 8002fca:	e7f2      	b.n	8002fb2 <__libc_init_array+0x1e>
 8002fcc:	08003eb4 	.word	0x08003eb4
 8002fd0:	08003eb4 	.word	0x08003eb4
 8002fd4:	08003eb4 	.word	0x08003eb4
 8002fd8:	08003eb8 	.word	0x08003eb8

08002fdc <memcpy>:
 8002fdc:	440a      	add	r2, r1
 8002fde:	4291      	cmp	r1, r2
 8002fe0:	f100 33ff 	add.w	r3, r0, #4294967295
 8002fe4:	d100      	bne.n	8002fe8 <memcpy+0xc>
 8002fe6:	4770      	bx	lr
 8002fe8:	b510      	push	{r4, lr}
 8002fea:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002fee:	4291      	cmp	r1, r2
 8002ff0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002ff4:	d1f9      	bne.n	8002fea <memcpy+0xe>
 8002ff6:	bd10      	pop	{r4, pc}

08002ff8 <memset>:
 8002ff8:	4603      	mov	r3, r0
 8002ffa:	4402      	add	r2, r0
 8002ffc:	4293      	cmp	r3, r2
 8002ffe:	d100      	bne.n	8003002 <memset+0xa>
 8003000:	4770      	bx	lr
 8003002:	f803 1b01 	strb.w	r1, [r3], #1
 8003006:	e7f9      	b.n	8002ffc <memset+0x4>

08003008 <siprintf>:
 8003008:	b40e      	push	{r1, r2, r3}
 800300a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800300e:	b500      	push	{lr}
 8003010:	b09c      	sub	sp, #112	; 0x70
 8003012:	ab1d      	add	r3, sp, #116	; 0x74
 8003014:	9002      	str	r0, [sp, #8]
 8003016:	9006      	str	r0, [sp, #24]
 8003018:	9107      	str	r1, [sp, #28]
 800301a:	9104      	str	r1, [sp, #16]
 800301c:	4808      	ldr	r0, [pc, #32]	; (8003040 <siprintf+0x38>)
 800301e:	4909      	ldr	r1, [pc, #36]	; (8003044 <siprintf+0x3c>)
 8003020:	f853 2b04 	ldr.w	r2, [r3], #4
 8003024:	9105      	str	r1, [sp, #20]
 8003026:	6800      	ldr	r0, [r0, #0]
 8003028:	a902      	add	r1, sp, #8
 800302a:	9301      	str	r3, [sp, #4]
 800302c:	f000 f868 	bl	8003100 <_svfiprintf_r>
 8003030:	2200      	movs	r2, #0
 8003032:	9b02      	ldr	r3, [sp, #8]
 8003034:	701a      	strb	r2, [r3, #0]
 8003036:	b01c      	add	sp, #112	; 0x70
 8003038:	f85d eb04 	ldr.w	lr, [sp], #4
 800303c:	b003      	add	sp, #12
 800303e:	4770      	bx	lr
 8003040:	2000001c 	.word	0x2000001c
 8003044:	ffff0208 	.word	0xffff0208

08003048 <__ssputs_r>:
 8003048:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800304c:	688e      	ldr	r6, [r1, #8]
 800304e:	4682      	mov	sl, r0
 8003050:	429e      	cmp	r6, r3
 8003052:	460c      	mov	r4, r1
 8003054:	4690      	mov	r8, r2
 8003056:	461f      	mov	r7, r3
 8003058:	d838      	bhi.n	80030cc <__ssputs_r+0x84>
 800305a:	898a      	ldrh	r2, [r1, #12]
 800305c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003060:	d032      	beq.n	80030c8 <__ssputs_r+0x80>
 8003062:	6825      	ldr	r5, [r4, #0]
 8003064:	6909      	ldr	r1, [r1, #16]
 8003066:	3301      	adds	r3, #1
 8003068:	eba5 0901 	sub.w	r9, r5, r1
 800306c:	6965      	ldr	r5, [r4, #20]
 800306e:	444b      	add	r3, r9
 8003070:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003074:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003078:	106d      	asrs	r5, r5, #1
 800307a:	429d      	cmp	r5, r3
 800307c:	bf38      	it	cc
 800307e:	461d      	movcc	r5, r3
 8003080:	0553      	lsls	r3, r2, #21
 8003082:	d531      	bpl.n	80030e8 <__ssputs_r+0xa0>
 8003084:	4629      	mov	r1, r5
 8003086:	f000 fb61 	bl	800374c <_malloc_r>
 800308a:	4606      	mov	r6, r0
 800308c:	b950      	cbnz	r0, 80030a4 <__ssputs_r+0x5c>
 800308e:	230c      	movs	r3, #12
 8003090:	f04f 30ff 	mov.w	r0, #4294967295
 8003094:	f8ca 3000 	str.w	r3, [sl]
 8003098:	89a3      	ldrh	r3, [r4, #12]
 800309a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800309e:	81a3      	strh	r3, [r4, #12]
 80030a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80030a4:	464a      	mov	r2, r9
 80030a6:	6921      	ldr	r1, [r4, #16]
 80030a8:	f7ff ff98 	bl	8002fdc <memcpy>
 80030ac:	89a3      	ldrh	r3, [r4, #12]
 80030ae:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80030b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80030b6:	81a3      	strh	r3, [r4, #12]
 80030b8:	6126      	str	r6, [r4, #16]
 80030ba:	444e      	add	r6, r9
 80030bc:	6026      	str	r6, [r4, #0]
 80030be:	463e      	mov	r6, r7
 80030c0:	6165      	str	r5, [r4, #20]
 80030c2:	eba5 0509 	sub.w	r5, r5, r9
 80030c6:	60a5      	str	r5, [r4, #8]
 80030c8:	42be      	cmp	r6, r7
 80030ca:	d900      	bls.n	80030ce <__ssputs_r+0x86>
 80030cc:	463e      	mov	r6, r7
 80030ce:	4632      	mov	r2, r6
 80030d0:	4641      	mov	r1, r8
 80030d2:	6820      	ldr	r0, [r4, #0]
 80030d4:	f000 fab8 	bl	8003648 <memmove>
 80030d8:	68a3      	ldr	r3, [r4, #8]
 80030da:	2000      	movs	r0, #0
 80030dc:	1b9b      	subs	r3, r3, r6
 80030de:	60a3      	str	r3, [r4, #8]
 80030e0:	6823      	ldr	r3, [r4, #0]
 80030e2:	4433      	add	r3, r6
 80030e4:	6023      	str	r3, [r4, #0]
 80030e6:	e7db      	b.n	80030a0 <__ssputs_r+0x58>
 80030e8:	462a      	mov	r2, r5
 80030ea:	f000 fba3 	bl	8003834 <_realloc_r>
 80030ee:	4606      	mov	r6, r0
 80030f0:	2800      	cmp	r0, #0
 80030f2:	d1e1      	bne.n	80030b8 <__ssputs_r+0x70>
 80030f4:	4650      	mov	r0, sl
 80030f6:	6921      	ldr	r1, [r4, #16]
 80030f8:	f000 fac0 	bl	800367c <_free_r>
 80030fc:	e7c7      	b.n	800308e <__ssputs_r+0x46>
	...

08003100 <_svfiprintf_r>:
 8003100:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003104:	4698      	mov	r8, r3
 8003106:	898b      	ldrh	r3, [r1, #12]
 8003108:	4607      	mov	r7, r0
 800310a:	061b      	lsls	r3, r3, #24
 800310c:	460d      	mov	r5, r1
 800310e:	4614      	mov	r4, r2
 8003110:	b09d      	sub	sp, #116	; 0x74
 8003112:	d50e      	bpl.n	8003132 <_svfiprintf_r+0x32>
 8003114:	690b      	ldr	r3, [r1, #16]
 8003116:	b963      	cbnz	r3, 8003132 <_svfiprintf_r+0x32>
 8003118:	2140      	movs	r1, #64	; 0x40
 800311a:	f000 fb17 	bl	800374c <_malloc_r>
 800311e:	6028      	str	r0, [r5, #0]
 8003120:	6128      	str	r0, [r5, #16]
 8003122:	b920      	cbnz	r0, 800312e <_svfiprintf_r+0x2e>
 8003124:	230c      	movs	r3, #12
 8003126:	603b      	str	r3, [r7, #0]
 8003128:	f04f 30ff 	mov.w	r0, #4294967295
 800312c:	e0d1      	b.n	80032d2 <_svfiprintf_r+0x1d2>
 800312e:	2340      	movs	r3, #64	; 0x40
 8003130:	616b      	str	r3, [r5, #20]
 8003132:	2300      	movs	r3, #0
 8003134:	9309      	str	r3, [sp, #36]	; 0x24
 8003136:	2320      	movs	r3, #32
 8003138:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800313c:	2330      	movs	r3, #48	; 0x30
 800313e:	f04f 0901 	mov.w	r9, #1
 8003142:	f8cd 800c 	str.w	r8, [sp, #12]
 8003146:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80032ec <_svfiprintf_r+0x1ec>
 800314a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800314e:	4623      	mov	r3, r4
 8003150:	469a      	mov	sl, r3
 8003152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003156:	b10a      	cbz	r2, 800315c <_svfiprintf_r+0x5c>
 8003158:	2a25      	cmp	r2, #37	; 0x25
 800315a:	d1f9      	bne.n	8003150 <_svfiprintf_r+0x50>
 800315c:	ebba 0b04 	subs.w	fp, sl, r4
 8003160:	d00b      	beq.n	800317a <_svfiprintf_r+0x7a>
 8003162:	465b      	mov	r3, fp
 8003164:	4622      	mov	r2, r4
 8003166:	4629      	mov	r1, r5
 8003168:	4638      	mov	r0, r7
 800316a:	f7ff ff6d 	bl	8003048 <__ssputs_r>
 800316e:	3001      	adds	r0, #1
 8003170:	f000 80aa 	beq.w	80032c8 <_svfiprintf_r+0x1c8>
 8003174:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003176:	445a      	add	r2, fp
 8003178:	9209      	str	r2, [sp, #36]	; 0x24
 800317a:	f89a 3000 	ldrb.w	r3, [sl]
 800317e:	2b00      	cmp	r3, #0
 8003180:	f000 80a2 	beq.w	80032c8 <_svfiprintf_r+0x1c8>
 8003184:	2300      	movs	r3, #0
 8003186:	f04f 32ff 	mov.w	r2, #4294967295
 800318a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800318e:	f10a 0a01 	add.w	sl, sl, #1
 8003192:	9304      	str	r3, [sp, #16]
 8003194:	9307      	str	r3, [sp, #28]
 8003196:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800319a:	931a      	str	r3, [sp, #104]	; 0x68
 800319c:	4654      	mov	r4, sl
 800319e:	2205      	movs	r2, #5
 80031a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80031a4:	4851      	ldr	r0, [pc, #324]	; (80032ec <_svfiprintf_r+0x1ec>)
 80031a6:	f000 fa41 	bl	800362c <memchr>
 80031aa:	9a04      	ldr	r2, [sp, #16]
 80031ac:	b9d8      	cbnz	r0, 80031e6 <_svfiprintf_r+0xe6>
 80031ae:	06d0      	lsls	r0, r2, #27
 80031b0:	bf44      	itt	mi
 80031b2:	2320      	movmi	r3, #32
 80031b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80031b8:	0711      	lsls	r1, r2, #28
 80031ba:	bf44      	itt	mi
 80031bc:	232b      	movmi	r3, #43	; 0x2b
 80031be:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80031c2:	f89a 3000 	ldrb.w	r3, [sl]
 80031c6:	2b2a      	cmp	r3, #42	; 0x2a
 80031c8:	d015      	beq.n	80031f6 <_svfiprintf_r+0xf6>
 80031ca:	4654      	mov	r4, sl
 80031cc:	2000      	movs	r0, #0
 80031ce:	f04f 0c0a 	mov.w	ip, #10
 80031d2:	9a07      	ldr	r2, [sp, #28]
 80031d4:	4621      	mov	r1, r4
 80031d6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80031da:	3b30      	subs	r3, #48	; 0x30
 80031dc:	2b09      	cmp	r3, #9
 80031de:	d94e      	bls.n	800327e <_svfiprintf_r+0x17e>
 80031e0:	b1b0      	cbz	r0, 8003210 <_svfiprintf_r+0x110>
 80031e2:	9207      	str	r2, [sp, #28]
 80031e4:	e014      	b.n	8003210 <_svfiprintf_r+0x110>
 80031e6:	eba0 0308 	sub.w	r3, r0, r8
 80031ea:	fa09 f303 	lsl.w	r3, r9, r3
 80031ee:	4313      	orrs	r3, r2
 80031f0:	46a2      	mov	sl, r4
 80031f2:	9304      	str	r3, [sp, #16]
 80031f4:	e7d2      	b.n	800319c <_svfiprintf_r+0x9c>
 80031f6:	9b03      	ldr	r3, [sp, #12]
 80031f8:	1d19      	adds	r1, r3, #4
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	9103      	str	r1, [sp, #12]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	bfbb      	ittet	lt
 8003202:	425b      	neglt	r3, r3
 8003204:	f042 0202 	orrlt.w	r2, r2, #2
 8003208:	9307      	strge	r3, [sp, #28]
 800320a:	9307      	strlt	r3, [sp, #28]
 800320c:	bfb8      	it	lt
 800320e:	9204      	strlt	r2, [sp, #16]
 8003210:	7823      	ldrb	r3, [r4, #0]
 8003212:	2b2e      	cmp	r3, #46	; 0x2e
 8003214:	d10c      	bne.n	8003230 <_svfiprintf_r+0x130>
 8003216:	7863      	ldrb	r3, [r4, #1]
 8003218:	2b2a      	cmp	r3, #42	; 0x2a
 800321a:	d135      	bne.n	8003288 <_svfiprintf_r+0x188>
 800321c:	9b03      	ldr	r3, [sp, #12]
 800321e:	3402      	adds	r4, #2
 8003220:	1d1a      	adds	r2, r3, #4
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	9203      	str	r2, [sp, #12]
 8003226:	2b00      	cmp	r3, #0
 8003228:	bfb8      	it	lt
 800322a:	f04f 33ff 	movlt.w	r3, #4294967295
 800322e:	9305      	str	r3, [sp, #20]
 8003230:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 80032f0 <_svfiprintf_r+0x1f0>
 8003234:	2203      	movs	r2, #3
 8003236:	4650      	mov	r0, sl
 8003238:	7821      	ldrb	r1, [r4, #0]
 800323a:	f000 f9f7 	bl	800362c <memchr>
 800323e:	b140      	cbz	r0, 8003252 <_svfiprintf_r+0x152>
 8003240:	2340      	movs	r3, #64	; 0x40
 8003242:	eba0 000a 	sub.w	r0, r0, sl
 8003246:	fa03 f000 	lsl.w	r0, r3, r0
 800324a:	9b04      	ldr	r3, [sp, #16]
 800324c:	3401      	adds	r4, #1
 800324e:	4303      	orrs	r3, r0
 8003250:	9304      	str	r3, [sp, #16]
 8003252:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003256:	2206      	movs	r2, #6
 8003258:	4826      	ldr	r0, [pc, #152]	; (80032f4 <_svfiprintf_r+0x1f4>)
 800325a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800325e:	f000 f9e5 	bl	800362c <memchr>
 8003262:	2800      	cmp	r0, #0
 8003264:	d038      	beq.n	80032d8 <_svfiprintf_r+0x1d8>
 8003266:	4b24      	ldr	r3, [pc, #144]	; (80032f8 <_svfiprintf_r+0x1f8>)
 8003268:	bb1b      	cbnz	r3, 80032b2 <_svfiprintf_r+0x1b2>
 800326a:	9b03      	ldr	r3, [sp, #12]
 800326c:	3307      	adds	r3, #7
 800326e:	f023 0307 	bic.w	r3, r3, #7
 8003272:	3308      	adds	r3, #8
 8003274:	9303      	str	r3, [sp, #12]
 8003276:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003278:	4433      	add	r3, r6
 800327a:	9309      	str	r3, [sp, #36]	; 0x24
 800327c:	e767      	b.n	800314e <_svfiprintf_r+0x4e>
 800327e:	460c      	mov	r4, r1
 8003280:	2001      	movs	r0, #1
 8003282:	fb0c 3202 	mla	r2, ip, r2, r3
 8003286:	e7a5      	b.n	80031d4 <_svfiprintf_r+0xd4>
 8003288:	2300      	movs	r3, #0
 800328a:	f04f 0c0a 	mov.w	ip, #10
 800328e:	4619      	mov	r1, r3
 8003290:	3401      	adds	r4, #1
 8003292:	9305      	str	r3, [sp, #20]
 8003294:	4620      	mov	r0, r4
 8003296:	f810 2b01 	ldrb.w	r2, [r0], #1
 800329a:	3a30      	subs	r2, #48	; 0x30
 800329c:	2a09      	cmp	r2, #9
 800329e:	d903      	bls.n	80032a8 <_svfiprintf_r+0x1a8>
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d0c5      	beq.n	8003230 <_svfiprintf_r+0x130>
 80032a4:	9105      	str	r1, [sp, #20]
 80032a6:	e7c3      	b.n	8003230 <_svfiprintf_r+0x130>
 80032a8:	4604      	mov	r4, r0
 80032aa:	2301      	movs	r3, #1
 80032ac:	fb0c 2101 	mla	r1, ip, r1, r2
 80032b0:	e7f0      	b.n	8003294 <_svfiprintf_r+0x194>
 80032b2:	ab03      	add	r3, sp, #12
 80032b4:	9300      	str	r3, [sp, #0]
 80032b6:	462a      	mov	r2, r5
 80032b8:	4638      	mov	r0, r7
 80032ba:	4b10      	ldr	r3, [pc, #64]	; (80032fc <_svfiprintf_r+0x1fc>)
 80032bc:	a904      	add	r1, sp, #16
 80032be:	f3af 8000 	nop.w
 80032c2:	1c42      	adds	r2, r0, #1
 80032c4:	4606      	mov	r6, r0
 80032c6:	d1d6      	bne.n	8003276 <_svfiprintf_r+0x176>
 80032c8:	89ab      	ldrh	r3, [r5, #12]
 80032ca:	065b      	lsls	r3, r3, #25
 80032cc:	f53f af2c 	bmi.w	8003128 <_svfiprintf_r+0x28>
 80032d0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80032d2:	b01d      	add	sp, #116	; 0x74
 80032d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80032d8:	ab03      	add	r3, sp, #12
 80032da:	9300      	str	r3, [sp, #0]
 80032dc:	462a      	mov	r2, r5
 80032de:	4638      	mov	r0, r7
 80032e0:	4b06      	ldr	r3, [pc, #24]	; (80032fc <_svfiprintf_r+0x1fc>)
 80032e2:	a904      	add	r1, sp, #16
 80032e4:	f000 f87c 	bl	80033e0 <_printf_i>
 80032e8:	e7eb      	b.n	80032c2 <_svfiprintf_r+0x1c2>
 80032ea:	bf00      	nop
 80032ec:	08003e7e 	.word	0x08003e7e
 80032f0:	08003e84 	.word	0x08003e84
 80032f4:	08003e88 	.word	0x08003e88
 80032f8:	00000000 	.word	0x00000000
 80032fc:	08003049 	.word	0x08003049

08003300 <_printf_common>:
 8003300:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003304:	4616      	mov	r6, r2
 8003306:	4699      	mov	r9, r3
 8003308:	688a      	ldr	r2, [r1, #8]
 800330a:	690b      	ldr	r3, [r1, #16]
 800330c:	4607      	mov	r7, r0
 800330e:	4293      	cmp	r3, r2
 8003310:	bfb8      	it	lt
 8003312:	4613      	movlt	r3, r2
 8003314:	6033      	str	r3, [r6, #0]
 8003316:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800331a:	460c      	mov	r4, r1
 800331c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003320:	b10a      	cbz	r2, 8003326 <_printf_common+0x26>
 8003322:	3301      	adds	r3, #1
 8003324:	6033      	str	r3, [r6, #0]
 8003326:	6823      	ldr	r3, [r4, #0]
 8003328:	0699      	lsls	r1, r3, #26
 800332a:	bf42      	ittt	mi
 800332c:	6833      	ldrmi	r3, [r6, #0]
 800332e:	3302      	addmi	r3, #2
 8003330:	6033      	strmi	r3, [r6, #0]
 8003332:	6825      	ldr	r5, [r4, #0]
 8003334:	f015 0506 	ands.w	r5, r5, #6
 8003338:	d106      	bne.n	8003348 <_printf_common+0x48>
 800333a:	f104 0a19 	add.w	sl, r4, #25
 800333e:	68e3      	ldr	r3, [r4, #12]
 8003340:	6832      	ldr	r2, [r6, #0]
 8003342:	1a9b      	subs	r3, r3, r2
 8003344:	42ab      	cmp	r3, r5
 8003346:	dc28      	bgt.n	800339a <_printf_common+0x9a>
 8003348:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800334c:	1e13      	subs	r3, r2, #0
 800334e:	6822      	ldr	r2, [r4, #0]
 8003350:	bf18      	it	ne
 8003352:	2301      	movne	r3, #1
 8003354:	0692      	lsls	r2, r2, #26
 8003356:	d42d      	bmi.n	80033b4 <_printf_common+0xb4>
 8003358:	4649      	mov	r1, r9
 800335a:	4638      	mov	r0, r7
 800335c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003360:	47c0      	blx	r8
 8003362:	3001      	adds	r0, #1
 8003364:	d020      	beq.n	80033a8 <_printf_common+0xa8>
 8003366:	6823      	ldr	r3, [r4, #0]
 8003368:	68e5      	ldr	r5, [r4, #12]
 800336a:	f003 0306 	and.w	r3, r3, #6
 800336e:	2b04      	cmp	r3, #4
 8003370:	bf18      	it	ne
 8003372:	2500      	movne	r5, #0
 8003374:	6832      	ldr	r2, [r6, #0]
 8003376:	f04f 0600 	mov.w	r6, #0
 800337a:	68a3      	ldr	r3, [r4, #8]
 800337c:	bf08      	it	eq
 800337e:	1aad      	subeq	r5, r5, r2
 8003380:	6922      	ldr	r2, [r4, #16]
 8003382:	bf08      	it	eq
 8003384:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003388:	4293      	cmp	r3, r2
 800338a:	bfc4      	itt	gt
 800338c:	1a9b      	subgt	r3, r3, r2
 800338e:	18ed      	addgt	r5, r5, r3
 8003390:	341a      	adds	r4, #26
 8003392:	42b5      	cmp	r5, r6
 8003394:	d11a      	bne.n	80033cc <_printf_common+0xcc>
 8003396:	2000      	movs	r0, #0
 8003398:	e008      	b.n	80033ac <_printf_common+0xac>
 800339a:	2301      	movs	r3, #1
 800339c:	4652      	mov	r2, sl
 800339e:	4649      	mov	r1, r9
 80033a0:	4638      	mov	r0, r7
 80033a2:	47c0      	blx	r8
 80033a4:	3001      	adds	r0, #1
 80033a6:	d103      	bne.n	80033b0 <_printf_common+0xb0>
 80033a8:	f04f 30ff 	mov.w	r0, #4294967295
 80033ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80033b0:	3501      	adds	r5, #1
 80033b2:	e7c4      	b.n	800333e <_printf_common+0x3e>
 80033b4:	2030      	movs	r0, #48	; 0x30
 80033b6:	18e1      	adds	r1, r4, r3
 80033b8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80033bc:	1c5a      	adds	r2, r3, #1
 80033be:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80033c2:	4422      	add	r2, r4
 80033c4:	3302      	adds	r3, #2
 80033c6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80033ca:	e7c5      	b.n	8003358 <_printf_common+0x58>
 80033cc:	2301      	movs	r3, #1
 80033ce:	4622      	mov	r2, r4
 80033d0:	4649      	mov	r1, r9
 80033d2:	4638      	mov	r0, r7
 80033d4:	47c0      	blx	r8
 80033d6:	3001      	adds	r0, #1
 80033d8:	d0e6      	beq.n	80033a8 <_printf_common+0xa8>
 80033da:	3601      	adds	r6, #1
 80033dc:	e7d9      	b.n	8003392 <_printf_common+0x92>
	...

080033e0 <_printf_i>:
 80033e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80033e4:	7e0f      	ldrb	r7, [r1, #24]
 80033e6:	4691      	mov	r9, r2
 80033e8:	2f78      	cmp	r7, #120	; 0x78
 80033ea:	4680      	mov	r8, r0
 80033ec:	460c      	mov	r4, r1
 80033ee:	469a      	mov	sl, r3
 80033f0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80033f2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80033f6:	d807      	bhi.n	8003408 <_printf_i+0x28>
 80033f8:	2f62      	cmp	r7, #98	; 0x62
 80033fa:	d80a      	bhi.n	8003412 <_printf_i+0x32>
 80033fc:	2f00      	cmp	r7, #0
 80033fe:	f000 80d9 	beq.w	80035b4 <_printf_i+0x1d4>
 8003402:	2f58      	cmp	r7, #88	; 0x58
 8003404:	f000 80a4 	beq.w	8003550 <_printf_i+0x170>
 8003408:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800340c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003410:	e03a      	b.n	8003488 <_printf_i+0xa8>
 8003412:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003416:	2b15      	cmp	r3, #21
 8003418:	d8f6      	bhi.n	8003408 <_printf_i+0x28>
 800341a:	a101      	add	r1, pc, #4	; (adr r1, 8003420 <_printf_i+0x40>)
 800341c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003420:	08003479 	.word	0x08003479
 8003424:	0800348d 	.word	0x0800348d
 8003428:	08003409 	.word	0x08003409
 800342c:	08003409 	.word	0x08003409
 8003430:	08003409 	.word	0x08003409
 8003434:	08003409 	.word	0x08003409
 8003438:	0800348d 	.word	0x0800348d
 800343c:	08003409 	.word	0x08003409
 8003440:	08003409 	.word	0x08003409
 8003444:	08003409 	.word	0x08003409
 8003448:	08003409 	.word	0x08003409
 800344c:	0800359b 	.word	0x0800359b
 8003450:	080034bd 	.word	0x080034bd
 8003454:	0800357d 	.word	0x0800357d
 8003458:	08003409 	.word	0x08003409
 800345c:	08003409 	.word	0x08003409
 8003460:	080035bd 	.word	0x080035bd
 8003464:	08003409 	.word	0x08003409
 8003468:	080034bd 	.word	0x080034bd
 800346c:	08003409 	.word	0x08003409
 8003470:	08003409 	.word	0x08003409
 8003474:	08003585 	.word	0x08003585
 8003478:	682b      	ldr	r3, [r5, #0]
 800347a:	1d1a      	adds	r2, r3, #4
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	602a      	str	r2, [r5, #0]
 8003480:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003484:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003488:	2301      	movs	r3, #1
 800348a:	e0a4      	b.n	80035d6 <_printf_i+0x1f6>
 800348c:	6820      	ldr	r0, [r4, #0]
 800348e:	6829      	ldr	r1, [r5, #0]
 8003490:	0606      	lsls	r6, r0, #24
 8003492:	f101 0304 	add.w	r3, r1, #4
 8003496:	d50a      	bpl.n	80034ae <_printf_i+0xce>
 8003498:	680e      	ldr	r6, [r1, #0]
 800349a:	602b      	str	r3, [r5, #0]
 800349c:	2e00      	cmp	r6, #0
 800349e:	da03      	bge.n	80034a8 <_printf_i+0xc8>
 80034a0:	232d      	movs	r3, #45	; 0x2d
 80034a2:	4276      	negs	r6, r6
 80034a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80034a8:	230a      	movs	r3, #10
 80034aa:	485e      	ldr	r0, [pc, #376]	; (8003624 <_printf_i+0x244>)
 80034ac:	e019      	b.n	80034e2 <_printf_i+0x102>
 80034ae:	680e      	ldr	r6, [r1, #0]
 80034b0:	f010 0f40 	tst.w	r0, #64	; 0x40
 80034b4:	602b      	str	r3, [r5, #0]
 80034b6:	bf18      	it	ne
 80034b8:	b236      	sxthne	r6, r6
 80034ba:	e7ef      	b.n	800349c <_printf_i+0xbc>
 80034bc:	682b      	ldr	r3, [r5, #0]
 80034be:	6820      	ldr	r0, [r4, #0]
 80034c0:	1d19      	adds	r1, r3, #4
 80034c2:	6029      	str	r1, [r5, #0]
 80034c4:	0601      	lsls	r1, r0, #24
 80034c6:	d501      	bpl.n	80034cc <_printf_i+0xec>
 80034c8:	681e      	ldr	r6, [r3, #0]
 80034ca:	e002      	b.n	80034d2 <_printf_i+0xf2>
 80034cc:	0646      	lsls	r6, r0, #25
 80034ce:	d5fb      	bpl.n	80034c8 <_printf_i+0xe8>
 80034d0:	881e      	ldrh	r6, [r3, #0]
 80034d2:	2f6f      	cmp	r7, #111	; 0x6f
 80034d4:	bf0c      	ite	eq
 80034d6:	2308      	moveq	r3, #8
 80034d8:	230a      	movne	r3, #10
 80034da:	4852      	ldr	r0, [pc, #328]	; (8003624 <_printf_i+0x244>)
 80034dc:	2100      	movs	r1, #0
 80034de:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80034e2:	6865      	ldr	r5, [r4, #4]
 80034e4:	2d00      	cmp	r5, #0
 80034e6:	bfa8      	it	ge
 80034e8:	6821      	ldrge	r1, [r4, #0]
 80034ea:	60a5      	str	r5, [r4, #8]
 80034ec:	bfa4      	itt	ge
 80034ee:	f021 0104 	bicge.w	r1, r1, #4
 80034f2:	6021      	strge	r1, [r4, #0]
 80034f4:	b90e      	cbnz	r6, 80034fa <_printf_i+0x11a>
 80034f6:	2d00      	cmp	r5, #0
 80034f8:	d04d      	beq.n	8003596 <_printf_i+0x1b6>
 80034fa:	4615      	mov	r5, r2
 80034fc:	fbb6 f1f3 	udiv	r1, r6, r3
 8003500:	fb03 6711 	mls	r7, r3, r1, r6
 8003504:	5dc7      	ldrb	r7, [r0, r7]
 8003506:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800350a:	4637      	mov	r7, r6
 800350c:	42bb      	cmp	r3, r7
 800350e:	460e      	mov	r6, r1
 8003510:	d9f4      	bls.n	80034fc <_printf_i+0x11c>
 8003512:	2b08      	cmp	r3, #8
 8003514:	d10b      	bne.n	800352e <_printf_i+0x14e>
 8003516:	6823      	ldr	r3, [r4, #0]
 8003518:	07de      	lsls	r6, r3, #31
 800351a:	d508      	bpl.n	800352e <_printf_i+0x14e>
 800351c:	6923      	ldr	r3, [r4, #16]
 800351e:	6861      	ldr	r1, [r4, #4]
 8003520:	4299      	cmp	r1, r3
 8003522:	bfde      	ittt	le
 8003524:	2330      	movle	r3, #48	; 0x30
 8003526:	f805 3c01 	strble.w	r3, [r5, #-1]
 800352a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800352e:	1b52      	subs	r2, r2, r5
 8003530:	6122      	str	r2, [r4, #16]
 8003532:	464b      	mov	r3, r9
 8003534:	4621      	mov	r1, r4
 8003536:	4640      	mov	r0, r8
 8003538:	f8cd a000 	str.w	sl, [sp]
 800353c:	aa03      	add	r2, sp, #12
 800353e:	f7ff fedf 	bl	8003300 <_printf_common>
 8003542:	3001      	adds	r0, #1
 8003544:	d14c      	bne.n	80035e0 <_printf_i+0x200>
 8003546:	f04f 30ff 	mov.w	r0, #4294967295
 800354a:	b004      	add	sp, #16
 800354c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003550:	4834      	ldr	r0, [pc, #208]	; (8003624 <_printf_i+0x244>)
 8003552:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003556:	6829      	ldr	r1, [r5, #0]
 8003558:	6823      	ldr	r3, [r4, #0]
 800355a:	f851 6b04 	ldr.w	r6, [r1], #4
 800355e:	6029      	str	r1, [r5, #0]
 8003560:	061d      	lsls	r5, r3, #24
 8003562:	d514      	bpl.n	800358e <_printf_i+0x1ae>
 8003564:	07df      	lsls	r7, r3, #31
 8003566:	bf44      	itt	mi
 8003568:	f043 0320 	orrmi.w	r3, r3, #32
 800356c:	6023      	strmi	r3, [r4, #0]
 800356e:	b91e      	cbnz	r6, 8003578 <_printf_i+0x198>
 8003570:	6823      	ldr	r3, [r4, #0]
 8003572:	f023 0320 	bic.w	r3, r3, #32
 8003576:	6023      	str	r3, [r4, #0]
 8003578:	2310      	movs	r3, #16
 800357a:	e7af      	b.n	80034dc <_printf_i+0xfc>
 800357c:	6823      	ldr	r3, [r4, #0]
 800357e:	f043 0320 	orr.w	r3, r3, #32
 8003582:	6023      	str	r3, [r4, #0]
 8003584:	2378      	movs	r3, #120	; 0x78
 8003586:	4828      	ldr	r0, [pc, #160]	; (8003628 <_printf_i+0x248>)
 8003588:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800358c:	e7e3      	b.n	8003556 <_printf_i+0x176>
 800358e:	0659      	lsls	r1, r3, #25
 8003590:	bf48      	it	mi
 8003592:	b2b6      	uxthmi	r6, r6
 8003594:	e7e6      	b.n	8003564 <_printf_i+0x184>
 8003596:	4615      	mov	r5, r2
 8003598:	e7bb      	b.n	8003512 <_printf_i+0x132>
 800359a:	682b      	ldr	r3, [r5, #0]
 800359c:	6826      	ldr	r6, [r4, #0]
 800359e:	1d18      	adds	r0, r3, #4
 80035a0:	6961      	ldr	r1, [r4, #20]
 80035a2:	6028      	str	r0, [r5, #0]
 80035a4:	0635      	lsls	r5, r6, #24
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	d501      	bpl.n	80035ae <_printf_i+0x1ce>
 80035aa:	6019      	str	r1, [r3, #0]
 80035ac:	e002      	b.n	80035b4 <_printf_i+0x1d4>
 80035ae:	0670      	lsls	r0, r6, #25
 80035b0:	d5fb      	bpl.n	80035aa <_printf_i+0x1ca>
 80035b2:	8019      	strh	r1, [r3, #0]
 80035b4:	2300      	movs	r3, #0
 80035b6:	4615      	mov	r5, r2
 80035b8:	6123      	str	r3, [r4, #16]
 80035ba:	e7ba      	b.n	8003532 <_printf_i+0x152>
 80035bc:	682b      	ldr	r3, [r5, #0]
 80035be:	2100      	movs	r1, #0
 80035c0:	1d1a      	adds	r2, r3, #4
 80035c2:	602a      	str	r2, [r5, #0]
 80035c4:	681d      	ldr	r5, [r3, #0]
 80035c6:	6862      	ldr	r2, [r4, #4]
 80035c8:	4628      	mov	r0, r5
 80035ca:	f000 f82f 	bl	800362c <memchr>
 80035ce:	b108      	cbz	r0, 80035d4 <_printf_i+0x1f4>
 80035d0:	1b40      	subs	r0, r0, r5
 80035d2:	6060      	str	r0, [r4, #4]
 80035d4:	6863      	ldr	r3, [r4, #4]
 80035d6:	6123      	str	r3, [r4, #16]
 80035d8:	2300      	movs	r3, #0
 80035da:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80035de:	e7a8      	b.n	8003532 <_printf_i+0x152>
 80035e0:	462a      	mov	r2, r5
 80035e2:	4649      	mov	r1, r9
 80035e4:	4640      	mov	r0, r8
 80035e6:	6923      	ldr	r3, [r4, #16]
 80035e8:	47d0      	blx	sl
 80035ea:	3001      	adds	r0, #1
 80035ec:	d0ab      	beq.n	8003546 <_printf_i+0x166>
 80035ee:	6823      	ldr	r3, [r4, #0]
 80035f0:	079b      	lsls	r3, r3, #30
 80035f2:	d413      	bmi.n	800361c <_printf_i+0x23c>
 80035f4:	68e0      	ldr	r0, [r4, #12]
 80035f6:	9b03      	ldr	r3, [sp, #12]
 80035f8:	4298      	cmp	r0, r3
 80035fa:	bfb8      	it	lt
 80035fc:	4618      	movlt	r0, r3
 80035fe:	e7a4      	b.n	800354a <_printf_i+0x16a>
 8003600:	2301      	movs	r3, #1
 8003602:	4632      	mov	r2, r6
 8003604:	4649      	mov	r1, r9
 8003606:	4640      	mov	r0, r8
 8003608:	47d0      	blx	sl
 800360a:	3001      	adds	r0, #1
 800360c:	d09b      	beq.n	8003546 <_printf_i+0x166>
 800360e:	3501      	adds	r5, #1
 8003610:	68e3      	ldr	r3, [r4, #12]
 8003612:	9903      	ldr	r1, [sp, #12]
 8003614:	1a5b      	subs	r3, r3, r1
 8003616:	42ab      	cmp	r3, r5
 8003618:	dcf2      	bgt.n	8003600 <_printf_i+0x220>
 800361a:	e7eb      	b.n	80035f4 <_printf_i+0x214>
 800361c:	2500      	movs	r5, #0
 800361e:	f104 0619 	add.w	r6, r4, #25
 8003622:	e7f5      	b.n	8003610 <_printf_i+0x230>
 8003624:	08003e8f 	.word	0x08003e8f
 8003628:	08003ea0 	.word	0x08003ea0

0800362c <memchr>:
 800362c:	4603      	mov	r3, r0
 800362e:	b510      	push	{r4, lr}
 8003630:	b2c9      	uxtb	r1, r1
 8003632:	4402      	add	r2, r0
 8003634:	4293      	cmp	r3, r2
 8003636:	4618      	mov	r0, r3
 8003638:	d101      	bne.n	800363e <memchr+0x12>
 800363a:	2000      	movs	r0, #0
 800363c:	e003      	b.n	8003646 <memchr+0x1a>
 800363e:	7804      	ldrb	r4, [r0, #0]
 8003640:	3301      	adds	r3, #1
 8003642:	428c      	cmp	r4, r1
 8003644:	d1f6      	bne.n	8003634 <memchr+0x8>
 8003646:	bd10      	pop	{r4, pc}

08003648 <memmove>:
 8003648:	4288      	cmp	r0, r1
 800364a:	b510      	push	{r4, lr}
 800364c:	eb01 0402 	add.w	r4, r1, r2
 8003650:	d902      	bls.n	8003658 <memmove+0x10>
 8003652:	4284      	cmp	r4, r0
 8003654:	4623      	mov	r3, r4
 8003656:	d807      	bhi.n	8003668 <memmove+0x20>
 8003658:	1e43      	subs	r3, r0, #1
 800365a:	42a1      	cmp	r1, r4
 800365c:	d008      	beq.n	8003670 <memmove+0x28>
 800365e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003662:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003666:	e7f8      	b.n	800365a <memmove+0x12>
 8003668:	4601      	mov	r1, r0
 800366a:	4402      	add	r2, r0
 800366c:	428a      	cmp	r2, r1
 800366e:	d100      	bne.n	8003672 <memmove+0x2a>
 8003670:	bd10      	pop	{r4, pc}
 8003672:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003676:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800367a:	e7f7      	b.n	800366c <memmove+0x24>

0800367c <_free_r>:
 800367c:	b538      	push	{r3, r4, r5, lr}
 800367e:	4605      	mov	r5, r0
 8003680:	2900      	cmp	r1, #0
 8003682:	d040      	beq.n	8003706 <_free_r+0x8a>
 8003684:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003688:	1f0c      	subs	r4, r1, #4
 800368a:	2b00      	cmp	r3, #0
 800368c:	bfb8      	it	lt
 800368e:	18e4      	addlt	r4, r4, r3
 8003690:	f000 f910 	bl	80038b4 <__malloc_lock>
 8003694:	4a1c      	ldr	r2, [pc, #112]	; (8003708 <_free_r+0x8c>)
 8003696:	6813      	ldr	r3, [r2, #0]
 8003698:	b933      	cbnz	r3, 80036a8 <_free_r+0x2c>
 800369a:	6063      	str	r3, [r4, #4]
 800369c:	6014      	str	r4, [r2, #0]
 800369e:	4628      	mov	r0, r5
 80036a0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80036a4:	f000 b90c 	b.w	80038c0 <__malloc_unlock>
 80036a8:	42a3      	cmp	r3, r4
 80036aa:	d908      	bls.n	80036be <_free_r+0x42>
 80036ac:	6820      	ldr	r0, [r4, #0]
 80036ae:	1821      	adds	r1, r4, r0
 80036b0:	428b      	cmp	r3, r1
 80036b2:	bf01      	itttt	eq
 80036b4:	6819      	ldreq	r1, [r3, #0]
 80036b6:	685b      	ldreq	r3, [r3, #4]
 80036b8:	1809      	addeq	r1, r1, r0
 80036ba:	6021      	streq	r1, [r4, #0]
 80036bc:	e7ed      	b.n	800369a <_free_r+0x1e>
 80036be:	461a      	mov	r2, r3
 80036c0:	685b      	ldr	r3, [r3, #4]
 80036c2:	b10b      	cbz	r3, 80036c8 <_free_r+0x4c>
 80036c4:	42a3      	cmp	r3, r4
 80036c6:	d9fa      	bls.n	80036be <_free_r+0x42>
 80036c8:	6811      	ldr	r1, [r2, #0]
 80036ca:	1850      	adds	r0, r2, r1
 80036cc:	42a0      	cmp	r0, r4
 80036ce:	d10b      	bne.n	80036e8 <_free_r+0x6c>
 80036d0:	6820      	ldr	r0, [r4, #0]
 80036d2:	4401      	add	r1, r0
 80036d4:	1850      	adds	r0, r2, r1
 80036d6:	4283      	cmp	r3, r0
 80036d8:	6011      	str	r1, [r2, #0]
 80036da:	d1e0      	bne.n	800369e <_free_r+0x22>
 80036dc:	6818      	ldr	r0, [r3, #0]
 80036de:	685b      	ldr	r3, [r3, #4]
 80036e0:	4401      	add	r1, r0
 80036e2:	6011      	str	r1, [r2, #0]
 80036e4:	6053      	str	r3, [r2, #4]
 80036e6:	e7da      	b.n	800369e <_free_r+0x22>
 80036e8:	d902      	bls.n	80036f0 <_free_r+0x74>
 80036ea:	230c      	movs	r3, #12
 80036ec:	602b      	str	r3, [r5, #0]
 80036ee:	e7d6      	b.n	800369e <_free_r+0x22>
 80036f0:	6820      	ldr	r0, [r4, #0]
 80036f2:	1821      	adds	r1, r4, r0
 80036f4:	428b      	cmp	r3, r1
 80036f6:	bf01      	itttt	eq
 80036f8:	6819      	ldreq	r1, [r3, #0]
 80036fa:	685b      	ldreq	r3, [r3, #4]
 80036fc:	1809      	addeq	r1, r1, r0
 80036fe:	6021      	streq	r1, [r4, #0]
 8003700:	6063      	str	r3, [r4, #4]
 8003702:	6054      	str	r4, [r2, #4]
 8003704:	e7cb      	b.n	800369e <_free_r+0x22>
 8003706:	bd38      	pop	{r3, r4, r5, pc}
 8003708:	200011e8 	.word	0x200011e8

0800370c <sbrk_aligned>:
 800370c:	b570      	push	{r4, r5, r6, lr}
 800370e:	4e0e      	ldr	r6, [pc, #56]	; (8003748 <sbrk_aligned+0x3c>)
 8003710:	460c      	mov	r4, r1
 8003712:	6831      	ldr	r1, [r6, #0]
 8003714:	4605      	mov	r5, r0
 8003716:	b911      	cbnz	r1, 800371e <sbrk_aligned+0x12>
 8003718:	f000 f8bc 	bl	8003894 <_sbrk_r>
 800371c:	6030      	str	r0, [r6, #0]
 800371e:	4621      	mov	r1, r4
 8003720:	4628      	mov	r0, r5
 8003722:	f000 f8b7 	bl	8003894 <_sbrk_r>
 8003726:	1c43      	adds	r3, r0, #1
 8003728:	d00a      	beq.n	8003740 <sbrk_aligned+0x34>
 800372a:	1cc4      	adds	r4, r0, #3
 800372c:	f024 0403 	bic.w	r4, r4, #3
 8003730:	42a0      	cmp	r0, r4
 8003732:	d007      	beq.n	8003744 <sbrk_aligned+0x38>
 8003734:	1a21      	subs	r1, r4, r0
 8003736:	4628      	mov	r0, r5
 8003738:	f000 f8ac 	bl	8003894 <_sbrk_r>
 800373c:	3001      	adds	r0, #1
 800373e:	d101      	bne.n	8003744 <sbrk_aligned+0x38>
 8003740:	f04f 34ff 	mov.w	r4, #4294967295
 8003744:	4620      	mov	r0, r4
 8003746:	bd70      	pop	{r4, r5, r6, pc}
 8003748:	200011ec 	.word	0x200011ec

0800374c <_malloc_r>:
 800374c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003750:	1ccd      	adds	r5, r1, #3
 8003752:	f025 0503 	bic.w	r5, r5, #3
 8003756:	3508      	adds	r5, #8
 8003758:	2d0c      	cmp	r5, #12
 800375a:	bf38      	it	cc
 800375c:	250c      	movcc	r5, #12
 800375e:	2d00      	cmp	r5, #0
 8003760:	4607      	mov	r7, r0
 8003762:	db01      	blt.n	8003768 <_malloc_r+0x1c>
 8003764:	42a9      	cmp	r1, r5
 8003766:	d905      	bls.n	8003774 <_malloc_r+0x28>
 8003768:	230c      	movs	r3, #12
 800376a:	2600      	movs	r6, #0
 800376c:	603b      	str	r3, [r7, #0]
 800376e:	4630      	mov	r0, r6
 8003770:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003774:	4e2e      	ldr	r6, [pc, #184]	; (8003830 <_malloc_r+0xe4>)
 8003776:	f000 f89d 	bl	80038b4 <__malloc_lock>
 800377a:	6833      	ldr	r3, [r6, #0]
 800377c:	461c      	mov	r4, r3
 800377e:	bb34      	cbnz	r4, 80037ce <_malloc_r+0x82>
 8003780:	4629      	mov	r1, r5
 8003782:	4638      	mov	r0, r7
 8003784:	f7ff ffc2 	bl	800370c <sbrk_aligned>
 8003788:	1c43      	adds	r3, r0, #1
 800378a:	4604      	mov	r4, r0
 800378c:	d14d      	bne.n	800382a <_malloc_r+0xde>
 800378e:	6834      	ldr	r4, [r6, #0]
 8003790:	4626      	mov	r6, r4
 8003792:	2e00      	cmp	r6, #0
 8003794:	d140      	bne.n	8003818 <_malloc_r+0xcc>
 8003796:	6823      	ldr	r3, [r4, #0]
 8003798:	4631      	mov	r1, r6
 800379a:	4638      	mov	r0, r7
 800379c:	eb04 0803 	add.w	r8, r4, r3
 80037a0:	f000 f878 	bl	8003894 <_sbrk_r>
 80037a4:	4580      	cmp	r8, r0
 80037a6:	d13a      	bne.n	800381e <_malloc_r+0xd2>
 80037a8:	6821      	ldr	r1, [r4, #0]
 80037aa:	3503      	adds	r5, #3
 80037ac:	1a6d      	subs	r5, r5, r1
 80037ae:	f025 0503 	bic.w	r5, r5, #3
 80037b2:	3508      	adds	r5, #8
 80037b4:	2d0c      	cmp	r5, #12
 80037b6:	bf38      	it	cc
 80037b8:	250c      	movcc	r5, #12
 80037ba:	4638      	mov	r0, r7
 80037bc:	4629      	mov	r1, r5
 80037be:	f7ff ffa5 	bl	800370c <sbrk_aligned>
 80037c2:	3001      	adds	r0, #1
 80037c4:	d02b      	beq.n	800381e <_malloc_r+0xd2>
 80037c6:	6823      	ldr	r3, [r4, #0]
 80037c8:	442b      	add	r3, r5
 80037ca:	6023      	str	r3, [r4, #0]
 80037cc:	e00e      	b.n	80037ec <_malloc_r+0xa0>
 80037ce:	6822      	ldr	r2, [r4, #0]
 80037d0:	1b52      	subs	r2, r2, r5
 80037d2:	d41e      	bmi.n	8003812 <_malloc_r+0xc6>
 80037d4:	2a0b      	cmp	r2, #11
 80037d6:	d916      	bls.n	8003806 <_malloc_r+0xba>
 80037d8:	1961      	adds	r1, r4, r5
 80037da:	42a3      	cmp	r3, r4
 80037dc:	6025      	str	r5, [r4, #0]
 80037de:	bf18      	it	ne
 80037e0:	6059      	strne	r1, [r3, #4]
 80037e2:	6863      	ldr	r3, [r4, #4]
 80037e4:	bf08      	it	eq
 80037e6:	6031      	streq	r1, [r6, #0]
 80037e8:	5162      	str	r2, [r4, r5]
 80037ea:	604b      	str	r3, [r1, #4]
 80037ec:	4638      	mov	r0, r7
 80037ee:	f104 060b 	add.w	r6, r4, #11
 80037f2:	f000 f865 	bl	80038c0 <__malloc_unlock>
 80037f6:	f026 0607 	bic.w	r6, r6, #7
 80037fa:	1d23      	adds	r3, r4, #4
 80037fc:	1af2      	subs	r2, r6, r3
 80037fe:	d0b6      	beq.n	800376e <_malloc_r+0x22>
 8003800:	1b9b      	subs	r3, r3, r6
 8003802:	50a3      	str	r3, [r4, r2]
 8003804:	e7b3      	b.n	800376e <_malloc_r+0x22>
 8003806:	6862      	ldr	r2, [r4, #4]
 8003808:	42a3      	cmp	r3, r4
 800380a:	bf0c      	ite	eq
 800380c:	6032      	streq	r2, [r6, #0]
 800380e:	605a      	strne	r2, [r3, #4]
 8003810:	e7ec      	b.n	80037ec <_malloc_r+0xa0>
 8003812:	4623      	mov	r3, r4
 8003814:	6864      	ldr	r4, [r4, #4]
 8003816:	e7b2      	b.n	800377e <_malloc_r+0x32>
 8003818:	4634      	mov	r4, r6
 800381a:	6876      	ldr	r6, [r6, #4]
 800381c:	e7b9      	b.n	8003792 <_malloc_r+0x46>
 800381e:	230c      	movs	r3, #12
 8003820:	4638      	mov	r0, r7
 8003822:	603b      	str	r3, [r7, #0]
 8003824:	f000 f84c 	bl	80038c0 <__malloc_unlock>
 8003828:	e7a1      	b.n	800376e <_malloc_r+0x22>
 800382a:	6025      	str	r5, [r4, #0]
 800382c:	e7de      	b.n	80037ec <_malloc_r+0xa0>
 800382e:	bf00      	nop
 8003830:	200011e8 	.word	0x200011e8

08003834 <_realloc_r>:
 8003834:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003838:	4680      	mov	r8, r0
 800383a:	4614      	mov	r4, r2
 800383c:	460e      	mov	r6, r1
 800383e:	b921      	cbnz	r1, 800384a <_realloc_r+0x16>
 8003840:	4611      	mov	r1, r2
 8003842:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003846:	f7ff bf81 	b.w	800374c <_malloc_r>
 800384a:	b92a      	cbnz	r2, 8003858 <_realloc_r+0x24>
 800384c:	f7ff ff16 	bl	800367c <_free_r>
 8003850:	4625      	mov	r5, r4
 8003852:	4628      	mov	r0, r5
 8003854:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003858:	f000 f838 	bl	80038cc <_malloc_usable_size_r>
 800385c:	4284      	cmp	r4, r0
 800385e:	4607      	mov	r7, r0
 8003860:	d802      	bhi.n	8003868 <_realloc_r+0x34>
 8003862:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003866:	d812      	bhi.n	800388e <_realloc_r+0x5a>
 8003868:	4621      	mov	r1, r4
 800386a:	4640      	mov	r0, r8
 800386c:	f7ff ff6e 	bl	800374c <_malloc_r>
 8003870:	4605      	mov	r5, r0
 8003872:	2800      	cmp	r0, #0
 8003874:	d0ed      	beq.n	8003852 <_realloc_r+0x1e>
 8003876:	42bc      	cmp	r4, r7
 8003878:	4622      	mov	r2, r4
 800387a:	4631      	mov	r1, r6
 800387c:	bf28      	it	cs
 800387e:	463a      	movcs	r2, r7
 8003880:	f7ff fbac 	bl	8002fdc <memcpy>
 8003884:	4631      	mov	r1, r6
 8003886:	4640      	mov	r0, r8
 8003888:	f7ff fef8 	bl	800367c <_free_r>
 800388c:	e7e1      	b.n	8003852 <_realloc_r+0x1e>
 800388e:	4635      	mov	r5, r6
 8003890:	e7df      	b.n	8003852 <_realloc_r+0x1e>
	...

08003894 <_sbrk_r>:
 8003894:	b538      	push	{r3, r4, r5, lr}
 8003896:	2300      	movs	r3, #0
 8003898:	4d05      	ldr	r5, [pc, #20]	; (80038b0 <_sbrk_r+0x1c>)
 800389a:	4604      	mov	r4, r0
 800389c:	4608      	mov	r0, r1
 800389e:	602b      	str	r3, [r5, #0]
 80038a0:	f7fd fb34 	bl	8000f0c <_sbrk>
 80038a4:	1c43      	adds	r3, r0, #1
 80038a6:	d102      	bne.n	80038ae <_sbrk_r+0x1a>
 80038a8:	682b      	ldr	r3, [r5, #0]
 80038aa:	b103      	cbz	r3, 80038ae <_sbrk_r+0x1a>
 80038ac:	6023      	str	r3, [r4, #0]
 80038ae:	bd38      	pop	{r3, r4, r5, pc}
 80038b0:	200011f0 	.word	0x200011f0

080038b4 <__malloc_lock>:
 80038b4:	4801      	ldr	r0, [pc, #4]	; (80038bc <__malloc_lock+0x8>)
 80038b6:	f000 b811 	b.w	80038dc <__retarget_lock_acquire_recursive>
 80038ba:	bf00      	nop
 80038bc:	200011f4 	.word	0x200011f4

080038c0 <__malloc_unlock>:
 80038c0:	4801      	ldr	r0, [pc, #4]	; (80038c8 <__malloc_unlock+0x8>)
 80038c2:	f000 b80c 	b.w	80038de <__retarget_lock_release_recursive>
 80038c6:	bf00      	nop
 80038c8:	200011f4 	.word	0x200011f4

080038cc <_malloc_usable_size_r>:
 80038cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80038d0:	1f18      	subs	r0, r3, #4
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	bfbc      	itt	lt
 80038d6:	580b      	ldrlt	r3, [r1, r0]
 80038d8:	18c0      	addlt	r0, r0, r3
 80038da:	4770      	bx	lr

080038dc <__retarget_lock_acquire_recursive>:
 80038dc:	4770      	bx	lr

080038de <__retarget_lock_release_recursive>:
 80038de:	4770      	bx	lr

080038e0 <_init>:
 80038e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038e2:	bf00      	nop
 80038e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80038e6:	bc08      	pop	{r3}
 80038e8:	469e      	mov	lr, r3
 80038ea:	4770      	bx	lr

080038ec <_fini>:
 80038ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038ee:	bf00      	nop
 80038f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80038f2:	bc08      	pop	{r3}
 80038f4:	469e      	mov	lr, r3
 80038f6:	4770      	bx	lr
