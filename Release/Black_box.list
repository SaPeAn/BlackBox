
Black_box.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000041f0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000062c  080042fc  080042fc  000142fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004928  08004928  00020084  2**0
                  CONTENTS
  4 .ARM          00000000  08004928  08004928  00020084  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004928  08004928  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004928  08004928  00014928  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800492c  0800492c  0001492c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  08004930  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000cf4  20000084  080049b4  00020084  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000d78  080049b4  00020d78  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015ed8  00000000  00000000  000200ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000368a  00000000  00000000  00035f85  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    0000d1fe  00000000  00000000  0003960f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f20  00000000  00000000  00046810  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001730  00000000  00000000  00047730  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001a40e  00000000  00000000  00048e60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000178ac  00000000  00000000  0006326e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000950ed  00000000  00000000  0007ab1a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0010fc07  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000370c  00000000  00000000  0010fc58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000084 	.word	0x20000084
 8000128:	00000000 	.word	0x00000000
 800012c:	080042e4 	.word	0x080042e4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000088 	.word	0x20000088
 8000148:	080042e4 	.word	0x080042e4

0800014c <RingBuf_Clear>:
 *
 * @param[in] rb #RINGBUF_t structure instance
 * @return #RINGBUF_STATUS enum
 */
RINGBUF_STATUS RingBuf_Clear(RINGBUF_t *rb) {
    if (rb->buf == NULL) return RINGBUF_PARAM_ERR;
 800014c:	6802      	ldr	r2, [r0, #0]
RINGBUF_STATUS RingBuf_Clear(RINGBUF_t *rb) {
 800014e:	4603      	mov	r3, r0
    if (rb->buf == NULL) return RINGBUF_PARAM_ERR;
 8000150:	b11a      	cbz	r2, 800015a <RingBuf_Clear+0xe>
    rb->head = rb->tail = 0;
 8000152:	2000      	movs	r0, #0
 8000154:	6058      	str	r0, [r3, #4]
 8000156:	6098      	str	r0, [r3, #8]
    return RINGBUF_OK;
 8000158:	4770      	bx	lr
    if (rb->buf == NULL) return RINGBUF_PARAM_ERR;
 800015a:	2002      	movs	r0, #2
}
 800015c:	4770      	bx	lr

0800015e <RingBuf_Init>:
RINGBUF_STATUS RingBuf_Init(void *buf, u16_t size, size_t cellsize, RINGBUF_t *rb) {
 800015e:	b510      	push	{r4, lr}
 8000160:	461c      	mov	r4, r3
    rb->size = size; // size of array
 8000162:	60d9      	str	r1, [r3, #12]
    rb->buf = buf;      // set pointer to buffer
 8000164:	6018      	str	r0, [r3, #0]
    rb->cell_size = cellsize; // size of 1 cell of array
 8000166:	611a      	str	r2, [r3, #16]
    RingBuf_Clear(rb); // clear all
 8000168:	4618      	mov	r0, r3
 800016a:	f7ff ffef 	bl	800014c <RingBuf_Clear>
    return rb->buf ? RINGBUF_OK : RINGBUF_PARAM_ERR;
 800016e:	6823      	ldr	r3, [r4, #0]
 8000170:	2b00      	cmp	r3, #0
}
 8000172:	bf0c      	ite	eq
 8000174:	2002      	moveq	r0, #2
 8000176:	2000      	movne	r0, #0
 8000178:	bd10      	pop	{r4, pc}

0800017a <RingBuf_Available>:
 * @param[out] len Size to read [bytes]
 * @param[in] rb #RINGBUF_t structure instance
 * @return #RINGBUF_STATUS enum
 */
RINGBUF_STATUS RingBuf_Available(u16_t *len, RINGBUF_t *rb) {
    if (rb->buf == NULL) return RINGBUF_PARAM_ERR;
 800017a:	680b      	ldr	r3, [r1, #0]
 800017c:	b173      	cbz	r3, 800019c <RingBuf_Available+0x22>
    if (rb->head < rb->tail)
 800017e:	688a      	ldr	r2, [r1, #8]
 8000180:	684b      	ldr	r3, [r1, #4]
 8000182:	429a      	cmp	r2, r3
        *len = rb->size - rb->tail + rb->head;
 8000184:	bf3d      	ittte	cc
 8000186:	68cb      	ldrcc	r3, [r1, #12]
 8000188:	684a      	ldrcc	r2, [r1, #4]
 800018a:	6889      	ldrcc	r1, [r1, #8]
    else
        *len = rb->head - rb->tail;
 800018c:	688b      	ldrcs	r3, [r1, #8]
 800018e:	bf2c      	ite	cs
 8000190:	684a      	ldrcs	r2, [r1, #4]
        *len = rb->size - rb->tail + rb->head;
 8000192:	185b      	addcc	r3, r3, r1
        *len = rb->head - rb->tail;
 8000194:	1a9b      	subs	r3, r3, r2
 8000196:	8003      	strh	r3, [r0, #0]
    return RINGBUF_OK;
 8000198:	2000      	movs	r0, #0
 800019a:	4770      	bx	lr
    if (rb->buf == NULL) return RINGBUF_PARAM_ERR;
 800019c:	2002      	movs	r0, #2
}
 800019e:	4770      	bx	lr

080001a0 <RingBuf_BytePut>:
 * @param[in] data Data byte to be put [bytes]
 * @param[in] rb #RINGBUF_t structure instance
 * @return #RINGBUF_STATUS enum
 */
RINGBUF_STATUS RingBuf_BytePut(const u8_t data, RINGBUF_t *rb) {
    if (rb->buf == NULL) return RINGBUF_PARAM_ERR;
 80001a0:	680a      	ldr	r2, [r1, #0]
RINGBUF_STATUS RingBuf_BytePut(const u8_t data, RINGBUF_t *rb) {
 80001a2:	b510      	push	{r4, lr}
    if (rb->buf == NULL) return RINGBUF_PARAM_ERR;
 80001a4:	b152      	cbz	r2, 80001bc <RingBuf_BytePut+0x1c>
    rb->buf[rb->head++] = data; // put byte in cell and increment data
 80001a6:	688b      	ldr	r3, [r1, #8]
 80001a8:	1c5c      	adds	r4, r3, #1
 80001aa:	608c      	str	r4, [r1, #8]
 80001ac:	54d0      	strb	r0, [r2, r3]
    if (rb->head >= rb->size) // if overflow
 80001ae:	688a      	ldr	r2, [r1, #8]
 80001b0:	68cb      	ldr	r3, [r1, #12]
 80001b2:	2000      	movs	r0, #0
 80001b4:	429a      	cmp	r2, r3
 80001b6:	d300      	bcc.n	80001ba <RingBuf_BytePut+0x1a>
        rb->head = 0;   // set to start
 80001b8:	6088      	str	r0, [r1, #8]
    return RINGBUF_OK;
}
 80001ba:	bd10      	pop	{r4, pc}
    if (rb->buf == NULL) return RINGBUF_PARAM_ERR;
 80001bc:	2002      	movs	r0, #2
 80001be:	e7fc      	b.n	80001ba <RingBuf_BytePut+0x1a>

080001c0 <RingBuf_DataWatch>:
 * @param[out] data Data from buffer
 * @param[in] len Length of data to be read [bytes]
 * @param[in] rb #RINGBUF_t structure instance
 * @return #RINGBUF_STATUS enum
 */
RINGBUF_STATUS RingBuf_DataWatch(void *data, u16_t len, RINGBUF_t *rb) {
 80001c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80001c4:	4688      	mov	r8, r1
 80001c6:	4614      	mov	r4, r2
    if (data == NULL)
 80001c8:	4607      	mov	r7, r0
 80001ca:	2800      	cmp	r0, #0
 80001cc:	d031      	beq.n	8000232 <RingBuf_DataWatch+0x72>
        return RINGBUF_PARAM_ERR;
    if (len > rb->size)
 80001ce:	68d3      	ldr	r3, [r2, #12]
 80001d0:	4299      	cmp	r1, r3
 80001d2:	d830      	bhi.n	8000236 <RingBuf_DataWatch+0x76>
        return RINGBUF_OVERFLOW;
    // OUTPUT data index start address
    u16_t s_addr = 0;
    // available space in the end of buffer
    u16_t space = rb->size - rb->tail;
 80001d4:	68d1      	ldr	r1, [r2, #12]
 80001d6:	6855      	ldr	r5, [r2, #4]
 80001d8:	fa1f f981 	uxth.w	r9, r1
 80001dc:	b2ad      	uxth	r5, r5
 80001de:	eba9 0605 	sub.w	r6, r9, r5
 80001e2:	b2b6      	uxth	r6, r6
    u16_t loc_tail = rb->tail;
    if (len > space) { // if len > available space
 80001e4:	45b0      	cmp	r8, r6
    u16_t loc_tail = rb->tail;
 80001e6:	6853      	ldr	r3, [r2, #4]
    if (len > space) { // if len > available space
 80001e8:	d810      	bhi.n	800020c <RingBuf_DataWatch+0x4c>
    u16_t s_addr = 0;
 80001ea:	2600      	movs	r6, #0
    u16_t loc_tail = rb->tail;
 80001ec:	b29b      	uxth	r3, r3
        s_addr = space;
        // new length - len-space
        len -= space;
    }
    // copy all the data from the buf storage
    memcpy(&data[s_addr * rb->cell_size], &rb->buf[loc_tail * rb->cell_size], len * rb->cell_size);
 80001ee:	6920      	ldr	r0, [r4, #16]
 80001f0:	6821      	ldr	r1, [r4, #0]
 80001f2:	6925      	ldr	r5, [r4, #16]
 80001f4:	6922      	ldr	r2, [r4, #16]
 80001f6:	fb05 1103 	mla	r1, r5, r3, r1
 80001fa:	fb02 f208 	mul.w	r2, r2, r8
 80001fe:	fb00 7006 	mla	r0, r0, r6, r7
 8000202:	f002 fee3 	bl	8002fcc <memcpy>
 8000206:	2000      	movs	r0, #0
    return RINGBUF_OK;
}
 8000208:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        memcpy(&data[s_addr * rb->cell_size], &rb->buf[loc_tail * rb->cell_size], space * rb->cell_size);
 800020c:	6922      	ldr	r2, [r4, #16]
 800020e:	f8d4 c000 	ldr.w	ip, [r4]
 8000212:	6921      	ldr	r1, [r4, #16]
 8000214:	6922      	ldr	r2, [r4, #16]
 8000216:	b29b      	uxth	r3, r3
 8000218:	fb01 c103 	mla	r1, r1, r3, ip
 800021c:	4372      	muls	r2, r6
 800021e:	f002 fed5 	bl	8002fcc <memcpy>
        len -= space;
 8000222:	eb08 0105 	add.w	r1, r8, r5
 8000226:	eba1 0109 	sub.w	r1, r1, r9
        loc_tail = 0;
 800022a:	2300      	movs	r3, #0
        len -= space;
 800022c:	fa1f f881 	uxth.w	r8, r1
 8000230:	e7dd      	b.n	80001ee <RingBuf_DataWatch+0x2e>
        return RINGBUF_PARAM_ERR;
 8000232:	2002      	movs	r0, #2
 8000234:	e7e8      	b.n	8000208 <RingBuf_DataWatch+0x48>
        return RINGBUF_OVERFLOW;
 8000236:	2003      	movs	r0, #3
 8000238:	e7e6      	b.n	8000208 <RingBuf_DataWatch+0x48>

0800023a <RingBuf_DataRead>:
RINGBUF_STATUS RingBuf_DataRead(void *data, u16_t len, RINGBUF_t *rb) {
 800023a:	b538      	push	{r3, r4, r5, lr}
    if (rb->buf == NULL) return RINGBUF_PARAM_ERR;
 800023c:	6813      	ldr	r3, [r2, #0]
RINGBUF_STATUS RingBuf_DataRead(void *data, u16_t len, RINGBUF_t *rb) {
 800023e:	460d      	mov	r5, r1
 8000240:	4614      	mov	r4, r2
    if (rb->buf == NULL) return RINGBUF_PARAM_ERR;
 8000242:	b15b      	cbz	r3, 800025c <RingBuf_DataRead+0x22>
    RINGBUF_STATUS st = RingBuf_DataWatch(data, len, rb);
 8000244:	f7ff ffbc 	bl	80001c0 <RingBuf_DataWatch>
    if (st != RINGBUF_OK)
 8000248:	b938      	cbnz	r0, 800025a <RingBuf_DataRead+0x20>
    rb->tail += len;
 800024a:	6861      	ldr	r1, [r4, #4]
 800024c:	440d      	add	r5, r1
 800024e:	6065      	str	r5, [r4, #4]
    if (rb->tail >= rb->size)
 8000250:	6862      	ldr	r2, [r4, #4]
 8000252:	68e3      	ldr	r3, [r4, #12]
 8000254:	429a      	cmp	r2, r3
 8000256:	d300      	bcc.n	800025a <RingBuf_DataRead+0x20>
        rb->tail = 0;
 8000258:	6060      	str	r0, [r4, #4]
}
 800025a:	bd38      	pop	{r3, r4, r5, pc}
    if (rb->buf == NULL) return RINGBUF_PARAM_ERR;
 800025c:	2002      	movs	r0, #2
 800025e:	e7fc      	b.n	800025a <RingBuf_DataRead+0x20>

08000260 <lcd_sendcommands>:
  lcd_bufupload();
  DISP_INIT_SEND_DAT;
}

void lcd_sendcommands(uint8_t* data, uint8_t N)
{
 8000260:	b570      	push	{r4, r5, r6, lr}
 8000262:	4604      	mov	r4, r0
 8000264:	460d      	mov	r5, r1
  DISP_INIT_SEND_COM;
 8000266:	4e09      	ldr	r6, [pc, #36]	; (800028c <lcd_sendcommands+0x2c>)
 8000268:	2200      	movs	r2, #0
 800026a:	4630      	mov	r0, r6
 800026c:	2102      	movs	r1, #2
 800026e:	f001 fbaf 	bl	80019d0 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi2, data, N, 10);
 8000272:	462a      	mov	r2, r5
 8000274:	4621      	mov	r1, r4
 8000276:	230a      	movs	r3, #10
 8000278:	4805      	ldr	r0, [pc, #20]	; (8000290 <lcd_sendcommands+0x30>)
 800027a:	f002 f9ab 	bl	80025d4 <HAL_SPI_Transmit>
  DISP_INIT_SEND_DAT;
 800027e:	4630      	mov	r0, r6
}
 8000280:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  DISP_INIT_SEND_DAT;
 8000284:	2201      	movs	r2, #1
 8000286:	2102      	movs	r1, #2
 8000288:	f001 bba2 	b.w	80019d0 <HAL_GPIO_WritePin>
 800028c:	40010800 	.word	0x40010800
 8000290:	200005a0 	.word	0x200005a0

08000294 <lcd_bufupload>:

void lcd_bufupload(void)
{
 8000294:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8000298:	24b0      	movs	r4, #176	; 0xb0
  for(uint8_t j = 0; j < 8; j++)
  {
	uint8_t tmp_arr[] = {(0xB0 + j), 0x10, 0x00};
 800029a:	f04f 0810 	mov.w	r8, #16
 800029e:	2700      	movs	r7, #0
 80002a0:	4d0d      	ldr	r5, [pc, #52]	; (80002d8 <lcd_bufupload+0x44>)
    lcd_sendcommands(tmp_arr, 3);
    HAL_SPI_Transmit(&hspi2, dispbuffer[j], 128, 10);
 80002a2:	4e0e      	ldr	r6, [pc, #56]	; (80002dc <lcd_bufupload+0x48>)
    lcd_sendcommands(tmp_arr, 3);
 80002a4:	2103      	movs	r1, #3
	uint8_t tmp_arr[] = {(0xB0 + j), 0x10, 0x00};
 80002a6:	f88d 4004 	strb.w	r4, [sp, #4]
    lcd_sendcommands(tmp_arr, 3);
 80002aa:	a801      	add	r0, sp, #4
  for(uint8_t j = 0; j < 8; j++)
 80002ac:	3401      	adds	r4, #1
	uint8_t tmp_arr[] = {(0xB0 + j), 0x10, 0x00};
 80002ae:	f88d 8005 	strb.w	r8, [sp, #5]
 80002b2:	f88d 7006 	strb.w	r7, [sp, #6]
  for(uint8_t j = 0; j < 8; j++)
 80002b6:	b2e4      	uxtb	r4, r4
    lcd_sendcommands(tmp_arr, 3);
 80002b8:	f7ff ffd2 	bl	8000260 <lcd_sendcommands>
    HAL_SPI_Transmit(&hspi2, dispbuffer[j], 128, 10);
 80002bc:	4629      	mov	r1, r5
 80002be:	230a      	movs	r3, #10
 80002c0:	2280      	movs	r2, #128	; 0x80
 80002c2:	4630      	mov	r0, r6
 80002c4:	f002 f986 	bl	80025d4 <HAL_SPI_Transmit>
  for(uint8_t j = 0; j < 8; j++)
 80002c8:	2cb8      	cmp	r4, #184	; 0xb8
 80002ca:	f105 0580 	add.w	r5, r5, #128	; 0x80
 80002ce:	d1e9      	bne.n	80002a4 <lcd_bufupload+0x10>
  }
}
 80002d0:	b002      	add	sp, #8
 80002d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80002d6:	bf00      	nop
 80002d8:	200000a0 	.word	0x200000a0
 80002dc:	200005a0 	.word	0x200005a0

080002e0 <lcd_bufwsmb8x5>:


/******************************************/
void lcd_bufwsmb8x5(const uint8_t ch, uint8_t pg, uint8_t cl)
{
 80002e0:	b5f0      	push	{r4, r5, r6, r7, lr}
	for(uint8_t i = 0; i < 5; i++)
	  {
	    dispbuffer[pg][cl + i] = char_8x5[ch][i];
 80002e2:	4d09      	ldr	r5, [pc, #36]	; (8000308 <lcd_bufwsmb8x5+0x28>)
 80002e4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80002e8:	4b08      	ldr	r3, [pc, #32]	; (800030c <lcd_bufwsmb8x5+0x2c>)
 80002ea:	182f      	adds	r7, r5, r0
 80002ec:	5828      	ldr	r0, [r5, r0]
 80002ee:	eb02 14c1 	add.w	r4, r2, r1, lsl #7
 80002f2:	5118      	str	r0, [r3, r4]
 80002f4:	191e      	adds	r6, r3, r4
	  }
	cl = cl+5;
	dispbuffer[pg][cl] = 0x00;
 80002f6:	eb03 13c1 	add.w	r3, r3, r1, lsl #7
 80002fa:	2100      	movs	r1, #0
	    dispbuffer[pg][cl + i] = char_8x5[ch][i];
 80002fc:	7938      	ldrb	r0, [r7, #4]
	cl = cl+5;
 80002fe:	3205      	adds	r2, #5
	dispbuffer[pg][cl] = 0x00;
 8000300:	b2d2      	uxtb	r2, r2
	    dispbuffer[pg][cl + i] = char_8x5[ch][i];
 8000302:	7130      	strb	r0, [r6, #4]
	dispbuffer[pg][cl] = 0x00;
 8000304:	5499      	strb	r1, [r3, r2]
	cl++;
}
 8000306:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000308:	08004309 	.word	0x08004309
 800030c:	200000a0 	.word	0x200000a0

08000310 <lcd_bufwstr8x5>:

uint8_t lcd_bufwstr8x5(uint8_t *str, uint8_t pg, uint8_t cl, uint8_t newline_fl)
{
 8000310:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if(str == NULL) str = str_null;
 8000314:	4f12      	ldr	r7, [pc, #72]	; (8000360 <lcd_bufwstr8x5+0x50>)
{
 8000316:	4689      	mov	r9, r1
 8000318:	4614      	mov	r4, r2
 800031a:	4698      	mov	r8, r3
  if(str == NULL) str = str_null;
 800031c:	2800      	cmp	r0, #0
 800031e:	bf18      	it	ne
 8000320:	4607      	movne	r7, r0
  uint8_t i = 0;
  while(str[i])
 8000322:	2600      	movs	r6, #0
 8000324:	b2f5      	uxtb	r5, r6
 8000326:	5d78      	ldrb	r0, [r7, r5]
 8000328:	b910      	cbnz	r0, 8000330 <lcd_bufwstr8x5+0x20>
    }
    if(pg > 7) return 0;
    i++;
  }
  return i;
}
 800032a:	4628      	mov	r0, r5
 800032c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	lcd_bufwsmb8x5(str[i], pg, cl);
 8000330:	4622      	mov	r2, r4
    cl += 6;
 8000332:	3406      	adds	r4, #6
	lcd_bufwsmb8x5(str[i], pg, cl);
 8000334:	4649      	mov	r1, r9
    cl += 6;
 8000336:	b2e4      	uxtb	r4, r4
	lcd_bufwsmb8x5(str[i], pg, cl);
 8000338:	f7ff ffd2 	bl	80002e0 <lcd_bufwsmb8x5>
    if(cl > 122)
 800033c:	2c7a      	cmp	r4, #122	; 0x7a
 800033e:	d907      	bls.n	8000350 <lcd_bufwstr8x5+0x40>
      if(newline_fl)
 8000340:	f1b8 0f00 	cmp.w	r8, #0
 8000344:	d0f1      	beq.n	800032a <lcd_bufwstr8x5+0x1a>
        cl = 0;
 8000346:	2400      	movs	r4, #0
        pg++;
 8000348:	f109 0101 	add.w	r1, r9, #1
 800034c:	fa5f f981 	uxtb.w	r9, r1
    if(pg > 7) return 0;
 8000350:	f1b9 0f07 	cmp.w	r9, #7
 8000354:	f106 0601 	add.w	r6, r6, #1
 8000358:	d9e4      	bls.n	8000324 <lcd_bufwstr8x5+0x14>
 800035a:	2500      	movs	r5, #0
 800035c:	e7e5      	b.n	800032a <lcd_bufwstr8x5+0x1a>
 800035e:	bf00      	nop
 8000360:	20000000 	.word	0x20000000

08000364 <lcd_buferase>:
}

void lcd_buferase(void)
{
  for(uint8_t j = 0; j < 8; j++)
    for(uint8_t i = 0; i < 128; i++) dispbuffer[j][i] = 0;
 8000364:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000368:	2100      	movs	r1, #0
 800036a:	4801      	ldr	r0, [pc, #4]	; (8000370 <lcd_buferase+0xc>)
 800036c:	f002 be3c 	b.w	8002fe8 <memset>
 8000370:	200000a0 	.word	0x200000a0

08000374 <lcd_init>:
{
 8000374:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  DISP_RESET_OFF;
 8000376:	2201      	movs	r2, #1
 8000378:	2104      	movs	r1, #4
 800037a:	481f      	ldr	r0, [pc, #124]	; (80003f8 <lcd_init+0x84>)
 800037c:	f001 fb28 	bl	80019d0 <HAL_GPIO_WritePin>
  DISP_INIT_SEND_DAT;
 8000380:	2201      	movs	r2, #1
 8000382:	2102      	movs	r1, #2
 8000384:	481c      	ldr	r0, [pc, #112]	; (80003f8 <lcd_init+0x84>)
 8000386:	f001 fb23 	bl	80019d0 <HAL_GPIO_WritePin>
  HAL_Delay(2);
 800038a:	2002      	movs	r0, #2
 800038c:	f000 fe46 	bl	800101c <HAL_Delay>
  DISP_RESET_ON;
 8000390:	2200      	movs	r2, #0
 8000392:	2104      	movs	r1, #4
 8000394:	4818      	ldr	r0, [pc, #96]	; (80003f8 <lcd_init+0x84>)
 8000396:	f001 fb1b 	bl	80019d0 <HAL_GPIO_WritePin>
  HAL_Delay(2);
 800039a:	2002      	movs	r0, #2
 800039c:	f000 fe3e 	bl	800101c <HAL_Delay>
  DISP_RESET_OFF;
 80003a0:	2201      	movs	r2, #1
 80003a2:	2104      	movs	r1, #4
 80003a4:	4814      	ldr	r0, [pc, #80]	; (80003f8 <lcd_init+0x84>)
 80003a6:	f001 fb13 	bl	80019d0 <HAL_GPIO_WritePin>
  DISP_INIT_SEND_COM;
 80003aa:	2200      	movs	r2, #0
 80003ac:	2102      	movs	r1, #2
 80003ae:	4812      	ldr	r0, [pc, #72]	; (80003f8 <lcd_init+0x84>)
 80003b0:	f001 fb0e 	bl	80019d0 <HAL_GPIO_WritePin>
  uint8_t init_data_array[13] = {
 80003b4:	466a      	mov	r2, sp
 80003b6:	4615      	mov	r5, r2
 80003b8:	4b10      	ldr	r3, [pc, #64]	; (80003fc <lcd_init+0x88>)
 80003ba:	f103 0608 	add.w	r6, r3, #8
 80003be:	4614      	mov	r4, r2
 80003c0:	6818      	ldr	r0, [r3, #0]
 80003c2:	6859      	ldr	r1, [r3, #4]
 80003c4:	3308      	adds	r3, #8
 80003c6:	c403      	stmia	r4!, {r0, r1}
 80003c8:	42b3      	cmp	r3, r6
 80003ca:	4622      	mov	r2, r4
 80003cc:	d1f7      	bne.n	80003be <lcd_init+0x4a>
 80003ce:	6818      	ldr	r0, [r3, #0]
 80003d0:	791b      	ldrb	r3, [r3, #4]
  HAL_SPI_Transmit(&hspi2, init_data_array, 13, 20);
 80003d2:	4629      	mov	r1, r5
 80003d4:	220d      	movs	r2, #13
  uint8_t init_data_array[13] = {
 80003d6:	6020      	str	r0, [r4, #0]
 80003d8:	7123      	strb	r3, [r4, #4]
  HAL_SPI_Transmit(&hspi2, init_data_array, 13, 20);
 80003da:	4809      	ldr	r0, [pc, #36]	; (8000400 <lcd_init+0x8c>)
 80003dc:	2314      	movs	r3, #20
 80003de:	f002 f8f9 	bl	80025d4 <HAL_SPI_Transmit>
  lcd_buferase();
 80003e2:	f7ff ffbf 	bl	8000364 <lcd_buferase>
  lcd_bufupload();
 80003e6:	f7ff ff55 	bl	8000294 <lcd_bufupload>
  DISP_INIT_SEND_DAT;
 80003ea:	2201      	movs	r2, #1
 80003ec:	2102      	movs	r1, #2
 80003ee:	4802      	ldr	r0, [pc, #8]	; (80003f8 <lcd_init+0x84>)
 80003f0:	f001 faee 	bl	80019d0 <HAL_GPIO_WritePin>
}
 80003f4:	b004      	add	sp, #16
 80003f6:	bd70      	pop	{r4, r5, r6, pc}
 80003f8:	40010800 	.word	0x40010800
 80003fc:	080042fc 	.word	0x080042fc
 8000400:	200005a0 	.word	0x200005a0

08000404 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
  {
 8000404:	4610      	mov	r0, r2
  	for (int i = 0; i < len; i++)
 8000406:	2300      	movs	r3, #0
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000408:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
  {
 800040c:	b530      	push	{r4, r5, lr}
  	for (int i = 0; i < len; i++)
 800040e:	4283      	cmp	r3, r0
 8000410:	db00      	blt.n	8000414 <_write+0x10>
  	{
  		ITM_SendChar(*ptr++);
  	}
  	return len;
  }
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f8d2 4e80 	ldr.w	r4, [r2, #3712]	; 0xe80
 8000418:	07e5      	lsls	r5, r4, #31
 800041a:	d507      	bpl.n	800042c <_write+0x28>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 800041c:	f8d2 4e00 	ldr.w	r4, [r2, #3584]	; 0xe00
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000420:	07e4      	lsls	r4, r4, #31
 8000422:	d503      	bpl.n	800042c <_write+0x28>
  		ITM_SendChar(*ptr++);
 8000424:	5ccc      	ldrb	r4, [r1, r3]
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000426:	6815      	ldr	r5, [r2, #0]
 8000428:	b115      	cbz	r5, 8000430 <_write+0x2c>
    {
      __NOP();
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800042a:	7014      	strb	r4, [r2, #0]
  	for (int i = 0; i < len; i++)
 800042c:	3301      	adds	r3, #1
 800042e:	e7ee      	b.n	800040e <_write+0xa>
      __NOP();
 8000430:	bf00      	nop
 8000432:	e7f8      	b.n	8000426 <_write+0x22>

08000434 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000434:	b510      	push	{r4, lr}
 8000436:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000438:	2214      	movs	r2, #20
 800043a:	2100      	movs	r1, #0
 800043c:	a80c      	add	r0, sp, #48	; 0x30
 800043e:	f002 fdd3 	bl	8002fe8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000442:	2214      	movs	r2, #20
 8000444:	2100      	movs	r1, #0
 8000446:	eb0d 0002 	add.w	r0, sp, r2
 800044a:	f002 fdcd 	bl	8002fe8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800044e:	2210      	movs	r2, #16
 8000450:	2100      	movs	r1, #0
 8000452:	a801      	add	r0, sp, #4
 8000454:	f002 fdc8 	bl	8002fe8 <memset>
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000458:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800045a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800045e:	2105      	movs	r1, #5
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000460:	2201      	movs	r2, #1
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000462:	e9cd 130a 	strd	r1, r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000466:	e9cd 4311 	strd	r4, r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800046a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800046e:	a80a      	add	r0, sp, #40	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000470:	e9cd 220d 	strd	r2, r2, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000474:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000476:	f001 fab7 	bl	80019e8 <HAL_RCC_OscConfig>
 800047a:	b108      	cbz	r0, 8000480 <SystemClock_Config+0x4c>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800047c:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800047e:	e7fe      	b.n	800047e <SystemClock_Config+0x4a>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000480:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000482:	e9cd 3405 	strd	r3, r4, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000486:	f44f 6380 	mov.w	r3, #1024	; 0x400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800048a:	9007      	str	r0, [sp, #28]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800048c:	e9cd 3008 	strd	r3, r0, [sp, #32]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000490:	4621      	mov	r1, r4
 8000492:	a805      	add	r0, sp, #20
 8000494:	f001 fc7e 	bl	8001d94 <HAL_RCC_ClockConfig>
 8000498:	b108      	cbz	r0, 800049e <SystemClock_Config+0x6a>
 800049a:	b672      	cpsid	i
  while (1)
 800049c:	e7fe      	b.n	800049c <SystemClock_Config+0x68>
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800049e:	f44f 7380 	mov.w	r3, #256	; 0x100
 80004a2:	2203      	movs	r2, #3
 80004a4:	e9cd 2301 	strd	r2, r3, [sp, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80004a8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80004ac:	a801      	add	r0, sp, #4
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80004ae:	9303      	str	r3, [sp, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80004b0:	f001 fd2c 	bl	8001f0c <HAL_RCCEx_PeriphCLKConfig>
 80004b4:	b108      	cbz	r0, 80004ba <SystemClock_Config+0x86>
 80004b6:	b672      	cpsid	i
  while (1)
 80004b8:	e7fe      	b.n	80004b8 <SystemClock_Config+0x84>
}
 80004ba:	b014      	add	sp, #80	; 0x50
 80004bc:	bd10      	pop	{r4, pc}
	...

080004c0 <main>:
{
 80004c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004c4:	f04f 0a10 	mov.w	sl, #16
{
 80004c8:	b099      	sub	sp, #100	; 0x64
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004ca:	4cab      	ldr	r4, [pc, #684]	; (8000778 <main+0x2b8>)
  HAL_Init();
 80004cc:	f000 fd82 	bl	8000fd4 <HAL_Init>
  SystemClock_Config();
 80004d0:	f7ff ffb0 	bl	8000434 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004d4:	4652      	mov	r2, sl
 80004d6:	2100      	movs	r1, #0
 80004d8:	a810      	add	r0, sp, #64	; 0x40
 80004da:	f002 fd85 	bl	8002fe8 <memset>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004de:	69a3      	ldr	r3, [r4, #24]
  HAL_GPIO_WritePin(SHUTDOWN_GPIO_Port, SHUTDOWN_Pin, GPIO_PIN_SET);
 80004e0:	2201      	movs	r2, #1
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004e2:	ea43 030a 	orr.w	r3, r3, sl
 80004e6:	61a3      	str	r3, [r4, #24]
 80004e8:	69a3      	ldr	r3, [r4, #24]
  HAL_GPIO_WritePin(SHUTDOWN_GPIO_Port, SHUTDOWN_Pin, GPIO_PIN_SET);
 80004ea:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004ee:	ea03 030a 	and.w	r3, r3, sl
 80004f2:	9303      	str	r3, [sp, #12]
 80004f4:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80004f6:	69a3      	ldr	r3, [r4, #24]
  HAL_GPIO_WritePin(SHUTDOWN_GPIO_Port, SHUTDOWN_Pin, GPIO_PIN_SET);
 80004f8:	48a0      	ldr	r0, [pc, #640]	; (800077c <main+0x2bc>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80004fa:	f043 0320 	orr.w	r3, r3, #32
 80004fe:	61a3      	str	r3, [r4, #24]
 8000500:	69a3      	ldr	r3, [r4, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000502:	2500      	movs	r5, #0
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000504:	f003 0320 	and.w	r3, r3, #32
 8000508:	9304      	str	r3, [sp, #16]
 800050a:	9b04      	ldr	r3, [sp, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800050c:	69a3      	ldr	r3, [r4, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800050e:	f04f 0802 	mov.w	r8, #2
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000512:	f043 0304 	orr.w	r3, r3, #4
 8000516:	61a3      	str	r3, [r4, #24]
 8000518:	69a3      	ldr	r3, [r4, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800051a:	f04f 0911 	mov.w	r9, #17
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800051e:	f003 0304 	and.w	r3, r3, #4
 8000522:	9305      	str	r3, [sp, #20]
 8000524:	9b05      	ldr	r3, [sp, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000526:	69a3      	ldr	r3, [r4, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000528:	2601      	movs	r6, #1
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800052a:	f043 0308 	orr.w	r3, r3, #8
 800052e:	61a3      	str	r3, [r4, #24]
 8000530:	69a3      	ldr	r3, [r4, #24]
  GPIO_InitStruct.Pin = JOYSTICK_BTN_Pin;
 8000532:	2708      	movs	r7, #8
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000534:	f003 0308 	and.w	r3, r3, #8
 8000538:	9306      	str	r3, [sp, #24]
 800053a:	9b06      	ldr	r3, [sp, #24]
  HAL_GPIO_WritePin(SHUTDOWN_GPIO_Port, SHUTDOWN_Pin, GPIO_PIN_SET);
 800053c:	f001 fa48 	bl	80019d0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, DISP_RS_Pin|DISP_RSE_Pin, GPIO_PIN_RESET);
 8000540:	2200      	movs	r2, #0
 8000542:	2106      	movs	r1, #6
 8000544:	488e      	ldr	r0, [pc, #568]	; (8000780 <main+0x2c0>)
 8000546:	f001 fa43 	bl	80019d0 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800054a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  HAL_GPIO_Init(SHUTDOWN_GPIO_Port, &GPIO_InitStruct);
 800054e:	488b      	ldr	r0, [pc, #556]	; (800077c <main+0x2bc>)
 8000550:	a910      	add	r1, sp, #64	; 0x40
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000552:	e9cd 3910 	strd	r3, r9, [sp, #64]	; 0x40
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000556:	e9cd 5812 	strd	r5, r8, [sp, #72]	; 0x48
  HAL_GPIO_Init(SHUTDOWN_GPIO_Port, &GPIO_InitStruct);
 800055a:	f001 f95f 	bl	800181c <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800055e:	2306      	movs	r3, #6
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000560:	4887      	ldr	r0, [pc, #540]	; (8000780 <main+0x2c0>)
 8000562:	a910      	add	r1, sp, #64	; 0x40
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000564:	e9cd 3610 	strd	r3, r6, [sp, #64]	; 0x40
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000568:	e9cd 5812 	strd	r5, r8, [sp, #72]	; 0x48
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800056c:	f001 f956 	bl	800181c <HAL_GPIO_Init>
  HAL_GPIO_Init(JOYSTICK_BTN_GPIO_Port, &GPIO_InitStruct);
 8000570:	4883      	ldr	r0, [pc, #524]	; (8000780 <main+0x2c0>)
 8000572:	a910      	add	r1, sp, #64	; 0x40
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000574:	e9cd 7510 	strd	r7, r5, [sp, #64]	; 0x40
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000578:	9612      	str	r6, [sp, #72]	; 0x48
  HAL_GPIO_Init(JOYSTICK_BTN_GPIO_Port, &GPIO_InitStruct);
 800057a:	f001 f94f 	bl	800181c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = BTN_1_Pin|BTN_2_Pin|BTN_3_Pin|BTN_4_Pin;
 800057e:	23f0      	movs	r3, #240	; 0xf0
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000580:	4880      	ldr	r0, [pc, #512]	; (8000784 <main+0x2c4>)
 8000582:	a910      	add	r1, sp, #64	; 0x40
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000584:	e9cd 3510 	strd	r3, r5, [sp, #64]	; 0x40
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000588:	9612      	str	r6, [sp, #72]	; 0x48
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800058a:	f001 f947 	bl	800181c <HAL_GPIO_Init>
  __HAL_RCC_DMA1_CLK_ENABLE();
 800058e:	6963      	ldr	r3, [r4, #20]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000590:	462a      	mov	r2, r5
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000592:	4333      	orrs	r3, r6
 8000594:	6163      	str	r3, [r4, #20]
 8000596:	6963      	ldr	r3, [r4, #20]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000598:	4629      	mov	r1, r5
  __HAL_RCC_DMA1_CLK_ENABLE();
 800059a:	4033      	ands	r3, r6
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800059c:	200b      	movs	r0, #11
  __HAL_RCC_DMA1_CLK_ENABLE();
 800059e:	9302      	str	r3, [sp, #8]
 80005a0:	9b02      	ldr	r3, [sp, #8]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80005a2:	f000 ff87 	bl	80014b4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80005a6:	200b      	movs	r0, #11
 80005a8:	f000 ffb6 	bl	8001518 <HAL_NVIC_EnableIRQ>
  hadc1.Instance = ADC1;
 80005ac:	4c76      	ldr	r4, [pc, #472]	; (8000788 <main+0x2c8>)
 80005ae:	4b77      	ldr	r3, [pc, #476]	; (800078c <main+0x2cc>)
  ADC_ChannelConfTypeDef sConfig = {0};
 80005b0:	e9cd 5510 	strd	r5, r5, [sp, #64]	; 0x40
  hadc1.Instance = ADC1;
 80005b4:	6023      	str	r3, [r4, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80005b6:	f44f 7380 	mov.w	r3, #256	; 0x100
  ADC_ChannelConfTypeDef sConfig = {0};
 80005ba:	9512      	str	r5, [sp, #72]	; 0x48
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80005bc:	60a3      	str	r3, [r4, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80005be:	7325      	strb	r5, [r4, #12]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005c0:	f44f 2360 	mov.w	r3, #917504	; 0xe0000
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80005c4:	7525      	strb	r5, [r4, #20]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005c6:	6065      	str	r5, [r4, #4]
  hadc1.Init.NbrOfConversion = 5;
 80005c8:	2505      	movs	r5, #5
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80005ca:	4620      	mov	r0, r4
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005cc:	61e3      	str	r3, [r4, #28]
  hadc1.Init.NbrOfConversion = 5;
 80005ce:	6125      	str	r5, [r4, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80005d0:	f000 fee0 	bl	8001394 <HAL_ADC_Init>
 80005d4:	b108      	cbz	r0, 80005da <main+0x11a>
 80005d6:	b672      	cpsid	i
  while (1)
 80005d8:	e7fe      	b.n	80005d8 <main+0x118>
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 80005da:	2307      	movs	r3, #7
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80005dc:	e9cd 0610 	strd	r0, r6, [sp, #64]	; 0x40
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005e0:	a910      	add	r1, sp, #64	; 0x40
 80005e2:	4620      	mov	r0, r4
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 80005e4:	9312      	str	r3, [sp, #72]	; 0x48
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005e6:	f000 fd67 	bl	80010b8 <HAL_ADC_ConfigChannel>
 80005ea:	b108      	cbz	r0, 80005f0 <main+0x130>
 80005ec:	b672      	cpsid	i
  while (1)
 80005ee:	e7fe      	b.n	80005ee <main+0x12e>
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005f0:	4620      	mov	r0, r4
 80005f2:	a910      	add	r1, sp, #64	; 0x40
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80005f4:	e9cd 7810 	strd	r7, r8, [sp, #64]	; 0x40
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005f8:	f000 fd5e 	bl	80010b8 <HAL_ADC_ConfigChannel>
 80005fc:	b108      	cbz	r0, 8000602 <main+0x142>
 80005fe:	b672      	cpsid	i
  while (1)
 8000600:	e7fe      	b.n	8000600 <main+0x140>
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000602:	f04f 0809 	mov.w	r8, #9
 8000606:	2303      	movs	r3, #3
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000608:	4620      	mov	r0, r4
 800060a:	a910      	add	r1, sp, #64	; 0x40
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800060c:	e9cd 8310 	strd	r8, r3, [sp, #64]	; 0x40
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000610:	f000 fd52 	bl	80010b8 <HAL_ADC_ConfigChannel>
 8000614:	b108      	cbz	r0, 800061a <main+0x15a>
 8000616:	b672      	cpsid	i
  while (1)
 8000618:	e7fe      	b.n	8000618 <main+0x158>
  sConfig.Rank = ADC_REGULAR_RANK_4;
 800061a:	2304      	movs	r3, #4
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800061c:	4620      	mov	r0, r4
 800061e:	a910      	add	r1, sp, #64	; 0x40
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000620:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000624:	9311      	str	r3, [sp, #68]	; 0x44
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000626:	f000 fd47 	bl	80010b8 <HAL_ADC_ConfigChannel>
 800062a:	b108      	cbz	r0, 8000630 <main+0x170>
 800062c:	b672      	cpsid	i
  while (1)
 800062e:	e7fe      	b.n	800062e <main+0x16e>
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000630:	4620      	mov	r0, r4
 8000632:	a910      	add	r1, sp, #64	; 0x40
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8000634:	e9cd 9510 	strd	r9, r5, [sp, #64]	; 0x40
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000638:	f000 fd3e 	bl	80010b8 <HAL_ADC_ConfigChannel>
 800063c:	4603      	mov	r3, r0
 800063e:	b108      	cbz	r0, 8000644 <main+0x184>
 8000640:	b672      	cpsid	i
  while (1)
 8000642:	e7fe      	b.n	8000642 <main+0x182>
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000644:	f44f 7282 	mov.w	r2, #260	; 0x104
  hspi2.Instance = SPI2;
 8000648:	4851      	ldr	r0, [pc, #324]	; (8000790 <main+0x2d0>)
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800064a:	f8df e148 	ldr.w	lr, [pc, #328]	; 8000794 <main+0x2d4>
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800064e:	e9c0 3302 	strd	r3, r3, [r0, #8]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000652:	e9c0 e200 	strd	lr, r2, [r0]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000656:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 800065a:	f44f 2280 	mov.w	r2, #262144	; 0x40000
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800065e:	e9c0 3308 	strd	r3, r3, [r0, #32]
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000662:	6283      	str	r3, [r0, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000664:	230a      	movs	r3, #10
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000666:	e9c0 2706 	strd	r2, r7, [r0, #24]
  hspi2.Init.CRCPolynomial = 10;
 800066a:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800066c:	f001 ff5a 	bl	8002524 <HAL_SPI_Init>
 8000670:	4604      	mov	r4, r0
 8000672:	b108      	cbz	r0, 8000678 <main+0x1b8>
 8000674:	b672      	cpsid	i
  while (1)
 8000676:	e7fe      	b.n	8000676 <main+0x1b6>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000678:	4601      	mov	r1, r0
 800067a:	221c      	movs	r2, #28
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800067c:	e9cd 0007 	strd	r0, r0, [sp, #28]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000680:	a809      	add	r0, sp, #36	; 0x24
 8000682:	f002 fcb1 	bl	8002fe8 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000686:	2220      	movs	r2, #32
 8000688:	4621      	mov	r1, r4
 800068a:	a810      	add	r0, sp, #64	; 0x40
 800068c:	f002 fcac 	bl	8002fe8 <memset>
  htim1.Instance = TIM1;
 8000690:	4d41      	ldr	r5, [pc, #260]	; (8000798 <main+0x2d8>)
 8000692:	4b42      	ldr	r3, [pc, #264]	; (800079c <main+0x2dc>)
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000694:	4628      	mov	r0, r5
  htim1.Init.Prescaler = 0;
 8000696:	e9c5 3400 	strd	r3, r4, [r5]
  htim1.Init.Period = 65535;
 800069a:	f64f 73ff 	movw	r3, #65535	; 0xffff
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800069e:	e9c5 4405 	strd	r4, r4, [r5, #20]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006a2:	e9c5 3403 	strd	r3, r4, [r5, #12]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006a6:	60ac      	str	r4, [r5, #8]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80006a8:	f002 f8ee 	bl	8002888 <HAL_TIM_PWM_Init>
 80006ac:	b108      	cbz	r0, 80006b2 <main+0x1f2>
 80006ae:	b672      	cpsid	i
  while (1)
 80006b0:	e7fe      	b.n	80006b0 <main+0x1f0>
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006b2:	e9cd 0007 	strd	r0, r0, [sp, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80006b6:	a907      	add	r1, sp, #28
 80006b8:	4628      	mov	r0, r5
 80006ba:	f002 f9fb 	bl	8002ab4 <HAL_TIMEx_MasterConfigSynchronization>
 80006be:	4602      	mov	r2, r0
 80006c0:	b108      	cbz	r0, 80006c6 <main+0x206>
 80006c2:	b672      	cpsid	i
  while (1)
 80006c4:	e7fe      	b.n	80006c4 <main+0x204>
  sConfigOC.Pulse = 50000;
 80006c6:	f04f 0c60 	mov.w	ip, #96	; 0x60
 80006ca:	f24c 3350 	movw	r3, #50000	; 0xc350
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80006ce:	e9cd 000b 	strd	r0, r0, [sp, #44]	; 0x2c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80006d2:	e9cd 000d 	strd	r0, r0, [sp, #52]	; 0x34
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80006d6:	900f      	str	r0, [sp, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80006d8:	a909      	add	r1, sp, #36	; 0x24
 80006da:	4628      	mov	r0, r5
  sConfigOC.Pulse = 50000;
 80006dc:	e9cd c309 	strd	ip, r3, [sp, #36]	; 0x24
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80006e0:	f002 f92a 	bl	8002938 <HAL_TIM_PWM_ConfigChannel>
 80006e4:	b108      	cbz	r0, 80006ea <main+0x22a>
 80006e6:	b672      	cpsid	i
  while (1)
 80006e8:	e7fe      	b.n	80006e8 <main+0x228>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80006ea:	2300      	movs	r3, #0
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80006ec:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80006f0:	4829      	ldr	r0, [pc, #164]	; (8000798 <main+0x2d8>)
 80006f2:	a910      	add	r1, sp, #64	; 0x40
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80006f4:	e9cd 3310 	strd	r3, r3, [sp, #64]	; 0x40
  sBreakDeadTimeConfig.DeadTime = 0;
 80006f8:	e9cd 3312 	strd	r3, r3, [sp, #72]	; 0x48
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80006fc:	9314      	str	r3, [sp, #80]	; 0x50
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80006fe:	9215      	str	r2, [sp, #84]	; 0x54
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000700:	9317      	str	r3, [sp, #92]	; 0x5c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000702:	f002 fa05 	bl	8002b10 <HAL_TIMEx_ConfigBreakDeadTime>
 8000706:	4604      	mov	r4, r0
 8000708:	b108      	cbz	r0, 800070e <main+0x24e>
 800070a:	b672      	cpsid	i
  while (1)
 800070c:	e7fe      	b.n	800070c <main+0x24c>
  HAL_TIM_MspPostInit(&htim1);
 800070e:	4822      	ldr	r0, [pc, #136]	; (8000798 <main+0x2d8>)
 8000710:	f000 fb1a 	bl	8000d48 <HAL_TIM_MspPostInit>
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 8000714:	f04f 33ff 	mov.w	r3, #4294967295
  hrtc.Instance = RTC;
 8000718:	4e21      	ldr	r6, [pc, #132]	; (80007a0 <main+0x2e0>)
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 800071a:	4f22      	ldr	r7, [pc, #136]	; (80007a4 <main+0x2e4>)
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800071c:	4630      	mov	r0, r6
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 800071e:	e9c6 7300 	strd	r7, r3, [r6]
  RTC_TimeTypeDef sTime = {0};
 8000722:	f8ad 4024 	strh.w	r4, [sp, #36]	; 0x24
 8000726:	f88d 4026 	strb.w	r4, [sp, #38]	; 0x26
  RTC_DateTypeDef DateToUpdate = {0};
 800072a:	9410      	str	r4, [sp, #64]	; 0x40
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_NONE;
 800072c:	60b4      	str	r4, [r6, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800072e:	f001 fe47 	bl	80023c0 <HAL_RTC_Init>
 8000732:	b108      	cbz	r0, 8000738 <main+0x278>
 8000734:	b672      	cpsid	i
  while (1)
 8000736:	e7fe      	b.n	8000736 <main+0x276>
  sTime.Hours = 0x0;
 8000738:	f88d 0024 	strb.w	r0, [sp, #36]	; 0x24
  sTime.Minutes = 0x0;
 800073c:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
  sTime.Seconds = 0x0;
 8000740:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000744:	2201      	movs	r2, #1
 8000746:	4630      	mov	r0, r6
 8000748:	a909      	add	r1, sp, #36	; 0x24
 800074a:	f001 fd75 	bl	8002238 <HAL_RTC_SetTime>
 800074e:	b108      	cbz	r0, 8000754 <main+0x294>
 8000750:	b672      	cpsid	i
  while (1)
 8000752:	e7fe      	b.n	8000752 <main+0x292>
  DateToUpdate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000754:	2701      	movs	r7, #1
  DateToUpdate.Year = 0x0;
 8000756:	f88d 0043 	strb.w	r0, [sp, #67]	; 0x43
  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BCD) != HAL_OK)
 800075a:	463a      	mov	r2, r7
 800075c:	4630      	mov	r0, r6
 800075e:	a910      	add	r1, sp, #64	; 0x40
  DateToUpdate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000760:	f88d 7040 	strb.w	r7, [sp, #64]	; 0x40
  DateToUpdate.Month = RTC_MONTH_JANUARY;
 8000764:	f88d 7041 	strb.w	r7, [sp, #65]	; 0x41
  DateToUpdate.Date = 0x1;
 8000768:	f88d 7042 	strb.w	r7, [sp, #66]	; 0x42
  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BCD) != HAL_OK)
 800076c:	f001 fdb4 	bl	80022d8 <HAL_RTC_SetDate>
 8000770:	4603      	mov	r3, r0
 8000772:	b1c8      	cbz	r0, 80007a8 <main+0x2e8>
 8000774:	b672      	cpsid	i
  while (1)
 8000776:	e7fe      	b.n	8000776 <main+0x2b6>
 8000778:	40021000 	.word	0x40021000
 800077c:	40011000 	.word	0x40011000
 8000780:	40010800 	.word	0x40010800
 8000784:	40010c00 	.word	0x40010c00
 8000788:	200004c0 	.word	0x200004c0
 800078c:	40012400 	.word	0x40012400
 8000790:	200005a0 	.word	0x200005a0
 8000794:	40003800 	.word	0x40003800
 8000798:	200005f8 	.word	0x200005f8
 800079c:	40012c00 	.word	0x40012c00
 80007a0:	20000534 	.word	0x20000534
 80007a4:	40002800 	.word	0x40002800
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80007a8:	f44f 7282 	mov.w	r2, #260	; 0x104
  hspi1.Instance = SPI1;
 80007ac:	4894      	ldr	r0, [pc, #592]	; (8000a00 <main+0x540>)
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80007ae:	4995      	ldr	r1, [pc, #596]	; (8000a04 <main+0x544>)
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80007b0:	e9c0 3302 	strd	r3, r3, [r0, #8]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80007b4:	e9c0 1200 	strd	r1, r2, [r0]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007b8:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80007bc:	2208      	movs	r2, #8
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80007be:	e9c0 3308 	strd	r3, r3, [r0, #32]
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007c2:	6283      	str	r3, [r0, #40]	; 0x28
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80007c4:	f44f 2480 	mov.w	r4, #262144	; 0x40000
  hspi1.Init.CRCPolynomial = 10;
 80007c8:	230a      	movs	r3, #10
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80007ca:	e9c0 4206 	strd	r4, r2, [r0, #24]
  hspi1.Init.CRCPolynomial = 10;
 80007ce:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80007d0:	f001 fea8 	bl	8002524 <HAL_SPI_Init>
 80007d4:	4603      	mov	r3, r0
 80007d6:	b108      	cbz	r0, 80007dc <main+0x31c>
 80007d8:	b672      	cpsid	i
  while (1)
 80007da:	e7fe      	b.n	80007da <main+0x31a>
  huart1.Init.BaudRate = 9600;
 80007dc:	f44f 5816 	mov.w	r8, #9600	; 0x2580
  huart1.Init.Mode = UART_MODE_TX_RX;
 80007e0:	240c      	movs	r4, #12
  huart1.Instance = USART1;
 80007e2:	4889      	ldr	r0, [pc, #548]	; (8000a08 <main+0x548>)
  huart1.Init.BaudRate = 9600;
 80007e4:	4a89      	ldr	r2, [pc, #548]	; (8000a0c <main+0x54c>)
  huart1.Init.StopBits = UART_STOPBITS_1;
 80007e6:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart1.Init.BaudRate = 9600;
 80007ea:	e9c0 2800 	strd	r2, r8, [r0]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007ee:	e9c0 4305 	strd	r4, r3, [r0, #20]
  huart1.Init.Parity = UART_PARITY_NONE;
 80007f2:	6103      	str	r3, [r0, #16]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80007f4:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80007f6:	f002 fa01 	bl	8002bfc <HAL_UART_Init>
 80007fa:	b108      	cbz	r0, 8000800 <main+0x340>
 80007fc:	b672      	cpsid	i
  while (1)
 80007fe:	e7fe      	b.n	80007fe <main+0x33e>
  huart3.Instance = USART3;
 8000800:	4e83      	ldr	r6, [pc, #524]	; (8000a10 <main+0x550>)
 8000802:	4b84      	ldr	r3, [pc, #528]	; (8000a14 <main+0x554>)
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000804:	e9c6 0404 	strd	r0, r4, [r6, #16]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000808:	e9c6 0002 	strd	r0, r0, [r6, #8]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800080c:	e9c6 0006 	strd	r0, r0, [r6, #24]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000810:	4630      	mov	r0, r6
  huart3.Init.BaudRate = 9600;
 8000812:	e9c6 3800 	strd	r3, r8, [r6]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000816:	f002 f9f1 	bl	8002bfc <HAL_UART_Init>
 800081a:	4604      	mov	r4, r0
 800081c:	b108      	cbz	r0, 8000822 <main+0x362>
 800081e:	b672      	cpsid	i
  while (1)
 8000820:	e7fe      	b.n	8000820 <main+0x360>
  lcd_init();
 8000822:	f7ff fda7 	bl	8000374 <lcd_init>
  RingBuf_Init(rx_buf, 1024, 1, &ringbuf);
 8000826:	463a      	mov	r2, r7
 8000828:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800082c:	4b7a      	ldr	r3, [pc, #488]	; (8000a18 <main+0x558>)
 800082e:	487b      	ldr	r0, [pc, #492]	; (8000a1c <main+0x55c>)
 8000830:	f7ff fc95 	bl	800015e <RingBuf_Init>
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, dutyCycle);
 8000834:	f44f 4230 	mov.w	r2, #45056	; 0xb000
 8000838:	682b      	ldr	r3, [r5, #0]
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800083a:	4621      	mov	r1, r4
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, dutyCycle);
 800083c:	635a      	str	r2, [r3, #52]	; 0x34
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800083e:	4878      	ldr	r0, [pc, #480]	; (8000a20 <main+0x560>)
 8000840:	f002 f936 	bl	8002ab0 <HAL_TIM_PWM_Start>
  HAL_UART_Receive_IT(&huart3, &temp_byte, 1);
 8000844:	4630      	mov	r0, r6
  uint16_t buf_len_prev = 0;
 8000846:	4626      	mov	r6, r4
  HAL_UART_Receive_IT(&huart3, &temp_byte, 1);
 8000848:	463a      	mov	r2, r7
 800084a:	4976      	ldr	r1, [pc, #472]	; (8000a24 <main+0x564>)
  adc_complete = 0;
 800084c:	f8df 91d8 	ldr.w	r9, [pc, #472]	; 8000a28 <main+0x568>
  HAL_UART_Receive_IT(&huart3, &temp_byte, 1);
 8000850:	f002 fb79 	bl	8002f46 <HAL_UART_Receive_IT>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)ADC_data.array, 5);
 8000854:	2205      	movs	r2, #5
 8000856:	4975      	ldr	r1, [pc, #468]	; (8000a2c <main+0x56c>)
 8000858:	4875      	ldr	r0, [pc, #468]	; (8000a30 <main+0x570>)
 800085a:	f000 fce7 	bl	800122c <HAL_ADC_Start_DMA>
  adc_complete = 0;
 800085e:	f8c9 4000 	str.w	r4, [r9]
  uint16_t buf_len = 0;
 8000862:	f8ad 4040 	strh.w	r4, [sp, #64]	; 0x40
  lcd_buferase();
 8000866:	f7ff fd7d 	bl	8000364 <lcd_buferase>
  uint32_t temp_tick[3] = {0};
 800086a:	e9cd 4400 	strd	r4, r4, [sp]
      HAL_ADC_Start_DMA(&hadc1, (uint32_t*)ADC_data.array, 5);
 800086e:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8000a2c <main+0x56c>
      sprintf((char*)temp_str[0], "%ld.%ld sec from start", HAL_GetTick()/1000, (HAL_GetTick()%1000)/100);
 8000872:	4d70      	ldr	r5, [pc, #448]	; (8000a34 <main+0x574>)
    if(adc_complete)
 8000874:	f8d9 3000 	ldr.w	r3, [r9]
 8000878:	b13b      	cbz	r3, 800088a <main+0x3ca>
      HAL_ADC_Start_DMA(&hadc1, (uint32_t*)ADC_data.array, 5);
 800087a:	2205      	movs	r2, #5
 800087c:	4641      	mov	r1, r8
 800087e:	486c      	ldr	r0, [pc, #432]	; (8000a30 <main+0x570>)
 8000880:	f000 fcd4 	bl	800122c <HAL_ADC_Start_DMA>
      adc_complete = 0;
 8000884:	2300      	movs	r3, #0
 8000886:	f8c9 3000 	str.w	r3, [r9]
    if((HAL_GetTick() - temp_tick[0]) > period[0])
 800088a:	f000 fbc1 	bl	8001010 <HAL_GetTick>
 800088e:	9b00      	ldr	r3, [sp, #0]
 8000890:	1ac0      	subs	r0, r0, r3
 8000892:	2832      	cmp	r0, #50	; 0x32
 8000894:	f240 8098 	bls.w	80009c8 <main+0x508>
      temp_tick[0] = HAL_GetTick();
 8000898:	f000 fbba 	bl	8001010 <HAL_GetTick>
 800089c:	9000      	str	r0, [sp, #0]
      lcd_buferase();
 800089e:	f7ff fd61 	bl	8000364 <lcd_buferase>
      RingBuf_Available(&buf_len, &ringbuf);
 80008a2:	495d      	ldr	r1, [pc, #372]	; (8000a18 <main+0x558>)
 80008a4:	a810      	add	r0, sp, #64	; 0x40
 80008a6:	f7ff fc68 	bl	800017a <RingBuf_Available>
      if(buf_len)
 80008aa:	f8bd 7040 	ldrh.w	r7, [sp, #64]	; 0x40
 80008ae:	2f00      	cmp	r7, #0
 80008b0:	f000 809e 	beq.w	80009f0 <main+0x530>
        if(buf_len_prev != buf_len)
 80008b4:	42b7      	cmp	r7, r6
 80008b6:	d002      	beq.n	80008be <main+0x3fe>
          temp_tick[2] = HAL_GetTick();
 80008b8:	f000 fbaa 	bl	8001010 <HAL_GetTick>
 80008bc:	4604      	mov	r4, r0
        if((HAL_GetTick() - temp_tick[2]) > period[2])
 80008be:	f000 fba7 	bl	8001010 <HAL_GetTick>
 80008c2:	1b00      	subs	r0, r0, r4
 80008c4:	2832      	cmp	r0, #50	; 0x32
 80008c6:	d913      	bls.n	80008f0 <main+0x430>
          RingBuf_DataRead(temp_str[0], buf_len, &ringbuf);
 80008c8:	4a53      	ldr	r2, [pc, #332]	; (8000a18 <main+0x558>)
 80008ca:	f8bd 1040 	ldrh.w	r1, [sp, #64]	; 0x40
 80008ce:	4859      	ldr	r0, [pc, #356]	; (8000a34 <main+0x574>)
 80008d0:	f7ff fcb3 	bl	800023a <RingBuf_DataRead>
          temp_str[0][buf_len] = '\0';
 80008d4:	2300      	movs	r3, #0
 80008d6:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
          lcd_bufwstr8x5(temp_str[0], 0, 0, 0);
 80008da:	4619      	mov	r1, r3
          temp_str[0][buf_len] = '\0';
 80008dc:	54ab      	strb	r3, [r5, r2]
          lcd_bufwstr8x5(temp_str[0], 0, 0, 0);
 80008de:	4855      	ldr	r0, [pc, #340]	; (8000a34 <main+0x574>)
 80008e0:	461a      	mov	r2, r3
 80008e2:	f7ff fd15 	bl	8000310 <lcd_bufwstr8x5>
          strncpy((char*)temp_str[1], (char*)temp_str[0], 128);
 80008e6:	2280      	movs	r2, #128	; 0x80
 80008e8:	4952      	ldr	r1, [pc, #328]	; (8000a34 <main+0x574>)
 80008ea:	1888      	adds	r0, r1, r2
 80008ec:	f002 fbbc 	bl	8003068 <strncpy>
      if(adc_avercomplete)
 80008f0:	f8df a144 	ldr.w	sl, [pc, #324]	; 8000a38 <main+0x578>
 80008f4:	f8da 3000 	ldr.w	r3, [sl]
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d04a      	beq.n	8000992 <main+0x4d2>
        sprintf((char*)temp_str[0], "jox - %d mV", (int)ADC_averdata.jox * 1200 / (int)ADC_averdata.vref);
 80008fc:	f44f 6b96 	mov.w	fp, #1200	; 0x4b0
 8000900:	4e4e      	ldr	r6, [pc, #312]	; (8000a3c <main+0x57c>)
 8000902:	494f      	ldr	r1, [pc, #316]	; (8000a40 <main+0x580>)
 8000904:	6872      	ldr	r2, [r6, #4]
 8000906:	6933      	ldr	r3, [r6, #16]
 8000908:	fb0b f202 	mul.w	r2, fp, r2
 800090c:	4628      	mov	r0, r5
 800090e:	fb92 f2f3 	sdiv	r2, r2, r3
 8000912:	f002 fb89 	bl	8003028 <siprintf>
        lcd_bufwstr8x5(temp_str[0], 1, 0, 0);
 8000916:	2300      	movs	r3, #0
 8000918:	2101      	movs	r1, #1
 800091a:	461a      	mov	r2, r3
 800091c:	4628      	mov	r0, r5
 800091e:	f7ff fcf7 	bl	8000310 <lcd_bufwstr8x5>
        sprintf((char*)temp_str[0], "joy - %d mV", (int)ADC_averdata.joy * 1200 / (int)ADC_averdata.vref);
 8000922:	68b2      	ldr	r2, [r6, #8]
 8000924:	6933      	ldr	r3, [r6, #16]
 8000926:	fb0b f202 	mul.w	r2, fp, r2
 800092a:	4946      	ldr	r1, [pc, #280]	; (8000a44 <main+0x584>)
 800092c:	fb92 f2f3 	sdiv	r2, r2, r3
 8000930:	4628      	mov	r0, r5
 8000932:	f002 fb79 	bl	8003028 <siprintf>
        lcd_bufwstr8x5(temp_str[0], 2, 0, 0);
 8000936:	2300      	movs	r3, #0
 8000938:	2102      	movs	r1, #2
 800093a:	461a      	mov	r2, r3
 800093c:	4628      	mov	r0, r5
 800093e:	f7ff fce7 	bl	8000310 <lcd_bufwstr8x5>
        sprintf((char*)temp_str[0], "Vbt - %d mV", ((int)ADC_averdata.batlvl * 1596 / (int)ADC_averdata.vref));
 8000942:	f240 633c 	movw	r3, #1596	; 0x63c
 8000946:	6832      	ldr	r2, [r6, #0]
 8000948:	493f      	ldr	r1, [pc, #252]	; (8000a48 <main+0x588>)
 800094a:	435a      	muls	r2, r3
 800094c:	6933      	ldr	r3, [r6, #16]
 800094e:	4628      	mov	r0, r5
 8000950:	fb92 f2f3 	sdiv	r2, r2, r3
 8000954:	f002 fb68 	bl	8003028 <siprintf>
        lcd_bufwstr8x5(temp_str[0], 3, 0, 0);
 8000958:	2300      	movs	r3, #0
 800095a:	2103      	movs	r1, #3
 800095c:	461a      	mov	r2, r3
 800095e:	4628      	mov	r0, r5
 8000960:	f7ff fcd6 	bl	8000310 <lcd_bufwstr8x5>
        sprintf((char*)temp_str[0], "tmp - %d%cC",(358 - ((int)ADC_averdata.tmpr * 279) / (int)ADC_averdata.vref), 176);
 8000964:	f240 1317 	movw	r3, #279	; 0x117
 8000968:	68f2      	ldr	r2, [r6, #12]
 800096a:	4938      	ldr	r1, [pc, #224]	; (8000a4c <main+0x58c>)
 800096c:	435a      	muls	r2, r3
 800096e:	6933      	ldr	r3, [r6, #16]
 8000970:	4628      	mov	r0, r5
 8000972:	fb92 f2f3 	sdiv	r2, r2, r3
 8000976:	23b0      	movs	r3, #176	; 0xb0
 8000978:	f5c2 72b3 	rsb	r2, r2, #358	; 0x166
 800097c:	f002 fb54 	bl	8003028 <siprintf>
        lcd_bufwstr8x5(temp_str[0], 4, 0, 0);
 8000980:	2300      	movs	r3, #0
 8000982:	2104      	movs	r1, #4
 8000984:	461a      	mov	r2, r3
 8000986:	4628      	mov	r0, r5
 8000988:	f7ff fcc2 	bl	8000310 <lcd_bufwstr8x5>
        adc_avercomplete = 0;
 800098c:	2300      	movs	r3, #0
 800098e:	f8ca 3000 	str.w	r3, [sl]
      sprintf((char*)temp_str[0], "%ld.%ld sec from start", HAL_GetTick()/1000, (HAL_GetTick()%1000)/100);
 8000992:	f000 fb3d 	bl	8001010 <HAL_GetTick>
 8000996:	4606      	mov	r6, r0
 8000998:	f000 fb3a 	bl	8001010 <HAL_GetTick>
 800099c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80009a0:	fbb0 f3f2 	udiv	r3, r0, r2
 80009a4:	fb03 0012 	mls	r0, r3, r2, r0
 80009a8:	2364      	movs	r3, #100	; 0x64
 80009aa:	fbb6 f2f2 	udiv	r2, r6, r2
 80009ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80009b2:	4927      	ldr	r1, [pc, #156]	; (8000a50 <main+0x590>)
 80009b4:	4628      	mov	r0, r5
 80009b6:	f002 fb37 	bl	8003028 <siprintf>
      lcd_bufwstr8x5(temp_str[0], 7, 0, 0);
 80009ba:	2300      	movs	r3, #0
 80009bc:	2107      	movs	r1, #7
 80009be:	461a      	mov	r2, r3
 80009c0:	4628      	mov	r0, r5
 80009c2:	f7ff fca5 	bl	8000310 <lcd_bufwstr8x5>
 80009c6:	463e      	mov	r6, r7
    if((HAL_GetTick() - temp_tick[1]) > period[1])
 80009c8:	f000 fb22 	bl	8001010 <HAL_GetTick>
 80009cc:	9b01      	ldr	r3, [sp, #4]
 80009ce:	1ac0      	subs	r0, r0, r3
 80009d0:	2832      	cmp	r0, #50	; 0x32
 80009d2:	f67f af4f 	bls.w	8000874 <main+0x3b4>
      temp_tick[1] = HAL_GetTick();
 80009d6:	f000 fb1b 	bl	8001010 <HAL_GetTick>
 80009da:	9001      	str	r0, [sp, #4]
      lcd_bufupload();
 80009dc:	f7ff fc5a 	bl	8000294 <lcd_bufupload>
      printf("jox - %d, joy - %d\r\n", ADC_data.jox, ADC_data.joy);
 80009e0:	f8b8 2004 	ldrh.w	r2, [r8, #4]
 80009e4:	f8b8 1002 	ldrh.w	r1, [r8, #2]
 80009e8:	481a      	ldr	r0, [pc, #104]	; (8000a54 <main+0x594>)
 80009ea:	f002 fb05 	bl	8002ff8 <iprintf>
 80009ee:	e741      	b.n	8000874 <main+0x3b4>
        lcd_bufwstr8x5(temp_str[1], 0, 0, 0);
 80009f0:	463b      	mov	r3, r7
 80009f2:	463a      	mov	r2, r7
 80009f4:	4639      	mov	r1, r7
 80009f6:	4818      	ldr	r0, [pc, #96]	; (8000a58 <main+0x598>)
 80009f8:	f7ff fc8a 	bl	8000310 <lcd_bufwstr8x5>
 80009fc:	4637      	mov	r7, r6
 80009fe:	e777      	b.n	80008f0 <main+0x430>
 8000a00:	20000548 	.word	0x20000548
 8000a04:	40013000 	.word	0x40013000
 8000a08:	20000640 	.word	0x20000640
 8000a0c:	40013800 	.word	0x40013800
 8000a10:	20000684 	.word	0x20000684
 8000a14:	40004800 	.word	0x40004800
 8000a18:	200006c8 	.word	0x200006c8
 8000a1c:	200006dc 	.word	0x200006dc
 8000a20:	200005f8 	.word	0x200005f8
 8000a24:	20000adc 	.word	0x20000adc
 8000a28:	2000000c 	.word	0x2000000c
 8000a2c:	200004b4 	.word	0x200004b4
 8000a30:	200004c0 	.word	0x200004c0
 8000a34:	20000add 	.word	0x20000add
 8000a38:	20000008 	.word	0x20000008
 8000a3c:	200004a0 	.word	0x200004a0
 8000a40:	08004809 	.word	0x08004809
 8000a44:	08004815 	.word	0x08004815
 8000a48:	08004821 	.word	0x08004821
 8000a4c:	0800482d 	.word	0x0800482d
 8000a50:	08004839 	.word	0x08004839
 8000a54:	08004850 	.word	0x08004850
 8000a58:	20000b5d 	.word	0x20000b5d

08000a5c <HAL_UART_RxCpltCallback>:
{
 8000a5c:	b538      	push	{r3, r4, r5, lr}
  if(huart == &huart3)
 8000a5e:	4b08      	ldr	r3, [pc, #32]	; (8000a80 <HAL_UART_RxCpltCallback+0x24>)
{
 8000a60:	4604      	mov	r4, r0
  if(huart == &huart3)
 8000a62:	4298      	cmp	r0, r3
 8000a64:	d10b      	bne.n	8000a7e <HAL_UART_RxCpltCallback+0x22>
    RingBuf_BytePut(temp_byte, &ringbuf);
 8000a66:	4d07      	ldr	r5, [pc, #28]	; (8000a84 <HAL_UART_RxCpltCallback+0x28>)
 8000a68:	4907      	ldr	r1, [pc, #28]	; (8000a88 <HAL_UART_RxCpltCallback+0x2c>)
 8000a6a:	7828      	ldrb	r0, [r5, #0]
 8000a6c:	f7ff fb98 	bl	80001a0 <RingBuf_BytePut>
    HAL_UART_Receive_IT (&huart3, &temp_byte, 1);
 8000a70:	4629      	mov	r1, r5
 8000a72:	4620      	mov	r0, r4
}
 8000a74:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    HAL_UART_Receive_IT (&huart3, &temp_byte, 1);
 8000a78:	2201      	movs	r2, #1
 8000a7a:	f002 ba64 	b.w	8002f46 <HAL_UART_Receive_IT>
}
 8000a7e:	bd38      	pop	{r3, r4, r5, pc}
 8000a80:	20000684 	.word	0x20000684
 8000a84:	20000adc 	.word	0x20000adc
 8000a88:	200006c8 	.word	0x200006c8

08000a8c <HAL_UART_TxCpltCallback>:
}
 8000a8c:	4770      	bx	lr
	...

08000a90 <HAL_ADC_ConvCpltCallback>:
  if(hadc->Instance == ADC1)
 8000a90:	6802      	ldr	r2, [r0, #0]
 8000a92:	4b1e      	ldr	r3, [pc, #120]	; (8000b0c <HAL_ADC_ConvCpltCallback+0x7c>)
{
 8000a94:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(hadc->Instance == ADC1)
 8000a96:	429a      	cmp	r2, r3
 8000a98:	d122      	bne.n	8000ae0 <HAL_ADC_ConvCpltCallback+0x50>
    if(aver_counter)
 8000a9a:	4f1d      	ldr	r7, [pc, #116]	; (8000b10 <HAL_ADC_ConvCpltCallback+0x80>)
      ADC_averdata.batlvl += ADC_data.batlvl;
 8000a9c:	4b1d      	ldr	r3, [pc, #116]	; (8000b14 <HAL_ADC_ConvCpltCallback+0x84>)
    if(aver_counter)
 8000a9e:	f8d7 c000 	ldr.w	ip, [r7]
      ADC_averdata.vref += ADC_data.vref;
 8000aa2:	6919      	ldr	r1, [r3, #16]
      ADC_averdata.jox += ADC_data.jox;
 8000aa4:	e9d3 6500 	ldrd	r6, r5, [r3]
      ADC_averdata.tmpr += ADC_data.tmpr;
 8000aa8:	e9d3 4002 	ldrd	r4, r0, [r3, #8]
    if(aver_counter)
 8000aac:	f1bc 0f00 	cmp.w	ip, #0
 8000ab0:	d017      	beq.n	8000ae2 <HAL_ADC_ConvCpltCallback+0x52>
      ADC_averdata.batlvl += ADC_data.batlvl;
 8000ab2:	4a19      	ldr	r2, [pc, #100]	; (8000b18 <HAL_ADC_ConvCpltCallback+0x88>)
 8000ab4:	f8b2 e000 	ldrh.w	lr, [r2]
 8000ab8:	4476      	add	r6, lr
 8000aba:	601e      	str	r6, [r3, #0]
      ADC_averdata.jox += ADC_data.jox;
 8000abc:	8856      	ldrh	r6, [r2, #2]
 8000abe:	4435      	add	r5, r6
 8000ac0:	605d      	str	r5, [r3, #4]
      ADC_averdata.joy += ADC_data.joy;
 8000ac2:	8895      	ldrh	r5, [r2, #4]
 8000ac4:	442c      	add	r4, r5
 8000ac6:	609c      	str	r4, [r3, #8]
      ADC_averdata.tmpr += ADC_data.tmpr;
 8000ac8:	88d4      	ldrh	r4, [r2, #6]
      ADC_averdata.vref += ADC_data.vref;
 8000aca:	8912      	ldrh	r2, [r2, #8]
      ADC_averdata.tmpr += ADC_data.tmpr;
 8000acc:	4420      	add	r0, r4
      ADC_averdata.vref += ADC_data.vref;
 8000ace:	4411      	add	r1, r2
      ADC_averdata.tmpr += ADC_data.tmpr;
 8000ad0:	60d8      	str	r0, [r3, #12]
      ADC_averdata.vref += ADC_data.vref;
 8000ad2:	6119      	str	r1, [r3, #16]
      aver_counter--;
 8000ad4:	f10c 33ff 	add.w	r3, ip, #4294967295
 8000ad8:	603b      	str	r3, [r7, #0]
    adc_complete = 1;
 8000ada:	2201      	movs	r2, #1
 8000adc:	4b0f      	ldr	r3, [pc, #60]	; (8000b1c <HAL_ADC_ConvCpltCallback+0x8c>)
 8000ade:	601a      	str	r2, [r3, #0]
}
 8000ae0:	bdf0      	pop	{r4, r5, r6, r7, pc}
      ADC_averdata.batlvl /= AVER_PERIOD;
 8000ae2:	220a      	movs	r2, #10
 8000ae4:	fbb6 f6f2 	udiv	r6, r6, r2
      ADC_averdata.jox /= AVER_PERIOD;
 8000ae8:	fbb5 f5f2 	udiv	r5, r5, r2
      ADC_averdata.joy /= AVER_PERIOD;
 8000aec:	fbb4 f4f2 	udiv	r4, r4, r2
      ADC_averdata.tmpr /= AVER_PERIOD;
 8000af0:	fbb0 f0f2 	udiv	r0, r0, r2
      ADC_averdata.vref /= AVER_PERIOD;
 8000af4:	fbb1 f1f2 	udiv	r1, r1, r2
      aver_counter = AVER_PERIOD;
 8000af8:	603a      	str	r2, [r7, #0]
      adc_avercomplete = 1;
 8000afa:	2201      	movs	r2, #1
      ADC_averdata.batlvl /= AVER_PERIOD;
 8000afc:	601e      	str	r6, [r3, #0]
      ADC_averdata.jox /= AVER_PERIOD;
 8000afe:	605d      	str	r5, [r3, #4]
      ADC_averdata.joy /= AVER_PERIOD;
 8000b00:	609c      	str	r4, [r3, #8]
      ADC_averdata.tmpr /= AVER_PERIOD;
 8000b02:	60d8      	str	r0, [r3, #12]
      ADC_averdata.vref /= AVER_PERIOD;
 8000b04:	6119      	str	r1, [r3, #16]
      adc_avercomplete = 1;
 8000b06:	4b06      	ldr	r3, [pc, #24]	; (8000b20 <HAL_ADC_ConvCpltCallback+0x90>)
 8000b08:	601a      	str	r2, [r3, #0]
 8000b0a:	e7e6      	b.n	8000ada <HAL_ADC_ConvCpltCallback+0x4a>
 8000b0c:	40012400 	.word	0x40012400
 8000b10:	20000010 	.word	0x20000010
 8000b14:	200004a0 	.word	0x200004a0
 8000b18:	200004b4 	.word	0x200004b4
 8000b1c:	2000000c 	.word	0x2000000c
 8000b20:	20000008 	.word	0x20000008

08000b24 <Error_Handler>:
 8000b24:	b672      	cpsid	i
  while (1)
 8000b26:	e7fe      	b.n	8000b26 <Error_Handler+0x2>

08000b28 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000b28:	4b0e      	ldr	r3, [pc, #56]	; (8000b64 <HAL_MspInit+0x3c>)
{
 8000b2a:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 8000b2c:	699a      	ldr	r2, [r3, #24]
 8000b2e:	f042 0201 	orr.w	r2, r2, #1
 8000b32:	619a      	str	r2, [r3, #24]
 8000b34:	699a      	ldr	r2, [r3, #24]
 8000b36:	f002 0201 	and.w	r2, r2, #1
 8000b3a:	9200      	str	r2, [sp, #0]
 8000b3c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b3e:	69da      	ldr	r2, [r3, #28]
 8000b40:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000b44:	61da      	str	r2, [r3, #28]
 8000b46:	69db      	ldr	r3, [r3, #28]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000b48:	4a07      	ldr	r2, [pc, #28]	; (8000b68 <HAL_MspInit+0x40>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b4e:	9301      	str	r3, [sp, #4]
 8000b50:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000b52:	6853      	ldr	r3, [r2, #4]
 8000b54:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000b58:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000b5c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b5e:	b002      	add	sp, #8
 8000b60:	4770      	bx	lr
 8000b62:	bf00      	nop
 8000b64:	40021000 	.word	0x40021000
 8000b68:	40010000 	.word	0x40010000

08000b6c <HAL_ADC_MspInit>:
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b6c:	2210      	movs	r2, #16
{
 8000b6e:	b530      	push	{r4, r5, lr}
 8000b70:	4605      	mov	r5, r0
 8000b72:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b74:	eb0d 0002 	add.w	r0, sp, r2
 8000b78:	2100      	movs	r1, #0
 8000b7a:	f002 fa35 	bl	8002fe8 <memset>
  if(hadc->Instance==ADC1)
 8000b7e:	682a      	ldr	r2, [r5, #0]
 8000b80:	4b23      	ldr	r3, [pc, #140]	; (8000c10 <HAL_ADC_MspInit+0xa4>)
 8000b82:	429a      	cmp	r2, r3
 8000b84:	d142      	bne.n	8000c0c <HAL_ADC_MspInit+0xa0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000b86:	f503 436c 	add.w	r3, r3, #60416	; 0xec00
 8000b8a:	699a      	ldr	r2, [r3, #24]
    PA0-WKUP     ------> ADC1_IN0
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = BAT_LVL_CTRL_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b8c:	2403      	movs	r4, #3
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000b8e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000b92:	619a      	str	r2, [r3, #24]
 8000b94:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(BAT_LVL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8000b96:	481f      	ldr	r0, [pc, #124]	; (8000c14 <HAL_ADC_MspInit+0xa8>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000b98:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8000b9c:	9201      	str	r2, [sp, #4]
 8000b9e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ba0:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(BAT_LVL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8000ba2:	a904      	add	r1, sp, #16
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ba4:	f042 0204 	orr.w	r2, r2, #4
 8000ba8:	619a      	str	r2, [r3, #24]
 8000baa:	699a      	ldr	r2, [r3, #24]
 8000bac:	f002 0204 	and.w	r2, r2, #4
 8000bb0:	9202      	str	r2, [sp, #8]
 8000bb2:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bb4:	699a      	ldr	r2, [r3, #24]
 8000bb6:	f042 0208 	orr.w	r2, r2, #8
 8000bba:	619a      	str	r2, [r3, #24]
 8000bbc:	699b      	ldr	r3, [r3, #24]
 8000bbe:	f003 0308 	and.w	r3, r3, #8
 8000bc2:	9303      	str	r3, [sp, #12]
 8000bc4:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000bc6:	2301      	movs	r3, #1
 8000bc8:	e9cd 3404 	strd	r3, r4, [sp, #16]
    HAL_GPIO_Init(BAT_LVL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8000bcc:	f000 fe26 	bl	800181c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = JOYSTICK_OX_Pin|JOYSTICK_OY_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bd0:	4811      	ldr	r0, [pc, #68]	; (8000c18 <HAL_ADC_MspInit+0xac>)
 8000bd2:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000bd4:	e9cd 4404 	strd	r4, r4, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bd8:	f000 fe20 	bl	800181c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000bdc:	2300      	movs	r3, #0
    hdma_adc1.Instance = DMA1_Channel1;
 8000bde:	4c0f      	ldr	r4, [pc, #60]	; (8000c1c <HAL_ADC_MspInit+0xb0>)
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000be0:	4a0f      	ldr	r2, [pc, #60]	; (8000c20 <HAL_ADC_MspInit+0xb4>)
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000be2:	2180      	movs	r1, #128	; 0x80
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000be4:	e9c4 2300 	strd	r2, r3, [r4]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000be8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000bec:	e9c4 1203 	strd	r1, r2, [r4, #12]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000bf0:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_adc1.Init.Mode = DMA_NORMAL;
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000bf4:	4620      	mov	r0, r4
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8000bf6:	e9c4 2305 	strd	r2, r3, [r4, #20]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000bfa:	60a3      	str	r3, [r4, #8]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000bfc:	61e3      	str	r3, [r4, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000bfe:	f000 fcad 	bl	800155c <HAL_DMA_Init>
 8000c02:	b108      	cbz	r0, 8000c08 <HAL_ADC_MspInit+0x9c>
    {
      Error_Handler();
 8000c04:	f7ff ff8e 	bl	8000b24 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000c08:	622c      	str	r4, [r5, #32]
 8000c0a:	6265      	str	r5, [r4, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000c0c:	b009      	add	sp, #36	; 0x24
 8000c0e:	bd30      	pop	{r4, r5, pc}
 8000c10:	40012400 	.word	0x40012400
 8000c14:	40010800 	.word	0x40010800
 8000c18:	40010c00 	.word	0x40010c00
 8000c1c:	200004f0 	.word	0x200004f0
 8000c20:	40020008 	.word	0x40020008

08000c24 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000c24:	b507      	push	{r0, r1, r2, lr}
  if(hrtc->Instance==RTC)
 8000c26:	4b0b      	ldr	r3, [pc, #44]	; (8000c54 <HAL_RTC_MspInit+0x30>)
 8000c28:	6802      	ldr	r2, [r0, #0]
 8000c2a:	429a      	cmp	r2, r3
 8000c2c:	d10f      	bne.n	8000c4e <HAL_RTC_MspInit+0x2a>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 8000c2e:	f000 fed5 	bl	80019dc <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 8000c32:	4b09      	ldr	r3, [pc, #36]	; (8000c58 <HAL_RTC_MspInit+0x34>)
 8000c34:	69da      	ldr	r2, [r3, #28]
 8000c36:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8000c3a:	61da      	str	r2, [r3, #28]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000c3c:	2201      	movs	r2, #1
    __HAL_RCC_BKP_CLK_ENABLE();
 8000c3e:	69db      	ldr	r3, [r3, #28]
 8000c40:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000c44:	9301      	str	r3, [sp, #4]
 8000c46:	9b01      	ldr	r3, [sp, #4]
    __HAL_RCC_RTC_ENABLE();
 8000c48:	4b04      	ldr	r3, [pc, #16]	; (8000c5c <HAL_RTC_MspInit+0x38>)
 8000c4a:	f8c3 243c 	str.w	r2, [r3, #1084]	; 0x43c
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000c4e:	b003      	add	sp, #12
 8000c50:	f85d fb04 	ldr.w	pc, [sp], #4
 8000c54:	40002800 	.word	0x40002800
 8000c58:	40021000 	.word	0x40021000
 8000c5c:	42420000 	.word	0x42420000

08000c60 <HAL_SPI_MspInit>:
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c60:	2210      	movs	r2, #16
{
 8000c62:	b510      	push	{r4, lr}
 8000c64:	4604      	mov	r4, r0
 8000c66:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c68:	eb0d 0002 	add.w	r0, sp, r2
 8000c6c:	2100      	movs	r1, #0
 8000c6e:	f002 f9bb 	bl	8002fe8 <memset>
  if(hspi->Instance==SPI1)
 8000c72:	6823      	ldr	r3, [r4, #0]
 8000c74:	4a25      	ldr	r2, [pc, #148]	; (8000d0c <HAL_SPI_MspInit+0xac>)
 8000c76:	4293      	cmp	r3, r2
 8000c78:	d127      	bne.n	8000cca <HAL_SPI_MspInit+0x6a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000c7a:	4b25      	ldr	r3, [pc, #148]	; (8000d10 <HAL_SPI_MspInit+0xb0>)
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c7c:	21b0      	movs	r1, #176	; 0xb0
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000c7e:	699a      	ldr	r2, [r3, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c80:	4824      	ldr	r0, [pc, #144]	; (8000d14 <HAL_SPI_MspInit+0xb4>)
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000c82:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000c86:	619a      	str	r2, [r3, #24]
 8000c88:	699a      	ldr	r2, [r3, #24]
 8000c8a:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8000c8e:	9200      	str	r2, [sp, #0]
 8000c90:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c92:	699a      	ldr	r2, [r3, #24]
 8000c94:	f042 0204 	orr.w	r2, r2, #4
 8000c98:	619a      	str	r2, [r3, #24]
 8000c9a:	699b      	ldr	r3, [r3, #24]
 8000c9c:	f003 0304 	and.w	r3, r3, #4
 8000ca0:	9301      	str	r3, [sp, #4]
 8000ca2:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ca4:	2302      	movs	r3, #2
 8000ca6:	e9cd 1304 	strd	r1, r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000caa:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cac:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000cae:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cb0:	f000 fdb4 	bl	800181c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cb4:	2040      	movs	r0, #64	; 0x40
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	e9cd 0304 	strd	r0, r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cbc:	4815      	ldr	r0, [pc, #84]	; (8000d14 <HAL_SPI_MspInit+0xb4>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cbe:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cc0:	a904      	add	r1, sp, #16
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = DISP_SPI_CS_Pin|DISP_SPI_SCK_Pin|GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cc2:	f000 fdab 	bl	800181c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000cc6:	b008      	add	sp, #32
 8000cc8:	bd10      	pop	{r4, pc}
  else if(hspi->Instance==SPI2)
 8000cca:	4a13      	ldr	r2, [pc, #76]	; (8000d18 <HAL_SPI_MspInit+0xb8>)
 8000ccc:	4293      	cmp	r3, r2
 8000cce:	d1fa      	bne.n	8000cc6 <HAL_SPI_MspInit+0x66>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000cd0:	4b0f      	ldr	r3, [pc, #60]	; (8000d10 <HAL_SPI_MspInit+0xb0>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cd2:	4812      	ldr	r0, [pc, #72]	; (8000d1c <HAL_SPI_MspInit+0xbc>)
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000cd4:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cd6:	a904      	add	r1, sp, #16
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000cd8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000cdc:	61da      	str	r2, [r3, #28]
 8000cde:	69da      	ldr	r2, [r3, #28]
 8000ce0:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8000ce4:	9202      	str	r2, [sp, #8]
 8000ce6:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ce8:	699a      	ldr	r2, [r3, #24]
 8000cea:	f042 0208 	orr.w	r2, r2, #8
 8000cee:	619a      	str	r2, [r3, #24]
 8000cf0:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cf2:	f44f 4230 	mov.w	r2, #45056	; 0xb000
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cf6:	f003 0308 	and.w	r3, r3, #8
 8000cfa:	9303      	str	r3, [sp, #12]
 8000cfc:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cfe:	2302      	movs	r3, #2
 8000d00:	e9cd 2304 	strd	r2, r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d04:	2303      	movs	r3, #3
 8000d06:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d08:	e7db      	b.n	8000cc2 <HAL_SPI_MspInit+0x62>
 8000d0a:	bf00      	nop
 8000d0c:	40013000 	.word	0x40013000
 8000d10:	40021000 	.word	0x40021000
 8000d14:	40010800 	.word	0x40010800
 8000d18:	40003800 	.word	0x40003800
 8000d1c:	40010c00 	.word	0x40010c00

08000d20 <HAL_TIM_PWM_MspInit>:
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
  if(htim_pwm->Instance==TIM1)
 8000d20:	6802      	ldr	r2, [r0, #0]
 8000d22:	4b08      	ldr	r3, [pc, #32]	; (8000d44 <HAL_TIM_PWM_MspInit+0x24>)
{
 8000d24:	b082      	sub	sp, #8
  if(htim_pwm->Instance==TIM1)
 8000d26:	429a      	cmp	r2, r3
 8000d28:	d10a      	bne.n	8000d40 <HAL_TIM_PWM_MspInit+0x20>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000d2a:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 8000d2e:	699a      	ldr	r2, [r3, #24]
 8000d30:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000d34:	619a      	str	r2, [r3, #24]
 8000d36:	699b      	ldr	r3, [r3, #24]
 8000d38:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000d3c:	9301      	str	r3, [sp, #4]
 8000d3e:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000d40:	b002      	add	sp, #8
 8000d42:	4770      	bx	lr
 8000d44:	40012c00 	.word	0x40012c00

08000d48 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000d48:	b510      	push	{r4, lr}
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d4e:	2210      	movs	r2, #16
 8000d50:	2100      	movs	r1, #0
 8000d52:	a802      	add	r0, sp, #8
 8000d54:	f002 f948 	bl	8002fe8 <memset>
  if(htim->Instance==TIM1)
 8000d58:	6822      	ldr	r2, [r4, #0]
 8000d5a:	4b0d      	ldr	r3, [pc, #52]	; (8000d90 <HAL_TIM_MspPostInit+0x48>)
 8000d5c:	429a      	cmp	r2, r3
 8000d5e:	d114      	bne.n	8000d8a <HAL_TIM_MspPostInit+0x42>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d60:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 8000d64:	699a      	ldr	r2, [r3, #24]
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = DISP_BRIGHT_PWM_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    HAL_GPIO_Init(DISP_BRIGHT_PWM_GPIO_Port, &GPIO_InitStruct);
 8000d66:	480b      	ldr	r0, [pc, #44]	; (8000d94 <HAL_TIM_MspPostInit+0x4c>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d68:	f042 0204 	orr.w	r2, r2, #4
 8000d6c:	619a      	str	r2, [r3, #24]
 8000d6e:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d70:	f44f 7280 	mov.w	r2, #256	; 0x100
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d74:	f003 0304 	and.w	r3, r3, #4
 8000d78:	9301      	str	r3, [sp, #4]
 8000d7a:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d7c:	2302      	movs	r3, #2
    HAL_GPIO_Init(DISP_BRIGHT_PWM_GPIO_Port, &GPIO_InitStruct);
 8000d7e:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d80:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d84:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(DISP_BRIGHT_PWM_GPIO_Port, &GPIO_InitStruct);
 8000d86:	f000 fd49 	bl	800181c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000d8a:	b006      	add	sp, #24
 8000d8c:	bd10      	pop	{r4, pc}
 8000d8e:	bf00      	nop
 8000d90:	40012c00 	.word	0x40012c00
 8000d94:	40010800 	.word	0x40010800

08000d98 <HAL_UART_MspInit>:
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d98:	2210      	movs	r2, #16
{
 8000d9a:	b510      	push	{r4, lr}
 8000d9c:	4604      	mov	r4, r0
 8000d9e:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000da0:	eb0d 0002 	add.w	r0, sp, r2
 8000da4:	2100      	movs	r1, #0
 8000da6:	f002 f91f 	bl	8002fe8 <memset>
  if(huart->Instance==USART1)
 8000daa:	6823      	ldr	r3, [r4, #0]
 8000dac:	4a33      	ldr	r2, [pc, #204]	; (8000e7c <HAL_UART_MspInit+0xe4>)
 8000dae:	4293      	cmp	r3, r2
 8000db0:	d131      	bne.n	8000e16 <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000db2:	4b33      	ldr	r3, [pc, #204]	; (8000e80 <HAL_UART_MspInit+0xe8>)
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ESP_UART_TX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000db4:	f44f 7100 	mov.w	r1, #512	; 0x200
    __HAL_RCC_USART1_CLK_ENABLE();
 8000db8:	699a      	ldr	r2, [r3, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(ESP_UART_TX_GPIO_Port, &GPIO_InitStruct);
 8000dba:	4832      	ldr	r0, [pc, #200]	; (8000e84 <HAL_UART_MspInit+0xec>)
    __HAL_RCC_USART1_CLK_ENABLE();
 8000dbc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000dc0:	619a      	str	r2, [r3, #24]
 8000dc2:	699a      	ldr	r2, [r3, #24]

    GPIO_InitStruct.Pin = ESP_UART_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dc4:	2400      	movs	r4, #0
    __HAL_RCC_USART1_CLK_ENABLE();
 8000dc6:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8000dca:	9200      	str	r2, [sp, #0]
 8000dcc:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dce:	699a      	ldr	r2, [r3, #24]
 8000dd0:	f042 0204 	orr.w	r2, r2, #4
 8000dd4:	619a      	str	r2, [r3, #24]
 8000dd6:	699b      	ldr	r3, [r3, #24]
 8000dd8:	f003 0304 	and.w	r3, r3, #4
 8000ddc:	9301      	str	r3, [sp, #4]
 8000dde:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000de0:	2302      	movs	r3, #2
 8000de2:	e9cd 1304 	strd	r1, r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000de6:	2303      	movs	r3, #3
    HAL_GPIO_Init(ESP_UART_TX_GPIO_Port, &GPIO_InitStruct);
 8000de8:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000dea:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(ESP_UART_TX_GPIO_Port, &GPIO_InitStruct);
 8000dec:	f000 fd16 	bl	800181c <HAL_GPIO_Init>
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000df0:	f44f 6380 	mov.w	r3, #1024	; 0x400
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(ESP_UART_RX_GPIO_Port, &GPIO_InitStruct);
 8000df4:	4823      	ldr	r0, [pc, #140]	; (8000e84 <HAL_UART_MspInit+0xec>)
 8000df6:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000df8:	e9cd 3404 	strd	r3, r4, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dfc:	9406      	str	r4, [sp, #24]
    HAL_GPIO_Init(ESP_UART_RX_GPIO_Port, &GPIO_InitStruct);
 8000dfe:	f000 fd0d 	bl	800181c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000e02:	2025      	movs	r0, #37	; 0x25
 8000e04:	4622      	mov	r2, r4
 8000e06:	4621      	mov	r1, r4
 8000e08:	f000 fb54 	bl	80014b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000e0c:	2025      	movs	r0, #37	; 0x25
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(EXT_RX_GPIO_Port, &GPIO_InitStruct);

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000e0e:	f000 fb83 	bl	8001518 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000e12:	b008      	add	sp, #32
 8000e14:	bd10      	pop	{r4, pc}
  else if(huart->Instance==USART3)
 8000e16:	4a1c      	ldr	r2, [pc, #112]	; (8000e88 <HAL_UART_MspInit+0xf0>)
 8000e18:	4293      	cmp	r3, r2
 8000e1a:	d1fa      	bne.n	8000e12 <HAL_UART_MspInit+0x7a>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000e1c:	4b18      	ldr	r3, [pc, #96]	; (8000e80 <HAL_UART_MspInit+0xe8>)
    HAL_GPIO_Init(EXT_TX_GPIO_Port, &GPIO_InitStruct);
 8000e1e:	481b      	ldr	r0, [pc, #108]	; (8000e8c <HAL_UART_MspInit+0xf4>)
    __HAL_RCC_USART3_CLK_ENABLE();
 8000e20:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(EXT_TX_GPIO_Port, &GPIO_InitStruct);
 8000e22:	a904      	add	r1, sp, #16
    __HAL_RCC_USART3_CLK_ENABLE();
 8000e24:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8000e28:	61da      	str	r2, [r3, #28]
 8000e2a:	69da      	ldr	r2, [r3, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e2c:	2400      	movs	r4, #0
    __HAL_RCC_USART3_CLK_ENABLE();
 8000e2e:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 8000e32:	9202      	str	r2, [sp, #8]
 8000e34:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e36:	699a      	ldr	r2, [r3, #24]
 8000e38:	f042 0208 	orr.w	r2, r2, #8
 8000e3c:	619a      	str	r2, [r3, #24]
 8000e3e:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e40:	f44f 6280 	mov.w	r2, #1024	; 0x400
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e44:	f003 0308 	and.w	r3, r3, #8
 8000e48:	9303      	str	r3, [sp, #12]
 8000e4a:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e4c:	2302      	movs	r3, #2
 8000e4e:	e9cd 2304 	strd	r2, r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e52:	2303      	movs	r3, #3
 8000e54:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(EXT_TX_GPIO_Port, &GPIO_InitStruct);
 8000e56:	f000 fce1 	bl	800181c <HAL_GPIO_Init>
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e5a:	f44f 6300 	mov.w	r3, #2048	; 0x800
    HAL_GPIO_Init(EXT_RX_GPIO_Port, &GPIO_InitStruct);
 8000e5e:	480b      	ldr	r0, [pc, #44]	; (8000e8c <HAL_UART_MspInit+0xf4>)
 8000e60:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e62:	e9cd 3404 	strd	r3, r4, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e66:	9406      	str	r4, [sp, #24]
    HAL_GPIO_Init(EXT_RX_GPIO_Port, &GPIO_InitStruct);
 8000e68:	f000 fcd8 	bl	800181c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000e6c:	2027      	movs	r0, #39	; 0x27
 8000e6e:	4622      	mov	r2, r4
 8000e70:	4621      	mov	r1, r4
 8000e72:	f000 fb1f 	bl	80014b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000e76:	2027      	movs	r0, #39	; 0x27
 8000e78:	e7c9      	b.n	8000e0e <HAL_UART_MspInit+0x76>
 8000e7a:	bf00      	nop
 8000e7c:	40013800 	.word	0x40013800
 8000e80:	40021000 	.word	0x40021000
 8000e84:	40010800 	.word	0x40010800
 8000e88:	40004800 	.word	0x40004800
 8000e8c:	40010c00 	.word	0x40010c00

08000e90 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e90:	e7fe      	b.n	8000e90 <NMI_Handler>

08000e92 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e92:	e7fe      	b.n	8000e92 <HardFault_Handler>

08000e94 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e94:	e7fe      	b.n	8000e94 <MemManage_Handler>

08000e96 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e96:	e7fe      	b.n	8000e96 <BusFault_Handler>

08000e98 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e98:	e7fe      	b.n	8000e98 <UsageFault_Handler>

08000e9a <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e9a:	4770      	bx	lr

08000e9c <DebugMon_Handler>:
 8000e9c:	4770      	bx	lr

08000e9e <PendSV_Handler>:
 8000e9e:	4770      	bx	lr

08000ea0 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ea0:	f000 b8aa 	b.w	8000ff8 <HAL_IncTick>

08000ea4 <DMA1_Channel1_IRQHandler>:
void DMA1_Channel1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000ea4:	4801      	ldr	r0, [pc, #4]	; (8000eac <DMA1_Channel1_IRQHandler+0x8>)
 8000ea6:	f000 bc27 	b.w	80016f8 <HAL_DMA_IRQHandler>
 8000eaa:	bf00      	nop
 8000eac:	200004f0 	.word	0x200004f0

08000eb0 <USART1_IRQHandler>:
void USART1_IRQHandler(void)
{
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000eb0:	4801      	ldr	r0, [pc, #4]	; (8000eb8 <USART1_IRQHandler+0x8>)
 8000eb2:	f001 bf27 	b.w	8002d04 <HAL_UART_IRQHandler>
 8000eb6:	bf00      	nop
 8000eb8:	20000640 	.word	0x20000640

08000ebc <USART3_IRQHandler>:
void USART3_IRQHandler(void)
{
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000ebc:	4801      	ldr	r0, [pc, #4]	; (8000ec4 <USART3_IRQHandler+0x8>)
 8000ebe:	f001 bf21 	b.w	8002d04 <HAL_UART_IRQHandler>
 8000ec2:	bf00      	nop
 8000ec4:	20000684 	.word	0x20000684

08000ec8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ec8:	b570      	push	{r4, r5, r6, lr}
 8000eca:	460d      	mov	r5, r1
 8000ecc:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ece:	460e      	mov	r6, r1
 8000ed0:	1b73      	subs	r3, r6, r5
 8000ed2:	429c      	cmp	r4, r3
 8000ed4:	dc01      	bgt.n	8000eda <_read+0x12>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 8000ed6:	4620      	mov	r0, r4
 8000ed8:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 8000eda:	f3af 8000 	nop.w
 8000ede:	f806 0b01 	strb.w	r0, [r6], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ee2:	e7f5      	b.n	8000ed0 <_read+0x8>

08000ee4 <_close>:
}

int _close(int file)
{
	return -1;
}
 8000ee4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ee8:	4770      	bx	lr

08000eea <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8000eea:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
 8000eee:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 8000ef0:	604b      	str	r3, [r1, #4]
}
 8000ef2:	4770      	bx	lr

08000ef4 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8000ef4:	2001      	movs	r0, #1
 8000ef6:	4770      	bx	lr

08000ef8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8000ef8:	2000      	movs	r0, #0
 8000efa:	4770      	bx	lr

08000efc <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000efc:	4a0b      	ldr	r2, [pc, #44]	; (8000f2c <_sbrk+0x30>)
{
 8000efe:	4603      	mov	r3, r0
  if (NULL == __sbrk_heap_end)
 8000f00:	6811      	ldr	r1, [r2, #0]
{
 8000f02:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 8000f04:	b909      	cbnz	r1, 8000f0a <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 8000f06:	490a      	ldr	r1, [pc, #40]	; (8000f30 <_sbrk+0x34>)
 8000f08:	6011      	str	r1, [r2, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f0a:	6810      	ldr	r0, [r2, #0]
 8000f0c:	4909      	ldr	r1, [pc, #36]	; (8000f34 <_sbrk+0x38>)
 8000f0e:	4c0a      	ldr	r4, [pc, #40]	; (8000f38 <_sbrk+0x3c>)
 8000f10:	4403      	add	r3, r0
 8000f12:	1b09      	subs	r1, r1, r4
 8000f14:	428b      	cmp	r3, r1
 8000f16:	d906      	bls.n	8000f26 <_sbrk+0x2a>
  {
    errno = ENOMEM;
 8000f18:	f002 f82e 	bl	8002f78 <__errno>
 8000f1c:	230c      	movs	r3, #12
 8000f1e:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8000f20:	f04f 30ff 	mov.w	r0, #4294967295

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 8000f24:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 8000f26:	6013      	str	r3, [r2, #0]
  return (void *)prev_heap_end;
 8000f28:	e7fc      	b.n	8000f24 <_sbrk+0x28>
 8000f2a:	bf00      	nop
 8000f2c:	20000d60 	.word	0x20000d60
 8000f30:	20000d78 	.word	0x20000d78
 8000f34:	20005000 	.word	0x20005000
 8000f38:	00000400 	.word	0x00000400

08000f3c <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f3c:	4770      	bx	lr
	...

08000f40 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f40:	480c      	ldr	r0, [pc, #48]	; (8000f74 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000f42:	490d      	ldr	r1, [pc, #52]	; (8000f78 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000f44:	4a0d      	ldr	r2, [pc, #52]	; (8000f7c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000f46:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f48:	e002      	b.n	8000f50 <LoopCopyDataInit>

08000f4a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f4a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f4c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f4e:	3304      	adds	r3, #4

08000f50 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f50:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f52:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f54:	d3f9      	bcc.n	8000f4a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f56:	4a0a      	ldr	r2, [pc, #40]	; (8000f80 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000f58:	4c0a      	ldr	r4, [pc, #40]	; (8000f84 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000f5a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f5c:	e001      	b.n	8000f62 <LoopFillZerobss>

08000f5e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f5e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f60:	3204      	adds	r2, #4

08000f62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f62:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f64:	d3fb      	bcc.n	8000f5e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000f66:	f7ff ffe9 	bl	8000f3c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f6a:	f002 f80b 	bl	8002f84 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000f6e:	f7ff faa7 	bl	80004c0 <main>
  bx lr
 8000f72:	4770      	bx	lr
  ldr r0, =_sdata
 8000f74:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f78:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 8000f7c:	08004930 	.word	0x08004930
  ldr r2, =_sbss
 8000f80:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 8000f84:	20000d78 	.word	0x20000d78

08000f88 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000f88:	e7fe      	b.n	8000f88 <ADC1_2_IRQHandler>
	...

08000f8c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f8c:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f8e:	4b0e      	ldr	r3, [pc, #56]	; (8000fc8 <HAL_InitTick+0x3c>)
{
 8000f90:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f92:	7818      	ldrb	r0, [r3, #0]
 8000f94:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f98:	fbb3 f3f0 	udiv	r3, r3, r0
 8000f9c:	4a0b      	ldr	r2, [pc, #44]	; (8000fcc <HAL_InitTick+0x40>)
 8000f9e:	6810      	ldr	r0, [r2, #0]
 8000fa0:	fbb0 f0f3 	udiv	r0, r0, r3
 8000fa4:	f000 fac6 	bl	8001534 <HAL_SYSTICK_Config>
 8000fa8:	4604      	mov	r4, r0
 8000faa:	b958      	cbnz	r0, 8000fc4 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fac:	2d0f      	cmp	r5, #15
 8000fae:	d809      	bhi.n	8000fc4 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fb0:	4602      	mov	r2, r0
 8000fb2:	4629      	mov	r1, r5
 8000fb4:	f04f 30ff 	mov.w	r0, #4294967295
 8000fb8:	f000 fa7c 	bl	80014b4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fbc:	4620      	mov	r0, r4
 8000fbe:	4b04      	ldr	r3, [pc, #16]	; (8000fd0 <HAL_InitTick+0x44>)
 8000fc0:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000fc2:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000fc4:	2001      	movs	r0, #1
 8000fc6:	e7fc      	b.n	8000fc2 <HAL_InitTick+0x36>
 8000fc8:	20000018 	.word	0x20000018
 8000fcc:	20000014 	.word	0x20000014
 8000fd0:	2000001c 	.word	0x2000001c

08000fd4 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fd4:	4a07      	ldr	r2, [pc, #28]	; (8000ff4 <HAL_Init+0x20>)
{
 8000fd6:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fd8:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fda:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fdc:	f043 0310 	orr.w	r3, r3, #16
 8000fe0:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fe2:	f000 fa55 	bl	8001490 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fe6:	200f      	movs	r0, #15
 8000fe8:	f7ff ffd0 	bl	8000f8c <HAL_InitTick>
  HAL_MspInit();
 8000fec:	f7ff fd9c 	bl	8000b28 <HAL_MspInit>
}
 8000ff0:	2000      	movs	r0, #0
 8000ff2:	bd08      	pop	{r3, pc}
 8000ff4:	40022000 	.word	0x40022000

08000ff8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000ff8:	4a03      	ldr	r2, [pc, #12]	; (8001008 <HAL_IncTick+0x10>)
 8000ffa:	4b04      	ldr	r3, [pc, #16]	; (800100c <HAL_IncTick+0x14>)
 8000ffc:	6811      	ldr	r1, [r2, #0]
 8000ffe:	781b      	ldrb	r3, [r3, #0]
 8001000:	440b      	add	r3, r1
 8001002:	6013      	str	r3, [r2, #0]
}
 8001004:	4770      	bx	lr
 8001006:	bf00      	nop
 8001008:	20000d64 	.word	0x20000d64
 800100c:	20000018 	.word	0x20000018

08001010 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001010:	4b01      	ldr	r3, [pc, #4]	; (8001018 <HAL_GetTick+0x8>)
 8001012:	6818      	ldr	r0, [r3, #0]
}
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop
 8001018:	20000d64 	.word	0x20000d64

0800101c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800101c:	b538      	push	{r3, r4, r5, lr}
 800101e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001020:	f7ff fff6 	bl	8001010 <HAL_GetTick>
 8001024:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001026:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8001028:	bf1e      	ittt	ne
 800102a:	4b04      	ldrne	r3, [pc, #16]	; (800103c <HAL_Delay+0x20>)
 800102c:	781b      	ldrbne	r3, [r3, #0]
 800102e:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001030:	f7ff ffee 	bl	8001010 <HAL_GetTick>
 8001034:	1b43      	subs	r3, r0, r5
 8001036:	42a3      	cmp	r3, r4
 8001038:	d3fa      	bcc.n	8001030 <HAL_Delay+0x14>
  {
  }
}
 800103a:	bd38      	pop	{r3, r4, r5, pc}
 800103c:	20000018 	.word	0x20000018

08001040 <ADC_DMAConvCplt>:
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001040:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 8001042:	b510      	push	{r4, lr}
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001044:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001046:	f012 0f50 	tst.w	r2, #80	; 0x50
 800104a:	d11b      	bne.n	8001084 <ADC_DMAConvCplt+0x44>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800104c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800104e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001052:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001054:	681a      	ldr	r2, [r3, #0]
 8001056:	6892      	ldr	r2, [r2, #8]
 8001058:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 800105c:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
 8001060:	d10c      	bne.n	800107c <ADC_DMAConvCplt+0x3c>
 8001062:	7b1a      	ldrb	r2, [r3, #12]
 8001064:	b952      	cbnz	r2, 800107c <ADC_DMAConvCplt+0x3c>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001066:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001068:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800106c:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800106e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001070:	04d2      	lsls	r2, r2, #19
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001072:	bf5e      	ittt	pl
 8001074:	6a9a      	ldrpl	r2, [r3, #40]	; 0x28
 8001076:	f042 0201 	orrpl.w	r2, r2, #1
 800107a:	629a      	strpl	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800107c:	4618      	mov	r0, r3
 800107e:	f7ff fd07 	bl	8000a90 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8001082:	bd10      	pop	{r4, pc}
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8001084:	6a1b      	ldr	r3, [r3, #32]
}
 8001086:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    hadc->DMA_Handle->XferErrorCallback(hdma);
 800108a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800108c:	4718      	bx	r3

0800108e <HAL_ADC_ConvHalfCpltCallback>:
 800108e:	4770      	bx	lr

08001090 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001090:	b508      	push	{r3, lr}
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001092:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8001094:	f7ff fffb 	bl	800108e <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001098:	bd08      	pop	{r3, pc}

0800109a <HAL_ADC_ErrorCallback>:
 800109a:	4770      	bx	lr

0800109c <ADC_DMAError>:
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800109c:	6a40      	ldr	r0, [r0, #36]	; 0x24
{
 800109e:	b508      	push	{r3, lr}
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80010a0:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80010a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80010a6:	6283      	str	r3, [r0, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80010a8:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80010aa:	f043 0304 	orr.w	r3, r3, #4
 80010ae:	62c3      	str	r3, [r0, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80010b0:	f7ff fff3 	bl	800109a <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80010b4:	bd08      	pop	{r3, pc}
	...

080010b8 <HAL_ADC_ConfigChannel>:
  __IO uint32_t wait_loop_index = 0U;
 80010b8:	2300      	movs	r3, #0
{ 
 80010ba:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0U;
 80010bc:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 80010be:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
{ 
 80010c2:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 80010c4:	2b01      	cmp	r3, #1
 80010c6:	d06c      	beq.n	80011a2 <HAL_ADC_ConfigChannel+0xea>
 80010c8:	2301      	movs	r3, #1
 80010ca:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  if (sConfig->Rank < 7U)
 80010ce:	684d      	ldr	r5, [r1, #4]
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80010d0:	6802      	ldr	r2, [r0, #0]
  if (sConfig->Rank < 7U)
 80010d2:	2d06      	cmp	r5, #6
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80010d4:	6808      	ldr	r0, [r1, #0]
 80010d6:	eb05 0385 	add.w	r3, r5, r5, lsl #2
  if (sConfig->Rank < 7U)
 80010da:	d822      	bhi.n	8001122 <HAL_ADC_ConfigChannel+0x6a>
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80010dc:	261f      	movs	r6, #31
 80010de:	6b55      	ldr	r5, [r2, #52]	; 0x34
 80010e0:	3b05      	subs	r3, #5
 80010e2:	409e      	lsls	r6, r3
 80010e4:	ea25 0506 	bic.w	r5, r5, r6
 80010e8:	fa00 f303 	lsl.w	r3, r0, r3
 80010ec:	432b      	orrs	r3, r5
 80010ee:	6353      	str	r3, [r2, #52]	; 0x34
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80010f0:	2809      	cmp	r0, #9
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80010f2:	688b      	ldr	r3, [r1, #8]
 80010f4:	eb00 0540 	add.w	r5, r0, r0, lsl #1
 80010f8:	f04f 0107 	mov.w	r1, #7
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80010fc:	d929      	bls.n	8001152 <HAL_ADC_ConfigChannel+0x9a>
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80010fe:	68d6      	ldr	r6, [r2, #12]
 8001100:	3d1e      	subs	r5, #30
 8001102:	40a9      	lsls	r1, r5
 8001104:	ea26 0101 	bic.w	r1, r6, r1
 8001108:	40ab      	lsls	r3, r5
 800110a:	430b      	orrs	r3, r1
 800110c:	60d3      	str	r3, [r2, #12]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800110e:	f1a0 0310 	sub.w	r3, r0, #16
 8001112:	2b01      	cmp	r3, #1
 8001114:	d925      	bls.n	8001162 <HAL_ADC_ConfigChannel+0xaa>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001116:	2000      	movs	r0, #0
  __HAL_UNLOCK(hadc);
 8001118:	2300      	movs	r3, #0
 800111a:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
}
 800111e:	b002      	add	sp, #8
 8001120:	bd70      	pop	{r4, r5, r6, pc}
  else if (sConfig->Rank < 13U)
 8001122:	2d0c      	cmp	r5, #12
 8001124:	f04f 051f 	mov.w	r5, #31
 8001128:	d809      	bhi.n	800113e <HAL_ADC_ConfigChannel+0x86>
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800112a:	6b16      	ldr	r6, [r2, #48]	; 0x30
 800112c:	3b23      	subs	r3, #35	; 0x23
 800112e:	409d      	lsls	r5, r3
 8001130:	ea26 0505 	bic.w	r5, r6, r5
 8001134:	fa00 f303 	lsl.w	r3, r0, r3
 8001138:	432b      	orrs	r3, r5
 800113a:	6313      	str	r3, [r2, #48]	; 0x30
 800113c:	e7d8      	b.n	80010f0 <HAL_ADC_ConfigChannel+0x38>
    MODIFY_REG(hadc->Instance->SQR1                        ,
 800113e:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
 8001140:	3b41      	subs	r3, #65	; 0x41
 8001142:	409d      	lsls	r5, r3
 8001144:	ea26 0505 	bic.w	r5, r6, r5
 8001148:	fa00 f303 	lsl.w	r3, r0, r3
 800114c:	432b      	orrs	r3, r5
 800114e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8001150:	e7ce      	b.n	80010f0 <HAL_ADC_ConfigChannel+0x38>
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001152:	6910      	ldr	r0, [r2, #16]
 8001154:	40a9      	lsls	r1, r5
 8001156:	ea20 0101 	bic.w	r1, r0, r1
 800115a:	40ab      	lsls	r3, r5
 800115c:	430b      	orrs	r3, r1
 800115e:	6113      	str	r3, [r2, #16]
 8001160:	e7d9      	b.n	8001116 <HAL_ADC_ConfigChannel+0x5e>
    if (hadc->Instance == ADC1)
 8001162:	4b11      	ldr	r3, [pc, #68]	; (80011a8 <HAL_ADC_ConfigChannel+0xf0>)
 8001164:	429a      	cmp	r2, r3
 8001166:	d116      	bne.n	8001196 <HAL_ADC_ConfigChannel+0xde>
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001168:	6893      	ldr	r3, [r2, #8]
 800116a:	021b      	lsls	r3, r3, #8
 800116c:	d4d3      	bmi.n	8001116 <HAL_ADC_ConfigChannel+0x5e>
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800116e:	6893      	ldr	r3, [r2, #8]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001170:	2810      	cmp	r0, #16
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001172:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001176:	6093      	str	r3, [r2, #8]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001178:	d1cd      	bne.n	8001116 <HAL_ADC_ConfigChannel+0x5e>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800117a:	4b0c      	ldr	r3, [pc, #48]	; (80011ac <HAL_ADC_ConfigChannel+0xf4>)
 800117c:	4a0c      	ldr	r2, [pc, #48]	; (80011b0 <HAL_ADC_ConfigChannel+0xf8>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	fbb3 f3f2 	udiv	r3, r3, r2
 8001184:	220a      	movs	r2, #10
 8001186:	4353      	muls	r3, r2
            wait_loop_index--;
 8001188:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 800118a:	9b01      	ldr	r3, [sp, #4]
 800118c:	2b00      	cmp	r3, #0
 800118e:	d0c2      	beq.n	8001116 <HAL_ADC_ConfigChannel+0x5e>
            wait_loop_index--;
 8001190:	9b01      	ldr	r3, [sp, #4]
 8001192:	3b01      	subs	r3, #1
 8001194:	e7f8      	b.n	8001188 <HAL_ADC_ConfigChannel+0xd0>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001196:	6aa3      	ldr	r3, [r4, #40]	; 0x28
      tmp_hal_status = HAL_ERROR;
 8001198:	2001      	movs	r0, #1
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800119a:	f043 0320 	orr.w	r3, r3, #32
 800119e:	62a3      	str	r3, [r4, #40]	; 0x28
      tmp_hal_status = HAL_ERROR;
 80011a0:	e7ba      	b.n	8001118 <HAL_ADC_ConfigChannel+0x60>
  __HAL_LOCK(hadc);
 80011a2:	2002      	movs	r0, #2
 80011a4:	e7bb      	b.n	800111e <HAL_ADC_ConfigChannel+0x66>
 80011a6:	bf00      	nop
 80011a8:	40012400 	.word	0x40012400
 80011ac:	20000014 	.word	0x20000014
 80011b0:	000f4240 	.word	0x000f4240

080011b4 <ADC_Enable>:
  __IO uint32_t wait_loop_index = 0U;
 80011b4:	2300      	movs	r3, #0
{
 80011b6:	b537      	push	{r0, r1, r2, r4, r5, lr}
  __IO uint32_t wait_loop_index = 0U;
 80011b8:	9301      	str	r3, [sp, #4]
  if (ADC_IS_ENABLE(hadc) == RESET)
 80011ba:	6803      	ldr	r3, [r0, #0]
{
 80011bc:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 80011be:	689a      	ldr	r2, [r3, #8]
 80011c0:	07d2      	lsls	r2, r2, #31
 80011c2:	d502      	bpl.n	80011ca <ADC_Enable+0x16>
  return HAL_OK;
 80011c4:	2000      	movs	r0, #0
}
 80011c6:	b003      	add	sp, #12
 80011c8:	bd30      	pop	{r4, r5, pc}
    __HAL_ADC_ENABLE(hadc);
 80011ca:	689a      	ldr	r2, [r3, #8]
 80011cc:	f042 0201 	orr.w	r2, r2, #1
 80011d0:	609a      	str	r2, [r3, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80011d2:	4b14      	ldr	r3, [pc, #80]	; (8001224 <ADC_Enable+0x70>)
 80011d4:	4a14      	ldr	r2, [pc, #80]	; (8001228 <ADC_Enable+0x74>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	fbb3 f3f2 	udiv	r3, r3, r2
      wait_loop_index--;
 80011dc:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 80011de:	9b01      	ldr	r3, [sp, #4]
 80011e0:	b9e3      	cbnz	r3, 800121c <ADC_Enable+0x68>
    tickstart = HAL_GetTick();
 80011e2:	f7ff ff15 	bl	8001010 <HAL_GetTick>
 80011e6:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) == RESET)
 80011e8:	6823      	ldr	r3, [r4, #0]
 80011ea:	689b      	ldr	r3, [r3, #8]
 80011ec:	07db      	lsls	r3, r3, #31
 80011ee:	d4e9      	bmi.n	80011c4 <ADC_Enable+0x10>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80011f0:	f7ff ff0e 	bl	8001010 <HAL_GetTick>
 80011f4:	1b40      	subs	r0, r0, r5
 80011f6:	2802      	cmp	r0, #2
 80011f8:	d9f6      	bls.n	80011e8 <ADC_Enable+0x34>
        if(ADC_IS_ENABLE(hadc) == RESET)
 80011fa:	6823      	ldr	r3, [r4, #0]
 80011fc:	689b      	ldr	r3, [r3, #8]
 80011fe:	f013 0301 	ands.w	r3, r3, #1
 8001202:	d1f1      	bne.n	80011e8 <ADC_Enable+0x34>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001204:	6aa2      	ldr	r2, [r4, #40]	; 0x28
          return HAL_ERROR;
 8001206:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001208:	f042 0210 	orr.w	r2, r2, #16
 800120c:	62a2      	str	r2, [r4, #40]	; 0x28
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800120e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
          __HAL_UNLOCK(hadc);
 8001210:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001214:	f042 0201 	orr.w	r2, r2, #1
 8001218:	62e2      	str	r2, [r4, #44]	; 0x2c
          return HAL_ERROR;
 800121a:	e7d4      	b.n	80011c6 <ADC_Enable+0x12>
      wait_loop_index--;
 800121c:	9b01      	ldr	r3, [sp, #4]
 800121e:	3b01      	subs	r3, #1
 8001220:	e7dc      	b.n	80011dc <ADC_Enable+0x28>
 8001222:	bf00      	nop
 8001224:	20000014 	.word	0x20000014
 8001228:	000f4240 	.word	0x000f4240

0800122c <HAL_ADC_Start_DMA>:
{
 800122c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8001230:	4b40      	ldr	r3, [pc, #256]	; (8001334 <HAL_ADC_Start_DMA+0x108>)
{
 8001232:	4690      	mov	r8, r2
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8001234:	6802      	ldr	r2, [r0, #0]
{
 8001236:	4604      	mov	r4, r0
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8001238:	429a      	cmp	r2, r3
{
 800123a:	460f      	mov	r7, r1
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 800123c:	d002      	beq.n	8001244 <HAL_ADC_Start_DMA+0x18>
 800123e:	493e      	ldr	r1, [pc, #248]	; (8001338 <HAL_ADC_Start_DMA+0x10c>)
 8001240:	428a      	cmp	r2, r1
 8001242:	d103      	bne.n	800124c <HAL_ADC_Start_DMA+0x20>
 8001244:	685b      	ldr	r3, [r3, #4]
 8001246:	f413 2f70 	tst.w	r3, #983040	; 0xf0000
 800124a:	d16e      	bne.n	800132a <HAL_ADC_Start_DMA+0xfe>
    __HAL_LOCK(hadc);
 800124c:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8001250:	2b01      	cmp	r3, #1
 8001252:	d06c      	beq.n	800132e <HAL_ADC_Start_DMA+0x102>
 8001254:	2301      	movs	r3, #1
    tmp_hal_status = ADC_Enable(hadc);
 8001256:	4620      	mov	r0, r4
    __HAL_LOCK(hadc);
 8001258:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
    tmp_hal_status = ADC_Enable(hadc);
 800125c:	f7ff ffaa 	bl	80011b4 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8001260:	4606      	mov	r6, r0
 8001262:	2800      	cmp	r0, #0
 8001264:	d15d      	bne.n	8001322 <HAL_ADC_Start_DMA+0xf6>
      ADC_STATE_CLR_SET(hadc->State,
 8001266:	6aa5      	ldr	r5, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001268:	6821      	ldr	r1, [r4, #0]
 800126a:	4b33      	ldr	r3, [pc, #204]	; (8001338 <HAL_ADC_Start_DMA+0x10c>)
      ADC_STATE_CLR_SET(hadc->State,
 800126c:	f425 6570 	bic.w	r5, r5, #3840	; 0xf00
 8001270:	f025 0501 	bic.w	r5, r5, #1
 8001274:	f445 7580 	orr.w	r5, r5, #256	; 0x100
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001278:	4299      	cmp	r1, r3
      ADC_STATE_CLR_SET(hadc->State,
 800127a:	62a5      	str	r5, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800127c:	d104      	bne.n	8001288 <HAL_ADC_Start_DMA+0x5c>
 800127e:	4a2d      	ldr	r2, [pc, #180]	; (8001334 <HAL_ADC_Start_DMA+0x108>)
 8001280:	6853      	ldr	r3, [r2, #4]
 8001282:	f413 2f70 	tst.w	r3, #983040	; 0xf0000
 8001286:	d13e      	bne.n	8001306 <HAL_ADC_Start_DMA+0xda>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001288:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800128a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800128e:	62a3      	str	r3, [r4, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001290:	684b      	ldr	r3, [r1, #4]
 8001292:	055a      	lsls	r2, r3, #21
 8001294:	d505      	bpl.n	80012a2 <HAL_ADC_Start_DMA+0x76>
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001296:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001298:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800129c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80012a0:	62a3      	str	r3, [r4, #40]	; 0x28
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80012a2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80012a4:	6a20      	ldr	r0, [r4, #32]
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80012a6:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80012aa:	bf18      	it	ne
 80012ac:	6ae3      	ldrne	r3, [r4, #44]	; 0x2c
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80012ae:	463a      	mov	r2, r7
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80012b0:	bf18      	it	ne
 80012b2:	f023 0306 	bicne.w	r3, r3, #6
        ADC_CLEAR_ERRORCODE(hadc);
 80012b6:	62e3      	str	r3, [r4, #44]	; 0x2c
      __HAL_UNLOCK(hadc);
 80012b8:	2300      	movs	r3, #0
 80012ba:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80012be:	4b1f      	ldr	r3, [pc, #124]	; (800133c <HAL_ADC_Start_DMA+0x110>)
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80012c0:	314c      	adds	r1, #76	; 0x4c
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80012c2:	6283      	str	r3, [r0, #40]	; 0x28
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80012c4:	4b1e      	ldr	r3, [pc, #120]	; (8001340 <HAL_ADC_Start_DMA+0x114>)
 80012c6:	62c3      	str	r3, [r0, #44]	; 0x2c
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80012c8:	4b1e      	ldr	r3, [pc, #120]	; (8001344 <HAL_ADC_Start_DMA+0x118>)
 80012ca:	6303      	str	r3, [r0, #48]	; 0x30
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80012cc:	f06f 0302 	mvn.w	r3, #2
 80012d0:	f841 3c4c 	str.w	r3, [r1, #-76]
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80012d4:	f851 3c44 	ldr.w	r3, [r1, #-68]
 80012d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012dc:	f841 3c44 	str.w	r3, [r1, #-68]
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80012e0:	4643      	mov	r3, r8
 80012e2:	f000 f969 	bl	80015b8 <HAL_DMA_Start_IT>
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 80012e6:	6823      	ldr	r3, [r4, #0]
 80012e8:	689a      	ldr	r2, [r3, #8]
 80012ea:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 80012ee:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80012f2:	689a      	ldr	r2, [r3, #8]
 80012f4:	bf0c      	ite	eq
 80012f6:	f442 02a0 	orreq.w	r2, r2, #5242880	; 0x500000
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80012fa:	f442 1280 	orrne.w	r2, r2, #1048576	; 0x100000
 80012fe:	609a      	str	r2, [r3, #8]
}
 8001300:	4630      	mov	r0, r6
 8001302:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001306:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001308:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800130c:	62a3      	str	r3, [r4, #40]	; 0x28
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800130e:	6853      	ldr	r3, [r2, #4]
 8001310:	055b      	lsls	r3, r3, #21
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001312:	bf41      	itttt	mi
 8001314:	6aa0      	ldrmi	r0, [r4, #40]	; 0x28
 8001316:	f420 5040 	bicmi.w	r0, r0, #12288	; 0x3000
 800131a:	f440 5080 	orrmi.w	r0, r0, #4096	; 0x1000
 800131e:	62a0      	strmi	r0, [r4, #40]	; 0x28
 8001320:	e7bf      	b.n	80012a2 <HAL_ADC_Start_DMA+0x76>
      __HAL_UNLOCK(hadc);
 8001322:	2300      	movs	r3, #0
 8001324:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 8001328:	e7ea      	b.n	8001300 <HAL_ADC_Start_DMA+0xd4>
    tmp_hal_status = HAL_ERROR;
 800132a:	2601      	movs	r6, #1
 800132c:	e7e8      	b.n	8001300 <HAL_ADC_Start_DMA+0xd4>
    __HAL_LOCK(hadc);
 800132e:	2602      	movs	r6, #2
 8001330:	e7e6      	b.n	8001300 <HAL_ADC_Start_DMA+0xd4>
 8001332:	bf00      	nop
 8001334:	40012400 	.word	0x40012400
 8001338:	40012800 	.word	0x40012800
 800133c:	08001041 	.word	0x08001041
 8001340:	08001091 	.word	0x08001091
 8001344:	0800109d 	.word	0x0800109d

08001348 <ADC_ConversionStop_Disable>:
{
 8001348:	b538      	push	{r3, r4, r5, lr}
  if (ADC_IS_ENABLE(hadc) != RESET)
 800134a:	6803      	ldr	r3, [r0, #0]
{
 800134c:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET)
 800134e:	689a      	ldr	r2, [r3, #8]
 8001350:	07d1      	lsls	r1, r2, #31
 8001352:	d401      	bmi.n	8001358 <ADC_ConversionStop_Disable+0x10>
  return HAL_OK;
 8001354:	2000      	movs	r0, #0
}
 8001356:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_ADC_DISABLE(hadc);
 8001358:	689a      	ldr	r2, [r3, #8]
 800135a:	f022 0201 	bic.w	r2, r2, #1
 800135e:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8001360:	f7ff fe56 	bl	8001010 <HAL_GetTick>
 8001364:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001366:	6823      	ldr	r3, [r4, #0]
 8001368:	689b      	ldr	r3, [r3, #8]
 800136a:	07db      	lsls	r3, r3, #31
 800136c:	d5f2      	bpl.n	8001354 <ADC_ConversionStop_Disable+0xc>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800136e:	f7ff fe4f 	bl	8001010 <HAL_GetTick>
 8001372:	1b40      	subs	r0, r0, r5
 8001374:	2802      	cmp	r0, #2
 8001376:	d9f6      	bls.n	8001366 <ADC_ConversionStop_Disable+0x1e>
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001378:	6823      	ldr	r3, [r4, #0]
 800137a:	689b      	ldr	r3, [r3, #8]
 800137c:	07da      	lsls	r2, r3, #31
 800137e:	d5f2      	bpl.n	8001366 <ADC_ConversionStop_Disable+0x1e>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001380:	6aa3      	ldr	r3, [r4, #40]	; 0x28
          return HAL_ERROR;
 8001382:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001384:	f043 0310 	orr.w	r3, r3, #16
 8001388:	62a3      	str	r3, [r4, #40]	; 0x28
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800138a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800138c:	f043 0301 	orr.w	r3, r3, #1
 8001390:	62e3      	str	r3, [r4, #44]	; 0x2c
          return HAL_ERROR;
 8001392:	e7e0      	b.n	8001356 <ADC_ConversionStop_Disable+0xe>

08001394 <HAL_ADC_Init>:
{
 8001394:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(hadc == NULL)
 8001396:	4604      	mov	r4, r0
 8001398:	2800      	cmp	r0, #0
 800139a:	d06e      	beq.n	800147a <HAL_ADC_Init+0xe6>
  if (hadc->State == HAL_ADC_STATE_RESET)
 800139c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800139e:	b923      	cbnz	r3, 80013aa <HAL_ADC_Init+0x16>
    ADC_CLEAR_ERRORCODE(hadc);
 80013a0:	62c3      	str	r3, [r0, #44]	; 0x2c
    hadc->Lock = HAL_UNLOCKED;
 80013a2:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    HAL_ADC_MspInit(hadc);
 80013a6:	f7ff fbe1 	bl	8000b6c <HAL_ADC_MspInit>
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80013aa:	4620      	mov	r0, r4
 80013ac:	f7ff ffcc 	bl	8001348 <ADC_ConversionStop_Disable>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80013b0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80013b2:	f013 0310 	ands.w	r3, r3, #16
 80013b6:	d162      	bne.n	800147e <HAL_ADC_Init+0xea>
 80013b8:	2800      	cmp	r0, #0
 80013ba:	d160      	bne.n	800147e <HAL_ADC_Init+0xea>
    ADC_STATE_CLR_SET(hadc->State,
 80013bc:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80013be:	69e5      	ldr	r5, [r4, #28]
 80013c0:	6861      	ldr	r1, [r4, #4]
    ADC_STATE_CLR_SET(hadc->State,
 80013c2:	f422 5288 	bic.w	r2, r2, #4352	; 0x1100
 80013c6:	f022 0202 	bic.w	r2, r2, #2
 80013ca:	f042 0202 	orr.w	r2, r2, #2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80013ce:	4329      	orrs	r1, r5
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80013d0:	68a5      	ldr	r5, [r4, #8]
    ADC_STATE_CLR_SET(hadc->State,
 80013d2:	62a2      	str	r2, [r4, #40]	; 0x28
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80013d4:	7b22      	ldrb	r2, [r4, #12]
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80013d6:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80013da:	ea41 0142 	orr.w	r1, r1, r2, lsl #1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80013de:	d037      	beq.n	8001450 <HAL_ADC_Init+0xbc>
 80013e0:	2d01      	cmp	r5, #1
 80013e2:	bf14      	ite	ne
 80013e4:	2700      	movne	r7, #0
 80013e6:	f44f 7780 	moveq.w	r7, #256	; 0x100
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80013ea:	7d26      	ldrb	r6, [r4, #20]
 80013ec:	2e01      	cmp	r6, #1
 80013ee:	d106      	bne.n	80013fe <HAL_ADC_Init+0x6a>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80013f0:	bb82      	cbnz	r2, 8001454 <HAL_ADC_Init+0xc0>
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80013f2:	69a2      	ldr	r2, [r4, #24]
 80013f4:	3a01      	subs	r2, #1
 80013f6:	ea47 3642 	orr.w	r6, r7, r2, lsl #13
 80013fa:	f446 6700 	orr.w	r7, r6, #2048	; 0x800
      MODIFY_REG(hadc->Instance->CR1,
 80013fe:	6822      	ldr	r2, [r4, #0]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001400:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
      MODIFY_REG(hadc->Instance->CR1,
 8001404:	6856      	ldr	r6, [r2, #4]
 8001406:	f426 4669 	bic.w	r6, r6, #59648	; 0xe900
 800140a:	ea46 0607 	orr.w	r6, r6, r7
 800140e:	6056      	str	r6, [r2, #4]
      MODIFY_REG(hadc->Instance->CR2,
 8001410:	6897      	ldr	r7, [r2, #8]
 8001412:	4e1d      	ldr	r6, [pc, #116]	; (8001488 <HAL_ADC_Init+0xf4>)
 8001414:	ea06 0607 	and.w	r6, r6, r7
 8001418:	ea46 0601 	orr.w	r6, r6, r1
 800141c:	6096      	str	r6, [r2, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800141e:	d001      	beq.n	8001424 <HAL_ADC_Init+0x90>
 8001420:	2d01      	cmp	r5, #1
 8001422:	d102      	bne.n	800142a <HAL_ADC_Init+0x96>
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001424:	6923      	ldr	r3, [r4, #16]
 8001426:	3b01      	subs	r3, #1
 8001428:	051b      	lsls	r3, r3, #20
    MODIFY_REG(hadc->Instance->SQR1,
 800142a:	6ad5      	ldr	r5, [r2, #44]	; 0x2c
 800142c:	f425 0570 	bic.w	r5, r5, #15728640	; 0xf00000
 8001430:	432b      	orrs	r3, r5
 8001432:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001434:	6892      	ldr	r2, [r2, #8]
 8001436:	4b15      	ldr	r3, [pc, #84]	; (800148c <HAL_ADC_Init+0xf8>)
 8001438:	4013      	ands	r3, r2
 800143a:	4299      	cmp	r1, r3
 800143c:	d113      	bne.n	8001466 <HAL_ADC_Init+0xd2>
      ADC_CLEAR_ERRORCODE(hadc);
 800143e:	2300      	movs	r3, #0
 8001440:	62e3      	str	r3, [r4, #44]	; 0x2c
      ADC_STATE_CLR_SET(hadc->State,
 8001442:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001444:	f023 0303 	bic.w	r3, r3, #3
 8001448:	f043 0301 	orr.w	r3, r3, #1
 800144c:	62a3      	str	r3, [r4, #40]	; 0x28
}
 800144e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001450:	462f      	mov	r7, r5
 8001452:	e7ca      	b.n	80013ea <HAL_ADC_Init+0x56>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001454:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001456:	f042 0220 	orr.w	r2, r2, #32
 800145a:	62a2      	str	r2, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800145c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800145e:	f042 0201 	orr.w	r2, r2, #1
 8001462:	62e2      	str	r2, [r4, #44]	; 0x2c
 8001464:	e7cb      	b.n	80013fe <HAL_ADC_Init+0x6a>
      ADC_STATE_CLR_SET(hadc->State,
 8001466:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001468:	f023 0312 	bic.w	r3, r3, #18
 800146c:	f043 0310 	orr.w	r3, r3, #16
 8001470:	62a3      	str	r3, [r4, #40]	; 0x28
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001472:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001474:	f043 0301 	orr.w	r3, r3, #1
 8001478:	62e3      	str	r3, [r4, #44]	; 0x2c
    return HAL_ERROR;
 800147a:	2001      	movs	r0, #1
 800147c:	e7e7      	b.n	800144e <HAL_ADC_Init+0xba>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800147e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001480:	f043 0310 	orr.w	r3, r3, #16
 8001484:	62a3      	str	r3, [r4, #40]	; 0x28
    tmp_hal_status = HAL_ERROR;
 8001486:	e7f8      	b.n	800147a <HAL_ADC_Init+0xe6>
 8001488:	ffe1f7fd 	.word	0xffe1f7fd
 800148c:	ff1f0efe 	.word	0xff1f0efe

08001490 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001490:	4907      	ldr	r1, [pc, #28]	; (80014b0 <HAL_NVIC_SetPriorityGrouping+0x20>)
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001492:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001494:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001496:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800149a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800149e:	0412      	lsls	r2, r2, #16
 80014a0:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014a4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80014a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 80014ac:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80014ae:	4770      	bx	lr
 80014b0:	e000ed00 	.word	0xe000ed00

080014b4 <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014b4:	4b16      	ldr	r3, [pc, #88]	; (8001510 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014b6:	b530      	push	{r4, r5, lr}
 80014b8:	68dc      	ldr	r4, [r3, #12]
 80014ba:	f3c4 2402 	ubfx	r4, r4, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014be:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014c2:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014c4:	2b04      	cmp	r3, #4
 80014c6:	bf28      	it	cs
 80014c8:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014ca:	2d06      	cmp	r5, #6
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014cc:	f04f 35ff 	mov.w	r5, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014d0:	bf98      	it	ls
 80014d2:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014d4:	fa05 f303 	lsl.w	r3, r5, r3
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014d8:	bf88      	it	hi
 80014da:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014dc:	ea21 0303 	bic.w	r3, r1, r3
 80014e0:	40a3      	lsls	r3, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014e2:	fa05 f404 	lsl.w	r4, r5, r4
 80014e6:	ea22 0204 	bic.w	r2, r2, r4
  if ((int32_t)(IRQn) >= 0)
 80014ea:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014ec:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014f0:	bfac      	ite	ge
 80014f2:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014f6:	4a07      	ldrlt	r2, [pc, #28]	; (8001514 <HAL_NVIC_SetPriority+0x60>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014f8:	ea4f 1303 	mov.w	r3, r3, lsl #4
 80014fc:	b2db      	uxtb	r3, r3
 80014fe:	bfab      	itete	ge
 8001500:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001504:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001508:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800150c:	5413      	strblt	r3, [r2, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800150e:	bd30      	pop	{r4, r5, pc}
 8001510:	e000ed00 	.word	0xe000ed00
 8001514:	e000ed14 	.word	0xe000ed14

08001518 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001518:	2800      	cmp	r0, #0
 800151a:	db08      	blt.n	800152e <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800151c:	2301      	movs	r3, #1
 800151e:	0942      	lsrs	r2, r0, #5
 8001520:	f000 001f 	and.w	r0, r0, #31
 8001524:	fa03 f000 	lsl.w	r0, r3, r0
 8001528:	4b01      	ldr	r3, [pc, #4]	; (8001530 <HAL_NVIC_EnableIRQ+0x18>)
 800152a:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800152e:	4770      	bx	lr
 8001530:	e000e100 	.word	0xe000e100

08001534 <HAL_SYSTICK_Config>:
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001534:	3801      	subs	r0, #1
 8001536:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800153a:	d20b      	bcs.n	8001554 <HAL_SYSTICK_Config+0x20>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800153c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001540:	21f0      	movs	r1, #240	; 0xf0
 8001542:	4a05      	ldr	r2, [pc, #20]	; (8001558 <HAL_SYSTICK_Config+0x24>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001544:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001546:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800154a:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800154c:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800154e:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001550:	611a      	str	r2, [r3, #16]
  return (0UL);                                                     /* Function successful */
 8001552:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001554:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001556:	4770      	bx	lr
 8001558:	e000ed00 	.word	0xe000ed00

0800155c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800155c:	b510      	push	{r4, lr}
  uint32_t tmp = 0U;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800155e:	b320      	cbz	r0, 80015aa <HAL_DMA_Init+0x4e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001560:	2214      	movs	r2, #20
 8001562:	6801      	ldr	r1, [r0, #0]
 8001564:	4b12      	ldr	r3, [pc, #72]	; (80015b0 <HAL_DMA_Init+0x54>)
 8001566:	440b      	add	r3, r1
 8001568:	fbb3 f3f2 	udiv	r3, r3, r2
 800156c:	009b      	lsls	r3, r3, #2
 800156e:	6403      	str	r3, [r0, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001570:	4b10      	ldr	r3, [pc, #64]	; (80015b4 <HAL_DMA_Init+0x58>)

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001572:	680a      	ldr	r2, [r1, #0]
  hdma->DmaBaseAddress = DMA1;
 8001574:	63c3      	str	r3, [r0, #60]	; 0x3c
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001576:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
 800157a:	4323      	orrs	r3, r4
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800157c:	68c4      	ldr	r4, [r0, #12]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800157e:	f422 527f 	bic.w	r2, r2, #16320	; 0x3fc0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001582:	4323      	orrs	r3, r4
 8001584:	6904      	ldr	r4, [r0, #16]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001586:	f022 0230 	bic.w	r2, r2, #48	; 0x30
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800158a:	4323      	orrs	r3, r4
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800158c:	6944      	ldr	r4, [r0, #20]
 800158e:	4323      	orrs	r3, r4
 8001590:	6984      	ldr	r4, [r0, #24]
 8001592:	4323      	orrs	r3, r4
          hdma->Init.Mode                | hdma->Init.Priority;
 8001594:	69c4      	ldr	r4, [r0, #28]
 8001596:	4323      	orrs	r3, r4
  tmp |=  hdma->Init.Direction        |
 8001598:	4313      	orrs	r3, r2

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800159a:	600b      	str	r3, [r1, #0]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800159c:	f44f 7280 	mov.w	r2, #256	; 0x100
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80015a0:	2300      	movs	r3, #0
  hdma->Lock = HAL_UNLOCKED;
 80015a2:	8402      	strh	r2, [r0, #32]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80015a4:	6383      	str	r3, [r0, #56]	; 0x38

  return HAL_OK;
 80015a6:	4618      	mov	r0, r3
}
 80015a8:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80015aa:	2001      	movs	r0, #1
 80015ac:	e7fc      	b.n	80015a8 <HAL_DMA_Init+0x4c>
 80015ae:	bf00      	nop
 80015b0:	bffdfff8 	.word	0xbffdfff8
 80015b4:	40020000 	.word	0x40020000

080015b8 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80015b8:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80015ba:	f890 4020 	ldrb.w	r4, [r0, #32]
 80015be:	2c01      	cmp	r4, #1
 80015c0:	d034      	beq.n	800162c <HAL_DMA_Start_IT+0x74>
 80015c2:	2401      	movs	r4, #1
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80015c4:	f890 5021 	ldrb.w	r5, [r0, #33]	; 0x21
  __HAL_LOCK(hdma);
 80015c8:	f880 4020 	strb.w	r4, [r0, #32]
  if(HAL_DMA_STATE_READY == hdma->State)
 80015cc:	42a5      	cmp	r5, r4
 80015ce:	f04f 0600 	mov.w	r6, #0
 80015d2:	f04f 0402 	mov.w	r4, #2
 80015d6:	d127      	bne.n	8001628 <HAL_DMA_Start_IT+0x70>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80015d8:	f880 4021 	strb.w	r4, [r0, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80015dc:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80015de:	6386      	str	r6, [r0, #56]	; 0x38
    __HAL_DMA_DISABLE(hdma);
 80015e0:	6826      	ldr	r6, [r4, #0]
 80015e2:	f026 0601 	bic.w	r6, r6, #1
 80015e6:	6026      	str	r6, [r4, #0]
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80015e8:	e9d0 670f 	ldrd	r6, r7, [r0, #60]	; 0x3c
 80015ec:	40bd      	lsls	r5, r7
 80015ee:	6075      	str	r5, [r6, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80015f0:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80015f2:	6843      	ldr	r3, [r0, #4]
 80015f4:	2b10      	cmp	r3, #16
    if(NULL != hdma->XferHalfCpltCallback)
 80015f6:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80015f8:	bf0b      	itete	eq
 80015fa:	60a2      	streq	r2, [r4, #8]
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 80015fc:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 80015fe:	60e1      	streq	r1, [r4, #12]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8001600:	60e2      	strne	r2, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback)
 8001602:	b14b      	cbz	r3, 8001618 <HAL_DMA_Start_IT+0x60>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001604:	6823      	ldr	r3, [r4, #0]
 8001606:	f043 030e 	orr.w	r3, r3, #14
  HAL_StatusTypeDef status = HAL_OK;
 800160a:	2000      	movs	r0, #0
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800160c:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 800160e:	6823      	ldr	r3, [r4, #0]
 8001610:	f043 0301 	orr.w	r3, r3, #1
 8001614:	6023      	str	r3, [r4, #0]
}
 8001616:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001618:	6823      	ldr	r3, [r4, #0]
 800161a:	f023 0304 	bic.w	r3, r3, #4
 800161e:	6023      	str	r3, [r4, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001620:	6823      	ldr	r3, [r4, #0]
 8001622:	f043 030a 	orr.w	r3, r3, #10
 8001626:	e7f0      	b.n	800160a <HAL_DMA_Start_IT+0x52>
    __HAL_UNLOCK(hdma); 
 8001628:	f880 6020 	strb.w	r6, [r0, #32]
  __HAL_LOCK(hdma);
 800162c:	2002      	movs	r0, #2
 800162e:	e7f2      	b.n	8001616 <HAL_DMA_Start_IT+0x5e>

08001630 <HAL_DMA_Abort>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001630:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 8001634:	2b02      	cmp	r3, #2
 8001636:	d006      	beq.n	8001646 <HAL_DMA_Abort+0x16>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001638:	2304      	movs	r3, #4
 800163a:	6383      	str	r3, [r0, #56]	; 0x38
    __HAL_UNLOCK(hdma);
 800163c:	2300      	movs	r3, #0
 800163e:	f880 3020 	strb.w	r3, [r0, #32]
    return HAL_ERROR;
 8001642:	2001      	movs	r0, #1
 8001644:	4770      	bx	lr
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001646:	6803      	ldr	r3, [r0, #0]
 8001648:	681a      	ldr	r2, [r3, #0]
 800164a:	f022 020e 	bic.w	r2, r2, #14
 800164e:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 8001650:	681a      	ldr	r2, [r3, #0]
 8001652:	f022 0201 	bic.w	r2, r2, #1
 8001656:	601a      	str	r2, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001658:	2301      	movs	r3, #1
 800165a:	e9d0 210f 	ldrd	r2, r1, [r0, #60]	; 0x3c
 800165e:	408b      	lsls	r3, r1
 8001660:	6053      	str	r3, [r2, #4]
  __HAL_UNLOCK(hdma);      
 8001662:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001666:	8403      	strh	r3, [r0, #32]
  return status; 
 8001668:	2000      	movs	r0, #0
}
 800166a:	4770      	bx	lr

0800166c <HAL_DMA_Abort_IT>:
{  
 800166c:	b508      	push	{r3, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800166e:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 8001672:	2b02      	cmp	r3, #2
 8001674:	d003      	beq.n	800167e <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001676:	2304      	movs	r3, #4
 8001678:	6383      	str	r3, [r0, #56]	; 0x38
    status = HAL_ERROR;
 800167a:	2001      	movs	r0, #1
}
 800167c:	bd08      	pop	{r3, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800167e:	6803      	ldr	r3, [r0, #0]
 8001680:	681a      	ldr	r2, [r3, #0]
 8001682:	f022 020e 	bic.w	r2, r2, #14
 8001686:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 8001688:	681a      	ldr	r2, [r3, #0]
 800168a:	f022 0201 	bic.w	r2, r2, #1
 800168e:	601a      	str	r2, [r3, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001690:	4a17      	ldr	r2, [pc, #92]	; (80016f0 <HAL_DMA_Abort_IT+0x84>)
 8001692:	4293      	cmp	r3, r2
 8001694:	d01c      	beq.n	80016d0 <HAL_DMA_Abort_IT+0x64>
 8001696:	3214      	adds	r2, #20
 8001698:	4293      	cmp	r3, r2
 800169a:	d01b      	beq.n	80016d4 <HAL_DMA_Abort_IT+0x68>
 800169c:	3214      	adds	r2, #20
 800169e:	4293      	cmp	r3, r2
 80016a0:	d01a      	beq.n	80016d8 <HAL_DMA_Abort_IT+0x6c>
 80016a2:	3214      	adds	r2, #20
 80016a4:	4293      	cmp	r3, r2
 80016a6:	d01a      	beq.n	80016de <HAL_DMA_Abort_IT+0x72>
 80016a8:	3214      	adds	r2, #20
 80016aa:	4293      	cmp	r3, r2
 80016ac:	d01a      	beq.n	80016e4 <HAL_DMA_Abort_IT+0x78>
 80016ae:	3214      	adds	r2, #20
 80016b0:	4293      	cmp	r3, r2
 80016b2:	bf0c      	ite	eq
 80016b4:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
 80016b8:	f04f 7380 	movne.w	r3, #16777216	; 0x1000000
 80016bc:	4a0d      	ldr	r2, [pc, #52]	; (80016f4 <HAL_DMA_Abort_IT+0x88>)
 80016be:	6053      	str	r3, [r2, #4]
    __HAL_UNLOCK(hdma);
 80016c0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80016c4:	8403      	strh	r3, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 80016c6:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80016c8:	b17b      	cbz	r3, 80016ea <HAL_DMA_Abort_IT+0x7e>
      hdma->XferAbortCallback(hdma);
 80016ca:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 80016cc:	2000      	movs	r0, #0
 80016ce:	e7d5      	b.n	800167c <HAL_DMA_Abort_IT+0x10>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80016d0:	2301      	movs	r3, #1
 80016d2:	e7f3      	b.n	80016bc <HAL_DMA_Abort_IT+0x50>
 80016d4:	2310      	movs	r3, #16
 80016d6:	e7f1      	b.n	80016bc <HAL_DMA_Abort_IT+0x50>
 80016d8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80016dc:	e7ee      	b.n	80016bc <HAL_DMA_Abort_IT+0x50>
 80016de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016e2:	e7eb      	b.n	80016bc <HAL_DMA_Abort_IT+0x50>
 80016e4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80016e8:	e7e8      	b.n	80016bc <HAL_DMA_Abort_IT+0x50>
  HAL_StatusTypeDef status = HAL_OK;
 80016ea:	4618      	mov	r0, r3
 80016ec:	e7c6      	b.n	800167c <HAL_DMA_Abort_IT+0x10>
 80016ee:	bf00      	nop
 80016f0:	40020008 	.word	0x40020008
 80016f4:	40020000 	.word	0x40020000

080016f8 <HAL_DMA_IRQHandler>:
{
 80016f8:	b470      	push	{r4, r5, r6}
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80016fa:	2504      	movs	r5, #4
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80016fc:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80016fe:	6c02      	ldr	r2, [r0, #64]	; 0x40
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001700:	6834      	ldr	r4, [r6, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8001702:	6803      	ldr	r3, [r0, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001704:	4095      	lsls	r5, r2
 8001706:	4225      	tst	r5, r4
  uint32_t source_it = hdma->Instance->CCR;
 8001708:	6819      	ldr	r1, [r3, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800170a:	d032      	beq.n	8001772 <HAL_DMA_IRQHandler+0x7a>
 800170c:	074d      	lsls	r5, r1, #29
 800170e:	d530      	bpl.n	8001772 <HAL_DMA_IRQHandler+0x7a>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001710:	681a      	ldr	r2, [r3, #0]
 8001712:	0696      	lsls	r6, r2, #26
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001714:	bf5e      	ittt	pl
 8001716:	681a      	ldrpl	r2, [r3, #0]
 8001718:	f022 0204 	bicpl.w	r2, r2, #4
 800171c:	601a      	strpl	r2, [r3, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800171e:	4a3d      	ldr	r2, [pc, #244]	; (8001814 <HAL_DMA_IRQHandler+0x11c>)
 8001720:	4293      	cmp	r3, r2
 8001722:	d019      	beq.n	8001758 <HAL_DMA_IRQHandler+0x60>
 8001724:	3214      	adds	r2, #20
 8001726:	4293      	cmp	r3, r2
 8001728:	d018      	beq.n	800175c <HAL_DMA_IRQHandler+0x64>
 800172a:	3214      	adds	r2, #20
 800172c:	4293      	cmp	r3, r2
 800172e:	d017      	beq.n	8001760 <HAL_DMA_IRQHandler+0x68>
 8001730:	3214      	adds	r2, #20
 8001732:	4293      	cmp	r3, r2
 8001734:	d017      	beq.n	8001766 <HAL_DMA_IRQHandler+0x6e>
 8001736:	3214      	adds	r2, #20
 8001738:	4293      	cmp	r3, r2
 800173a:	d017      	beq.n	800176c <HAL_DMA_IRQHandler+0x74>
 800173c:	3214      	adds	r2, #20
 800173e:	4293      	cmp	r3, r2
 8001740:	bf0c      	ite	eq
 8001742:	f44f 0380 	moveq.w	r3, #4194304	; 0x400000
 8001746:	f04f 6380 	movne.w	r3, #67108864	; 0x4000000
 800174a:	4a33      	ldr	r2, [pc, #204]	; (8001818 <HAL_DMA_IRQHandler+0x120>)
 800174c:	6053      	str	r3, [r2, #4]
    if(hdma->XferHalfCpltCallback != NULL)
 800174e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    if (hdma->XferErrorCallback != NULL)
 8001750:	2b00      	cmp	r3, #0
 8001752:	d05c      	beq.n	800180e <HAL_DMA_IRQHandler+0x116>
}
 8001754:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 8001756:	4718      	bx	r3
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001758:	2304      	movs	r3, #4
 800175a:	e7f6      	b.n	800174a <HAL_DMA_IRQHandler+0x52>
 800175c:	2340      	movs	r3, #64	; 0x40
 800175e:	e7f4      	b.n	800174a <HAL_DMA_IRQHandler+0x52>
 8001760:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001764:	e7f1      	b.n	800174a <HAL_DMA_IRQHandler+0x52>
 8001766:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800176a:	e7ee      	b.n	800174a <HAL_DMA_IRQHandler+0x52>
 800176c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001770:	e7eb      	b.n	800174a <HAL_DMA_IRQHandler+0x52>
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001772:	2502      	movs	r5, #2
 8001774:	4095      	lsls	r5, r2
 8001776:	4225      	tst	r5, r4
 8001778:	d035      	beq.n	80017e6 <HAL_DMA_IRQHandler+0xee>
 800177a:	078d      	lsls	r5, r1, #30
 800177c:	d533      	bpl.n	80017e6 <HAL_DMA_IRQHandler+0xee>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800177e:	681a      	ldr	r2, [r3, #0]
 8001780:	0694      	lsls	r4, r2, #26
 8001782:	d406      	bmi.n	8001792 <HAL_DMA_IRQHandler+0x9a>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001784:	681a      	ldr	r2, [r3, #0]
 8001786:	f022 020a 	bic.w	r2, r2, #10
 800178a:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 800178c:	2201      	movs	r2, #1
 800178e:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001792:	4a20      	ldr	r2, [pc, #128]	; (8001814 <HAL_DMA_IRQHandler+0x11c>)
 8001794:	4293      	cmp	r3, r2
 8001796:	d019      	beq.n	80017cc <HAL_DMA_IRQHandler+0xd4>
 8001798:	3214      	adds	r2, #20
 800179a:	4293      	cmp	r3, r2
 800179c:	d018      	beq.n	80017d0 <HAL_DMA_IRQHandler+0xd8>
 800179e:	3214      	adds	r2, #20
 80017a0:	4293      	cmp	r3, r2
 80017a2:	d017      	beq.n	80017d4 <HAL_DMA_IRQHandler+0xdc>
 80017a4:	3214      	adds	r2, #20
 80017a6:	4293      	cmp	r3, r2
 80017a8:	d017      	beq.n	80017da <HAL_DMA_IRQHandler+0xe2>
 80017aa:	3214      	adds	r2, #20
 80017ac:	4293      	cmp	r3, r2
 80017ae:	d017      	beq.n	80017e0 <HAL_DMA_IRQHandler+0xe8>
 80017b0:	3214      	adds	r2, #20
 80017b2:	4293      	cmp	r3, r2
 80017b4:	bf0c      	ite	eq
 80017b6:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
 80017ba:	f04f 7300 	movne.w	r3, #33554432	; 0x2000000
 80017be:	4a16      	ldr	r2, [pc, #88]	; (8001818 <HAL_DMA_IRQHandler+0x120>)
 80017c0:	6053      	str	r3, [r2, #4]
    __HAL_UNLOCK(hdma);
 80017c2:	2300      	movs	r3, #0
 80017c4:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferCpltCallback != NULL)
 80017c8:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80017ca:	e7c1      	b.n	8001750 <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80017cc:	2302      	movs	r3, #2
 80017ce:	e7f6      	b.n	80017be <HAL_DMA_IRQHandler+0xc6>
 80017d0:	2320      	movs	r3, #32
 80017d2:	e7f4      	b.n	80017be <HAL_DMA_IRQHandler+0xc6>
 80017d4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80017d8:	e7f1      	b.n	80017be <HAL_DMA_IRQHandler+0xc6>
 80017da:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80017de:	e7ee      	b.n	80017be <HAL_DMA_IRQHandler+0xc6>
 80017e0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80017e4:	e7eb      	b.n	80017be <HAL_DMA_IRQHandler+0xc6>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80017e6:	2508      	movs	r5, #8
 80017e8:	4095      	lsls	r5, r2
 80017ea:	4225      	tst	r5, r4
 80017ec:	d00f      	beq.n	800180e <HAL_DMA_IRQHandler+0x116>
 80017ee:	0709      	lsls	r1, r1, #28
 80017f0:	d50d      	bpl.n	800180e <HAL_DMA_IRQHandler+0x116>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80017f2:	6819      	ldr	r1, [r3, #0]
 80017f4:	f021 010e 	bic.w	r1, r1, #14
 80017f8:	6019      	str	r1, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80017fa:	2301      	movs	r3, #1
 80017fc:	fa03 f202 	lsl.w	r2, r3, r2
 8001800:	6072      	str	r2, [r6, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001802:	6383      	str	r3, [r0, #56]	; 0x38
    __HAL_UNLOCK(hdma);
 8001804:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001808:	8403      	strh	r3, [r0, #32]
    if (hdma->XferErrorCallback != NULL)
 800180a:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800180c:	e7a0      	b.n	8001750 <HAL_DMA_IRQHandler+0x58>
}
 800180e:	bc70      	pop	{r4, r5, r6}
 8001810:	4770      	bx	lr
 8001812:	bf00      	nop
 8001814:	40020008 	.word	0x40020008
 8001818:	40020000 	.word	0x40020000

0800181c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800181c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001820:	2200      	movs	r2, #0
  uint32_t position = 0x00u;
 8001822:	4616      	mov	r6, r2
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001824:	4f64      	ldr	r7, [pc, #400]	; (80019b8 <HAL_GPIO_Init+0x19c>)
 8001826:	4b65      	ldr	r3, [pc, #404]	; (80019bc <HAL_GPIO_Init+0x1a0>)
      switch (GPIO_Init->Mode)
 8001828:	f8df c194 	ldr.w	ip, [pc, #404]	; 80019c0 <HAL_GPIO_Init+0x1a4>
 800182c:	f8df e194 	ldr.w	lr, [pc, #404]	; 80019c4 <HAL_GPIO_Init+0x1a8>
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001830:	680d      	ldr	r5, [r1, #0]
 8001832:	fa35 f406 	lsrs.w	r4, r5, r6
 8001836:	d102      	bne.n	800183e <HAL_GPIO_Init+0x22>
      }
    }

	position++;
  }
}
 8001838:	b003      	add	sp, #12
 800183a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ioposition = (0x01uL << position);
 800183e:	f04f 0801 	mov.w	r8, #1
 8001842:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001846:	ea05 0408 	and.w	r4, r5, r8
    if (iocurrent == ioposition)
 800184a:	ea38 0505 	bics.w	r5, r8, r5
 800184e:	d17b      	bne.n	8001948 <HAL_GPIO_Init+0x12c>
      switch (GPIO_Init->Mode)
 8001850:	684d      	ldr	r5, [r1, #4]
 8001852:	2d03      	cmp	r5, #3
 8001854:	d807      	bhi.n	8001866 <HAL_GPIO_Init+0x4a>
 8001856:	3d01      	subs	r5, #1
 8001858:	2d02      	cmp	r5, #2
 800185a:	f200 8088 	bhi.w	800196e <HAL_GPIO_Init+0x152>
 800185e:	e8df f005 	tbb	[pc, r5]
 8001862:	9b96      	.short	0x9b96
 8001864:	a1          	.byte	0xa1
 8001865:	00          	.byte	0x00
 8001866:	2d12      	cmp	r5, #18
 8001868:	f000 8099 	beq.w	800199e <HAL_GPIO_Init+0x182>
 800186c:	d86e      	bhi.n	800194c <HAL_GPIO_Init+0x130>
 800186e:	2d11      	cmp	r5, #17
 8001870:	f000 808f 	beq.w	8001992 <HAL_GPIO_Init+0x176>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001874:	2cff      	cmp	r4, #255	; 0xff
 8001876:	bf98      	it	ls
 8001878:	4682      	movls	sl, r0
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800187a:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800187e:	bf88      	it	hi
 8001880:	f100 0a04 	addhi.w	sl, r0, #4
 8001884:	ea4f 0586 	mov.w	r5, r6, lsl #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001888:	f8da 8000 	ldr.w	r8, [sl]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800188c:	bf88      	it	hi
 800188e:	3d20      	subhi	r5, #32
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001890:	fa09 fb05 	lsl.w	fp, r9, r5
 8001894:	ea28 080b 	bic.w	r8, r8, fp
 8001898:	fa02 f505 	lsl.w	r5, r2, r5
 800189c:	ea48 0505 	orr.w	r5, r8, r5
 80018a0:	f8ca 5000 	str.w	r5, [sl]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80018a4:	f8d1 a004 	ldr.w	sl, [r1, #4]
 80018a8:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 80018ac:	d04c      	beq.n	8001948 <HAL_GPIO_Init+0x12c>
        __HAL_RCC_AFIO_CLK_ENABLE();
 80018ae:	69bd      	ldr	r5, [r7, #24]
 80018b0:	f026 0803 	bic.w	r8, r6, #3
 80018b4:	f045 0501 	orr.w	r5, r5, #1
 80018b8:	61bd      	str	r5, [r7, #24]
 80018ba:	69bd      	ldr	r5, [r7, #24]
 80018bc:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 80018c0:	f005 0501 	and.w	r5, r5, #1
 80018c4:	9501      	str	r5, [sp, #4]
 80018c6:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80018ca:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 80018ce:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80018d0:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2u];
 80018d4:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80018d8:	fa09 f90b 	lsl.w	r9, r9, fp
 80018dc:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80018e0:	4d39      	ldr	r5, [pc, #228]	; (80019c8 <HAL_GPIO_Init+0x1ac>)
 80018e2:	42a8      	cmp	r0, r5
 80018e4:	d062      	beq.n	80019ac <HAL_GPIO_Init+0x190>
 80018e6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80018ea:	42a8      	cmp	r0, r5
 80018ec:	d060      	beq.n	80019b0 <HAL_GPIO_Init+0x194>
 80018ee:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80018f2:	42a8      	cmp	r0, r5
 80018f4:	d05e      	beq.n	80019b4 <HAL_GPIO_Init+0x198>
 80018f6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80018fa:	42a8      	cmp	r0, r5
 80018fc:	bf0c      	ite	eq
 80018fe:	2503      	moveq	r5, #3
 8001900:	2504      	movne	r5, #4
 8001902:	fa05 f50b 	lsl.w	r5, r5, fp
 8001906:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2u] = temp;
 800190a:	f8c8 5008 	str.w	r5, [r8, #8]
          SET_BIT(EXTI->IMR, iocurrent);
 800190e:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001910:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 8001914:	bf14      	ite	ne
 8001916:	4325      	orrne	r5, r4
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001918:	43a5      	biceq	r5, r4
 800191a:	601d      	str	r5, [r3, #0]
          SET_BIT(EXTI->EMR, iocurrent);
 800191c:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800191e:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 8001922:	bf14      	ite	ne
 8001924:	4325      	orrne	r5, r4
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001926:	43a5      	biceq	r5, r4
 8001928:	605d      	str	r5, [r3, #4]
          SET_BIT(EXTI->RTSR, iocurrent);
 800192a:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800192c:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8001930:	bf14      	ite	ne
 8001932:	4325      	orrne	r5, r4
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001934:	43a5      	biceq	r5, r4
 8001936:	609d      	str	r5, [r3, #8]
          SET_BIT(EXTI->FTSR, iocurrent);
 8001938:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800193a:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 800193e:	bf14      	ite	ne
 8001940:	432c      	orrne	r4, r5
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001942:	ea25 0404 	biceq.w	r4, r5, r4
 8001946:	60dc      	str	r4, [r3, #12]
	position++;
 8001948:	3601      	adds	r6, #1
 800194a:	e771      	b.n	8001830 <HAL_GPIO_Init+0x14>
      switch (GPIO_Init->Mode)
 800194c:	f8df 907c 	ldr.w	r9, [pc, #124]	; 80019cc <HAL_GPIO_Init+0x1b0>
 8001950:	454d      	cmp	r5, r9
 8001952:	d00c      	beq.n	800196e <HAL_GPIO_Init+0x152>
 8001954:	d817      	bhi.n	8001986 <HAL_GPIO_Init+0x16a>
 8001956:	f5a9 1980 	sub.w	r9, r9, #1048576	; 0x100000
 800195a:	454d      	cmp	r5, r9
 800195c:	d007      	beq.n	800196e <HAL_GPIO_Init+0x152>
 800195e:	f509 2970 	add.w	r9, r9, #983040	; 0xf0000
 8001962:	454d      	cmp	r5, r9
 8001964:	d003      	beq.n	800196e <HAL_GPIO_Init+0x152>
 8001966:	f5a9 1980 	sub.w	r9, r9, #1048576	; 0x100000
 800196a:	454d      	cmp	r5, r9
 800196c:	d182      	bne.n	8001874 <HAL_GPIO_Init+0x58>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800196e:	688a      	ldr	r2, [r1, #8]
 8001970:	b1d2      	cbz	r2, 80019a8 <HAL_GPIO_Init+0x18c>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001972:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 8001974:	bf08      	it	eq
 8001976:	f8c0 8010 	streq.w	r8, [r0, #16]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800197a:	f04f 0208 	mov.w	r2, #8
            GPIOx->BRR = ioposition;
 800197e:	bf18      	it	ne
 8001980:	f8c0 8014 	strne.w	r8, [r0, #20]
 8001984:	e776      	b.n	8001874 <HAL_GPIO_Init+0x58>
      switch (GPIO_Init->Mode)
 8001986:	4565      	cmp	r5, ip
 8001988:	d0f1      	beq.n	800196e <HAL_GPIO_Init+0x152>
 800198a:	4575      	cmp	r5, lr
 800198c:	e7ee      	b.n	800196c <HAL_GPIO_Init+0x150>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800198e:	68ca      	ldr	r2, [r1, #12]
          break;
 8001990:	e770      	b.n	8001874 <HAL_GPIO_Init+0x58>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001992:	68ca      	ldr	r2, [r1, #12]
 8001994:	3204      	adds	r2, #4
          break;
 8001996:	e76d      	b.n	8001874 <HAL_GPIO_Init+0x58>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001998:	68ca      	ldr	r2, [r1, #12]
 800199a:	3208      	adds	r2, #8
          break;
 800199c:	e76a      	b.n	8001874 <HAL_GPIO_Init+0x58>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800199e:	68ca      	ldr	r2, [r1, #12]
 80019a0:	320c      	adds	r2, #12
          break;
 80019a2:	e767      	b.n	8001874 <HAL_GPIO_Init+0x58>
      switch (GPIO_Init->Mode)
 80019a4:	2200      	movs	r2, #0
 80019a6:	e765      	b.n	8001874 <HAL_GPIO_Init+0x58>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80019a8:	2204      	movs	r2, #4
 80019aa:	e763      	b.n	8001874 <HAL_GPIO_Init+0x58>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80019ac:	2500      	movs	r5, #0
 80019ae:	e7a8      	b.n	8001902 <HAL_GPIO_Init+0xe6>
 80019b0:	2501      	movs	r5, #1
 80019b2:	e7a6      	b.n	8001902 <HAL_GPIO_Init+0xe6>
 80019b4:	2502      	movs	r5, #2
 80019b6:	e7a4      	b.n	8001902 <HAL_GPIO_Init+0xe6>
 80019b8:	40021000 	.word	0x40021000
 80019bc:	40010400 	.word	0x40010400
 80019c0:	10310000 	.word	0x10310000
 80019c4:	10320000 	.word	0x10320000
 80019c8:	40010800 	.word	0x40010800
 80019cc:	10220000 	.word	0x10220000

080019d0 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80019d0:	b10a      	cbz	r2, 80019d6 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80019d2:	6101      	str	r1, [r0, #16]
  }
}
 80019d4:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80019d6:	0409      	lsls	r1, r1, #16
 80019d8:	e7fb      	b.n	80019d2 <HAL_GPIO_WritePin+0x2>
	...

080019dc <HAL_PWR_EnableBkUpAccess>:
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 80019dc:	2201      	movs	r2, #1
 80019de:	4b01      	ldr	r3, [pc, #4]	; (80019e4 <HAL_PWR_EnableBkUpAccess+0x8>)
 80019e0:	621a      	str	r2, [r3, #32]
}
 80019e2:	4770      	bx	lr
 80019e4:	420e0000 	.word	0x420e0000

080019e8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80019e8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80019ec:	4605      	mov	r5, r0
 80019ee:	b338      	cbz	r0, 8001a40 <HAL_RCC_OscConfig+0x58>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80019f0:	6803      	ldr	r3, [r0, #0]
 80019f2:	07db      	lsls	r3, r3, #31
 80019f4:	d410      	bmi.n	8001a18 <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019f6:	682b      	ldr	r3, [r5, #0]
 80019f8:	079f      	lsls	r7, r3, #30
 80019fa:	d45e      	bmi.n	8001aba <HAL_RCC_OscConfig+0xd2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80019fc:	682b      	ldr	r3, [r5, #0]
 80019fe:	0719      	lsls	r1, r3, #28
 8001a00:	f100 8095 	bmi.w	8001b2e <HAL_RCC_OscConfig+0x146>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a04:	682b      	ldr	r3, [r5, #0]
 8001a06:	075a      	lsls	r2, r3, #29
 8001a08:	f100 80c1 	bmi.w	8001b8e <HAL_RCC_OscConfig+0x1a6>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a0c:	69e8      	ldr	r0, [r5, #28]
 8001a0e:	2800      	cmp	r0, #0
 8001a10:	f040 812c 	bne.w	8001c6c <HAL_RCC_OscConfig+0x284>
        }
      }
    }
  }

  return HAL_OK;
 8001a14:	2000      	movs	r0, #0
 8001a16:	e029      	b.n	8001a6c <HAL_RCC_OscConfig+0x84>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001a18:	4c90      	ldr	r4, [pc, #576]	; (8001c5c <HAL_RCC_OscConfig+0x274>)
 8001a1a:	6863      	ldr	r3, [r4, #4]
 8001a1c:	f003 030c 	and.w	r3, r3, #12
 8001a20:	2b04      	cmp	r3, #4
 8001a22:	d007      	beq.n	8001a34 <HAL_RCC_OscConfig+0x4c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001a24:	6863      	ldr	r3, [r4, #4]
 8001a26:	f003 030c 	and.w	r3, r3, #12
 8001a2a:	2b08      	cmp	r3, #8
 8001a2c:	d10a      	bne.n	8001a44 <HAL_RCC_OscConfig+0x5c>
 8001a2e:	6863      	ldr	r3, [r4, #4]
 8001a30:	03de      	lsls	r6, r3, #15
 8001a32:	d507      	bpl.n	8001a44 <HAL_RCC_OscConfig+0x5c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a34:	6823      	ldr	r3, [r4, #0]
 8001a36:	039c      	lsls	r4, r3, #14
 8001a38:	d5dd      	bpl.n	80019f6 <HAL_RCC_OscConfig+0xe>
 8001a3a:	686b      	ldr	r3, [r5, #4]
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d1da      	bne.n	80019f6 <HAL_RCC_OscConfig+0xe>
          return HAL_ERROR;
 8001a40:	2001      	movs	r0, #1
 8001a42:	e013      	b.n	8001a6c <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a44:	686b      	ldr	r3, [r5, #4]
 8001a46:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a4a:	d112      	bne.n	8001a72 <HAL_RCC_OscConfig+0x8a>
 8001a4c:	6823      	ldr	r3, [r4, #0]
 8001a4e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a52:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001a54:	f7ff fadc 	bl	8001010 <HAL_GetTick>
 8001a58:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a5a:	6823      	ldr	r3, [r4, #0]
 8001a5c:	0398      	lsls	r0, r3, #14
 8001a5e:	d4ca      	bmi.n	80019f6 <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a60:	f7ff fad6 	bl	8001010 <HAL_GetTick>
 8001a64:	1b80      	subs	r0, r0, r6
 8001a66:	2864      	cmp	r0, #100	; 0x64
 8001a68:	d9f7      	bls.n	8001a5a <HAL_RCC_OscConfig+0x72>
            return HAL_TIMEOUT;
 8001a6a:	2003      	movs	r0, #3
}
 8001a6c:	b002      	add	sp, #8
 8001a6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a72:	b99b      	cbnz	r3, 8001a9c <HAL_RCC_OscConfig+0xb4>
 8001a74:	6823      	ldr	r3, [r4, #0]
 8001a76:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a7a:	6023      	str	r3, [r4, #0]
 8001a7c:	6823      	ldr	r3, [r4, #0]
 8001a7e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a82:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001a84:	f7ff fac4 	bl	8001010 <HAL_GetTick>
 8001a88:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a8a:	6823      	ldr	r3, [r4, #0]
 8001a8c:	0399      	lsls	r1, r3, #14
 8001a8e:	d5b2      	bpl.n	80019f6 <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a90:	f7ff fabe 	bl	8001010 <HAL_GetTick>
 8001a94:	1b80      	subs	r0, r0, r6
 8001a96:	2864      	cmp	r0, #100	; 0x64
 8001a98:	d9f7      	bls.n	8001a8a <HAL_RCC_OscConfig+0xa2>
 8001a9a:	e7e6      	b.n	8001a6a <HAL_RCC_OscConfig+0x82>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a9c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001aa0:	6823      	ldr	r3, [r4, #0]
 8001aa2:	d103      	bne.n	8001aac <HAL_RCC_OscConfig+0xc4>
 8001aa4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001aa8:	6023      	str	r3, [r4, #0]
 8001aaa:	e7cf      	b.n	8001a4c <HAL_RCC_OscConfig+0x64>
 8001aac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ab0:	6023      	str	r3, [r4, #0]
 8001ab2:	6823      	ldr	r3, [r4, #0]
 8001ab4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ab8:	e7cb      	b.n	8001a52 <HAL_RCC_OscConfig+0x6a>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001aba:	4c68      	ldr	r4, [pc, #416]	; (8001c5c <HAL_RCC_OscConfig+0x274>)
 8001abc:	6863      	ldr	r3, [r4, #4]
 8001abe:	f013 0f0c 	tst.w	r3, #12
 8001ac2:	d007      	beq.n	8001ad4 <HAL_RCC_OscConfig+0xec>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001ac4:	6863      	ldr	r3, [r4, #4]
 8001ac6:	f003 030c 	and.w	r3, r3, #12
 8001aca:	2b08      	cmp	r3, #8
 8001acc:	d110      	bne.n	8001af0 <HAL_RCC_OscConfig+0x108>
 8001ace:	6863      	ldr	r3, [r4, #4]
 8001ad0:	03da      	lsls	r2, r3, #15
 8001ad2:	d40d      	bmi.n	8001af0 <HAL_RCC_OscConfig+0x108>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ad4:	6823      	ldr	r3, [r4, #0]
 8001ad6:	079b      	lsls	r3, r3, #30
 8001ad8:	d502      	bpl.n	8001ae0 <HAL_RCC_OscConfig+0xf8>
 8001ada:	692b      	ldr	r3, [r5, #16]
 8001adc:	2b01      	cmp	r3, #1
 8001ade:	d1af      	bne.n	8001a40 <HAL_RCC_OscConfig+0x58>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ae0:	6823      	ldr	r3, [r4, #0]
 8001ae2:	696a      	ldr	r2, [r5, #20]
 8001ae4:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001ae8:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001aec:	6023      	str	r3, [r4, #0]
 8001aee:	e785      	b.n	80019fc <HAL_RCC_OscConfig+0x14>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001af0:	692a      	ldr	r2, [r5, #16]
 8001af2:	4b5b      	ldr	r3, [pc, #364]	; (8001c60 <HAL_RCC_OscConfig+0x278>)
 8001af4:	b16a      	cbz	r2, 8001b12 <HAL_RCC_OscConfig+0x12a>
        __HAL_RCC_HSI_ENABLE();
 8001af6:	2201      	movs	r2, #1
 8001af8:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001afa:	f7ff fa89 	bl	8001010 <HAL_GetTick>
 8001afe:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b00:	6823      	ldr	r3, [r4, #0]
 8001b02:	079f      	lsls	r7, r3, #30
 8001b04:	d4ec      	bmi.n	8001ae0 <HAL_RCC_OscConfig+0xf8>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b06:	f7ff fa83 	bl	8001010 <HAL_GetTick>
 8001b0a:	1b80      	subs	r0, r0, r6
 8001b0c:	2802      	cmp	r0, #2
 8001b0e:	d9f7      	bls.n	8001b00 <HAL_RCC_OscConfig+0x118>
 8001b10:	e7ab      	b.n	8001a6a <HAL_RCC_OscConfig+0x82>
        __HAL_RCC_HSI_DISABLE();
 8001b12:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001b14:	f7ff fa7c 	bl	8001010 <HAL_GetTick>
 8001b18:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b1a:	6823      	ldr	r3, [r4, #0]
 8001b1c:	0798      	lsls	r0, r3, #30
 8001b1e:	f57f af6d 	bpl.w	80019fc <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b22:	f7ff fa75 	bl	8001010 <HAL_GetTick>
 8001b26:	1b80      	subs	r0, r0, r6
 8001b28:	2802      	cmp	r0, #2
 8001b2a:	d9f6      	bls.n	8001b1a <HAL_RCC_OscConfig+0x132>
 8001b2c:	e79d      	b.n	8001a6a <HAL_RCC_OscConfig+0x82>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b2e:	69aa      	ldr	r2, [r5, #24]
 8001b30:	4e4a      	ldr	r6, [pc, #296]	; (8001c5c <HAL_RCC_OscConfig+0x274>)
 8001b32:	4b4b      	ldr	r3, [pc, #300]	; (8001c60 <HAL_RCC_OscConfig+0x278>)
 8001b34:	b1e2      	cbz	r2, 8001b70 <HAL_RCC_OscConfig+0x188>
      __HAL_RCC_LSI_ENABLE();
 8001b36:	2201      	movs	r2, #1
 8001b38:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
      tickstart = HAL_GetTick();
 8001b3c:	f7ff fa68 	bl	8001010 <HAL_GetTick>
 8001b40:	4604      	mov	r4, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b42:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8001b44:	079b      	lsls	r3, r3, #30
 8001b46:	d50d      	bpl.n	8001b64 <HAL_RCC_OscConfig+0x17c>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001b48:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8001b4c:	4b45      	ldr	r3, [pc, #276]	; (8001c64 <HAL_RCC_OscConfig+0x27c>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	fbb3 f3f2 	udiv	r3, r3, r2
 8001b54:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 8001b56:	bf00      	nop
  }
  while (Delay --);
 8001b58:	9b01      	ldr	r3, [sp, #4]
 8001b5a:	1e5a      	subs	r2, r3, #1
 8001b5c:	9201      	str	r2, [sp, #4]
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d1f9      	bne.n	8001b56 <HAL_RCC_OscConfig+0x16e>
 8001b62:	e74f      	b.n	8001a04 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b64:	f7ff fa54 	bl	8001010 <HAL_GetTick>
 8001b68:	1b00      	subs	r0, r0, r4
 8001b6a:	2802      	cmp	r0, #2
 8001b6c:	d9e9      	bls.n	8001b42 <HAL_RCC_OscConfig+0x15a>
 8001b6e:	e77c      	b.n	8001a6a <HAL_RCC_OscConfig+0x82>
      __HAL_RCC_LSI_DISABLE();
 8001b70:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
      tickstart = HAL_GetTick();
 8001b74:	f7ff fa4c 	bl	8001010 <HAL_GetTick>
 8001b78:	4604      	mov	r4, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b7a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8001b7c:	079f      	lsls	r7, r3, #30
 8001b7e:	f57f af41 	bpl.w	8001a04 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b82:	f7ff fa45 	bl	8001010 <HAL_GetTick>
 8001b86:	1b00      	subs	r0, r0, r4
 8001b88:	2802      	cmp	r0, #2
 8001b8a:	d9f6      	bls.n	8001b7a <HAL_RCC_OscConfig+0x192>
 8001b8c:	e76d      	b.n	8001a6a <HAL_RCC_OscConfig+0x82>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b8e:	4c33      	ldr	r4, [pc, #204]	; (8001c5c <HAL_RCC_OscConfig+0x274>)
 8001b90:	69e3      	ldr	r3, [r4, #28]
 8001b92:	00d8      	lsls	r0, r3, #3
 8001b94:	d424      	bmi.n	8001be0 <HAL_RCC_OscConfig+0x1f8>
      pwrclkchanged = SET;
 8001b96:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b98:	69e3      	ldr	r3, [r4, #28]
 8001b9a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b9e:	61e3      	str	r3, [r4, #28]
 8001ba0:	69e3      	ldr	r3, [r4, #28]
 8001ba2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ba6:	9300      	str	r3, [sp, #0]
 8001ba8:	9b00      	ldr	r3, [sp, #0]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001baa:	4e2f      	ldr	r6, [pc, #188]	; (8001c68 <HAL_RCC_OscConfig+0x280>)
 8001bac:	6833      	ldr	r3, [r6, #0]
 8001bae:	05d9      	lsls	r1, r3, #23
 8001bb0:	d518      	bpl.n	8001be4 <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001bb2:	68eb      	ldr	r3, [r5, #12]
 8001bb4:	2b01      	cmp	r3, #1
 8001bb6:	d126      	bne.n	8001c06 <HAL_RCC_OscConfig+0x21e>
 8001bb8:	6a23      	ldr	r3, [r4, #32]
 8001bba:	f043 0301 	orr.w	r3, r3, #1
 8001bbe:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8001bc0:	f7ff fa26 	bl	8001010 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bc4:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8001bc8:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bca:	6a23      	ldr	r3, [r4, #32]
 8001bcc:	079b      	lsls	r3, r3, #30
 8001bce:	d53f      	bpl.n	8001c50 <HAL_RCC_OscConfig+0x268>
    if (pwrclkchanged == SET)
 8001bd0:	2f00      	cmp	r7, #0
 8001bd2:	f43f af1b 	beq.w	8001a0c <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001bd6:	69e3      	ldr	r3, [r4, #28]
 8001bd8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001bdc:	61e3      	str	r3, [r4, #28]
 8001bde:	e715      	b.n	8001a0c <HAL_RCC_OscConfig+0x24>
    FlagStatus       pwrclkchanged = RESET;
 8001be0:	2700      	movs	r7, #0
 8001be2:	e7e2      	b.n	8001baa <HAL_RCC_OscConfig+0x1c2>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001be4:	6833      	ldr	r3, [r6, #0]
 8001be6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bea:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8001bec:	f7ff fa10 	bl	8001010 <HAL_GetTick>
 8001bf0:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bf2:	6833      	ldr	r3, [r6, #0]
 8001bf4:	05da      	lsls	r2, r3, #23
 8001bf6:	d4dc      	bmi.n	8001bb2 <HAL_RCC_OscConfig+0x1ca>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001bf8:	f7ff fa0a 	bl	8001010 <HAL_GetTick>
 8001bfc:	eba0 0008 	sub.w	r0, r0, r8
 8001c00:	2864      	cmp	r0, #100	; 0x64
 8001c02:	d9f6      	bls.n	8001bf2 <HAL_RCC_OscConfig+0x20a>
 8001c04:	e731      	b.n	8001a6a <HAL_RCC_OscConfig+0x82>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c06:	b9ab      	cbnz	r3, 8001c34 <HAL_RCC_OscConfig+0x24c>
 8001c08:	6a23      	ldr	r3, [r4, #32]
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c0a:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c0e:	f023 0301 	bic.w	r3, r3, #1
 8001c12:	6223      	str	r3, [r4, #32]
 8001c14:	6a23      	ldr	r3, [r4, #32]
 8001c16:	f023 0304 	bic.w	r3, r3, #4
 8001c1a:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8001c1c:	f7ff f9f8 	bl	8001010 <HAL_GetTick>
 8001c20:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c22:	6a23      	ldr	r3, [r4, #32]
 8001c24:	0798      	lsls	r0, r3, #30
 8001c26:	d5d3      	bpl.n	8001bd0 <HAL_RCC_OscConfig+0x1e8>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c28:	f7ff f9f2 	bl	8001010 <HAL_GetTick>
 8001c2c:	1b80      	subs	r0, r0, r6
 8001c2e:	4540      	cmp	r0, r8
 8001c30:	d9f7      	bls.n	8001c22 <HAL_RCC_OscConfig+0x23a>
 8001c32:	e71a      	b.n	8001a6a <HAL_RCC_OscConfig+0x82>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c34:	2b05      	cmp	r3, #5
 8001c36:	6a23      	ldr	r3, [r4, #32]
 8001c38:	d103      	bne.n	8001c42 <HAL_RCC_OscConfig+0x25a>
 8001c3a:	f043 0304 	orr.w	r3, r3, #4
 8001c3e:	6223      	str	r3, [r4, #32]
 8001c40:	e7ba      	b.n	8001bb8 <HAL_RCC_OscConfig+0x1d0>
 8001c42:	f023 0301 	bic.w	r3, r3, #1
 8001c46:	6223      	str	r3, [r4, #32]
 8001c48:	6a23      	ldr	r3, [r4, #32]
 8001c4a:	f023 0304 	bic.w	r3, r3, #4
 8001c4e:	e7b6      	b.n	8001bbe <HAL_RCC_OscConfig+0x1d6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c50:	f7ff f9de 	bl	8001010 <HAL_GetTick>
 8001c54:	1b80      	subs	r0, r0, r6
 8001c56:	4540      	cmp	r0, r8
 8001c58:	d9b7      	bls.n	8001bca <HAL_RCC_OscConfig+0x1e2>
 8001c5a:	e706      	b.n	8001a6a <HAL_RCC_OscConfig+0x82>
 8001c5c:	40021000 	.word	0x40021000
 8001c60:	42420000 	.word	0x42420000
 8001c64:	20000014 	.word	0x20000014
 8001c68:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c6c:	4c2a      	ldr	r4, [pc, #168]	; (8001d18 <HAL_RCC_OscConfig+0x330>)
 8001c6e:	6863      	ldr	r3, [r4, #4]
 8001c70:	f003 030c 	and.w	r3, r3, #12
 8001c74:	2b08      	cmp	r3, #8
 8001c76:	d03e      	beq.n	8001cf6 <HAL_RCC_OscConfig+0x30e>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c78:	2200      	movs	r2, #0
 8001c7a:	4b28      	ldr	r3, [pc, #160]	; (8001d1c <HAL_RCC_OscConfig+0x334>)
 8001c7c:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8001c7e:	661a      	str	r2, [r3, #96]	; 0x60
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c80:	d12c      	bne.n	8001cdc <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 8001c82:	f7ff f9c5 	bl	8001010 <HAL_GetTick>
 8001c86:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c88:	6823      	ldr	r3, [r4, #0]
 8001c8a:	0199      	lsls	r1, r3, #6
 8001c8c:	d420      	bmi.n	8001cd0 <HAL_RCC_OscConfig+0x2e8>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001c8e:	6a2b      	ldr	r3, [r5, #32]
 8001c90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c94:	d105      	bne.n	8001ca2 <HAL_RCC_OscConfig+0x2ba>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001c96:	6862      	ldr	r2, [r4, #4]
 8001c98:	68a9      	ldr	r1, [r5, #8]
 8001c9a:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8001c9e:	430a      	orrs	r2, r1
 8001ca0:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ca2:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8001ca4:	6862      	ldr	r2, [r4, #4]
 8001ca6:	430b      	orrs	r3, r1
 8001ca8:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8001cac:	4313      	orrs	r3, r2
        __HAL_RCC_PLL_ENABLE();
 8001cae:	2201      	movs	r2, #1
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001cb0:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 8001cb2:	4b1a      	ldr	r3, [pc, #104]	; (8001d1c <HAL_RCC_OscConfig+0x334>)
 8001cb4:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 8001cb6:	f7ff f9ab 	bl	8001010 <HAL_GetTick>
 8001cba:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001cbc:	6823      	ldr	r3, [r4, #0]
 8001cbe:	019a      	lsls	r2, r3, #6
 8001cc0:	f53f aea8 	bmi.w	8001a14 <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cc4:	f7ff f9a4 	bl	8001010 <HAL_GetTick>
 8001cc8:	1b40      	subs	r0, r0, r5
 8001cca:	2802      	cmp	r0, #2
 8001ccc:	d9f6      	bls.n	8001cbc <HAL_RCC_OscConfig+0x2d4>
 8001cce:	e6cc      	b.n	8001a6a <HAL_RCC_OscConfig+0x82>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cd0:	f7ff f99e 	bl	8001010 <HAL_GetTick>
 8001cd4:	1b80      	subs	r0, r0, r6
 8001cd6:	2802      	cmp	r0, #2
 8001cd8:	d9d6      	bls.n	8001c88 <HAL_RCC_OscConfig+0x2a0>
 8001cda:	e6c6      	b.n	8001a6a <HAL_RCC_OscConfig+0x82>
        tickstart = HAL_GetTick();
 8001cdc:	f7ff f998 	bl	8001010 <HAL_GetTick>
 8001ce0:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ce2:	6823      	ldr	r3, [r4, #0]
 8001ce4:	019b      	lsls	r3, r3, #6
 8001ce6:	f57f ae95 	bpl.w	8001a14 <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cea:	f7ff f991 	bl	8001010 <HAL_GetTick>
 8001cee:	1b40      	subs	r0, r0, r5
 8001cf0:	2802      	cmp	r0, #2
 8001cf2:	d9f6      	bls.n	8001ce2 <HAL_RCC_OscConfig+0x2fa>
 8001cf4:	e6b9      	b.n	8001a6a <HAL_RCC_OscConfig+0x82>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001cf6:	2801      	cmp	r0, #1
 8001cf8:	f43f aeb8 	beq.w	8001a6c <HAL_RCC_OscConfig+0x84>
        pll_config = RCC->CFGR;
 8001cfc:	6863      	ldr	r3, [r4, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cfe:	6a2a      	ldr	r2, [r5, #32]
 8001d00:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 8001d04:	4291      	cmp	r1, r2
 8001d06:	f47f ae9b 	bne.w	8001a40 <HAL_RCC_OscConfig+0x58>
 8001d0a:	6a6a      	ldr	r2, [r5, #36]	; 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001d0c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d10:	4293      	cmp	r3, r2
 8001d12:	f43f ae7f 	beq.w	8001a14 <HAL_RCC_OscConfig+0x2c>
 8001d16:	e693      	b.n	8001a40 <HAL_RCC_OscConfig+0x58>
 8001d18:	40021000 	.word	0x40021000
 8001d1c:	42420000 	.word	0x42420000

08001d20 <HAL_RCC_GetSysClockFreq>:
{
 8001d20:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001d22:	4b18      	ldr	r3, [pc, #96]	; (8001d84 <HAL_RCC_GetSysClockFreq+0x64>)
{
 8001d24:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001d26:	ac02      	add	r4, sp, #8
 8001d28:	f103 0510 	add.w	r5, r3, #16
 8001d2c:	4622      	mov	r2, r4
 8001d2e:	6818      	ldr	r0, [r3, #0]
 8001d30:	6859      	ldr	r1, [r3, #4]
 8001d32:	3308      	adds	r3, #8
 8001d34:	c203      	stmia	r2!, {r0, r1}
 8001d36:	42ab      	cmp	r3, r5
 8001d38:	4614      	mov	r4, r2
 8001d3a:	d1f7      	bne.n	8001d2c <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001d3c:	f240 2301 	movw	r3, #513	; 0x201
  tmpreg = RCC->CFGR;
 8001d40:	4911      	ldr	r1, [pc, #68]	; (8001d88 <HAL_RCC_GetSysClockFreq+0x68>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001d42:	f8ad 3004 	strh.w	r3, [sp, #4]
  tmpreg = RCC->CFGR;
 8001d46:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8001d48:	f003 020c 	and.w	r2, r3, #12
 8001d4c:	2a08      	cmp	r2, #8
 8001d4e:	d117      	bne.n	8001d80 <HAL_RCC_GetSysClockFreq+0x60>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001d50:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8001d54:	3218      	adds	r2, #24
 8001d56:	446a      	add	r2, sp
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001d58:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001d5a:	f812 0c10 	ldrb.w	r0, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001d5e:	d50c      	bpl.n	8001d7a <HAL_RCC_GetSysClockFreq+0x5a>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001d60:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001d62:	4a0a      	ldr	r2, [pc, #40]	; (8001d8c <HAL_RCC_GetSysClockFreq+0x6c>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001d64:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001d68:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001d6a:	3318      	adds	r3, #24
 8001d6c:	446b      	add	r3, sp
 8001d6e:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001d72:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8001d76:	b007      	add	sp, #28
 8001d78:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001d7a:	4b05      	ldr	r3, [pc, #20]	; (8001d90 <HAL_RCC_GetSysClockFreq+0x70>)
 8001d7c:	4358      	muls	r0, r3
 8001d7e:	e7fa      	b.n	8001d76 <HAL_RCC_GetSysClockFreq+0x56>
      sysclockfreq = HSE_VALUE;
 8001d80:	4802      	ldr	r0, [pc, #8]	; (8001d8c <HAL_RCC_GetSysClockFreq+0x6c>)
  return sysclockfreq;
 8001d82:	e7f8      	b.n	8001d76 <HAL_RCC_GetSysClockFreq+0x56>
 8001d84:	0800487d 	.word	0x0800487d
 8001d88:	40021000 	.word	0x40021000
 8001d8c:	007a1200 	.word	0x007a1200
 8001d90:	003d0900 	.word	0x003d0900

08001d94 <HAL_RCC_ClockConfig>:
{
 8001d94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001d98:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 8001d9a:	4604      	mov	r4, r0
 8001d9c:	b910      	cbnz	r0, 8001da4 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8001d9e:	2001      	movs	r0, #1
}
 8001da0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001da4:	4a44      	ldr	r2, [pc, #272]	; (8001eb8 <HAL_RCC_ClockConfig+0x124>)
 8001da6:	6813      	ldr	r3, [r2, #0]
 8001da8:	f003 0307 	and.w	r3, r3, #7
 8001dac:	428b      	cmp	r3, r1
 8001dae:	d328      	bcc.n	8001e02 <HAL_RCC_ClockConfig+0x6e>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001db0:	6821      	ldr	r1, [r4, #0]
 8001db2:	078e      	lsls	r6, r1, #30
 8001db4:	d430      	bmi.n	8001e18 <HAL_RCC_ClockConfig+0x84>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001db6:	07ca      	lsls	r2, r1, #31
 8001db8:	d443      	bmi.n	8001e42 <HAL_RCC_ClockConfig+0xae>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001dba:	4a3f      	ldr	r2, [pc, #252]	; (8001eb8 <HAL_RCC_ClockConfig+0x124>)
 8001dbc:	6813      	ldr	r3, [r2, #0]
 8001dbe:	f003 0307 	and.w	r3, r3, #7
 8001dc2:	42ab      	cmp	r3, r5
 8001dc4:	d865      	bhi.n	8001e92 <HAL_RCC_ClockConfig+0xfe>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001dc6:	6822      	ldr	r2, [r4, #0]
 8001dc8:	4d3c      	ldr	r5, [pc, #240]	; (8001ebc <HAL_RCC_ClockConfig+0x128>)
 8001dca:	f012 0f04 	tst.w	r2, #4
 8001dce:	d16c      	bne.n	8001eaa <HAL_RCC_ClockConfig+0x116>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001dd0:	0713      	lsls	r3, r2, #28
 8001dd2:	d506      	bpl.n	8001de2 <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001dd4:	686b      	ldr	r3, [r5, #4]
 8001dd6:	6922      	ldr	r2, [r4, #16]
 8001dd8:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8001ddc:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001de0:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001de2:	f7ff ff9d 	bl	8001d20 <HAL_RCC_GetSysClockFreq>
 8001de6:	686b      	ldr	r3, [r5, #4]
 8001de8:	4a35      	ldr	r2, [pc, #212]	; (8001ec0 <HAL_RCC_ClockConfig+0x12c>)
 8001dea:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001dee:	5cd3      	ldrb	r3, [r2, r3]
 8001df0:	40d8      	lsrs	r0, r3
 8001df2:	4b34      	ldr	r3, [pc, #208]	; (8001ec4 <HAL_RCC_ClockConfig+0x130>)
 8001df4:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8001df6:	4b34      	ldr	r3, [pc, #208]	; (8001ec8 <HAL_RCC_ClockConfig+0x134>)
 8001df8:	6818      	ldr	r0, [r3, #0]
 8001dfa:	f7ff f8c7 	bl	8000f8c <HAL_InitTick>
  return HAL_OK;
 8001dfe:	2000      	movs	r0, #0
 8001e00:	e7ce      	b.n	8001da0 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e02:	6813      	ldr	r3, [r2, #0]
 8001e04:	f023 0307 	bic.w	r3, r3, #7
 8001e08:	430b      	orrs	r3, r1
 8001e0a:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e0c:	6813      	ldr	r3, [r2, #0]
 8001e0e:	f003 0307 	and.w	r3, r3, #7
 8001e12:	428b      	cmp	r3, r1
 8001e14:	d1c3      	bne.n	8001d9e <HAL_RCC_ClockConfig+0xa>
 8001e16:	e7cb      	b.n	8001db0 <HAL_RCC_ClockConfig+0x1c>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e18:	4b28      	ldr	r3, [pc, #160]	; (8001ebc <HAL_RCC_ClockConfig+0x128>)
 8001e1a:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001e1e:	bf1e      	ittt	ne
 8001e20:	685a      	ldrne	r2, [r3, #4]
 8001e22:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 8001e26:	605a      	strne	r2, [r3, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e28:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001e2a:	bf42      	ittt	mi
 8001e2c:	685a      	ldrmi	r2, [r3, #4]
 8001e2e:	f442 5260 	orrmi.w	r2, r2, #14336	; 0x3800
 8001e32:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e34:	685a      	ldr	r2, [r3, #4]
 8001e36:	68a0      	ldr	r0, [r4, #8]
 8001e38:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001e3c:	4302      	orrs	r2, r0
 8001e3e:	605a      	str	r2, [r3, #4]
 8001e40:	e7b9      	b.n	8001db6 <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e42:	6862      	ldr	r2, [r4, #4]
 8001e44:	4e1d      	ldr	r6, [pc, #116]	; (8001ebc <HAL_RCC_ClockConfig+0x128>)
 8001e46:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e48:	6833      	ldr	r3, [r6, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e4a:	d11a      	bne.n	8001e82 <HAL_RCC_ClockConfig+0xee>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e4c:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e50:	d0a5      	beq.n	8001d9e <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e52:	6873      	ldr	r3, [r6, #4]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e54:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e58:	f023 0303 	bic.w	r3, r3, #3
 8001e5c:	4313      	orrs	r3, r2
 8001e5e:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8001e60:	f7ff f8d6 	bl	8001010 <HAL_GetTick>
 8001e64:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e66:	6873      	ldr	r3, [r6, #4]
 8001e68:	6862      	ldr	r2, [r4, #4]
 8001e6a:	f003 030c 	and.w	r3, r3, #12
 8001e6e:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001e72:	d0a2      	beq.n	8001dba <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e74:	f7ff f8cc 	bl	8001010 <HAL_GetTick>
 8001e78:	1bc0      	subs	r0, r0, r7
 8001e7a:	4540      	cmp	r0, r8
 8001e7c:	d9f3      	bls.n	8001e66 <HAL_RCC_ClockConfig+0xd2>
        return HAL_TIMEOUT;
 8001e7e:	2003      	movs	r0, #3
 8001e80:	e78e      	b.n	8001da0 <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e82:	2a02      	cmp	r2, #2
 8001e84:	d102      	bne.n	8001e8c <HAL_RCC_ClockConfig+0xf8>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e86:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001e8a:	e7e1      	b.n	8001e50 <HAL_RCC_ClockConfig+0xbc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e8c:	f013 0f02 	tst.w	r3, #2
 8001e90:	e7de      	b.n	8001e50 <HAL_RCC_ClockConfig+0xbc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e92:	6813      	ldr	r3, [r2, #0]
 8001e94:	f023 0307 	bic.w	r3, r3, #7
 8001e98:	432b      	orrs	r3, r5
 8001e9a:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e9c:	6813      	ldr	r3, [r2, #0]
 8001e9e:	f003 0307 	and.w	r3, r3, #7
 8001ea2:	42ab      	cmp	r3, r5
 8001ea4:	f47f af7b 	bne.w	8001d9e <HAL_RCC_ClockConfig+0xa>
 8001ea8:	e78d      	b.n	8001dc6 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001eaa:	686b      	ldr	r3, [r5, #4]
 8001eac:	68e1      	ldr	r1, [r4, #12]
 8001eae:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001eb2:	430b      	orrs	r3, r1
 8001eb4:	606b      	str	r3, [r5, #4]
 8001eb6:	e78b      	b.n	8001dd0 <HAL_RCC_ClockConfig+0x3c>
 8001eb8:	40022000 	.word	0x40022000
 8001ebc:	40021000 	.word	0x40021000
 8001ec0:	08004865 	.word	0x08004865
 8001ec4:	20000014 	.word	0x20000014
 8001ec8:	2000001c 	.word	0x2000001c

08001ecc <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001ecc:	4b04      	ldr	r3, [pc, #16]	; (8001ee0 <HAL_RCC_GetPCLK1Freq+0x14>)
 8001ece:	4a05      	ldr	r2, [pc, #20]	; (8001ee4 <HAL_RCC_GetPCLK1Freq+0x18>)
 8001ed0:	685b      	ldr	r3, [r3, #4]
 8001ed2:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8001ed6:	5cd3      	ldrb	r3, [r2, r3]
 8001ed8:	4a03      	ldr	r2, [pc, #12]	; (8001ee8 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001eda:	6810      	ldr	r0, [r2, #0]
}
 8001edc:	40d8      	lsrs	r0, r3
 8001ede:	4770      	bx	lr
 8001ee0:	40021000 	.word	0x40021000
 8001ee4:	08004875 	.word	0x08004875
 8001ee8:	20000014 	.word	0x20000014

08001eec <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001eec:	4b04      	ldr	r3, [pc, #16]	; (8001f00 <HAL_RCC_GetPCLK2Freq+0x14>)
 8001eee:	4a05      	ldr	r2, [pc, #20]	; (8001f04 <HAL_RCC_GetPCLK2Freq+0x18>)
 8001ef0:	685b      	ldr	r3, [r3, #4]
 8001ef2:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8001ef6:	5cd3      	ldrb	r3, [r2, r3]
 8001ef8:	4a03      	ldr	r2, [pc, #12]	; (8001f08 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8001efa:	6810      	ldr	r0, [r2, #0]
}
 8001efc:	40d8      	lsrs	r0, r3
 8001efe:	4770      	bx	lr
 8001f00:	40021000 	.word	0x40021000
 8001f04:	08004875 	.word	0x08004875
 8001f08:	20000014 	.word	0x20000014

08001f0c <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001f0c:	6803      	ldr	r3, [r0, #0]
{
 8001f0e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001f12:	07d9      	lsls	r1, r3, #31
{
 8001f14:	4605      	mov	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001f16:	d520      	bpl.n	8001f5a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f18:	4c36      	ldr	r4, [pc, #216]	; (8001ff4 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8001f1a:	69e3      	ldr	r3, [r4, #28]
 8001f1c:	00da      	lsls	r2, r3, #3
 8001f1e:	d432      	bmi.n	8001f86 <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
 8001f20:	2601      	movs	r6, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f22:	69e3      	ldr	r3, [r4, #28]
 8001f24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f28:	61e3      	str	r3, [r4, #28]
 8001f2a:	69e3      	ldr	r3, [r4, #28]
 8001f2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f30:	9301      	str	r3, [sp, #4]
 8001f32:	9b01      	ldr	r3, [sp, #4]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f34:	4f30      	ldr	r7, [pc, #192]	; (8001ff8 <HAL_RCCEx_PeriphCLKConfig+0xec>)
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	05db      	lsls	r3, r3, #23
 8001f3a:	d526      	bpl.n	8001f8a <HAL_RCCEx_PeriphCLKConfig+0x7e>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001f3c:	6a23      	ldr	r3, [r4, #32]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001f3e:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8001f42:	d136      	bne.n	8001fb2 <HAL_RCCEx_PeriphCLKConfig+0xa6>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001f44:	6a23      	ldr	r3, [r4, #32]
 8001f46:	686a      	ldr	r2, [r5, #4]
 8001f48:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f4c:	4313      	orrs	r3, r2
 8001f4e:	6223      	str	r3, [r4, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001f50:	b11e      	cbz	r6, 8001f5a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f52:	69e3      	ldr	r3, [r4, #28]
 8001f54:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f58:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001f5a:	6828      	ldr	r0, [r5, #0]
 8001f5c:	0783      	lsls	r3, r0, #30
 8001f5e:	d506      	bpl.n	8001f6e <HAL_RCCEx_PeriphCLKConfig+0x62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001f60:	4924      	ldr	r1, [pc, #144]	; (8001ff4 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8001f62:	68ab      	ldr	r3, [r5, #8]
 8001f64:	684a      	ldr	r2, [r1, #4]
 8001f66:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8001f6a:	431a      	orrs	r2, r3
 8001f6c:	604a      	str	r2, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001f6e:	f010 0010 	ands.w	r0, r0, #16
 8001f72:	d01b      	beq.n	8001fac <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001f74:	4a1f      	ldr	r2, [pc, #124]	; (8001ff4 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8001f76:	68e9      	ldr	r1, [r5, #12]
 8001f78:	6853      	ldr	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8001f7a:	2000      	movs	r0, #0
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001f7c:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001f80:	430b      	orrs	r3, r1
 8001f82:	6053      	str	r3, [r2, #4]
 8001f84:	e012      	b.n	8001fac <HAL_RCCEx_PeriphCLKConfig+0xa0>
    FlagStatus pwrclkchanged = RESET;
 8001f86:	2600      	movs	r6, #0
 8001f88:	e7d4      	b.n	8001f34 <HAL_RCCEx_PeriphCLKConfig+0x28>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f90:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8001f92:	f7ff f83d 	bl	8001010 <HAL_GetTick>
 8001f96:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	05d8      	lsls	r0, r3, #23
 8001f9c:	d4ce      	bmi.n	8001f3c <HAL_RCCEx_PeriphCLKConfig+0x30>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f9e:	f7ff f837 	bl	8001010 <HAL_GetTick>
 8001fa2:	eba0 0008 	sub.w	r0, r0, r8
 8001fa6:	2864      	cmp	r0, #100	; 0x64
 8001fa8:	d9f6      	bls.n	8001f98 <HAL_RCCEx_PeriphCLKConfig+0x8c>
          return HAL_TIMEOUT;
 8001faa:	2003      	movs	r0, #3
}
 8001fac:	b002      	add	sp, #8
 8001fae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001fb2:	686a      	ldr	r2, [r5, #4]
 8001fb4:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8001fb8:	429a      	cmp	r2, r3
 8001fba:	d0c3      	beq.n	8001f44 <HAL_RCCEx_PeriphCLKConfig+0x38>
      __HAL_RCC_BACKUPRESET_FORCE();
 8001fbc:	2001      	movs	r0, #1
 8001fbe:	4a0f      	ldr	r2, [pc, #60]	; (8001ffc <HAL_RCCEx_PeriphCLKConfig+0xf0>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001fc0:	6a23      	ldr	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 8001fc2:	f8c2 0440 	str.w	r0, [r2, #1088]	; 0x440
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001fc6:	2000      	movs	r0, #0
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001fc8:	f423 7140 	bic.w	r1, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001fcc:	f8c2 0440 	str.w	r0, [r2, #1088]	; 0x440
      RCC->BDCR = temp_reg;
 8001fd0:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001fd2:	07d9      	lsls	r1, r3, #31
 8001fd4:	d5b6      	bpl.n	8001f44 <HAL_RCCEx_PeriphCLKConfig+0x38>
        tickstart = HAL_GetTick();
 8001fd6:	f7ff f81b 	bl	8001010 <HAL_GetTick>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fda:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8001fde:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fe0:	6a23      	ldr	r3, [r4, #32]
 8001fe2:	079a      	lsls	r2, r3, #30
 8001fe4:	d4ae      	bmi.n	8001f44 <HAL_RCCEx_PeriphCLKConfig+0x38>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fe6:	f7ff f813 	bl	8001010 <HAL_GetTick>
 8001fea:	1bc0      	subs	r0, r0, r7
 8001fec:	4540      	cmp	r0, r8
 8001fee:	d9f7      	bls.n	8001fe0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8001ff0:	e7db      	b.n	8001faa <HAL_RCCEx_PeriphCLKConfig+0x9e>
 8001ff2:	bf00      	nop
 8001ff4:	40021000 	.word	0x40021000
 8001ff8:	40007000 	.word	0x40007000
 8001ffc:	42420000 	.word	0x42420000

08002000 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8002000:	4602      	mov	r2, r0
 8002002:	b570      	push	{r4, r5, r6, lr}
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002004:	4b33      	ldr	r3, [pc, #204]	; (80020d4 <HAL_RCCEx_GetPeriphCLKFreq+0xd4>)
{
 8002006:	b086      	sub	sp, #24
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002008:	ad02      	add	r5, sp, #8
 800200a:	f103 0610 	add.w	r6, r3, #16
 800200e:	462c      	mov	r4, r5
 8002010:	6818      	ldr	r0, [r3, #0]
 8002012:	6859      	ldr	r1, [r3, #4]
 8002014:	3308      	adds	r3, #8
 8002016:	c403      	stmia	r4!, {r0, r1}
 8002018:	42b3      	cmp	r3, r6
 800201a:	4625      	mov	r5, r4
 800201c:	d1f7      	bne.n	800200e <HAL_RCCEx_GetPeriphCLKFreq+0xe>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800201e:	f240 2301 	movw	r3, #513	; 0x201
  uint32_t temp_reg = 0U, frequency = 0U;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8002022:	2a02      	cmp	r2, #2
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002024:	f8ad 3004 	strh.w	r3, [sp, #4]
  switch (PeriphClk)
 8002028:	d047      	beq.n	80020ba <HAL_RCCEx_GetPeriphCLKFreq+0xba>
 800202a:	2a10      	cmp	r2, #16
 800202c:	d003      	beq.n	8002036 <HAL_RCCEx_GetPeriphCLKFreq+0x36>
 800202e:	2a01      	cmp	r2, #1
 8002030:	d024      	beq.n	800207c <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
  uint32_t temp_reg = 0U, frequency = 0U;
 8002032:	2000      	movs	r0, #0
    default:
    {
      break;
    }
  }
  return (frequency);
 8002034:	e036      	b.n	80020a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa4>
      temp_reg = RCC->CFGR;
 8002036:	4a28      	ldr	r2, [pc, #160]	; (80020d8 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>)
 8002038:	6851      	ldr	r1, [r2, #4]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 800203a:	6810      	ldr	r0, [r2, #0]
 800203c:	f010 7080 	ands.w	r0, r0, #16777216	; 0x1000000
 8002040:	d030      	beq.n	80020a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa4>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002042:	f3c1 4383 	ubfx	r3, r1, #18, #4
 8002046:	3318      	adds	r3, #24
 8002048:	446b      	add	r3, sp
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800204a:	03c9      	lsls	r1, r1, #15
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800204c:	f813 0c10 	ldrb.w	r0, [r3, #-16]
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002050:	bf49      	itett	mi
 8002052:	6853      	ldrmi	r3, [r2, #4]
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002054:	4b21      	ldrpl	r3, [pc, #132]	; (80020dc <HAL_RCCEx_GetPeriphCLKFreq+0xdc>)
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002056:	f3c3 4340 	ubfxmi	r3, r3, #17, #1
 800205a:	3318      	addmi	r3, #24
 800205c:	bf41      	itttt	mi
 800205e:	446b      	addmi	r3, sp
 8002060:	f813 1c14 	ldrbmi.w	r1, [r3, #-20]
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8002064:	4b1e      	ldrmi	r3, [pc, #120]	; (80020e0 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>)
 8002066:	fbb3 f3f1 	udivmi	r3, r3, r1
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800206a:	4358      	muls	r0, r3
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 800206c:	6853      	ldr	r3, [r2, #4]
 800206e:	025b      	lsls	r3, r3, #9
 8002070:	d418      	bmi.n	80020a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa4>
          frequency = (pllclk * 2) / 3;
 8002072:	2303      	movs	r3, #3
 8002074:	0040      	lsls	r0, r0, #1
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8002076:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 800207a:	e013      	b.n	80020a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa4>
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 800207c:	f240 3102 	movw	r1, #770	; 0x302
      temp_reg = RCC->BDCR;
 8002080:	4a15      	ldr	r2, [pc, #84]	; (80020d8 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>)
 8002082:	6a13      	ldr	r3, [r2, #32]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8002084:	4019      	ands	r1, r3
 8002086:	f5b1 7f81 	cmp.w	r1, #258	; 0x102
 800208a:	d01f      	beq.n	80020cc <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 800208c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002090:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002094:	d108      	bne.n	80020a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
        frequency = LSI_VALUE;
 8002096:	f649 4340 	movw	r3, #40000	; 0x9c40
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 800209a:	6a50      	ldr	r0, [r2, #36]	; 0x24
        frequency = LSI_VALUE;
 800209c:	f010 0002 	ands.w	r0, r0, #2
        frequency = HSE_VALUE / 128U;
 80020a0:	bf18      	it	ne
 80020a2:	4618      	movne	r0, r3
}
 80020a4:	b006      	add	sp, #24
 80020a6:	bd70      	pop	{r4, r5, r6, pc}
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80020a8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80020ac:	d1c1      	bne.n	8002032 <HAL_RCCEx_GetPeriphCLKFreq+0x32>
 80020ae:	6810      	ldr	r0, [r2, #0]
        frequency = HSE_VALUE / 128U;
 80020b0:	f24f 4324 	movw	r3, #62500	; 0xf424
 80020b4:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
 80020b8:	e7f2      	b.n	80020a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80020ba:	f7ff ff17 	bl	8001eec <HAL_RCC_GetPCLK2Freq>
 80020be:	4b06      	ldr	r3, [pc, #24]	; (80020d8 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>)
 80020c0:	685b      	ldr	r3, [r3, #4]
 80020c2:	f3c3 3381 	ubfx	r3, r3, #14, #2
 80020c6:	3301      	adds	r3, #1
 80020c8:	005b      	lsls	r3, r3, #1
 80020ca:	e7d4      	b.n	8002076 <HAL_RCCEx_GetPeriphCLKFreq+0x76>
        frequency = LSE_VALUE;
 80020cc:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80020d0:	e7e8      	b.n	80020a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa4>
 80020d2:	bf00      	nop
 80020d4:	0800487d 	.word	0x0800487d
 80020d8:	40021000 	.word	0x40021000
 80020dc:	003d0900 	.word	0x003d0900
 80020e0:	007a1200 	.word	0x007a1200

080020e4 <RTC_ReadTimeCounter>:
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
  uint32_t timecounter = 0U;

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 80020e4:	6803      	ldr	r3, [r0, #0]
{
 80020e6:	b530      	push	{r4, r5, lr}
  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 80020e8:	699a      	ldr	r2, [r3, #24]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 80020ea:	69d8      	ldr	r0, [r3, #28]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 80020ec:	6999      	ldr	r1, [r3, #24]

  if (high1 != high2)
 80020ee:	b295      	uxth	r5, r2
 80020f0:	b28c      	uxth	r4, r1
 80020f2:	42a5      	cmp	r5, r4
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 80020f4:	bf17      	itett	ne
 80020f6:	69d8      	ldrne	r0, [r3, #28]
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 80020f8:	b280      	uxtheq	r0, r0
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 80020fa:	b280      	uxthne	r0, r0
 80020fc:	ea40 4001 	orrne.w	r0, r0, r1, lsl #16
    timecounter = (((uint32_t) high1 << 16U) | low);
 8002100:	bf08      	it	eq
 8002102:	ea40 4002 	orreq.w	r0, r0, r2, lsl #16
  }

  return timecounter;
}
 8002106:	bd30      	pop	{r4, r5, pc}

08002108 <RTC_ReadAlarmCounter>:
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
  uint16_t high1 = 0U, low = 0U;

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 8002108:	6803      	ldr	r3, [r0, #0]
 800210a:	6a18      	ldr	r0, [r3, #32]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 800210c:	6a5b      	ldr	r3, [r3, #36]	; 0x24

  return (((uint32_t) high1 << 16U) | low);
 800210e:	b29b      	uxth	r3, r3
}
 8002110:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8002114:	4770      	bx	lr

08002116 <RTC_Bcd2ToByte>:
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
  uint32_t tmp = 0U;
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
  return (tmp + (Value & (uint8_t)0x0F));
 8002116:	220a      	movs	r2, #10
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 8002118:	0903      	lsrs	r3, r0, #4
  return (tmp + (Value & (uint8_t)0x0F));
 800211a:	f000 000f 	and.w	r0, r0, #15
 800211e:	fb02 0003 	mla	r0, r2, r3, r0
}
 8002122:	b2c0      	uxtb	r0, r0
 8002124:	4770      	bx	lr

08002126 <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 8002126:	b530      	push	{r4, r5, lr}
 8002128:	4603      	mov	r3, r0
  uint32_t year = 0U, weekday = 0U;

  year = 2000U + nYear;
 800212a:	f500 64fa 	add.w	r4, r0, #2000	; 0x7d0

  if (nMonth < 3U)
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 800212e:	2017      	movs	r0, #23
 8002130:	2509      	movs	r5, #9
 8002132:	4348      	muls	r0, r1
  if (nMonth < 3U)
 8002134:	2902      	cmp	r1, #2
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 8002136:	fbb0 f5f5 	udiv	r5, r0, r5
  if (nMonth < 3U)
 800213a:	d817      	bhi.n	800216c <RTC_WeekDayNum+0x46>
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 800213c:	3204      	adds	r2, #4
 800213e:	1910      	adds	r0, r2, r4
 8002140:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8002144:	f203 73cf 	addw	r3, r3, #1999	; 0x7cf
 8002148:	fbb3 f2f2 	udiv	r2, r3, r2
 800214c:	4428      	add	r0, r5
 800214e:	eb00 0093 	add.w	r0, r0, r3, lsr #2
 8002152:	4410      	add	r0, r2
 8002154:	2264      	movs	r2, #100	; 0x64
 8002156:	fbb3 f3f2 	udiv	r3, r3, r2
 800215a:	1ac0      	subs	r0, r0, r3
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 800215c:	2307      	movs	r3, #7
 800215e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002162:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8002166:	1ac0      	subs	r0, r0, r3
  }

  return (uint8_t)weekday;
}
 8002168:	b2c0      	uxtb	r0, r0
 800216a:	bd30      	pop	{r4, r5, pc}
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 800216c:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8002170:	fbb4 f3f3 	udiv	r3, r4, r3
 8002174:	1c90      	adds	r0, r2, #2
 8002176:	4420      	add	r0, r4
 8002178:	4428      	add	r0, r5
 800217a:	eb00 0094 	add.w	r0, r0, r4, lsr #2
 800217e:	4418      	add	r0, r3
 8002180:	2364      	movs	r3, #100	; 0x64
 8002182:	fbb4 f4f3 	udiv	r4, r4, r3
 8002186:	1b00      	subs	r0, r0, r4
 8002188:	e7e8      	b.n	800215c <RTC_WeekDayNum+0x36>

0800218a <RTC_EnterInitMode>:
{
 800218a:	b538      	push	{r3, r4, r5, lr}
 800218c:	4604      	mov	r4, r0
  tickstart = HAL_GetTick();
 800218e:	f7fe ff3f 	bl	8001010 <HAL_GetTick>
 8002192:	4605      	mov	r5, r0
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8002194:	6823      	ldr	r3, [r4, #0]
 8002196:	685a      	ldr	r2, [r3, #4]
 8002198:	0692      	lsls	r2, r2, #26
 800219a:	d505      	bpl.n	80021a8 <RTC_EnterInitMode+0x1e>
  return HAL_OK;
 800219c:	2000      	movs	r0, #0
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800219e:	685a      	ldr	r2, [r3, #4]
 80021a0:	f042 0210 	orr.w	r2, r2, #16
 80021a4:	605a      	str	r2, [r3, #4]
}
 80021a6:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80021a8:	f7fe ff32 	bl	8001010 <HAL_GetTick>
 80021ac:	1b40      	subs	r0, r0, r5
 80021ae:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80021b2:	d9ef      	bls.n	8002194 <RTC_EnterInitMode+0xa>
      return HAL_TIMEOUT;
 80021b4:	2003      	movs	r0, #3
 80021b6:	e7f6      	b.n	80021a6 <RTC_EnterInitMode+0x1c>

080021b8 <RTC_ExitInitMode>:
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80021b8:	6802      	ldr	r2, [r0, #0]
{
 80021ba:	b538      	push	{r3, r4, r5, lr}
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80021bc:	6853      	ldr	r3, [r2, #4]
{
 80021be:	4604      	mov	r4, r0
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80021c0:	f023 0310 	bic.w	r3, r3, #16
 80021c4:	6053      	str	r3, [r2, #4]
  tickstart = HAL_GetTick();
 80021c6:	f7fe ff23 	bl	8001010 <HAL_GetTick>
 80021ca:	4605      	mov	r5, r0
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80021cc:	6823      	ldr	r3, [r4, #0]
 80021ce:	685b      	ldr	r3, [r3, #4]
 80021d0:	069b      	lsls	r3, r3, #26
 80021d2:	d501      	bpl.n	80021d8 <RTC_ExitInitMode+0x20>
  return HAL_OK;
 80021d4:	2000      	movs	r0, #0
}
 80021d6:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80021d8:	f7fe ff1a 	bl	8001010 <HAL_GetTick>
 80021dc:	1b40      	subs	r0, r0, r5
 80021de:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80021e2:	d9f3      	bls.n	80021cc <RTC_ExitInitMode+0x14>
      return HAL_TIMEOUT;
 80021e4:	2003      	movs	r0, #3
 80021e6:	e7f6      	b.n	80021d6 <RTC_ExitInitMode+0x1e>

080021e8 <RTC_WriteTimeCounter>:
{
 80021e8:	b538      	push	{r3, r4, r5, lr}
 80021ea:	4605      	mov	r5, r0
 80021ec:	460c      	mov	r4, r1
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80021ee:	f7ff ffcc 	bl	800218a <RTC_EnterInitMode>
 80021f2:	b958      	cbnz	r0, 800220c <RTC_WriteTimeCounter+0x24>
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 80021f4:	682b      	ldr	r3, [r5, #0]
 80021f6:	0c22      	lsrs	r2, r4, #16
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 80021f8:	b2a4      	uxth	r4, r4
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 80021fa:	619a      	str	r2, [r3, #24]
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 80021fc:	4628      	mov	r0, r5
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 80021fe:	61dc      	str	r4, [r3, #28]
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8002200:	f7ff ffda 	bl	80021b8 <RTC_ExitInitMode>
    status = HAL_ERROR;
 8002204:	3800      	subs	r0, #0
 8002206:	bf18      	it	ne
 8002208:	2001      	movne	r0, #1
}
 800220a:	bd38      	pop	{r3, r4, r5, pc}
    status = HAL_ERROR;
 800220c:	2001      	movs	r0, #1
 800220e:	e7fc      	b.n	800220a <RTC_WriteTimeCounter+0x22>

08002210 <RTC_WriteAlarmCounter>:
{
 8002210:	b538      	push	{r3, r4, r5, lr}
 8002212:	4605      	mov	r5, r0
 8002214:	460c      	mov	r4, r1
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8002216:	f7ff ffb8 	bl	800218a <RTC_EnterInitMode>
 800221a:	b958      	cbnz	r0, 8002234 <RTC_WriteAlarmCounter+0x24>
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 800221c:	682b      	ldr	r3, [r5, #0]
 800221e:	0c22      	lsrs	r2, r4, #16
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 8002220:	b2a4      	uxth	r4, r4
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 8002222:	621a      	str	r2, [r3, #32]
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8002224:	4628      	mov	r0, r5
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 8002226:	625c      	str	r4, [r3, #36]	; 0x24
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8002228:	f7ff ffc6 	bl	80021b8 <RTC_ExitInitMode>
    status = HAL_ERROR;
 800222c:	3800      	subs	r0, #0
 800222e:	bf18      	it	ne
 8002230:	2001      	movne	r0, #1
}
 8002232:	bd38      	pop	{r3, r4, r5, pc}
    status = HAL_ERROR;
 8002234:	2001      	movs	r0, #1
 8002236:	e7fc      	b.n	8002232 <RTC_WriteAlarmCounter+0x22>

08002238 <HAL_RTC_SetTime>:
{
 8002238:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((hrtc == NULL) || (sTime == NULL))
 800223a:	4604      	mov	r4, r0
 800223c:	b1e0      	cbz	r0, 8002278 <HAL_RTC_SetTime+0x40>
 800223e:	b1d9      	cbz	r1, 8002278 <HAL_RTC_SetTime+0x40>
  __HAL_LOCK(hrtc);
 8002240:	7c03      	ldrb	r3, [r0, #16]
 8002242:	2502      	movs	r5, #2
 8002244:	2b01      	cmp	r3, #1
 8002246:	d044      	beq.n	80022d2 <HAL_RTC_SetTime+0x9a>
 8002248:	2301      	movs	r3, #1
  hrtc->State = HAL_RTC_STATE_BUSY;
 800224a:	7445      	strb	r5, [r0, #17]
  __HAL_LOCK(hrtc);
 800224c:	7403      	strb	r3, [r0, #16]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 800224e:	7808      	ldrb	r0, [r1, #0]
                              ((uint32_t)sTime->Minutes * 60U) + \
 8002250:	784d      	ldrb	r5, [r1, #1]
                              ((uint32_t)sTime->Seconds));
 8002252:	788f      	ldrb	r7, [r1, #2]
  if (Format == RTC_FORMAT_BIN)
 8002254:	b992      	cbnz	r2, 800227c <HAL_RTC_SetTime+0x44>
                              ((uint32_t)sTime->Minutes * 60U) + \
 8002256:	263c      	movs	r6, #60	; 0x3c
 8002258:	4375      	muls	r5, r6
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 800225a:	f44f 6661 	mov.w	r6, #3600	; 0xe10
 800225e:	fb06 5500 	mla	r5, r6, r0, r5
 8002262:	19ee      	adds	r6, r5, r7
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8002264:	4631      	mov	r1, r6
 8002266:	4620      	mov	r0, r4
 8002268:	f7ff ffbe 	bl	80021e8 <RTC_WriteTimeCounter>
 800226c:	4605      	mov	r5, r0
 800226e:	b1b0      	cbz	r0, 800229e <HAL_RTC_SetTime+0x66>
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002270:	2304      	movs	r3, #4
 8002272:	7463      	strb	r3, [r4, #17]
    __HAL_UNLOCK(hrtc);
 8002274:	2300      	movs	r3, #0
 8002276:	7423      	strb	r3, [r4, #16]
    return HAL_ERROR;
 8002278:	2501      	movs	r5, #1
 800227a:	e02a      	b.n	80022d2 <HAL_RTC_SetTime+0x9a>
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 800227c:	f7ff ff4b 	bl	8002116 <RTC_Bcd2ToByte>
 8002280:	4601      	mov	r1, r0
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 8002282:	4628      	mov	r0, r5
 8002284:	f7ff ff47 	bl	8002116 <RTC_Bcd2ToByte>
 8002288:	263c      	movs	r6, #60	; 0x3c
 800228a:	4346      	muls	r6, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 800228c:	f44f 6061 	mov.w	r0, #3600	; 0xe10
 8002290:	fb00 6601 	mla	r6, r0, r1, r6
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 8002294:	4638      	mov	r0, r7
 8002296:	f7ff ff3e 	bl	8002116 <RTC_Bcd2ToByte>
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 800229a:	4406      	add	r6, r0
 800229c:	e7e2      	b.n	8002264 <HAL_RTC_SetTime+0x2c>
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 800229e:	6822      	ldr	r2, [r4, #0]
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 80022a0:	4620      	mov	r0, r4
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 80022a2:	6853      	ldr	r3, [r2, #4]
 80022a4:	f023 0305 	bic.w	r3, r3, #5
 80022a8:	6053      	str	r3, [r2, #4]
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 80022aa:	f7ff ff2d 	bl	8002108 <RTC_ReadAlarmCounter>
      if (counter_alarm < counter_time)
 80022ae:	4286      	cmp	r6, r0
 80022b0:	d90b      	bls.n	80022ca <HAL_RTC_SetTime+0x92>
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 80022b2:	f500 31a8 	add.w	r1, r0, #86016	; 0x15000
 80022b6:	f501 71c0 	add.w	r1, r1, #384	; 0x180
 80022ba:	4620      	mov	r0, r4
 80022bc:	f7ff ffa8 	bl	8002210 <RTC_WriteAlarmCounter>
 80022c0:	b118      	cbz	r0, 80022ca <HAL_RTC_SetTime+0x92>
          hrtc->State = HAL_RTC_STATE_ERROR;
 80022c2:	2304      	movs	r3, #4
          __HAL_UNLOCK(hrtc);
 80022c4:	7425      	strb	r5, [r4, #16]
          hrtc->State = HAL_RTC_STATE_ERROR;
 80022c6:	7463      	strb	r3, [r4, #17]
          return HAL_ERROR;
 80022c8:	e7d6      	b.n	8002278 <HAL_RTC_SetTime+0x40>
    hrtc->State = HAL_RTC_STATE_READY;
 80022ca:	2301      	movs	r3, #1
 80022cc:	7463      	strb	r3, [r4, #17]
    __HAL_UNLOCK(hrtc);
 80022ce:	2300      	movs	r3, #0
 80022d0:	7423      	strb	r3, [r4, #16]
}
 80022d2:	4628      	mov	r0, r5
 80022d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080022d8 <HAL_RTC_SetDate>:
{
 80022d8:	b570      	push	{r4, r5, r6, lr}
 80022da:	460d      	mov	r5, r1
  if ((hrtc == NULL) || (sDate == NULL))
 80022dc:	4604      	mov	r4, r0
 80022de:	b350      	cbz	r0, 8002336 <HAL_RTC_SetDate+0x5e>
 80022e0:	b349      	cbz	r1, 8002336 <HAL_RTC_SetDate+0x5e>
  __HAL_LOCK(hrtc);
 80022e2:	7c03      	ldrb	r3, [r0, #16]
 80022e4:	2002      	movs	r0, #2
 80022e6:	2b01      	cmp	r3, #1
 80022e8:	d048      	beq.n	800237c <HAL_RTC_SetDate+0xa4>
 80022ea:	2301      	movs	r3, #1
  hrtc->State = HAL_RTC_STATE_BUSY;
 80022ec:	7460      	strb	r0, [r4, #17]
  __HAL_LOCK(hrtc);
 80022ee:	7423      	strb	r3, [r4, #16]
  if (Format == RTC_FORMAT_BIN)
 80022f0:	78c8      	ldrb	r0, [r1, #3]
 80022f2:	bb12      	cbnz	r2, 800233a <HAL_RTC_SetDate+0x62>
    hrtc->DateToUpdate.Year  = sDate->Year;
 80022f4:	73e0      	strb	r0, [r4, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 80022f6:	784b      	ldrb	r3, [r1, #1]
 80022f8:	7363      	strb	r3, [r4, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 80022fa:	788b      	ldrb	r3, [r1, #2]
 80022fc:	73a3      	strb	r3, [r4, #14]
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 80022fe:	7ba2      	ldrb	r2, [r4, #14]
 8002300:	7b61      	ldrb	r1, [r4, #13]
 8002302:	7be0      	ldrb	r0, [r4, #15]
 8002304:	f7ff ff0f 	bl	8002126 <RTC_WeekDayNum>
 8002308:	7320      	strb	r0, [r4, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 800230a:	7028      	strb	r0, [r5, #0]
  counter_time = RTC_ReadTimeCounter(hrtc);
 800230c:	4620      	mov	r0, r4
 800230e:	f7ff fee9 	bl	80020e4 <RTC_ReadTimeCounter>
  if (hours > 24U)
 8002312:	4b1b      	ldr	r3, [pc, #108]	; (8002380 <HAL_RTC_SetDate+0xa8>)
 8002314:	4298      	cmp	r0, r3
 8002316:	d92d      	bls.n	8002374 <HAL_RTC_SetDate+0x9c>
    counter_time -= ((hours / 24U) * 24U * 3600U);
 8002318:	4d1a      	ldr	r5, [pc, #104]	; (8002384 <HAL_RTC_SetDate+0xac>)
 800231a:	fbb0 f1f5 	udiv	r1, r0, r5
 800231e:	fb05 0511 	mls	r5, r5, r1, r0
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8002322:	4620      	mov	r0, r4
 8002324:	4629      	mov	r1, r5
 8002326:	f7ff ff5f 	bl	80021e8 <RTC_WriteTimeCounter>
 800232a:	4606      	mov	r6, r0
 800232c:	b188      	cbz	r0, 8002352 <HAL_RTC_SetDate+0x7a>
      hrtc->State = HAL_RTC_STATE_ERROR;
 800232e:	2304      	movs	r3, #4
 8002330:	7463      	strb	r3, [r4, #17]
      __HAL_UNLOCK(hrtc);
 8002332:	2300      	movs	r3, #0
 8002334:	7423      	strb	r3, [r4, #16]
    return HAL_ERROR;
 8002336:	2001      	movs	r0, #1
 8002338:	e020      	b.n	800237c <HAL_RTC_SetDate+0xa4>
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 800233a:	f7ff feec 	bl	8002116 <RTC_Bcd2ToByte>
 800233e:	73e0      	strb	r0, [r4, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 8002340:	7848      	ldrb	r0, [r1, #1]
 8002342:	f7ff fee8 	bl	8002116 <RTC_Bcd2ToByte>
 8002346:	7360      	strb	r0, [r4, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 8002348:	7888      	ldrb	r0, [r1, #2]
 800234a:	f7ff fee4 	bl	8002116 <RTC_Bcd2ToByte>
 800234e:	73a0      	strb	r0, [r4, #14]
 8002350:	e7d5      	b.n	80022fe <HAL_RTC_SetDate+0x26>
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8002352:	4620      	mov	r0, r4
 8002354:	f7ff fed8 	bl	8002108 <RTC_ReadAlarmCounter>
      if (counter_alarm < counter_time)
 8002358:	4285      	cmp	r5, r0
 800235a:	d90b      	bls.n	8002374 <HAL_RTC_SetDate+0x9c>
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 800235c:	f500 31a8 	add.w	r1, r0, #86016	; 0x15000
 8002360:	f501 71c0 	add.w	r1, r1, #384	; 0x180
 8002364:	4620      	mov	r0, r4
 8002366:	f7ff ff53 	bl	8002210 <RTC_WriteAlarmCounter>
 800236a:	b118      	cbz	r0, 8002374 <HAL_RTC_SetDate+0x9c>
          hrtc->State = HAL_RTC_STATE_ERROR;
 800236c:	2304      	movs	r3, #4
          __HAL_UNLOCK(hrtc);
 800236e:	7426      	strb	r6, [r4, #16]
          hrtc->State = HAL_RTC_STATE_ERROR;
 8002370:	7463      	strb	r3, [r4, #17]
          return HAL_ERROR;
 8002372:	e7e0      	b.n	8002336 <HAL_RTC_SetDate+0x5e>
  hrtc->State = HAL_RTC_STATE_READY ;
 8002374:	2301      	movs	r3, #1
  __HAL_UNLOCK(hrtc);
 8002376:	2000      	movs	r0, #0
  hrtc->State = HAL_RTC_STATE_READY ;
 8002378:	7463      	strb	r3, [r4, #17]
  __HAL_UNLOCK(hrtc);
 800237a:	7420      	strb	r0, [r4, #16]
}
 800237c:	bd70      	pop	{r4, r5, r6, pc}
 800237e:	bf00      	nop
 8002380:	00015f8f 	.word	0x00015f8f
 8002384:	00015180 	.word	0x00015180

08002388 <HAL_RTC_WaitForSynchro>:
{
 8002388:	b538      	push	{r3, r4, r5, lr}
  if (hrtc == NULL)
 800238a:	4604      	mov	r4, r0
 800238c:	b1a8      	cbz	r0, 80023ba <HAL_RTC_WaitForSynchro+0x32>
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 800238e:	6802      	ldr	r2, [r0, #0]
 8002390:	6853      	ldr	r3, [r2, #4]
 8002392:	f023 0308 	bic.w	r3, r3, #8
 8002396:	6053      	str	r3, [r2, #4]
  tickstart = HAL_GetTick();
 8002398:	f7fe fe3a 	bl	8001010 <HAL_GetTick>
 800239c:	4605      	mov	r5, r0
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 800239e:	6823      	ldr	r3, [r4, #0]
 80023a0:	685b      	ldr	r3, [r3, #4]
 80023a2:	071b      	lsls	r3, r3, #28
 80023a4:	d501      	bpl.n	80023aa <HAL_RTC_WaitForSynchro+0x22>
  return HAL_OK;
 80023a6:	2000      	movs	r0, #0
}
 80023a8:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80023aa:	f7fe fe31 	bl	8001010 <HAL_GetTick>
 80023ae:	1b40      	subs	r0, r0, r5
 80023b0:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80023b4:	d9f3      	bls.n	800239e <HAL_RTC_WaitForSynchro+0x16>
      return HAL_TIMEOUT;
 80023b6:	2003      	movs	r0, #3
 80023b8:	e7f6      	b.n	80023a8 <HAL_RTC_WaitForSynchro+0x20>
    return HAL_ERROR;
 80023ba:	2001      	movs	r0, #1
 80023bc:	e7f4      	b.n	80023a8 <HAL_RTC_WaitForSynchro+0x20>
	...

080023c0 <HAL_RTC_Init>:
{
 80023c0:	b510      	push	{r4, lr}
  if (hrtc == NULL)
 80023c2:	4604      	mov	r4, r0
 80023c4:	b170      	cbz	r0, 80023e4 <HAL_RTC_Init+0x24>
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80023c6:	7c43      	ldrb	r3, [r0, #17]
 80023c8:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80023cc:	b913      	cbnz	r3, 80023d4 <HAL_RTC_Init+0x14>
    hrtc->Lock = HAL_UNLOCKED;
 80023ce:	7402      	strb	r2, [r0, #16]
    HAL_RTC_MspInit(hrtc);
 80023d0:	f7fe fc28 	bl	8000c24 <HAL_RTC_MspInit>
  hrtc->State = HAL_RTC_STATE_BUSY;
 80023d4:	2302      	movs	r3, #2
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80023d6:	4620      	mov	r0, r4
  hrtc->State = HAL_RTC_STATE_BUSY;
 80023d8:	7463      	strb	r3, [r4, #17]
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80023da:	f7ff ffd5 	bl	8002388 <HAL_RTC_WaitForSynchro>
 80023de:	b118      	cbz	r0, 80023e8 <HAL_RTC_Init+0x28>
        hrtc->State = HAL_RTC_STATE_ERROR;
 80023e0:	2304      	movs	r3, #4
 80023e2:	7463      	strb	r3, [r4, #17]
    return HAL_ERROR;
 80023e4:	2001      	movs	r0, #1
 80023e6:	e036      	b.n	8002456 <HAL_RTC_Init+0x96>
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80023e8:	4620      	mov	r0, r4
 80023ea:	f7ff fece 	bl	800218a <RTC_EnterInitMode>
 80023ee:	2800      	cmp	r0, #0
 80023f0:	d1f6      	bne.n	80023e0 <HAL_RTC_Init+0x20>
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 80023f2:	6822      	ldr	r2, [r4, #0]
    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 80023f4:	68a0      	ldr	r0, [r4, #8]
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 80023f6:	6853      	ldr	r3, [r2, #4]
 80023f8:	f023 0307 	bic.w	r3, r3, #7
 80023fc:	6053      	str	r3, [r2, #4]
    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 80023fe:	4a16      	ldr	r2, [pc, #88]	; (8002458 <HAL_RTC_Init+0x98>)
 8002400:	b118      	cbz	r0, 800240a <HAL_RTC_Init+0x4a>
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 8002402:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8002404:	f021 0101 	bic.w	r1, r1, #1
 8002408:	6311      	str	r1, [r2, #48]	; 0x30
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 800240a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800240c:	f423 7360 	bic.w	r3, r3, #896	; 0x380
 8002410:	4303      	orrs	r3, r0
 8002412:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 8002414:	6860      	ldr	r0, [r4, #4]
 8002416:	1c43      	adds	r3, r0, #1
 8002418:	d105      	bne.n	8002426 <HAL_RTC_Init+0x66>
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 800241a:	2001      	movs	r0, #1
 800241c:	f7ff fdf0 	bl	8002000 <HAL_RCCEx_GetPeriphCLKFreq>
      if (prescaler == 0U)
 8002420:	2800      	cmp	r0, #0
 8002422:	d0dd      	beq.n	80023e0 <HAL_RTC_Init+0x20>
        prescaler = prescaler - 1U;
 8002424:	3801      	subs	r0, #1
    MODIFY_REG(hrtc->Instance->PRLH, RTC_PRLH_PRL, (prescaler >> 16U));
 8002426:	6822      	ldr	r2, [r4, #0]
 8002428:	6893      	ldr	r3, [r2, #8]
 800242a:	f023 030f 	bic.w	r3, r3, #15
 800242e:	ea43 4310 	orr.w	r3, r3, r0, lsr #16
 8002432:	6093      	str	r3, [r2, #8]
    MODIFY_REG(hrtc->Instance->PRLL, RTC_PRLL_PRL, (prescaler & RTC_PRLL_PRL));
 8002434:	68d3      	ldr	r3, [r2, #12]
 8002436:	b280      	uxth	r0, r0
 8002438:	0c1b      	lsrs	r3, r3, #16
 800243a:	041b      	lsls	r3, r3, #16
 800243c:	4318      	orrs	r0, r3
 800243e:	60d0      	str	r0, [r2, #12]
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8002440:	4620      	mov	r0, r4
 8002442:	f7ff feb9 	bl	80021b8 <RTC_ExitInitMode>
 8002446:	2301      	movs	r3, #1
 8002448:	b110      	cbz	r0, 8002450 <HAL_RTC_Init+0x90>
      hrtc->State = HAL_RTC_STATE_ERROR;
 800244a:	2204      	movs	r2, #4
 800244c:	7462      	strb	r2, [r4, #17]
      return HAL_ERROR;
 800244e:	e7c9      	b.n	80023e4 <HAL_RTC_Init+0x24>
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 8002450:	7363      	strb	r3, [r4, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 8002452:	81e3      	strh	r3, [r4, #14]
    hrtc->State = HAL_RTC_STATE_READY;
 8002454:	7463      	strb	r3, [r4, #17]
}
 8002456:	bd10      	pop	{r4, pc}
 8002458:	40006c00 	.word	0x40006c00

0800245c <SPI_WaitFlagStateUntilTimeout.constprop.0>:
  * @param  State flag state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 800245c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8002460:	461c      	mov	r4, r3
 8002462:	4616      	mov	r6, r2
 8002464:	460f      	mov	r7, r1
 8002466:	4605      	mov	r5, r0
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002468:	f7fe fdd2 	bl	8001010 <HAL_GetTick>
 800246c:	4434      	add	r4, r6
 800246e:	1a24      	subs	r4, r4, r0
  tmp_tickstart = HAL_GetTick();
 8002470:	f7fe fdce 	bl	8001010 <HAL_GetTick>
 8002474:	4680      	mov	r8, r0

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002476:	4b23      	ldr	r3, [pc, #140]	; (8002504 <SPI_WaitFlagStateUntilTimeout.constprop.0+0xa8>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f3c3 33cb 	ubfx	r3, r3, #15, #12
 800247e:	4363      	muls	r3, r4

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002480:	682a      	ldr	r2, [r5, #0]
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
      {
        tmp_timeout = 0U;
      }
      count--;
 8002482:	9301      	str	r3, [sp, #4]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002484:	6893      	ldr	r3, [r2, #8]
 8002486:	ea37 0303 	bics.w	r3, r7, r3
 800248a:	d001      	beq.n	8002490 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x34>
    }
  }

  return HAL_OK;
 800248c:	2000      	movs	r0, #0
 800248e:	e02e      	b.n	80024ee <SPI_WaitFlagStateUntilTimeout.constprop.0+0x92>
    if (Timeout != HAL_MAX_DELAY)
 8002490:	1c73      	adds	r3, r6, #1
 8002492:	d0f7      	beq.n	8002484 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x28>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002494:	f7fe fdbc 	bl	8001010 <HAL_GetTick>
 8002498:	eba0 0008 	sub.w	r0, r0, r8
 800249c:	42a0      	cmp	r0, r4
 800249e:	d329      	bcc.n	80024f4 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x98>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80024a0:	682b      	ldr	r3, [r5, #0]
 80024a2:	685a      	ldr	r2, [r3, #4]
 80024a4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80024a8:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80024aa:	686a      	ldr	r2, [r5, #4]
 80024ac:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 80024b0:	d10a      	bne.n	80024c8 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x6c>
 80024b2:	68aa      	ldr	r2, [r5, #8]
 80024b4:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 80024b8:	d002      	beq.n	80024c0 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x64>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80024ba:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 80024be:	d103      	bne.n	80024c8 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x6c>
          __HAL_SPI_DISABLE(hspi);
 80024c0:	681a      	ldr	r2, [r3, #0]
 80024c2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80024c6:	601a      	str	r2, [r3, #0]
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80024c8:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 80024ca:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 80024ce:	d107      	bne.n	80024e0 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x84>
          SPI_RESET_CRC(hspi);
 80024d0:	681a      	ldr	r2, [r3, #0]
 80024d2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80024d6:	601a      	str	r2, [r3, #0]
 80024d8:	681a      	ldr	r2, [r3, #0]
 80024da:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80024de:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 80024e0:	2301      	movs	r3, #1
 80024e2:	f885 3051 	strb.w	r3, [r5, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 80024e6:	2300      	movs	r3, #0
        return HAL_TIMEOUT;
 80024e8:	2003      	movs	r0, #3
        __HAL_UNLOCK(hspi);
 80024ea:	f885 3050 	strb.w	r3, [r5, #80]	; 0x50
}
 80024ee:	b002      	add	sp, #8
 80024f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if(count == 0U)
 80024f4:	9b01      	ldr	r3, [sp, #4]
        tmp_timeout = 0U;
 80024f6:	2b00      	cmp	r3, #0
      count--;
 80024f8:	9b01      	ldr	r3, [sp, #4]
        tmp_timeout = 0U;
 80024fa:	bf08      	it	eq
 80024fc:	2400      	moveq	r4, #0
      count--;
 80024fe:	3b01      	subs	r3, #1
 8002500:	e7be      	b.n	8002480 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x24>
 8002502:	bf00      	nop
 8002504:	20000014 	.word	0x20000014

08002508 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002508:	b510      	push	{r4, lr}
 800250a:	4613      	mov	r3, r2
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800250c:	460a      	mov	r2, r1
 800250e:	2180      	movs	r1, #128	; 0x80
{
 8002510:	4604      	mov	r4, r0
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002512:	f7ff ffa3 	bl	800245c <SPI_WaitFlagStateUntilTimeout.constprop.0>
 8002516:	b120      	cbz	r0, 8002522 <SPI_EndRxTxTransaction+0x1a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
 8002518:	2003      	movs	r0, #3
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800251a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800251c:	f043 0320 	orr.w	r3, r3, #32
 8002520:	6563      	str	r3, [r4, #84]	; 0x54
  }
  return HAL_OK;
}
 8002522:	bd10      	pop	{r4, pc}

08002524 <HAL_SPI_Init>:
{
 8002524:	b510      	push	{r4, lr}
  if (hspi == NULL)
 8002526:	4604      	mov	r4, r0
 8002528:	2800      	cmp	r0, #0
 800252a:	d051      	beq.n	80025d0 <HAL_SPI_Init+0xac>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800252c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800252e:	2b00      	cmp	r3, #0
 8002530:	d14a      	bne.n	80025c8 <HAL_SPI_Init+0xa4>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002532:	6842      	ldr	r2, [r0, #4]
 8002534:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8002538:	d000      	beq.n	800253c <HAL_SPI_Init+0x18>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800253a:	61c3      	str	r3, [r0, #28]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800253c:	2300      	movs	r3, #0
 800253e:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8002540:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 8002544:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002548:	b923      	cbnz	r3, 8002554 <HAL_SPI_Init+0x30>
    HAL_SPI_MspInit(hspi);
 800254a:	4620      	mov	r0, r4
    hspi->Lock = HAL_UNLOCKED;
 800254c:	f884 2050 	strb.w	r2, [r4, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 8002550:	f7fe fb86 	bl	8000c60 <HAL_SPI_MspInit>
  hspi->State = HAL_SPI_STATE_BUSY;
 8002554:	2302      	movs	r3, #2
  __HAL_SPI_DISABLE(hspi);
 8002556:	6822      	ldr	r2, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 8002558:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 800255c:	6813      	ldr	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800255e:	68a0      	ldr	r0, [r4, #8]
  __HAL_SPI_DISABLE(hspi);
 8002560:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002564:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002566:	6863      	ldr	r3, [r4, #4]
 8002568:	f400 4004 	and.w	r0, r0, #33792	; 0x8400
 800256c:	f403 7382 	and.w	r3, r3, #260	; 0x104
 8002570:	4303      	orrs	r3, r0
 8002572:	68e0      	ldr	r0, [r4, #12]
 8002574:	69a1      	ldr	r1, [r4, #24]
 8002576:	f400 6000 	and.w	r0, r0, #2048	; 0x800
 800257a:	4303      	orrs	r3, r0
 800257c:	6920      	ldr	r0, [r4, #16]
 800257e:	f000 0002 	and.w	r0, r0, #2
 8002582:	4303      	orrs	r3, r0
 8002584:	6960      	ldr	r0, [r4, #20]
 8002586:	f000 0001 	and.w	r0, r0, #1
 800258a:	4303      	orrs	r3, r0
 800258c:	f401 7000 	and.w	r0, r1, #512	; 0x200
 8002590:	4303      	orrs	r3, r0
 8002592:	69e0      	ldr	r0, [r4, #28]
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002594:	0c09      	lsrs	r1, r1, #16
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002596:	f000 0038 	and.w	r0, r0, #56	; 0x38
 800259a:	4303      	orrs	r3, r0
 800259c:	6a20      	ldr	r0, [r4, #32]
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800259e:	f001 0104 	and.w	r1, r1, #4
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80025a2:	f000 0080 	and.w	r0, r0, #128	; 0x80
 80025a6:	4303      	orrs	r3, r0
 80025a8:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80025aa:	f400 5000 	and.w	r0, r0, #8192	; 0x2000
 80025ae:	4303      	orrs	r3, r0
 80025b0:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80025b2:	6051      	str	r1, [r2, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80025b4:	69d3      	ldr	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80025b6:	2000      	movs	r0, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80025b8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80025bc:	61d3      	str	r3, [r2, #28]
  hspi->State     = HAL_SPI_STATE_READY;
 80025be:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80025c0:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80025c2:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
}
 80025c6:	bd10      	pop	{r4, pc}
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80025c8:	2300      	movs	r3, #0
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80025ca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80025ce:	e7b5      	b.n	800253c <HAL_SPI_Init+0x18>
    return HAL_ERROR;
 80025d0:	2001      	movs	r0, #1
 80025d2:	e7f8      	b.n	80025c6 <HAL_SPI_Init+0xa2>

080025d4 <HAL_SPI_Transmit>:
{
 80025d4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80025d8:	461e      	mov	r6, r3
  __HAL_LOCK(hspi);
 80025da:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
{
 80025de:	4604      	mov	r4, r0
  __HAL_LOCK(hspi);
 80025e0:	2b01      	cmp	r3, #1
{
 80025e2:	460d      	mov	r5, r1
 80025e4:	4617      	mov	r7, r2
  __HAL_LOCK(hspi);
 80025e6:	f000 80a0 	beq.w	800272a <HAL_SPI_Transmit+0x156>
 80025ea:	2301      	movs	r3, #1
 80025ec:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 80025f0:	f7fe fd0e 	bl	8001010 <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 80025f4:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
  tickstart = HAL_GetTick();
 80025f8:	4680      	mov	r8, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 80025fa:	2b01      	cmp	r3, #1
 80025fc:	b2d8      	uxtb	r0, r3
 80025fe:	f040 8092 	bne.w	8002726 <HAL_SPI_Transmit+0x152>
  if ((pData == NULL) || (Size == 0U))
 8002602:	2d00      	cmp	r5, #0
 8002604:	d05d      	beq.n	80026c2 <HAL_SPI_Transmit+0xee>
 8002606:	2f00      	cmp	r7, #0
 8002608:	d05b      	beq.n	80026c2 <HAL_SPI_Transmit+0xee>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800260a:	2303      	movs	r3, #3
 800260c:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002610:	2300      	movs	r3, #0
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002612:	68a2      	ldr	r2, [r4, #8]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002614:	6563      	str	r3, [r4, #84]	; 0x54
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002616:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
  hspi->RxISR       = NULL;
 800261a:	e9c4 3310 	strd	r3, r3, [r4, #64]	; 0x40
  hspi->TxXferCount = Size;
 800261e:	86e7      	strh	r7, [r4, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002620:	63a3      	str	r3, [r4, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002622:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002624:	87e3      	strh	r3, [r4, #62]	; 0x3e
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002626:	6325      	str	r5, [r4, #48]	; 0x30
    __HAL_SPI_DISABLE(hspi);
 8002628:	6823      	ldr	r3, [r4, #0]
  hspi->TxXferSize  = Size;
 800262a:	86a7      	strh	r7, [r4, #52]	; 0x34
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800262c:	d107      	bne.n	800263e <HAL_SPI_Transmit+0x6a>
    __HAL_SPI_DISABLE(hspi);
 800262e:	681a      	ldr	r2, [r3, #0]
 8002630:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002634:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002636:	681a      	ldr	r2, [r3, #0]
 8002638:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800263c:	601a      	str	r2, [r3, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800263e:	681a      	ldr	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002640:	68e1      	ldr	r1, [r4, #12]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002642:	0652      	lsls	r2, r2, #25
    __HAL_SPI_ENABLE(hspi);
 8002644:	bf5e      	ittt	pl
 8002646:	681a      	ldrpl	r2, [r3, #0]
 8002648:	f042 0240 	orrpl.w	r2, r2, #64	; 0x40
 800264c:	601a      	strpl	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800264e:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002652:	6862      	ldr	r2, [r4, #4]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002654:	d141      	bne.n	80026da <HAL_SPI_Transmit+0x106>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002656:	b10a      	cbz	r2, 800265c <HAL_SPI_Transmit+0x88>
 8002658:	2f01      	cmp	r7, #1
 800265a:	d107      	bne.n	800266c <HAL_SPI_Transmit+0x98>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800265c:	f835 2b02 	ldrh.w	r2, [r5], #2
 8002660:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002662:	6325      	str	r5, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8002664:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8002666:	3b01      	subs	r3, #1
 8002668:	b29b      	uxth	r3, r3
 800266a:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 800266c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800266e:	b29b      	uxth	r3, r3
 8002670:	b9a3      	cbnz	r3, 800269c <HAL_SPI_Transmit+0xc8>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002672:	4642      	mov	r2, r8
 8002674:	4631      	mov	r1, r6
 8002676:	4620      	mov	r0, r4
 8002678:	f7ff ff46 	bl	8002508 <SPI_EndRxTxTransaction>
 800267c:	2800      	cmp	r0, #0
 800267e:	d14f      	bne.n	8002720 <HAL_SPI_Transmit+0x14c>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002680:	68a3      	ldr	r3, [r4, #8]
 8002682:	b933      	cbnz	r3, 8002692 <HAL_SPI_Transmit+0xbe>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002684:	9301      	str	r3, [sp, #4]
 8002686:	6823      	ldr	r3, [r4, #0]
 8002688:	68da      	ldr	r2, [r3, #12]
 800268a:	9201      	str	r2, [sp, #4]
 800268c:	689b      	ldr	r3, [r3, #8]
 800268e:	9301      	str	r3, [sp, #4]
 8002690:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002692:	6d60      	ldr	r0, [r4, #84]	; 0x54
    errorcode = HAL_BUSY;
 8002694:	3800      	subs	r0, #0
 8002696:	bf18      	it	ne
 8002698:	2001      	movne	r0, #1
error:
 800269a:	e012      	b.n	80026c2 <HAL_SPI_Transmit+0xee>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800269c:	6822      	ldr	r2, [r4, #0]
 800269e:	6893      	ldr	r3, [r2, #8]
 80026a0:	0798      	lsls	r0, r3, #30
 80026a2:	d505      	bpl.n	80026b0 <HAL_SPI_Transmit+0xdc>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80026a4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80026a6:	f833 1b02 	ldrh.w	r1, [r3], #2
 80026aa:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80026ac:	6323      	str	r3, [r4, #48]	; 0x30
 80026ae:	e7d9      	b.n	8002664 <HAL_SPI_Transmit+0x90>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80026b0:	f7fe fcae 	bl	8001010 <HAL_GetTick>
 80026b4:	eba0 0008 	sub.w	r0, r0, r8
 80026b8:	42b0      	cmp	r0, r6
 80026ba:	d30b      	bcc.n	80026d4 <HAL_SPI_Transmit+0x100>
 80026bc:	1c71      	adds	r1, r6, #1
 80026be:	d0d5      	beq.n	800266c <HAL_SPI_Transmit+0x98>
          errorcode = HAL_TIMEOUT;
 80026c0:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 80026c2:	2301      	movs	r3, #1
 80026c4:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80026c8:	2300      	movs	r3, #0
 80026ca:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 80026ce:	b002      	add	sp, #8
 80026d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80026d4:	2e00      	cmp	r6, #0
 80026d6:	d1c9      	bne.n	800266c <HAL_SPI_Transmit+0x98>
 80026d8:	e7f2      	b.n	80026c0 <HAL_SPI_Transmit+0xec>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80026da:	b10a      	cbz	r2, 80026e0 <HAL_SPI_Transmit+0x10c>
 80026dc:	2f01      	cmp	r7, #1
 80026de:	d108      	bne.n	80026f2 <HAL_SPI_Transmit+0x11e>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80026e0:	782a      	ldrb	r2, [r5, #0]
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80026e2:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80026e4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80026e6:	3301      	adds	r3, #1
 80026e8:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 80026ea:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80026ec:	3b01      	subs	r3, #1
 80026ee:	b29b      	uxth	r3, r3
 80026f0:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 80026f2:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80026f4:	b29b      	uxth	r3, r3
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d0bb      	beq.n	8002672 <HAL_SPI_Transmit+0x9e>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80026fa:	6823      	ldr	r3, [r4, #0]
 80026fc:	689a      	ldr	r2, [r3, #8]
 80026fe:	0792      	lsls	r2, r2, #30
 8002700:	d502      	bpl.n	8002708 <HAL_SPI_Transmit+0x134>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002702:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8002704:	7812      	ldrb	r2, [r2, #0]
 8002706:	e7ec      	b.n	80026e2 <HAL_SPI_Transmit+0x10e>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002708:	f7fe fc82 	bl	8001010 <HAL_GetTick>
 800270c:	eba0 0008 	sub.w	r0, r0, r8
 8002710:	42b0      	cmp	r0, r6
 8002712:	d302      	bcc.n	800271a <HAL_SPI_Transmit+0x146>
 8002714:	1c73      	adds	r3, r6, #1
 8002716:	d0ec      	beq.n	80026f2 <HAL_SPI_Transmit+0x11e>
 8002718:	e7d2      	b.n	80026c0 <HAL_SPI_Transmit+0xec>
 800271a:	2e00      	cmp	r6, #0
 800271c:	d1e9      	bne.n	80026f2 <HAL_SPI_Transmit+0x11e>
 800271e:	e7cf      	b.n	80026c0 <HAL_SPI_Transmit+0xec>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002720:	2320      	movs	r3, #32
 8002722:	6563      	str	r3, [r4, #84]	; 0x54
 8002724:	e7ac      	b.n	8002680 <HAL_SPI_Transmit+0xac>
    errorcode = HAL_BUSY;
 8002726:	2002      	movs	r0, #2
 8002728:	e7cb      	b.n	80026c2 <HAL_SPI_Transmit+0xee>
  __HAL_LOCK(hspi);
 800272a:	2002      	movs	r0, #2
 800272c:	e7cf      	b.n	80026ce <HAL_SPI_Transmit+0xfa>
	...

08002730 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002730:	6a03      	ldr	r3, [r0, #32]
{
 8002732:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002734:	f023 0301 	bic.w	r3, r3, #1
 8002738:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800273a:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800273c:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800273e:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002740:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002742:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8002746:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002748:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 800274a:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 800274e:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002750:	4d0a      	ldr	r5, [pc, #40]	; (800277c <TIM_OC1_SetConfig+0x4c>)
 8002752:	42a8      	cmp	r0, r5
 8002754:	d10b      	bne.n	800276e <TIM_OC1_SetConfig+0x3e>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002756:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 8002758:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 800275c:	432b      	orrs	r3, r5
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800275e:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002762:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
 8002766:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 8002768:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 800276c:	432c      	orrs	r4, r5
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800276e:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002770:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002772:	684a      	ldr	r2, [r1, #4]
 8002774:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002776:	6203      	str	r3, [r0, #32]
}
 8002778:	bd70      	pop	{r4, r5, r6, pc}
 800277a:	bf00      	nop
 800277c:	40012c00 	.word	0x40012c00

08002780 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002780:	6a03      	ldr	r3, [r0, #32]
{
 8002782:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002784:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002788:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800278a:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800278c:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800278e:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002790:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002792:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8002796:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002798:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 800279a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800279e:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80027a2:	4d0b      	ldr	r5, [pc, #44]	; (80027d0 <TIM_OC3_SetConfig+0x50>)
 80027a4:	42a8      	cmp	r0, r5
 80027a6:	d10d      	bne.n	80027c4 <TIM_OC3_SetConfig+0x44>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80027a8:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 80027aa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80027ae:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80027b2:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80027b6:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
 80027ba:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC3NE;
 80027bc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80027c0:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80027c4:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80027c6:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80027c8:	684a      	ldr	r2, [r1, #4]
 80027ca:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80027cc:	6203      	str	r3, [r0, #32]
}
 80027ce:	bd70      	pop	{r4, r5, r6, pc}
 80027d0:	40012c00 	.word	0x40012c00

080027d4 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80027d4:	6a03      	ldr	r3, [r0, #32]
{
 80027d6:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80027d8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80027dc:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80027de:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80027e0:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80027e2:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80027e4:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80027e6:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80027ea:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80027ee:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 80027f0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80027f4:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80027f8:	4d06      	ldr	r5, [pc, #24]	; (8002814 <TIM_OC4_SetConfig+0x40>)
 80027fa:	42a8      	cmp	r0, r5

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80027fc:	bf02      	ittt	eq
 80027fe:	694d      	ldreq	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002800:	f424 4480 	biceq.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002804:	ea44 1485 	orreq.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002808:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800280a:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800280c:	684a      	ldr	r2, [r1, #4]
 800280e:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002810:	6203      	str	r3, [r0, #32]
}
 8002812:	bd30      	pop	{r4, r5, pc}
 8002814:	40012c00 	.word	0x40012c00

08002818 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002818:	4a1a      	ldr	r2, [pc, #104]	; (8002884 <TIM_Base_SetConfig+0x6c>)
  tmpcr1 = TIMx->CR1;
 800281a:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800281c:	4290      	cmp	r0, r2
 800281e:	d00a      	beq.n	8002836 <TIM_Base_SetConfig+0x1e>
 8002820:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002824:	d007      	beq.n	8002836 <TIM_Base_SetConfig+0x1e>
 8002826:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800282a:	4290      	cmp	r0, r2
 800282c:	d003      	beq.n	8002836 <TIM_Base_SetConfig+0x1e>
 800282e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002832:	4290      	cmp	r0, r2
 8002834:	d115      	bne.n	8002862 <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= Structure->CounterMode;
 8002836:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002838:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800283c:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800283e:	4a11      	ldr	r2, [pc, #68]	; (8002884 <TIM_Base_SetConfig+0x6c>)
 8002840:	4290      	cmp	r0, r2
 8002842:	d00a      	beq.n	800285a <TIM_Base_SetConfig+0x42>
 8002844:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002848:	d007      	beq.n	800285a <TIM_Base_SetConfig+0x42>
 800284a:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800284e:	4290      	cmp	r0, r2
 8002850:	d003      	beq.n	800285a <TIM_Base_SetConfig+0x42>
 8002852:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002856:	4290      	cmp	r0, r2
 8002858:	d103      	bne.n	8002862 <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800285a:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 800285c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002860:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002862:	694a      	ldr	r2, [r1, #20]
 8002864:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002868:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 800286a:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800286c:	688b      	ldr	r3, [r1, #8]
 800286e:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8002870:	680b      	ldr	r3, [r1, #0]
 8002872:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002874:	4b03      	ldr	r3, [pc, #12]	; (8002884 <TIM_Base_SetConfig+0x6c>)
 8002876:	4298      	cmp	r0, r3
    TIMx->RCR = Structure->RepetitionCounter;
 8002878:	bf04      	itt	eq
 800287a:	690b      	ldreq	r3, [r1, #16]
 800287c:	6303      	streq	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 800287e:	2301      	movs	r3, #1
 8002880:	6143      	str	r3, [r0, #20]
}
 8002882:	4770      	bx	lr
 8002884:	40012c00 	.word	0x40012c00

08002888 <HAL_TIM_PWM_Init>:
{
 8002888:	b510      	push	{r4, lr}
  if (htim == NULL)
 800288a:	4604      	mov	r4, r0
 800288c:	b330      	cbz	r0, 80028dc <HAL_TIM_PWM_Init+0x54>
  if (htim->State == HAL_TIM_STATE_RESET)
 800288e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002892:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002896:	b91b      	cbnz	r3, 80028a0 <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8002898:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 800289c:	f7fe fa40 	bl	8000d20 <HAL_TIM_PWM_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 80028a0:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80028a2:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 80028a4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80028a8:	1d21      	adds	r1, r4, #4
 80028aa:	f7ff ffb5 	bl	8002818 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80028ae:	2301      	movs	r3, #1
  return HAL_OK;
 80028b0:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80028b2:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028b6:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 80028ba:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 80028be:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80028c2:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028c6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80028ca:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80028ce:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80028d2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 80028d6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 80028da:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80028dc:	2001      	movs	r0, #1
 80028de:	e7fc      	b.n	80028da <HAL_TIM_PWM_Init+0x52>

080028e0 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80028e0:	6a03      	ldr	r3, [r0, #32]
{
 80028e2:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80028e4:	f023 0310 	bic.w	r3, r3, #16
 80028e8:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 80028ea:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 80028ec:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 80028ee:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80028f0:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80028f2:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80028f6:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80028fa:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 80028fc:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002900:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002904:	4d0b      	ldr	r5, [pc, #44]	; (8002934 <TIM_OC2_SetConfig+0x54>)
 8002906:	42a8      	cmp	r0, r5
 8002908:	d10d      	bne.n	8002926 <TIM_OC2_SetConfig+0x46>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800290a:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 800290c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002910:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002914:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002918:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
 800291c:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC2NE;
 800291e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002922:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
  TIMx->CR2 = tmpcr2;
 8002926:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8002928:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 800292a:	684a      	ldr	r2, [r1, #4]
 800292c:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 800292e:	6203      	str	r3, [r0, #32]
}
 8002930:	bd70      	pop	{r4, r5, r6, pc}
 8002932:	bf00      	nop
 8002934:	40012c00 	.word	0x40012c00

08002938 <HAL_TIM_PWM_ConfigChannel>:
{
 8002938:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 800293a:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 800293e:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8002940:	2b01      	cmp	r3, #1
 8002942:	d052      	beq.n	80029ea <HAL_TIM_PWM_ConfigChannel+0xb2>
 8002944:	2301      	movs	r3, #1
  switch (Channel)
 8002946:	2a08      	cmp	r2, #8
  __HAL_LOCK(htim);
 8002948:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  switch (Channel)
 800294c:	d03c      	beq.n	80029c8 <HAL_TIM_PWM_ConfigChannel+0x90>
 800294e:	d806      	bhi.n	800295e <HAL_TIM_PWM_ConfigChannel+0x26>
 8002950:	b1c2      	cbz	r2, 8002984 <HAL_TIM_PWM_ConfigChannel+0x4c>
 8002952:	2a04      	cmp	r2, #4
 8002954:	d027      	beq.n	80029a6 <HAL_TIM_PWM_ConfigChannel+0x6e>
  __HAL_UNLOCK(htim);
 8002956:	2000      	movs	r0, #0
 8002958:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 800295c:	bd38      	pop	{r3, r4, r5, pc}
  switch (Channel)
 800295e:	2a0c      	cmp	r2, #12
 8002960:	d1f9      	bne.n	8002956 <HAL_TIM_PWM_ConfigChannel+0x1e>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002962:	6800      	ldr	r0, [r0, #0]
 8002964:	f7ff ff36 	bl	80027d4 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002968:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800296a:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800296c:	69da      	ldr	r2, [r3, #28]
 800296e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002972:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002974:	69da      	ldr	r2, [r3, #28]
 8002976:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800297a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800297c:	69da      	ldr	r2, [r3, #28]
 800297e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002982:	e030      	b.n	80029e6 <HAL_TIM_PWM_ConfigChannel+0xae>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002984:	6800      	ldr	r0, [r0, #0]
 8002986:	f7ff fed3 	bl	8002730 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800298a:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800298c:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800298e:	699a      	ldr	r2, [r3, #24]
 8002990:	f042 0208 	orr.w	r2, r2, #8
 8002994:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002996:	699a      	ldr	r2, [r3, #24]
 8002998:	f022 0204 	bic.w	r2, r2, #4
 800299c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800299e:	699a      	ldr	r2, [r3, #24]
 80029a0:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80029a2:	619a      	str	r2, [r3, #24]
      break;
 80029a4:	e7d7      	b.n	8002956 <HAL_TIM_PWM_ConfigChannel+0x1e>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80029a6:	6800      	ldr	r0, [r0, #0]
 80029a8:	f7ff ff9a 	bl	80028e0 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80029ac:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80029ae:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80029b0:	699a      	ldr	r2, [r3, #24]
 80029b2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80029b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80029b8:	699a      	ldr	r2, [r3, #24]
 80029ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80029be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80029c0:	699a      	ldr	r2, [r3, #24]
 80029c2:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80029c6:	e7ec      	b.n	80029a2 <HAL_TIM_PWM_ConfigChannel+0x6a>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80029c8:	6800      	ldr	r0, [r0, #0]
 80029ca:	f7ff fed9 	bl	8002780 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80029ce:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80029d0:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80029d2:	69da      	ldr	r2, [r3, #28]
 80029d4:	f042 0208 	orr.w	r2, r2, #8
 80029d8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80029da:	69da      	ldr	r2, [r3, #28]
 80029dc:	f022 0204 	bic.w	r2, r2, #4
 80029e0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80029e2:	69da      	ldr	r2, [r3, #28]
 80029e4:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80029e6:	61da      	str	r2, [r3, #28]
      break;
 80029e8:	e7b5      	b.n	8002956 <HAL_TIM_PWM_ConfigChannel+0x1e>
  __HAL_LOCK(htim);
 80029ea:	2002      	movs	r0, #2
 80029ec:	e7b6      	b.n	800295c <HAL_TIM_PWM_ConfigChannel+0x24>

080029ee <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80029ee:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80029f0:	2401      	movs	r4, #1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80029f2:	6a03      	ldr	r3, [r0, #32]
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80029f4:	f001 011f 	and.w	r1, r1, #31
 80029f8:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 80029fa:	ea23 0304 	bic.w	r3, r3, r4
 80029fe:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002a00:	6a03      	ldr	r3, [r0, #32]
 8002a02:	408a      	lsls	r2, r1
 8002a04:	431a      	orrs	r2, r3
 8002a06:	6202      	str	r2, [r0, #32]
}
 8002a08:	bd10      	pop	{r4, pc}
	...

08002a0c <HAL_TIM_OC_Start>:
{
 8002a0c:	b510      	push	{r4, lr}
 8002a0e:	4604      	mov	r4, r0
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002a10:	b929      	cbnz	r1, 8002a1e <HAL_TIM_OC_Start+0x12>
 8002a12:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8002a16:	2b01      	cmp	r3, #1
 8002a18:	d021      	beq.n	8002a5e <HAL_TIM_OC_Start+0x52>
    return HAL_ERROR;
 8002a1a:	2001      	movs	r0, #1
}
 8002a1c:	bd10      	pop	{r4, pc}
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002a1e:	2904      	cmp	r1, #4
 8002a20:	d107      	bne.n	8002a32 <HAL_TIM_OC_Start+0x26>
 8002a22:	f890 303f 	ldrb.w	r3, [r0, #63]	; 0x3f
 8002a26:	2b01      	cmp	r3, #1
 8002a28:	d1f7      	bne.n	8002a1a <HAL_TIM_OC_Start+0xe>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002a2a:	2302      	movs	r3, #2
 8002a2c:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8002a30:	e018      	b.n	8002a64 <HAL_TIM_OC_Start+0x58>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002a32:	2908      	cmp	r1, #8
 8002a34:	d107      	bne.n	8002a46 <HAL_TIM_OC_Start+0x3a>
 8002a36:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8002a3a:	2b01      	cmp	r3, #1
 8002a3c:	d1ed      	bne.n	8002a1a <HAL_TIM_OC_Start+0xe>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002a3e:	2302      	movs	r3, #2
 8002a40:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8002a44:	e00e      	b.n	8002a64 <HAL_TIM_OC_Start+0x58>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002a46:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8002a4a:	2b01      	cmp	r3, #1
 8002a4c:	d1e5      	bne.n	8002a1a <HAL_TIM_OC_Start+0xe>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002a4e:	2904      	cmp	r1, #4
 8002a50:	d0eb      	beq.n	8002a2a <HAL_TIM_OC_Start+0x1e>
 8002a52:	2908      	cmp	r1, #8
 8002a54:	d0f3      	beq.n	8002a3e <HAL_TIM_OC_Start+0x32>
 8002a56:	2302      	movs	r3, #2
 8002a58:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
 8002a5c:	e002      	b.n	8002a64 <HAL_TIM_OC_Start+0x58>
 8002a5e:	2302      	movs	r3, #2
 8002a60:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002a64:	2201      	movs	r2, #1
 8002a66:	6820      	ldr	r0, [r4, #0]
 8002a68:	f7ff ffc1 	bl	80029ee <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002a6c:	6823      	ldr	r3, [r4, #0]
 8002a6e:	4a0e      	ldr	r2, [pc, #56]	; (8002aa8 <HAL_TIM_OC_Start+0x9c>)
 8002a70:	4293      	cmp	r3, r2
 8002a72:	d10a      	bne.n	8002a8a <HAL_TIM_OC_Start+0x7e>
    __HAL_TIM_MOE_ENABLE(htim);
 8002a74:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002a76:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002a7a:	645a      	str	r2, [r3, #68]	; 0x44
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002a7c:	689a      	ldr	r2, [r3, #8]
 8002a7e:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a82:	2a06      	cmp	r2, #6
 8002a84:	d10b      	bne.n	8002a9e <HAL_TIM_OC_Start+0x92>
  return HAL_OK;
 8002a86:	2000      	movs	r0, #0
 8002a88:	e7c8      	b.n	8002a1c <HAL_TIM_OC_Start+0x10>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a8e:	d0f5      	beq.n	8002a7c <HAL_TIM_OC_Start+0x70>
 8002a90:	4a06      	ldr	r2, [pc, #24]	; (8002aac <HAL_TIM_OC_Start+0xa0>)
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d0f2      	beq.n	8002a7c <HAL_TIM_OC_Start+0x70>
 8002a96:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	d0ee      	beq.n	8002a7c <HAL_TIM_OC_Start+0x70>
    __HAL_TIM_ENABLE(htim);
 8002a9e:	681a      	ldr	r2, [r3, #0]
 8002aa0:	f042 0201 	orr.w	r2, r2, #1
 8002aa4:	601a      	str	r2, [r3, #0]
 8002aa6:	e7ee      	b.n	8002a86 <HAL_TIM_OC_Start+0x7a>
 8002aa8:	40012c00 	.word	0x40012c00
 8002aac:	40000400 	.word	0x40000400

08002ab0 <HAL_TIM_PWM_Start>:
 8002ab0:	f7ff bfac 	b.w	8002a0c <HAL_TIM_OC_Start>

08002ab4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002ab4:	b530      	push	{r4, r5, lr}
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002ab6:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8002aba:	4602      	mov	r2, r0
  __HAL_LOCK(htim);
 8002abc:	2b01      	cmp	r3, #1
 8002abe:	f04f 0002 	mov.w	r0, #2
 8002ac2:	d022      	beq.n	8002b0a <HAL_TIMEx_MasterConfigSynchronization+0x56>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002ac4:	6813      	ldr	r3, [r2, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8002ac6:	f882 003d 	strb.w	r0, [r2, #61]	; 0x3d
  tmpcr2 = htim->Instance->CR2;
 8002aca:	685c      	ldr	r4, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002acc:	680d      	ldr	r5, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 8002ace:	f024 0470 	bic.w	r4, r4, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002ad2:	432c      	orrs	r4, r5
  tmpsmcr = htim->Instance->SMCR;
 8002ad4:	6898      	ldr	r0, [r3, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002ad6:	605c      	str	r4, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ad8:	4c0c      	ldr	r4, [pc, #48]	; (8002b0c <HAL_TIMEx_MasterConfigSynchronization+0x58>)
 8002ada:	42a3      	cmp	r3, r4
 8002adc:	d00a      	beq.n	8002af4 <HAL_TIMEx_MasterConfigSynchronization+0x40>
 8002ade:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ae2:	d007      	beq.n	8002af4 <HAL_TIMEx_MasterConfigSynchronization+0x40>
 8002ae4:	f5a4 3494 	sub.w	r4, r4, #75776	; 0x12800
 8002ae8:	42a3      	cmp	r3, r4
 8002aea:	d003      	beq.n	8002af4 <HAL_TIMEx_MasterConfigSynchronization+0x40>
 8002aec:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002af0:	42a3      	cmp	r3, r4
 8002af2:	d104      	bne.n	8002afe <HAL_TIMEx_MasterConfigSynchronization+0x4a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002af4:	6849      	ldr	r1, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002af6:	f020 0080 	bic.w	r0, r0, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002afa:	4301      	orrs	r1, r0

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002afc:	6099      	str	r1, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002afe:	2301      	movs	r3, #1

  __HAL_UNLOCK(htim);
 8002b00:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8002b02:	f882 303d 	strb.w	r3, [r2, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8002b06:	f882 003c 	strb.w	r0, [r2, #60]	; 0x3c

  return HAL_OK;
}
 8002b0a:	bd30      	pop	{r4, r5, pc}
 8002b0c:	40012c00 	.word	0x40012c00

08002b10 <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8002b10:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002b14:	2b01      	cmp	r3, #1
 8002b16:	d01f      	beq.n	8002b58 <HAL_TIMEx_ConfigBreakDeadTime+0x48>
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002b18:	68cb      	ldr	r3, [r1, #12]
 8002b1a:	688a      	ldr	r2, [r1, #8]
 8002b1c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b20:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002b22:	684a      	ldr	r2, [r1, #4]
 8002b24:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002b28:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8002b2a:	680a      	ldr	r2, [r1, #0]
 8002b2c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002b30:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8002b32:	690a      	ldr	r2, [r1, #16]
 8002b34:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002b38:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8002b3a:	694a      	ldr	r2, [r1, #20]
 8002b3c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002b40:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002b42:	69ca      	ldr	r2, [r1, #28]
 8002b44:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002b48:	4313      	orrs	r3, r2


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8002b4a:	6802      	ldr	r2, [r0, #0]
 8002b4c:	6453      	str	r3, [r2, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8002b4e:	2300      	movs	r3, #0
 8002b50:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 8002b54:	4618      	mov	r0, r3
 8002b56:	4770      	bx	lr
  __HAL_LOCK(htim);
 8002b58:	2002      	movs	r0, #2
}
 8002b5a:	4770      	bx	lr

08002b5c <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002b5c:	6803      	ldr	r3, [r0, #0]
 8002b5e:	68da      	ldr	r2, [r3, #12]
 8002b60:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002b64:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b66:	695a      	ldr	r2, [r3, #20]
 8002b68:	f022 0201 	bic.w	r2, r2, #1
 8002b6c:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002b6e:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8002b70:	2a01      	cmp	r2, #1
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002b72:	bf02      	ittt	eq
 8002b74:	68da      	ldreq	r2, [r3, #12]
 8002b76:	f022 0210 	biceq.w	r2, r2, #16
 8002b7a:	60da      	streq	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002b7c:	2320      	movs	r3, #32
 8002b7e:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b82:	2300      	movs	r3, #0
 8002b84:	6303      	str	r3, [r0, #48]	; 0x30
}
 8002b86:	4770      	bx	lr

08002b88 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002b88:	b510      	push	{r4, lr}
 8002b8a:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002b8c:	6803      	ldr	r3, [r0, #0]
 8002b8e:	68c1      	ldr	r1, [r0, #12]
 8002b90:	691a      	ldr	r2, [r3, #16]
 8002b92:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8002b96:	430a      	orrs	r2, r1
 8002b98:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002b9a:	6882      	ldr	r2, [r0, #8]
 8002b9c:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1,
 8002b9e:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002ba0:	4302      	orrs	r2, r0
 8002ba2:	6960      	ldr	r0, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 8002ba4:	f421 51b0 	bic.w	r1, r1, #5632	; 0x1600
 8002ba8:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002bac:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 8002bae:	430a      	orrs	r2, r1
 8002bb0:	60da      	str	r2, [r3, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002bb2:	695a      	ldr	r2, [r3, #20]
 8002bb4:	69a1      	ldr	r1, [r4, #24]
 8002bb6:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002bba:	430a      	orrs	r2, r1
 8002bbc:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002bbe:	4a0e      	ldr	r2, [pc, #56]	; (8002bf8 <UART_SetConfig+0x70>)
 8002bc0:	4293      	cmp	r3, r2
 8002bc2:	d115      	bne.n	8002bf0 <UART_SetConfig+0x68>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002bc4:	f7ff f992 	bl	8001eec <HAL_RCC_GetPCLK2Freq>
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002bc8:	2319      	movs	r3, #25
 8002bca:	4343      	muls	r3, r0
 8002bcc:	6862      	ldr	r2, [r4, #4]
 8002bce:	6820      	ldr	r0, [r4, #0]
 8002bd0:	0092      	lsls	r2, r2, #2
 8002bd2:	fbb3 f3f2 	udiv	r3, r3, r2
 8002bd6:	2264      	movs	r2, #100	; 0x64
 8002bd8:	fbb3 f1f2 	udiv	r1, r3, r2
 8002bdc:	fb02 3311 	mls	r3, r2, r1, r3
 8002be0:	011b      	lsls	r3, r3, #4
 8002be2:	3332      	adds	r3, #50	; 0x32
 8002be4:	fbb3 f3f2 	udiv	r3, r3, r2
 8002be8:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8002bec:	6083      	str	r3, [r0, #8]
#endif /* USART_CR1_OVER8 */
}
 8002bee:	bd10      	pop	{r4, pc}
    pclk = HAL_RCC_GetPCLK1Freq();
 8002bf0:	f7ff f96c 	bl	8001ecc <HAL_RCC_GetPCLK1Freq>
 8002bf4:	e7e8      	b.n	8002bc8 <UART_SetConfig+0x40>
 8002bf6:	bf00      	nop
 8002bf8:	40013800 	.word	0x40013800

08002bfc <HAL_UART_Init>:
{
 8002bfc:	b510      	push	{r4, lr}
  if (huart == NULL)
 8002bfe:	4604      	mov	r4, r0
 8002c00:	b340      	cbz	r0, 8002c54 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 8002c02:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002c06:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002c0a:	b91b      	cbnz	r3, 8002c14 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8002c0c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_UART_MspInit(huart);
 8002c10:	f7fe f8c2 	bl	8000d98 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8002c14:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8002c16:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8002c18:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UART_DISABLE(huart);
 8002c1c:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 8002c1e:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 8002c20:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002c24:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8002c26:	f7ff ffaf 	bl	8002b88 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002c2a:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c2c:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002c2e:	691a      	ldr	r2, [r3, #16]
 8002c30:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002c34:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002c36:	695a      	ldr	r2, [r3, #20]
 8002c38:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002c3c:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8002c3e:	68da      	ldr	r2, [r3, #12]
 8002c40:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002c44:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8002c46:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c48:	6420      	str	r0, [r4, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002c4a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002c4e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
}
 8002c52:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002c54:	2001      	movs	r0, #1
 8002c56:	e7fc      	b.n	8002c52 <HAL_UART_Init+0x56>

08002c58 <HAL_UART_ErrorCallback>:
 8002c58:	4770      	bx	lr

08002c5a <UART_DMAAbortOnError>:
{
 8002c5a:	b508      	push	{r3, lr}
  huart->RxXferCount = 0x00U;
 8002c5c:	2300      	movs	r3, #0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002c5e:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0x00U;
 8002c60:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002c62:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 8002c64:	f7ff fff8 	bl	8002c58 <HAL_UART_ErrorCallback>
}
 8002c68:	bd08      	pop	{r3, pc}

08002c6a <HAL_UARTEx_RxEventCallback>:
}
 8002c6a:	4770      	bx	lr

08002c6c <UART_Receive_IT.part.0.isra.0>:
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
 8002c6c:	b507      	push	{r0, r1, r2, lr}
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c6e:	6881      	ldr	r1, [r0, #8]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002c70:	6a83      	ldr	r3, [r0, #40]	; 0x28
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c72:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002c76:	6802      	ldr	r2, [r0, #0]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c78:	d134      	bne.n	8002ce4 <UART_Receive_IT.part.0.isra.0+0x78>
 8002c7a:	6901      	ldr	r1, [r0, #16]
 8002c7c:	2900      	cmp	r1, #0
 8002c7e:	d134      	bne.n	8002cea <UART_Receive_IT.part.0.isra.0+0x7e>
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002c80:	6852      	ldr	r2, [r2, #4]
 8002c82:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002c86:	f823 2b02 	strh.w	r2, [r3], #2
    if (--huart->RxXferCount == 0U)
 8002c8a:	8dc2      	ldrh	r2, [r0, #46]	; 0x2e
      huart->pRxBuffPtr += 1U;
 8002c8c:	6283      	str	r3, [r0, #40]	; 0x28
    if (--huart->RxXferCount == 0U)
 8002c8e:	3a01      	subs	r2, #1
 8002c90:	b292      	uxth	r2, r2
 8002c92:	85c2      	strh	r2, [r0, #46]	; 0x2e
 8002c94:	bb1a      	cbnz	r2, 8002cde <UART_Receive_IT.part.0.isra.0+0x72>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002c96:	6803      	ldr	r3, [r0, #0]
 8002c98:	68d9      	ldr	r1, [r3, #12]
 8002c9a:	f021 0120 	bic.w	r1, r1, #32
 8002c9e:	60d9      	str	r1, [r3, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002ca0:	68d9      	ldr	r1, [r3, #12]
 8002ca2:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8002ca6:	60d9      	str	r1, [r3, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002ca8:	6959      	ldr	r1, [r3, #20]
 8002caa:	f021 0101 	bic.w	r1, r1, #1
 8002cae:	6159      	str	r1, [r3, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8002cb0:	2120      	movs	r1, #32
 8002cb2:	f880 103e 	strb.w	r1, [r0, #62]	; 0x3e
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002cb6:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8002cb8:	2901      	cmp	r1, #1
 8002cba:	d120      	bne.n	8002cfe <UART_Receive_IT.part.0.isra.0+0x92>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002cbc:	6302      	str	r2, [r0, #48]	; 0x30
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002cbe:	68d9      	ldr	r1, [r3, #12]
 8002cc0:	f021 0110 	bic.w	r1, r1, #16
 8002cc4:	60d9      	str	r1, [r3, #12]
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002cc6:	6819      	ldr	r1, [r3, #0]
 8002cc8:	06c9      	lsls	r1, r1, #27
 8002cca:	d505      	bpl.n	8002cd8 <UART_Receive_IT.part.0.isra.0+0x6c>
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002ccc:	9201      	str	r2, [sp, #4]
 8002cce:	681a      	ldr	r2, [r3, #0]
 8002cd0:	9201      	str	r2, [sp, #4]
 8002cd2:	685b      	ldr	r3, [r3, #4]
 8002cd4:	9301      	str	r3, [sp, #4]
 8002cd6:	9b01      	ldr	r3, [sp, #4]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002cd8:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8002cda:	f7ff ffc6 	bl	8002c6a <HAL_UARTEx_RxEventCallback>
}
 8002cde:	b003      	add	sp, #12
 8002ce0:	f85d fb04 	ldr.w	pc, [sp], #4
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002ce4:	b939      	cbnz	r1, 8002cf6 <UART_Receive_IT.part.0.isra.0+0x8a>
 8002ce6:	6901      	ldr	r1, [r0, #16]
 8002ce8:	b929      	cbnz	r1, 8002cf6 <UART_Receive_IT.part.0.isra.0+0x8a>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002cea:	6852      	ldr	r2, [r2, #4]
 8002cec:	b2d2      	uxtb	r2, r2
 8002cee:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr += 1U;
 8002cf0:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8002cf2:	3301      	adds	r3, #1
 8002cf4:	e7c9      	b.n	8002c8a <UART_Receive_IT.part.0.isra.0+0x1e>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002cf6:	6852      	ldr	r2, [r2, #4]
 8002cf8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002cfc:	e7f7      	b.n	8002cee <UART_Receive_IT.part.0.isra.0+0x82>
       HAL_UART_RxCpltCallback(huart);
 8002cfe:	f7fd fead 	bl	8000a5c <HAL_UART_RxCpltCallback>
 8002d02:	e7ec      	b.n	8002cde <UART_Receive_IT.part.0.isra.0+0x72>

08002d04 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002d04:	6803      	ldr	r3, [r0, #0]
{
 8002d06:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002d08:	681a      	ldr	r2, [r3, #0]
{
 8002d0a:	4604      	mov	r4, r0
  if (errorflags == RESET)
 8002d0c:	f012 0f0f 	tst.w	r2, #15
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002d10:	68d9      	ldr	r1, [r3, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002d12:	695d      	ldr	r5, [r3, #20]
  if (errorflags == RESET)
 8002d14:	d10c      	bne.n	8002d30 <HAL_UART_IRQHandler+0x2c>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002d16:	0695      	lsls	r5, r2, #26
 8002d18:	d567      	bpl.n	8002dea <HAL_UART_IRQHandler+0xe6>
 8002d1a:	068d      	lsls	r5, r1, #26
 8002d1c:	d565      	bpl.n	8002dea <HAL_UART_IRQHandler+0xe6>
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002d1e:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8002d22:	2b22      	cmp	r3, #34	; 0x22
 8002d24:	d15b      	bne.n	8002dde <HAL_UART_IRQHandler+0xda>
}
 8002d26:	b003      	add	sp, #12
 8002d28:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002d2c:	f7ff bf9e 	b.w	8002c6c <UART_Receive_IT.part.0.isra.0>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002d30:	f005 0001 	and.w	r0, r5, #1
 8002d34:	f401 7590 	and.w	r5, r1, #288	; 0x120
 8002d38:	4305      	orrs	r5, r0
 8002d3a:	d056      	beq.n	8002dea <HAL_UART_IRQHandler+0xe6>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002d3c:	07d5      	lsls	r5, r2, #31
 8002d3e:	d505      	bpl.n	8002d4c <HAL_UART_IRQHandler+0x48>
 8002d40:	05cb      	lsls	r3, r1, #23
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002d42:	bf42      	ittt	mi
 8002d44:	6c23      	ldrmi	r3, [r4, #64]	; 0x40
 8002d46:	f043 0301 	orrmi.w	r3, r3, #1
 8002d4a:	6423      	strmi	r3, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002d4c:	0755      	lsls	r5, r2, #29
 8002d4e:	d504      	bpl.n	8002d5a <HAL_UART_IRQHandler+0x56>
 8002d50:	b118      	cbz	r0, 8002d5a <HAL_UART_IRQHandler+0x56>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002d52:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002d54:	f043 0302 	orr.w	r3, r3, #2
 8002d58:	6423      	str	r3, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002d5a:	0793      	lsls	r3, r2, #30
 8002d5c:	d504      	bpl.n	8002d68 <HAL_UART_IRQHandler+0x64>
 8002d5e:	b118      	cbz	r0, 8002d68 <HAL_UART_IRQHandler+0x64>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002d60:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002d62:	f043 0304 	orr.w	r3, r3, #4
 8002d66:	6423      	str	r3, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8002d68:	0715      	lsls	r5, r2, #28
 8002d6a:	d507      	bpl.n	8002d7c <HAL_UART_IRQHandler+0x78>
 8002d6c:	f001 0320 	and.w	r3, r1, #32
 8002d70:	4303      	orrs	r3, r0
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002d72:	bf1e      	ittt	ne
 8002d74:	6c23      	ldrne	r3, [r4, #64]	; 0x40
 8002d76:	f043 0308 	orrne.w	r3, r3, #8
 8002d7a:	6423      	strne	r3, [r4, #64]	; 0x40
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002d7c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002d7e:	b373      	cbz	r3, 8002dde <HAL_UART_IRQHandler+0xda>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002d80:	0692      	lsls	r2, r2, #26
 8002d82:	d508      	bpl.n	8002d96 <HAL_UART_IRQHandler+0x92>
 8002d84:	068b      	lsls	r3, r1, #26
 8002d86:	d506      	bpl.n	8002d96 <HAL_UART_IRQHandler+0x92>
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002d88:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 8002d8c:	2b22      	cmp	r3, #34	; 0x22
 8002d8e:	d102      	bne.n	8002d96 <HAL_UART_IRQHandler+0x92>
 8002d90:	4620      	mov	r0, r4
 8002d92:	f7ff ff6b 	bl	8002c6c <UART_Receive_IT.part.0.isra.0>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002d96:	6823      	ldr	r3, [r4, #0]
        UART_EndRxTransfer(huart);
 8002d98:	4620      	mov	r0, r4
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002d9a:	695b      	ldr	r3, [r3, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002d9c:	6c25      	ldr	r5, [r4, #64]	; 0x40
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002d9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002da2:	f005 0508 	and.w	r5, r5, #8
 8002da6:	431d      	orrs	r5, r3
 8002da8:	d01b      	beq.n	8002de2 <HAL_UART_IRQHandler+0xde>
        UART_EndRxTransfer(huart);
 8002daa:	f7ff fed7 	bl	8002b5c <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002dae:	6823      	ldr	r3, [r4, #0]
 8002db0:	695a      	ldr	r2, [r3, #20]
 8002db2:	0655      	lsls	r5, r2, #25
 8002db4:	d510      	bpl.n	8002dd8 <HAL_UART_IRQHandler+0xd4>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002db6:	695a      	ldr	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 8002db8:	6ba0      	ldr	r0, [r4, #56]	; 0x38
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002dba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002dbe:	615a      	str	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 8002dc0:	b150      	cbz	r0, 8002dd8 <HAL_UART_IRQHandler+0xd4>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002dc2:	4b53      	ldr	r3, [pc, #332]	; (8002f10 <HAL_UART_IRQHandler+0x20c>)
 8002dc4:	6343      	str	r3, [r0, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002dc6:	f7fe fc51 	bl	800166c <HAL_DMA_Abort_IT>
 8002dca:	b140      	cbz	r0, 8002dde <HAL_UART_IRQHandler+0xda>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002dcc:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8002dce:	6b43      	ldr	r3, [r0, #52]	; 0x34
}
 8002dd0:	b003      	add	sp, #12
 8002dd2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002dd6:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 8002dd8:	4620      	mov	r0, r4
 8002dda:	f7ff ff3d 	bl	8002c58 <HAL_UART_ErrorCallback>
}
 8002dde:	b003      	add	sp, #12
 8002de0:	bd30      	pop	{r4, r5, pc}
        HAL_UART_ErrorCallback(huart);
 8002de2:	f7ff ff39 	bl	8002c58 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002de6:	6425      	str	r5, [r4, #64]	; 0x40
 8002de8:	e7f9      	b.n	8002dde <HAL_UART_IRQHandler+0xda>
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002dea:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8002dec:	2801      	cmp	r0, #1
 8002dee:	d155      	bne.n	8002e9c <HAL_UART_IRQHandler+0x198>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8002df0:	06d0      	lsls	r0, r2, #27
 8002df2:	d553      	bpl.n	8002e9c <HAL_UART_IRQHandler+0x198>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8002df4:	06cd      	lsls	r5, r1, #27
 8002df6:	d551      	bpl.n	8002e9c <HAL_UART_IRQHandler+0x198>
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002df8:	2100      	movs	r1, #0
 8002dfa:	9101      	str	r1, [sp, #4]
 8002dfc:	681a      	ldr	r2, [r3, #0]
 8002dfe:	9201      	str	r2, [sp, #4]
 8002e00:	685a      	ldr	r2, [r3, #4]
 8002e02:	9201      	str	r2, [sp, #4]
 8002e04:	9a01      	ldr	r2, [sp, #4]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e06:	695a      	ldr	r2, [r3, #20]
 8002e08:	f012 0240 	ands.w	r2, r2, #64	; 0x40
 8002e0c:	d02a      	beq.n	8002e64 <HAL_UART_IRQHandler+0x160>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002e0e:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8002e10:	6802      	ldr	r2, [r0, #0]
 8002e12:	6852      	ldr	r2, [r2, #4]
 8002e14:	b292      	uxth	r2, r2
      if (  (nb_remaining_rx_data > 0U)
 8002e16:	2a00      	cmp	r2, #0
 8002e18:	d0e1      	beq.n	8002dde <HAL_UART_IRQHandler+0xda>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8002e1a:	8da5      	ldrh	r5, [r4, #44]	; 0x2c
 8002e1c:	4295      	cmp	r5, r2
 8002e1e:	d9de      	bls.n	8002dde <HAL_UART_IRQHandler+0xda>
        huart->RxXferCount = nb_remaining_rx_data;
 8002e20:	85e2      	strh	r2, [r4, #46]	; 0x2e
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002e22:	6982      	ldr	r2, [r0, #24]
 8002e24:	2a20      	cmp	r2, #32
 8002e26:	d015      	beq.n	8002e54 <HAL_UART_IRQHandler+0x150>
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002e28:	68da      	ldr	r2, [r3, #12]
 8002e2a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002e2e:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e30:	695a      	ldr	r2, [r3, #20]
 8002e32:	f022 0201 	bic.w	r2, r2, #1
 8002e36:	615a      	str	r2, [r3, #20]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002e38:	695a      	ldr	r2, [r3, #20]
 8002e3a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002e3e:	615a      	str	r2, [r3, #20]
          huart->RxState = HAL_UART_STATE_READY;
 8002e40:	2220      	movs	r2, #32
 8002e42:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e46:	6321      	str	r1, [r4, #48]	; 0x30
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002e48:	68da      	ldr	r2, [r3, #12]
 8002e4a:	f022 0210 	bic.w	r2, r2, #16
 8002e4e:	60da      	str	r2, [r3, #12]
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002e50:	f7fe fbee 	bl	8001630 <HAL_DMA_Abort>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002e54:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 8002e56:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 8002e58:	1ac9      	subs	r1, r1, r3
 8002e5a:	b289      	uxth	r1, r1
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002e5c:	4620      	mov	r0, r4
 8002e5e:	f7ff ff04 	bl	8002c6a <HAL_UARTEx_RxEventCallback>
 8002e62:	e7bc      	b.n	8002dde <HAL_UART_IRQHandler+0xda>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002e64:	8de1      	ldrh	r1, [r4, #46]	; 0x2e
 8002e66:	b288      	uxth	r0, r1
      if (  (huart->RxXferCount > 0U)
 8002e68:	8de1      	ldrh	r1, [r4, #46]	; 0x2e
 8002e6a:	b289      	uxth	r1, r1
 8002e6c:	2900      	cmp	r1, #0
 8002e6e:	d0b6      	beq.n	8002dde <HAL_UART_IRQHandler+0xda>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002e70:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 8002e72:	1a09      	subs	r1, r1, r0
 8002e74:	b289      	uxth	r1, r1
          &&(nb_rx_data > 0U) )
 8002e76:	2900      	cmp	r1, #0
 8002e78:	d0b1      	beq.n	8002dde <HAL_UART_IRQHandler+0xda>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002e7a:	68d8      	ldr	r0, [r3, #12]
 8002e7c:	f420 7090 	bic.w	r0, r0, #288	; 0x120
 8002e80:	60d8      	str	r0, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e82:	6958      	ldr	r0, [r3, #20]
 8002e84:	f020 0001 	bic.w	r0, r0, #1
 8002e88:	6158      	str	r0, [r3, #20]
        huart->RxState = HAL_UART_STATE_READY;
 8002e8a:	2020      	movs	r0, #32
 8002e8c:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e90:	6322      	str	r2, [r4, #48]	; 0x30
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002e92:	68da      	ldr	r2, [r3, #12]
 8002e94:	f022 0210 	bic.w	r2, r2, #16
 8002e98:	60da      	str	r2, [r3, #12]
 8002e9a:	e7df      	b.n	8002e5c <HAL_UART_IRQHandler+0x158>
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002e9c:	0610      	lsls	r0, r2, #24
 8002e9e:	d526      	bpl.n	8002eee <HAL_UART_IRQHandler+0x1ea>
 8002ea0:	060d      	lsls	r5, r1, #24
 8002ea2:	d524      	bpl.n	8002eee <HAL_UART_IRQHandler+0x1ea>
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002ea4:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 8002ea8:	2a21      	cmp	r2, #33	; 0x21
 8002eaa:	d198      	bne.n	8002dde <HAL_UART_IRQHandler+0xda>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002eac:	68a1      	ldr	r1, [r4, #8]
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8002eae:	6a22      	ldr	r2, [r4, #32]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002eb0:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8002eb4:	d116      	bne.n	8002ee4 <HAL_UART_IRQHandler+0x1e0>
 8002eb6:	6921      	ldr	r1, [r4, #16]
 8002eb8:	b9a1      	cbnz	r1, 8002ee4 <HAL_UART_IRQHandler+0x1e0>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002eba:	f832 1b02 	ldrh.w	r1, [r2], #2
 8002ebe:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8002ec2:	6059      	str	r1, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002ec4:	6222      	str	r2, [r4, #32]
    if (--huart->TxXferCount == 0U)
 8002ec6:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 8002ec8:	3a01      	subs	r2, #1
 8002eca:	b292      	uxth	r2, r2
 8002ecc:	84e2      	strh	r2, [r4, #38]	; 0x26
 8002ece:	2a00      	cmp	r2, #0
 8002ed0:	d185      	bne.n	8002dde <HAL_UART_IRQHandler+0xda>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002ed2:	68da      	ldr	r2, [r3, #12]
 8002ed4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002ed8:	60da      	str	r2, [r3, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002eda:	68da      	ldr	r2, [r3, #12]
 8002edc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002ee0:	60da      	str	r2, [r3, #12]
 8002ee2:	e77c      	b.n	8002dde <HAL_UART_IRQHandler+0xda>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002ee4:	1c51      	adds	r1, r2, #1
 8002ee6:	6221      	str	r1, [r4, #32]
 8002ee8:	7812      	ldrb	r2, [r2, #0]
 8002eea:	605a      	str	r2, [r3, #4]
 8002eec:	e7eb      	b.n	8002ec6 <HAL_UART_IRQHandler+0x1c2>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002eee:	0650      	lsls	r0, r2, #25
 8002ef0:	f57f af75 	bpl.w	8002dde <HAL_UART_IRQHandler+0xda>
 8002ef4:	064a      	lsls	r2, r1, #25
 8002ef6:	f57f af72 	bpl.w	8002dde <HAL_UART_IRQHandler+0xda>
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002efa:	68da      	ldr	r2, [r3, #12]
  HAL_UART_TxCpltCallback(huart);
 8002efc:	4620      	mov	r0, r4
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002efe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002f02:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8002f04:	2320      	movs	r3, #32
 8002f06:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  HAL_UART_TxCpltCallback(huart);
 8002f0a:	f7fd fdbf 	bl	8000a8c <HAL_UART_TxCpltCallback>
  return HAL_OK;
 8002f0e:	e766      	b.n	8002dde <HAL_UART_IRQHandler+0xda>
 8002f10:	08002c5b 	.word	0x08002c5b

08002f14 <UART_Start_Receive_IT>:
  huart->RxXferCount = Size;
 8002f14:	85c2      	strh	r2, [r0, #46]	; 0x2e
  huart->RxXferSize = Size;
 8002f16:	8582      	strh	r2, [r0, #44]	; 0x2c
  huart->pRxBuffPtr = pData;
 8002f18:	6281      	str	r1, [r0, #40]	; 0x28
{
 8002f1a:	4603      	mov	r3, r0
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002f1c:	2222      	movs	r2, #34	; 0x22
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f1e:	2000      	movs	r0, #0
 8002f20:	6418      	str	r0, [r3, #64]	; 0x40
  __HAL_UNLOCK(huart);
 8002f22:	f883 003c 	strb.w	r0, [r3, #60]	; 0x3c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002f26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	68da      	ldr	r2, [r3, #12]
 8002f2e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f32:	60da      	str	r2, [r3, #12]
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002f34:	695a      	ldr	r2, [r3, #20]
 8002f36:	f042 0201 	orr.w	r2, r2, #1
 8002f3a:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002f3c:	68da      	ldr	r2, [r3, #12]
 8002f3e:	f042 0220 	orr.w	r2, r2, #32
 8002f42:	60da      	str	r2, [r3, #12]
}
 8002f44:	4770      	bx	lr

08002f46 <HAL_UART_Receive_IT>:
{
 8002f46:	b470      	push	{r4, r5, r6}
  if (huart->RxState == HAL_UART_STATE_READY)
 8002f48:	f890 603e 	ldrb.w	r6, [r0, #62]	; 0x3e
 8002f4c:	2e20      	cmp	r6, #32
 8002f4e:	d110      	bne.n	8002f72 <HAL_UART_Receive_IT+0x2c>
    if ((pData == NULL) || (Size == 0U))
 8002f50:	b161      	cbz	r1, 8002f6c <HAL_UART_Receive_IT+0x26>
 8002f52:	b15a      	cbz	r2, 8002f6c <HAL_UART_Receive_IT+0x26>
    __HAL_LOCK(huart);
 8002f54:	f890 403c 	ldrb.w	r4, [r0, #60]	; 0x3c
 8002f58:	2c01      	cmp	r4, #1
 8002f5a:	d00a      	beq.n	8002f72 <HAL_UART_Receive_IT+0x2c>
 8002f5c:	2401      	movs	r4, #1
 8002f5e:	f880 403c 	strb.w	r4, [r0, #60]	; 0x3c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f62:	2400      	movs	r4, #0
 8002f64:	6304      	str	r4, [r0, #48]	; 0x30
}
 8002f66:	bc70      	pop	{r4, r5, r6}
    return(UART_Start_Receive_IT(huart, pData, Size));
 8002f68:	f7ff bfd4 	b.w	8002f14 <UART_Start_Receive_IT>
      return HAL_ERROR;
 8002f6c:	2001      	movs	r0, #1
}
 8002f6e:	bc70      	pop	{r4, r5, r6}
 8002f70:	4770      	bx	lr
    return HAL_BUSY;
 8002f72:	2002      	movs	r0, #2
 8002f74:	e7fb      	b.n	8002f6e <HAL_UART_Receive_IT+0x28>
	...

08002f78 <__errno>:
 8002f78:	4b01      	ldr	r3, [pc, #4]	; (8002f80 <__errno+0x8>)
 8002f7a:	6818      	ldr	r0, [r3, #0]
 8002f7c:	4770      	bx	lr
 8002f7e:	bf00      	nop
 8002f80:	20000020 	.word	0x20000020

08002f84 <__libc_init_array>:
 8002f84:	b570      	push	{r4, r5, r6, lr}
 8002f86:	2600      	movs	r6, #0
 8002f88:	4d0c      	ldr	r5, [pc, #48]	; (8002fbc <__libc_init_array+0x38>)
 8002f8a:	4c0d      	ldr	r4, [pc, #52]	; (8002fc0 <__libc_init_array+0x3c>)
 8002f8c:	1b64      	subs	r4, r4, r5
 8002f8e:	10a4      	asrs	r4, r4, #2
 8002f90:	42a6      	cmp	r6, r4
 8002f92:	d109      	bne.n	8002fa8 <__libc_init_array+0x24>
 8002f94:	f001 f9a6 	bl	80042e4 <_init>
 8002f98:	2600      	movs	r6, #0
 8002f9a:	4d0a      	ldr	r5, [pc, #40]	; (8002fc4 <__libc_init_array+0x40>)
 8002f9c:	4c0a      	ldr	r4, [pc, #40]	; (8002fc8 <__libc_init_array+0x44>)
 8002f9e:	1b64      	subs	r4, r4, r5
 8002fa0:	10a4      	asrs	r4, r4, #2
 8002fa2:	42a6      	cmp	r6, r4
 8002fa4:	d105      	bne.n	8002fb2 <__libc_init_array+0x2e>
 8002fa6:	bd70      	pop	{r4, r5, r6, pc}
 8002fa8:	f855 3b04 	ldr.w	r3, [r5], #4
 8002fac:	4798      	blx	r3
 8002fae:	3601      	adds	r6, #1
 8002fb0:	e7ee      	b.n	8002f90 <__libc_init_array+0xc>
 8002fb2:	f855 3b04 	ldr.w	r3, [r5], #4
 8002fb6:	4798      	blx	r3
 8002fb8:	3601      	adds	r6, #1
 8002fba:	e7f2      	b.n	8002fa2 <__libc_init_array+0x1e>
 8002fbc:	08004928 	.word	0x08004928
 8002fc0:	08004928 	.word	0x08004928
 8002fc4:	08004928 	.word	0x08004928
 8002fc8:	0800492c 	.word	0x0800492c

08002fcc <memcpy>:
 8002fcc:	440a      	add	r2, r1
 8002fce:	4291      	cmp	r1, r2
 8002fd0:	f100 33ff 	add.w	r3, r0, #4294967295
 8002fd4:	d100      	bne.n	8002fd8 <memcpy+0xc>
 8002fd6:	4770      	bx	lr
 8002fd8:	b510      	push	{r4, lr}
 8002fda:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002fde:	4291      	cmp	r1, r2
 8002fe0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002fe4:	d1f9      	bne.n	8002fda <memcpy+0xe>
 8002fe6:	bd10      	pop	{r4, pc}

08002fe8 <memset>:
 8002fe8:	4603      	mov	r3, r0
 8002fea:	4402      	add	r2, r0
 8002fec:	4293      	cmp	r3, r2
 8002fee:	d100      	bne.n	8002ff2 <memset+0xa>
 8002ff0:	4770      	bx	lr
 8002ff2:	f803 1b01 	strb.w	r1, [r3], #1
 8002ff6:	e7f9      	b.n	8002fec <memset+0x4>

08002ff8 <iprintf>:
 8002ff8:	b40f      	push	{r0, r1, r2, r3}
 8002ffa:	4b0a      	ldr	r3, [pc, #40]	; (8003024 <iprintf+0x2c>)
 8002ffc:	b513      	push	{r0, r1, r4, lr}
 8002ffe:	681c      	ldr	r4, [r3, #0]
 8003000:	b124      	cbz	r4, 800300c <iprintf+0x14>
 8003002:	69a3      	ldr	r3, [r4, #24]
 8003004:	b913      	cbnz	r3, 800300c <iprintf+0x14>
 8003006:	4620      	mov	r0, r4
 8003008:	f000 f89a 	bl	8003140 <__sinit>
 800300c:	ab05      	add	r3, sp, #20
 800300e:	4620      	mov	r0, r4
 8003010:	9a04      	ldr	r2, [sp, #16]
 8003012:	68a1      	ldr	r1, [r4, #8]
 8003014:	9301      	str	r3, [sp, #4]
 8003016:	f000 fb4b 	bl	80036b0 <_vfiprintf_r>
 800301a:	b002      	add	sp, #8
 800301c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003020:	b004      	add	sp, #16
 8003022:	4770      	bx	lr
 8003024:	20000020 	.word	0x20000020

08003028 <siprintf>:
 8003028:	b40e      	push	{r1, r2, r3}
 800302a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800302e:	b500      	push	{lr}
 8003030:	b09c      	sub	sp, #112	; 0x70
 8003032:	ab1d      	add	r3, sp, #116	; 0x74
 8003034:	9002      	str	r0, [sp, #8]
 8003036:	9006      	str	r0, [sp, #24]
 8003038:	9107      	str	r1, [sp, #28]
 800303a:	9104      	str	r1, [sp, #16]
 800303c:	4808      	ldr	r0, [pc, #32]	; (8003060 <siprintf+0x38>)
 800303e:	4909      	ldr	r1, [pc, #36]	; (8003064 <siprintf+0x3c>)
 8003040:	f853 2b04 	ldr.w	r2, [r3], #4
 8003044:	9105      	str	r1, [sp, #20]
 8003046:	6800      	ldr	r0, [r0, #0]
 8003048:	a902      	add	r1, sp, #8
 800304a:	9301      	str	r3, [sp, #4]
 800304c:	f000 fa08 	bl	8003460 <_svfiprintf_r>
 8003050:	2200      	movs	r2, #0
 8003052:	9b02      	ldr	r3, [sp, #8]
 8003054:	701a      	strb	r2, [r3, #0]
 8003056:	b01c      	add	sp, #112	; 0x70
 8003058:	f85d eb04 	ldr.w	lr, [sp], #4
 800305c:	b003      	add	sp, #12
 800305e:	4770      	bx	lr
 8003060:	20000020 	.word	0x20000020
 8003064:	ffff0208 	.word	0xffff0208

08003068 <strncpy>:
 8003068:	4603      	mov	r3, r0
 800306a:	b510      	push	{r4, lr}
 800306c:	3901      	subs	r1, #1
 800306e:	b132      	cbz	r2, 800307e <strncpy+0x16>
 8003070:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8003074:	3a01      	subs	r2, #1
 8003076:	f803 4b01 	strb.w	r4, [r3], #1
 800307a:	2c00      	cmp	r4, #0
 800307c:	d1f7      	bne.n	800306e <strncpy+0x6>
 800307e:	2100      	movs	r1, #0
 8003080:	441a      	add	r2, r3
 8003082:	4293      	cmp	r3, r2
 8003084:	d100      	bne.n	8003088 <strncpy+0x20>
 8003086:	bd10      	pop	{r4, pc}
 8003088:	f803 1b01 	strb.w	r1, [r3], #1
 800308c:	e7f9      	b.n	8003082 <strncpy+0x1a>
	...

08003090 <std>:
 8003090:	2300      	movs	r3, #0
 8003092:	b510      	push	{r4, lr}
 8003094:	4604      	mov	r4, r0
 8003096:	e9c0 3300 	strd	r3, r3, [r0]
 800309a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800309e:	6083      	str	r3, [r0, #8]
 80030a0:	8181      	strh	r1, [r0, #12]
 80030a2:	6643      	str	r3, [r0, #100]	; 0x64
 80030a4:	81c2      	strh	r2, [r0, #14]
 80030a6:	6183      	str	r3, [r0, #24]
 80030a8:	4619      	mov	r1, r3
 80030aa:	2208      	movs	r2, #8
 80030ac:	305c      	adds	r0, #92	; 0x5c
 80030ae:	f7ff ff9b 	bl	8002fe8 <memset>
 80030b2:	4b05      	ldr	r3, [pc, #20]	; (80030c8 <std+0x38>)
 80030b4:	6224      	str	r4, [r4, #32]
 80030b6:	6263      	str	r3, [r4, #36]	; 0x24
 80030b8:	4b04      	ldr	r3, [pc, #16]	; (80030cc <std+0x3c>)
 80030ba:	62a3      	str	r3, [r4, #40]	; 0x28
 80030bc:	4b04      	ldr	r3, [pc, #16]	; (80030d0 <std+0x40>)
 80030be:	62e3      	str	r3, [r4, #44]	; 0x2c
 80030c0:	4b04      	ldr	r3, [pc, #16]	; (80030d4 <std+0x44>)
 80030c2:	6323      	str	r3, [r4, #48]	; 0x30
 80030c4:	bd10      	pop	{r4, pc}
 80030c6:	bf00      	nop
 80030c8:	08003c5d 	.word	0x08003c5d
 80030cc:	08003c7f 	.word	0x08003c7f
 80030d0:	08003cb7 	.word	0x08003cb7
 80030d4:	08003cdb 	.word	0x08003cdb

080030d8 <_cleanup_r>:
 80030d8:	4901      	ldr	r1, [pc, #4]	; (80030e0 <_cleanup_r+0x8>)
 80030da:	f000 b8af 	b.w	800323c <_fwalk_reent>
 80030de:	bf00      	nop
 80030e0:	08003fad 	.word	0x08003fad

080030e4 <__sfmoreglue>:
 80030e4:	2268      	movs	r2, #104	; 0x68
 80030e6:	b570      	push	{r4, r5, r6, lr}
 80030e8:	1e4d      	subs	r5, r1, #1
 80030ea:	4355      	muls	r5, r2
 80030ec:	460e      	mov	r6, r1
 80030ee:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80030f2:	f000 f8e5 	bl	80032c0 <_malloc_r>
 80030f6:	4604      	mov	r4, r0
 80030f8:	b140      	cbz	r0, 800310c <__sfmoreglue+0x28>
 80030fa:	2100      	movs	r1, #0
 80030fc:	e9c0 1600 	strd	r1, r6, [r0]
 8003100:	300c      	adds	r0, #12
 8003102:	60a0      	str	r0, [r4, #8]
 8003104:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003108:	f7ff ff6e 	bl	8002fe8 <memset>
 800310c:	4620      	mov	r0, r4
 800310e:	bd70      	pop	{r4, r5, r6, pc}

08003110 <__sfp_lock_acquire>:
 8003110:	4801      	ldr	r0, [pc, #4]	; (8003118 <__sfp_lock_acquire+0x8>)
 8003112:	f000 b8b3 	b.w	800327c <__retarget_lock_acquire_recursive>
 8003116:	bf00      	nop
 8003118:	20000d69 	.word	0x20000d69

0800311c <__sfp_lock_release>:
 800311c:	4801      	ldr	r0, [pc, #4]	; (8003124 <__sfp_lock_release+0x8>)
 800311e:	f000 b8ae 	b.w	800327e <__retarget_lock_release_recursive>
 8003122:	bf00      	nop
 8003124:	20000d69 	.word	0x20000d69

08003128 <__sinit_lock_acquire>:
 8003128:	4801      	ldr	r0, [pc, #4]	; (8003130 <__sinit_lock_acquire+0x8>)
 800312a:	f000 b8a7 	b.w	800327c <__retarget_lock_acquire_recursive>
 800312e:	bf00      	nop
 8003130:	20000d6a 	.word	0x20000d6a

08003134 <__sinit_lock_release>:
 8003134:	4801      	ldr	r0, [pc, #4]	; (800313c <__sinit_lock_release+0x8>)
 8003136:	f000 b8a2 	b.w	800327e <__retarget_lock_release_recursive>
 800313a:	bf00      	nop
 800313c:	20000d6a 	.word	0x20000d6a

08003140 <__sinit>:
 8003140:	b510      	push	{r4, lr}
 8003142:	4604      	mov	r4, r0
 8003144:	f7ff fff0 	bl	8003128 <__sinit_lock_acquire>
 8003148:	69a3      	ldr	r3, [r4, #24]
 800314a:	b11b      	cbz	r3, 8003154 <__sinit+0x14>
 800314c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003150:	f7ff bff0 	b.w	8003134 <__sinit_lock_release>
 8003154:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8003158:	6523      	str	r3, [r4, #80]	; 0x50
 800315a:	4b13      	ldr	r3, [pc, #76]	; (80031a8 <__sinit+0x68>)
 800315c:	4a13      	ldr	r2, [pc, #76]	; (80031ac <__sinit+0x6c>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	62a2      	str	r2, [r4, #40]	; 0x28
 8003162:	42a3      	cmp	r3, r4
 8003164:	bf08      	it	eq
 8003166:	2301      	moveq	r3, #1
 8003168:	4620      	mov	r0, r4
 800316a:	bf08      	it	eq
 800316c:	61a3      	streq	r3, [r4, #24]
 800316e:	f000 f81f 	bl	80031b0 <__sfp>
 8003172:	6060      	str	r0, [r4, #4]
 8003174:	4620      	mov	r0, r4
 8003176:	f000 f81b 	bl	80031b0 <__sfp>
 800317a:	60a0      	str	r0, [r4, #8]
 800317c:	4620      	mov	r0, r4
 800317e:	f000 f817 	bl	80031b0 <__sfp>
 8003182:	2200      	movs	r2, #0
 8003184:	2104      	movs	r1, #4
 8003186:	60e0      	str	r0, [r4, #12]
 8003188:	6860      	ldr	r0, [r4, #4]
 800318a:	f7ff ff81 	bl	8003090 <std>
 800318e:	2201      	movs	r2, #1
 8003190:	2109      	movs	r1, #9
 8003192:	68a0      	ldr	r0, [r4, #8]
 8003194:	f7ff ff7c 	bl	8003090 <std>
 8003198:	2202      	movs	r2, #2
 800319a:	2112      	movs	r1, #18
 800319c:	68e0      	ldr	r0, [r4, #12]
 800319e:	f7ff ff77 	bl	8003090 <std>
 80031a2:	2301      	movs	r3, #1
 80031a4:	61a3      	str	r3, [r4, #24]
 80031a6:	e7d1      	b.n	800314c <__sinit+0xc>
 80031a8:	08004890 	.word	0x08004890
 80031ac:	080030d9 	.word	0x080030d9

080031b0 <__sfp>:
 80031b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031b2:	4607      	mov	r7, r0
 80031b4:	f7ff ffac 	bl	8003110 <__sfp_lock_acquire>
 80031b8:	4b1e      	ldr	r3, [pc, #120]	; (8003234 <__sfp+0x84>)
 80031ba:	681e      	ldr	r6, [r3, #0]
 80031bc:	69b3      	ldr	r3, [r6, #24]
 80031be:	b913      	cbnz	r3, 80031c6 <__sfp+0x16>
 80031c0:	4630      	mov	r0, r6
 80031c2:	f7ff ffbd 	bl	8003140 <__sinit>
 80031c6:	3648      	adds	r6, #72	; 0x48
 80031c8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80031cc:	3b01      	subs	r3, #1
 80031ce:	d503      	bpl.n	80031d8 <__sfp+0x28>
 80031d0:	6833      	ldr	r3, [r6, #0]
 80031d2:	b30b      	cbz	r3, 8003218 <__sfp+0x68>
 80031d4:	6836      	ldr	r6, [r6, #0]
 80031d6:	e7f7      	b.n	80031c8 <__sfp+0x18>
 80031d8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80031dc:	b9d5      	cbnz	r5, 8003214 <__sfp+0x64>
 80031de:	4b16      	ldr	r3, [pc, #88]	; (8003238 <__sfp+0x88>)
 80031e0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80031e4:	60e3      	str	r3, [r4, #12]
 80031e6:	6665      	str	r5, [r4, #100]	; 0x64
 80031e8:	f000 f847 	bl	800327a <__retarget_lock_init_recursive>
 80031ec:	f7ff ff96 	bl	800311c <__sfp_lock_release>
 80031f0:	2208      	movs	r2, #8
 80031f2:	4629      	mov	r1, r5
 80031f4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80031f8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80031fc:	6025      	str	r5, [r4, #0]
 80031fe:	61a5      	str	r5, [r4, #24]
 8003200:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003204:	f7ff fef0 	bl	8002fe8 <memset>
 8003208:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800320c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003210:	4620      	mov	r0, r4
 8003212:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003214:	3468      	adds	r4, #104	; 0x68
 8003216:	e7d9      	b.n	80031cc <__sfp+0x1c>
 8003218:	2104      	movs	r1, #4
 800321a:	4638      	mov	r0, r7
 800321c:	f7ff ff62 	bl	80030e4 <__sfmoreglue>
 8003220:	4604      	mov	r4, r0
 8003222:	6030      	str	r0, [r6, #0]
 8003224:	2800      	cmp	r0, #0
 8003226:	d1d5      	bne.n	80031d4 <__sfp+0x24>
 8003228:	f7ff ff78 	bl	800311c <__sfp_lock_release>
 800322c:	230c      	movs	r3, #12
 800322e:	603b      	str	r3, [r7, #0]
 8003230:	e7ee      	b.n	8003210 <__sfp+0x60>
 8003232:	bf00      	nop
 8003234:	08004890 	.word	0x08004890
 8003238:	ffff0001 	.word	0xffff0001

0800323c <_fwalk_reent>:
 800323c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003240:	4606      	mov	r6, r0
 8003242:	4688      	mov	r8, r1
 8003244:	2700      	movs	r7, #0
 8003246:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800324a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800324e:	f1b9 0901 	subs.w	r9, r9, #1
 8003252:	d505      	bpl.n	8003260 <_fwalk_reent+0x24>
 8003254:	6824      	ldr	r4, [r4, #0]
 8003256:	2c00      	cmp	r4, #0
 8003258:	d1f7      	bne.n	800324a <_fwalk_reent+0xe>
 800325a:	4638      	mov	r0, r7
 800325c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003260:	89ab      	ldrh	r3, [r5, #12]
 8003262:	2b01      	cmp	r3, #1
 8003264:	d907      	bls.n	8003276 <_fwalk_reent+0x3a>
 8003266:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800326a:	3301      	adds	r3, #1
 800326c:	d003      	beq.n	8003276 <_fwalk_reent+0x3a>
 800326e:	4629      	mov	r1, r5
 8003270:	4630      	mov	r0, r6
 8003272:	47c0      	blx	r8
 8003274:	4307      	orrs	r7, r0
 8003276:	3568      	adds	r5, #104	; 0x68
 8003278:	e7e9      	b.n	800324e <_fwalk_reent+0x12>

0800327a <__retarget_lock_init_recursive>:
 800327a:	4770      	bx	lr

0800327c <__retarget_lock_acquire_recursive>:
 800327c:	4770      	bx	lr

0800327e <__retarget_lock_release_recursive>:
 800327e:	4770      	bx	lr

08003280 <sbrk_aligned>:
 8003280:	b570      	push	{r4, r5, r6, lr}
 8003282:	4e0e      	ldr	r6, [pc, #56]	; (80032bc <sbrk_aligned+0x3c>)
 8003284:	460c      	mov	r4, r1
 8003286:	6831      	ldr	r1, [r6, #0]
 8003288:	4605      	mov	r5, r0
 800328a:	b911      	cbnz	r1, 8003292 <sbrk_aligned+0x12>
 800328c:	f000 fcd6 	bl	8003c3c <_sbrk_r>
 8003290:	6030      	str	r0, [r6, #0]
 8003292:	4621      	mov	r1, r4
 8003294:	4628      	mov	r0, r5
 8003296:	f000 fcd1 	bl	8003c3c <_sbrk_r>
 800329a:	1c43      	adds	r3, r0, #1
 800329c:	d00a      	beq.n	80032b4 <sbrk_aligned+0x34>
 800329e:	1cc4      	adds	r4, r0, #3
 80032a0:	f024 0403 	bic.w	r4, r4, #3
 80032a4:	42a0      	cmp	r0, r4
 80032a6:	d007      	beq.n	80032b8 <sbrk_aligned+0x38>
 80032a8:	1a21      	subs	r1, r4, r0
 80032aa:	4628      	mov	r0, r5
 80032ac:	f000 fcc6 	bl	8003c3c <_sbrk_r>
 80032b0:	3001      	adds	r0, #1
 80032b2:	d101      	bne.n	80032b8 <sbrk_aligned+0x38>
 80032b4:	f04f 34ff 	mov.w	r4, #4294967295
 80032b8:	4620      	mov	r0, r4
 80032ba:	bd70      	pop	{r4, r5, r6, pc}
 80032bc:	20000d70 	.word	0x20000d70

080032c0 <_malloc_r>:
 80032c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80032c4:	1ccd      	adds	r5, r1, #3
 80032c6:	f025 0503 	bic.w	r5, r5, #3
 80032ca:	3508      	adds	r5, #8
 80032cc:	2d0c      	cmp	r5, #12
 80032ce:	bf38      	it	cc
 80032d0:	250c      	movcc	r5, #12
 80032d2:	2d00      	cmp	r5, #0
 80032d4:	4607      	mov	r7, r0
 80032d6:	db01      	blt.n	80032dc <_malloc_r+0x1c>
 80032d8:	42a9      	cmp	r1, r5
 80032da:	d905      	bls.n	80032e8 <_malloc_r+0x28>
 80032dc:	230c      	movs	r3, #12
 80032de:	2600      	movs	r6, #0
 80032e0:	603b      	str	r3, [r7, #0]
 80032e2:	4630      	mov	r0, r6
 80032e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80032e8:	4e2e      	ldr	r6, [pc, #184]	; (80033a4 <_malloc_r+0xe4>)
 80032ea:	f000 ff3b 	bl	8004164 <__malloc_lock>
 80032ee:	6833      	ldr	r3, [r6, #0]
 80032f0:	461c      	mov	r4, r3
 80032f2:	bb34      	cbnz	r4, 8003342 <_malloc_r+0x82>
 80032f4:	4629      	mov	r1, r5
 80032f6:	4638      	mov	r0, r7
 80032f8:	f7ff ffc2 	bl	8003280 <sbrk_aligned>
 80032fc:	1c43      	adds	r3, r0, #1
 80032fe:	4604      	mov	r4, r0
 8003300:	d14d      	bne.n	800339e <_malloc_r+0xde>
 8003302:	6834      	ldr	r4, [r6, #0]
 8003304:	4626      	mov	r6, r4
 8003306:	2e00      	cmp	r6, #0
 8003308:	d140      	bne.n	800338c <_malloc_r+0xcc>
 800330a:	6823      	ldr	r3, [r4, #0]
 800330c:	4631      	mov	r1, r6
 800330e:	4638      	mov	r0, r7
 8003310:	eb04 0803 	add.w	r8, r4, r3
 8003314:	f000 fc92 	bl	8003c3c <_sbrk_r>
 8003318:	4580      	cmp	r8, r0
 800331a:	d13a      	bne.n	8003392 <_malloc_r+0xd2>
 800331c:	6821      	ldr	r1, [r4, #0]
 800331e:	3503      	adds	r5, #3
 8003320:	1a6d      	subs	r5, r5, r1
 8003322:	f025 0503 	bic.w	r5, r5, #3
 8003326:	3508      	adds	r5, #8
 8003328:	2d0c      	cmp	r5, #12
 800332a:	bf38      	it	cc
 800332c:	250c      	movcc	r5, #12
 800332e:	4638      	mov	r0, r7
 8003330:	4629      	mov	r1, r5
 8003332:	f7ff ffa5 	bl	8003280 <sbrk_aligned>
 8003336:	3001      	adds	r0, #1
 8003338:	d02b      	beq.n	8003392 <_malloc_r+0xd2>
 800333a:	6823      	ldr	r3, [r4, #0]
 800333c:	442b      	add	r3, r5
 800333e:	6023      	str	r3, [r4, #0]
 8003340:	e00e      	b.n	8003360 <_malloc_r+0xa0>
 8003342:	6822      	ldr	r2, [r4, #0]
 8003344:	1b52      	subs	r2, r2, r5
 8003346:	d41e      	bmi.n	8003386 <_malloc_r+0xc6>
 8003348:	2a0b      	cmp	r2, #11
 800334a:	d916      	bls.n	800337a <_malloc_r+0xba>
 800334c:	1961      	adds	r1, r4, r5
 800334e:	42a3      	cmp	r3, r4
 8003350:	6025      	str	r5, [r4, #0]
 8003352:	bf18      	it	ne
 8003354:	6059      	strne	r1, [r3, #4]
 8003356:	6863      	ldr	r3, [r4, #4]
 8003358:	bf08      	it	eq
 800335a:	6031      	streq	r1, [r6, #0]
 800335c:	5162      	str	r2, [r4, r5]
 800335e:	604b      	str	r3, [r1, #4]
 8003360:	4638      	mov	r0, r7
 8003362:	f104 060b 	add.w	r6, r4, #11
 8003366:	f000 ff03 	bl	8004170 <__malloc_unlock>
 800336a:	f026 0607 	bic.w	r6, r6, #7
 800336e:	1d23      	adds	r3, r4, #4
 8003370:	1af2      	subs	r2, r6, r3
 8003372:	d0b6      	beq.n	80032e2 <_malloc_r+0x22>
 8003374:	1b9b      	subs	r3, r3, r6
 8003376:	50a3      	str	r3, [r4, r2]
 8003378:	e7b3      	b.n	80032e2 <_malloc_r+0x22>
 800337a:	6862      	ldr	r2, [r4, #4]
 800337c:	42a3      	cmp	r3, r4
 800337e:	bf0c      	ite	eq
 8003380:	6032      	streq	r2, [r6, #0]
 8003382:	605a      	strne	r2, [r3, #4]
 8003384:	e7ec      	b.n	8003360 <_malloc_r+0xa0>
 8003386:	4623      	mov	r3, r4
 8003388:	6864      	ldr	r4, [r4, #4]
 800338a:	e7b2      	b.n	80032f2 <_malloc_r+0x32>
 800338c:	4634      	mov	r4, r6
 800338e:	6876      	ldr	r6, [r6, #4]
 8003390:	e7b9      	b.n	8003306 <_malloc_r+0x46>
 8003392:	230c      	movs	r3, #12
 8003394:	4638      	mov	r0, r7
 8003396:	603b      	str	r3, [r7, #0]
 8003398:	f000 feea 	bl	8004170 <__malloc_unlock>
 800339c:	e7a1      	b.n	80032e2 <_malloc_r+0x22>
 800339e:	6025      	str	r5, [r4, #0]
 80033a0:	e7de      	b.n	8003360 <_malloc_r+0xa0>
 80033a2:	bf00      	nop
 80033a4:	20000d6c 	.word	0x20000d6c

080033a8 <__ssputs_r>:
 80033a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80033ac:	688e      	ldr	r6, [r1, #8]
 80033ae:	4682      	mov	sl, r0
 80033b0:	429e      	cmp	r6, r3
 80033b2:	460c      	mov	r4, r1
 80033b4:	4690      	mov	r8, r2
 80033b6:	461f      	mov	r7, r3
 80033b8:	d838      	bhi.n	800342c <__ssputs_r+0x84>
 80033ba:	898a      	ldrh	r2, [r1, #12]
 80033bc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80033c0:	d032      	beq.n	8003428 <__ssputs_r+0x80>
 80033c2:	6825      	ldr	r5, [r4, #0]
 80033c4:	6909      	ldr	r1, [r1, #16]
 80033c6:	3301      	adds	r3, #1
 80033c8:	eba5 0901 	sub.w	r9, r5, r1
 80033cc:	6965      	ldr	r5, [r4, #20]
 80033ce:	444b      	add	r3, r9
 80033d0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80033d4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80033d8:	106d      	asrs	r5, r5, #1
 80033da:	429d      	cmp	r5, r3
 80033dc:	bf38      	it	cc
 80033de:	461d      	movcc	r5, r3
 80033e0:	0553      	lsls	r3, r2, #21
 80033e2:	d531      	bpl.n	8003448 <__ssputs_r+0xa0>
 80033e4:	4629      	mov	r1, r5
 80033e6:	f7ff ff6b 	bl	80032c0 <_malloc_r>
 80033ea:	4606      	mov	r6, r0
 80033ec:	b950      	cbnz	r0, 8003404 <__ssputs_r+0x5c>
 80033ee:	230c      	movs	r3, #12
 80033f0:	f04f 30ff 	mov.w	r0, #4294967295
 80033f4:	f8ca 3000 	str.w	r3, [sl]
 80033f8:	89a3      	ldrh	r3, [r4, #12]
 80033fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80033fe:	81a3      	strh	r3, [r4, #12]
 8003400:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003404:	464a      	mov	r2, r9
 8003406:	6921      	ldr	r1, [r4, #16]
 8003408:	f7ff fde0 	bl	8002fcc <memcpy>
 800340c:	89a3      	ldrh	r3, [r4, #12]
 800340e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003412:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003416:	81a3      	strh	r3, [r4, #12]
 8003418:	6126      	str	r6, [r4, #16]
 800341a:	444e      	add	r6, r9
 800341c:	6026      	str	r6, [r4, #0]
 800341e:	463e      	mov	r6, r7
 8003420:	6165      	str	r5, [r4, #20]
 8003422:	eba5 0509 	sub.w	r5, r5, r9
 8003426:	60a5      	str	r5, [r4, #8]
 8003428:	42be      	cmp	r6, r7
 800342a:	d900      	bls.n	800342e <__ssputs_r+0x86>
 800342c:	463e      	mov	r6, r7
 800342e:	4632      	mov	r2, r6
 8003430:	4641      	mov	r1, r8
 8003432:	6820      	ldr	r0, [r4, #0]
 8003434:	f000 fe7c 	bl	8004130 <memmove>
 8003438:	68a3      	ldr	r3, [r4, #8]
 800343a:	2000      	movs	r0, #0
 800343c:	1b9b      	subs	r3, r3, r6
 800343e:	60a3      	str	r3, [r4, #8]
 8003440:	6823      	ldr	r3, [r4, #0]
 8003442:	4433      	add	r3, r6
 8003444:	6023      	str	r3, [r4, #0]
 8003446:	e7db      	b.n	8003400 <__ssputs_r+0x58>
 8003448:	462a      	mov	r2, r5
 800344a:	f000 fedf 	bl	800420c <_realloc_r>
 800344e:	4606      	mov	r6, r0
 8003450:	2800      	cmp	r0, #0
 8003452:	d1e1      	bne.n	8003418 <__ssputs_r+0x70>
 8003454:	4650      	mov	r0, sl
 8003456:	6921      	ldr	r1, [r4, #16]
 8003458:	f000 fe90 	bl	800417c <_free_r>
 800345c:	e7c7      	b.n	80033ee <__ssputs_r+0x46>
	...

08003460 <_svfiprintf_r>:
 8003460:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003464:	4698      	mov	r8, r3
 8003466:	898b      	ldrh	r3, [r1, #12]
 8003468:	4607      	mov	r7, r0
 800346a:	061b      	lsls	r3, r3, #24
 800346c:	460d      	mov	r5, r1
 800346e:	4614      	mov	r4, r2
 8003470:	b09d      	sub	sp, #116	; 0x74
 8003472:	d50e      	bpl.n	8003492 <_svfiprintf_r+0x32>
 8003474:	690b      	ldr	r3, [r1, #16]
 8003476:	b963      	cbnz	r3, 8003492 <_svfiprintf_r+0x32>
 8003478:	2140      	movs	r1, #64	; 0x40
 800347a:	f7ff ff21 	bl	80032c0 <_malloc_r>
 800347e:	6028      	str	r0, [r5, #0]
 8003480:	6128      	str	r0, [r5, #16]
 8003482:	b920      	cbnz	r0, 800348e <_svfiprintf_r+0x2e>
 8003484:	230c      	movs	r3, #12
 8003486:	603b      	str	r3, [r7, #0]
 8003488:	f04f 30ff 	mov.w	r0, #4294967295
 800348c:	e0d1      	b.n	8003632 <_svfiprintf_r+0x1d2>
 800348e:	2340      	movs	r3, #64	; 0x40
 8003490:	616b      	str	r3, [r5, #20]
 8003492:	2300      	movs	r3, #0
 8003494:	9309      	str	r3, [sp, #36]	; 0x24
 8003496:	2320      	movs	r3, #32
 8003498:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800349c:	2330      	movs	r3, #48	; 0x30
 800349e:	f04f 0901 	mov.w	r9, #1
 80034a2:	f8cd 800c 	str.w	r8, [sp, #12]
 80034a6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800364c <_svfiprintf_r+0x1ec>
 80034aa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80034ae:	4623      	mov	r3, r4
 80034b0:	469a      	mov	sl, r3
 80034b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80034b6:	b10a      	cbz	r2, 80034bc <_svfiprintf_r+0x5c>
 80034b8:	2a25      	cmp	r2, #37	; 0x25
 80034ba:	d1f9      	bne.n	80034b0 <_svfiprintf_r+0x50>
 80034bc:	ebba 0b04 	subs.w	fp, sl, r4
 80034c0:	d00b      	beq.n	80034da <_svfiprintf_r+0x7a>
 80034c2:	465b      	mov	r3, fp
 80034c4:	4622      	mov	r2, r4
 80034c6:	4629      	mov	r1, r5
 80034c8:	4638      	mov	r0, r7
 80034ca:	f7ff ff6d 	bl	80033a8 <__ssputs_r>
 80034ce:	3001      	adds	r0, #1
 80034d0:	f000 80aa 	beq.w	8003628 <_svfiprintf_r+0x1c8>
 80034d4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80034d6:	445a      	add	r2, fp
 80034d8:	9209      	str	r2, [sp, #36]	; 0x24
 80034da:	f89a 3000 	ldrb.w	r3, [sl]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	f000 80a2 	beq.w	8003628 <_svfiprintf_r+0x1c8>
 80034e4:	2300      	movs	r3, #0
 80034e6:	f04f 32ff 	mov.w	r2, #4294967295
 80034ea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80034ee:	f10a 0a01 	add.w	sl, sl, #1
 80034f2:	9304      	str	r3, [sp, #16]
 80034f4:	9307      	str	r3, [sp, #28]
 80034f6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80034fa:	931a      	str	r3, [sp, #104]	; 0x68
 80034fc:	4654      	mov	r4, sl
 80034fe:	2205      	movs	r2, #5
 8003500:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003504:	4851      	ldr	r0, [pc, #324]	; (800364c <_svfiprintf_r+0x1ec>)
 8003506:	f000 fe05 	bl	8004114 <memchr>
 800350a:	9a04      	ldr	r2, [sp, #16]
 800350c:	b9d8      	cbnz	r0, 8003546 <_svfiprintf_r+0xe6>
 800350e:	06d0      	lsls	r0, r2, #27
 8003510:	bf44      	itt	mi
 8003512:	2320      	movmi	r3, #32
 8003514:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003518:	0711      	lsls	r1, r2, #28
 800351a:	bf44      	itt	mi
 800351c:	232b      	movmi	r3, #43	; 0x2b
 800351e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003522:	f89a 3000 	ldrb.w	r3, [sl]
 8003526:	2b2a      	cmp	r3, #42	; 0x2a
 8003528:	d015      	beq.n	8003556 <_svfiprintf_r+0xf6>
 800352a:	4654      	mov	r4, sl
 800352c:	2000      	movs	r0, #0
 800352e:	f04f 0c0a 	mov.w	ip, #10
 8003532:	9a07      	ldr	r2, [sp, #28]
 8003534:	4621      	mov	r1, r4
 8003536:	f811 3b01 	ldrb.w	r3, [r1], #1
 800353a:	3b30      	subs	r3, #48	; 0x30
 800353c:	2b09      	cmp	r3, #9
 800353e:	d94e      	bls.n	80035de <_svfiprintf_r+0x17e>
 8003540:	b1b0      	cbz	r0, 8003570 <_svfiprintf_r+0x110>
 8003542:	9207      	str	r2, [sp, #28]
 8003544:	e014      	b.n	8003570 <_svfiprintf_r+0x110>
 8003546:	eba0 0308 	sub.w	r3, r0, r8
 800354a:	fa09 f303 	lsl.w	r3, r9, r3
 800354e:	4313      	orrs	r3, r2
 8003550:	46a2      	mov	sl, r4
 8003552:	9304      	str	r3, [sp, #16]
 8003554:	e7d2      	b.n	80034fc <_svfiprintf_r+0x9c>
 8003556:	9b03      	ldr	r3, [sp, #12]
 8003558:	1d19      	adds	r1, r3, #4
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	9103      	str	r1, [sp, #12]
 800355e:	2b00      	cmp	r3, #0
 8003560:	bfbb      	ittet	lt
 8003562:	425b      	neglt	r3, r3
 8003564:	f042 0202 	orrlt.w	r2, r2, #2
 8003568:	9307      	strge	r3, [sp, #28]
 800356a:	9307      	strlt	r3, [sp, #28]
 800356c:	bfb8      	it	lt
 800356e:	9204      	strlt	r2, [sp, #16]
 8003570:	7823      	ldrb	r3, [r4, #0]
 8003572:	2b2e      	cmp	r3, #46	; 0x2e
 8003574:	d10c      	bne.n	8003590 <_svfiprintf_r+0x130>
 8003576:	7863      	ldrb	r3, [r4, #1]
 8003578:	2b2a      	cmp	r3, #42	; 0x2a
 800357a:	d135      	bne.n	80035e8 <_svfiprintf_r+0x188>
 800357c:	9b03      	ldr	r3, [sp, #12]
 800357e:	3402      	adds	r4, #2
 8003580:	1d1a      	adds	r2, r3, #4
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	9203      	str	r2, [sp, #12]
 8003586:	2b00      	cmp	r3, #0
 8003588:	bfb8      	it	lt
 800358a:	f04f 33ff 	movlt.w	r3, #4294967295
 800358e:	9305      	str	r3, [sp, #20]
 8003590:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8003650 <_svfiprintf_r+0x1f0>
 8003594:	2203      	movs	r2, #3
 8003596:	4650      	mov	r0, sl
 8003598:	7821      	ldrb	r1, [r4, #0]
 800359a:	f000 fdbb 	bl	8004114 <memchr>
 800359e:	b140      	cbz	r0, 80035b2 <_svfiprintf_r+0x152>
 80035a0:	2340      	movs	r3, #64	; 0x40
 80035a2:	eba0 000a 	sub.w	r0, r0, sl
 80035a6:	fa03 f000 	lsl.w	r0, r3, r0
 80035aa:	9b04      	ldr	r3, [sp, #16]
 80035ac:	3401      	adds	r4, #1
 80035ae:	4303      	orrs	r3, r0
 80035b0:	9304      	str	r3, [sp, #16]
 80035b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80035b6:	2206      	movs	r2, #6
 80035b8:	4826      	ldr	r0, [pc, #152]	; (8003654 <_svfiprintf_r+0x1f4>)
 80035ba:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80035be:	f000 fda9 	bl	8004114 <memchr>
 80035c2:	2800      	cmp	r0, #0
 80035c4:	d038      	beq.n	8003638 <_svfiprintf_r+0x1d8>
 80035c6:	4b24      	ldr	r3, [pc, #144]	; (8003658 <_svfiprintf_r+0x1f8>)
 80035c8:	bb1b      	cbnz	r3, 8003612 <_svfiprintf_r+0x1b2>
 80035ca:	9b03      	ldr	r3, [sp, #12]
 80035cc:	3307      	adds	r3, #7
 80035ce:	f023 0307 	bic.w	r3, r3, #7
 80035d2:	3308      	adds	r3, #8
 80035d4:	9303      	str	r3, [sp, #12]
 80035d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80035d8:	4433      	add	r3, r6
 80035da:	9309      	str	r3, [sp, #36]	; 0x24
 80035dc:	e767      	b.n	80034ae <_svfiprintf_r+0x4e>
 80035de:	460c      	mov	r4, r1
 80035e0:	2001      	movs	r0, #1
 80035e2:	fb0c 3202 	mla	r2, ip, r2, r3
 80035e6:	e7a5      	b.n	8003534 <_svfiprintf_r+0xd4>
 80035e8:	2300      	movs	r3, #0
 80035ea:	f04f 0c0a 	mov.w	ip, #10
 80035ee:	4619      	mov	r1, r3
 80035f0:	3401      	adds	r4, #1
 80035f2:	9305      	str	r3, [sp, #20]
 80035f4:	4620      	mov	r0, r4
 80035f6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80035fa:	3a30      	subs	r2, #48	; 0x30
 80035fc:	2a09      	cmp	r2, #9
 80035fe:	d903      	bls.n	8003608 <_svfiprintf_r+0x1a8>
 8003600:	2b00      	cmp	r3, #0
 8003602:	d0c5      	beq.n	8003590 <_svfiprintf_r+0x130>
 8003604:	9105      	str	r1, [sp, #20]
 8003606:	e7c3      	b.n	8003590 <_svfiprintf_r+0x130>
 8003608:	4604      	mov	r4, r0
 800360a:	2301      	movs	r3, #1
 800360c:	fb0c 2101 	mla	r1, ip, r1, r2
 8003610:	e7f0      	b.n	80035f4 <_svfiprintf_r+0x194>
 8003612:	ab03      	add	r3, sp, #12
 8003614:	9300      	str	r3, [sp, #0]
 8003616:	462a      	mov	r2, r5
 8003618:	4638      	mov	r0, r7
 800361a:	4b10      	ldr	r3, [pc, #64]	; (800365c <_svfiprintf_r+0x1fc>)
 800361c:	a904      	add	r1, sp, #16
 800361e:	f3af 8000 	nop.w
 8003622:	1c42      	adds	r2, r0, #1
 8003624:	4606      	mov	r6, r0
 8003626:	d1d6      	bne.n	80035d6 <_svfiprintf_r+0x176>
 8003628:	89ab      	ldrh	r3, [r5, #12]
 800362a:	065b      	lsls	r3, r3, #25
 800362c:	f53f af2c 	bmi.w	8003488 <_svfiprintf_r+0x28>
 8003630:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003632:	b01d      	add	sp, #116	; 0x74
 8003634:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003638:	ab03      	add	r3, sp, #12
 800363a:	9300      	str	r3, [sp, #0]
 800363c:	462a      	mov	r2, r5
 800363e:	4638      	mov	r0, r7
 8003640:	4b06      	ldr	r3, [pc, #24]	; (800365c <_svfiprintf_r+0x1fc>)
 8003642:	a904      	add	r1, sp, #16
 8003644:	f000 f9d4 	bl	80039f0 <_printf_i>
 8003648:	e7eb      	b.n	8003622 <_svfiprintf_r+0x1c2>
 800364a:	bf00      	nop
 800364c:	080048f4 	.word	0x080048f4
 8003650:	080048fa 	.word	0x080048fa
 8003654:	080048fe 	.word	0x080048fe
 8003658:	00000000 	.word	0x00000000
 800365c:	080033a9 	.word	0x080033a9

08003660 <__sfputc_r>:
 8003660:	6893      	ldr	r3, [r2, #8]
 8003662:	b410      	push	{r4}
 8003664:	3b01      	subs	r3, #1
 8003666:	2b00      	cmp	r3, #0
 8003668:	6093      	str	r3, [r2, #8]
 800366a:	da07      	bge.n	800367c <__sfputc_r+0x1c>
 800366c:	6994      	ldr	r4, [r2, #24]
 800366e:	42a3      	cmp	r3, r4
 8003670:	db01      	blt.n	8003676 <__sfputc_r+0x16>
 8003672:	290a      	cmp	r1, #10
 8003674:	d102      	bne.n	800367c <__sfputc_r+0x1c>
 8003676:	bc10      	pop	{r4}
 8003678:	f000 bb34 	b.w	8003ce4 <__swbuf_r>
 800367c:	6813      	ldr	r3, [r2, #0]
 800367e:	1c58      	adds	r0, r3, #1
 8003680:	6010      	str	r0, [r2, #0]
 8003682:	7019      	strb	r1, [r3, #0]
 8003684:	4608      	mov	r0, r1
 8003686:	bc10      	pop	{r4}
 8003688:	4770      	bx	lr

0800368a <__sfputs_r>:
 800368a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800368c:	4606      	mov	r6, r0
 800368e:	460f      	mov	r7, r1
 8003690:	4614      	mov	r4, r2
 8003692:	18d5      	adds	r5, r2, r3
 8003694:	42ac      	cmp	r4, r5
 8003696:	d101      	bne.n	800369c <__sfputs_r+0x12>
 8003698:	2000      	movs	r0, #0
 800369a:	e007      	b.n	80036ac <__sfputs_r+0x22>
 800369c:	463a      	mov	r2, r7
 800369e:	4630      	mov	r0, r6
 80036a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80036a4:	f7ff ffdc 	bl	8003660 <__sfputc_r>
 80036a8:	1c43      	adds	r3, r0, #1
 80036aa:	d1f3      	bne.n	8003694 <__sfputs_r+0xa>
 80036ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080036b0 <_vfiprintf_r>:
 80036b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80036b4:	460d      	mov	r5, r1
 80036b6:	4614      	mov	r4, r2
 80036b8:	4698      	mov	r8, r3
 80036ba:	4606      	mov	r6, r0
 80036bc:	b09d      	sub	sp, #116	; 0x74
 80036be:	b118      	cbz	r0, 80036c8 <_vfiprintf_r+0x18>
 80036c0:	6983      	ldr	r3, [r0, #24]
 80036c2:	b90b      	cbnz	r3, 80036c8 <_vfiprintf_r+0x18>
 80036c4:	f7ff fd3c 	bl	8003140 <__sinit>
 80036c8:	4b89      	ldr	r3, [pc, #548]	; (80038f0 <_vfiprintf_r+0x240>)
 80036ca:	429d      	cmp	r5, r3
 80036cc:	d11b      	bne.n	8003706 <_vfiprintf_r+0x56>
 80036ce:	6875      	ldr	r5, [r6, #4]
 80036d0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80036d2:	07d9      	lsls	r1, r3, #31
 80036d4:	d405      	bmi.n	80036e2 <_vfiprintf_r+0x32>
 80036d6:	89ab      	ldrh	r3, [r5, #12]
 80036d8:	059a      	lsls	r2, r3, #22
 80036da:	d402      	bmi.n	80036e2 <_vfiprintf_r+0x32>
 80036dc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80036de:	f7ff fdcd 	bl	800327c <__retarget_lock_acquire_recursive>
 80036e2:	89ab      	ldrh	r3, [r5, #12]
 80036e4:	071b      	lsls	r3, r3, #28
 80036e6:	d501      	bpl.n	80036ec <_vfiprintf_r+0x3c>
 80036e8:	692b      	ldr	r3, [r5, #16]
 80036ea:	b9eb      	cbnz	r3, 8003728 <_vfiprintf_r+0x78>
 80036ec:	4629      	mov	r1, r5
 80036ee:	4630      	mov	r0, r6
 80036f0:	f000 fb5c 	bl	8003dac <__swsetup_r>
 80036f4:	b1c0      	cbz	r0, 8003728 <_vfiprintf_r+0x78>
 80036f6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80036f8:	07dc      	lsls	r4, r3, #31
 80036fa:	d50e      	bpl.n	800371a <_vfiprintf_r+0x6a>
 80036fc:	f04f 30ff 	mov.w	r0, #4294967295
 8003700:	b01d      	add	sp, #116	; 0x74
 8003702:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003706:	4b7b      	ldr	r3, [pc, #492]	; (80038f4 <_vfiprintf_r+0x244>)
 8003708:	429d      	cmp	r5, r3
 800370a:	d101      	bne.n	8003710 <_vfiprintf_r+0x60>
 800370c:	68b5      	ldr	r5, [r6, #8]
 800370e:	e7df      	b.n	80036d0 <_vfiprintf_r+0x20>
 8003710:	4b79      	ldr	r3, [pc, #484]	; (80038f8 <_vfiprintf_r+0x248>)
 8003712:	429d      	cmp	r5, r3
 8003714:	bf08      	it	eq
 8003716:	68f5      	ldreq	r5, [r6, #12]
 8003718:	e7da      	b.n	80036d0 <_vfiprintf_r+0x20>
 800371a:	89ab      	ldrh	r3, [r5, #12]
 800371c:	0598      	lsls	r0, r3, #22
 800371e:	d4ed      	bmi.n	80036fc <_vfiprintf_r+0x4c>
 8003720:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003722:	f7ff fdac 	bl	800327e <__retarget_lock_release_recursive>
 8003726:	e7e9      	b.n	80036fc <_vfiprintf_r+0x4c>
 8003728:	2300      	movs	r3, #0
 800372a:	9309      	str	r3, [sp, #36]	; 0x24
 800372c:	2320      	movs	r3, #32
 800372e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003732:	2330      	movs	r3, #48	; 0x30
 8003734:	f04f 0901 	mov.w	r9, #1
 8003738:	f8cd 800c 	str.w	r8, [sp, #12]
 800373c:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 80038fc <_vfiprintf_r+0x24c>
 8003740:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003744:	4623      	mov	r3, r4
 8003746:	469a      	mov	sl, r3
 8003748:	f813 2b01 	ldrb.w	r2, [r3], #1
 800374c:	b10a      	cbz	r2, 8003752 <_vfiprintf_r+0xa2>
 800374e:	2a25      	cmp	r2, #37	; 0x25
 8003750:	d1f9      	bne.n	8003746 <_vfiprintf_r+0x96>
 8003752:	ebba 0b04 	subs.w	fp, sl, r4
 8003756:	d00b      	beq.n	8003770 <_vfiprintf_r+0xc0>
 8003758:	465b      	mov	r3, fp
 800375a:	4622      	mov	r2, r4
 800375c:	4629      	mov	r1, r5
 800375e:	4630      	mov	r0, r6
 8003760:	f7ff ff93 	bl	800368a <__sfputs_r>
 8003764:	3001      	adds	r0, #1
 8003766:	f000 80aa 	beq.w	80038be <_vfiprintf_r+0x20e>
 800376a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800376c:	445a      	add	r2, fp
 800376e:	9209      	str	r2, [sp, #36]	; 0x24
 8003770:	f89a 3000 	ldrb.w	r3, [sl]
 8003774:	2b00      	cmp	r3, #0
 8003776:	f000 80a2 	beq.w	80038be <_vfiprintf_r+0x20e>
 800377a:	2300      	movs	r3, #0
 800377c:	f04f 32ff 	mov.w	r2, #4294967295
 8003780:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003784:	f10a 0a01 	add.w	sl, sl, #1
 8003788:	9304      	str	r3, [sp, #16]
 800378a:	9307      	str	r3, [sp, #28]
 800378c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003790:	931a      	str	r3, [sp, #104]	; 0x68
 8003792:	4654      	mov	r4, sl
 8003794:	2205      	movs	r2, #5
 8003796:	f814 1b01 	ldrb.w	r1, [r4], #1
 800379a:	4858      	ldr	r0, [pc, #352]	; (80038fc <_vfiprintf_r+0x24c>)
 800379c:	f000 fcba 	bl	8004114 <memchr>
 80037a0:	9a04      	ldr	r2, [sp, #16]
 80037a2:	b9d8      	cbnz	r0, 80037dc <_vfiprintf_r+0x12c>
 80037a4:	06d1      	lsls	r1, r2, #27
 80037a6:	bf44      	itt	mi
 80037a8:	2320      	movmi	r3, #32
 80037aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80037ae:	0713      	lsls	r3, r2, #28
 80037b0:	bf44      	itt	mi
 80037b2:	232b      	movmi	r3, #43	; 0x2b
 80037b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80037b8:	f89a 3000 	ldrb.w	r3, [sl]
 80037bc:	2b2a      	cmp	r3, #42	; 0x2a
 80037be:	d015      	beq.n	80037ec <_vfiprintf_r+0x13c>
 80037c0:	4654      	mov	r4, sl
 80037c2:	2000      	movs	r0, #0
 80037c4:	f04f 0c0a 	mov.w	ip, #10
 80037c8:	9a07      	ldr	r2, [sp, #28]
 80037ca:	4621      	mov	r1, r4
 80037cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80037d0:	3b30      	subs	r3, #48	; 0x30
 80037d2:	2b09      	cmp	r3, #9
 80037d4:	d94e      	bls.n	8003874 <_vfiprintf_r+0x1c4>
 80037d6:	b1b0      	cbz	r0, 8003806 <_vfiprintf_r+0x156>
 80037d8:	9207      	str	r2, [sp, #28]
 80037da:	e014      	b.n	8003806 <_vfiprintf_r+0x156>
 80037dc:	eba0 0308 	sub.w	r3, r0, r8
 80037e0:	fa09 f303 	lsl.w	r3, r9, r3
 80037e4:	4313      	orrs	r3, r2
 80037e6:	46a2      	mov	sl, r4
 80037e8:	9304      	str	r3, [sp, #16]
 80037ea:	e7d2      	b.n	8003792 <_vfiprintf_r+0xe2>
 80037ec:	9b03      	ldr	r3, [sp, #12]
 80037ee:	1d19      	adds	r1, r3, #4
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	9103      	str	r1, [sp, #12]
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	bfbb      	ittet	lt
 80037f8:	425b      	neglt	r3, r3
 80037fa:	f042 0202 	orrlt.w	r2, r2, #2
 80037fe:	9307      	strge	r3, [sp, #28]
 8003800:	9307      	strlt	r3, [sp, #28]
 8003802:	bfb8      	it	lt
 8003804:	9204      	strlt	r2, [sp, #16]
 8003806:	7823      	ldrb	r3, [r4, #0]
 8003808:	2b2e      	cmp	r3, #46	; 0x2e
 800380a:	d10c      	bne.n	8003826 <_vfiprintf_r+0x176>
 800380c:	7863      	ldrb	r3, [r4, #1]
 800380e:	2b2a      	cmp	r3, #42	; 0x2a
 8003810:	d135      	bne.n	800387e <_vfiprintf_r+0x1ce>
 8003812:	9b03      	ldr	r3, [sp, #12]
 8003814:	3402      	adds	r4, #2
 8003816:	1d1a      	adds	r2, r3, #4
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	9203      	str	r2, [sp, #12]
 800381c:	2b00      	cmp	r3, #0
 800381e:	bfb8      	it	lt
 8003820:	f04f 33ff 	movlt.w	r3, #4294967295
 8003824:	9305      	str	r3, [sp, #20]
 8003826:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8003900 <_vfiprintf_r+0x250>
 800382a:	2203      	movs	r2, #3
 800382c:	4650      	mov	r0, sl
 800382e:	7821      	ldrb	r1, [r4, #0]
 8003830:	f000 fc70 	bl	8004114 <memchr>
 8003834:	b140      	cbz	r0, 8003848 <_vfiprintf_r+0x198>
 8003836:	2340      	movs	r3, #64	; 0x40
 8003838:	eba0 000a 	sub.w	r0, r0, sl
 800383c:	fa03 f000 	lsl.w	r0, r3, r0
 8003840:	9b04      	ldr	r3, [sp, #16]
 8003842:	3401      	adds	r4, #1
 8003844:	4303      	orrs	r3, r0
 8003846:	9304      	str	r3, [sp, #16]
 8003848:	f814 1b01 	ldrb.w	r1, [r4], #1
 800384c:	2206      	movs	r2, #6
 800384e:	482d      	ldr	r0, [pc, #180]	; (8003904 <_vfiprintf_r+0x254>)
 8003850:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003854:	f000 fc5e 	bl	8004114 <memchr>
 8003858:	2800      	cmp	r0, #0
 800385a:	d03f      	beq.n	80038dc <_vfiprintf_r+0x22c>
 800385c:	4b2a      	ldr	r3, [pc, #168]	; (8003908 <_vfiprintf_r+0x258>)
 800385e:	bb1b      	cbnz	r3, 80038a8 <_vfiprintf_r+0x1f8>
 8003860:	9b03      	ldr	r3, [sp, #12]
 8003862:	3307      	adds	r3, #7
 8003864:	f023 0307 	bic.w	r3, r3, #7
 8003868:	3308      	adds	r3, #8
 800386a:	9303      	str	r3, [sp, #12]
 800386c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800386e:	443b      	add	r3, r7
 8003870:	9309      	str	r3, [sp, #36]	; 0x24
 8003872:	e767      	b.n	8003744 <_vfiprintf_r+0x94>
 8003874:	460c      	mov	r4, r1
 8003876:	2001      	movs	r0, #1
 8003878:	fb0c 3202 	mla	r2, ip, r2, r3
 800387c:	e7a5      	b.n	80037ca <_vfiprintf_r+0x11a>
 800387e:	2300      	movs	r3, #0
 8003880:	f04f 0c0a 	mov.w	ip, #10
 8003884:	4619      	mov	r1, r3
 8003886:	3401      	adds	r4, #1
 8003888:	9305      	str	r3, [sp, #20]
 800388a:	4620      	mov	r0, r4
 800388c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003890:	3a30      	subs	r2, #48	; 0x30
 8003892:	2a09      	cmp	r2, #9
 8003894:	d903      	bls.n	800389e <_vfiprintf_r+0x1ee>
 8003896:	2b00      	cmp	r3, #0
 8003898:	d0c5      	beq.n	8003826 <_vfiprintf_r+0x176>
 800389a:	9105      	str	r1, [sp, #20]
 800389c:	e7c3      	b.n	8003826 <_vfiprintf_r+0x176>
 800389e:	4604      	mov	r4, r0
 80038a0:	2301      	movs	r3, #1
 80038a2:	fb0c 2101 	mla	r1, ip, r1, r2
 80038a6:	e7f0      	b.n	800388a <_vfiprintf_r+0x1da>
 80038a8:	ab03      	add	r3, sp, #12
 80038aa:	9300      	str	r3, [sp, #0]
 80038ac:	462a      	mov	r2, r5
 80038ae:	4630      	mov	r0, r6
 80038b0:	4b16      	ldr	r3, [pc, #88]	; (800390c <_vfiprintf_r+0x25c>)
 80038b2:	a904      	add	r1, sp, #16
 80038b4:	f3af 8000 	nop.w
 80038b8:	4607      	mov	r7, r0
 80038ba:	1c78      	adds	r0, r7, #1
 80038bc:	d1d6      	bne.n	800386c <_vfiprintf_r+0x1bc>
 80038be:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80038c0:	07d9      	lsls	r1, r3, #31
 80038c2:	d405      	bmi.n	80038d0 <_vfiprintf_r+0x220>
 80038c4:	89ab      	ldrh	r3, [r5, #12]
 80038c6:	059a      	lsls	r2, r3, #22
 80038c8:	d402      	bmi.n	80038d0 <_vfiprintf_r+0x220>
 80038ca:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80038cc:	f7ff fcd7 	bl	800327e <__retarget_lock_release_recursive>
 80038d0:	89ab      	ldrh	r3, [r5, #12]
 80038d2:	065b      	lsls	r3, r3, #25
 80038d4:	f53f af12 	bmi.w	80036fc <_vfiprintf_r+0x4c>
 80038d8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80038da:	e711      	b.n	8003700 <_vfiprintf_r+0x50>
 80038dc:	ab03      	add	r3, sp, #12
 80038de:	9300      	str	r3, [sp, #0]
 80038e0:	462a      	mov	r2, r5
 80038e2:	4630      	mov	r0, r6
 80038e4:	4b09      	ldr	r3, [pc, #36]	; (800390c <_vfiprintf_r+0x25c>)
 80038e6:	a904      	add	r1, sp, #16
 80038e8:	f000 f882 	bl	80039f0 <_printf_i>
 80038ec:	e7e4      	b.n	80038b8 <_vfiprintf_r+0x208>
 80038ee:	bf00      	nop
 80038f0:	080048b4 	.word	0x080048b4
 80038f4:	080048d4 	.word	0x080048d4
 80038f8:	08004894 	.word	0x08004894
 80038fc:	080048f4 	.word	0x080048f4
 8003900:	080048fa 	.word	0x080048fa
 8003904:	080048fe 	.word	0x080048fe
 8003908:	00000000 	.word	0x00000000
 800390c:	0800368b 	.word	0x0800368b

08003910 <_printf_common>:
 8003910:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003914:	4616      	mov	r6, r2
 8003916:	4699      	mov	r9, r3
 8003918:	688a      	ldr	r2, [r1, #8]
 800391a:	690b      	ldr	r3, [r1, #16]
 800391c:	4607      	mov	r7, r0
 800391e:	4293      	cmp	r3, r2
 8003920:	bfb8      	it	lt
 8003922:	4613      	movlt	r3, r2
 8003924:	6033      	str	r3, [r6, #0]
 8003926:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800392a:	460c      	mov	r4, r1
 800392c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003930:	b10a      	cbz	r2, 8003936 <_printf_common+0x26>
 8003932:	3301      	adds	r3, #1
 8003934:	6033      	str	r3, [r6, #0]
 8003936:	6823      	ldr	r3, [r4, #0]
 8003938:	0699      	lsls	r1, r3, #26
 800393a:	bf42      	ittt	mi
 800393c:	6833      	ldrmi	r3, [r6, #0]
 800393e:	3302      	addmi	r3, #2
 8003940:	6033      	strmi	r3, [r6, #0]
 8003942:	6825      	ldr	r5, [r4, #0]
 8003944:	f015 0506 	ands.w	r5, r5, #6
 8003948:	d106      	bne.n	8003958 <_printf_common+0x48>
 800394a:	f104 0a19 	add.w	sl, r4, #25
 800394e:	68e3      	ldr	r3, [r4, #12]
 8003950:	6832      	ldr	r2, [r6, #0]
 8003952:	1a9b      	subs	r3, r3, r2
 8003954:	42ab      	cmp	r3, r5
 8003956:	dc28      	bgt.n	80039aa <_printf_common+0x9a>
 8003958:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800395c:	1e13      	subs	r3, r2, #0
 800395e:	6822      	ldr	r2, [r4, #0]
 8003960:	bf18      	it	ne
 8003962:	2301      	movne	r3, #1
 8003964:	0692      	lsls	r2, r2, #26
 8003966:	d42d      	bmi.n	80039c4 <_printf_common+0xb4>
 8003968:	4649      	mov	r1, r9
 800396a:	4638      	mov	r0, r7
 800396c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003970:	47c0      	blx	r8
 8003972:	3001      	adds	r0, #1
 8003974:	d020      	beq.n	80039b8 <_printf_common+0xa8>
 8003976:	6823      	ldr	r3, [r4, #0]
 8003978:	68e5      	ldr	r5, [r4, #12]
 800397a:	f003 0306 	and.w	r3, r3, #6
 800397e:	2b04      	cmp	r3, #4
 8003980:	bf18      	it	ne
 8003982:	2500      	movne	r5, #0
 8003984:	6832      	ldr	r2, [r6, #0]
 8003986:	f04f 0600 	mov.w	r6, #0
 800398a:	68a3      	ldr	r3, [r4, #8]
 800398c:	bf08      	it	eq
 800398e:	1aad      	subeq	r5, r5, r2
 8003990:	6922      	ldr	r2, [r4, #16]
 8003992:	bf08      	it	eq
 8003994:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003998:	4293      	cmp	r3, r2
 800399a:	bfc4      	itt	gt
 800399c:	1a9b      	subgt	r3, r3, r2
 800399e:	18ed      	addgt	r5, r5, r3
 80039a0:	341a      	adds	r4, #26
 80039a2:	42b5      	cmp	r5, r6
 80039a4:	d11a      	bne.n	80039dc <_printf_common+0xcc>
 80039a6:	2000      	movs	r0, #0
 80039a8:	e008      	b.n	80039bc <_printf_common+0xac>
 80039aa:	2301      	movs	r3, #1
 80039ac:	4652      	mov	r2, sl
 80039ae:	4649      	mov	r1, r9
 80039b0:	4638      	mov	r0, r7
 80039b2:	47c0      	blx	r8
 80039b4:	3001      	adds	r0, #1
 80039b6:	d103      	bne.n	80039c0 <_printf_common+0xb0>
 80039b8:	f04f 30ff 	mov.w	r0, #4294967295
 80039bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80039c0:	3501      	adds	r5, #1
 80039c2:	e7c4      	b.n	800394e <_printf_common+0x3e>
 80039c4:	2030      	movs	r0, #48	; 0x30
 80039c6:	18e1      	adds	r1, r4, r3
 80039c8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80039cc:	1c5a      	adds	r2, r3, #1
 80039ce:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80039d2:	4422      	add	r2, r4
 80039d4:	3302      	adds	r3, #2
 80039d6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80039da:	e7c5      	b.n	8003968 <_printf_common+0x58>
 80039dc:	2301      	movs	r3, #1
 80039de:	4622      	mov	r2, r4
 80039e0:	4649      	mov	r1, r9
 80039e2:	4638      	mov	r0, r7
 80039e4:	47c0      	blx	r8
 80039e6:	3001      	adds	r0, #1
 80039e8:	d0e6      	beq.n	80039b8 <_printf_common+0xa8>
 80039ea:	3601      	adds	r6, #1
 80039ec:	e7d9      	b.n	80039a2 <_printf_common+0x92>
	...

080039f0 <_printf_i>:
 80039f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80039f4:	7e0f      	ldrb	r7, [r1, #24]
 80039f6:	4691      	mov	r9, r2
 80039f8:	2f78      	cmp	r7, #120	; 0x78
 80039fa:	4680      	mov	r8, r0
 80039fc:	460c      	mov	r4, r1
 80039fe:	469a      	mov	sl, r3
 8003a00:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003a02:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003a06:	d807      	bhi.n	8003a18 <_printf_i+0x28>
 8003a08:	2f62      	cmp	r7, #98	; 0x62
 8003a0a:	d80a      	bhi.n	8003a22 <_printf_i+0x32>
 8003a0c:	2f00      	cmp	r7, #0
 8003a0e:	f000 80d9 	beq.w	8003bc4 <_printf_i+0x1d4>
 8003a12:	2f58      	cmp	r7, #88	; 0x58
 8003a14:	f000 80a4 	beq.w	8003b60 <_printf_i+0x170>
 8003a18:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003a1c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003a20:	e03a      	b.n	8003a98 <_printf_i+0xa8>
 8003a22:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003a26:	2b15      	cmp	r3, #21
 8003a28:	d8f6      	bhi.n	8003a18 <_printf_i+0x28>
 8003a2a:	a101      	add	r1, pc, #4	; (adr r1, 8003a30 <_printf_i+0x40>)
 8003a2c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003a30:	08003a89 	.word	0x08003a89
 8003a34:	08003a9d 	.word	0x08003a9d
 8003a38:	08003a19 	.word	0x08003a19
 8003a3c:	08003a19 	.word	0x08003a19
 8003a40:	08003a19 	.word	0x08003a19
 8003a44:	08003a19 	.word	0x08003a19
 8003a48:	08003a9d 	.word	0x08003a9d
 8003a4c:	08003a19 	.word	0x08003a19
 8003a50:	08003a19 	.word	0x08003a19
 8003a54:	08003a19 	.word	0x08003a19
 8003a58:	08003a19 	.word	0x08003a19
 8003a5c:	08003bab 	.word	0x08003bab
 8003a60:	08003acd 	.word	0x08003acd
 8003a64:	08003b8d 	.word	0x08003b8d
 8003a68:	08003a19 	.word	0x08003a19
 8003a6c:	08003a19 	.word	0x08003a19
 8003a70:	08003bcd 	.word	0x08003bcd
 8003a74:	08003a19 	.word	0x08003a19
 8003a78:	08003acd 	.word	0x08003acd
 8003a7c:	08003a19 	.word	0x08003a19
 8003a80:	08003a19 	.word	0x08003a19
 8003a84:	08003b95 	.word	0x08003b95
 8003a88:	682b      	ldr	r3, [r5, #0]
 8003a8a:	1d1a      	adds	r2, r3, #4
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	602a      	str	r2, [r5, #0]
 8003a90:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003a94:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003a98:	2301      	movs	r3, #1
 8003a9a:	e0a4      	b.n	8003be6 <_printf_i+0x1f6>
 8003a9c:	6820      	ldr	r0, [r4, #0]
 8003a9e:	6829      	ldr	r1, [r5, #0]
 8003aa0:	0606      	lsls	r6, r0, #24
 8003aa2:	f101 0304 	add.w	r3, r1, #4
 8003aa6:	d50a      	bpl.n	8003abe <_printf_i+0xce>
 8003aa8:	680e      	ldr	r6, [r1, #0]
 8003aaa:	602b      	str	r3, [r5, #0]
 8003aac:	2e00      	cmp	r6, #0
 8003aae:	da03      	bge.n	8003ab8 <_printf_i+0xc8>
 8003ab0:	232d      	movs	r3, #45	; 0x2d
 8003ab2:	4276      	negs	r6, r6
 8003ab4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003ab8:	230a      	movs	r3, #10
 8003aba:	485e      	ldr	r0, [pc, #376]	; (8003c34 <_printf_i+0x244>)
 8003abc:	e019      	b.n	8003af2 <_printf_i+0x102>
 8003abe:	680e      	ldr	r6, [r1, #0]
 8003ac0:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003ac4:	602b      	str	r3, [r5, #0]
 8003ac6:	bf18      	it	ne
 8003ac8:	b236      	sxthne	r6, r6
 8003aca:	e7ef      	b.n	8003aac <_printf_i+0xbc>
 8003acc:	682b      	ldr	r3, [r5, #0]
 8003ace:	6820      	ldr	r0, [r4, #0]
 8003ad0:	1d19      	adds	r1, r3, #4
 8003ad2:	6029      	str	r1, [r5, #0]
 8003ad4:	0601      	lsls	r1, r0, #24
 8003ad6:	d501      	bpl.n	8003adc <_printf_i+0xec>
 8003ad8:	681e      	ldr	r6, [r3, #0]
 8003ada:	e002      	b.n	8003ae2 <_printf_i+0xf2>
 8003adc:	0646      	lsls	r6, r0, #25
 8003ade:	d5fb      	bpl.n	8003ad8 <_printf_i+0xe8>
 8003ae0:	881e      	ldrh	r6, [r3, #0]
 8003ae2:	2f6f      	cmp	r7, #111	; 0x6f
 8003ae4:	bf0c      	ite	eq
 8003ae6:	2308      	moveq	r3, #8
 8003ae8:	230a      	movne	r3, #10
 8003aea:	4852      	ldr	r0, [pc, #328]	; (8003c34 <_printf_i+0x244>)
 8003aec:	2100      	movs	r1, #0
 8003aee:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003af2:	6865      	ldr	r5, [r4, #4]
 8003af4:	2d00      	cmp	r5, #0
 8003af6:	bfa8      	it	ge
 8003af8:	6821      	ldrge	r1, [r4, #0]
 8003afa:	60a5      	str	r5, [r4, #8]
 8003afc:	bfa4      	itt	ge
 8003afe:	f021 0104 	bicge.w	r1, r1, #4
 8003b02:	6021      	strge	r1, [r4, #0]
 8003b04:	b90e      	cbnz	r6, 8003b0a <_printf_i+0x11a>
 8003b06:	2d00      	cmp	r5, #0
 8003b08:	d04d      	beq.n	8003ba6 <_printf_i+0x1b6>
 8003b0a:	4615      	mov	r5, r2
 8003b0c:	fbb6 f1f3 	udiv	r1, r6, r3
 8003b10:	fb03 6711 	mls	r7, r3, r1, r6
 8003b14:	5dc7      	ldrb	r7, [r0, r7]
 8003b16:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003b1a:	4637      	mov	r7, r6
 8003b1c:	42bb      	cmp	r3, r7
 8003b1e:	460e      	mov	r6, r1
 8003b20:	d9f4      	bls.n	8003b0c <_printf_i+0x11c>
 8003b22:	2b08      	cmp	r3, #8
 8003b24:	d10b      	bne.n	8003b3e <_printf_i+0x14e>
 8003b26:	6823      	ldr	r3, [r4, #0]
 8003b28:	07de      	lsls	r6, r3, #31
 8003b2a:	d508      	bpl.n	8003b3e <_printf_i+0x14e>
 8003b2c:	6923      	ldr	r3, [r4, #16]
 8003b2e:	6861      	ldr	r1, [r4, #4]
 8003b30:	4299      	cmp	r1, r3
 8003b32:	bfde      	ittt	le
 8003b34:	2330      	movle	r3, #48	; 0x30
 8003b36:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003b3a:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003b3e:	1b52      	subs	r2, r2, r5
 8003b40:	6122      	str	r2, [r4, #16]
 8003b42:	464b      	mov	r3, r9
 8003b44:	4621      	mov	r1, r4
 8003b46:	4640      	mov	r0, r8
 8003b48:	f8cd a000 	str.w	sl, [sp]
 8003b4c:	aa03      	add	r2, sp, #12
 8003b4e:	f7ff fedf 	bl	8003910 <_printf_common>
 8003b52:	3001      	adds	r0, #1
 8003b54:	d14c      	bne.n	8003bf0 <_printf_i+0x200>
 8003b56:	f04f 30ff 	mov.w	r0, #4294967295
 8003b5a:	b004      	add	sp, #16
 8003b5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003b60:	4834      	ldr	r0, [pc, #208]	; (8003c34 <_printf_i+0x244>)
 8003b62:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003b66:	6829      	ldr	r1, [r5, #0]
 8003b68:	6823      	ldr	r3, [r4, #0]
 8003b6a:	f851 6b04 	ldr.w	r6, [r1], #4
 8003b6e:	6029      	str	r1, [r5, #0]
 8003b70:	061d      	lsls	r5, r3, #24
 8003b72:	d514      	bpl.n	8003b9e <_printf_i+0x1ae>
 8003b74:	07df      	lsls	r7, r3, #31
 8003b76:	bf44      	itt	mi
 8003b78:	f043 0320 	orrmi.w	r3, r3, #32
 8003b7c:	6023      	strmi	r3, [r4, #0]
 8003b7e:	b91e      	cbnz	r6, 8003b88 <_printf_i+0x198>
 8003b80:	6823      	ldr	r3, [r4, #0]
 8003b82:	f023 0320 	bic.w	r3, r3, #32
 8003b86:	6023      	str	r3, [r4, #0]
 8003b88:	2310      	movs	r3, #16
 8003b8a:	e7af      	b.n	8003aec <_printf_i+0xfc>
 8003b8c:	6823      	ldr	r3, [r4, #0]
 8003b8e:	f043 0320 	orr.w	r3, r3, #32
 8003b92:	6023      	str	r3, [r4, #0]
 8003b94:	2378      	movs	r3, #120	; 0x78
 8003b96:	4828      	ldr	r0, [pc, #160]	; (8003c38 <_printf_i+0x248>)
 8003b98:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003b9c:	e7e3      	b.n	8003b66 <_printf_i+0x176>
 8003b9e:	0659      	lsls	r1, r3, #25
 8003ba0:	bf48      	it	mi
 8003ba2:	b2b6      	uxthmi	r6, r6
 8003ba4:	e7e6      	b.n	8003b74 <_printf_i+0x184>
 8003ba6:	4615      	mov	r5, r2
 8003ba8:	e7bb      	b.n	8003b22 <_printf_i+0x132>
 8003baa:	682b      	ldr	r3, [r5, #0]
 8003bac:	6826      	ldr	r6, [r4, #0]
 8003bae:	1d18      	adds	r0, r3, #4
 8003bb0:	6961      	ldr	r1, [r4, #20]
 8003bb2:	6028      	str	r0, [r5, #0]
 8003bb4:	0635      	lsls	r5, r6, #24
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	d501      	bpl.n	8003bbe <_printf_i+0x1ce>
 8003bba:	6019      	str	r1, [r3, #0]
 8003bbc:	e002      	b.n	8003bc4 <_printf_i+0x1d4>
 8003bbe:	0670      	lsls	r0, r6, #25
 8003bc0:	d5fb      	bpl.n	8003bba <_printf_i+0x1ca>
 8003bc2:	8019      	strh	r1, [r3, #0]
 8003bc4:	2300      	movs	r3, #0
 8003bc6:	4615      	mov	r5, r2
 8003bc8:	6123      	str	r3, [r4, #16]
 8003bca:	e7ba      	b.n	8003b42 <_printf_i+0x152>
 8003bcc:	682b      	ldr	r3, [r5, #0]
 8003bce:	2100      	movs	r1, #0
 8003bd0:	1d1a      	adds	r2, r3, #4
 8003bd2:	602a      	str	r2, [r5, #0]
 8003bd4:	681d      	ldr	r5, [r3, #0]
 8003bd6:	6862      	ldr	r2, [r4, #4]
 8003bd8:	4628      	mov	r0, r5
 8003bda:	f000 fa9b 	bl	8004114 <memchr>
 8003bde:	b108      	cbz	r0, 8003be4 <_printf_i+0x1f4>
 8003be0:	1b40      	subs	r0, r0, r5
 8003be2:	6060      	str	r0, [r4, #4]
 8003be4:	6863      	ldr	r3, [r4, #4]
 8003be6:	6123      	str	r3, [r4, #16]
 8003be8:	2300      	movs	r3, #0
 8003bea:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003bee:	e7a8      	b.n	8003b42 <_printf_i+0x152>
 8003bf0:	462a      	mov	r2, r5
 8003bf2:	4649      	mov	r1, r9
 8003bf4:	4640      	mov	r0, r8
 8003bf6:	6923      	ldr	r3, [r4, #16]
 8003bf8:	47d0      	blx	sl
 8003bfa:	3001      	adds	r0, #1
 8003bfc:	d0ab      	beq.n	8003b56 <_printf_i+0x166>
 8003bfe:	6823      	ldr	r3, [r4, #0]
 8003c00:	079b      	lsls	r3, r3, #30
 8003c02:	d413      	bmi.n	8003c2c <_printf_i+0x23c>
 8003c04:	68e0      	ldr	r0, [r4, #12]
 8003c06:	9b03      	ldr	r3, [sp, #12]
 8003c08:	4298      	cmp	r0, r3
 8003c0a:	bfb8      	it	lt
 8003c0c:	4618      	movlt	r0, r3
 8003c0e:	e7a4      	b.n	8003b5a <_printf_i+0x16a>
 8003c10:	2301      	movs	r3, #1
 8003c12:	4632      	mov	r2, r6
 8003c14:	4649      	mov	r1, r9
 8003c16:	4640      	mov	r0, r8
 8003c18:	47d0      	blx	sl
 8003c1a:	3001      	adds	r0, #1
 8003c1c:	d09b      	beq.n	8003b56 <_printf_i+0x166>
 8003c1e:	3501      	adds	r5, #1
 8003c20:	68e3      	ldr	r3, [r4, #12]
 8003c22:	9903      	ldr	r1, [sp, #12]
 8003c24:	1a5b      	subs	r3, r3, r1
 8003c26:	42ab      	cmp	r3, r5
 8003c28:	dcf2      	bgt.n	8003c10 <_printf_i+0x220>
 8003c2a:	e7eb      	b.n	8003c04 <_printf_i+0x214>
 8003c2c:	2500      	movs	r5, #0
 8003c2e:	f104 0619 	add.w	r6, r4, #25
 8003c32:	e7f5      	b.n	8003c20 <_printf_i+0x230>
 8003c34:	08004905 	.word	0x08004905
 8003c38:	08004916 	.word	0x08004916

08003c3c <_sbrk_r>:
 8003c3c:	b538      	push	{r3, r4, r5, lr}
 8003c3e:	2300      	movs	r3, #0
 8003c40:	4d05      	ldr	r5, [pc, #20]	; (8003c58 <_sbrk_r+0x1c>)
 8003c42:	4604      	mov	r4, r0
 8003c44:	4608      	mov	r0, r1
 8003c46:	602b      	str	r3, [r5, #0]
 8003c48:	f7fd f958 	bl	8000efc <_sbrk>
 8003c4c:	1c43      	adds	r3, r0, #1
 8003c4e:	d102      	bne.n	8003c56 <_sbrk_r+0x1a>
 8003c50:	682b      	ldr	r3, [r5, #0]
 8003c52:	b103      	cbz	r3, 8003c56 <_sbrk_r+0x1a>
 8003c54:	6023      	str	r3, [r4, #0]
 8003c56:	bd38      	pop	{r3, r4, r5, pc}
 8003c58:	20000d74 	.word	0x20000d74

08003c5c <__sread>:
 8003c5c:	b510      	push	{r4, lr}
 8003c5e:	460c      	mov	r4, r1
 8003c60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003c64:	f000 fb02 	bl	800426c <_read_r>
 8003c68:	2800      	cmp	r0, #0
 8003c6a:	bfab      	itete	ge
 8003c6c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003c6e:	89a3      	ldrhlt	r3, [r4, #12]
 8003c70:	181b      	addge	r3, r3, r0
 8003c72:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003c76:	bfac      	ite	ge
 8003c78:	6563      	strge	r3, [r4, #84]	; 0x54
 8003c7a:	81a3      	strhlt	r3, [r4, #12]
 8003c7c:	bd10      	pop	{r4, pc}

08003c7e <__swrite>:
 8003c7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003c82:	461f      	mov	r7, r3
 8003c84:	898b      	ldrh	r3, [r1, #12]
 8003c86:	4605      	mov	r5, r0
 8003c88:	05db      	lsls	r3, r3, #23
 8003c8a:	460c      	mov	r4, r1
 8003c8c:	4616      	mov	r6, r2
 8003c8e:	d505      	bpl.n	8003c9c <__swrite+0x1e>
 8003c90:	2302      	movs	r3, #2
 8003c92:	2200      	movs	r2, #0
 8003c94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003c98:	f000 f9c4 	bl	8004024 <_lseek_r>
 8003c9c:	89a3      	ldrh	r3, [r4, #12]
 8003c9e:	4632      	mov	r2, r6
 8003ca0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003ca4:	81a3      	strh	r3, [r4, #12]
 8003ca6:	4628      	mov	r0, r5
 8003ca8:	463b      	mov	r3, r7
 8003caa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003cae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003cb2:	f000 b869 	b.w	8003d88 <_write_r>

08003cb6 <__sseek>:
 8003cb6:	b510      	push	{r4, lr}
 8003cb8:	460c      	mov	r4, r1
 8003cba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003cbe:	f000 f9b1 	bl	8004024 <_lseek_r>
 8003cc2:	1c43      	adds	r3, r0, #1
 8003cc4:	89a3      	ldrh	r3, [r4, #12]
 8003cc6:	bf15      	itete	ne
 8003cc8:	6560      	strne	r0, [r4, #84]	; 0x54
 8003cca:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003cce:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003cd2:	81a3      	strheq	r3, [r4, #12]
 8003cd4:	bf18      	it	ne
 8003cd6:	81a3      	strhne	r3, [r4, #12]
 8003cd8:	bd10      	pop	{r4, pc}

08003cda <__sclose>:
 8003cda:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003cde:	f000 b8d3 	b.w	8003e88 <_close_r>
	...

08003ce4 <__swbuf_r>:
 8003ce4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ce6:	460e      	mov	r6, r1
 8003ce8:	4614      	mov	r4, r2
 8003cea:	4605      	mov	r5, r0
 8003cec:	b118      	cbz	r0, 8003cf6 <__swbuf_r+0x12>
 8003cee:	6983      	ldr	r3, [r0, #24]
 8003cf0:	b90b      	cbnz	r3, 8003cf6 <__swbuf_r+0x12>
 8003cf2:	f7ff fa25 	bl	8003140 <__sinit>
 8003cf6:	4b21      	ldr	r3, [pc, #132]	; (8003d7c <__swbuf_r+0x98>)
 8003cf8:	429c      	cmp	r4, r3
 8003cfa:	d12b      	bne.n	8003d54 <__swbuf_r+0x70>
 8003cfc:	686c      	ldr	r4, [r5, #4]
 8003cfe:	69a3      	ldr	r3, [r4, #24]
 8003d00:	60a3      	str	r3, [r4, #8]
 8003d02:	89a3      	ldrh	r3, [r4, #12]
 8003d04:	071a      	lsls	r2, r3, #28
 8003d06:	d52f      	bpl.n	8003d68 <__swbuf_r+0x84>
 8003d08:	6923      	ldr	r3, [r4, #16]
 8003d0a:	b36b      	cbz	r3, 8003d68 <__swbuf_r+0x84>
 8003d0c:	6923      	ldr	r3, [r4, #16]
 8003d0e:	6820      	ldr	r0, [r4, #0]
 8003d10:	b2f6      	uxtb	r6, r6
 8003d12:	1ac0      	subs	r0, r0, r3
 8003d14:	6963      	ldr	r3, [r4, #20]
 8003d16:	4637      	mov	r7, r6
 8003d18:	4283      	cmp	r3, r0
 8003d1a:	dc04      	bgt.n	8003d26 <__swbuf_r+0x42>
 8003d1c:	4621      	mov	r1, r4
 8003d1e:	4628      	mov	r0, r5
 8003d20:	f000 f944 	bl	8003fac <_fflush_r>
 8003d24:	bb30      	cbnz	r0, 8003d74 <__swbuf_r+0x90>
 8003d26:	68a3      	ldr	r3, [r4, #8]
 8003d28:	3001      	adds	r0, #1
 8003d2a:	3b01      	subs	r3, #1
 8003d2c:	60a3      	str	r3, [r4, #8]
 8003d2e:	6823      	ldr	r3, [r4, #0]
 8003d30:	1c5a      	adds	r2, r3, #1
 8003d32:	6022      	str	r2, [r4, #0]
 8003d34:	701e      	strb	r6, [r3, #0]
 8003d36:	6963      	ldr	r3, [r4, #20]
 8003d38:	4283      	cmp	r3, r0
 8003d3a:	d004      	beq.n	8003d46 <__swbuf_r+0x62>
 8003d3c:	89a3      	ldrh	r3, [r4, #12]
 8003d3e:	07db      	lsls	r3, r3, #31
 8003d40:	d506      	bpl.n	8003d50 <__swbuf_r+0x6c>
 8003d42:	2e0a      	cmp	r6, #10
 8003d44:	d104      	bne.n	8003d50 <__swbuf_r+0x6c>
 8003d46:	4621      	mov	r1, r4
 8003d48:	4628      	mov	r0, r5
 8003d4a:	f000 f92f 	bl	8003fac <_fflush_r>
 8003d4e:	b988      	cbnz	r0, 8003d74 <__swbuf_r+0x90>
 8003d50:	4638      	mov	r0, r7
 8003d52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003d54:	4b0a      	ldr	r3, [pc, #40]	; (8003d80 <__swbuf_r+0x9c>)
 8003d56:	429c      	cmp	r4, r3
 8003d58:	d101      	bne.n	8003d5e <__swbuf_r+0x7a>
 8003d5a:	68ac      	ldr	r4, [r5, #8]
 8003d5c:	e7cf      	b.n	8003cfe <__swbuf_r+0x1a>
 8003d5e:	4b09      	ldr	r3, [pc, #36]	; (8003d84 <__swbuf_r+0xa0>)
 8003d60:	429c      	cmp	r4, r3
 8003d62:	bf08      	it	eq
 8003d64:	68ec      	ldreq	r4, [r5, #12]
 8003d66:	e7ca      	b.n	8003cfe <__swbuf_r+0x1a>
 8003d68:	4621      	mov	r1, r4
 8003d6a:	4628      	mov	r0, r5
 8003d6c:	f000 f81e 	bl	8003dac <__swsetup_r>
 8003d70:	2800      	cmp	r0, #0
 8003d72:	d0cb      	beq.n	8003d0c <__swbuf_r+0x28>
 8003d74:	f04f 37ff 	mov.w	r7, #4294967295
 8003d78:	e7ea      	b.n	8003d50 <__swbuf_r+0x6c>
 8003d7a:	bf00      	nop
 8003d7c:	080048b4 	.word	0x080048b4
 8003d80:	080048d4 	.word	0x080048d4
 8003d84:	08004894 	.word	0x08004894

08003d88 <_write_r>:
 8003d88:	b538      	push	{r3, r4, r5, lr}
 8003d8a:	4604      	mov	r4, r0
 8003d8c:	4608      	mov	r0, r1
 8003d8e:	4611      	mov	r1, r2
 8003d90:	2200      	movs	r2, #0
 8003d92:	4d05      	ldr	r5, [pc, #20]	; (8003da8 <_write_r+0x20>)
 8003d94:	602a      	str	r2, [r5, #0]
 8003d96:	461a      	mov	r2, r3
 8003d98:	f7fc fb34 	bl	8000404 <_write>
 8003d9c:	1c43      	adds	r3, r0, #1
 8003d9e:	d102      	bne.n	8003da6 <_write_r+0x1e>
 8003da0:	682b      	ldr	r3, [r5, #0]
 8003da2:	b103      	cbz	r3, 8003da6 <_write_r+0x1e>
 8003da4:	6023      	str	r3, [r4, #0]
 8003da6:	bd38      	pop	{r3, r4, r5, pc}
 8003da8:	20000d74 	.word	0x20000d74

08003dac <__swsetup_r>:
 8003dac:	4b32      	ldr	r3, [pc, #200]	; (8003e78 <__swsetup_r+0xcc>)
 8003dae:	b570      	push	{r4, r5, r6, lr}
 8003db0:	681d      	ldr	r5, [r3, #0]
 8003db2:	4606      	mov	r6, r0
 8003db4:	460c      	mov	r4, r1
 8003db6:	b125      	cbz	r5, 8003dc2 <__swsetup_r+0x16>
 8003db8:	69ab      	ldr	r3, [r5, #24]
 8003dba:	b913      	cbnz	r3, 8003dc2 <__swsetup_r+0x16>
 8003dbc:	4628      	mov	r0, r5
 8003dbe:	f7ff f9bf 	bl	8003140 <__sinit>
 8003dc2:	4b2e      	ldr	r3, [pc, #184]	; (8003e7c <__swsetup_r+0xd0>)
 8003dc4:	429c      	cmp	r4, r3
 8003dc6:	d10f      	bne.n	8003de8 <__swsetup_r+0x3c>
 8003dc8:	686c      	ldr	r4, [r5, #4]
 8003dca:	89a3      	ldrh	r3, [r4, #12]
 8003dcc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003dd0:	0719      	lsls	r1, r3, #28
 8003dd2:	d42c      	bmi.n	8003e2e <__swsetup_r+0x82>
 8003dd4:	06dd      	lsls	r5, r3, #27
 8003dd6:	d411      	bmi.n	8003dfc <__swsetup_r+0x50>
 8003dd8:	2309      	movs	r3, #9
 8003dda:	6033      	str	r3, [r6, #0]
 8003ddc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003de0:	f04f 30ff 	mov.w	r0, #4294967295
 8003de4:	81a3      	strh	r3, [r4, #12]
 8003de6:	e03e      	b.n	8003e66 <__swsetup_r+0xba>
 8003de8:	4b25      	ldr	r3, [pc, #148]	; (8003e80 <__swsetup_r+0xd4>)
 8003dea:	429c      	cmp	r4, r3
 8003dec:	d101      	bne.n	8003df2 <__swsetup_r+0x46>
 8003dee:	68ac      	ldr	r4, [r5, #8]
 8003df0:	e7eb      	b.n	8003dca <__swsetup_r+0x1e>
 8003df2:	4b24      	ldr	r3, [pc, #144]	; (8003e84 <__swsetup_r+0xd8>)
 8003df4:	429c      	cmp	r4, r3
 8003df6:	bf08      	it	eq
 8003df8:	68ec      	ldreq	r4, [r5, #12]
 8003dfa:	e7e6      	b.n	8003dca <__swsetup_r+0x1e>
 8003dfc:	0758      	lsls	r0, r3, #29
 8003dfe:	d512      	bpl.n	8003e26 <__swsetup_r+0x7a>
 8003e00:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003e02:	b141      	cbz	r1, 8003e16 <__swsetup_r+0x6a>
 8003e04:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003e08:	4299      	cmp	r1, r3
 8003e0a:	d002      	beq.n	8003e12 <__swsetup_r+0x66>
 8003e0c:	4630      	mov	r0, r6
 8003e0e:	f000 f9b5 	bl	800417c <_free_r>
 8003e12:	2300      	movs	r3, #0
 8003e14:	6363      	str	r3, [r4, #52]	; 0x34
 8003e16:	89a3      	ldrh	r3, [r4, #12]
 8003e18:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003e1c:	81a3      	strh	r3, [r4, #12]
 8003e1e:	2300      	movs	r3, #0
 8003e20:	6063      	str	r3, [r4, #4]
 8003e22:	6923      	ldr	r3, [r4, #16]
 8003e24:	6023      	str	r3, [r4, #0]
 8003e26:	89a3      	ldrh	r3, [r4, #12]
 8003e28:	f043 0308 	orr.w	r3, r3, #8
 8003e2c:	81a3      	strh	r3, [r4, #12]
 8003e2e:	6923      	ldr	r3, [r4, #16]
 8003e30:	b94b      	cbnz	r3, 8003e46 <__swsetup_r+0x9a>
 8003e32:	89a3      	ldrh	r3, [r4, #12]
 8003e34:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003e38:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e3c:	d003      	beq.n	8003e46 <__swsetup_r+0x9a>
 8003e3e:	4621      	mov	r1, r4
 8003e40:	4630      	mov	r0, r6
 8003e42:	f000 f927 	bl	8004094 <__smakebuf_r>
 8003e46:	89a0      	ldrh	r0, [r4, #12]
 8003e48:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003e4c:	f010 0301 	ands.w	r3, r0, #1
 8003e50:	d00a      	beq.n	8003e68 <__swsetup_r+0xbc>
 8003e52:	2300      	movs	r3, #0
 8003e54:	60a3      	str	r3, [r4, #8]
 8003e56:	6963      	ldr	r3, [r4, #20]
 8003e58:	425b      	negs	r3, r3
 8003e5a:	61a3      	str	r3, [r4, #24]
 8003e5c:	6923      	ldr	r3, [r4, #16]
 8003e5e:	b943      	cbnz	r3, 8003e72 <__swsetup_r+0xc6>
 8003e60:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003e64:	d1ba      	bne.n	8003ddc <__swsetup_r+0x30>
 8003e66:	bd70      	pop	{r4, r5, r6, pc}
 8003e68:	0781      	lsls	r1, r0, #30
 8003e6a:	bf58      	it	pl
 8003e6c:	6963      	ldrpl	r3, [r4, #20]
 8003e6e:	60a3      	str	r3, [r4, #8]
 8003e70:	e7f4      	b.n	8003e5c <__swsetup_r+0xb0>
 8003e72:	2000      	movs	r0, #0
 8003e74:	e7f7      	b.n	8003e66 <__swsetup_r+0xba>
 8003e76:	bf00      	nop
 8003e78:	20000020 	.word	0x20000020
 8003e7c:	080048b4 	.word	0x080048b4
 8003e80:	080048d4 	.word	0x080048d4
 8003e84:	08004894 	.word	0x08004894

08003e88 <_close_r>:
 8003e88:	b538      	push	{r3, r4, r5, lr}
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	4d05      	ldr	r5, [pc, #20]	; (8003ea4 <_close_r+0x1c>)
 8003e8e:	4604      	mov	r4, r0
 8003e90:	4608      	mov	r0, r1
 8003e92:	602b      	str	r3, [r5, #0]
 8003e94:	f7fd f826 	bl	8000ee4 <_close>
 8003e98:	1c43      	adds	r3, r0, #1
 8003e9a:	d102      	bne.n	8003ea2 <_close_r+0x1a>
 8003e9c:	682b      	ldr	r3, [r5, #0]
 8003e9e:	b103      	cbz	r3, 8003ea2 <_close_r+0x1a>
 8003ea0:	6023      	str	r3, [r4, #0]
 8003ea2:	bd38      	pop	{r3, r4, r5, pc}
 8003ea4:	20000d74 	.word	0x20000d74

08003ea8 <__sflush_r>:
 8003ea8:	898a      	ldrh	r2, [r1, #12]
 8003eaa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003eac:	4605      	mov	r5, r0
 8003eae:	0710      	lsls	r0, r2, #28
 8003eb0:	460c      	mov	r4, r1
 8003eb2:	d457      	bmi.n	8003f64 <__sflush_r+0xbc>
 8003eb4:	684b      	ldr	r3, [r1, #4]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	dc04      	bgt.n	8003ec4 <__sflush_r+0x1c>
 8003eba:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	dc01      	bgt.n	8003ec4 <__sflush_r+0x1c>
 8003ec0:	2000      	movs	r0, #0
 8003ec2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003ec4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003ec6:	2e00      	cmp	r6, #0
 8003ec8:	d0fa      	beq.n	8003ec0 <__sflush_r+0x18>
 8003eca:	2300      	movs	r3, #0
 8003ecc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003ed0:	682f      	ldr	r7, [r5, #0]
 8003ed2:	602b      	str	r3, [r5, #0]
 8003ed4:	d032      	beq.n	8003f3c <__sflush_r+0x94>
 8003ed6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003ed8:	89a3      	ldrh	r3, [r4, #12]
 8003eda:	075a      	lsls	r2, r3, #29
 8003edc:	d505      	bpl.n	8003eea <__sflush_r+0x42>
 8003ede:	6863      	ldr	r3, [r4, #4]
 8003ee0:	1ac0      	subs	r0, r0, r3
 8003ee2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003ee4:	b10b      	cbz	r3, 8003eea <__sflush_r+0x42>
 8003ee6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003ee8:	1ac0      	subs	r0, r0, r3
 8003eea:	2300      	movs	r3, #0
 8003eec:	4602      	mov	r2, r0
 8003eee:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003ef0:	4628      	mov	r0, r5
 8003ef2:	6a21      	ldr	r1, [r4, #32]
 8003ef4:	47b0      	blx	r6
 8003ef6:	1c43      	adds	r3, r0, #1
 8003ef8:	89a3      	ldrh	r3, [r4, #12]
 8003efa:	d106      	bne.n	8003f0a <__sflush_r+0x62>
 8003efc:	6829      	ldr	r1, [r5, #0]
 8003efe:	291d      	cmp	r1, #29
 8003f00:	d82c      	bhi.n	8003f5c <__sflush_r+0xb4>
 8003f02:	4a29      	ldr	r2, [pc, #164]	; (8003fa8 <__sflush_r+0x100>)
 8003f04:	40ca      	lsrs	r2, r1
 8003f06:	07d6      	lsls	r6, r2, #31
 8003f08:	d528      	bpl.n	8003f5c <__sflush_r+0xb4>
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	6062      	str	r2, [r4, #4]
 8003f0e:	6922      	ldr	r2, [r4, #16]
 8003f10:	04d9      	lsls	r1, r3, #19
 8003f12:	6022      	str	r2, [r4, #0]
 8003f14:	d504      	bpl.n	8003f20 <__sflush_r+0x78>
 8003f16:	1c42      	adds	r2, r0, #1
 8003f18:	d101      	bne.n	8003f1e <__sflush_r+0x76>
 8003f1a:	682b      	ldr	r3, [r5, #0]
 8003f1c:	b903      	cbnz	r3, 8003f20 <__sflush_r+0x78>
 8003f1e:	6560      	str	r0, [r4, #84]	; 0x54
 8003f20:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003f22:	602f      	str	r7, [r5, #0]
 8003f24:	2900      	cmp	r1, #0
 8003f26:	d0cb      	beq.n	8003ec0 <__sflush_r+0x18>
 8003f28:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003f2c:	4299      	cmp	r1, r3
 8003f2e:	d002      	beq.n	8003f36 <__sflush_r+0x8e>
 8003f30:	4628      	mov	r0, r5
 8003f32:	f000 f923 	bl	800417c <_free_r>
 8003f36:	2000      	movs	r0, #0
 8003f38:	6360      	str	r0, [r4, #52]	; 0x34
 8003f3a:	e7c2      	b.n	8003ec2 <__sflush_r+0x1a>
 8003f3c:	6a21      	ldr	r1, [r4, #32]
 8003f3e:	2301      	movs	r3, #1
 8003f40:	4628      	mov	r0, r5
 8003f42:	47b0      	blx	r6
 8003f44:	1c41      	adds	r1, r0, #1
 8003f46:	d1c7      	bne.n	8003ed8 <__sflush_r+0x30>
 8003f48:	682b      	ldr	r3, [r5, #0]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d0c4      	beq.n	8003ed8 <__sflush_r+0x30>
 8003f4e:	2b1d      	cmp	r3, #29
 8003f50:	d001      	beq.n	8003f56 <__sflush_r+0xae>
 8003f52:	2b16      	cmp	r3, #22
 8003f54:	d101      	bne.n	8003f5a <__sflush_r+0xb2>
 8003f56:	602f      	str	r7, [r5, #0]
 8003f58:	e7b2      	b.n	8003ec0 <__sflush_r+0x18>
 8003f5a:	89a3      	ldrh	r3, [r4, #12]
 8003f5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003f60:	81a3      	strh	r3, [r4, #12]
 8003f62:	e7ae      	b.n	8003ec2 <__sflush_r+0x1a>
 8003f64:	690f      	ldr	r7, [r1, #16]
 8003f66:	2f00      	cmp	r7, #0
 8003f68:	d0aa      	beq.n	8003ec0 <__sflush_r+0x18>
 8003f6a:	0793      	lsls	r3, r2, #30
 8003f6c:	bf18      	it	ne
 8003f6e:	2300      	movne	r3, #0
 8003f70:	680e      	ldr	r6, [r1, #0]
 8003f72:	bf08      	it	eq
 8003f74:	694b      	ldreq	r3, [r1, #20]
 8003f76:	1bf6      	subs	r6, r6, r7
 8003f78:	600f      	str	r7, [r1, #0]
 8003f7a:	608b      	str	r3, [r1, #8]
 8003f7c:	2e00      	cmp	r6, #0
 8003f7e:	dd9f      	ble.n	8003ec0 <__sflush_r+0x18>
 8003f80:	4633      	mov	r3, r6
 8003f82:	463a      	mov	r2, r7
 8003f84:	4628      	mov	r0, r5
 8003f86:	6a21      	ldr	r1, [r4, #32]
 8003f88:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8003f8c:	47e0      	blx	ip
 8003f8e:	2800      	cmp	r0, #0
 8003f90:	dc06      	bgt.n	8003fa0 <__sflush_r+0xf8>
 8003f92:	89a3      	ldrh	r3, [r4, #12]
 8003f94:	f04f 30ff 	mov.w	r0, #4294967295
 8003f98:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003f9c:	81a3      	strh	r3, [r4, #12]
 8003f9e:	e790      	b.n	8003ec2 <__sflush_r+0x1a>
 8003fa0:	4407      	add	r7, r0
 8003fa2:	1a36      	subs	r6, r6, r0
 8003fa4:	e7ea      	b.n	8003f7c <__sflush_r+0xd4>
 8003fa6:	bf00      	nop
 8003fa8:	20400001 	.word	0x20400001

08003fac <_fflush_r>:
 8003fac:	b538      	push	{r3, r4, r5, lr}
 8003fae:	690b      	ldr	r3, [r1, #16]
 8003fb0:	4605      	mov	r5, r0
 8003fb2:	460c      	mov	r4, r1
 8003fb4:	b913      	cbnz	r3, 8003fbc <_fflush_r+0x10>
 8003fb6:	2500      	movs	r5, #0
 8003fb8:	4628      	mov	r0, r5
 8003fba:	bd38      	pop	{r3, r4, r5, pc}
 8003fbc:	b118      	cbz	r0, 8003fc6 <_fflush_r+0x1a>
 8003fbe:	6983      	ldr	r3, [r0, #24]
 8003fc0:	b90b      	cbnz	r3, 8003fc6 <_fflush_r+0x1a>
 8003fc2:	f7ff f8bd 	bl	8003140 <__sinit>
 8003fc6:	4b14      	ldr	r3, [pc, #80]	; (8004018 <_fflush_r+0x6c>)
 8003fc8:	429c      	cmp	r4, r3
 8003fca:	d11b      	bne.n	8004004 <_fflush_r+0x58>
 8003fcc:	686c      	ldr	r4, [r5, #4]
 8003fce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d0ef      	beq.n	8003fb6 <_fflush_r+0xa>
 8003fd6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003fd8:	07d0      	lsls	r0, r2, #31
 8003fda:	d404      	bmi.n	8003fe6 <_fflush_r+0x3a>
 8003fdc:	0599      	lsls	r1, r3, #22
 8003fde:	d402      	bmi.n	8003fe6 <_fflush_r+0x3a>
 8003fe0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003fe2:	f7ff f94b 	bl	800327c <__retarget_lock_acquire_recursive>
 8003fe6:	4628      	mov	r0, r5
 8003fe8:	4621      	mov	r1, r4
 8003fea:	f7ff ff5d 	bl	8003ea8 <__sflush_r>
 8003fee:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003ff0:	4605      	mov	r5, r0
 8003ff2:	07da      	lsls	r2, r3, #31
 8003ff4:	d4e0      	bmi.n	8003fb8 <_fflush_r+0xc>
 8003ff6:	89a3      	ldrh	r3, [r4, #12]
 8003ff8:	059b      	lsls	r3, r3, #22
 8003ffa:	d4dd      	bmi.n	8003fb8 <_fflush_r+0xc>
 8003ffc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003ffe:	f7ff f93e 	bl	800327e <__retarget_lock_release_recursive>
 8004002:	e7d9      	b.n	8003fb8 <_fflush_r+0xc>
 8004004:	4b05      	ldr	r3, [pc, #20]	; (800401c <_fflush_r+0x70>)
 8004006:	429c      	cmp	r4, r3
 8004008:	d101      	bne.n	800400e <_fflush_r+0x62>
 800400a:	68ac      	ldr	r4, [r5, #8]
 800400c:	e7df      	b.n	8003fce <_fflush_r+0x22>
 800400e:	4b04      	ldr	r3, [pc, #16]	; (8004020 <_fflush_r+0x74>)
 8004010:	429c      	cmp	r4, r3
 8004012:	bf08      	it	eq
 8004014:	68ec      	ldreq	r4, [r5, #12]
 8004016:	e7da      	b.n	8003fce <_fflush_r+0x22>
 8004018:	080048b4 	.word	0x080048b4
 800401c:	080048d4 	.word	0x080048d4
 8004020:	08004894 	.word	0x08004894

08004024 <_lseek_r>:
 8004024:	b538      	push	{r3, r4, r5, lr}
 8004026:	4604      	mov	r4, r0
 8004028:	4608      	mov	r0, r1
 800402a:	4611      	mov	r1, r2
 800402c:	2200      	movs	r2, #0
 800402e:	4d05      	ldr	r5, [pc, #20]	; (8004044 <_lseek_r+0x20>)
 8004030:	602a      	str	r2, [r5, #0]
 8004032:	461a      	mov	r2, r3
 8004034:	f7fc ff60 	bl	8000ef8 <_lseek>
 8004038:	1c43      	adds	r3, r0, #1
 800403a:	d102      	bne.n	8004042 <_lseek_r+0x1e>
 800403c:	682b      	ldr	r3, [r5, #0]
 800403e:	b103      	cbz	r3, 8004042 <_lseek_r+0x1e>
 8004040:	6023      	str	r3, [r4, #0]
 8004042:	bd38      	pop	{r3, r4, r5, pc}
 8004044:	20000d74 	.word	0x20000d74

08004048 <__swhatbuf_r>:
 8004048:	b570      	push	{r4, r5, r6, lr}
 800404a:	460e      	mov	r6, r1
 800404c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004050:	4614      	mov	r4, r2
 8004052:	2900      	cmp	r1, #0
 8004054:	461d      	mov	r5, r3
 8004056:	b096      	sub	sp, #88	; 0x58
 8004058:	da08      	bge.n	800406c <__swhatbuf_r+0x24>
 800405a:	2200      	movs	r2, #0
 800405c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8004060:	602a      	str	r2, [r5, #0]
 8004062:	061a      	lsls	r2, r3, #24
 8004064:	d410      	bmi.n	8004088 <__swhatbuf_r+0x40>
 8004066:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800406a:	e00e      	b.n	800408a <__swhatbuf_r+0x42>
 800406c:	466a      	mov	r2, sp
 800406e:	f000 f90f 	bl	8004290 <_fstat_r>
 8004072:	2800      	cmp	r0, #0
 8004074:	dbf1      	blt.n	800405a <__swhatbuf_r+0x12>
 8004076:	9a01      	ldr	r2, [sp, #4]
 8004078:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800407c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004080:	425a      	negs	r2, r3
 8004082:	415a      	adcs	r2, r3
 8004084:	602a      	str	r2, [r5, #0]
 8004086:	e7ee      	b.n	8004066 <__swhatbuf_r+0x1e>
 8004088:	2340      	movs	r3, #64	; 0x40
 800408a:	2000      	movs	r0, #0
 800408c:	6023      	str	r3, [r4, #0]
 800408e:	b016      	add	sp, #88	; 0x58
 8004090:	bd70      	pop	{r4, r5, r6, pc}
	...

08004094 <__smakebuf_r>:
 8004094:	898b      	ldrh	r3, [r1, #12]
 8004096:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004098:	079d      	lsls	r5, r3, #30
 800409a:	4606      	mov	r6, r0
 800409c:	460c      	mov	r4, r1
 800409e:	d507      	bpl.n	80040b0 <__smakebuf_r+0x1c>
 80040a0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80040a4:	6023      	str	r3, [r4, #0]
 80040a6:	6123      	str	r3, [r4, #16]
 80040a8:	2301      	movs	r3, #1
 80040aa:	6163      	str	r3, [r4, #20]
 80040ac:	b002      	add	sp, #8
 80040ae:	bd70      	pop	{r4, r5, r6, pc}
 80040b0:	466a      	mov	r2, sp
 80040b2:	ab01      	add	r3, sp, #4
 80040b4:	f7ff ffc8 	bl	8004048 <__swhatbuf_r>
 80040b8:	9900      	ldr	r1, [sp, #0]
 80040ba:	4605      	mov	r5, r0
 80040bc:	4630      	mov	r0, r6
 80040be:	f7ff f8ff 	bl	80032c0 <_malloc_r>
 80040c2:	b948      	cbnz	r0, 80040d8 <__smakebuf_r+0x44>
 80040c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80040c8:	059a      	lsls	r2, r3, #22
 80040ca:	d4ef      	bmi.n	80040ac <__smakebuf_r+0x18>
 80040cc:	f023 0303 	bic.w	r3, r3, #3
 80040d0:	f043 0302 	orr.w	r3, r3, #2
 80040d4:	81a3      	strh	r3, [r4, #12]
 80040d6:	e7e3      	b.n	80040a0 <__smakebuf_r+0xc>
 80040d8:	4b0d      	ldr	r3, [pc, #52]	; (8004110 <__smakebuf_r+0x7c>)
 80040da:	62b3      	str	r3, [r6, #40]	; 0x28
 80040dc:	89a3      	ldrh	r3, [r4, #12]
 80040de:	6020      	str	r0, [r4, #0]
 80040e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80040e4:	81a3      	strh	r3, [r4, #12]
 80040e6:	9b00      	ldr	r3, [sp, #0]
 80040e8:	6120      	str	r0, [r4, #16]
 80040ea:	6163      	str	r3, [r4, #20]
 80040ec:	9b01      	ldr	r3, [sp, #4]
 80040ee:	b15b      	cbz	r3, 8004108 <__smakebuf_r+0x74>
 80040f0:	4630      	mov	r0, r6
 80040f2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80040f6:	f000 f8dd 	bl	80042b4 <_isatty_r>
 80040fa:	b128      	cbz	r0, 8004108 <__smakebuf_r+0x74>
 80040fc:	89a3      	ldrh	r3, [r4, #12]
 80040fe:	f023 0303 	bic.w	r3, r3, #3
 8004102:	f043 0301 	orr.w	r3, r3, #1
 8004106:	81a3      	strh	r3, [r4, #12]
 8004108:	89a0      	ldrh	r0, [r4, #12]
 800410a:	4305      	orrs	r5, r0
 800410c:	81a5      	strh	r5, [r4, #12]
 800410e:	e7cd      	b.n	80040ac <__smakebuf_r+0x18>
 8004110:	080030d9 	.word	0x080030d9

08004114 <memchr>:
 8004114:	4603      	mov	r3, r0
 8004116:	b510      	push	{r4, lr}
 8004118:	b2c9      	uxtb	r1, r1
 800411a:	4402      	add	r2, r0
 800411c:	4293      	cmp	r3, r2
 800411e:	4618      	mov	r0, r3
 8004120:	d101      	bne.n	8004126 <memchr+0x12>
 8004122:	2000      	movs	r0, #0
 8004124:	e003      	b.n	800412e <memchr+0x1a>
 8004126:	7804      	ldrb	r4, [r0, #0]
 8004128:	3301      	adds	r3, #1
 800412a:	428c      	cmp	r4, r1
 800412c:	d1f6      	bne.n	800411c <memchr+0x8>
 800412e:	bd10      	pop	{r4, pc}

08004130 <memmove>:
 8004130:	4288      	cmp	r0, r1
 8004132:	b510      	push	{r4, lr}
 8004134:	eb01 0402 	add.w	r4, r1, r2
 8004138:	d902      	bls.n	8004140 <memmove+0x10>
 800413a:	4284      	cmp	r4, r0
 800413c:	4623      	mov	r3, r4
 800413e:	d807      	bhi.n	8004150 <memmove+0x20>
 8004140:	1e43      	subs	r3, r0, #1
 8004142:	42a1      	cmp	r1, r4
 8004144:	d008      	beq.n	8004158 <memmove+0x28>
 8004146:	f811 2b01 	ldrb.w	r2, [r1], #1
 800414a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800414e:	e7f8      	b.n	8004142 <memmove+0x12>
 8004150:	4601      	mov	r1, r0
 8004152:	4402      	add	r2, r0
 8004154:	428a      	cmp	r2, r1
 8004156:	d100      	bne.n	800415a <memmove+0x2a>
 8004158:	bd10      	pop	{r4, pc}
 800415a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800415e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004162:	e7f7      	b.n	8004154 <memmove+0x24>

08004164 <__malloc_lock>:
 8004164:	4801      	ldr	r0, [pc, #4]	; (800416c <__malloc_lock+0x8>)
 8004166:	f7ff b889 	b.w	800327c <__retarget_lock_acquire_recursive>
 800416a:	bf00      	nop
 800416c:	20000d68 	.word	0x20000d68

08004170 <__malloc_unlock>:
 8004170:	4801      	ldr	r0, [pc, #4]	; (8004178 <__malloc_unlock+0x8>)
 8004172:	f7ff b884 	b.w	800327e <__retarget_lock_release_recursive>
 8004176:	bf00      	nop
 8004178:	20000d68 	.word	0x20000d68

0800417c <_free_r>:
 800417c:	b538      	push	{r3, r4, r5, lr}
 800417e:	4605      	mov	r5, r0
 8004180:	2900      	cmp	r1, #0
 8004182:	d040      	beq.n	8004206 <_free_r+0x8a>
 8004184:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004188:	1f0c      	subs	r4, r1, #4
 800418a:	2b00      	cmp	r3, #0
 800418c:	bfb8      	it	lt
 800418e:	18e4      	addlt	r4, r4, r3
 8004190:	f7ff ffe8 	bl	8004164 <__malloc_lock>
 8004194:	4a1c      	ldr	r2, [pc, #112]	; (8004208 <_free_r+0x8c>)
 8004196:	6813      	ldr	r3, [r2, #0]
 8004198:	b933      	cbnz	r3, 80041a8 <_free_r+0x2c>
 800419a:	6063      	str	r3, [r4, #4]
 800419c:	6014      	str	r4, [r2, #0]
 800419e:	4628      	mov	r0, r5
 80041a0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80041a4:	f7ff bfe4 	b.w	8004170 <__malloc_unlock>
 80041a8:	42a3      	cmp	r3, r4
 80041aa:	d908      	bls.n	80041be <_free_r+0x42>
 80041ac:	6820      	ldr	r0, [r4, #0]
 80041ae:	1821      	adds	r1, r4, r0
 80041b0:	428b      	cmp	r3, r1
 80041b2:	bf01      	itttt	eq
 80041b4:	6819      	ldreq	r1, [r3, #0]
 80041b6:	685b      	ldreq	r3, [r3, #4]
 80041b8:	1809      	addeq	r1, r1, r0
 80041ba:	6021      	streq	r1, [r4, #0]
 80041bc:	e7ed      	b.n	800419a <_free_r+0x1e>
 80041be:	461a      	mov	r2, r3
 80041c0:	685b      	ldr	r3, [r3, #4]
 80041c2:	b10b      	cbz	r3, 80041c8 <_free_r+0x4c>
 80041c4:	42a3      	cmp	r3, r4
 80041c6:	d9fa      	bls.n	80041be <_free_r+0x42>
 80041c8:	6811      	ldr	r1, [r2, #0]
 80041ca:	1850      	adds	r0, r2, r1
 80041cc:	42a0      	cmp	r0, r4
 80041ce:	d10b      	bne.n	80041e8 <_free_r+0x6c>
 80041d0:	6820      	ldr	r0, [r4, #0]
 80041d2:	4401      	add	r1, r0
 80041d4:	1850      	adds	r0, r2, r1
 80041d6:	4283      	cmp	r3, r0
 80041d8:	6011      	str	r1, [r2, #0]
 80041da:	d1e0      	bne.n	800419e <_free_r+0x22>
 80041dc:	6818      	ldr	r0, [r3, #0]
 80041de:	685b      	ldr	r3, [r3, #4]
 80041e0:	4401      	add	r1, r0
 80041e2:	6011      	str	r1, [r2, #0]
 80041e4:	6053      	str	r3, [r2, #4]
 80041e6:	e7da      	b.n	800419e <_free_r+0x22>
 80041e8:	d902      	bls.n	80041f0 <_free_r+0x74>
 80041ea:	230c      	movs	r3, #12
 80041ec:	602b      	str	r3, [r5, #0]
 80041ee:	e7d6      	b.n	800419e <_free_r+0x22>
 80041f0:	6820      	ldr	r0, [r4, #0]
 80041f2:	1821      	adds	r1, r4, r0
 80041f4:	428b      	cmp	r3, r1
 80041f6:	bf01      	itttt	eq
 80041f8:	6819      	ldreq	r1, [r3, #0]
 80041fa:	685b      	ldreq	r3, [r3, #4]
 80041fc:	1809      	addeq	r1, r1, r0
 80041fe:	6021      	streq	r1, [r4, #0]
 8004200:	6063      	str	r3, [r4, #4]
 8004202:	6054      	str	r4, [r2, #4]
 8004204:	e7cb      	b.n	800419e <_free_r+0x22>
 8004206:	bd38      	pop	{r3, r4, r5, pc}
 8004208:	20000d6c 	.word	0x20000d6c

0800420c <_realloc_r>:
 800420c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004210:	4680      	mov	r8, r0
 8004212:	4614      	mov	r4, r2
 8004214:	460e      	mov	r6, r1
 8004216:	b921      	cbnz	r1, 8004222 <_realloc_r+0x16>
 8004218:	4611      	mov	r1, r2
 800421a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800421e:	f7ff b84f 	b.w	80032c0 <_malloc_r>
 8004222:	b92a      	cbnz	r2, 8004230 <_realloc_r+0x24>
 8004224:	f7ff ffaa 	bl	800417c <_free_r>
 8004228:	4625      	mov	r5, r4
 800422a:	4628      	mov	r0, r5
 800422c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004230:	f000 f850 	bl	80042d4 <_malloc_usable_size_r>
 8004234:	4284      	cmp	r4, r0
 8004236:	4607      	mov	r7, r0
 8004238:	d802      	bhi.n	8004240 <_realloc_r+0x34>
 800423a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800423e:	d812      	bhi.n	8004266 <_realloc_r+0x5a>
 8004240:	4621      	mov	r1, r4
 8004242:	4640      	mov	r0, r8
 8004244:	f7ff f83c 	bl	80032c0 <_malloc_r>
 8004248:	4605      	mov	r5, r0
 800424a:	2800      	cmp	r0, #0
 800424c:	d0ed      	beq.n	800422a <_realloc_r+0x1e>
 800424e:	42bc      	cmp	r4, r7
 8004250:	4622      	mov	r2, r4
 8004252:	4631      	mov	r1, r6
 8004254:	bf28      	it	cs
 8004256:	463a      	movcs	r2, r7
 8004258:	f7fe feb8 	bl	8002fcc <memcpy>
 800425c:	4631      	mov	r1, r6
 800425e:	4640      	mov	r0, r8
 8004260:	f7ff ff8c 	bl	800417c <_free_r>
 8004264:	e7e1      	b.n	800422a <_realloc_r+0x1e>
 8004266:	4635      	mov	r5, r6
 8004268:	e7df      	b.n	800422a <_realloc_r+0x1e>
	...

0800426c <_read_r>:
 800426c:	b538      	push	{r3, r4, r5, lr}
 800426e:	4604      	mov	r4, r0
 8004270:	4608      	mov	r0, r1
 8004272:	4611      	mov	r1, r2
 8004274:	2200      	movs	r2, #0
 8004276:	4d05      	ldr	r5, [pc, #20]	; (800428c <_read_r+0x20>)
 8004278:	602a      	str	r2, [r5, #0]
 800427a:	461a      	mov	r2, r3
 800427c:	f7fc fe24 	bl	8000ec8 <_read>
 8004280:	1c43      	adds	r3, r0, #1
 8004282:	d102      	bne.n	800428a <_read_r+0x1e>
 8004284:	682b      	ldr	r3, [r5, #0]
 8004286:	b103      	cbz	r3, 800428a <_read_r+0x1e>
 8004288:	6023      	str	r3, [r4, #0]
 800428a:	bd38      	pop	{r3, r4, r5, pc}
 800428c:	20000d74 	.word	0x20000d74

08004290 <_fstat_r>:
 8004290:	b538      	push	{r3, r4, r5, lr}
 8004292:	2300      	movs	r3, #0
 8004294:	4d06      	ldr	r5, [pc, #24]	; (80042b0 <_fstat_r+0x20>)
 8004296:	4604      	mov	r4, r0
 8004298:	4608      	mov	r0, r1
 800429a:	4611      	mov	r1, r2
 800429c:	602b      	str	r3, [r5, #0]
 800429e:	f7fc fe24 	bl	8000eea <_fstat>
 80042a2:	1c43      	adds	r3, r0, #1
 80042a4:	d102      	bne.n	80042ac <_fstat_r+0x1c>
 80042a6:	682b      	ldr	r3, [r5, #0]
 80042a8:	b103      	cbz	r3, 80042ac <_fstat_r+0x1c>
 80042aa:	6023      	str	r3, [r4, #0]
 80042ac:	bd38      	pop	{r3, r4, r5, pc}
 80042ae:	bf00      	nop
 80042b0:	20000d74 	.word	0x20000d74

080042b4 <_isatty_r>:
 80042b4:	b538      	push	{r3, r4, r5, lr}
 80042b6:	2300      	movs	r3, #0
 80042b8:	4d05      	ldr	r5, [pc, #20]	; (80042d0 <_isatty_r+0x1c>)
 80042ba:	4604      	mov	r4, r0
 80042bc:	4608      	mov	r0, r1
 80042be:	602b      	str	r3, [r5, #0]
 80042c0:	f7fc fe18 	bl	8000ef4 <_isatty>
 80042c4:	1c43      	adds	r3, r0, #1
 80042c6:	d102      	bne.n	80042ce <_isatty_r+0x1a>
 80042c8:	682b      	ldr	r3, [r5, #0]
 80042ca:	b103      	cbz	r3, 80042ce <_isatty_r+0x1a>
 80042cc:	6023      	str	r3, [r4, #0]
 80042ce:	bd38      	pop	{r3, r4, r5, pc}
 80042d0:	20000d74 	.word	0x20000d74

080042d4 <_malloc_usable_size_r>:
 80042d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80042d8:	1f18      	subs	r0, r3, #4
 80042da:	2b00      	cmp	r3, #0
 80042dc:	bfbc      	itt	lt
 80042de:	580b      	ldrlt	r3, [r1, r0]
 80042e0:	18c0      	addlt	r0, r0, r3
 80042e2:	4770      	bx	lr

080042e4 <_init>:
 80042e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042e6:	bf00      	nop
 80042e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80042ea:	bc08      	pop	{r3}
 80042ec:	469e      	mov	lr, r3
 80042ee:	4770      	bx	lr

080042f0 <_fini>:
 80042f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042f2:	bf00      	nop
 80042f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80042f6:	bc08      	pop	{r3}
 80042f8:	469e      	mov	lr, r3
 80042fa:	4770      	bx	lr
