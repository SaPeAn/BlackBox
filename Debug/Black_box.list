
Black_box.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006a88  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000974  08006b98  08006b98  00016b98  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800750c  0800750c  000201f0  2**0
                  CONTENTS
  4 .ARM          00000000  0800750c  0800750c  000201f0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800750c  0800750c  000201f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800750c  0800750c  0001750c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007510  08007510  00017510  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  20000000  08007514  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000cf4  200001f0  08007704  000201f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000ee4  08007704  00020ee4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000176bd  00000000  00000000  00020219  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003826  00000000  00000000  000378d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    00011bb7  00000000  00000000  0003b0fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ee0  00000000  00000000  0004ccb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000023d8  00000000  00000000  0004db98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001a40e  00000000  00000000  0004ff70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001a9d0  00000000  00000000  0006a37e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000950df  00000000  00000000  00084d4e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00119e2d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000043ac  00000000  00000000  00119e80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001f0 	.word	0x200001f0
 800012c:	00000000 	.word	0x00000000
 8000130:	08006b80 	.word	0x08006b80

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001f4 	.word	0x200001f4
 800014c:	08006b80 	.word	0x08006b80

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <RingBuf_DataWatch.part.0>:
 * @param[out] data Data from buffer
 * @param[in] len Length of data to be read [bytes]
 * @param[in] rb #RINGBUF_t structure instance
 * @return #RINGBUF_STATUS enum
 */
RINGBUF_STATUS RingBuf_DataWatch(void *data, u16_t len, RINGBUF_t *rb) {
 8000a88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000a8c:	460e      	mov	r6, r1
    if (len > rb->size)
        return RINGBUF_OVERFLOW;
    // OUTPUT data index start address
    u16_t s_addr = 0;
    // available space in the end of buffer
    u16_t space = rb->size - rb->tail;
 8000a8e:	68d1      	ldr	r1, [r2, #12]
 8000a90:	6857      	ldr	r7, [r2, #4]
 8000a92:	fa1f f981 	uxth.w	r9, r1
 8000a96:	b2bf      	uxth	r7, r7
 8000a98:	eba9 0507 	sub.w	r5, r9, r7
 8000a9c:	b2ad      	uxth	r5, r5
    u16_t loc_tail = rb->tail;
    if (len > space) { // if len > available space
 8000a9e:	42b5      	cmp	r5, r6
RINGBUF_STATUS RingBuf_DataWatch(void *data, u16_t len, RINGBUF_t *rb) {
 8000aa0:	4614      	mov	r4, r2
 8000aa2:	4680      	mov	r8, r0
    u16_t loc_tail = rb->tail;
 8000aa4:	6853      	ldr	r3, [r2, #4]
    if (len > space) { // if len > available space
 8000aa6:	d310      	bcc.n	8000aca <RingBuf_DataWatch.part.0+0x42>
 8000aa8:	2500      	movs	r5, #0
 8000aaa:	b29b      	uxth	r3, r3
        s_addr = space;
        // new length - len-space
        len -= space;
    }
    // copy all the data from the buf storage
    memcpy(&data[s_addr * rb->cell_size], &rb->buf[loc_tail * rb->cell_size], len * rb->cell_size);
 8000aac:	6920      	ldr	r0, [r4, #16]
 8000aae:	6822      	ldr	r2, [r4, #0]
 8000ab0:	6921      	ldr	r1, [r4, #16]
 8000ab2:	fb05 8000 	mla	r0, r5, r0, r8
 8000ab6:	fb03 2101 	mla	r1, r3, r1, r2
 8000aba:	6922      	ldr	r2, [r4, #16]
 8000abc:	fb06 f202 	mul.w	r2, r6, r2
 8000ac0:	f003 f94e 	bl	8003d60 <memcpy>
    return RINGBUF_OK;
}
 8000ac4:	2000      	movs	r0, #0
 8000ac6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        memcpy(&data[s_addr * rb->cell_size], &rb->buf[loc_tail * rb->cell_size], space * rb->cell_size);
 8000aca:	6922      	ldr	r2, [r4, #16]
 8000acc:	6921      	ldr	r1, [r4, #16]
 8000ace:	6822      	ldr	r2, [r4, #0]
 8000ad0:	b29b      	uxth	r3, r3
 8000ad2:	fb01 2103 	mla	r1, r1, r3, r2
 8000ad6:	6922      	ldr	r2, [r4, #16]
 8000ad8:	443e      	add	r6, r7
 8000ada:	fb05 f202 	mul.w	r2, r5, r2
        len -= space;
 8000ade:	eba6 0609 	sub.w	r6, r6, r9
        memcpy(&data[s_addr * rb->cell_size], &rb->buf[loc_tail * rb->cell_size], space * rb->cell_size);
 8000ae2:	f003 f93d 	bl	8003d60 <memcpy>
        len -= space;
 8000ae6:	b2b6      	uxth	r6, r6
 8000ae8:	2300      	movs	r3, #0
 8000aea:	e7df      	b.n	8000aac <RingBuf_DataWatch.part.0+0x24>

08000aec <RingBuf_Init>:
    rb->size = size; // size of array
 8000aec:	60d9      	str	r1, [r3, #12]
    rb->buf = buf;      // set pointer to buffer
 8000aee:	6018      	str	r0, [r3, #0]
    rb->cell_size = cellsize; // size of 1 cell of array
 8000af0:	611a      	str	r2, [r3, #16]
    if (rb->buf == NULL) return RINGBUF_PARAM_ERR;
 8000af2:	b120      	cbz	r0, 8000afe <RingBuf_Init+0x12>
    rb->head = rb->tail = 0;
 8000af4:	2200      	movs	r2, #0
 8000af6:	605a      	str	r2, [r3, #4]
    return rb->buf ? RINGBUF_OK : RINGBUF_PARAM_ERR;
 8000af8:	4610      	mov	r0, r2
    rb->head = rb->tail = 0;
 8000afa:	609a      	str	r2, [r3, #8]
    return rb->buf ? RINGBUF_OK : RINGBUF_PARAM_ERR;
 8000afc:	4770      	bx	lr
 8000afe:	2002      	movs	r0, #2
}
 8000b00:	4770      	bx	lr
 8000b02:	bf00      	nop

08000b04 <RingBuf_Available>:
    if (rb->buf == NULL) return RINGBUF_PARAM_ERR;
 8000b04:	680a      	ldr	r2, [r1, #0]
RINGBUF_STATUS RingBuf_Available(u16_t *len, RINGBUF_t *rb) {
 8000b06:	4603      	mov	r3, r0
    if (rb->buf == NULL) return RINGBUF_PARAM_ERR;
 8000b08:	b18a      	cbz	r2, 8000b2e <RingBuf_Available+0x2a>
    if (rb->head < rb->tail)
 8000b0a:	6888      	ldr	r0, [r1, #8]
 8000b0c:	684a      	ldr	r2, [r1, #4]
 8000b0e:	4290      	cmp	r0, r2
 8000b10:	d207      	bcs.n	8000b22 <RingBuf_Available+0x1e>
        *len = rb->size - rb->tail + rb->head;
 8000b12:	68ca      	ldr	r2, [r1, #12]
 8000b14:	6848      	ldr	r0, [r1, #4]
 8000b16:	6889      	ldr	r1, [r1, #8]
 8000b18:	440a      	add	r2, r1
 8000b1a:	1a12      	subs	r2, r2, r0
 8000b1c:	801a      	strh	r2, [r3, #0]
    return RINGBUF_OK;
 8000b1e:	2000      	movs	r0, #0
 8000b20:	4770      	bx	lr
        *len = rb->head - rb->tail;
 8000b22:	688a      	ldr	r2, [r1, #8]
 8000b24:	6849      	ldr	r1, [r1, #4]
    return RINGBUF_OK;
 8000b26:	2000      	movs	r0, #0
        *len = rb->head - rb->tail;
 8000b28:	1a52      	subs	r2, r2, r1
 8000b2a:	801a      	strh	r2, [r3, #0]
 8000b2c:	4770      	bx	lr
    if (rb->buf == NULL) return RINGBUF_PARAM_ERR;
 8000b2e:	2002      	movs	r0, #2
}
 8000b30:	4770      	bx	lr
 8000b32:	bf00      	nop

08000b34 <RingBuf_BytePut>:
    if (rb->buf == NULL) return RINGBUF_PARAM_ERR;
 8000b34:	680b      	ldr	r3, [r1, #0]
 8000b36:	b183      	cbz	r3, 8000b5a <RingBuf_BytePut+0x26>
    rb->buf[rb->head++] = data; // put byte in cell and increment data
 8000b38:	688a      	ldr	r2, [r1, #8]
RINGBUF_STATUS RingBuf_BytePut(const u8_t data, RINGBUF_t *rb) {
 8000b3a:	b410      	push	{r4}
    rb->buf[rb->head++] = data; // put byte in cell and increment data
 8000b3c:	1c54      	adds	r4, r2, #1
 8000b3e:	608c      	str	r4, [r1, #8]
 8000b40:	5498      	strb	r0, [r3, r2]
    if (rb->head >= rb->size) // if overflow
 8000b42:	688a      	ldr	r2, [r1, #8]
 8000b44:	68cb      	ldr	r3, [r1, #12]
 8000b46:	429a      	cmp	r2, r3
 8000b48:	d202      	bcs.n	8000b50 <RingBuf_BytePut+0x1c>
    return RINGBUF_OK;
 8000b4a:	2000      	movs	r0, #0
}
 8000b4c:	bc10      	pop	{r4}
 8000b4e:	4770      	bx	lr
        rb->head = 0;   // set to start
 8000b50:	2300      	movs	r3, #0
}
 8000b52:	bc10      	pop	{r4}
    return RINGBUF_OK;
 8000b54:	4618      	mov	r0, r3
        rb->head = 0;   // set to start
 8000b56:	608b      	str	r3, [r1, #8]
}
 8000b58:	4770      	bx	lr
    if (rb->buf == NULL) return RINGBUF_PARAM_ERR;
 8000b5a:	2002      	movs	r0, #2
}
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop

08000b60 <RingBuf_DataRead>:
RINGBUF_STATUS RingBuf_DataRead(void *data, u16_t len, RINGBUF_t *rb) {
 8000b60:	b570      	push	{r4, r5, r6, lr}
    if (rb->buf == NULL) return RINGBUF_PARAM_ERR;
 8000b62:	6816      	ldr	r6, [r2, #0]
 8000b64:	b18e      	cbz	r6, 8000b8a <RingBuf_DataRead+0x2a>
    if (data == NULL)
 8000b66:	b180      	cbz	r0, 8000b8a <RingBuf_DataRead+0x2a>
    if (len > rb->size)
 8000b68:	68d3      	ldr	r3, [r2, #12]
 8000b6a:	460d      	mov	r5, r1
 8000b6c:	4299      	cmp	r1, r3
 8000b6e:	4614      	mov	r4, r2
 8000b70:	d80d      	bhi.n	8000b8e <RingBuf_DataRead+0x2e>
 8000b72:	f7ff ff89 	bl	8000a88 <RingBuf_DataWatch.part.0>
    if (st != RINGBUF_OK)
 8000b76:	b938      	cbnz	r0, 8000b88 <RingBuf_DataRead+0x28>
    rb->tail += len;
 8000b78:	6861      	ldr	r1, [r4, #4]
 8000b7a:	440d      	add	r5, r1
 8000b7c:	6065      	str	r5, [r4, #4]
    if (rb->tail >= rb->size)
 8000b7e:	6862      	ldr	r2, [r4, #4]
 8000b80:	68e3      	ldr	r3, [r4, #12]
 8000b82:	429a      	cmp	r2, r3
 8000b84:	d300      	bcc.n	8000b88 <RingBuf_DataRead+0x28>
        rb->tail = 0;
 8000b86:	6060      	str	r0, [r4, #4]
}
 8000b88:	bd70      	pop	{r4, r5, r6, pc}
    if (rb->buf == NULL) return RINGBUF_PARAM_ERR;
 8000b8a:	2002      	movs	r0, #2
}
 8000b8c:	bd70      	pop	{r4, r5, r6, pc}
        return RINGBUF_OVERFLOW;
 8000b8e:	2003      	movs	r0, #3
}
 8000b90:	bd70      	pop	{r4, r5, r6, pc}
 8000b92:	bf00      	nop

08000b94 <lcd_bufupload>:
  HAL_SPI_Transmit(&hspi2, data, N, 10);
  DISP_INIT_SEND_DAT;
}

void lcd_bufupload(void)
{
 8000b94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b96:	24b0      	movs	r4, #176	; 0xb0
 8000b98:	4d14      	ldr	r5, [pc, #80]	; (8000bec <lcd_bufupload+0x58>)
  DISP_INIT_SEND_COM;
 8000b9a:	4f15      	ldr	r7, [pc, #84]	; (8000bf0 <lcd_bufupload+0x5c>)
  HAL_SPI_Transmit(&hspi2, data, N, 10);
 8000b9c:	4e15      	ldr	r6, [pc, #84]	; (8000bf4 <lcd_bufupload+0x60>)
{
 8000b9e:	b083      	sub	sp, #12
  for(uint8_t j = 0; j < 8; j++)
  {
	uint8_t tmp_arr[] = {(0xB0 + j), 0x10, 0x00};
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	2310      	movs	r3, #16
  DISP_INIT_SEND_COM;
 8000ba4:	2102      	movs	r1, #2
 8000ba6:	4638      	mov	r0, r7
	uint8_t tmp_arr[] = {(0xB0 + j), 0x10, 0x00};
 8000ba8:	f88d 4004 	strb.w	r4, [sp, #4]
 8000bac:	f88d 3005 	strb.w	r3, [sp, #5]
 8000bb0:	f88d 2006 	strb.w	r2, [sp, #6]
  DISP_INIT_SEND_COM;
 8000bb4:	f001 fc90 	bl	80024d8 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi2, data, N, 10);
 8000bb8:	230a      	movs	r3, #10
 8000bba:	2203      	movs	r2, #3
 8000bbc:	a901      	add	r1, sp, #4
 8000bbe:	4630      	mov	r0, r6
 8000bc0:	f002 fb56 	bl	8003270 <HAL_SPI_Transmit>
  for(uint8_t j = 0; j < 8; j++)
 8000bc4:	3401      	adds	r4, #1
  DISP_INIT_SEND_DAT;
 8000bc6:	2201      	movs	r2, #1
 8000bc8:	2102      	movs	r1, #2
 8000bca:	4638      	mov	r0, r7
 8000bcc:	f001 fc84 	bl	80024d8 <HAL_GPIO_WritePin>
  for(uint8_t j = 0; j < 8; j++)
 8000bd0:	b2e4      	uxtb	r4, r4
    lcd_sendcommands(tmp_arr, 3);
    HAL_SPI_Transmit(&hspi2, dispbuffer[j], 128, 10);
 8000bd2:	4629      	mov	r1, r5
 8000bd4:	230a      	movs	r3, #10
 8000bd6:	2280      	movs	r2, #128	; 0x80
 8000bd8:	4630      	mov	r0, r6
 8000bda:	f002 fb49 	bl	8003270 <HAL_SPI_Transmit>
  for(uint8_t j = 0; j < 8; j++)
 8000bde:	2cb8      	cmp	r4, #184	; 0xb8
 8000be0:	f105 0580 	add.w	r5, r5, #128	; 0x80
 8000be4:	d1dc      	bne.n	8000ba0 <lcd_bufupload+0xc>
  }
}
 8000be6:	b003      	add	sp, #12
 8000be8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000bea:	bf00      	nop
 8000bec:	2000020c 	.word	0x2000020c
 8000bf0:	40010800 	.word	0x40010800
 8000bf4:	2000070c 	.word	0x2000070c

08000bf8 <lcd_init>:
{
 8000bf8:	b510      	push	{r4, lr}
  DISP_RESET_OFF;
 8000bfa:	4c1e      	ldr	r4, [pc, #120]	; (8000c74 <lcd_init+0x7c>)
{
 8000bfc:	b084      	sub	sp, #16
  DISP_RESET_OFF;
 8000bfe:	4620      	mov	r0, r4
 8000c00:	2201      	movs	r2, #1
 8000c02:	2104      	movs	r1, #4
 8000c04:	f001 fc68 	bl	80024d8 <HAL_GPIO_WritePin>
  DISP_INIT_SEND_DAT;
 8000c08:	2201      	movs	r2, #1
 8000c0a:	2102      	movs	r1, #2
 8000c0c:	4620      	mov	r0, r4
 8000c0e:	f001 fc63 	bl	80024d8 <HAL_GPIO_WritePin>
  HAL_Delay(2);
 8000c12:	2002      	movs	r0, #2
 8000c14:	f000 fede 	bl	80019d4 <HAL_Delay>
  DISP_RESET_ON;
 8000c18:	2200      	movs	r2, #0
 8000c1a:	2104      	movs	r1, #4
 8000c1c:	4620      	mov	r0, r4
 8000c1e:	f001 fc5b 	bl	80024d8 <HAL_GPIO_WritePin>
  HAL_Delay(2);
 8000c22:	2002      	movs	r0, #2
 8000c24:	f000 fed6 	bl	80019d4 <HAL_Delay>
  DISP_RESET_OFF;
 8000c28:	4620      	mov	r0, r4
 8000c2a:	2201      	movs	r2, #1
 8000c2c:	2104      	movs	r1, #4
 8000c2e:	f001 fc53 	bl	80024d8 <HAL_GPIO_WritePin>
  DISP_INIT_SEND_COM;
 8000c32:	4620      	mov	r0, r4
 8000c34:	2200      	movs	r2, #0
 8000c36:	2102      	movs	r1, #2
 8000c38:	f001 fc4e 	bl	80024d8 <HAL_GPIO_WritePin>
  uint8_t init_data_array[13] = {
 8000c3c:	46ec      	mov	ip, sp
 8000c3e:	4b0e      	ldr	r3, [pc, #56]	; (8000c78 <lcd_init+0x80>)
 8000c40:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000c42:	e8ac 0007 	stmia.w	ip!, {r0, r1, r2}
  HAL_SPI_Transmit(&hspi2, init_data_array, 13, 20);
 8000c46:	4669      	mov	r1, sp
  uint8_t init_data_array[13] = {
 8000c48:	f88c 3000 	strb.w	r3, [ip]
  HAL_SPI_Transmit(&hspi2, init_data_array, 13, 20);
 8000c4c:	220d      	movs	r2, #13
 8000c4e:	2314      	movs	r3, #20
 8000c50:	480a      	ldr	r0, [pc, #40]	; (8000c7c <lcd_init+0x84>)
 8000c52:	f002 fb0d 	bl	8003270 <HAL_SPI_Transmit>
}

void lcd_buferase(void)
{
  for(uint8_t j = 0; j < 8; j++)
    for(uint8_t i = 0; i < 128; i++) dispbuffer[j][i] = 0;
 8000c56:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c5a:	2100      	movs	r1, #0
 8000c5c:	4808      	ldr	r0, [pc, #32]	; (8000c80 <lcd_init+0x88>)
 8000c5e:	f003 f88d 	bl	8003d7c <memset>
  lcd_bufupload();
 8000c62:	f7ff ff97 	bl	8000b94 <lcd_bufupload>
  DISP_INIT_SEND_DAT;
 8000c66:	2201      	movs	r2, #1
 8000c68:	2102      	movs	r1, #2
 8000c6a:	4620      	mov	r0, r4
 8000c6c:	f001 fc34 	bl	80024d8 <HAL_GPIO_WritePin>
}
 8000c70:	b004      	add	sp, #16
 8000c72:	bd10      	pop	{r4, pc}
 8000c74:	40010800 	.word	0x40010800
 8000c78:	08006b98 	.word	0x08006b98
 8000c7c:	2000070c 	.word	0x2000070c
 8000c80:	2000020c 	.word	0x2000020c

08000c84 <lcd_bufwstr8x5>:
{
 8000c84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if(str == NULL) str = str_null;
 8000c88:	4c1d      	ldr	r4, [pc, #116]	; (8000d00 <lcd_bufwstr8x5+0x7c>)
{
 8000c8a:	b083      	sub	sp, #12
  if(str == NULL) str = str_null;
 8000c8c:	2800      	cmp	r0, #0
 8000c8e:	bf14      	ite	ne
 8000c90:	4682      	movne	sl, r0
 8000c92:	46a2      	moveq	sl, r4
  while(str[i])
 8000c94:	f89a 6000 	ldrb.w	r6, [sl]
{
 8000c98:	9301      	str	r3, [sp, #4]
  while(str[i])
 8000c9a:	b366      	cbz	r6, 8000cf6 <lcd_bufwstr8x5+0x72>
  uint8_t i = 0;
 8000c9c:	2000      	movs	r0, #0
 8000c9e:	4c19      	ldr	r4, [pc, #100]	; (8000d04 <lcd_bufwstr8x5+0x80>)
	dispbuffer[pg][cl] = 0x00;
 8000ca0:	4683      	mov	fp, r0
 8000ca2:	4d19      	ldr	r5, [pc, #100]	; (8000d08 <lcd_bufwstr8x5+0x84>)
 8000ca4:	e002      	b.n	8000cac <lcd_bufwstr8x5+0x28>
  while(str[i])
 8000ca6:	f81a 6000 	ldrb.w	r6, [sl, r0]
 8000caa:	b32e      	cbz	r6, 8000cf8 <lcd_bufwstr8x5+0x74>
	    dispbuffer[pg][cl + i] = char_8x5[ch][i];
 8000cac:	eb06 0686 	add.w	r6, r6, r6, lsl #2
 8000cb0:	eb05 0c06 	add.w	ip, r5, r6
 8000cb4:	eb02 17c1 	add.w	r7, r2, r1, lsl #7
	cl = cl+5;
 8000cb8:	1d53      	adds	r3, r2, #5
    cl += 6;
 8000cba:	3206      	adds	r2, #6
	    dispbuffer[pg][cl + i] = char_8x5[ch][i];
 8000cbc:	f855 8006 	ldr.w	r8, [r5, r6]
 8000cc0:	f89c e004 	ldrb.w	lr, [ip, #4]
    cl += 6;
 8000cc4:	b2d2      	uxtb	r2, r2
	dispbuffer[pg][cl] = 0x00;
 8000cc6:	eb04 16c1 	add.w	r6, r4, r1, lsl #7
	    dispbuffer[pg][cl + i] = char_8x5[ch][i];
 8000cca:	eb04 0c07 	add.w	ip, r4, r7
	dispbuffer[pg][cl] = 0x00;
 8000cce:	b2db      	uxtb	r3, r3
    if(cl > 122)
 8000cd0:	2a7a      	cmp	r2, #122	; 0x7a
	    dispbuffer[pg][cl + i] = char_8x5[ch][i];
 8000cd2:	f844 8007 	str.w	r8, [r4, r7]
    i++;
 8000cd6:	f100 0901 	add.w	r9, r0, #1
	    dispbuffer[pg][cl + i] = char_8x5[ch][i];
 8000cda:	f88c e004 	strb.w	lr, [ip, #4]
	dispbuffer[pg][cl] = 0x00;
 8000cde:	f806 b003 	strb.w	fp, [r6, r3]
    if(cl > 122)
 8000ce2:	d904      	bls.n	8000cee <lcd_bufwstr8x5+0x6a>
      if(newline_fl)
 8000ce4:	9b01      	ldr	r3, [sp, #4]
 8000ce6:	b13b      	cbz	r3, 8000cf8 <lcd_bufwstr8x5+0x74>
        cl = 0;
 8000ce8:	2200      	movs	r2, #0
        pg++;
 8000cea:	3101      	adds	r1, #1
 8000cec:	b2c9      	uxtb	r1, r1
    if(pg > 7) return 0;
 8000cee:	2907      	cmp	r1, #7
    i++;
 8000cf0:	fa5f f089 	uxtb.w	r0, r9
    if(pg > 7) return 0;
 8000cf4:	d9d7      	bls.n	8000ca6 <lcd_bufwstr8x5+0x22>
  uint8_t i = 0;
 8000cf6:	2000      	movs	r0, #0
}
 8000cf8:	b003      	add	sp, #12
 8000cfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000cfe:	bf00      	nop
 8000d00:	20000000 	.word	0x20000000
 8000d04:	2000020c 	.word	0x2000020c
 8000d08:	08006ba8 	.word	0x08006ba8

08000d0c <lcd_buferase>:
    for(uint8_t i = 0; i < 128; i++) dispbuffer[j][i] = 0;
 8000d0c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000d10:	2100      	movs	r1, #0
 8000d12:	4801      	ldr	r0, [pc, #4]	; (8000d18 <lcd_buferase+0xc>)
 8000d14:	f003 b832 	b.w	8003d7c <memset>
 8000d18:	2000020c 	.word	0x2000020c

08000d1c <_write>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
  {
  	for (int i = 0; i < len; i++)
 8000d1c:	1e10      	subs	r0, r2, #0
 8000d1e:	dd29      	ble.n	8000d74 <_write+0x58>
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000d20:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000d24:	eb01 0c00 	add.w	ip, r1, r0
 8000d28:	f8d3 2e80 	ldr.w	r2, [r3, #3712]	; 0xe80
  	{
  		ITM_SendChar(*ptr++);
 8000d2c:	3101      	adds	r1, #1
 8000d2e:	07d2      	lsls	r2, r2, #31
 8000d30:	d51d      	bpl.n	8000d6e <_write+0x52>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000d32:	f8d3 2e00 	ldr.w	r2, [r3, #3584]	; 0xe00
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000d36:	07d2      	lsls	r2, r2, #31
 8000d38:	d519      	bpl.n	8000d6e <_write+0x52>
  {
 8000d3a:	b500      	push	{lr}
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000d3c:	681a      	ldr	r2, [r3, #0]
  		ITM_SendChar(*ptr++);
 8000d3e:	f811 ec01 	ldrb.w	lr, [r1, #-1]
 8000d42:	b91a      	cbnz	r2, 8000d4c <_write+0x30>
    {
      __NOP();
 8000d44:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000d46:	681a      	ldr	r2, [r3, #0]
 8000d48:	2a00      	cmp	r2, #0
 8000d4a:	d0fb      	beq.n	8000d44 <_write+0x28>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000d4c:	f883 e000 	strb.w	lr, [r3]
  	for (int i = 0; i < len; i++)
 8000d50:	4561      	cmp	r1, ip
 8000d52:	d00a      	beq.n	8000d6a <_write+0x4e>
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000d54:	f8d3 2e80 	ldr.w	r2, [r3, #3712]	; 0xe80
  		ITM_SendChar(*ptr++);
 8000d58:	3101      	adds	r1, #1
 8000d5a:	07d2      	lsls	r2, r2, #31
 8000d5c:	d5f8      	bpl.n	8000d50 <_write+0x34>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000d5e:	f8d3 2e00 	ldr.w	r2, [r3, #3584]	; 0xe00
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000d62:	07d2      	lsls	r2, r2, #31
 8000d64:	d4ea      	bmi.n	8000d3c <_write+0x20>
  	for (int i = 0; i < len; i++)
 8000d66:	4561      	cmp	r1, ip
 8000d68:	d1f4      	bne.n	8000d54 <_write+0x38>
  	}
  	return len;
  }
 8000d6a:	f85d fb04 	ldr.w	pc, [sp], #4
  	for (int i = 0; i < len; i++)
 8000d6e:	4561      	cmp	r1, ip
 8000d70:	d1da      	bne.n	8000d28 <_write+0xc>
 8000d72:	4770      	bx	lr
  }
 8000d74:	4770      	bx	lr
 8000d76:	bf00      	nop

08000d78 <SystemClock_Config>:
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000d78:	2201      	movs	r2, #1
{
 8000d7a:	b510      	push	{r4, lr}
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d7c:	f44f 3080 	mov.w	r0, #65536	; 0x10000
{
 8000d80:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d82:	2300      	movs	r3, #0
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8000d84:	2105      	movs	r1, #5
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d86:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d88:	e9cd 220d 	strd	r2, r2, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000d8c:	f44f 12e0 	mov.w	r2, #1835008	; 0x1c0000
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d90:	900b      	str	r0, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d92:	9012      	str	r0, [sp, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d94:	a80a      	add	r0, sp, #40	; 0x28
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d96:	e9cd 330f 	strd	r3, r3, [sp, #60]	; 0x3c
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d9a:	e9cd 3306 	strd	r3, r3, [sp, #24]
 8000d9e:	e9cd 3308 	strd	r3, r3, [sp, #32]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000da2:	e9cd 3302 	strd	r3, r3, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8000da6:	910a      	str	r1, [sp, #40]	; 0x28
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000da8:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000daa:	9305      	str	r3, [sp, #20]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000dac:	9301      	str	r3, [sp, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000dae:	9411      	str	r4, [sp, #68]	; 0x44
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000db0:	9304      	str	r3, [sp, #16]
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000db2:	9213      	str	r2, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000db4:	f001 fb9a 	bl	80024ec <HAL_RCC_OscConfig>
 8000db8:	b108      	cbz	r0, 8000dbe <SystemClock_Config+0x46>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000dba:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000dbc:	e7fe      	b.n	8000dbc <SystemClock_Config+0x44>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	220f      	movs	r2, #15
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000dc2:	9307      	str	r3, [sp, #28]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000dc4:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000dc6:	f44f 6380 	mov.w	r3, #1024	; 0x400
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000dca:	4621      	mov	r1, r4
 8000dcc:	a805      	add	r0, sp, #20
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000dce:	9406      	str	r4, [sp, #24]
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000dd0:	9205      	str	r2, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000dd2:	9308      	str	r3, [sp, #32]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000dd4:	f001 fdb6 	bl	8002944 <HAL_RCC_ClockConfig>
 8000dd8:	b108      	cbz	r0, 8000dde <SystemClock_Config+0x66>
 8000dda:	b672      	cpsid	i
  while (1)
 8000ddc:	e7fe      	b.n	8000ddc <SystemClock_Config+0x64>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_ADC;
 8000dde:	2103      	movs	r1, #3
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000de0:	f44f 7280 	mov.w	r2, #256	; 0x100
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000de4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000de8:	a801      	add	r0, sp, #4
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000dea:	e9cd 1201 	strd	r1, r2, [sp, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000dee:	9303      	str	r3, [sp, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000df0:	f001 fe68 	bl	8002ac4 <HAL_RCCEx_PeriphCLKConfig>
 8000df4:	b108      	cbz	r0, 8000dfa <SystemClock_Config+0x82>
 8000df6:	b672      	cpsid	i
  while (1)
 8000df8:	e7fe      	b.n	8000df8 <SystemClock_Config+0x80>
}
 8000dfa:	b014      	add	sp, #80	; 0x50
 8000dfc:	bd10      	pop	{r4, pc}
 8000dfe:	bf00      	nop

08000e00 <main>:
{
 8000e00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e04:	2400      	movs	r4, #0
  GPIO_InitStruct.Pin = JOYSTICK_BTN_Pin;
 8000e06:	f04f 0808 	mov.w	r8, #8
{
 8000e0a:	b09b      	sub	sp, #108	; 0x6c
  HAL_Init();
 8000e0c:	f000 fdbe 	bl	800198c <HAL_Init>
  SystemClock_Config();
 8000e10:	f7ff ffb2 	bl	8000d78 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e14:	e9cd 4412 	strd	r4, r4, [sp, #72]	; 0x48
 8000e18:	e9cd 4414 	strd	r4, r4, [sp, #80]	; 0x50
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e1c:	4da7      	ldr	r5, [pc, #668]	; (80010bc <main+0x2bc>)
  HAL_GPIO_WritePin(SHUTDOWN_GPIO_Port, SHUTDOWN_Pin, GPIO_PIN_SET);
 8000e1e:	2201      	movs	r2, #1
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e20:	69ab      	ldr	r3, [r5, #24]
  HAL_GPIO_WritePin(SHUTDOWN_GPIO_Port, SHUTDOWN_Pin, GPIO_PIN_SET);
 8000e22:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e26:	f043 0310 	orr.w	r3, r3, #16
 8000e2a:	61ab      	str	r3, [r5, #24]
 8000e2c:	69ab      	ldr	r3, [r5, #24]
  HAL_GPIO_WritePin(SHUTDOWN_GPIO_Port, SHUTDOWN_Pin, GPIO_PIN_SET);
 8000e2e:	48a4      	ldr	r0, [pc, #656]	; (80010c0 <main+0x2c0>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e30:	f003 0310 	and.w	r3, r3, #16
 8000e34:	9305      	str	r3, [sp, #20]
 8000e36:	9b05      	ldr	r3, [sp, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e38:	69ab      	ldr	r3, [r5, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e3a:	4616      	mov	r6, r2
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e3c:	f043 0320 	orr.w	r3, r3, #32
 8000e40:	61ab      	str	r3, [r5, #24]
 8000e42:	69ab      	ldr	r3, [r5, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e44:	2702      	movs	r7, #2
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e46:	f003 0320 	and.w	r3, r3, #32
 8000e4a:	9306      	str	r3, [sp, #24]
 8000e4c:	9b06      	ldr	r3, [sp, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e4e:	69ab      	ldr	r3, [r5, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000e50:	f04f 0a11 	mov.w	sl, #17
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e54:	f043 0304 	orr.w	r3, r3, #4
 8000e58:	61ab      	str	r3, [r5, #24]
 8000e5a:	69ab      	ldr	r3, [r5, #24]
  hadc1.Init.NbrOfConversion = 5;
 8000e5c:	f04f 0905 	mov.w	r9, #5
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e60:	f003 0304 	and.w	r3, r3, #4
 8000e64:	9307      	str	r3, [sp, #28]
 8000e66:	9b07      	ldr	r3, [sp, #28]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e68:	69ab      	ldr	r3, [r5, #24]
 8000e6a:	ea43 0308 	orr.w	r3, r3, r8
 8000e6e:	61ab      	str	r3, [r5, #24]
 8000e70:	69ab      	ldr	r3, [r5, #24]
 8000e72:	ea03 0308 	and.w	r3, r3, r8
 8000e76:	9308      	str	r3, [sp, #32]
 8000e78:	9b08      	ldr	r3, [sp, #32]
  HAL_GPIO_WritePin(SHUTDOWN_GPIO_Port, SHUTDOWN_Pin, GPIO_PIN_SET);
 8000e7a:	f001 fb2d 	bl	80024d8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, DISP_RS_Pin|DISP_RSE_Pin, GPIO_PIN_RESET);
 8000e7e:	4622      	mov	r2, r4
 8000e80:	2106      	movs	r1, #6
 8000e82:	4890      	ldr	r0, [pc, #576]	; (80010c4 <main+0x2c4>)
 8000e84:	f001 fb28 	bl	80024d8 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = SHUTDOWN_Pin;
 8000e88:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  HAL_GPIO_Init(SHUTDOWN_GPIO_Port, &GPIO_InitStruct);
 8000e8c:	488c      	ldr	r0, [pc, #560]	; (80010c0 <main+0x2c0>)
 8000e8e:	a912      	add	r1, sp, #72	; 0x48
  GPIO_InitStruct.Pin = SHUTDOWN_Pin;
 8000e90:	9312      	str	r3, [sp, #72]	; 0x48
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e92:	e9cd a413 	strd	sl, r4, [sp, #76]	; 0x4c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e96:	9715      	str	r7, [sp, #84]	; 0x54
  HAL_GPIO_Init(SHUTDOWN_GPIO_Port, &GPIO_InitStruct);
 8000e98:	f001 fa10 	bl	80022bc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = DISP_RS_Pin|DISP_RSE_Pin;
 8000e9c:	2306      	movs	r3, #6
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e9e:	4889      	ldr	r0, [pc, #548]	; (80010c4 <main+0x2c4>)
 8000ea0:	a912      	add	r1, sp, #72	; 0x48
  GPIO_InitStruct.Pin = DISP_RS_Pin|DISP_RSE_Pin;
 8000ea2:	9312      	str	r3, [sp, #72]	; 0x48
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea4:	e9cd 6413 	strd	r6, r4, [sp, #76]	; 0x4c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ea8:	9715      	str	r7, [sp, #84]	; 0x54
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eaa:	f001 fa07 	bl	80022bc <HAL_GPIO_Init>
  HAL_GPIO_Init(JOYSTICK_BTN_GPIO_Port, &GPIO_InitStruct);
 8000eae:	4885      	ldr	r0, [pc, #532]	; (80010c4 <main+0x2c4>)
 8000eb0:	a912      	add	r1, sp, #72	; 0x48
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000eb2:	e9cd 8412 	strd	r8, r4, [sp, #72]	; 0x48
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000eb6:	9614      	str	r6, [sp, #80]	; 0x50
  HAL_GPIO_Init(JOYSTICK_BTN_GPIO_Port, &GPIO_InitStruct);
 8000eb8:	f001 fa00 	bl	80022bc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = BTN_1_Pin|BTN_2_Pin|BTN_3_Pin|BTN_4_Pin;
 8000ebc:	23f0      	movs	r3, #240	; 0xf0
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ebe:	4882      	ldr	r0, [pc, #520]	; (80010c8 <main+0x2c8>)
 8000ec0:	a912      	add	r1, sp, #72	; 0x48
  GPIO_InitStruct.Pin = BTN_1_Pin|BTN_2_Pin|BTN_3_Pin|BTN_4_Pin;
 8000ec2:	9312      	str	r3, [sp, #72]	; 0x48
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ec4:	e9cd 4613 	strd	r4, r6, [sp, #76]	; 0x4c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ec8:	f001 f9f8 	bl	80022bc <HAL_GPIO_Init>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000ecc:	696b      	ldr	r3, [r5, #20]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000ece:	4622      	mov	r2, r4
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000ed0:	4333      	orrs	r3, r6
 8000ed2:	616b      	str	r3, [r5, #20]
 8000ed4:	696b      	ldr	r3, [r5, #20]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000ed6:	4621      	mov	r1, r4
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000ed8:	4033      	ands	r3, r6
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000eda:	200b      	movs	r0, #11
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000edc:	9304      	str	r3, [sp, #16]
 8000ede:	9b04      	ldr	r3, [sp, #16]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000ee0:	f001 f80e 	bl	8001f00 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000ee4:	200b      	movs	r0, #11
 8000ee6:	f001 f849 	bl	8001f7c <HAL_NVIC_EnableIRQ>
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000eea:	f44f 2360 	mov.w	r3, #917504	; 0xe0000
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000eee:	f44f 7280 	mov.w	r2, #256	; 0x100
  hadc1.Instance = ADC1;
 8000ef2:	4d76      	ldr	r5, [pc, #472]	; (80010cc <main+0x2cc>)
  ADC_ChannelConfTypeDef sConfig = {0};
 8000ef4:	e9cd 4412 	strd	r4, r4, [sp, #72]	; 0x48
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ef8:	61eb      	str	r3, [r5, #28]
  hadc1.Instance = ADC1;
 8000efa:	4b75      	ldr	r3, [pc, #468]	; (80010d0 <main+0x2d0>)
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000efc:	4628      	mov	r0, r5
  ADC_ChannelConfTypeDef sConfig = {0};
 8000efe:	9414      	str	r4, [sp, #80]	; 0x50
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000f00:	732c      	strb	r4, [r5, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f02:	752c      	strb	r4, [r5, #20]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f04:	606c      	str	r4, [r5, #4]
  hadc1.Init.NbrOfConversion = 5;
 8000f06:	f8c5 9010 	str.w	r9, [r5, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000f0a:	60aa      	str	r2, [r5, #8]
  hadc1.Instance = ADC1;
 8000f0c:	602b      	str	r3, [r5, #0]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f0e:	f000 ff45 	bl	8001d9c <HAL_ADC_Init>
 8000f12:	b108      	cbz	r0, 8000f18 <main+0x118>
 8000f14:	b672      	cpsid	i
  while (1)
 8000f16:	e7fe      	b.n	8000f16 <main+0x116>
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8000f18:	2307      	movs	r3, #7
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000f1a:	e9cd 0612 	strd	r0, r6, [sp, #72]	; 0x48
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f1e:	a912      	add	r1, sp, #72	; 0x48
 8000f20:	4628      	mov	r0, r5
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8000f22:	9314      	str	r3, [sp, #80]	; 0x50
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f24:	f000 fda8 	bl	8001a78 <HAL_ADC_ConfigChannel>
 8000f28:	b108      	cbz	r0, 8000f2e <main+0x12e>
 8000f2a:	b672      	cpsid	i
  while (1)
 8000f2c:	e7fe      	b.n	8000f2c <main+0x12c>
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f2e:	4628      	mov	r0, r5
 8000f30:	a912      	add	r1, sp, #72	; 0x48
  sConfig.Channel = ADC_CHANNEL_8;
 8000f32:	e9cd 8712 	strd	r8, r7, [sp, #72]	; 0x48
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f36:	f000 fd9f 	bl	8001a78 <HAL_ADC_ConfigChannel>
 8000f3a:	b108      	cbz	r0, 8000f40 <main+0x140>
 8000f3c:	b672      	cpsid	i
  while (1)
 8000f3e:	e7fe      	b.n	8000f3e <main+0x13e>
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000f40:	2409      	movs	r4, #9
 8000f42:	2303      	movs	r3, #3
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f44:	4628      	mov	r0, r5
 8000f46:	a912      	add	r1, sp, #72	; 0x48
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000f48:	e9cd 4312 	strd	r4, r3, [sp, #72]	; 0x48
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f4c:	f000 fd94 	bl	8001a78 <HAL_ADC_ConfigChannel>
 8000f50:	b108      	cbz	r0, 8000f56 <main+0x156>
 8000f52:	b672      	cpsid	i
  while (1)
 8000f54:	e7fe      	b.n	8000f54 <main+0x154>
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000f56:	2010      	movs	r0, #16
 8000f58:	2304      	movs	r3, #4
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f5a:	a912      	add	r1, sp, #72	; 0x48
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000f5c:	e9cd 0312 	strd	r0, r3, [sp, #72]	; 0x48
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f60:	4628      	mov	r0, r5
 8000f62:	f000 fd89 	bl	8001a78 <HAL_ADC_ConfigChannel>
 8000f66:	b108      	cbz	r0, 8000f6c <main+0x16c>
 8000f68:	b672      	cpsid	i
  while (1)
 8000f6a:	e7fe      	b.n	8000f6a <main+0x16a>
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f6c:	4628      	mov	r0, r5
 8000f6e:	a912      	add	r1, sp, #72	; 0x48
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8000f70:	f8cd a048 	str.w	sl, [sp, #72]	; 0x48
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8000f74:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f78:	f000 fd7e 	bl	8001a78 <HAL_ADC_ConfigChannel>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	b108      	cbz	r0, 8000f84 <main+0x184>
 8000f80:	b672      	cpsid	i
  while (1)
 8000f82:	e7fe      	b.n	8000f82 <main+0x182>
  hspi2.Instance = SPI2;
 8000f84:	4853      	ldr	r0, [pc, #332]	; (80010d4 <main+0x2d4>)
 8000f86:	4a54      	ldr	r2, [pc, #336]	; (80010d8 <main+0x2d8>)
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000f88:	f44f 7182 	mov.w	r1, #260	; 0x104
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000f8c:	e9c0 3303 	strd	r3, r3, [r0, #12]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f90:	e9c0 3308 	strd	r3, r3, [r0, #32]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000f94:	6083      	str	r3, [r0, #8]
  hspi2.Instance = SPI2;
 8000f96:	6002      	str	r2, [r0, #0]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000f98:	6143      	str	r3, [r0, #20]
  hspi2.Init.CRCPolynomial = 10;
 8000f9a:	220a      	movs	r2, #10
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f9c:	6283      	str	r3, [r0, #40]	; 0x28
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000f9e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000fa2:	f8c0 801c 	str.w	r8, [r0, #28]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000fa6:	6041      	str	r1, [r0, #4]
  hspi2.Init.CRCPolynomial = 10;
 8000fa8:	62c2      	str	r2, [r0, #44]	; 0x2c
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000faa:	6183      	str	r3, [r0, #24]
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000fac:	f002 f902 	bl	80031b4 <HAL_SPI_Init>
 8000fb0:	4604      	mov	r4, r0
 8000fb2:	b108      	cbz	r0, 8000fb8 <main+0x1b8>
 8000fb4:	b672      	cpsid	i
  while (1)
 8000fb6:	e7fe      	b.n	8000fb6 <main+0x1b6>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000fb8:	2220      	movs	r2, #32
 8000fba:	4601      	mov	r1, r0
 8000fbc:	a812      	add	r0, sp, #72	; 0x48
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fbe:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000fc2:	e9cd 440c 	strd	r4, r4, [sp, #48]	; 0x30
 8000fc6:	e9cd 440e 	strd	r4, r4, [sp, #56]	; 0x38
 8000fca:	e9cd 4410 	strd	r4, r4, [sp, #64]	; 0x40
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fce:	9409      	str	r4, [sp, #36]	; 0x24
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000fd0:	f002 fed4 	bl	8003d7c <memset>
  htim1.Init.Period = 65535;
 8000fd4:	f64f 73ff 	movw	r3, #65535	; 0xffff
  htim1.Instance = TIM1;
 8000fd8:	4d40      	ldr	r5, [pc, #256]	; (80010dc <main+0x2dc>)
 8000fda:	4a41      	ldr	r2, [pc, #260]	; (80010e0 <main+0x2e0>)
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000fdc:	4628      	mov	r0, r5
  htim1.Instance = TIM1;
 8000fde:	e9c5 2400 	strd	r2, r4, [r5]
  htim1.Init.RepetitionCounter = 0;
 8000fe2:	e9c5 4404 	strd	r4, r4, [r5, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fe6:	60ac      	str	r4, [r5, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fe8:	61ac      	str	r4, [r5, #24]
  htim1.Init.Period = 65535;
 8000fea:	60eb      	str	r3, [r5, #12]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000fec:	f002 fb30 	bl	8003650 <HAL_TIM_PWM_Init>
 8000ff0:	b108      	cbz	r0, 8000ff6 <main+0x1f6>
 8000ff2:	b672      	cpsid	i
  while (1)
 8000ff4:	e7fe      	b.n	8000ff4 <main+0x1f4>
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ff6:	e9cd 0009 	strd	r0, r0, [sp, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000ffa:	a909      	add	r1, sp, #36	; 0x24
 8000ffc:	4628      	mov	r0, r5
 8000ffe:	f002 fbf1 	bl	80037e4 <HAL_TIMEx_MasterConfigSynchronization>
 8001002:	4602      	mov	r2, r0
 8001004:	b108      	cbz	r0, 800100a <main+0x20a>
 8001006:	b672      	cpsid	i
  while (1)
 8001008:	e7fe      	b.n	8001008 <main+0x208>
  sConfigOC.Pulse = 50000;
 800100a:	f24c 3150 	movw	r1, #50000	; 0xc350
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800100e:	2360      	movs	r3, #96	; 0x60
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001010:	e9cd 000d 	strd	r0, r0, [sp, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001014:	e9cd 000f 	strd	r0, r0, [sp, #60]	; 0x3c
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001018:	e9cd 310b 	strd	r3, r1, [sp, #44]	; 0x2c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800101c:	9011      	str	r0, [sp, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800101e:	a90b      	add	r1, sp, #44	; 0x2c
 8001020:	4628      	mov	r0, r5
 8001022:	f002 fb71 	bl	8003708 <HAL_TIM_PWM_ConfigChannel>
 8001026:	b108      	cbz	r0, 800102c <main+0x22c>
 8001028:	b672      	cpsid	i
  while (1)
 800102a:	e7fe      	b.n	800102a <main+0x22a>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800102c:	2300      	movs	r3, #0
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800102e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001032:	482a      	ldr	r0, [pc, #168]	; (80010dc <main+0x2dc>)
 8001034:	a912      	add	r1, sp, #72	; 0x48
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001036:	e9cd 3312 	strd	r3, r3, [sp, #72]	; 0x48
  sBreakDeadTimeConfig.DeadTime = 0;
 800103a:	e9cd 3314 	strd	r3, r3, [sp, #80]	; 0x50
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800103e:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001042:	9319      	str	r3, [sp, #100]	; 0x64
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001044:	f002 fc00 	bl	8003848 <HAL_TIMEx_ConfigBreakDeadTime>
 8001048:	4604      	mov	r4, r0
 800104a:	b108      	cbz	r0, 8001050 <main+0x250>
 800104c:	b672      	cpsid	i
  while (1)
 800104e:	e7fe      	b.n	800104e <main+0x24e>
  HAL_TIM_MspPostInit(&htim1);
 8001050:	4822      	ldr	r0, [pc, #136]	; (80010dc <main+0x2dc>)
 8001052:	f000 fb33 	bl	80016bc <HAL_TIM_MspPostInit>
  hrtc.Instance = RTC;
 8001056:	f04f 31ff 	mov.w	r1, #4294967295
 800105a:	4f22      	ldr	r7, [pc, #136]	; (80010e4 <main+0x2e4>)
 800105c:	4b22      	ldr	r3, [pc, #136]	; (80010e8 <main+0x2e8>)
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800105e:	4638      	mov	r0, r7
  hrtc.Instance = RTC;
 8001060:	e9c7 3100 	strd	r3, r1, [r7]
  RTC_TimeTypeDef sTime = {0};
 8001064:	f8ad 402c 	strh.w	r4, [sp, #44]	; 0x2c
 8001068:	f88d 402e 	strb.w	r4, [sp, #46]	; 0x2e
  RTC_DateTypeDef DateToUpdate = {0};
 800106c:	9412      	str	r4, [sp, #72]	; 0x48
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_NONE;
 800106e:	60bc      	str	r4, [r7, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001070:	f001 fe94 	bl	8002d9c <HAL_RTC_Init>
 8001074:	b108      	cbz	r0, 800107a <main+0x27a>
 8001076:	b672      	cpsid	i
  while (1)
 8001078:	e7fe      	b.n	8001078 <main+0x278>
  sTime.Hours = 0x0;
 800107a:	f88d 002c 	strb.w	r0, [sp, #44]	; 0x2c
  sTime.Minutes = 0x0;
 800107e:	f88d 002d 	strb.w	r0, [sp, #45]	; 0x2d
  sTime.Seconds = 0x0;
 8001082:	f88d 002e 	strb.w	r0, [sp, #46]	; 0x2e
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001086:	2201      	movs	r2, #1
 8001088:	4638      	mov	r0, r7
 800108a:	a90b      	add	r1, sp, #44	; 0x2c
 800108c:	f001 ff02 	bl	8002e94 <HAL_RTC_SetTime>
 8001090:	4603      	mov	r3, r0
 8001092:	b108      	cbz	r0, 8001098 <main+0x298>
 8001094:	b672      	cpsid	i
  while (1)
 8001096:	e7fe      	b.n	8001096 <main+0x296>
  DateToUpdate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001098:	2601      	movs	r6, #1
  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BCD) != HAL_OK)
 800109a:	4638      	mov	r0, r7
 800109c:	4632      	mov	r2, r6
 800109e:	a912      	add	r1, sp, #72	; 0x48
  DateToUpdate.Year = 0x0;
 80010a0:	f88d 304b 	strb.w	r3, [sp, #75]	; 0x4b
  DateToUpdate.WeekDay = RTC_WEEKDAY_MONDAY;
 80010a4:	f88d 6048 	strb.w	r6, [sp, #72]	; 0x48
  DateToUpdate.Month = RTC_MONTH_JANUARY;
 80010a8:	f88d 6049 	strb.w	r6, [sp, #73]	; 0x49
  DateToUpdate.Date = 0x1;
 80010ac:	f88d 604a 	strb.w	r6, [sp, #74]	; 0x4a
  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BCD) != HAL_OK)
 80010b0:	f001 ff7c 	bl	8002fac <HAL_RTC_SetDate>
 80010b4:	4603      	mov	r3, r0
 80010b6:	b1c8      	cbz	r0, 80010ec <main+0x2ec>
 80010b8:	b672      	cpsid	i
  while (1)
 80010ba:	e7fe      	b.n	80010ba <main+0x2ba>
 80010bc:	40021000 	.word	0x40021000
 80010c0:	40011000 	.word	0x40011000
 80010c4:	40010800 	.word	0x40010800
 80010c8:	40010c00 	.word	0x40010c00
 80010cc:	2000062c 	.word	0x2000062c
 80010d0:	40012400 	.word	0x40012400
 80010d4:	2000070c 	.word	0x2000070c
 80010d8:	40003800 	.word	0x40003800
 80010dc:	20000764 	.word	0x20000764
 80010e0:	40012c00 	.word	0x40012c00
 80010e4:	200006a0 	.word	0x200006a0
 80010e8:	40002800 	.word	0x40002800
  hspi1.Instance = SPI1;
 80010ec:	4898      	ldr	r0, [pc, #608]	; (8001350 <main+0x550>)
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80010ee:	f44f 7282 	mov.w	r2, #260	; 0x104
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80010f2:	e9c0 3302 	strd	r3, r3, [r0, #8]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80010f6:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80010fa:	e9c0 3308 	strd	r3, r3, [r0, #32]
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80010fe:	6283      	str	r3, [r0, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001100:	230a      	movs	r3, #10
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001102:	6042      	str	r2, [r0, #4]
  hspi1.Init.CRCPolynomial = 10;
 8001104:	62c3      	str	r3, [r0, #44]	; 0x2c
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001106:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800110a:	2308      	movs	r3, #8
 800110c:	e9c0 2306 	strd	r2, r3, [r0, #24]
  hspi1.Instance = SPI1;
 8001110:	4b90      	ldr	r3, [pc, #576]	; (8001354 <main+0x554>)
 8001112:	6003      	str	r3, [r0, #0]
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001114:	f002 f84e 	bl	80031b4 <HAL_SPI_Init>
 8001118:	4603      	mov	r3, r0
 800111a:	b108      	cbz	r0, 8001120 <main+0x320>
 800111c:	b672      	cpsid	i
  while (1)
 800111e:	e7fe      	b.n	800111e <main+0x31e>
  huart1.Init.BaudRate = 9600;
 8001120:	f44f 5816 	mov.w	r8, #9600	; 0x2580
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001124:	270c      	movs	r7, #12
  huart1.Instance = USART1;
 8001126:	488c      	ldr	r0, [pc, #560]	; (8001358 <main+0x558>)
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001128:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800112c:	e9c0 3306 	strd	r3, r3, [r0, #24]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001130:	6103      	str	r3, [r0, #16]
  huart1.Instance = USART1;
 8001132:	4b8a      	ldr	r3, [pc, #552]	; (800135c <main+0x55c>)
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001134:	6147      	str	r7, [r0, #20]
  huart1.Init.BaudRate = 9600;
 8001136:	e9c0 3800 	strd	r3, r8, [r0]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800113a:	f002 fbf1 	bl	8003920 <HAL_UART_Init>
 800113e:	b108      	cbz	r0, 8001144 <main+0x344>
 8001140:	b672      	cpsid	i
  while (1)
 8001142:	e7fe      	b.n	8001142 <main+0x342>
  huart3.Instance = USART3;
 8001144:	4c86      	ldr	r4, [pc, #536]	; (8001360 <main+0x560>)
 8001146:	4b87      	ldr	r3, [pc, #540]	; (8001364 <main+0x564>)
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001148:	e9c4 0002 	strd	r0, r0, [r4, #8]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800114c:	e9c4 0006 	strd	r0, r0, [r4, #24]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001150:	6120      	str	r0, [r4, #16]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001152:	4620      	mov	r0, r4
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001154:	6167      	str	r7, [r4, #20]
  huart3.Init.BaudRate = 9600;
 8001156:	f8c4 8004 	str.w	r8, [r4, #4]
  huart3.Instance = USART3;
 800115a:	6023      	str	r3, [r4, #0]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800115c:	f002 fbe0 	bl	8003920 <HAL_UART_Init>
 8001160:	4607      	mov	r7, r0
 8001162:	b108      	cbz	r0, 8001168 <main+0x368>
 8001164:	b672      	cpsid	i
  while (1)
 8001166:	e7fe      	b.n	8001166 <main+0x366>
  lcd_init();
 8001168:	f7ff fd46 	bl	8000bf8 <lcd_init>
  RingBuf_Init(rx_buf, 1024, 1, &ringbuf);
 800116c:	4632      	mov	r2, r6
 800116e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001172:	4b7d      	ldr	r3, [pc, #500]	; (8001368 <main+0x568>)
 8001174:	487d      	ldr	r0, [pc, #500]	; (800136c <main+0x56c>)
 8001176:	f7ff fcb9 	bl	8000aec <RingBuf_Init>
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, dutyCycle);
 800117a:	f44f 4230 	mov.w	r2, #45056	; 0xb000
 800117e:	682b      	ldr	r3, [r5, #0]
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001180:	4639      	mov	r1, r7
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, dutyCycle);
 8001182:	635a      	str	r2, [r3, #52]	; 0x34
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001184:	487a      	ldr	r0, [pc, #488]	; (8001370 <main+0x570>)
 8001186:	f002 fa15 	bl	80035b4 <HAL_TIM_PWM_Start>
  adc_complete = 0;
 800118a:	f8df 91e8 	ldr.w	r9, [pc, #488]	; 8001374 <main+0x574>
  HAL_UART_Receive_IT(&huart3, &temp_byte, 1);
 800118e:	4632      	mov	r2, r6
 8001190:	4620      	mov	r0, r4
 8001192:	4979      	ldr	r1, [pc, #484]	; (8001378 <main+0x578>)
 8001194:	f002 fbf4 	bl	8003980 <HAL_UART_Receive_IT>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)ADC_data.array, 5);
 8001198:	2205      	movs	r2, #5
 800119a:	4978      	ldr	r1, [pc, #480]	; (800137c <main+0x57c>)
 800119c:	4878      	ldr	r0, [pc, #480]	; (8001380 <main+0x580>)
 800119e:	f000 fd49 	bl	8001c34 <HAL_ADC_Start_DMA>
  uint32_t temp_tick[3] = {0};
 80011a2:	463d      	mov	r5, r7
  adc_complete = 0;
 80011a4:	f8c9 7000 	str.w	r7, [r9]
  uint16_t buf_len = 0;
 80011a8:	f8ad 7048 	strh.w	r7, [sp, #72]	; 0x48
  uint16_t buf_len_prev = 0;
 80011ac:	46b8      	mov	r8, r7
  lcd_buferase();
 80011ae:	f7ff fdad 	bl	8000d0c <lcd_buferase>
 80011b2:	f8df b1d0 	ldr.w	fp, [pc, #464]	; 8001384 <main+0x584>
  uint32_t temp_tick[3] = {0};
 80011b6:	e9cd 7701 	strd	r7, r7, [sp, #4]
 80011ba:	4c73      	ldr	r4, [pc, #460]	; (8001388 <main+0x588>)
 80011bc:	4f6f      	ldr	r7, [pc, #444]	; (800137c <main+0x57c>)
      RingBuf_Available(&buf_len, &ringbuf);
 80011be:	f8df a1a8 	ldr.w	sl, [pc, #424]	; 8001368 <main+0x568>
    if(adc_complete)
 80011c2:	f8d9 3000 	ldr.w	r3, [r9]
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d155      	bne.n	8001276 <main+0x476>
    if((HAL_GetTick() - temp_tick[0]) > period[0])
 80011ca:	f000 fbfd 	bl	80019c8 <HAL_GetTick>
 80011ce:	9b01      	ldr	r3, [sp, #4]
 80011d0:	1ac3      	subs	r3, r0, r3
 80011d2:	2b32      	cmp	r3, #50	; 0x32
 80011d4:	d810      	bhi.n	80011f8 <main+0x3f8>
    if((HAL_GetTick() - temp_tick[1]) > period[1])
 80011d6:	f000 fbf7 	bl	80019c8 <HAL_GetTick>
 80011da:	9b02      	ldr	r3, [sp, #8]
 80011dc:	1ac3      	subs	r3, r0, r3
 80011de:	2b32      	cmp	r3, #50	; 0x32
 80011e0:	d9ef      	bls.n	80011c2 <main+0x3c2>
      temp_tick[1] = HAL_GetTick();
 80011e2:	f000 fbf1 	bl	80019c8 <HAL_GetTick>
 80011e6:	9002      	str	r0, [sp, #8]
      lcd_bufupload();
 80011e8:	f7ff fcd4 	bl	8000b94 <lcd_bufupload>
      printf("jox - %d, joy - %d\r\n", ADC_data.jox, ADC_data.joy);
 80011ec:	88ba      	ldrh	r2, [r7, #4]
 80011ee:	8879      	ldrh	r1, [r7, #2]
 80011f0:	4866      	ldr	r0, [pc, #408]	; (800138c <main+0x58c>)
 80011f2:	f003 fa2b 	bl	800464c <iprintf>
 80011f6:	e7e4      	b.n	80011c2 <main+0x3c2>
      temp_tick[0] = HAL_GetTick();
 80011f8:	f000 fbe6 	bl	80019c8 <HAL_GetTick>
 80011fc:	9001      	str	r0, [sp, #4]
      lcd_buferase();
 80011fe:	f7ff fd85 	bl	8000d0c <lcd_buferase>
      RingBuf_Available(&buf_len, &ringbuf);
 8001202:	4651      	mov	r1, sl
 8001204:	a812      	add	r0, sp, #72	; 0x48
 8001206:	f7ff fc7d 	bl	8000b04 <RingBuf_Available>
      if(buf_len)
 800120a:	f8bd 6048 	ldrh.w	r6, [sp, #72]	; 0x48
 800120e:	b356      	cbz	r6, 8001266 <main+0x466>
        if(buf_len_prev != buf_len)
 8001210:	4546      	cmp	r6, r8
 8001212:	d002      	beq.n	800121a <main+0x41a>
          temp_tick[2] = HAL_GetTick();
 8001214:	f000 fbd8 	bl	80019c8 <HAL_GetTick>
 8001218:	4605      	mov	r5, r0
        if((HAL_GetTick() - temp_tick[2]) > period[2])
 800121a:	f000 fbd5 	bl	80019c8 <HAL_GetTick>
 800121e:	1b43      	subs	r3, r0, r5
 8001220:	2b32      	cmp	r3, #50	; 0x32
 8001222:	d87e      	bhi.n	8001322 <main+0x522>
      if(adc_avercomplete)
 8001224:	f8db 3000 	ldr.w	r3, [fp]
 8001228:	bb73      	cbnz	r3, 8001288 <main+0x488>
      sprintf((char*)temp_str[0], "%ld.%ld sec from start", HAL_GetTick()/1000, (HAL_GetTick()%1000)/100);
 800122a:	f000 fbcd 	bl	80019c8 <HAL_GetTick>
 800122e:	9003      	str	r0, [sp, #12]
 8001230:	f000 fbca 	bl	80019c8 <HAL_GetTick>
      lcd_bufwstr8x5(temp_str[0], 7, 0, 0);
 8001234:	46b0      	mov	r8, r6
      sprintf((char*)temp_str[0], "%ld.%ld sec from start", HAL_GetTick()/1000, (HAL_GetTick()%1000)/100);
 8001236:	f44f 7c7a 	mov.w	ip, #1000	; 0x3e8
 800123a:	4606      	mov	r6, r0
 800123c:	fbb6 fefc 	udiv	lr, r6, ip
 8001240:	2364      	movs	r3, #100	; 0x64
 8001242:	fb0e 661c 	mls	r6, lr, ip, r6
 8001246:	9a03      	ldr	r2, [sp, #12]
 8001248:	fbb6 f3f3 	udiv	r3, r6, r3
 800124c:	fbb2 f2fc 	udiv	r2, r2, ip
 8001250:	494f      	ldr	r1, [pc, #316]	; (8001390 <main+0x590>)
 8001252:	4850      	ldr	r0, [pc, #320]	; (8001394 <main+0x594>)
 8001254:	f003 fa12 	bl	800467c <siprintf>
      lcd_bufwstr8x5(temp_str[0], 7, 0, 0);
 8001258:	2300      	movs	r3, #0
 800125a:	2107      	movs	r1, #7
 800125c:	461a      	mov	r2, r3
 800125e:	484d      	ldr	r0, [pc, #308]	; (8001394 <main+0x594>)
 8001260:	f7ff fd10 	bl	8000c84 <lcd_bufwstr8x5>
 8001264:	e7b7      	b.n	80011d6 <main+0x3d6>
        lcd_bufwstr8x5(temp_str[1], 0, 0, 0);
 8001266:	4633      	mov	r3, r6
 8001268:	4632      	mov	r2, r6
 800126a:	4631      	mov	r1, r6
 800126c:	484a      	ldr	r0, [pc, #296]	; (8001398 <main+0x598>)
 800126e:	4646      	mov	r6, r8
 8001270:	f7ff fd08 	bl	8000c84 <lcd_bufwstr8x5>
 8001274:	e7d6      	b.n	8001224 <main+0x424>
      HAL_ADC_Start_DMA(&hadc1, (uint32_t*)ADC_data.array, 5);
 8001276:	2205      	movs	r2, #5
 8001278:	4639      	mov	r1, r7
 800127a:	4841      	ldr	r0, [pc, #260]	; (8001380 <main+0x580>)
 800127c:	f000 fcda 	bl	8001c34 <HAL_ADC_Start_DMA>
      adc_complete = 0;
 8001280:	2300      	movs	r3, #0
 8001282:	f8c9 3000 	str.w	r3, [r9]
 8001286:	e7a0      	b.n	80011ca <main+0x3ca>
        sprintf((char*)temp_str[0], "jox - %d mV", (int)ADC_averdata.jox * 1200 / (int)ADC_averdata.vref);
 8001288:	f44f 6896 	mov.w	r8, #1200	; 0x4b0
 800128c:	6863      	ldr	r3, [r4, #4]
 800128e:	6922      	ldr	r2, [r4, #16]
 8001290:	fb08 f303 	mul.w	r3, r8, r3
 8001294:	4941      	ldr	r1, [pc, #260]	; (800139c <main+0x59c>)
 8001296:	fb93 f2f2 	sdiv	r2, r3, r2
 800129a:	483e      	ldr	r0, [pc, #248]	; (8001394 <main+0x594>)
 800129c:	f003 f9ee 	bl	800467c <siprintf>
        lcd_bufwstr8x5(temp_str[0], 1, 0, 0);
 80012a0:	2300      	movs	r3, #0
 80012a2:	2101      	movs	r1, #1
 80012a4:	461a      	mov	r2, r3
 80012a6:	483b      	ldr	r0, [pc, #236]	; (8001394 <main+0x594>)
 80012a8:	f7ff fcec 	bl	8000c84 <lcd_bufwstr8x5>
        sprintf((char*)temp_str[0], "joy - %d mV", (int)ADC_averdata.joy * 1200 / (int)ADC_averdata.vref);
 80012ac:	68a3      	ldr	r3, [r4, #8]
 80012ae:	6922      	ldr	r2, [r4, #16]
 80012b0:	fb08 f303 	mul.w	r3, r8, r3
 80012b4:	493a      	ldr	r1, [pc, #232]	; (80013a0 <main+0x5a0>)
 80012b6:	fb93 f2f2 	sdiv	r2, r3, r2
 80012ba:	4836      	ldr	r0, [pc, #216]	; (8001394 <main+0x594>)
 80012bc:	f003 f9de 	bl	800467c <siprintf>
        lcd_bufwstr8x5(temp_str[0], 2, 0, 0);
 80012c0:	2300      	movs	r3, #0
 80012c2:	2102      	movs	r1, #2
 80012c4:	461a      	mov	r2, r3
 80012c6:	4833      	ldr	r0, [pc, #204]	; (8001394 <main+0x594>)
 80012c8:	f7ff fcdc 	bl	8000c84 <lcd_bufwstr8x5>
        sprintf((char*)temp_str[0], "Vbt - %d mV", ((int)ADC_averdata.batlvl * 1596 / (int)ADC_averdata.vref));
 80012cc:	f240 623c 	movw	r2, #1596	; 0x63c
 80012d0:	6823      	ldr	r3, [r4, #0]
 80012d2:	4934      	ldr	r1, [pc, #208]	; (80013a4 <main+0x5a4>)
 80012d4:	fb02 f303 	mul.w	r3, r2, r3
 80012d8:	6922      	ldr	r2, [r4, #16]
 80012da:	482e      	ldr	r0, [pc, #184]	; (8001394 <main+0x594>)
 80012dc:	fb93 f2f2 	sdiv	r2, r3, r2
 80012e0:	f003 f9cc 	bl	800467c <siprintf>
        lcd_bufwstr8x5(temp_str[0], 3, 0, 0);
 80012e4:	2300      	movs	r3, #0
 80012e6:	2103      	movs	r1, #3
 80012e8:	461a      	mov	r2, r3
 80012ea:	482a      	ldr	r0, [pc, #168]	; (8001394 <main+0x594>)
 80012ec:	f7ff fcca 	bl	8000c84 <lcd_bufwstr8x5>
        sprintf((char*)temp_str[0], "tmp - %d%cC",(358 - ((int)ADC_averdata.tmpr * 279) / (int)ADC_averdata.vref), 176);
 80012f0:	f240 1217 	movw	r2, #279	; 0x117
 80012f4:	68e3      	ldr	r3, [r4, #12]
 80012f6:	492c      	ldr	r1, [pc, #176]	; (80013a8 <main+0x5a8>)
 80012f8:	fb02 f303 	mul.w	r3, r2, r3
 80012fc:	6922      	ldr	r2, [r4, #16]
 80012fe:	4825      	ldr	r0, [pc, #148]	; (8001394 <main+0x594>)
 8001300:	fb93 f2f2 	sdiv	r2, r3, r2
 8001304:	23b0      	movs	r3, #176	; 0xb0
 8001306:	f5c2 72b3 	rsb	r2, r2, #358	; 0x166
 800130a:	f003 f9b7 	bl	800467c <siprintf>
        lcd_bufwstr8x5(temp_str[0], 4, 0, 0);
 800130e:	2300      	movs	r3, #0
 8001310:	2104      	movs	r1, #4
 8001312:	461a      	mov	r2, r3
 8001314:	481f      	ldr	r0, [pc, #124]	; (8001394 <main+0x594>)
 8001316:	f7ff fcb5 	bl	8000c84 <lcd_bufwstr8x5>
        adc_avercomplete = 0;
 800131a:	2300      	movs	r3, #0
 800131c:	f8cb 3000 	str.w	r3, [fp]
 8001320:	e783      	b.n	800122a <main+0x42a>
          RingBuf_DataRead(temp_str[0], buf_len, &ringbuf);
 8001322:	4652      	mov	r2, sl
 8001324:	f8bd 1048 	ldrh.w	r1, [sp, #72]	; 0x48
 8001328:	481a      	ldr	r0, [pc, #104]	; (8001394 <main+0x594>)
 800132a:	f7ff fc19 	bl	8000b60 <RingBuf_DataRead>
          temp_str[0][buf_len] = '\0';
 800132e:	2300      	movs	r3, #0
 8001330:	f8bd 2048 	ldrh.w	r2, [sp, #72]	; 0x48
 8001334:	4917      	ldr	r1, [pc, #92]	; (8001394 <main+0x594>)
          lcd_bufwstr8x5(temp_str[0], 0, 0, 0);
 8001336:	4817      	ldr	r0, [pc, #92]	; (8001394 <main+0x594>)
          temp_str[0][buf_len] = '\0';
 8001338:	548b      	strb	r3, [r1, r2]
          lcd_bufwstr8x5(temp_str[0], 0, 0, 0);
 800133a:	461a      	mov	r2, r3
 800133c:	4619      	mov	r1, r3
 800133e:	f7ff fca1 	bl	8000c84 <lcd_bufwstr8x5>
          strncpy((char*)temp_str[1], (char*)temp_str[0], 128);
 8001342:	2280      	movs	r2, #128	; 0x80
 8001344:	4913      	ldr	r1, [pc, #76]	; (8001394 <main+0x594>)
 8001346:	1888      	adds	r0, r1, r2
 8001348:	f003 f9b8 	bl	80046bc <strncpy>
 800134c:	e76a      	b.n	8001224 <main+0x424>
 800134e:	bf00      	nop
 8001350:	200006b4 	.word	0x200006b4
 8001354:	40013000 	.word	0x40013000
 8001358:	200007ac 	.word	0x200007ac
 800135c:	40013800 	.word	0x40013800
 8001360:	200007f0 	.word	0x200007f0
 8001364:	40004800 	.word	0x40004800
 8001368:	20000834 	.word	0x20000834
 800136c:	20000848 	.word	0x20000848
 8001370:	20000764 	.word	0x20000764
 8001374:	2000000c 	.word	0x2000000c
 8001378:	20000c48 	.word	0x20000c48
 800137c:	20000620 	.word	0x20000620
 8001380:	2000062c 	.word	0x2000062c
 8001384:	20000008 	.word	0x20000008
 8001388:	2000060c 	.word	0x2000060c
 800138c:	080070f0 	.word	0x080070f0
 8001390:	080070d8 	.word	0x080070d8
 8001394:	20000c4c 	.word	0x20000c4c
 8001398:	20000ccc 	.word	0x20000ccc
 800139c:	080070a8 	.word	0x080070a8
 80013a0:	080070b4 	.word	0x080070b4
 80013a4:	080070c0 	.word	0x080070c0
 80013a8:	080070cc 	.word	0x080070cc

080013ac <HAL_UART_RxCpltCallback>:
{
 80013ac:	b538      	push	{r3, r4, r5, lr}
  if(huart == &huart3)
 80013ae:	4b08      	ldr	r3, [pc, #32]	; (80013d0 <HAL_UART_RxCpltCallback+0x24>)
 80013b0:	4298      	cmp	r0, r3
 80013b2:	d000      	beq.n	80013b6 <HAL_UART_RxCpltCallback+0xa>
}
 80013b4:	bd38      	pop	{r3, r4, r5, pc}
    RingBuf_BytePut(temp_byte, &ringbuf);
 80013b6:	4604      	mov	r4, r0
 80013b8:	4d06      	ldr	r5, [pc, #24]	; (80013d4 <HAL_UART_RxCpltCallback+0x28>)
 80013ba:	4907      	ldr	r1, [pc, #28]	; (80013d8 <HAL_UART_RxCpltCallback+0x2c>)
 80013bc:	7828      	ldrb	r0, [r5, #0]
 80013be:	f7ff fbb9 	bl	8000b34 <RingBuf_BytePut>
    HAL_UART_Receive_IT (&huart3, &temp_byte, 1);
 80013c2:	4629      	mov	r1, r5
 80013c4:	4620      	mov	r0, r4
}
 80013c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    HAL_UART_Receive_IT (&huart3, &temp_byte, 1);
 80013ca:	2201      	movs	r2, #1
 80013cc:	f002 bad8 	b.w	8003980 <HAL_UART_Receive_IT>
 80013d0:	200007f0 	.word	0x200007f0
 80013d4:	20000c48 	.word	0x20000c48
 80013d8:	20000834 	.word	0x20000834

080013dc <HAL_UART_TxCpltCallback>:
}
 80013dc:	4770      	bx	lr
 80013de:	bf00      	nop

080013e0 <HAL_ADC_ConvCpltCallback>:
  if(hadc->Instance == ADC1)
 80013e0:	4b23      	ldr	r3, [pc, #140]	; (8001470 <HAL_ADC_ConvCpltCallback+0x90>)
 80013e2:	6802      	ldr	r2, [r0, #0]
 80013e4:	429a      	cmp	r2, r3
 80013e6:	d000      	beq.n	80013ea <HAL_ADC_ConvCpltCallback+0xa>
 80013e8:	4770      	bx	lr
    if(aver_counter)
 80013ea:	4922      	ldr	r1, [pc, #136]	; (8001474 <HAL_ADC_ConvCpltCallback+0x94>)
{
 80013ec:	b430      	push	{r4, r5}
    if(aver_counter)
 80013ee:	680a      	ldr	r2, [r1, #0]
 80013f0:	bb2a      	cbnz	r2, 800143e <HAL_ADC_ConvCpltCallback+0x5e>
      aver_counter = AVER_PERIOD;
 80013f2:	220a      	movs	r2, #10
      adc_avercomplete = 1;
 80013f4:	2401      	movs	r4, #1
      ADC_averdata.batlvl /= AVER_PERIOD;
 80013f6:	4b20      	ldr	r3, [pc, #128]	; (8001478 <HAL_ADC_ConvCpltCallback+0x98>)
      aver_counter = AVER_PERIOD;
 80013f8:	600a      	str	r2, [r1, #0]
      adc_avercomplete = 1;
 80013fa:	4a20      	ldr	r2, [pc, #128]	; (800147c <HAL_ADC_ConvCpltCallback+0x9c>)
      ADC_averdata.batlvl /= AVER_PERIOD;
 80013fc:	6818      	ldr	r0, [r3, #0]
      adc_avercomplete = 1;
 80013fe:	6014      	str	r4, [r2, #0]
      ADC_averdata.batlvl /= AVER_PERIOD;
 8001400:	f104 34cc 	add.w	r4, r4, #3435973836	; 0xcccccccc
      ADC_averdata.joy /= AVER_PERIOD;
 8001404:	e9d3 2101 	ldrd	r2, r1, [r3, #4]
      ADC_averdata.batlvl /= AVER_PERIOD;
 8001408:	fba4 5000 	umull	r5, r0, r4, r0
      ADC_averdata.jox /= AVER_PERIOD;
 800140c:	fba4 5202 	umull	r5, r2, r4, r2
      ADC_averdata.joy /= AVER_PERIOD;
 8001410:	fba4 5101 	umull	r5, r1, r4, r1
      ADC_averdata.jox /= AVER_PERIOD;
 8001414:	08d2      	lsrs	r2, r2, #3
      ADC_averdata.batlvl /= AVER_PERIOD;
 8001416:	08c5      	lsrs	r5, r0, #3
      ADC_averdata.jox /= AVER_PERIOD;
 8001418:	e9c3 5200 	strd	r5, r2, [r3]
      ADC_averdata.joy /= AVER_PERIOD;
 800141c:	08c8      	lsrs	r0, r1, #3
      ADC_averdata.vref /= AVER_PERIOD;
 800141e:	e9d3 1203 	ldrd	r1, r2, [r3, #12]
      ADC_averdata.tmpr /= AVER_PERIOD;
 8001422:	fba4 5101 	umull	r5, r1, r4, r1
      ADC_averdata.vref /= AVER_PERIOD;
 8001426:	fba4 4202 	umull	r4, r2, r4, r2
      ADC_averdata.tmpr /= AVER_PERIOD;
 800142a:	08c9      	lsrs	r1, r1, #3
      ADC_averdata.vref /= AVER_PERIOD;
 800142c:	08d2      	lsrs	r2, r2, #3
 800142e:	e9c3 1203 	strd	r1, r2, [r3, #12]
      ADC_averdata.joy /= AVER_PERIOD;
 8001432:	6098      	str	r0, [r3, #8]
    adc_complete = 1;
 8001434:	2201      	movs	r2, #1
}
 8001436:	bc30      	pop	{r4, r5}
    adc_complete = 1;
 8001438:	4b11      	ldr	r3, [pc, #68]	; (8001480 <HAL_ADC_ConvCpltCallback+0xa0>)
 800143a:	601a      	str	r2, [r3, #0]
}
 800143c:	4770      	bx	lr
      ADC_averdata.batlvl += ADC_data.batlvl;
 800143e:	4811      	ldr	r0, [pc, #68]	; (8001484 <HAL_ADC_ConvCpltCallback+0xa4>)
 8001440:	4b0d      	ldr	r3, [pc, #52]	; (8001478 <HAL_ADC_ConvCpltCallback+0x98>)
      ADC_averdata.jox += ADC_data.jox;
 8001442:	8845      	ldrh	r5, [r0, #2]
      ADC_averdata.batlvl += ADC_data.batlvl;
 8001444:	8804      	ldrh	r4, [r0, #0]
      aver_counter--;
 8001446:	3a01      	subs	r2, #1
 8001448:	600a      	str	r2, [r1, #0]
      ADC_averdata.jox += ADC_data.jox;
 800144a:	e9d3 1200 	ldrd	r1, r2, [r3]
 800144e:	442a      	add	r2, r5
      ADC_averdata.joy += ADC_data.joy;
 8001450:	8885      	ldrh	r5, [r0, #4]
      ADC_averdata.batlvl += ADC_data.batlvl;
 8001452:	4421      	add	r1, r4
      ADC_averdata.jox += ADC_data.jox;
 8001454:	e9c3 1200 	strd	r1, r2, [r3]
      ADC_averdata.tmpr += ADC_data.tmpr;
 8001458:	e9d3 4102 	ldrd	r4, r1, [r3, #8]
      ADC_averdata.joy += ADC_data.joy;
 800145c:	442c      	add	r4, r5
      ADC_averdata.vref += ADC_data.vref;
 800145e:	691a      	ldr	r2, [r3, #16]
      ADC_averdata.joy += ADC_data.joy;
 8001460:	609c      	str	r4, [r3, #8]
      ADC_averdata.tmpr += ADC_data.tmpr;
 8001462:	88c4      	ldrh	r4, [r0, #6]
      ADC_averdata.vref += ADC_data.vref;
 8001464:	8900      	ldrh	r0, [r0, #8]
      ADC_averdata.tmpr += ADC_data.tmpr;
 8001466:	4421      	add	r1, r4
      ADC_averdata.vref += ADC_data.vref;
 8001468:	4402      	add	r2, r0
 800146a:	e9c3 1203 	strd	r1, r2, [r3, #12]
      aver_counter--;
 800146e:	e7e1      	b.n	8001434 <HAL_ADC_ConvCpltCallback+0x54>
 8001470:	40012400 	.word	0x40012400
 8001474:	20000010 	.word	0x20000010
 8001478:	2000060c 	.word	0x2000060c
 800147c:	20000008 	.word	0x20000008
 8001480:	2000000c 	.word	0x2000000c
 8001484:	20000620 	.word	0x20000620

08001488 <Error_Handler>:
 8001488:	b672      	cpsid	i
  while (1)
 800148a:	e7fe      	b.n	800148a <Error_Handler+0x2>

0800148c <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800148c:	4b0e      	ldr	r3, [pc, #56]	; (80014c8 <HAL_MspInit+0x3c>)
{
 800148e:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 8001490:	699a      	ldr	r2, [r3, #24]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001492:	490e      	ldr	r1, [pc, #56]	; (80014cc <HAL_MspInit+0x40>)
  __HAL_RCC_AFIO_CLK_ENABLE();
 8001494:	f042 0201 	orr.w	r2, r2, #1
 8001498:	619a      	str	r2, [r3, #24]
 800149a:	699a      	ldr	r2, [r3, #24]
 800149c:	f002 0201 	and.w	r2, r2, #1
 80014a0:	9200      	str	r2, [sp, #0]
 80014a2:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014a4:	69da      	ldr	r2, [r3, #28]
 80014a6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80014aa:	61da      	str	r2, [r3, #28]
 80014ac:	69db      	ldr	r3, [r3, #28]
 80014ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014b2:	9301      	str	r3, [sp, #4]
 80014b4:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80014b6:	684b      	ldr	r3, [r1, #4]
 80014b8:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80014bc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80014c0:	604b      	str	r3, [r1, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014c2:	b002      	add	sp, #8
 80014c4:	4770      	bx	lr
 80014c6:	bf00      	nop
 80014c8:	40021000 	.word	0x40021000
 80014cc:	40010000 	.word	0x40010000

080014d0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80014d0:	b5f0      	push	{r4, r5, r6, r7, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014d2:	2400      	movs	r4, #0
  if(hadc->Instance==ADC1)
 80014d4:	4b28      	ldr	r3, [pc, #160]	; (8001578 <HAL_ADC_MspInit+0xa8>)
 80014d6:	6802      	ldr	r2, [r0, #0]
{
 80014d8:	b089      	sub	sp, #36	; 0x24
  if(hadc->Instance==ADC1)
 80014da:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014dc:	e9cd 4404 	strd	r4, r4, [sp, #16]
 80014e0:	e9cd 4406 	strd	r4, r4, [sp, #24]
  if(hadc->Instance==ADC1)
 80014e4:	d001      	beq.n	80014ea <HAL_ADC_MspInit+0x1a>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80014e6:	b009      	add	sp, #36	; 0x24
 80014e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_ADC1_CLK_ENABLE();
 80014ea:	f503 436c 	add.w	r3, r3, #60416	; 0xec00
 80014ee:	699a      	ldr	r2, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80014f0:	2703      	movs	r7, #3
    __HAL_RCC_ADC1_CLK_ENABLE();
 80014f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80014f6:	619a      	str	r2, [r3, #24]
 80014f8:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(BAT_LVL_CTRL_GPIO_Port, &GPIO_InitStruct);
 80014fa:	a904      	add	r1, sp, #16
    __HAL_RCC_ADC1_CLK_ENABLE();
 80014fc:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8001500:	9201      	str	r2, [sp, #4]
 8001502:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001504:	699a      	ldr	r2, [r3, #24]
 8001506:	4605      	mov	r5, r0
 8001508:	f042 0204 	orr.w	r2, r2, #4
 800150c:	619a      	str	r2, [r3, #24]
 800150e:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(BAT_LVL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8001510:	481a      	ldr	r0, [pc, #104]	; (800157c <HAL_ADC_MspInit+0xac>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001512:	f002 0204 	and.w	r2, r2, #4
 8001516:	9202      	str	r2, [sp, #8]
 8001518:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800151a:	699a      	ldr	r2, [r3, #24]
    hdma_adc1.Instance = DMA1_Channel1;
 800151c:	4e18      	ldr	r6, [pc, #96]	; (8001580 <HAL_ADC_MspInit+0xb0>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800151e:	f042 0208 	orr.w	r2, r2, #8
 8001522:	619a      	str	r2, [r3, #24]
 8001524:	699b      	ldr	r3, [r3, #24]
 8001526:	f003 0308 	and.w	r3, r3, #8
 800152a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pin = BAT_LVL_CTRL_Pin;
 800152c:	2301      	movs	r3, #1
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800152e:	9a03      	ldr	r2, [sp, #12]
    GPIO_InitStruct.Pin = BAT_LVL_CTRL_Pin;
 8001530:	e9cd 3704 	strd	r3, r7, [sp, #16]
    HAL_GPIO_Init(BAT_LVL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8001534:	f000 fec2 	bl	80022bc <HAL_GPIO_Init>
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001538:	4812      	ldr	r0, [pc, #72]	; (8001584 <HAL_ADC_MspInit+0xb4>)
 800153a:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800153c:	e9cd 7704 	strd	r7, r7, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001540:	f000 febc 	bl	80022bc <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA1_Channel1;
 8001544:	4910      	ldr	r1, [pc, #64]	; (8001588 <HAL_ADC_MspInit+0xb8>)
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001546:	2280      	movs	r2, #128	; 0x80
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001548:	f44f 7380 	mov.w	r3, #256	; 0x100
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800154c:	e9c6 1400 	strd	r1, r4, [r6]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001550:	f44f 6180 	mov.w	r1, #1024	; 0x400
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001554:	4630      	mov	r0, r6
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001556:	e9c6 4406 	strd	r4, r4, [r6, #24]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800155a:	e9c6 2303 	strd	r2, r3, [r6, #12]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800155e:	60b4      	str	r4, [r6, #8]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001560:	6171      	str	r1, [r6, #20]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001562:	f000 fd31 	bl	8001fc8 <HAL_DMA_Init>
 8001566:	b918      	cbnz	r0, 8001570 <HAL_ADC_MspInit+0xa0>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001568:	622e      	str	r6, [r5, #32]
 800156a:	6275      	str	r5, [r6, #36]	; 0x24
}
 800156c:	b009      	add	sp, #36	; 0x24
 800156e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      Error_Handler();
 8001570:	f7ff ff8a 	bl	8001488 <Error_Handler>
 8001574:	e7f8      	b.n	8001568 <HAL_ADC_MspInit+0x98>
 8001576:	bf00      	nop
 8001578:	40012400 	.word	0x40012400
 800157c:	40010800 	.word	0x40010800
 8001580:	2000065c 	.word	0x2000065c
 8001584:	40010c00 	.word	0x40010c00
 8001588:	40020008 	.word	0x40020008

0800158c <HAL_RTC_MspInit>:
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
  if(hrtc->Instance==RTC)
 800158c:	4b0c      	ldr	r3, [pc, #48]	; (80015c0 <HAL_RTC_MspInit+0x34>)
 800158e:	6802      	ldr	r2, [r0, #0]
 8001590:	429a      	cmp	r2, r3
 8001592:	d000      	beq.n	8001596 <HAL_RTC_MspInit+0xa>
 8001594:	4770      	bx	lr
{
 8001596:	b500      	push	{lr}
 8001598:	b083      	sub	sp, #12
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 800159a:	f000 ffa1 	bl	80024e0 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800159e:	2001      	movs	r0, #1
    __HAL_RCC_BKP_CLK_ENABLE();
 80015a0:	4b08      	ldr	r3, [pc, #32]	; (80015c4 <HAL_RTC_MspInit+0x38>)
    __HAL_RCC_RTC_ENABLE();
 80015a2:	4909      	ldr	r1, [pc, #36]	; (80015c8 <HAL_RTC_MspInit+0x3c>)
    __HAL_RCC_BKP_CLK_ENABLE();
 80015a4:	69da      	ldr	r2, [r3, #28]
 80015a6:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 80015aa:	61da      	str	r2, [r3, #28]
 80015ac:	69db      	ldr	r3, [r3, #28]
 80015ae:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80015b2:	9301      	str	r3, [sp, #4]
 80015b4:	9b01      	ldr	r3, [sp, #4]
    __HAL_RCC_RTC_ENABLE();
 80015b6:	f8c1 043c 	str.w	r0, [r1, #1084]	; 0x43c
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80015ba:	b003      	add	sp, #12
 80015bc:	f85d fb04 	ldr.w	pc, [sp], #4
 80015c0:	40002800 	.word	0x40002800
 80015c4:	40021000 	.word	0x40021000
 80015c8:	42420000 	.word	0x42420000

080015cc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80015cc:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015ce:	2400      	movs	r4, #0
  if(hspi->Instance==SPI1)
 80015d0:	4a2a      	ldr	r2, [pc, #168]	; (800167c <HAL_SPI_MspInit+0xb0>)
 80015d2:	6803      	ldr	r3, [r0, #0]
{
 80015d4:	b088      	sub	sp, #32
  if(hspi->Instance==SPI1)
 80015d6:	4293      	cmp	r3, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015d8:	e9cd 4404 	strd	r4, r4, [sp, #16]
 80015dc:	e9cd 4406 	strd	r4, r4, [sp, #24]
  if(hspi->Instance==SPI1)
 80015e0:	d004      	beq.n	80015ec <HAL_SPI_MspInit+0x20>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
  else if(hspi->Instance==SPI2)
 80015e2:	4a27      	ldr	r2, [pc, #156]	; (8001680 <HAL_SPI_MspInit+0xb4>)
 80015e4:	4293      	cmp	r3, r2
 80015e6:	d028      	beq.n	800163a <HAL_SPI_MspInit+0x6e>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80015e8:	b008      	add	sp, #32
 80015ea:	bd70      	pop	{r4, r5, r6, pc}
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80015ec:	2003      	movs	r0, #3
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
 80015ee:	26b0      	movs	r6, #176	; 0xb0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015f0:	2502      	movs	r5, #2
    __HAL_RCC_SPI1_CLK_ENABLE();
 80015f2:	4b24      	ldr	r3, [pc, #144]	; (8001684 <HAL_SPI_MspInit+0xb8>)
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015f4:	a904      	add	r1, sp, #16
    __HAL_RCC_SPI1_CLK_ENABLE();
 80015f6:	699a      	ldr	r2, [r3, #24]
 80015f8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80015fc:	619a      	str	r2, [r3, #24]
 80015fe:	699a      	ldr	r2, [r3, #24]
 8001600:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001604:	9200      	str	r2, [sp, #0]
 8001606:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001608:	699a      	ldr	r2, [r3, #24]
 800160a:	f042 0204 	orr.w	r2, r2, #4
 800160e:	619a      	str	r2, [r3, #24]
 8001610:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001612:	9007      	str	r0, [sp, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001614:	f003 0304 	and.w	r3, r3, #4
 8001618:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800161a:	481b      	ldr	r0, [pc, #108]	; (8001688 <HAL_SPI_MspInit+0xbc>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800161c:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800161e:	e9cd 6504 	strd	r6, r5, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001622:	f000 fe4b 	bl	80022bc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001626:	2340      	movs	r3, #64	; 0x40
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001628:	4817      	ldr	r0, [pc, #92]	; (8001688 <HAL_SPI_MspInit+0xbc>)
 800162a:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800162c:	e9cd 4405 	strd	r4, r4, [sp, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001630:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001632:	f000 fe43 	bl	80022bc <HAL_GPIO_Init>
}
 8001636:	b008      	add	sp, #32
 8001638:	bd70      	pop	{r4, r5, r6, pc}
    GPIO_InitStruct.Pin = DISP_SPI_CS_Pin|DISP_SPI_SCK_Pin|GPIO_PIN_15;
 800163a:	f44f 4030 	mov.w	r0, #45056	; 0xb000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800163e:	2502      	movs	r5, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001640:	2403      	movs	r4, #3
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001642:	4b10      	ldr	r3, [pc, #64]	; (8001684 <HAL_SPI_MspInit+0xb8>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001644:	a904      	add	r1, sp, #16
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001646:	69da      	ldr	r2, [r3, #28]
 8001648:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800164c:	61da      	str	r2, [r3, #28]
 800164e:	69da      	ldr	r2, [r3, #28]
 8001650:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8001654:	9202      	str	r2, [sp, #8]
 8001656:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001658:	699a      	ldr	r2, [r3, #24]
 800165a:	f042 0208 	orr.w	r2, r2, #8
 800165e:	619a      	str	r2, [r3, #24]
 8001660:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Pin = DISP_SPI_CS_Pin|DISP_SPI_SCK_Pin|GPIO_PIN_15;
 8001662:	9004      	str	r0, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001664:	f003 0308 	and.w	r3, r3, #8
 8001668:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800166a:	4808      	ldr	r0, [pc, #32]	; (800168c <HAL_SPI_MspInit+0xc0>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800166c:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800166e:	9505      	str	r5, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001670:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001672:	f000 fe23 	bl	80022bc <HAL_GPIO_Init>
}
 8001676:	b008      	add	sp, #32
 8001678:	bd70      	pop	{r4, r5, r6, pc}
 800167a:	bf00      	nop
 800167c:	40013000 	.word	0x40013000
 8001680:	40003800 	.word	0x40003800
 8001684:	40021000 	.word	0x40021000
 8001688:	40010800 	.word	0x40010800
 800168c:	40010c00 	.word	0x40010c00

08001690 <HAL_TIM_PWM_MspInit>:
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
  if(htim_pwm->Instance==TIM1)
 8001690:	4b09      	ldr	r3, [pc, #36]	; (80016b8 <HAL_TIM_PWM_MspInit+0x28>)
 8001692:	6802      	ldr	r2, [r0, #0]
 8001694:	429a      	cmp	r2, r3
 8001696:	d000      	beq.n	800169a <HAL_TIM_PWM_MspInit+0xa>
 8001698:	4770      	bx	lr
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800169a:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 800169e:	699a      	ldr	r2, [r3, #24]
{
 80016a0:	b082      	sub	sp, #8
    __HAL_RCC_TIM1_CLK_ENABLE();
 80016a2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80016a6:	619a      	str	r2, [r3, #24]
 80016a8:	699b      	ldr	r3, [r3, #24]
 80016aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80016ae:	9301      	str	r3, [sp, #4]
 80016b0:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80016b2:	b002      	add	sp, #8
 80016b4:	4770      	bx	lr
 80016b6:	bf00      	nop
 80016b8:	40012c00 	.word	0x40012c00

080016bc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016bc:	2300      	movs	r3, #0
{
 80016be:	b530      	push	{r4, r5, lr}
  if(htim->Instance==TIM1)
 80016c0:	4a11      	ldr	r2, [pc, #68]	; (8001708 <HAL_TIM_MspPostInit+0x4c>)
 80016c2:	6801      	ldr	r1, [r0, #0]
{
 80016c4:	b087      	sub	sp, #28
  if(htim->Instance==TIM1)
 80016c6:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016c8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80016cc:	e9cd 3304 	strd	r3, r3, [sp, #16]
  if(htim->Instance==TIM1)
 80016d0:	d001      	beq.n	80016d6 <HAL_TIM_MspPostInit+0x1a>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80016d2:	b007      	add	sp, #28
 80016d4:	bd30      	pop	{r4, r5, pc}
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016d6:	2402      	movs	r4, #2
    GPIO_InitStruct.Pin = DISP_BRIGHT_PWM_Pin;
 80016d8:	f44f 7580 	mov.w	r5, #256	; 0x100
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016dc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80016e0:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80016e4:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(DISP_BRIGHT_PWM_GPIO_Port, &GPIO_InitStruct);
 80016e6:	4809      	ldr	r0, [pc, #36]	; (800170c <HAL_TIM_MspPostInit+0x50>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016e8:	f042 0204 	orr.w	r2, r2, #4
 80016ec:	619a      	str	r2, [r3, #24]
 80016ee:	699b      	ldr	r3, [r3, #24]
    HAL_GPIO_Init(DISP_BRIGHT_PWM_GPIO_Port, &GPIO_InitStruct);
 80016f0:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016f2:	f003 0304 	and.w	r3, r3, #4
 80016f6:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = DISP_BRIGHT_PWM_Pin;
 80016f8:	e9cd 5402 	strd	r5, r4, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016fc:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016fe:	9405      	str	r4, [sp, #20]
    HAL_GPIO_Init(DISP_BRIGHT_PWM_GPIO_Port, &GPIO_InitStruct);
 8001700:	f000 fddc 	bl	80022bc <HAL_GPIO_Init>
}
 8001704:	b007      	add	sp, #28
 8001706:	bd30      	pop	{r4, r5, pc}
 8001708:	40012c00 	.word	0x40012c00
 800170c:	40010800 	.word	0x40010800

08001710 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001710:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001712:	2400      	movs	r4, #0
  if(huart->Instance==USART1)
 8001714:	4a37      	ldr	r2, [pc, #220]	; (80017f4 <HAL_UART_MspInit+0xe4>)
 8001716:	6803      	ldr	r3, [r0, #0]
{
 8001718:	b088      	sub	sp, #32
  if(huart->Instance==USART1)
 800171a:	4293      	cmp	r3, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800171c:	e9cd 4404 	strd	r4, r4, [sp, #16]
 8001720:	e9cd 4406 	strd	r4, r4, [sp, #24]
  if(huart->Instance==USART1)
 8001724:	d004      	beq.n	8001730 <HAL_UART_MspInit+0x20>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
  else if(huart->Instance==USART3)
 8001726:	4a34      	ldr	r2, [pc, #208]	; (80017f8 <HAL_UART_MspInit+0xe8>)
 8001728:	4293      	cmp	r3, r2
 800172a:	d032      	beq.n	8001792 <HAL_UART_MspInit+0x82>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800172c:	b008      	add	sp, #32
 800172e:	bd70      	pop	{r4, r5, r6, pc}
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001730:	2003      	movs	r0, #3
    GPIO_InitStruct.Pin = ESP_UART_TX_Pin;
 8001732:	f44f 7600 	mov.w	r6, #512	; 0x200
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001736:	2502      	movs	r5, #2
    __HAL_RCC_USART1_CLK_ENABLE();
 8001738:	4b30      	ldr	r3, [pc, #192]	; (80017fc <HAL_UART_MspInit+0xec>)
    HAL_GPIO_Init(ESP_UART_TX_GPIO_Port, &GPIO_InitStruct);
 800173a:	a904      	add	r1, sp, #16
    __HAL_RCC_USART1_CLK_ENABLE();
 800173c:	699a      	ldr	r2, [r3, #24]
 800173e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001742:	619a      	str	r2, [r3, #24]
 8001744:	699a      	ldr	r2, [r3, #24]
 8001746:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 800174a:	9200      	str	r2, [sp, #0]
 800174c:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800174e:	699a      	ldr	r2, [r3, #24]
 8001750:	f042 0204 	orr.w	r2, r2, #4
 8001754:	619a      	str	r2, [r3, #24]
 8001756:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001758:	9007      	str	r0, [sp, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800175a:	f003 0304 	and.w	r3, r3, #4
 800175e:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(ESP_UART_TX_GPIO_Port, &GPIO_InitStruct);
 8001760:	4827      	ldr	r0, [pc, #156]	; (8001800 <HAL_UART_MspInit+0xf0>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001762:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001764:	e9cd 6504 	strd	r6, r5, [sp, #16]
    HAL_GPIO_Init(ESP_UART_TX_GPIO_Port, &GPIO_InitStruct);
 8001768:	f000 fda8 	bl	80022bc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ESP_UART_RX_Pin;
 800176c:	f44f 6380 	mov.w	r3, #1024	; 0x400
    HAL_GPIO_Init(ESP_UART_RX_GPIO_Port, &GPIO_InitStruct);
 8001770:	a904      	add	r1, sp, #16
 8001772:	4823      	ldr	r0, [pc, #140]	; (8001800 <HAL_UART_MspInit+0xf0>)
    GPIO_InitStruct.Pin = ESP_UART_RX_Pin;
 8001774:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001776:	e9cd 4405 	strd	r4, r4, [sp, #20]
    HAL_GPIO_Init(ESP_UART_RX_GPIO_Port, &GPIO_InitStruct);
 800177a:	f000 fd9f 	bl	80022bc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800177e:	4622      	mov	r2, r4
 8001780:	4621      	mov	r1, r4
 8001782:	2025      	movs	r0, #37	; 0x25
 8001784:	f000 fbbc 	bl	8001f00 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001788:	2025      	movs	r0, #37	; 0x25
 800178a:	f000 fbf7 	bl	8001f7c <HAL_NVIC_EnableIRQ>
}
 800178e:	b008      	add	sp, #32
 8001790:	bd70      	pop	{r4, r5, r6, pc}
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001792:	2003      	movs	r0, #3
    GPIO_InitStruct.Pin = EXT_TX_Pin;
 8001794:	f44f 6680 	mov.w	r6, #1024	; 0x400
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001798:	2502      	movs	r5, #2
    __HAL_RCC_USART3_CLK_ENABLE();
 800179a:	4b18      	ldr	r3, [pc, #96]	; (80017fc <HAL_UART_MspInit+0xec>)
    HAL_GPIO_Init(EXT_TX_GPIO_Port, &GPIO_InitStruct);
 800179c:	a904      	add	r1, sp, #16
    __HAL_RCC_USART3_CLK_ENABLE();
 800179e:	69da      	ldr	r2, [r3, #28]
 80017a0:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80017a4:	61da      	str	r2, [r3, #28]
 80017a6:	69da      	ldr	r2, [r3, #28]
 80017a8:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 80017ac:	9202      	str	r2, [sp, #8]
 80017ae:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017b0:	699a      	ldr	r2, [r3, #24]
 80017b2:	f042 0208 	orr.w	r2, r2, #8
 80017b6:	619a      	str	r2, [r3, #24]
 80017b8:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80017ba:	9007      	str	r0, [sp, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017bc:	f003 0308 	and.w	r3, r3, #8
 80017c0:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(EXT_TX_GPIO_Port, &GPIO_InitStruct);
 80017c2:	4810      	ldr	r0, [pc, #64]	; (8001804 <HAL_UART_MspInit+0xf4>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017c4:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017c6:	e9cd 6504 	strd	r6, r5, [sp, #16]
    HAL_GPIO_Init(EXT_TX_GPIO_Port, &GPIO_InitStruct);
 80017ca:	f000 fd77 	bl	80022bc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = EXT_RX_Pin;
 80017ce:	f44f 6300 	mov.w	r3, #2048	; 0x800
    HAL_GPIO_Init(EXT_RX_GPIO_Port, &GPIO_InitStruct);
 80017d2:	a904      	add	r1, sp, #16
 80017d4:	480b      	ldr	r0, [pc, #44]	; (8001804 <HAL_UART_MspInit+0xf4>)
    GPIO_InitStruct.Pin = EXT_RX_Pin;
 80017d6:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d8:	e9cd 4405 	strd	r4, r4, [sp, #20]
    HAL_GPIO_Init(EXT_RX_GPIO_Port, &GPIO_InitStruct);
 80017dc:	f000 fd6e 	bl	80022bc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80017e0:	4622      	mov	r2, r4
 80017e2:	4621      	mov	r1, r4
 80017e4:	2027      	movs	r0, #39	; 0x27
 80017e6:	f000 fb8b 	bl	8001f00 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80017ea:	2027      	movs	r0, #39	; 0x27
 80017ec:	f000 fbc6 	bl	8001f7c <HAL_NVIC_EnableIRQ>
}
 80017f0:	b008      	add	sp, #32
 80017f2:	bd70      	pop	{r4, r5, r6, pc}
 80017f4:	40013800 	.word	0x40013800
 80017f8:	40004800 	.word	0x40004800
 80017fc:	40021000 	.word	0x40021000
 8001800:	40010800 	.word	0x40010800
 8001804:	40010c00 	.word	0x40010c00

08001808 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001808:	e7fe      	b.n	8001808 <NMI_Handler>
 800180a:	bf00      	nop

0800180c <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800180c:	e7fe      	b.n	800180c <HardFault_Handler>
 800180e:	bf00      	nop

08001810 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001810:	e7fe      	b.n	8001810 <MemManage_Handler>
 8001812:	bf00      	nop

08001814 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001814:	e7fe      	b.n	8001814 <BusFault_Handler>
 8001816:	bf00      	nop

08001818 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001818:	e7fe      	b.n	8001818 <UsageFault_Handler>
 800181a:	bf00      	nop

0800181c <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800181c:	4770      	bx	lr
 800181e:	bf00      	nop

08001820 <DebugMon_Handler>:
 8001820:	4770      	bx	lr
 8001822:	bf00      	nop

08001824 <PendSV_Handler>:
 8001824:	4770      	bx	lr
 8001826:	bf00      	nop

08001828 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001828:	f000 b8c2 	b.w	80019b0 <HAL_IncTick>

0800182c <DMA1_Channel1_IRQHandler>:
void DMA1_Channel1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800182c:	4801      	ldr	r0, [pc, #4]	; (8001834 <DMA1_Channel1_IRQHandler+0x8>)
 800182e:	f000 bcb1 	b.w	8002194 <HAL_DMA_IRQHandler>
 8001832:	bf00      	nop
 8001834:	2000065c 	.word	0x2000065c

08001838 <USART1_IRQHandler>:
void USART1_IRQHandler(void)
{
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001838:	4801      	ldr	r0, [pc, #4]	; (8001840 <USART1_IRQHandler+0x8>)
 800183a:	f002 b933 	b.w	8003aa4 <HAL_UART_IRQHandler>
 800183e:	bf00      	nop
 8001840:	200007ac 	.word	0x200007ac

08001844 <USART3_IRQHandler>:
void USART3_IRQHandler(void)
{
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001844:	4801      	ldr	r0, [pc, #4]	; (800184c <USART3_IRQHandler+0x8>)
 8001846:	f002 b92d 	b.w	8003aa4 <HAL_UART_IRQHandler>
 800184a:	bf00      	nop
 800184c:	200007f0 	.word	0x200007f0

08001850 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8001850:	2001      	movs	r0, #1
 8001852:	4770      	bx	lr

08001854 <_kill>:

int _kill(int pid, int sig)
{
 8001854:	b508      	push	{r3, lr}
	errno = EINVAL;
 8001856:	f002 fa59 	bl	8003d0c <__errno>
 800185a:	2216      	movs	r2, #22
 800185c:	4603      	mov	r3, r0
	return -1;
}
 800185e:	f04f 30ff 	mov.w	r0, #4294967295
	errno = EINVAL;
 8001862:	601a      	str	r2, [r3, #0]
}
 8001864:	bd08      	pop	{r3, pc}
 8001866:	bf00      	nop

08001868 <_exit>:

void _exit (int status)
{
 8001868:	b508      	push	{r3, lr}
	errno = EINVAL;
 800186a:	f002 fa4f 	bl	8003d0c <__errno>
 800186e:	2316      	movs	r3, #22
 8001870:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 8001872:	e7fe      	b.n	8001872 <_exit+0xa>

08001874 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001874:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001876:	1e16      	subs	r6, r2, #0
 8001878:	dd07      	ble.n	800188a <_read+0x16>
 800187a:	460c      	mov	r4, r1
 800187c:	198d      	adds	r5, r1, r6
	{
		*ptr++ = __io_getchar();
 800187e:	f3af 8000 	nop.w
 8001882:	f804 0b01 	strb.w	r0, [r4], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001886:	42a5      	cmp	r5, r4
 8001888:	d1f9      	bne.n	800187e <_read+0xa>
	}

return len;
}
 800188a:	4630      	mov	r0, r6
 800188c:	bd70      	pop	{r4, r5, r6, pc}
 800188e:	bf00      	nop

08001890 <_close>:
}

int _close(int file)
{
	return -1;
}
 8001890:	f04f 30ff 	mov.w	r0, #4294967295
 8001894:	4770      	bx	lr
 8001896:	bf00      	nop

08001898 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8001898:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
 800189c:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 800189e:	604b      	str	r3, [r1, #4]
}
 80018a0:	4770      	bx	lr
 80018a2:	bf00      	nop

080018a4 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 80018a4:	2001      	movs	r0, #1
 80018a6:	4770      	bx	lr

080018a8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 80018a8:	2000      	movs	r0, #0
 80018aa:	4770      	bx	lr

080018ac <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80018ac:	490d      	ldr	r1, [pc, #52]	; (80018e4 <_sbrk+0x38>)
{
 80018ae:	4603      	mov	r3, r0
 80018b0:	b510      	push	{r4, lr}
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80018b2:	4a0d      	ldr	r2, [pc, #52]	; (80018e8 <_sbrk+0x3c>)
 80018b4:	4c0d      	ldr	r4, [pc, #52]	; (80018ec <_sbrk+0x40>)
  if (NULL == __sbrk_heap_end)
 80018b6:	6808      	ldr	r0, [r1, #0]
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80018b8:	1b12      	subs	r2, r2, r4
  if (NULL == __sbrk_heap_end)
 80018ba:	b120      	cbz	r0, 80018c6 <_sbrk+0x1a>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80018bc:	4403      	add	r3, r0
 80018be:	4293      	cmp	r3, r2
 80018c0:	d807      	bhi.n	80018d2 <_sbrk+0x26>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 80018c2:	600b      	str	r3, [r1, #0]

  return (void *)prev_heap_end;
}
 80018c4:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 80018c6:	4c0a      	ldr	r4, [pc, #40]	; (80018f0 <_sbrk+0x44>)
 80018c8:	4620      	mov	r0, r4
  if (__sbrk_heap_end + incr > max_heap)
 80018ca:	4403      	add	r3, r0
 80018cc:	4293      	cmp	r3, r2
    __sbrk_heap_end = &_end;
 80018ce:	600c      	str	r4, [r1, #0]
  if (__sbrk_heap_end + incr > max_heap)
 80018d0:	d9f7      	bls.n	80018c2 <_sbrk+0x16>
    errno = ENOMEM;
 80018d2:	f002 fa1b 	bl	8003d0c <__errno>
 80018d6:	220c      	movs	r2, #12
 80018d8:	4603      	mov	r3, r0
    return (void *)-1;
 80018da:	f04f 30ff 	mov.w	r0, #4294967295
    errno = ENOMEM;
 80018de:	601a      	str	r2, [r3, #0]
}
 80018e0:	bd10      	pop	{r4, pc}
 80018e2:	bf00      	nop
 80018e4:	20000ecc 	.word	0x20000ecc
 80018e8:	20005000 	.word	0x20005000
 80018ec:	00000400 	.word	0x00000400
 80018f0:	20000ee8 	.word	0x20000ee8

080018f4 <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80018f4:	4770      	bx	lr
 80018f6:	bf00      	nop

080018f8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80018f8:	480c      	ldr	r0, [pc, #48]	; (800192c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80018fa:	490d      	ldr	r1, [pc, #52]	; (8001930 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80018fc:	4a0d      	ldr	r2, [pc, #52]	; (8001934 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80018fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001900:	e002      	b.n	8001908 <LoopCopyDataInit>

08001902 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001902:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001904:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001906:	3304      	adds	r3, #4

08001908 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001908:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800190a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800190c:	d3f9      	bcc.n	8001902 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800190e:	4a0a      	ldr	r2, [pc, #40]	; (8001938 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001910:	4c0a      	ldr	r4, [pc, #40]	; (800193c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001912:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001914:	e001      	b.n	800191a <LoopFillZerobss>

08001916 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001916:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001918:	3204      	adds	r2, #4

0800191a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800191a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800191c:	d3fb      	bcc.n	8001916 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800191e:	f7ff ffe9 	bl	80018f4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001922:	f002 f9f9 	bl	8003d18 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001926:	f7ff fa6b 	bl	8000e00 <main>
  bx lr
 800192a:	4770      	bx	lr
  ldr r0, =_sdata
 800192c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001930:	200001f0 	.word	0x200001f0
  ldr r2, =_sidata
 8001934:	08007514 	.word	0x08007514
  ldr r2, =_sbss
 8001938:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 800193c:	20000ee4 	.word	0x20000ee4

08001940 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001940:	e7fe      	b.n	8001940 <ADC1_2_IRQHandler>
	...

08001944 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001944:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001946:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800194a:	4a0d      	ldr	r2, [pc, #52]	; (8001980 <HAL_InitTick+0x3c>)
{
 800194c:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800194e:	7811      	ldrb	r1, [r2, #0]
 8001950:	4a0c      	ldr	r2, [pc, #48]	; (8001984 <HAL_InitTick+0x40>)
 8001952:	fbb3 f3f1 	udiv	r3, r3, r1
 8001956:	6812      	ldr	r2, [r2, #0]
 8001958:	fbb2 f0f3 	udiv	r0, r2, r3
 800195c:	f000 fb1c 	bl	8001f98 <HAL_SYSTICK_Config>
 8001960:	b908      	cbnz	r0, 8001966 <HAL_InitTick+0x22>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001962:	2d0f      	cmp	r5, #15
 8001964:	d901      	bls.n	800196a <HAL_InitTick+0x26>
    return HAL_ERROR;
 8001966:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8001968:	bd38      	pop	{r3, r4, r5, pc}
 800196a:	4604      	mov	r4, r0
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800196c:	4602      	mov	r2, r0
 800196e:	4629      	mov	r1, r5
 8001970:	f04f 30ff 	mov.w	r0, #4294967295
 8001974:	f000 fac4 	bl	8001f00 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001978:	4b03      	ldr	r3, [pc, #12]	; (8001988 <HAL_InitTick+0x44>)
 800197a:	4620      	mov	r0, r4
 800197c:	601d      	str	r5, [r3, #0]
}
 800197e:	bd38      	pop	{r3, r4, r5, pc}
 8001980:	20000018 	.word	0x20000018
 8001984:	20000014 	.word	0x20000014
 8001988:	2000001c 	.word	0x2000001c

0800198c <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800198c:	4a07      	ldr	r2, [pc, #28]	; (80019ac <HAL_Init+0x20>)
{
 800198e:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001990:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001992:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001994:	f043 0310 	orr.w	r3, r3, #16
 8001998:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800199a:	f000 fa9f 	bl	8001edc <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800199e:	200f      	movs	r0, #15
 80019a0:	f7ff ffd0 	bl	8001944 <HAL_InitTick>
  HAL_MspInit();
 80019a4:	f7ff fd72 	bl	800148c <HAL_MspInit>
}
 80019a8:	2000      	movs	r0, #0
 80019aa:	bd08      	pop	{r3, pc}
 80019ac:	40022000 	.word	0x40022000

080019b0 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80019b0:	4a03      	ldr	r2, [pc, #12]	; (80019c0 <HAL_IncTick+0x10>)
 80019b2:	4b04      	ldr	r3, [pc, #16]	; (80019c4 <HAL_IncTick+0x14>)
 80019b4:	6811      	ldr	r1, [r2, #0]
 80019b6:	781b      	ldrb	r3, [r3, #0]
 80019b8:	440b      	add	r3, r1
 80019ba:	6013      	str	r3, [r2, #0]
}
 80019bc:	4770      	bx	lr
 80019be:	bf00      	nop
 80019c0:	20000ed0 	.word	0x20000ed0
 80019c4:	20000018 	.word	0x20000018

080019c8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80019c8:	4b01      	ldr	r3, [pc, #4]	; (80019d0 <HAL_GetTick+0x8>)
 80019ca:	6818      	ldr	r0, [r3, #0]
}
 80019cc:	4770      	bx	lr
 80019ce:	bf00      	nop
 80019d0:	20000ed0 	.word	0x20000ed0

080019d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80019d4:	b538      	push	{r3, r4, r5, lr}
 80019d6:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80019d8:	f7ff fff6 	bl	80019c8 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80019dc:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 80019de:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 80019e0:	d002      	beq.n	80019e8 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 80019e2:	4b04      	ldr	r3, [pc, #16]	; (80019f4 <HAL_Delay+0x20>)
 80019e4:	781b      	ldrb	r3, [r3, #0]
 80019e6:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80019e8:	f7ff ffee 	bl	80019c8 <HAL_GetTick>
 80019ec:	1b40      	subs	r0, r0, r5
 80019ee:	42a0      	cmp	r0, r4
 80019f0:	d3fa      	bcc.n	80019e8 <HAL_Delay+0x14>
  {
  }
}
 80019f2:	bd38      	pop	{r3, r4, r5, pc}
 80019f4:	20000018 	.word	0x20000018

080019f8 <ADC_DMAConvCplt>:
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80019f8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80019fa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80019fc:	f012 0f50 	tst.w	r2, #80	; 0x50
 8001a00:	d10f      	bne.n	8001a22 <ADC_DMAConvCplt+0x2a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001a02:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001a04:	6819      	ldr	r1, [r3, #0]
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001a06:	f442 7200 	orr.w	r2, r2, #512	; 0x200
{
 8001a0a:	b510      	push	{r4, lr}
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001a0c:	629a      	str	r2, [r3, #40]	; 0x28
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001a0e:	688a      	ldr	r2, [r1, #8]
 8001a10:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 8001a14:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
 8001a18:	d006      	beq.n	8001a28 <ADC_DMAConvCplt+0x30>
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	f7ff fce0 	bl	80013e0 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8001a20:	bd10      	pop	{r4, pc}
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8001a22:	6a1b      	ldr	r3, [r3, #32]
 8001a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a26:	4718      	bx	r3
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001a28:	7b1a      	ldrb	r2, [r3, #12]
 8001a2a:	2a00      	cmp	r2, #0
 8001a2c:	d1f5      	bne.n	8001a1a <ADC_DMAConvCplt+0x22>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001a2e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001a30:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001a34:	629a      	str	r2, [r3, #40]	; 0x28
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001a36:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001a38:	04d2      	lsls	r2, r2, #19
 8001a3a:	d4ee      	bmi.n	8001a1a <ADC_DMAConvCplt+0x22>
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001a3c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001a3e:	f042 0201 	orr.w	r2, r2, #1
 8001a42:	629a      	str	r2, [r3, #40]	; 0x28
 8001a44:	e7e9      	b.n	8001a1a <ADC_DMAConvCplt+0x22>
 8001a46:	bf00      	nop

08001a48 <HAL_ADC_ConvHalfCpltCallback>:
 8001a48:	4770      	bx	lr
 8001a4a:	bf00      	nop

08001a4c <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001a4c:	b508      	push	{r3, lr}
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001a4e:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8001a50:	f7ff fffa 	bl	8001a48 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001a54:	bd08      	pop	{r3, pc}
 8001a56:	bf00      	nop

08001a58 <HAL_ADC_ErrorCallback>:
 8001a58:	4770      	bx	lr
 8001a5a:	bf00      	nop

08001a5c <ADC_DMAError>:
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001a5c:	6a40      	ldr	r0, [r0, #36]	; 0x24
{
 8001a5e:	b508      	push	{r3, lr}
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001a60:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8001a62:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001a66:	6283      	str	r3, [r0, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001a68:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8001a6a:	f043 0304 	orr.w	r3, r3, #4
 8001a6e:	62c3      	str	r3, [r0, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001a70:	f7ff fff2 	bl	8001a58 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001a74:	bd08      	pop	{r3, pc}
 8001a76:	bf00      	nop

08001a78 <HAL_ADC_ConfigChannel>:
  __IO uint32_t wait_loop_index = 0U;
 8001a78:	2300      	movs	r3, #0
{ 
 8001a7a:	b530      	push	{r4, r5, lr}
 8001a7c:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0U;
 8001a7e:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8001a80:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8001a84:	2b01      	cmp	r3, #1
 8001a86:	d074      	beq.n	8001b72 <HAL_ADC_ConfigChannel+0xfa>
 8001a88:	2301      	movs	r3, #1
 8001a8a:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  if (sConfig->Rank < 7U)
 8001a8e:	684b      	ldr	r3, [r1, #4]
 8001a90:	4602      	mov	r2, r0
 8001a92:	2b06      	cmp	r3, #6
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001a94:	6804      	ldr	r4, [r0, #0]
  if (sConfig->Rank < 7U)
 8001a96:	d932      	bls.n	8001afe <HAL_ADC_ConfigChannel+0x86>
  else if (sConfig->Rank < 13U)
 8001a98:	2b0c      	cmp	r3, #12
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001a9a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  else if (sConfig->Rank < 13U)
 8001a9e:	d84e      	bhi.n	8001b3e <HAL_ADC_ConfigChannel+0xc6>
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001aa0:	f04f 0c1f 	mov.w	ip, #31
 8001aa4:	6808      	ldr	r0, [r1, #0]
 8001aa6:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8001aa8:	3b23      	subs	r3, #35	; 0x23
 8001aaa:	fa00 fe03 	lsl.w	lr, r0, r3
 8001aae:	fa0c f303 	lsl.w	r3, ip, r3
 8001ab2:	ea25 0303 	bic.w	r3, r5, r3
 8001ab6:	ea43 030e 	orr.w	r3, r3, lr
 8001aba:	6323      	str	r3, [r4, #48]	; 0x30
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001abc:	2809      	cmp	r0, #9
 8001abe:	d930      	bls.n	8001b22 <HAL_ADC_ConfigChannel+0xaa>
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001ac0:	f04f 0c07 	mov.w	ip, #7
 8001ac4:	688d      	ldr	r5, [r1, #8]
 8001ac6:	eb00 0140 	add.w	r1, r0, r0, lsl #1
 8001aca:	68e3      	ldr	r3, [r4, #12]
 8001acc:	391e      	subs	r1, #30
 8001ace:	408d      	lsls	r5, r1
 8001ad0:	fa0c f101 	lsl.w	r1, ip, r1
 8001ad4:	ea23 0301 	bic.w	r3, r3, r1
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001ad8:	f1a0 0110 	sub.w	r1, r0, #16
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001adc:	432b      	orrs	r3, r5
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001ade:	2901      	cmp	r1, #1
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001ae0:	60e3      	str	r3, [r4, #12]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001ae2:	d844      	bhi.n	8001b6e <HAL_ADC_ConfigChannel+0xf6>
    if (hadc->Instance == ADC1)
 8001ae4:	4b2e      	ldr	r3, [pc, #184]	; (8001ba0 <HAL_ADC_ConfigChannel+0x128>)
 8001ae6:	429c      	cmp	r4, r3
 8001ae8:	d038      	beq.n	8001b5c <HAL_ADC_ConfigChannel+0xe4>
      tmp_hal_status = HAL_ERROR;
 8001aea:	2001      	movs	r0, #1
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001aec:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8001aee:	f043 0320 	orr.w	r3, r3, #32
 8001af2:	6293      	str	r3, [r2, #40]	; 0x28
  __HAL_UNLOCK(hadc);
 8001af4:	2300      	movs	r3, #0
 8001af6:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
}
 8001afa:	b003      	add	sp, #12
 8001afc:	bd30      	pop	{r4, r5, pc}
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001afe:	f04f 0c1f 	mov.w	ip, #31
 8001b02:	6808      	ldr	r0, [r1, #0]
 8001b04:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001b08:	6b65      	ldr	r5, [r4, #52]	; 0x34
 8001b0a:	3b05      	subs	r3, #5
 8001b0c:	fa00 fe03 	lsl.w	lr, r0, r3
 8001b10:	fa0c f303 	lsl.w	r3, ip, r3
 8001b14:	ea25 0303 	bic.w	r3, r5, r3
 8001b18:	ea43 030e 	orr.w	r3, r3, lr
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001b1c:	2809      	cmp	r0, #9
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001b1e:	6363      	str	r3, [r4, #52]	; 0x34
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001b20:	d8ce      	bhi.n	8001ac0 <HAL_ADC_ConfigChannel+0x48>
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001b22:	2507      	movs	r5, #7
 8001b24:	6889      	ldr	r1, [r1, #8]
 8001b26:	6923      	ldr	r3, [r4, #16]
 8001b28:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8001b2c:	4081      	lsls	r1, r0
 8001b2e:	fa05 f000 	lsl.w	r0, r5, r0
 8001b32:	ea23 0300 	bic.w	r3, r3, r0
 8001b36:	430b      	orrs	r3, r1
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b38:	2000      	movs	r0, #0
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001b3a:	6123      	str	r3, [r4, #16]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001b3c:	e7da      	b.n	8001af4 <HAL_ADC_ConfigChannel+0x7c>
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001b3e:	f04f 0c1f 	mov.w	ip, #31
 8001b42:	6808      	ldr	r0, [r1, #0]
 8001b44:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
 8001b46:	3b41      	subs	r3, #65	; 0x41
 8001b48:	fa00 fe03 	lsl.w	lr, r0, r3
 8001b4c:	fa0c f303 	lsl.w	r3, ip, r3
 8001b50:	ea25 0303 	bic.w	r3, r5, r3
 8001b54:	ea43 030e 	orr.w	r3, r3, lr
 8001b58:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001b5a:	e7af      	b.n	8001abc <HAL_ADC_ConfigChannel+0x44>
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001b5c:	68a3      	ldr	r3, [r4, #8]
 8001b5e:	021b      	lsls	r3, r3, #8
 8001b60:	d405      	bmi.n	8001b6e <HAL_ADC_ConfigChannel+0xf6>
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001b62:	68a3      	ldr	r3, [r4, #8]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001b64:	2810      	cmp	r0, #16
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001b66:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001b6a:	60a3      	str	r3, [r4, #8]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001b6c:	d004      	beq.n	8001b78 <HAL_ADC_ConfigChannel+0x100>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b6e:	2000      	movs	r0, #0
 8001b70:	e7c0      	b.n	8001af4 <HAL_ADC_ConfigChannel+0x7c>
  __HAL_LOCK(hadc);
 8001b72:	2002      	movs	r0, #2
}
 8001b74:	b003      	add	sp, #12
 8001b76:	bd30      	pop	{r4, r5, pc}
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001b78:	4b0a      	ldr	r3, [pc, #40]	; (8001ba4 <HAL_ADC_ConfigChannel+0x12c>)
 8001b7a:	490b      	ldr	r1, [pc, #44]	; (8001ba8 <HAL_ADC_ConfigChannel+0x130>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	fba1 1303 	umull	r1, r3, r1, r3
 8001b82:	0c9b      	lsrs	r3, r3, #18
 8001b84:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001b88:	005b      	lsls	r3, r3, #1
 8001b8a:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 8001b8c:	9b01      	ldr	r3, [sp, #4]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d0ed      	beq.n	8001b6e <HAL_ADC_ConfigChannel+0xf6>
            wait_loop_index--;
 8001b92:	9b01      	ldr	r3, [sp, #4]
 8001b94:	3b01      	subs	r3, #1
 8001b96:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 8001b98:	9b01      	ldr	r3, [sp, #4]
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d1f9      	bne.n	8001b92 <HAL_ADC_ConfigChannel+0x11a>
 8001b9e:	e7e6      	b.n	8001b6e <HAL_ADC_ConfigChannel+0xf6>
 8001ba0:	40012400 	.word	0x40012400
 8001ba4:	20000014 	.word	0x20000014
 8001ba8:	431bde83 	.word	0x431bde83

08001bac <ADC_Enable>:
  __IO uint32_t wait_loop_index = 0U;
 8001bac:	2300      	movs	r3, #0
{
 8001bae:	b530      	push	{r4, r5, lr}
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001bb0:	6802      	ldr	r2, [r0, #0]
{
 8001bb2:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0U;
 8001bb4:	9301      	str	r3, [sp, #4]
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001bb6:	6893      	ldr	r3, [r2, #8]
 8001bb8:	07d9      	lsls	r1, r3, #31
 8001bba:	d427      	bmi.n	8001c0c <ADC_Enable+0x60>
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001bbc:	4b1b      	ldr	r3, [pc, #108]	; (8001c2c <ADC_Enable+0x80>)
 8001bbe:	4604      	mov	r4, r0
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	481b      	ldr	r0, [pc, #108]	; (8001c30 <ADC_Enable+0x84>)
    __HAL_ADC_ENABLE(hadc);
 8001bc4:	6891      	ldr	r1, [r2, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001bc6:	fba0 0303 	umull	r0, r3, r0, r3
    __HAL_ADC_ENABLE(hadc);
 8001bca:	f041 0101 	orr.w	r1, r1, #1
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001bce:	0c9b      	lsrs	r3, r3, #18
    __HAL_ADC_ENABLE(hadc);
 8001bd0:	6091      	str	r1, [r2, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001bd2:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 8001bd4:	9b01      	ldr	r3, [sp, #4]
 8001bd6:	b12b      	cbz	r3, 8001be4 <ADC_Enable+0x38>
      wait_loop_index--;
 8001bd8:	9b01      	ldr	r3, [sp, #4]
 8001bda:	3b01      	subs	r3, #1
 8001bdc:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 8001bde:	9b01      	ldr	r3, [sp, #4]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d1f9      	bne.n	8001bd8 <ADC_Enable+0x2c>
    tickstart = HAL_GetTick();
 8001be4:	f7ff fef0 	bl	80019c8 <HAL_GetTick>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001be8:	6823      	ldr	r3, [r4, #0]
    tickstart = HAL_GetTick();
 8001bea:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001bec:	689b      	ldr	r3, [r3, #8]
 8001bee:	07da      	lsls	r2, r3, #31
 8001bf0:	d40c      	bmi.n	8001c0c <ADC_Enable+0x60>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001bf2:	f7ff fee9 	bl	80019c8 <HAL_GetTick>
 8001bf6:	1b43      	subs	r3, r0, r5
 8001bf8:	2b02      	cmp	r3, #2
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001bfa:	6823      	ldr	r3, [r4, #0]
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001bfc:	d903      	bls.n	8001c06 <ADC_Enable+0x5a>
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001bfe:	689a      	ldr	r2, [r3, #8]
 8001c00:	f012 0201 	ands.w	r2, r2, #1
 8001c04:	d005      	beq.n	8001c12 <ADC_Enable+0x66>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001c06:	689b      	ldr	r3, [r3, #8]
 8001c08:	07db      	lsls	r3, r3, #31
 8001c0a:	d5f2      	bpl.n	8001bf2 <ADC_Enable+0x46>
  return HAL_OK;
 8001c0c:	2000      	movs	r0, #0
}
 8001c0e:	b003      	add	sp, #12
 8001c10:	bd30      	pop	{r4, r5, pc}
          return HAL_ERROR;
 8001c12:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c14:	6aa3      	ldr	r3, [r4, #40]	; 0x28
          __HAL_UNLOCK(hadc);
 8001c16:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c1a:	f043 0310 	orr.w	r3, r3, #16
 8001c1e:	62a3      	str	r3, [r4, #40]	; 0x28
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c20:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001c22:	4303      	orrs	r3, r0
 8001c24:	62e3      	str	r3, [r4, #44]	; 0x2c
}
 8001c26:	b003      	add	sp, #12
 8001c28:	bd30      	pop	{r4, r5, pc}
 8001c2a:	bf00      	nop
 8001c2c:	20000014 	.word	0x20000014
 8001c30:	431bde83 	.word	0x431bde83

08001c34 <HAL_ADC_Start_DMA>:
{
 8001c34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c36:	4604      	mov	r4, r0
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8001c38:	4d3e      	ldr	r5, [pc, #248]	; (8001d34 <HAL_ADC_Start_DMA+0x100>)
 8001c3a:	6800      	ldr	r0, [r0, #0]
{
 8001c3c:	460f      	mov	r7, r1
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8001c3e:	42a8      	cmp	r0, r5
{
 8001c40:	4616      	mov	r6, r2
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8001c42:	d059      	beq.n	8001cf8 <HAL_ADC_Start_DMA+0xc4>
 8001c44:	4b3c      	ldr	r3, [pc, #240]	; (8001d38 <HAL_ADC_Start_DMA+0x104>)
 8001c46:	4298      	cmp	r0, r3
 8001c48:	d056      	beq.n	8001cf8 <HAL_ADC_Start_DMA+0xc4>
    __HAL_LOCK(hadc);
 8001c4a:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8001c4e:	2b01      	cmp	r3, #1
 8001c50:	d05f      	beq.n	8001d12 <HAL_ADC_Start_DMA+0xde>
 8001c52:	2301      	movs	r3, #1
    tmp_hal_status = ADC_Enable(hadc);
 8001c54:	4620      	mov	r0, r4
    __HAL_LOCK(hadc);
 8001c56:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
    tmp_hal_status = ADC_Enable(hadc);
 8001c5a:	f7ff ffa7 	bl	8001bac <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8001c5e:	4605      	mov	r5, r0
 8001c60:	2800      	cmp	r0, #0
 8001c62:	d151      	bne.n	8001d08 <HAL_ADC_Start_DMA+0xd4>
      ADC_STATE_CLR_SET(hadc->State,
 8001c64:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001c66:	6821      	ldr	r1, [r4, #0]
 8001c68:	4b33      	ldr	r3, [pc, #204]	; (8001d38 <HAL_ADC_Start_DMA+0x104>)
      ADC_STATE_CLR_SET(hadc->State,
 8001c6a:	f420 6070 	bic.w	r0, r0, #3840	; 0xf00
 8001c6e:	f020 0001 	bic.w	r0, r0, #1
 8001c72:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001c76:	4299      	cmp	r1, r3
      ADC_STATE_CLR_SET(hadc->State,
 8001c78:	62a0      	str	r0, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001c7a:	d04d      	beq.n	8001d18 <HAL_ADC_Start_DMA+0xe4>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001c7c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001c7e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001c82:	62a3      	str	r3, [r4, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001c84:	684b      	ldr	r3, [r1, #4]
 8001c86:	055a      	lsls	r2, r3, #21
 8001c88:	d505      	bpl.n	8001c96 <HAL_ADC_Start_DMA+0x62>
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001c8a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001c8c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001c90:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001c94:	62a3      	str	r3, [r4, #40]	; 0x28
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001c96:	6aa3      	ldr	r3, [r4, #40]	; 0x28
      __HAL_UNLOCK(hadc);
 8001c98:	2000      	movs	r0, #0
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001c9a:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001c9e:	bf18      	it	ne
 8001ca0:	6ae3      	ldrne	r3, [r4, #44]	; 0x2c
      __HAL_UNLOCK(hadc);
 8001ca2:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001ca6:	bf18      	it	ne
 8001ca8:	f023 0306 	bicne.w	r3, r3, #6
        ADC_CLEAR_ERRORCODE(hadc);
 8001cac:	62e3      	str	r3, [r4, #44]	; 0x2c
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001cae:	4633      	mov	r3, r6
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001cb0:	f06f 0602 	mvn.w	r6, #2
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001cb4:	6a20      	ldr	r0, [r4, #32]
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001cb6:	463a      	mov	r2, r7
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001cb8:	4f20      	ldr	r7, [pc, #128]	; (8001d3c <HAL_ADC_Start_DMA+0x108>)
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001cba:	314c      	adds	r1, #76	; 0x4c
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001cbc:	6287      	str	r7, [r0, #40]	; 0x28
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001cbe:	4f20      	ldr	r7, [pc, #128]	; (8001d40 <HAL_ADC_Start_DMA+0x10c>)
 8001cc0:	62c7      	str	r7, [r0, #44]	; 0x2c
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001cc2:	4f20      	ldr	r7, [pc, #128]	; (8001d44 <HAL_ADC_Start_DMA+0x110>)
 8001cc4:	6307      	str	r7, [r0, #48]	; 0x30
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001cc6:	f841 6c4c 	str.w	r6, [r1, #-76]
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001cca:	f851 6c44 	ldr.w	r6, [r1, #-68]
 8001cce:	f446 7680 	orr.w	r6, r6, #256	; 0x100
 8001cd2:	f841 6c44 	str.w	r6, [r1, #-68]
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001cd6:	f000 f9a9 	bl	800202c <HAL_DMA_Start_IT>
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8001cda:	6823      	ldr	r3, [r4, #0]
}
 8001cdc:	4628      	mov	r0, r5
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8001cde:	689a      	ldr	r2, [r3, #8]
 8001ce0:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 8001ce4:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001ce8:	689a      	ldr	r2, [r3, #8]
 8001cea:	bf0c      	ite	eq
 8001cec:	f442 02a0 	orreq.w	r2, r2, #5242880	; 0x500000
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001cf0:	f442 1280 	orrne.w	r2, r2, #1048576	; 0x100000
 8001cf4:	609a      	str	r2, [r3, #8]
}
 8001cf6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8001cf8:	4b0e      	ldr	r3, [pc, #56]	; (8001d34 <HAL_ADC_Start_DMA+0x100>)
 8001cfa:	685b      	ldr	r3, [r3, #4]
 8001cfc:	f413 2f70 	tst.w	r3, #983040	; 0xf0000
 8001d00:	d0a3      	beq.n	8001c4a <HAL_ADC_Start_DMA+0x16>
    tmp_hal_status = HAL_ERROR;
 8001d02:	2501      	movs	r5, #1
}
 8001d04:	4628      	mov	r0, r5
 8001d06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_UNLOCK(hadc);
 8001d08:	2300      	movs	r3, #0
 8001d0a:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
}
 8001d0e:	4628      	mov	r0, r5
 8001d10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_LOCK(hadc);
 8001d12:	2502      	movs	r5, #2
}
 8001d14:	4628      	mov	r0, r5
 8001d16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001d18:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8001d1c:	685a      	ldr	r2, [r3, #4]
 8001d1e:	f412 2f70 	tst.w	r2, #983040	; 0xf0000
 8001d22:	d0ab      	beq.n	8001c7c <HAL_ADC_Start_DMA+0x48>
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001d24:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001d26:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001d2a:	62a2      	str	r2, [r4, #40]	; 0x28
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001d2c:	685b      	ldr	r3, [r3, #4]
 8001d2e:	055b      	lsls	r3, r3, #21
 8001d30:	d5b1      	bpl.n	8001c96 <HAL_ADC_Start_DMA+0x62>
 8001d32:	e7aa      	b.n	8001c8a <HAL_ADC_Start_DMA+0x56>
 8001d34:	40012400 	.word	0x40012400
 8001d38:	40012800 	.word	0x40012800
 8001d3c:	080019f9 	.word	0x080019f9
 8001d40:	08001a4d 	.word	0x08001a4d
 8001d44:	08001a5d 	.word	0x08001a5d

08001d48 <ADC_ConversionStop_Disable>:
{
 8001d48:	b538      	push	{r3, r4, r5, lr}
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001d4a:	6803      	ldr	r3, [r0, #0]
 8001d4c:	689a      	ldr	r2, [r3, #8]
 8001d4e:	07d4      	lsls	r4, r2, #31
 8001d50:	d401      	bmi.n	8001d56 <ADC_ConversionStop_Disable+0xe>
  return HAL_OK;
 8001d52:	2000      	movs	r0, #0
}
 8001d54:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_ADC_DISABLE(hadc);
 8001d56:	4604      	mov	r4, r0
 8001d58:	689a      	ldr	r2, [r3, #8]
 8001d5a:	f022 0201 	bic.w	r2, r2, #1
 8001d5e:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8001d60:	f7ff fe32 	bl	80019c8 <HAL_GetTick>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001d64:	6823      	ldr	r3, [r4, #0]
    tickstart = HAL_GetTick();
 8001d66:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001d68:	689b      	ldr	r3, [r3, #8]
 8001d6a:	07d9      	lsls	r1, r3, #31
 8001d6c:	d5f1      	bpl.n	8001d52 <ADC_ConversionStop_Disable+0xa>
 8001d6e:	e002      	b.n	8001d76 <ADC_ConversionStop_Disable+0x2e>
 8001d70:	689b      	ldr	r3, [r3, #8]
 8001d72:	07db      	lsls	r3, r3, #31
 8001d74:	d5ed      	bpl.n	8001d52 <ADC_ConversionStop_Disable+0xa>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001d76:	f7ff fe27 	bl	80019c8 <HAL_GetTick>
 8001d7a:	1b43      	subs	r3, r0, r5
 8001d7c:	2b02      	cmp	r3, #2
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001d7e:	6823      	ldr	r3, [r4, #0]
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001d80:	d9f6      	bls.n	8001d70 <ADC_ConversionStop_Disable+0x28>
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001d82:	689a      	ldr	r2, [r3, #8]
 8001d84:	07d2      	lsls	r2, r2, #31
 8001d86:	d5f3      	bpl.n	8001d70 <ADC_ConversionStop_Disable+0x28>
          return HAL_ERROR;
 8001d88:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d8a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001d8c:	f043 0310 	orr.w	r3, r3, #16
 8001d90:	62a3      	str	r3, [r4, #40]	; 0x28
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d92:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001d94:	4303      	orrs	r3, r0
 8001d96:	62e3      	str	r3, [r4, #44]	; 0x2c
}
 8001d98:	bd38      	pop	{r3, r4, r5, pc}
 8001d9a:	bf00      	nop

08001d9c <HAL_ADC_Init>:
  if(hadc == NULL)
 8001d9c:	2800      	cmp	r0, #0
 8001d9e:	d06b      	beq.n	8001e78 <HAL_ADC_Init+0xdc>
{
 8001da0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001da2:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8001da4:	4604      	mov	r4, r0
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d04d      	beq.n	8001e46 <HAL_ADC_Init+0xaa>
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001daa:	4620      	mov	r0, r4
 8001dac:	f7ff ffcc 	bl	8001d48 <ADC_ConversionStop_Disable>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001db0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001db2:	f013 0310 	ands.w	r3, r3, #16
 8001db6:	d140      	bne.n	8001e3a <HAL_ADC_Init+0x9e>
 8001db8:	2800      	cmp	r0, #0
 8001dba:	d13e      	bne.n	8001e3a <HAL_ADC_Init+0x9e>
    ADC_STATE_CLR_SET(hadc->State,
 8001dbc:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001dbe:	6861      	ldr	r1, [r4, #4]
    ADC_STATE_CLR_SET(hadc->State,
 8001dc0:	f422 5288 	bic.w	r2, r2, #4352	; 0x1100
 8001dc4:	f022 0202 	bic.w	r2, r2, #2
 8001dc8:	f042 0202 	orr.w	r2, r2, #2
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001dcc:	68a5      	ldr	r5, [r4, #8]
    ADC_STATE_CLR_SET(hadc->State,
 8001dce:	62a2      	str	r2, [r4, #40]	; 0x28
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001dd0:	69e2      	ldr	r2, [r4, #28]
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001dd2:	7b26      	ldrb	r6, [r4, #12]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001dd4:	4311      	orrs	r1, r2
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001dd6:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001dda:	ea41 0146 	orr.w	r1, r1, r6, lsl #1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001dde:	d038      	beq.n	8001e52 <HAL_ADC_Init+0xb6>
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001de0:	7d22      	ldrb	r2, [r4, #20]
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001de2:	2d01      	cmp	r5, #1
 8001de4:	bf0c      	ite	eq
 8001de6:	f44f 7c80 	moveq.w	ip, #256	; 0x100
 8001dea:	f04f 0c00 	movne.w	ip, #0
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001dee:	2a01      	cmp	r2, #1
 8001df0:	d04e      	beq.n	8001e90 <HAL_ADC_Init+0xf4>
      MODIFY_REG(hadc->Instance->CR1,
 8001df2:	6822      	ldr	r2, [r4, #0]
      MODIFY_REG(hadc->Instance->CR2,
 8001df4:	4e37      	ldr	r6, [pc, #220]	; (8001ed4 <HAL_ADC_Init+0x138>)
      MODIFY_REG(hadc->Instance->CR1,
 8001df6:	6857      	ldr	r7, [r2, #4]
 8001df8:	f427 4769 	bic.w	r7, r7, #59648	; 0xe900
 8001dfc:	ea47 070c 	orr.w	r7, r7, ip
 8001e00:	6057      	str	r7, [r2, #4]
      MODIFY_REG(hadc->Instance->CR2,
 8001e02:	6897      	ldr	r7, [r2, #8]
 8001e04:	403e      	ands	r6, r7
 8001e06:	430e      	orrs	r6, r1
 8001e08:	6096      	str	r6, [r2, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001e0a:	2d01      	cmp	r5, #1
 8001e0c:	d030      	beq.n	8001e70 <HAL_ADC_Init+0xd4>
    MODIFY_REG(hadc->Instance->SQR1,
 8001e0e:	6ad5      	ldr	r5, [r2, #44]	; 0x2c
 8001e10:	f425 0c70 	bic.w	ip, r5, #15728640	; 0xf00000
 8001e14:	ea4c 0303 	orr.w	r3, ip, r3
 8001e18:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001e1a:	6892      	ldr	r2, [r2, #8]
 8001e1c:	4b2e      	ldr	r3, [pc, #184]	; (8001ed8 <HAL_ADC_Init+0x13c>)
 8001e1e:	4013      	ands	r3, r2
 8001e20:	4299      	cmp	r1, r3
 8001e22:	d02b      	beq.n	8001e7c <HAL_ADC_Init+0xe0>
      tmp_hal_status = HAL_ERROR;
 8001e24:	2001      	movs	r0, #1
      ADC_STATE_CLR_SET(hadc->State,
 8001e26:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001e28:	f023 0312 	bic.w	r3, r3, #18
 8001e2c:	f043 0310 	orr.w	r3, r3, #16
 8001e30:	62a3      	str	r3, [r4, #40]	; 0x28
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e32:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001e34:	4303      	orrs	r3, r0
 8001e36:	62e3      	str	r3, [r4, #44]	; 0x2c
}
 8001e38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e3a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    tmp_hal_status = HAL_ERROR;
 8001e3c:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e3e:	f043 0310 	orr.w	r3, r3, #16
 8001e42:	62a3      	str	r3, [r4, #40]	; 0x28
}
 8001e44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ADC_CLEAR_ERRORCODE(hadc);
 8001e46:	62c3      	str	r3, [r0, #44]	; 0x2c
    hadc->Lock = HAL_UNLOCKED;
 8001e48:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    HAL_ADC_MspInit(hadc);
 8001e4c:	f7ff fb40 	bl	80014d0 <HAL_ADC_MspInit>
 8001e50:	e7ab      	b.n	8001daa <HAL_ADC_Init+0xe>
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001e52:	7d22      	ldrb	r2, [r4, #20]
 8001e54:	2a01      	cmp	r2, #1
 8001e56:	d01a      	beq.n	8001e8e <HAL_ADC_Init+0xf2>
      MODIFY_REG(hadc->Instance->CR1,
 8001e58:	6822      	ldr	r2, [r4, #0]
 8001e5a:	6853      	ldr	r3, [r2, #4]
 8001e5c:	f423 4369 	bic.w	r3, r3, #59648	; 0xe900
 8001e60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e64:	6053      	str	r3, [r2, #4]
      MODIFY_REG(hadc->Instance->CR2,
 8001e66:	6895      	ldr	r5, [r2, #8]
 8001e68:	4b1a      	ldr	r3, [pc, #104]	; (8001ed4 <HAL_ADC_Init+0x138>)
 8001e6a:	402b      	ands	r3, r5
 8001e6c:	430b      	orrs	r3, r1
 8001e6e:	6093      	str	r3, [r2, #8]
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001e70:	6923      	ldr	r3, [r4, #16]
 8001e72:	3b01      	subs	r3, #1
 8001e74:	051b      	lsls	r3, r3, #20
 8001e76:	e7ca      	b.n	8001e0e <HAL_ADC_Init+0x72>
    return HAL_ERROR;
 8001e78:	2001      	movs	r0, #1
}
 8001e7a:	4770      	bx	lr
      ADC_CLEAR_ERRORCODE(hadc);
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	62e3      	str	r3, [r4, #44]	; 0x2c
      ADC_STATE_CLR_SET(hadc->State,
 8001e80:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001e82:	f023 0303 	bic.w	r3, r3, #3
 8001e86:	f043 0301 	orr.w	r3, r3, #1
 8001e8a:	62a3      	str	r3, [r4, #40]	; 0x28
}
 8001e8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001e8e:	46ac      	mov	ip, r5
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001e90:	b1ce      	cbz	r6, 8001ec6 <HAL_ADC_Init+0x12a>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001e92:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001e94:	f042 0220 	orr.w	r2, r2, #32
 8001e98:	62a2      	str	r2, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e9a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001e9c:	f042 0201 	orr.w	r2, r2, #1
 8001ea0:	62e2      	str	r2, [r4, #44]	; 0x2c
      MODIFY_REG(hadc->Instance->CR1,
 8001ea2:	6822      	ldr	r2, [r4, #0]
      MODIFY_REG(hadc->Instance->CR2,
 8001ea4:	4e0b      	ldr	r6, [pc, #44]	; (8001ed4 <HAL_ADC_Init+0x138>)
      MODIFY_REG(hadc->Instance->CR1,
 8001ea6:	6857      	ldr	r7, [r2, #4]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001ea8:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
      MODIFY_REG(hadc->Instance->CR1,
 8001eac:	f427 4769 	bic.w	r7, r7, #59648	; 0xe900
 8001eb0:	ea47 070c 	orr.w	r7, r7, ip
 8001eb4:	6057      	str	r7, [r2, #4]
      MODIFY_REG(hadc->Instance->CR2,
 8001eb6:	6897      	ldr	r7, [r2, #8]
 8001eb8:	ea06 0607 	and.w	r6, r6, r7
 8001ebc:	ea46 0601 	orr.w	r6, r6, r1
 8001ec0:	6096      	str	r6, [r2, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001ec2:	d1a2      	bne.n	8001e0a <HAL_ADC_Init+0x6e>
 8001ec4:	e7d4      	b.n	8001e70 <HAL_ADC_Init+0xd4>
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001ec6:	69a2      	ldr	r2, [r4, #24]
 8001ec8:	1e57      	subs	r7, r2, #1
 8001eca:	ea4c 3747 	orr.w	r7, ip, r7, lsl #13
 8001ece:	f447 6c00 	orr.w	ip, r7, #2048	; 0x800
 8001ed2:	e7e6      	b.n	8001ea2 <HAL_ADC_Init+0x106>
 8001ed4:	ffe1f7fd 	.word	0xffe1f7fd
 8001ed8:	ff1f0efe 	.word	0xff1f0efe

08001edc <HAL_NVIC_SetPriorityGrouping>:
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001edc:	f64f 0cff 	movw	ip, #63743	; 0xf8ff
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ee0:	4906      	ldr	r1, [pc, #24]	; (8001efc <HAL_NVIC_SetPriorityGrouping+0x20>)
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001ee2:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ee4:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001ee6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001eea:	ea02 020c 	and.w	r2, r2, ip
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001eee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ef0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ef4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8001ef8:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8001efa:	4770      	bx	lr
 8001efc:	e000ed00 	.word	0xe000ed00

08001f00 <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f00:	4b1c      	ldr	r3, [pc, #112]	; (8001f74 <HAL_NVIC_SetPriority+0x74>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f02:	b500      	push	{lr}
 8001f04:	68db      	ldr	r3, [r3, #12]
 8001f06:	f3c3 2302 	ubfx	r3, r3, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f0a:	f1c3 0e07 	rsb	lr, r3, #7
 8001f0e:	f1be 0f04 	cmp.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f12:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f16:	bf28      	it	cs
 8001f18:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f1c:	f1bc 0f06 	cmp.w	ip, #6
 8001f20:	d91b      	bls.n	8001f5a <HAL_NVIC_SetPriority+0x5a>
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f22:	f04f 3cff 	mov.w	ip, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f26:	3b03      	subs	r3, #3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f28:	fa0c fc03 	lsl.w	ip, ip, r3
 8001f2c:	ea22 020c 	bic.w	r2, r2, ip
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f30:	f04f 3cff 	mov.w	ip, #4294967295
 8001f34:	fa0c fc0e 	lsl.w	ip, ip, lr
 8001f38:	ea21 010c 	bic.w	r1, r1, ip
 8001f3c:	4099      	lsls	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8001f3e:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f40:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 8001f44:	db0c      	blt.n	8001f60 <HAL_NVIC_SetPriority+0x60>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f46:	0109      	lsls	r1, r1, #4
 8001f48:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8001f4c:	b2c9      	uxtb	r1, r1
 8001f4e:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8001f52:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001f56:	f85d fb04 	ldr.w	pc, [sp], #4
 8001f5a:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f5c:	4613      	mov	r3, r2
 8001f5e:	e7e7      	b.n	8001f30 <HAL_NVIC_SetPriority+0x30>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f60:	4b05      	ldr	r3, [pc, #20]	; (8001f78 <HAL_NVIC_SetPriority+0x78>)
 8001f62:	f000 000f 	and.w	r0, r0, #15
 8001f66:	0109      	lsls	r1, r1, #4
 8001f68:	b2c9      	uxtb	r1, r1
 8001f6a:	4403      	add	r3, r0
 8001f6c:	7619      	strb	r1, [r3, #24]
 8001f6e:	f85d fb04 	ldr.w	pc, [sp], #4
 8001f72:	bf00      	nop
 8001f74:	e000ed00 	.word	0xe000ed00
 8001f78:	e000ecfc 	.word	0xe000ecfc

08001f7c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001f7c:	2800      	cmp	r0, #0
 8001f7e:	db07      	blt.n	8001f90 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f80:	2301      	movs	r3, #1
 8001f82:	f000 011f 	and.w	r1, r0, #31
 8001f86:	4a03      	ldr	r2, [pc, #12]	; (8001f94 <HAL_NVIC_EnableIRQ+0x18>)
 8001f88:	0940      	lsrs	r0, r0, #5
 8001f8a:	408b      	lsls	r3, r1
 8001f8c:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001f90:	4770      	bx	lr
 8001f92:	bf00      	nop
 8001f94:	e000e100 	.word	0xe000e100

08001f98 <HAL_SYSTICK_Config>:
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f98:	3801      	subs	r0, #1
 8001f9a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8001f9e:	d20f      	bcs.n	8001fc0 <HAL_SYSTICK_Config+0x28>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001fa0:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fa4:	f04f 0cf0 	mov.w	ip, #240	; 0xf0
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001fa8:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001faa:	2107      	movs	r1, #7
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001fac:	b410      	push	{r4}
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fae:	4c05      	ldr	r4, [pc, #20]	; (8001fc4 <HAL_SYSTICK_Config+0x2c>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001fb0:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fb2:	f884 c023 	strb.w	ip, [r4, #35]	; 0x23
  return (0UL);                                                     /* Function successful */
 8001fb6:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001fb8:	619a      	str	r2, [r3, #24]
   return SysTick_Config(TicksNumb);
}
 8001fba:	bc10      	pop	{r4}
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001fbc:	6119      	str	r1, [r3, #16]
 8001fbe:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001fc0:	2001      	movs	r0, #1
 8001fc2:	4770      	bx	lr
 8001fc4:	e000ed00 	.word	0xe000ed00

08001fc8 <HAL_DMA_Init>:
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
  uint32_t tmp = 0U;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001fc8:	b340      	cbz	r0, 800201c <HAL_DMA_Init+0x54>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001fca:	4603      	mov	r3, r0
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001fcc:	c805      	ldmia	r0, {r0, r2}
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001fce:	f44f 7c80 	mov.w	ip, #256	; 0x100
{
 8001fd2:	b430      	push	{r4, r5}
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001fd4:	2400      	movs	r4, #0
  tmp |=  hdma->Init.Direction        |
 8001fd6:	6899      	ldr	r1, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001fd8:	68dd      	ldr	r5, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001fda:	430a      	orrs	r2, r1
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001fdc:	4910      	ldr	r1, [pc, #64]	; (8002020 <HAL_DMA_Init+0x58>)
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001fde:	432a      	orrs	r2, r5
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001fe0:	4d10      	ldr	r5, [pc, #64]	; (8002024 <HAL_DMA_Init+0x5c>)
 8001fe2:	4401      	add	r1, r0
 8001fe4:	fba5 5101 	umull	r5, r1, r5, r1
 8001fe8:	0909      	lsrs	r1, r1, #4
 8001fea:	0089      	lsls	r1, r1, #2
 8001fec:	6419      	str	r1, [r3, #64]	; 0x40
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001fee:	6919      	ldr	r1, [r3, #16]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ff0:	699d      	ldr	r5, [r3, #24]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ff2:	430a      	orrs	r2, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ff4:	6959      	ldr	r1, [r3, #20]
 8001ff6:	430a      	orrs	r2, r1
  tmp = hdma->Instance->CCR;
 8001ff8:	6801      	ldr	r1, [r0, #0]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ffa:	432a      	orrs	r2, r5
          hdma->Init.Mode                | hdma->Init.Priority;
 8001ffc:	69dd      	ldr	r5, [r3, #28]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001ffe:	f421 517f 	bic.w	r1, r1, #16320	; 0x3fc0
 8002002:	f021 0130 	bic.w	r1, r1, #48	; 0x30
          hdma->Init.Mode                | hdma->Init.Priority;
 8002006:	432a      	orrs	r2, r5
  tmp |=  hdma->Init.Direction        |
 8002008:	430a      	orrs	r2, r1
  hdma->DmaBaseAddress = DMA1;
 800200a:	4907      	ldr	r1, [pc, #28]	; (8002028 <HAL_DMA_Init+0x60>)
 800200c:	63d9      	str	r1, [r3, #60]	; 0x3c
  hdma->Instance->CCR = tmp;
 800200e:	6002      	str	r2, [r0, #0]
  hdma->Lock = HAL_UNLOCKED;
 8002010:	f8a3 c020 	strh.w	ip, [r3, #32]

  return HAL_OK;
 8002014:	4620      	mov	r0, r4
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002016:	639c      	str	r4, [r3, #56]	; 0x38
}
 8002018:	bc30      	pop	{r4, r5}
 800201a:	4770      	bx	lr
    return HAL_ERROR;
 800201c:	2001      	movs	r0, #1
}
 800201e:	4770      	bx	lr
 8002020:	bffdfff8 	.word	0xbffdfff8
 8002024:	cccccccd 	.word	0xcccccccd
 8002028:	40020000 	.word	0x40020000

0800202c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800202c:	4684      	mov	ip, r0

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800202e:	f890 0020 	ldrb.w	r0, [r0, #32]
 8002032:	2801      	cmp	r0, #1
 8002034:	d03f      	beq.n	80020b6 <HAL_DMA_Start_IT+0x8a>
{
 8002036:	b430      	push	{r4, r5}
  __HAL_LOCK(hdma);
 8002038:	2401      	movs	r4, #1
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800203a:	f89c 0021 	ldrb.w	r0, [ip, #33]	; 0x21
  __HAL_LOCK(hdma);
 800203e:	f88c 4020 	strb.w	r4, [ip, #32]
  if(HAL_DMA_STATE_READY == hdma->State)
 8002042:	42a0      	cmp	r0, r4
 8002044:	d005      	beq.n	8002052 <HAL_DMA_Start_IT+0x26>
    __HAL_DMA_ENABLE(hdma);
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002046:	2300      	movs	r3, #0
 8002048:	f88c 3020 	strb.w	r3, [ip, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 800204c:	2002      	movs	r0, #2
  }    
  return status;
}
 800204e:	bc30      	pop	{r4, r5}
 8002050:	4770      	bx	lr
    hdma->State = HAL_DMA_STATE_BUSY;
 8002052:	2402      	movs	r4, #2
 8002054:	f88c 4021 	strb.w	r4, [ip, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002058:	2400      	movs	r4, #0
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800205a:	f8dc 5040 	ldr.w	r5, [ip, #64]	; 0x40
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800205e:	f8cc 4038 	str.w	r4, [ip, #56]	; 0x38
    __HAL_DMA_DISABLE(hdma);
 8002062:	f8dc 4000 	ldr.w	r4, [ip]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002066:	40a8      	lsls	r0, r5
    __HAL_DMA_DISABLE(hdma);
 8002068:	6825      	ldr	r5, [r4, #0]
 800206a:	f025 0501 	bic.w	r5, r5, #1
 800206e:	6025      	str	r5, [r4, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002070:	f8dc 503c 	ldr.w	r5, [ip, #60]	; 0x3c
 8002074:	6068      	str	r0, [r5, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002076:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002078:	f8dc 3004 	ldr.w	r3, [ip, #4]
 800207c:	2b10      	cmp	r3, #16
    if(NULL != hdma->XferHalfCpltCallback)
 800207e:	f8dc 302c 	ldr.w	r3, [ip, #44]	; 0x2c
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002082:	bf0b      	itete	eq
 8002084:	60a2      	streq	r2, [r4, #8]
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8002086:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 8002088:	60e1      	streq	r1, [r4, #12]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 800208a:	60e2      	strne	r2, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback)
 800208c:	b153      	cbz	r3, 80020a4 <HAL_DMA_Start_IT+0x78>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800208e:	6823      	ldr	r3, [r4, #0]
 8002090:	f043 030e 	orr.w	r3, r3, #14
 8002094:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 8002096:	6823      	ldr	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002098:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 800209a:	f043 0301 	orr.w	r3, r3, #1
 800209e:	6023      	str	r3, [r4, #0]
}
 80020a0:	bc30      	pop	{r4, r5}
 80020a2:	4770      	bx	lr
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80020a4:	6823      	ldr	r3, [r4, #0]
 80020a6:	f023 0304 	bic.w	r3, r3, #4
 80020aa:	6023      	str	r3, [r4, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80020ac:	6823      	ldr	r3, [r4, #0]
 80020ae:	f043 030a 	orr.w	r3, r3, #10
 80020b2:	6023      	str	r3, [r4, #0]
 80020b4:	e7ef      	b.n	8002096 <HAL_DMA_Start_IT+0x6a>
  __HAL_LOCK(hdma);
 80020b6:	2002      	movs	r0, #2
}
 80020b8:	4770      	bx	lr
 80020ba:	bf00      	nop

080020bc <HAL_DMA_Abort>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80020bc:	f890 2021 	ldrb.w	r2, [r0, #33]	; 0x21
{
 80020c0:	4603      	mov	r3, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80020c2:	2a02      	cmp	r2, #2
 80020c4:	d006      	beq.n	80020d4 <HAL_DMA_Abort+0x18>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80020c6:	2104      	movs	r1, #4
    __HAL_UNLOCK(hdma);
 80020c8:	2200      	movs	r2, #0
    return HAL_ERROR;
 80020ca:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80020cc:	6399      	str	r1, [r3, #56]	; 0x38
    __HAL_UNLOCK(hdma);
 80020ce:	f883 2020 	strb.w	r2, [r3, #32]
}
 80020d2:	4770      	bx	lr
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80020d4:	2101      	movs	r1, #1
  __HAL_UNLOCK(hdma);      
 80020d6:	f44f 7c80 	mov.w	ip, #256	; 0x100
{
 80020da:	b410      	push	{r4}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80020dc:	681a      	ldr	r2, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80020de:	6c1c      	ldr	r4, [r3, #64]	; 0x40
  return status; 
 80020e0:	2000      	movs	r0, #0
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80020e2:	40a1      	lsls	r1, r4
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80020e4:	6814      	ldr	r4, [r2, #0]
 80020e6:	f024 040e 	bic.w	r4, r4, #14
 80020ea:	6014      	str	r4, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 80020ec:	6814      	ldr	r4, [r2, #0]
 80020ee:	f024 0401 	bic.w	r4, r4, #1
 80020f2:	6014      	str	r4, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80020f4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80020f6:	6051      	str	r1, [r2, #4]
  __HAL_UNLOCK(hdma);      
 80020f8:	f8a3 c020 	strh.w	ip, [r3, #32]
}
 80020fc:	bc10      	pop	{r4}
 80020fe:	4770      	bx	lr

08002100 <HAL_DMA_Abort_IT>:
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002100:	f890 2021 	ldrb.w	r2, [r0, #33]	; 0x21
{  
 8002104:	4603      	mov	r3, r0
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002106:	2a02      	cmp	r2, #2
 8002108:	d003      	beq.n	8002112 <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800210a:	2204      	movs	r2, #4
    status = HAL_ERROR;
 800210c:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800210e:	639a      	str	r2, [r3, #56]	; 0x38
}
 8002110:	4770      	bx	lr
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002112:	6802      	ldr	r2, [r0, #0]
{  
 8002114:	b510      	push	{r4, lr}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002116:	6811      	ldr	r1, [r2, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002118:	481b      	ldr	r0, [pc, #108]	; (8002188 <HAL_DMA_Abort_IT+0x88>)
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800211a:	f021 010e 	bic.w	r1, r1, #14
 800211e:	6011      	str	r1, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8002120:	6811      	ldr	r1, [r2, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002122:	4282      	cmp	r2, r0
    __HAL_DMA_DISABLE(hdma);
 8002124:	f021 0101 	bic.w	r1, r1, #1
 8002128:	6011      	str	r1, [r2, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800212a:	d021      	beq.n	8002170 <HAL_DMA_Abort_IT+0x70>
 800212c:	4917      	ldr	r1, [pc, #92]	; (800218c <HAL_DMA_Abort_IT+0x8c>)
 800212e:	428a      	cmp	r2, r1
 8002130:	d01a      	beq.n	8002168 <HAL_DMA_Abort_IT+0x68>
 8002132:	3114      	adds	r1, #20
 8002134:	428a      	cmp	r2, r1
 8002136:	d01d      	beq.n	8002174 <HAL_DMA_Abort_IT+0x74>
 8002138:	3114      	adds	r1, #20
 800213a:	428a      	cmp	r2, r1
 800213c:	d01d      	beq.n	800217a <HAL_DMA_Abort_IT+0x7a>
 800213e:	3114      	adds	r1, #20
 8002140:	428a      	cmp	r2, r1
 8002142:	d01d      	beq.n	8002180 <HAL_DMA_Abort_IT+0x80>
 8002144:	3114      	adds	r1, #20
 8002146:	428a      	cmp	r2, r1
 8002148:	bf0c      	ite	eq
 800214a:	f44f 1280 	moveq.w	r2, #1048576	; 0x100000
 800214e:	f04f 7280 	movne.w	r2, #16777216	; 0x1000000
    __HAL_UNLOCK(hdma);
 8002152:	f44f 7080 	mov.w	r0, #256	; 0x100
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002156:	4c0e      	ldr	r4, [pc, #56]	; (8002190 <HAL_DMA_Abort_IT+0x90>)
    if(hdma->XferAbortCallback != NULL)
 8002158:	6b59      	ldr	r1, [r3, #52]	; 0x34
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800215a:	6062      	str	r2, [r4, #4]
    __HAL_UNLOCK(hdma);
 800215c:	8418      	strh	r0, [r3, #32]
    if(hdma->XferAbortCallback != NULL)
 800215e:	b129      	cbz	r1, 800216c <HAL_DMA_Abort_IT+0x6c>
      hdma->XferAbortCallback(hdma);
 8002160:	4618      	mov	r0, r3
 8002162:	4788      	blx	r1
  HAL_StatusTypeDef status = HAL_OK;
 8002164:	2000      	movs	r0, #0
}
 8002166:	bd10      	pop	{r4, pc}
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002168:	2210      	movs	r2, #16
 800216a:	e7f2      	b.n	8002152 <HAL_DMA_Abort_IT+0x52>
  HAL_StatusTypeDef status = HAL_OK;
 800216c:	4608      	mov	r0, r1
}
 800216e:	bd10      	pop	{r4, pc}
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002170:	2201      	movs	r2, #1
 8002172:	e7ee      	b.n	8002152 <HAL_DMA_Abort_IT+0x52>
 8002174:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002178:	e7eb      	b.n	8002152 <HAL_DMA_Abort_IT+0x52>
 800217a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800217e:	e7e8      	b.n	8002152 <HAL_DMA_Abort_IT+0x52>
 8002180:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002184:	e7e5      	b.n	8002152 <HAL_DMA_Abort_IT+0x52>
 8002186:	bf00      	nop
 8002188:	40020008 	.word	0x40020008
 800218c:	4002001c 	.word	0x4002001c
 8002190:	40020000 	.word	0x40020000

08002194 <HAL_DMA_IRQHandler>:
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002194:	2204      	movs	r2, #4
{
 8002196:	b470      	push	{r4, r5, r6}
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002198:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800219a:	6c01      	ldr	r1, [r0, #64]	; 0x40
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800219c:	6834      	ldr	r4, [r6, #0]
  uint32_t source_it = hdma->Instance->CCR;
 800219e:	6803      	ldr	r3, [r0, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80021a0:	408a      	lsls	r2, r1
 80021a2:	4222      	tst	r2, r4
  uint32_t source_it = hdma->Instance->CCR;
 80021a4:	681d      	ldr	r5, [r3, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80021a6:	d01f      	beq.n	80021e8 <HAL_DMA_IRQHandler+0x54>
 80021a8:	076a      	lsls	r2, r5, #29
 80021aa:	d51d      	bpl.n	80021e8 <HAL_DMA_IRQHandler+0x54>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80021ac:	681a      	ldr	r2, [r3, #0]
 80021ae:	0691      	lsls	r1, r2, #26
 80021b0:	d403      	bmi.n	80021ba <HAL_DMA_IRQHandler+0x26>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80021b2:	681a      	ldr	r2, [r3, #0]
 80021b4:	f022 0204 	bic.w	r2, r2, #4
 80021b8:	601a      	str	r2, [r3, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80021ba:	4a3e      	ldr	r2, [pc, #248]	; (80022b4 <HAL_DMA_IRQHandler+0x120>)
 80021bc:	4293      	cmp	r3, r2
 80021be:	d050      	beq.n	8002262 <HAL_DMA_IRQHandler+0xce>
 80021c0:	3214      	adds	r2, #20
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d060      	beq.n	8002288 <HAL_DMA_IRQHandler+0xf4>
 80021c6:	3214      	adds	r2, #20
 80021c8:	4293      	cmp	r3, r2
 80021ca:	d067      	beq.n	800229c <HAL_DMA_IRQHandler+0x108>
 80021cc:	3214      	adds	r2, #20
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d06a      	beq.n	80022a8 <HAL_DMA_IRQHandler+0x114>
 80021d2:	3214      	adds	r2, #20
 80021d4:	4293      	cmp	r3, r2
 80021d6:	d05c      	beq.n	8002292 <HAL_DMA_IRQHandler+0xfe>
 80021d8:	3214      	adds	r2, #20
 80021da:	4293      	cmp	r3, r2
 80021dc:	bf0c      	ite	eq
 80021de:	f44f 0380 	moveq.w	r3, #4194304	; 0x400000
 80021e2:	f04f 6380 	movne.w	r3, #67108864	; 0x4000000
 80021e6:	e03d      	b.n	8002264 <HAL_DMA_IRQHandler+0xd0>
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80021e8:	2202      	movs	r2, #2
 80021ea:	408a      	lsls	r2, r1
 80021ec:	4222      	tst	r2, r4
 80021ee:	d022      	beq.n	8002236 <HAL_DMA_IRQHandler+0xa2>
 80021f0:	07aa      	lsls	r2, r5, #30
 80021f2:	d520      	bpl.n	8002236 <HAL_DMA_IRQHandler+0xa2>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80021f4:	681a      	ldr	r2, [r3, #0]
 80021f6:	0691      	lsls	r1, r2, #26
 80021f8:	d406      	bmi.n	8002208 <HAL_DMA_IRQHandler+0x74>
      hdma->State = HAL_DMA_STATE_READY;
 80021fa:	2101      	movs	r1, #1
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80021fc:	681a      	ldr	r2, [r3, #0]
 80021fe:	f022 020a 	bic.w	r2, r2, #10
 8002202:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8002204:	f880 1021 	strb.w	r1, [r0, #33]	; 0x21
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002208:	4a2a      	ldr	r2, [pc, #168]	; (80022b4 <HAL_DMA_IRQHandler+0x120>)
 800220a:	4293      	cmp	r3, r2
 800220c:	d031      	beq.n	8002272 <HAL_DMA_IRQHandler+0xde>
 800220e:	3214      	adds	r2, #20
 8002210:	4293      	cmp	r3, r2
 8002212:	d041      	beq.n	8002298 <HAL_DMA_IRQHandler+0x104>
 8002214:	3214      	adds	r2, #20
 8002216:	4293      	cmp	r3, r2
 8002218:	d043      	beq.n	80022a2 <HAL_DMA_IRQHandler+0x10e>
 800221a:	3214      	adds	r2, #20
 800221c:	4293      	cmp	r3, r2
 800221e:	d035      	beq.n	800228c <HAL_DMA_IRQHandler+0xf8>
 8002220:	3214      	adds	r2, #20
 8002222:	4293      	cmp	r3, r2
 8002224:	d043      	beq.n	80022ae <HAL_DMA_IRQHandler+0x11a>
 8002226:	3214      	adds	r2, #20
 8002228:	4293      	cmp	r3, r2
 800222a:	bf0c      	ite	eq
 800222c:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
 8002230:	f04f 7300 	movne.w	r3, #33554432	; 0x2000000
 8002234:	e01e      	b.n	8002274 <HAL_DMA_IRQHandler+0xe0>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002236:	2208      	movs	r2, #8
 8002238:	408a      	lsls	r2, r1
 800223a:	4222      	tst	r2, r4
 800223c:	d017      	beq.n	800226e <HAL_DMA_IRQHandler+0xda>
 800223e:	072a      	lsls	r2, r5, #28
 8002240:	d515      	bpl.n	800226e <HAL_DMA_IRQHandler+0xda>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002242:	681a      	ldr	r2, [r3, #0]
    __HAL_UNLOCK(hdma);
 8002244:	f44f 7480 	mov.w	r4, #256	; 0x100
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002248:	f022 020e 	bic.w	r2, r2, #14
 800224c:	601a      	str	r2, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800224e:	2301      	movs	r3, #1
    if (hdma->XferErrorCallback != NULL)
 8002250:	6b02      	ldr	r2, [r0, #48]	; 0x30
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002252:	fa03 f101 	lsl.w	r1, r3, r1
 8002256:	6071      	str	r1, [r6, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002258:	6383      	str	r3, [r0, #56]	; 0x38
    __HAL_UNLOCK(hdma);
 800225a:	8404      	strh	r4, [r0, #32]
    if (hdma->XferErrorCallback != NULL)
 800225c:	b13a      	cbz	r2, 800226e <HAL_DMA_IRQHandler+0xda>
}
 800225e:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 8002260:	4710      	bx	r2
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002262:	2304      	movs	r3, #4
 8002264:	4914      	ldr	r1, [pc, #80]	; (80022b8 <HAL_DMA_IRQHandler+0x124>)
    if(hdma->XferHalfCpltCallback != NULL)
 8002266:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002268:	604b      	str	r3, [r1, #4]
    if(hdma->XferHalfCpltCallback != NULL)
 800226a:	2a00      	cmp	r2, #0
 800226c:	d1f7      	bne.n	800225e <HAL_DMA_IRQHandler+0xca>
}
 800226e:	bc70      	pop	{r4, r5, r6}
 8002270:	4770      	bx	lr
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002272:	2302      	movs	r3, #2
    __HAL_UNLOCK(hdma);
 8002274:	2100      	movs	r1, #0
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002276:	4c10      	ldr	r4, [pc, #64]	; (80022b8 <HAL_DMA_IRQHandler+0x124>)
    if(hdma->XferCpltCallback != NULL)
 8002278:	6a82      	ldr	r2, [r0, #40]	; 0x28
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800227a:	6063      	str	r3, [r4, #4]
    __HAL_UNLOCK(hdma);
 800227c:	f880 1020 	strb.w	r1, [r0, #32]
    if(hdma->XferCpltCallback != NULL)
 8002280:	2a00      	cmp	r2, #0
 8002282:	d0f4      	beq.n	800226e <HAL_DMA_IRQHandler+0xda>
}
 8002284:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 8002286:	4710      	bx	r2
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002288:	2340      	movs	r3, #64	; 0x40
 800228a:	e7eb      	b.n	8002264 <HAL_DMA_IRQHandler+0xd0>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800228c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002290:	e7f0      	b.n	8002274 <HAL_DMA_IRQHandler+0xe0>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002292:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002296:	e7e5      	b.n	8002264 <HAL_DMA_IRQHandler+0xd0>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002298:	2320      	movs	r3, #32
 800229a:	e7eb      	b.n	8002274 <HAL_DMA_IRQHandler+0xe0>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800229c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80022a0:	e7e0      	b.n	8002264 <HAL_DMA_IRQHandler+0xd0>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80022a2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80022a6:	e7e5      	b.n	8002274 <HAL_DMA_IRQHandler+0xe0>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80022a8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80022ac:	e7da      	b.n	8002264 <HAL_DMA_IRQHandler+0xd0>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80022ae:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80022b2:	e7df      	b.n	8002274 <HAL_DMA_IRQHandler+0xe0>
 80022b4:	40020008 	.word	0x40020008
 80022b8:	40020000 	.word	0x40020000

080022bc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80022c0:	680e      	ldr	r6, [r1, #0]
{
 80022c2:	b083      	sub	sp, #12
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80022c4:	2e00      	cmp	r6, #0
 80022c6:	f000 80b5 	beq.w	8002434 <HAL_GPIO_Init+0x178>
 80022ca:	2200      	movs	r2, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80022cc:	4f7a      	ldr	r7, [pc, #488]	; (80024b8 <HAL_GPIO_Init+0x1fc>)
  uint32_t config = 0x00u;
 80022ce:	4692      	mov	sl, r2
  uint32_t position = 0x00u;
 80022d0:	4613      	mov	r3, r2
        {
          SET_BIT(EXTI->FTSR, iocurrent);
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80022d2:	4d7a      	ldr	r5, [pc, #488]	; (80024bc <HAL_GPIO_Init+0x200>)
      switch (GPIO_Init->Mode)
 80022d4:	f8df 81e8 	ldr.w	r8, [pc, #488]	; 80024c0 <HAL_GPIO_Init+0x204>
 80022d8:	e006      	b.n	80022e8 <HAL_GPIO_Init+0x2c>
        }
      }
    }

	position++;
 80022da:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80022dc:	fa36 f403 	lsrs.w	r4, r6, r3
 80022e0:	f102 0204 	add.w	r2, r2, #4
 80022e4:	f000 80a6 	beq.w	8002434 <HAL_GPIO_Init+0x178>
    ioposition = (0x01uL << position);
 80022e8:	2401      	movs	r4, #1
 80022ea:	409c      	lsls	r4, r3
    if (iocurrent == ioposition)
 80022ec:	ea34 0e06 	bics.w	lr, r4, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80022f0:	ea04 0c06 	and.w	ip, r4, r6
    if (iocurrent == ioposition)
 80022f4:	d1f1      	bne.n	80022da <HAL_GPIO_Init+0x1e>
      switch (GPIO_Init->Mode)
 80022f6:	684e      	ldr	r6, [r1, #4]
 80022f8:	2e12      	cmp	r6, #18
 80022fa:	f200 809e 	bhi.w	800243a <HAL_GPIO_Init+0x17e>
 80022fe:	2e12      	cmp	r6, #18
 8002300:	d81a      	bhi.n	8002338 <HAL_GPIO_Init+0x7c>
 8002302:	e8df f006 	tbb	[pc, r6]
 8002306:	b9a7      	.short	0xb9a7
 8002308:	1919ceb5 	.word	0x1919ceb5
 800230c:	19191919 	.word	0x19191919
 8002310:	19191919 	.word	0x19191919
 8002314:	b1191919 	.word	0xb1191919
 8002318:	bc          	.byte	0xbc
 8002319:	00          	.byte	0x00
 800231a:	f8df e1a8 	ldr.w	lr, [pc, #424]	; 80024c4 <HAL_GPIO_Init+0x208>
 800231e:	4576      	cmp	r6, lr
 8002320:	f000 8098 	beq.w	8002454 <HAL_GPIO_Init+0x198>
 8002324:	f50e 2e70 	add.w	lr, lr, #983040	; 0xf0000
 8002328:	4576      	cmp	r6, lr
 800232a:	f000 8093 	beq.w	8002454 <HAL_GPIO_Init+0x198>
 800232e:	f5ae 1e80 	sub.w	lr, lr, #1048576	; 0x100000
 8002332:	4576      	cmp	r6, lr
 8002334:	f000 808e 	beq.w	8002454 <HAL_GPIO_Init+0x198>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002338:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 800233c:	bf9c      	itt	ls
 800233e:	4686      	movls	lr, r0
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002340:	4693      	movls	fp, r2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002342:	f04f 060f 	mov.w	r6, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002346:	bf84      	itt	hi
 8002348:	f100 0e04 	addhi.w	lr, r0, #4
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800234c:	f1a2 0b20 	subhi.w	fp, r2, #32
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002350:	f8de 4000 	ldr.w	r4, [lr]
 8002354:	fa0a f90b 	lsl.w	r9, sl, fp
 8002358:	fa06 fb0b 	lsl.w	fp, r6, fp
 800235c:	ea24 040b 	bic.w	r4, r4, fp
 8002360:	ea44 0409 	orr.w	r4, r4, r9
 8002364:	f8ce 4000 	str.w	r4, [lr]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002368:	684c      	ldr	r4, [r1, #4]
 800236a:	f014 5f80 	tst.w	r4, #268435456	; 0x10000000
 800236e:	d079      	beq.n	8002464 <HAL_GPIO_Init+0x1a8>
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002370:	f8d7 e018 	ldr.w	lr, [r7, #24]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002374:	f003 0903 	and.w	r9, r3, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002378:	f04e 0e01 	orr.w	lr, lr, #1
 800237c:	f8c7 e018 	str.w	lr, [r7, #24]
 8002380:	f8d7 e018 	ldr.w	lr, [r7, #24]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002384:	ea4f 0989 	mov.w	r9, r9, lsl #2
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002388:	f00e 0e01 	and.w	lr, lr, #1
 800238c:	f8cd e004 	str.w	lr, [sp, #4]
 8002390:	f8dd e004 	ldr.w	lr, [sp, #4]
        temp = AFIO->EXTICR[position >> 2u];
 8002394:	f023 0e03 	bic.w	lr, r3, #3
 8002398:	f10e 4e80 	add.w	lr, lr, #1073741824	; 0x40000000
 800239c:	f50e 3e80 	add.w	lr, lr, #65536	; 0x10000
 80023a0:	f8de b008 	ldr.w	fp, [lr, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80023a4:	fa06 f609 	lsl.w	r6, r6, r9
 80023a8:	ea2b 0606 	bic.w	r6, fp, r6
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80023ac:	f8df b118 	ldr.w	fp, [pc, #280]	; 80024c8 <HAL_GPIO_Init+0x20c>
 80023b0:	4558      	cmp	r0, fp
 80023b2:	d013      	beq.n	80023dc <HAL_GPIO_Init+0x120>
 80023b4:	f50b 6b80 	add.w	fp, fp, #1024	; 0x400
 80023b8:	4558      	cmp	r0, fp
 80023ba:	d06b      	beq.n	8002494 <HAL_GPIO_Init+0x1d8>
 80023bc:	f8df b10c 	ldr.w	fp, [pc, #268]	; 80024cc <HAL_GPIO_Init+0x210>
 80023c0:	4558      	cmp	r0, fp
 80023c2:	d060      	beq.n	8002486 <HAL_GPIO_Init+0x1ca>
 80023c4:	f8df b108 	ldr.w	fp, [pc, #264]	; 80024d0 <HAL_GPIO_Init+0x214>
 80023c8:	4558      	cmp	r0, fp
 80023ca:	bf0c      	ite	eq
 80023cc:	f04f 0b03 	moveq.w	fp, #3
 80023d0:	f04f 0b04 	movne.w	fp, #4
 80023d4:	fa0b f909 	lsl.w	r9, fp, r9
 80023d8:	ea46 0609 	orr.w	r6, r6, r9
        AFIO->EXTICR[position >> 2u] = temp;
 80023dc:	f8ce 6008 	str.w	r6, [lr, #8]
          SET_BIT(EXTI->IMR, iocurrent);
 80023e0:	682e      	ldr	r6, [r5, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80023e2:	f414 3f80 	tst.w	r4, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 80023e6:	bf14      	ite	ne
 80023e8:	ea46 060c 	orrne.w	r6, r6, ip
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80023ec:	ea26 060c 	biceq.w	r6, r6, ip
 80023f0:	602e      	str	r6, [r5, #0]
          SET_BIT(EXTI->EMR, iocurrent);
 80023f2:	686e      	ldr	r6, [r5, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80023f4:	f414 3f00 	tst.w	r4, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 80023f8:	bf14      	ite	ne
 80023fa:	ea46 060c 	orrne.w	r6, r6, ip
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80023fe:	ea26 060c 	biceq.w	r6, r6, ip
 8002402:	606e      	str	r6, [r5, #4]
          SET_BIT(EXTI->RTSR, iocurrent);
 8002404:	68ae      	ldr	r6, [r5, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002406:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 800240a:	bf14      	ite	ne
 800240c:	ea46 060c 	orrne.w	r6, r6, ip
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002410:	ea26 060c 	biceq.w	r6, r6, ip
 8002414:	60ae      	str	r6, [r5, #8]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002416:	f414 1f00 	tst.w	r4, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 800241a:	68ec      	ldr	r4, [r5, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800241c:	d01f      	beq.n	800245e <HAL_GPIO_Init+0x1a2>
          SET_BIT(EXTI->FTSR, iocurrent);
 800241e:	ea44 040c 	orr.w	r4, r4, ip
 8002422:	60ec      	str	r4, [r5, #12]
 8002424:	680e      	ldr	r6, [r1, #0]
	position++;
 8002426:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002428:	fa36 f403 	lsrs.w	r4, r6, r3
 800242c:	f102 0204 	add.w	r2, r2, #4
 8002430:	f47f af5a 	bne.w	80022e8 <HAL_GPIO_Init+0x2c>
  }
}
 8002434:	b003      	add	sp, #12
 8002436:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      switch (GPIO_Init->Mode)
 800243a:	4546      	cmp	r6, r8
 800243c:	d00a      	beq.n	8002454 <HAL_GPIO_Init+0x198>
 800243e:	f67f af6c 	bls.w	800231a <HAL_GPIO_Init+0x5e>
 8002442:	f8df e090 	ldr.w	lr, [pc, #144]	; 80024d4 <HAL_GPIO_Init+0x218>
 8002446:	4576      	cmp	r6, lr
 8002448:	d004      	beq.n	8002454 <HAL_GPIO_Init+0x198>
 800244a:	f50e 3e80 	add.w	lr, lr, #65536	; 0x10000
 800244e:	4576      	cmp	r6, lr
 8002450:	f47f af72 	bne.w	8002338 <HAL_GPIO_Init+0x7c>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002454:	688e      	ldr	r6, [r1, #8]
 8002456:	bb3e      	cbnz	r6, 80024a8 <HAL_GPIO_Init+0x1ec>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002458:	f04f 0a04 	mov.w	sl, #4
 800245c:	e76c      	b.n	8002338 <HAL_GPIO_Init+0x7c>
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800245e:	ea24 040c 	bic.w	r4, r4, ip
 8002462:	60ec      	str	r4, [r5, #12]
 8002464:	680e      	ldr	r6, [r1, #0]
 8002466:	e738      	b.n	80022da <HAL_GPIO_Init+0x1e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002468:	68cc      	ldr	r4, [r1, #12]
 800246a:	f104 0a04 	add.w	sl, r4, #4
          break;
 800246e:	e763      	b.n	8002338 <HAL_GPIO_Init+0x7c>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002470:	68cc      	ldr	r4, [r1, #12]
 8002472:	f104 0a08 	add.w	sl, r4, #8
          break;
 8002476:	e75f      	b.n	8002338 <HAL_GPIO_Init+0x7c>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002478:	f8d1 a00c 	ldr.w	sl, [r1, #12]
          break;
 800247c:	e75c      	b.n	8002338 <HAL_GPIO_Init+0x7c>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800247e:	68cc      	ldr	r4, [r1, #12]
 8002480:	f104 0a0c 	add.w	sl, r4, #12
          break;
 8002484:	e758      	b.n	8002338 <HAL_GPIO_Init+0x7c>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002486:	f04f 0b02 	mov.w	fp, #2
 800248a:	fa0b f909 	lsl.w	r9, fp, r9
 800248e:	ea46 0609 	orr.w	r6, r6, r9
 8002492:	e7a3      	b.n	80023dc <HAL_GPIO_Init+0x120>
 8002494:	f04f 0b01 	mov.w	fp, #1
 8002498:	fa0b f909 	lsl.w	r9, fp, r9
 800249c:	ea46 0609 	orr.w	r6, r6, r9
 80024a0:	e79c      	b.n	80023dc <HAL_GPIO_Init+0x120>
      switch (GPIO_Init->Mode)
 80024a2:	f04f 0a00 	mov.w	sl, #0
 80024a6:	e747      	b.n	8002338 <HAL_GPIO_Init+0x7c>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80024a8:	2e01      	cmp	r6, #1
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80024aa:	f04f 0a08 	mov.w	sl, #8
            GPIOx->BSRR = ioposition;
 80024ae:	bf0c      	ite	eq
 80024b0:	6104      	streq	r4, [r0, #16]
            GPIOx->BRR = ioposition;
 80024b2:	6144      	strne	r4, [r0, #20]
 80024b4:	e740      	b.n	8002338 <HAL_GPIO_Init+0x7c>
 80024b6:	bf00      	nop
 80024b8:	40021000 	.word	0x40021000
 80024bc:	40010400 	.word	0x40010400
 80024c0:	10220000 	.word	0x10220000
 80024c4:	10120000 	.word	0x10120000
 80024c8:	40010800 	.word	0x40010800
 80024cc:	40011000 	.word	0x40011000
 80024d0:	40011400 	.word	0x40011400
 80024d4:	10310000 	.word	0x10310000

080024d8 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80024d8:	b902      	cbnz	r2, 80024dc <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80024da:	0409      	lsls	r1, r1, #16
 80024dc:	6101      	str	r1, [r0, #16]
  }
}
 80024de:	4770      	bx	lr

080024e0 <HAL_PWR_EnableBkUpAccess>:
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 80024e0:	2201      	movs	r2, #1
 80024e2:	4b01      	ldr	r3, [pc, #4]	; (80024e8 <HAL_PWR_EnableBkUpAccess+0x8>)
 80024e4:	621a      	str	r2, [r3, #32]
}
 80024e6:	4770      	bx	lr
 80024e8:	420e0000 	.word	0x420e0000

080024ec <HAL_RCC_OscConfig>:
{
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80024ec:	2800      	cmp	r0, #0
 80024ee:	f000 81b6 	beq.w	800285e <HAL_RCC_OscConfig+0x372>
{
 80024f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024f6:	6803      	ldr	r3, [r0, #0]
 80024f8:	4604      	mov	r4, r0
 80024fa:	07dd      	lsls	r5, r3, #31
{
 80024fc:	b082      	sub	sp, #8
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024fe:	d535      	bpl.n	800256c <HAL_RCC_OscConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002500:	499a      	ldr	r1, [pc, #616]	; (800276c <HAL_RCC_OscConfig+0x280>)
 8002502:	684a      	ldr	r2, [r1, #4]
 8002504:	f002 020c 	and.w	r2, r2, #12
 8002508:	2a04      	cmp	r2, #4
 800250a:	f000 80ef 	beq.w	80026ec <HAL_RCC_OscConfig+0x200>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800250e:	684a      	ldr	r2, [r1, #4]
 8002510:	f002 020c 	and.w	r2, r2, #12
 8002514:	2a08      	cmp	r2, #8
 8002516:	f000 80e5 	beq.w	80026e4 <HAL_RCC_OscConfig+0x1f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800251a:	6863      	ldr	r3, [r4, #4]
 800251c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002520:	d010      	beq.n	8002544 <HAL_RCC_OscConfig+0x58>
 8002522:	2b00      	cmp	r3, #0
 8002524:	f000 810c 	beq.w	8002740 <HAL_RCC_OscConfig+0x254>
 8002528:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800252c:	f000 8182 	beq.w	8002834 <HAL_RCC_OscConfig+0x348>
 8002530:	4b8e      	ldr	r3, [pc, #568]	; (800276c <HAL_RCC_OscConfig+0x280>)
 8002532:	681a      	ldr	r2, [r3, #0]
 8002534:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002538:	601a      	str	r2, [r3, #0]
 800253a:	681a      	ldr	r2, [r3, #0]
 800253c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002540:	601a      	str	r2, [r3, #0]
 8002542:	e004      	b.n	800254e <HAL_RCC_OscConfig+0x62>
 8002544:	4a89      	ldr	r2, [pc, #548]	; (800276c <HAL_RCC_OscConfig+0x280>)
 8002546:	6813      	ldr	r3, [r2, #0]
 8002548:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800254c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800254e:	f7ff fa3b 	bl	80019c8 <HAL_GetTick>

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002552:	4e86      	ldr	r6, [pc, #536]	; (800276c <HAL_RCC_OscConfig+0x280>)
        tickstart = HAL_GetTick();
 8002554:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002556:	e005      	b.n	8002564 <HAL_RCC_OscConfig+0x78>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002558:	f7ff fa36 	bl	80019c8 <HAL_GetTick>
 800255c:	1b40      	subs	r0, r0, r5
 800255e:	2864      	cmp	r0, #100	; 0x64
 8002560:	f200 80ea 	bhi.w	8002738 <HAL_RCC_OscConfig+0x24c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002564:	6833      	ldr	r3, [r6, #0]
 8002566:	039a      	lsls	r2, r3, #14
 8002568:	d5f6      	bpl.n	8002558 <HAL_RCC_OscConfig+0x6c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800256a:	6823      	ldr	r3, [r4, #0]
 800256c:	079f      	lsls	r7, r3, #30
 800256e:	d528      	bpl.n	80025c2 <HAL_RCC_OscConfig+0xd6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002570:	4a7e      	ldr	r2, [pc, #504]	; (800276c <HAL_RCC_OscConfig+0x280>)
 8002572:	6851      	ldr	r1, [r2, #4]
 8002574:	f011 0f0c 	tst.w	r1, #12
 8002578:	f000 808d 	beq.w	8002696 <HAL_RCC_OscConfig+0x1aa>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800257c:	6851      	ldr	r1, [r2, #4]
 800257e:	f001 010c 	and.w	r1, r1, #12
 8002582:	2908      	cmp	r1, #8
 8002584:	f000 8083 	beq.w	800268e <HAL_RCC_OscConfig+0x1a2>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002588:	6923      	ldr	r3, [r4, #16]
 800258a:	2b00      	cmp	r3, #0
 800258c:	f000 8118 	beq.w	80027c0 <HAL_RCC_OscConfig+0x2d4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002590:	2201      	movs	r2, #1
 8002592:	4b77      	ldr	r3, [pc, #476]	; (8002770 <HAL_RCC_OscConfig+0x284>)

        /* Get Start Tick */
        tickstart = HAL_GetTick();

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002594:	4e75      	ldr	r6, [pc, #468]	; (800276c <HAL_RCC_OscConfig+0x280>)
        __HAL_RCC_HSI_ENABLE();
 8002596:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002598:	f7ff fa16 	bl	80019c8 <HAL_GetTick>
 800259c:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800259e:	e005      	b.n	80025ac <HAL_RCC_OscConfig+0xc0>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025a0:	f7ff fa12 	bl	80019c8 <HAL_GetTick>
 80025a4:	1b40      	subs	r0, r0, r5
 80025a6:	2802      	cmp	r0, #2
 80025a8:	f200 80c6 	bhi.w	8002738 <HAL_RCC_OscConfig+0x24c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025ac:	6833      	ldr	r3, [r6, #0]
 80025ae:	0798      	lsls	r0, r3, #30
 80025b0:	d5f6      	bpl.n	80025a0 <HAL_RCC_OscConfig+0xb4>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025b2:	6833      	ldr	r3, [r6, #0]
 80025b4:	6962      	ldr	r2, [r4, #20]
 80025b6:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80025ba:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80025be:	6033      	str	r3, [r6, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025c0:	6823      	ldr	r3, [r4, #0]
 80025c2:	071a      	lsls	r2, r3, #28
 80025c4:	d41f      	bmi.n	8002606 <HAL_RCC_OscConfig+0x11a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80025c6:	075d      	lsls	r5, r3, #29
 80025c8:	d542      	bpl.n	8002650 <HAL_RCC_OscConfig+0x164>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80025ca:	4b68      	ldr	r3, [pc, #416]	; (800276c <HAL_RCC_OscConfig+0x280>)
 80025cc:	69da      	ldr	r2, [r3, #28]
 80025ce:	00d0      	lsls	r0, r2, #3
 80025d0:	d57d      	bpl.n	80026ce <HAL_RCC_OscConfig+0x1e2>
    FlagStatus       pwrclkchanged = RESET;
 80025d2:	2500      	movs	r5, #0
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025d4:	4e67      	ldr	r6, [pc, #412]	; (8002774 <HAL_RCC_OscConfig+0x288>)
 80025d6:	6833      	ldr	r3, [r6, #0]
 80025d8:	05d9      	lsls	r1, r3, #23
 80025da:	f140 809d 	bpl.w	8002718 <HAL_RCC_OscConfig+0x22c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025de:	68e3      	ldr	r3, [r4, #12]
 80025e0:	2b01      	cmp	r3, #1
 80025e2:	f000 80fe 	beq.w	80027e2 <HAL_RCC_OscConfig+0x2f6>
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	f000 80ca 	beq.w	8002780 <HAL_RCC_OscConfig+0x294>
 80025ec:	2b05      	cmp	r3, #5
 80025ee:	4b5f      	ldr	r3, [pc, #380]	; (800276c <HAL_RCC_OscConfig+0x280>)
 80025f0:	6a1a      	ldr	r2, [r3, #32]
 80025f2:	f000 812c 	beq.w	800284e <HAL_RCC_OscConfig+0x362>
 80025f6:	f022 0201 	bic.w	r2, r2, #1
 80025fa:	621a      	str	r2, [r3, #32]
 80025fc:	6a1a      	ldr	r2, [r3, #32]
 80025fe:	f022 0204 	bic.w	r2, r2, #4
 8002602:	621a      	str	r2, [r3, #32]
 8002604:	e0f2      	b.n	80027ec <HAL_RCC_OscConfig+0x300>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002606:	69a3      	ldr	r3, [r4, #24]
 8002608:	2b00      	cmp	r3, #0
 800260a:	d04f      	beq.n	80026ac <HAL_RCC_OscConfig+0x1c0>
      __HAL_RCC_LSI_ENABLE();
 800260c:	2201      	movs	r2, #1
 800260e:	4b58      	ldr	r3, [pc, #352]	; (8002770 <HAL_RCC_OscConfig+0x284>)
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002610:	4e56      	ldr	r6, [pc, #344]	; (800276c <HAL_RCC_OscConfig+0x280>)
      __HAL_RCC_LSI_ENABLE();
 8002612:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
      tickstart = HAL_GetTick();
 8002616:	f7ff f9d7 	bl	80019c8 <HAL_GetTick>
 800261a:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800261c:	e005      	b.n	800262a <HAL_RCC_OscConfig+0x13e>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800261e:	f7ff f9d3 	bl	80019c8 <HAL_GetTick>
 8002622:	1b40      	subs	r0, r0, r5
 8002624:	2802      	cmp	r0, #2
 8002626:	f200 8087 	bhi.w	8002738 <HAL_RCC_OscConfig+0x24c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800262a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800262c:	079b      	lsls	r3, r3, #30
 800262e:	d5f6      	bpl.n	800261e <HAL_RCC_OscConfig+0x132>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002630:	4b51      	ldr	r3, [pc, #324]	; (8002778 <HAL_RCC_OscConfig+0x28c>)
 8002632:	4a52      	ldr	r2, [pc, #328]	; (800277c <HAL_RCC_OscConfig+0x290>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	fba2 2303 	umull	r2, r3, r2, r3
 800263a:	0a5b      	lsrs	r3, r3, #9
 800263c:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 800263e:	bf00      	nop
  }
  while (Delay --);
 8002640:	9b01      	ldr	r3, [sp, #4]
 8002642:	1e5a      	subs	r2, r3, #1
 8002644:	9201      	str	r2, [sp, #4]
 8002646:	2b00      	cmp	r3, #0
 8002648:	d1f9      	bne.n	800263e <HAL_RCC_OscConfig+0x152>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800264a:	6823      	ldr	r3, [r4, #0]
 800264c:	075d      	lsls	r5, r3, #29
 800264e:	d4bc      	bmi.n	80025ca <HAL_RCC_OscConfig+0xde>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002650:	69e0      	ldr	r0, [r4, #28]
 8002652:	b1c0      	cbz	r0, 8002686 <HAL_RCC_OscConfig+0x19a>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002654:	4d45      	ldr	r5, [pc, #276]	; (800276c <HAL_RCC_OscConfig+0x280>)
 8002656:	686b      	ldr	r3, [r5, #4]
 8002658:	f003 030c 	and.w	r3, r3, #12
 800265c:	2b08      	cmp	r3, #8
 800265e:	f000 80d8 	beq.w	8002812 <HAL_RCC_OscConfig+0x326>
        __HAL_RCC_PLL_DISABLE();
 8002662:	2200      	movs	r2, #0
 8002664:	4b42      	ldr	r3, [pc, #264]	; (8002770 <HAL_RCC_OscConfig+0x284>)
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002666:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8002668:	661a      	str	r2, [r3, #96]	; 0x60
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800266a:	f000 80fa 	beq.w	8002862 <HAL_RCC_OscConfig+0x376>
        tickstart = HAL_GetTick();
 800266e:	f7ff f9ab 	bl	80019c8 <HAL_GetTick>
 8002672:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002674:	e004      	b.n	8002680 <HAL_RCC_OscConfig+0x194>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002676:	f7ff f9a7 	bl	80019c8 <HAL_GetTick>
 800267a:	1b00      	subs	r0, r0, r4
 800267c:	2802      	cmp	r0, #2
 800267e:	d85b      	bhi.n	8002738 <HAL_RCC_OscConfig+0x24c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002680:	682b      	ldr	r3, [r5, #0]
 8002682:	019b      	lsls	r3, r3, #6
 8002684:	d4f7      	bmi.n	8002676 <HAL_RCC_OscConfig+0x18a>
  return HAL_OK;
 8002686:	2000      	movs	r0, #0
}
 8002688:	b002      	add	sp, #8
 800268a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800268e:	6852      	ldr	r2, [r2, #4]
 8002690:	03d6      	lsls	r6, r2, #15
 8002692:	f53f af79 	bmi.w	8002588 <HAL_RCC_OscConfig+0x9c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002696:	4a35      	ldr	r2, [pc, #212]	; (800276c <HAL_RCC_OscConfig+0x280>)
 8002698:	6812      	ldr	r2, [r2, #0]
 800269a:	0795      	lsls	r5, r2, #30
 800269c:	d530      	bpl.n	8002700 <HAL_RCC_OscConfig+0x214>
 800269e:	6922      	ldr	r2, [r4, #16]
 80026a0:	2a01      	cmp	r2, #1
 80026a2:	d02d      	beq.n	8002700 <HAL_RCC_OscConfig+0x214>
        return HAL_ERROR;
 80026a4:	2001      	movs	r0, #1
}
 80026a6:	b002      	add	sp, #8
 80026a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_LSI_DISABLE();
 80026ac:	4a30      	ldr	r2, [pc, #192]	; (8002770 <HAL_RCC_OscConfig+0x284>)
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026ae:	4e2f      	ldr	r6, [pc, #188]	; (800276c <HAL_RCC_OscConfig+0x280>)
      __HAL_RCC_LSI_DISABLE();
 80026b0:	f8c2 3480 	str.w	r3, [r2, #1152]	; 0x480
      tickstart = HAL_GetTick();
 80026b4:	f7ff f988 	bl	80019c8 <HAL_GetTick>
 80026b8:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026ba:	e004      	b.n	80026c6 <HAL_RCC_OscConfig+0x1da>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026bc:	f7ff f984 	bl	80019c8 <HAL_GetTick>
 80026c0:	1b40      	subs	r0, r0, r5
 80026c2:	2802      	cmp	r0, #2
 80026c4:	d838      	bhi.n	8002738 <HAL_RCC_OscConfig+0x24c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026c6:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80026c8:	079f      	lsls	r7, r3, #30
 80026ca:	d4f7      	bmi.n	80026bc <HAL_RCC_OscConfig+0x1d0>
 80026cc:	e7bd      	b.n	800264a <HAL_RCC_OscConfig+0x15e>
      __HAL_RCC_PWR_CLK_ENABLE();
 80026ce:	69da      	ldr	r2, [r3, #28]
      pwrclkchanged = SET;
 80026d0:	2501      	movs	r5, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 80026d2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80026d6:	61da      	str	r2, [r3, #28]
 80026d8:	69db      	ldr	r3, [r3, #28]
 80026da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026de:	9300      	str	r3, [sp, #0]
 80026e0:	9b00      	ldr	r3, [sp, #0]
      pwrclkchanged = SET;
 80026e2:	e777      	b.n	80025d4 <HAL_RCC_OscConfig+0xe8>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80026e4:	684a      	ldr	r2, [r1, #4]
 80026e6:	03d0      	lsls	r0, r2, #15
 80026e8:	f57f af17 	bpl.w	800251a <HAL_RCC_OscConfig+0x2e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026ec:	4a1f      	ldr	r2, [pc, #124]	; (800276c <HAL_RCC_OscConfig+0x280>)
 80026ee:	6812      	ldr	r2, [r2, #0]
 80026f0:	0391      	lsls	r1, r2, #14
 80026f2:	f57f af3b 	bpl.w	800256c <HAL_RCC_OscConfig+0x80>
 80026f6:	6862      	ldr	r2, [r4, #4]
 80026f8:	2a00      	cmp	r2, #0
 80026fa:	f47f af37 	bne.w	800256c <HAL_RCC_OscConfig+0x80>
 80026fe:	e7d1      	b.n	80026a4 <HAL_RCC_OscConfig+0x1b8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002700:	491a      	ldr	r1, [pc, #104]	; (800276c <HAL_RCC_OscConfig+0x280>)
 8002702:	6960      	ldr	r0, [r4, #20]
 8002704:	680a      	ldr	r2, [r1, #0]
 8002706:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 800270a:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
 800270e:	600a      	str	r2, [r1, #0]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002710:	071a      	lsls	r2, r3, #28
 8002712:	f57f af58 	bpl.w	80025c6 <HAL_RCC_OscConfig+0xda>
 8002716:	e776      	b.n	8002606 <HAL_RCC_OscConfig+0x11a>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002718:	6833      	ldr	r3, [r6, #0]
 800271a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800271e:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8002720:	f7ff f952 	bl	80019c8 <HAL_GetTick>
 8002724:	4607      	mov	r7, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002726:	6833      	ldr	r3, [r6, #0]
 8002728:	05da      	lsls	r2, r3, #23
 800272a:	f53f af58 	bmi.w	80025de <HAL_RCC_OscConfig+0xf2>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800272e:	f7ff f94b 	bl	80019c8 <HAL_GetTick>
 8002732:	1bc0      	subs	r0, r0, r7
 8002734:	2864      	cmp	r0, #100	; 0x64
 8002736:	d9f6      	bls.n	8002726 <HAL_RCC_OscConfig+0x23a>
            return HAL_TIMEOUT;
 8002738:	2003      	movs	r0, #3
}
 800273a:	b002      	add	sp, #8
 800273c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002740:	4d0a      	ldr	r5, [pc, #40]	; (800276c <HAL_RCC_OscConfig+0x280>)
 8002742:	682b      	ldr	r3, [r5, #0]
 8002744:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002748:	602b      	str	r3, [r5, #0]
 800274a:	682b      	ldr	r3, [r5, #0]
 800274c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002750:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8002752:	f7ff f939 	bl	80019c8 <HAL_GetTick>
 8002756:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002758:	e004      	b.n	8002764 <HAL_RCC_OscConfig+0x278>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800275a:	f7ff f935 	bl	80019c8 <HAL_GetTick>
 800275e:	1b80      	subs	r0, r0, r6
 8002760:	2864      	cmp	r0, #100	; 0x64
 8002762:	d8e9      	bhi.n	8002738 <HAL_RCC_OscConfig+0x24c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002764:	682b      	ldr	r3, [r5, #0]
 8002766:	039b      	lsls	r3, r3, #14
 8002768:	d4f7      	bmi.n	800275a <HAL_RCC_OscConfig+0x26e>
 800276a:	e6fe      	b.n	800256a <HAL_RCC_OscConfig+0x7e>
 800276c:	40021000 	.word	0x40021000
 8002770:	42420000 	.word	0x42420000
 8002774:	40007000 	.word	0x40007000
 8002778:	20000014 	.word	0x20000014
 800277c:	10624dd3 	.word	0x10624dd3
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002780:	4e50      	ldr	r6, [pc, #320]	; (80028c4 <HAL_RCC_OscConfig+0x3d8>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002782:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002786:	6a33      	ldr	r3, [r6, #32]
 8002788:	f023 0301 	bic.w	r3, r3, #1
 800278c:	6233      	str	r3, [r6, #32]
 800278e:	6a33      	ldr	r3, [r6, #32]
 8002790:	f023 0304 	bic.w	r3, r3, #4
 8002794:	6233      	str	r3, [r6, #32]
      tickstart = HAL_GetTick();
 8002796:	f7ff f917 	bl	80019c8 <HAL_GetTick>
 800279a:	4607      	mov	r7, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800279c:	e004      	b.n	80027a8 <HAL_RCC_OscConfig+0x2bc>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800279e:	f7ff f913 	bl	80019c8 <HAL_GetTick>
 80027a2:	1bc0      	subs	r0, r0, r7
 80027a4:	4540      	cmp	r0, r8
 80027a6:	d8c7      	bhi.n	8002738 <HAL_RCC_OscConfig+0x24c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027a8:	6a33      	ldr	r3, [r6, #32]
 80027aa:	0798      	lsls	r0, r3, #30
 80027ac:	d4f7      	bmi.n	800279e <HAL_RCC_OscConfig+0x2b2>
    if (pwrclkchanged == SET)
 80027ae:	2d00      	cmp	r5, #0
 80027b0:	f43f af4e 	beq.w	8002650 <HAL_RCC_OscConfig+0x164>
      __HAL_RCC_PWR_CLK_DISABLE();
 80027b4:	4a43      	ldr	r2, [pc, #268]	; (80028c4 <HAL_RCC_OscConfig+0x3d8>)
 80027b6:	69d3      	ldr	r3, [r2, #28]
 80027b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80027bc:	61d3      	str	r3, [r2, #28]
 80027be:	e747      	b.n	8002650 <HAL_RCC_OscConfig+0x164>
        __HAL_RCC_HSI_DISABLE();
 80027c0:	4a41      	ldr	r2, [pc, #260]	; (80028c8 <HAL_RCC_OscConfig+0x3dc>)
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027c2:	4e40      	ldr	r6, [pc, #256]	; (80028c4 <HAL_RCC_OscConfig+0x3d8>)
        __HAL_RCC_HSI_DISABLE();
 80027c4:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80027c6:	f7ff f8ff 	bl	80019c8 <HAL_GetTick>
 80027ca:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027cc:	e004      	b.n	80027d8 <HAL_RCC_OscConfig+0x2ec>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027ce:	f7ff f8fb 	bl	80019c8 <HAL_GetTick>
 80027d2:	1b40      	subs	r0, r0, r5
 80027d4:	2802      	cmp	r0, #2
 80027d6:	d8af      	bhi.n	8002738 <HAL_RCC_OscConfig+0x24c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027d8:	6833      	ldr	r3, [r6, #0]
 80027da:	0799      	lsls	r1, r3, #30
 80027dc:	d4f7      	bmi.n	80027ce <HAL_RCC_OscConfig+0x2e2>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027de:	6823      	ldr	r3, [r4, #0]
 80027e0:	e6ef      	b.n	80025c2 <HAL_RCC_OscConfig+0xd6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027e2:	4a38      	ldr	r2, [pc, #224]	; (80028c4 <HAL_RCC_OscConfig+0x3d8>)
 80027e4:	6a13      	ldr	r3, [r2, #32]
 80027e6:	f043 0301 	orr.w	r3, r3, #1
 80027ea:	6213      	str	r3, [r2, #32]
      tickstart = HAL_GetTick();
 80027ec:	f7ff f8ec 	bl	80019c8 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027f0:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80027f4:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027f6:	4f33      	ldr	r7, [pc, #204]	; (80028c4 <HAL_RCC_OscConfig+0x3d8>)
 80027f8:	e004      	b.n	8002804 <HAL_RCC_OscConfig+0x318>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027fa:	f7ff f8e5 	bl	80019c8 <HAL_GetTick>
 80027fe:	1b80      	subs	r0, r0, r6
 8002800:	4540      	cmp	r0, r8
 8002802:	d899      	bhi.n	8002738 <HAL_RCC_OscConfig+0x24c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002804:	6a3b      	ldr	r3, [r7, #32]
 8002806:	079b      	lsls	r3, r3, #30
 8002808:	d5f7      	bpl.n	80027fa <HAL_RCC_OscConfig+0x30e>
    if (pwrclkchanged == SET)
 800280a:	2d00      	cmp	r5, #0
 800280c:	f43f af20 	beq.w	8002650 <HAL_RCC_OscConfig+0x164>
 8002810:	e7d0      	b.n	80027b4 <HAL_RCC_OscConfig+0x2c8>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002812:	2801      	cmp	r0, #1
 8002814:	f43f af38 	beq.w	8002688 <HAL_RCC_OscConfig+0x19c>
        pll_config = RCC->CFGR;
 8002818:	686b      	ldr	r3, [r5, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800281a:	6a22      	ldr	r2, [r4, #32]
 800281c:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 8002820:	4291      	cmp	r1, r2
 8002822:	f47f af3f 	bne.w	80026a4 <HAL_RCC_OscConfig+0x1b8>
 8002826:	6a60      	ldr	r0, [r4, #36]	; 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002828:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
  return HAL_OK;
 800282c:	1a18      	subs	r0, r3, r0
 800282e:	bf18      	it	ne
 8002830:	2001      	movne	r0, #1
 8002832:	e729      	b.n	8002688 <HAL_RCC_OscConfig+0x19c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002834:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002838:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 800283c:	681a      	ldr	r2, [r3, #0]
 800283e:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8002842:	601a      	str	r2, [r3, #0]
 8002844:	681a      	ldr	r2, [r3, #0]
 8002846:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800284a:	601a      	str	r2, [r3, #0]
 800284c:	e67f      	b.n	800254e <HAL_RCC_OscConfig+0x62>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800284e:	f042 0204 	orr.w	r2, r2, #4
 8002852:	621a      	str	r2, [r3, #32]
 8002854:	6a1a      	ldr	r2, [r3, #32]
 8002856:	f042 0201 	orr.w	r2, r2, #1
 800285a:	621a      	str	r2, [r3, #32]
 800285c:	e7c6      	b.n	80027ec <HAL_RCC_OscConfig+0x300>
    return HAL_ERROR;
 800285e:	2001      	movs	r0, #1
}
 8002860:	4770      	bx	lr
        tickstart = HAL_GetTick();
 8002862:	f7ff f8b1 	bl	80019c8 <HAL_GetTick>
 8002866:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002868:	e005      	b.n	8002876 <HAL_RCC_OscConfig+0x38a>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800286a:	f7ff f8ad 	bl	80019c8 <HAL_GetTick>
 800286e:	1b80      	subs	r0, r0, r6
 8002870:	2802      	cmp	r0, #2
 8002872:	f63f af61 	bhi.w	8002738 <HAL_RCC_OscConfig+0x24c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002876:	682b      	ldr	r3, [r5, #0]
 8002878:	0199      	lsls	r1, r3, #6
 800287a:	d4f6      	bmi.n	800286a <HAL_RCC_OscConfig+0x37e>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800287c:	6a23      	ldr	r3, [r4, #32]
 800287e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002882:	d105      	bne.n	8002890 <HAL_RCC_OscConfig+0x3a4>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002884:	686a      	ldr	r2, [r5, #4]
 8002886:	68a1      	ldr	r1, [r4, #8]
 8002888:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800288c:	430a      	orrs	r2, r1
 800288e:	606a      	str	r2, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8002890:	2001      	movs	r0, #1
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002892:	4d0c      	ldr	r5, [pc, #48]	; (80028c4 <HAL_RCC_OscConfig+0x3d8>)
 8002894:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8002896:	686a      	ldr	r2, [r5, #4]
 8002898:	430b      	orrs	r3, r1
 800289a:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
        __HAL_RCC_PLL_ENABLE();
 800289e:	490a      	ldr	r1, [pc, #40]	; (80028c8 <HAL_RCC_OscConfig+0x3dc>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80028a0:	4313      	orrs	r3, r2
 80028a2:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 80028a4:	6608      	str	r0, [r1, #96]	; 0x60
        tickstart = HAL_GetTick();
 80028a6:	f7ff f88f 	bl	80019c8 <HAL_GetTick>
 80028aa:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80028ac:	e005      	b.n	80028ba <HAL_RCC_OscConfig+0x3ce>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028ae:	f7ff f88b 	bl	80019c8 <HAL_GetTick>
 80028b2:	1b00      	subs	r0, r0, r4
 80028b4:	2802      	cmp	r0, #2
 80028b6:	f63f af3f 	bhi.w	8002738 <HAL_RCC_OscConfig+0x24c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80028ba:	682b      	ldr	r3, [r5, #0]
 80028bc:	019a      	lsls	r2, r3, #6
 80028be:	d5f6      	bpl.n	80028ae <HAL_RCC_OscConfig+0x3c2>
 80028c0:	e6e1      	b.n	8002686 <HAL_RCC_OscConfig+0x19a>
 80028c2:	bf00      	nop
 80028c4:	40021000 	.word	0x40021000
 80028c8:	42420000 	.word	0x42420000

080028cc <HAL_RCC_GetSysClockFreq>:
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80028cc:	f240 2c01 	movw	ip, #513	; 0x201
{
 80028d0:	b500      	push	{lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80028d2:	4b18      	ldr	r3, [pc, #96]	; (8002934 <HAL_RCC_GetSysClockFreq+0x68>)
{
 80028d4:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80028d6:	f10d 0e18 	add.w	lr, sp, #24
 80028da:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80028dc:	e90e 000f 	stmdb	lr, {r0, r1, r2, r3}
  tmpreg = RCC->CFGR;
 80028e0:	4a15      	ldr	r2, [pc, #84]	; (8002938 <HAL_RCC_GetSysClockFreq+0x6c>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80028e2:	f8ad c004 	strh.w	ip, [sp, #4]
  tmpreg = RCC->CFGR;
 80028e6:	6853      	ldr	r3, [r2, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 80028e8:	f003 010c 	and.w	r1, r3, #12
 80028ec:	2908      	cmp	r1, #8
 80028ee:	d003      	beq.n	80028f8 <HAL_RCC_GetSysClockFreq+0x2c>
      sysclockfreq = HSE_VALUE;
 80028f0:	4812      	ldr	r0, [pc, #72]	; (800293c <HAL_RCC_GetSysClockFreq+0x70>)
}
 80028f2:	b007      	add	sp, #28
 80028f4:	f85d fb04 	ldr.w	pc, [sp], #4
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80028f8:	f3c3 4183 	ubfx	r1, r3, #18, #4
 80028fc:	3118      	adds	r1, #24
 80028fe:	4469      	add	r1, sp
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002900:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002902:	f811 0c10 	ldrb.w	r0, [r1, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002906:	d50e      	bpl.n	8002926 <HAL_RCC_GetSysClockFreq+0x5a>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002908:	6853      	ldr	r3, [r2, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800290a:	4a0c      	ldr	r2, [pc, #48]	; (800293c <HAL_RCC_GetSysClockFreq+0x70>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800290c:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002910:	fb02 f000 	mul.w	r0, r2, r0
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002914:	3318      	adds	r3, #24
 8002916:	446b      	add	r3, sp
 8002918:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800291c:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8002920:	b007      	add	sp, #28
 8002922:	f85d fb04 	ldr.w	pc, [sp], #4
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002926:	4b06      	ldr	r3, [pc, #24]	; (8002940 <HAL_RCC_GetSysClockFreq+0x74>)
 8002928:	fb03 f000 	mul.w	r0, r3, r0
}
 800292c:	b007      	add	sp, #28
 800292e:	f85d fb04 	ldr.w	pc, [sp], #4
 8002932:	bf00      	nop
 8002934:	08007120 	.word	0x08007120
 8002938:	40021000 	.word	0x40021000
 800293c:	007a1200 	.word	0x007a1200
 8002940:	003d0900 	.word	0x003d0900

08002944 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8002944:	2800      	cmp	r0, #0
 8002946:	f000 808c 	beq.w	8002a62 <HAL_RCC_ClockConfig+0x11e>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800294a:	4a49      	ldr	r2, [pc, #292]	; (8002a70 <HAL_RCC_ClockConfig+0x12c>)
{
 800294c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002950:	6813      	ldr	r3, [r2, #0]
 8002952:	4604      	mov	r4, r0
 8002954:	f003 0307 	and.w	r3, r3, #7
 8002958:	428b      	cmp	r3, r1
 800295a:	460d      	mov	r5, r1
 800295c:	d20c      	bcs.n	8002978 <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800295e:	6813      	ldr	r3, [r2, #0]
 8002960:	f023 0307 	bic.w	r3, r3, #7
 8002964:	430b      	orrs	r3, r1
 8002966:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002968:	6813      	ldr	r3, [r2, #0]
 800296a:	f003 0307 	and.w	r3, r3, #7
 800296e:	428b      	cmp	r3, r1
 8002970:	d002      	beq.n	8002978 <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 8002972:	2001      	movs	r0, #1
}
 8002974:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002978:	6823      	ldr	r3, [r4, #0]
 800297a:	0798      	lsls	r0, r3, #30
 800297c:	d514      	bpl.n	80029a8 <HAL_RCC_ClockConfig+0x64>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800297e:	0759      	lsls	r1, r3, #29
 8002980:	d504      	bpl.n	800298c <HAL_RCC_ClockConfig+0x48>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002982:	493c      	ldr	r1, [pc, #240]	; (8002a74 <HAL_RCC_ClockConfig+0x130>)
 8002984:	684a      	ldr	r2, [r1, #4]
 8002986:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 800298a:	604a      	str	r2, [r1, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800298c:	071a      	lsls	r2, r3, #28
 800298e:	d504      	bpl.n	800299a <HAL_RCC_ClockConfig+0x56>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002990:	4938      	ldr	r1, [pc, #224]	; (8002a74 <HAL_RCC_ClockConfig+0x130>)
 8002992:	684a      	ldr	r2, [r1, #4]
 8002994:	f442 5260 	orr.w	r2, r2, #14336	; 0x3800
 8002998:	604a      	str	r2, [r1, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800299a:	4936      	ldr	r1, [pc, #216]	; (8002a74 <HAL_RCC_ClockConfig+0x130>)
 800299c:	68a0      	ldr	r0, [r4, #8]
 800299e:	684a      	ldr	r2, [r1, #4]
 80029a0:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80029a4:	4302      	orrs	r2, r0
 80029a6:	604a      	str	r2, [r1, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80029a8:	07df      	lsls	r7, r3, #31
 80029aa:	d520      	bpl.n	80029ee <HAL_RCC_ClockConfig+0xaa>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029ac:	6862      	ldr	r2, [r4, #4]
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029ae:	4b31      	ldr	r3, [pc, #196]	; (8002a74 <HAL_RCC_ClockConfig+0x130>)
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029b0:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029b2:	681b      	ldr	r3, [r3, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029b4:	d057      	beq.n	8002a66 <HAL_RCC_ClockConfig+0x122>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80029b6:	2a02      	cmp	r2, #2
 80029b8:	d050      	beq.n	8002a5c <HAL_RCC_ClockConfig+0x118>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029ba:	0799      	lsls	r1, r3, #30
 80029bc:	d5d9      	bpl.n	8002972 <HAL_RCC_ClockConfig+0x2e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80029be:	4e2d      	ldr	r6, [pc, #180]	; (8002a74 <HAL_RCC_ClockConfig+0x130>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029c0:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80029c4:	6873      	ldr	r3, [r6, #4]
 80029c6:	f023 0303 	bic.w	r3, r3, #3
 80029ca:	4313      	orrs	r3, r2
 80029cc:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 80029ce:	f7fe fffb 	bl	80019c8 <HAL_GetTick>
 80029d2:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029d4:	e004      	b.n	80029e0 <HAL_RCC_ClockConfig+0x9c>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029d6:	f7fe fff7 	bl	80019c8 <HAL_GetTick>
 80029da:	1bc0      	subs	r0, r0, r7
 80029dc:	4540      	cmp	r0, r8
 80029de:	d845      	bhi.n	8002a6c <HAL_RCC_ClockConfig+0x128>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029e0:	6873      	ldr	r3, [r6, #4]
 80029e2:	6862      	ldr	r2, [r4, #4]
 80029e4:	f003 030c 	and.w	r3, r3, #12
 80029e8:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80029ec:	d1f3      	bne.n	80029d6 <HAL_RCC_ClockConfig+0x92>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80029ee:	4a20      	ldr	r2, [pc, #128]	; (8002a70 <HAL_RCC_ClockConfig+0x12c>)
 80029f0:	6813      	ldr	r3, [r2, #0]
 80029f2:	f003 0307 	and.w	r3, r3, #7
 80029f6:	42ab      	cmp	r3, r5
 80029f8:	d909      	bls.n	8002a0e <HAL_RCC_ClockConfig+0xca>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029fa:	6813      	ldr	r3, [r2, #0]
 80029fc:	f023 0307 	bic.w	r3, r3, #7
 8002a00:	432b      	orrs	r3, r5
 8002a02:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a04:	6813      	ldr	r3, [r2, #0]
 8002a06:	f003 0307 	and.w	r3, r3, #7
 8002a0a:	42ab      	cmp	r3, r5
 8002a0c:	d1b1      	bne.n	8002972 <HAL_RCC_ClockConfig+0x2e>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a0e:	6823      	ldr	r3, [r4, #0]
 8002a10:	075a      	lsls	r2, r3, #29
 8002a12:	d506      	bpl.n	8002a22 <HAL_RCC_ClockConfig+0xde>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a14:	4917      	ldr	r1, [pc, #92]	; (8002a74 <HAL_RCC_ClockConfig+0x130>)
 8002a16:	68e0      	ldr	r0, [r4, #12]
 8002a18:	684a      	ldr	r2, [r1, #4]
 8002a1a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002a1e:	4302      	orrs	r2, r0
 8002a20:	604a      	str	r2, [r1, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a22:	071b      	lsls	r3, r3, #28
 8002a24:	d507      	bpl.n	8002a36 <HAL_RCC_ClockConfig+0xf2>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002a26:	4a13      	ldr	r2, [pc, #76]	; (8002a74 <HAL_RCC_ClockConfig+0x130>)
 8002a28:	6921      	ldr	r1, [r4, #16]
 8002a2a:	6853      	ldr	r3, [r2, #4]
 8002a2c:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8002a30:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002a34:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002a36:	f7ff ff49 	bl	80028cc <HAL_RCC_GetSysClockFreq>
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	4a0d      	ldr	r2, [pc, #52]	; (8002a74 <HAL_RCC_ClockConfig+0x130>)
 8002a3e:	490e      	ldr	r1, [pc, #56]	; (8002a78 <HAL_RCC_ClockConfig+0x134>)
 8002a40:	6852      	ldr	r2, [r2, #4]
  HAL_InitTick(uwTickPrio);
 8002a42:	480e      	ldr	r0, [pc, #56]	; (8002a7c <HAL_RCC_ClockConfig+0x138>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002a44:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8002a48:	5c89      	ldrb	r1, [r1, r2]
 8002a4a:	4a0d      	ldr	r2, [pc, #52]	; (8002a80 <HAL_RCC_ClockConfig+0x13c>)
 8002a4c:	40cb      	lsrs	r3, r1
  HAL_InitTick(uwTickPrio);
 8002a4e:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002a50:	6013      	str	r3, [r2, #0]
  HAL_InitTick(uwTickPrio);
 8002a52:	f7fe ff77 	bl	8001944 <HAL_InitTick>
  return HAL_OK;
 8002a56:	2000      	movs	r0, #0
}
 8002a58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a5c:	0198      	lsls	r0, r3, #6
 8002a5e:	d4ae      	bmi.n	80029be <HAL_RCC_ClockConfig+0x7a>
 8002a60:	e787      	b.n	8002972 <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 8002a62:	2001      	movs	r0, #1
}
 8002a64:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a66:	039e      	lsls	r6, r3, #14
 8002a68:	d4a9      	bmi.n	80029be <HAL_RCC_ClockConfig+0x7a>
 8002a6a:	e782      	b.n	8002972 <HAL_RCC_ClockConfig+0x2e>
        return HAL_TIMEOUT;
 8002a6c:	2003      	movs	r0, #3
 8002a6e:	e781      	b.n	8002974 <HAL_RCC_ClockConfig+0x30>
 8002a70:	40022000 	.word	0x40022000
 8002a74:	40021000 	.word	0x40021000
 8002a78:	08007108 	.word	0x08007108
 8002a7c:	2000001c 	.word	0x2000001c
 8002a80:	20000014 	.word	0x20000014

08002a84 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002a84:	4b04      	ldr	r3, [pc, #16]	; (8002a98 <HAL_RCC_GetPCLK1Freq+0x14>)
  return SystemCoreClock;
 8002a86:	4a05      	ldr	r2, [pc, #20]	; (8002a9c <HAL_RCC_GetPCLK1Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	4905      	ldr	r1, [pc, #20]	; (8002aa0 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8002a8c:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8002a90:	5ccb      	ldrb	r3, [r1, r3]
 8002a92:	6810      	ldr	r0, [r2, #0]
}
 8002a94:	40d8      	lsrs	r0, r3
 8002a96:	4770      	bx	lr
 8002a98:	40021000 	.word	0x40021000
 8002a9c:	20000014 	.word	0x20000014
 8002aa0:	08007118 	.word	0x08007118

08002aa4 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002aa4:	4b04      	ldr	r3, [pc, #16]	; (8002ab8 <HAL_RCC_GetPCLK2Freq+0x14>)
  return SystemCoreClock;
 8002aa6:	4a05      	ldr	r2, [pc, #20]	; (8002abc <HAL_RCC_GetPCLK2Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002aa8:	685b      	ldr	r3, [r3, #4]
 8002aaa:	4905      	ldr	r1, [pc, #20]	; (8002ac0 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8002aac:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8002ab0:	5ccb      	ldrb	r3, [r1, r3]
 8002ab2:	6810      	ldr	r0, [r2, #0]
}
 8002ab4:	40d8      	lsrs	r0, r3
 8002ab6:	4770      	bx	lr
 8002ab8:	40021000 	.word	0x40021000
 8002abc:	20000014 	.word	0x20000014
 8002ac0:	08007118 	.word	0x08007118

08002ac4 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002ac4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002ac8:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002aca:	6800      	ldr	r0, [r0, #0]
{
 8002acc:	b082      	sub	sp, #8
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002ace:	07c1      	lsls	r1, r0, #31
 8002ad0:	d52c      	bpl.n	8002b2c <HAL_RCCEx_PeriphCLKConfig+0x68>
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ad2:	4b3a      	ldr	r3, [pc, #232]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 8002ad4:	69da      	ldr	r2, [r3, #28]
 8002ad6:	00d2      	lsls	r2, r2, #3
 8002ad8:	d53f      	bpl.n	8002b5a <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ada:	4d39      	ldr	r5, [pc, #228]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0xfc>)
    FlagStatus pwrclkchanged = RESET;
 8002adc:	2600      	movs	r6, #0
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ade:	682b      	ldr	r3, [r5, #0]
 8002ae0:	05df      	lsls	r7, r3, #23
 8002ae2:	d548      	bpl.n	8002b76 <HAL_RCCEx_PeriphCLKConfig+0xb2>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002ae4:	4d35      	ldr	r5, [pc, #212]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 8002ae6:	6a2b      	ldr	r3, [r5, #32]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002ae8:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8002aec:	d011      	beq.n	8002b12 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8002aee:	6861      	ldr	r1, [r4, #4]
 8002af0:	f401 7240 	and.w	r2, r1, #768	; 0x300
 8002af4:	429a      	cmp	r2, r3
 8002af6:	d00d      	beq.n	8002b14 <HAL_RCCEx_PeriphCLKConfig+0x50>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002af8:	2701      	movs	r7, #1
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002afa:	2000      	movs	r0, #0
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002afc:	6a2b      	ldr	r3, [r5, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 8002afe:	4a31      	ldr	r2, [pc, #196]	; (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x100>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002b00:	f423 7140 	bic.w	r1, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 8002b04:	f8c2 7440 	str.w	r7, [r2, #1088]	; 0x440
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002b08:	f8c2 0440 	str.w	r0, [r2, #1088]	; 0x440
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002b0c:	6229      	str	r1, [r5, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002b0e:	07d9      	lsls	r1, r3, #31
 8002b10:	d444      	bmi.n	8002b9c <HAL_RCCEx_PeriphCLKConfig+0xd8>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002b12:	6861      	ldr	r1, [r4, #4]
 8002b14:	4a29      	ldr	r2, [pc, #164]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 8002b16:	6a13      	ldr	r3, [r2, #32]
 8002b18:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b1c:	430b      	orrs	r3, r1
 8002b1e:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002b20:	b11e      	cbz	r6, 8002b2a <HAL_RCCEx_PeriphCLKConfig+0x66>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b22:	69d3      	ldr	r3, [r2, #28]
 8002b24:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b28:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002b2a:	6820      	ldr	r0, [r4, #0]
 8002b2c:	0783      	lsls	r3, r0, #30
 8002b2e:	d506      	bpl.n	8002b3e <HAL_RCCEx_PeriphCLKConfig+0x7a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002b30:	4922      	ldr	r1, [pc, #136]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 8002b32:	68a3      	ldr	r3, [r4, #8]
 8002b34:	684a      	ldr	r2, [r1, #4]
 8002b36:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8002b3a:	431a      	orrs	r2, r3
 8002b3c:	604a      	str	r2, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002b3e:	f010 0010 	ands.w	r0, r0, #16
 8002b42:	d007      	beq.n	8002b54 <HAL_RCCEx_PeriphCLKConfig+0x90>
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002b44:	2000      	movs	r0, #0
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002b46:	4a1d      	ldr	r2, [pc, #116]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 8002b48:	68e1      	ldr	r1, [r4, #12]
 8002b4a:	6853      	ldr	r3, [r2, #4]
 8002b4c:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002b50:	430b      	orrs	r3, r1
 8002b52:	6053      	str	r3, [r2, #4]
}
 8002b54:	b002      	add	sp, #8
 8002b56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b5a:	69da      	ldr	r2, [r3, #28]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b5c:	4d18      	ldr	r5, [pc, #96]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0xfc>)
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b5e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002b62:	61da      	str	r2, [r3, #28]
 8002b64:	69db      	ldr	r3, [r3, #28]
      pwrclkchanged = SET;
 8002b66:	2601      	movs	r6, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b6c:	9301      	str	r3, [sp, #4]
 8002b6e:	9b01      	ldr	r3, [sp, #4]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b70:	682b      	ldr	r3, [r5, #0]
 8002b72:	05df      	lsls	r7, r3, #23
 8002b74:	d4b6      	bmi.n	8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x20>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b76:	682b      	ldr	r3, [r5, #0]
 8002b78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b7c:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8002b7e:	f7fe ff23 	bl	80019c8 <HAL_GetTick>
 8002b82:	4607      	mov	r7, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b84:	682b      	ldr	r3, [r5, #0]
 8002b86:	05d8      	lsls	r0, r3, #23
 8002b88:	d4ac      	bmi.n	8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x20>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b8a:	f7fe ff1d 	bl	80019c8 <HAL_GetTick>
 8002b8e:	1bc3      	subs	r3, r0, r7
 8002b90:	2b64      	cmp	r3, #100	; 0x64
 8002b92:	d9f7      	bls.n	8002b84 <HAL_RCCEx_PeriphCLKConfig+0xc0>
          return HAL_TIMEOUT;
 8002b94:	2003      	movs	r0, #3
}
 8002b96:	b002      	add	sp, #8
 8002b98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        tickstart = HAL_GetTick();
 8002b9c:	f7fe ff14 	bl	80019c8 <HAL_GetTick>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ba0:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8002ba4:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ba6:	e004      	b.n	8002bb2 <HAL_RCCEx_PeriphCLKConfig+0xee>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ba8:	f7fe ff0e 	bl	80019c8 <HAL_GetTick>
 8002bac:	1bc0      	subs	r0, r0, r7
 8002bae:	4540      	cmp	r0, r8
 8002bb0:	d8f0      	bhi.n	8002b94 <HAL_RCCEx_PeriphCLKConfig+0xd0>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bb2:	6a2b      	ldr	r3, [r5, #32]
 8002bb4:	079a      	lsls	r2, r3, #30
 8002bb6:	d5f7      	bpl.n	8002ba8 <HAL_RCCEx_PeriphCLKConfig+0xe4>
 8002bb8:	e7ab      	b.n	8002b12 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8002bba:	bf00      	nop
 8002bbc:	40021000 	.word	0x40021000
 8002bc0:	40007000 	.word	0x40007000
 8002bc4:	42420000 	.word	0x42420000

08002bc8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8002bc8:	4684      	mov	ip, r0
 8002bca:	b500      	push	{lr}
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002bcc:	4b36      	ldr	r3, [pc, #216]	; (8002ca8 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>)
{
 8002bce:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002bd0:	f10d 0e18 	add.w	lr, sp, #24
 8002bd4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002bd6:	e90e 000f 	stmdb	lr, {r0, r1, r2, r3}
{
 8002bda:	4660      	mov	r0, ip
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002bdc:	f240 2301 	movw	r3, #513	; 0x201
  uint32_t temp_reg = 0U, frequency = 0U;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8002be0:	2802      	cmp	r0, #2
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002be2:	f8ad 3004 	strh.w	r3, [sp, #4]
  switch (PeriphClk)
 8002be6:	d007      	beq.n	8002bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x30>
 8002be8:	2810      	cmp	r0, #16
 8002bea:	d02a      	beq.n	8002c42 <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
 8002bec:	2801      	cmp	r0, #1
 8002bee:	d010      	beq.n	8002c12 <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
  uint32_t temp_reg = 0U, frequency = 0U;
 8002bf0:	2000      	movs	r0, #0
    {
      break;
    }
  }
  return (frequency);
}
 8002bf2:	b007      	add	sp, #28
 8002bf4:	f85d fb04 	ldr.w	pc, [sp], #4
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8002bf8:	f7ff ff54 	bl	8002aa4 <HAL_RCC_GetPCLK2Freq>
 8002bfc:	4b2b      	ldr	r3, [pc, #172]	; (8002cac <HAL_RCCEx_GetPeriphCLKFreq+0xe4>)
 8002bfe:	685b      	ldr	r3, [r3, #4]
 8002c00:	f3c3 3381 	ubfx	r3, r3, #14, #2
 8002c04:	3301      	adds	r3, #1
 8002c06:	005b      	lsls	r3, r3, #1
 8002c08:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8002c0c:	b007      	add	sp, #28
 8002c0e:	f85d fb04 	ldr.w	pc, [sp], #4
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8002c12:	f240 3202 	movw	r2, #770	; 0x302
      temp_reg = RCC->BDCR;
 8002c16:	4925      	ldr	r1, [pc, #148]	; (8002cac <HAL_RCCEx_GetPeriphCLKFreq+0xe4>)
 8002c18:	6a0b      	ldr	r3, [r1, #32]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8002c1a:	401a      	ands	r2, r3
 8002c1c:	f5b2 7f81 	cmp.w	r2, #258	; 0x102
 8002c20:	d033      	beq.n	8002c8a <HAL_RCCEx_GetPeriphCLKFreq+0xc2>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8002c22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c26:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c2a:	d031      	beq.n	8002c90 <HAL_RCCEx_GetPeriphCLKFreq+0xc8>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8002c2c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002c30:	d1de      	bne.n	8002bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x28>
        frequency = HSE_VALUE / 128U;
 8002c32:	f24f 4324 	movw	r3, #62500	; 0xf424
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8002c36:	6808      	ldr	r0, [r1, #0]
        frequency = HSE_VALUE / 128U;
 8002c38:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
 8002c3c:	bf18      	it	ne
 8002c3e:	4618      	movne	r0, r3
 8002c40:	e7d7      	b.n	8002bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x2a>
      temp_reg = RCC->CFGR;
 8002c42:	4b1a      	ldr	r3, [pc, #104]	; (8002cac <HAL_RCCEx_GetPeriphCLKFreq+0xe4>)
 8002c44:	685a      	ldr	r2, [r3, #4]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8002c46:	6818      	ldr	r0, [r3, #0]
 8002c48:	f010 7080 	ands.w	r0, r0, #16777216	; 0x1000000
 8002c4c:	d0d1      	beq.n	8002bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x2a>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002c4e:	f3c2 4183 	ubfx	r1, r2, #18, #4
 8002c52:	3118      	adds	r1, #24
 8002c54:	4469      	add	r1, sp
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002c56:	03d2      	lsls	r2, r2, #15
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002c58:	f811 0c10 	ldrb.w	r0, [r1, #-16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002c5c:	d520      	bpl.n	8002ca0 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002c5e:	685b      	ldr	r3, [r3, #4]
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8002c60:	4a13      	ldr	r2, [pc, #76]	; (8002cb0 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>)
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002c62:	f3c3 4340 	ubfx	r3, r3, #17, #1
 8002c66:	3318      	adds	r3, #24
 8002c68:	446b      	add	r3, sp
 8002c6a:	f813 3c14 	ldrb.w	r3, [r3, #-20]
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8002c6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c72:	fb03 f000 	mul.w	r0, r3, r0
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8002c76:	4b0d      	ldr	r3, [pc, #52]	; (8002cac <HAL_RCCEx_GetPeriphCLKFreq+0xe4>)
 8002c78:	685b      	ldr	r3, [r3, #4]
 8002c7a:	025b      	lsls	r3, r3, #9
 8002c7c:	d4b9      	bmi.n	8002bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x2a>
          frequency = (pllclk * 2) / 3;
 8002c7e:	4b0d      	ldr	r3, [pc, #52]	; (8002cb4 <HAL_RCCEx_GetPeriphCLKFreq+0xec>)
 8002c80:	0040      	lsls	r0, r0, #1
 8002c82:	fba3 3000 	umull	r3, r0, r3, r0
 8002c86:	0840      	lsrs	r0, r0, #1
 8002c88:	e7b3      	b.n	8002bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x2a>
        frequency = LSE_VALUE;
 8002c8a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8002c8e:	e7b0      	b.n	8002bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x2a>
        frequency = LSI_VALUE;
 8002c90:	f649 4340 	movw	r3, #40000	; 0x9c40
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8002c94:	6a48      	ldr	r0, [r1, #36]	; 0x24
        frequency = LSI_VALUE;
 8002c96:	f010 0002 	ands.w	r0, r0, #2
 8002c9a:	bf18      	it	ne
 8002c9c:	4618      	movne	r0, r3
 8002c9e:	e7a8      	b.n	8002bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x2a>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002ca0:	4b05      	ldr	r3, [pc, #20]	; (8002cb8 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>)
 8002ca2:	fb03 f000 	mul.w	r0, r3, r0
 8002ca6:	e7e6      	b.n	8002c76 <HAL_RCCEx_GetPeriphCLKFreq+0xae>
 8002ca8:	08007120 	.word	0x08007120
 8002cac:	40021000 	.word	0x40021000
 8002cb0:	007a1200 	.word	0x007a1200
 8002cb4:	aaaaaaab 	.word	0xaaaaaaab
 8002cb8:	003d0900 	.word	0x003d0900

08002cbc <RTC_WeekDayNum>:
{
  uint32_t year = 0U, weekday = 0U;

  year = 2000U + nYear;

  if (nMonth < 3U)
 8002cbc:	2902      	cmp	r1, #2
{
 8002cbe:	b410      	push	{r4}
  year = 2000U + nYear;
 8002cc0:	f500 63fa 	add.w	r3, r0, #2000	; 0x7d0
  if (nMonth < 3U)
 8002cc4:	d822      	bhi.n	8002d0c <RTC_WeekDayNum+0x50>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 8002cc6:	eb01 0441 	add.w	r4, r1, r1, lsl #1
 8002cca:	ebc1 01c4 	rsb	r1, r1, r4, lsl #3
 8002cce:	4c18      	ldr	r4, [pc, #96]	; (8002d30 <RTC_WeekDayNum+0x74>)
 8002cd0:	f200 70cf 	addw	r0, r0, #1999	; 0x7cf
 8002cd4:	fba4 4101 	umull	r4, r1, r4, r1
 8002cd8:	4c16      	ldr	r4, [pc, #88]	; (8002d34 <RTC_WeekDayNum+0x78>)
 8002cda:	3204      	adds	r2, #4
 8002cdc:	fba4 4c00 	umull	r4, ip, r4, r0
 8002ce0:	441a      	add	r2, r3
 8002ce2:	eb02 0151 	add.w	r1, r2, r1, lsr #1
 8002ce6:	eb01 0190 	add.w	r1, r1, r0, lsr #2
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 8002cea:	4813      	ldr	r0, [pc, #76]	; (8002d38 <RTC_WeekDayNum+0x7c>)
 8002cec:	eb01 11dc 	add.w	r1, r1, ip, lsr #7
 8002cf0:	eba1 115c 	sub.w	r1, r1, ip, lsr #5
 8002cf4:	fba0 3001 	umull	r3, r0, r0, r1
 8002cf8:	1a0b      	subs	r3, r1, r0
 8002cfa:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8002cfe:	0880      	lsrs	r0, r0, #2
 8002d00:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 8002d04:	1a08      	subs	r0, r1, r0
  }

  return (uint8_t)weekday;
}
 8002d06:	b2c0      	uxtb	r0, r0
 8002d08:	bc10      	pop	{r4}
 8002d0a:	4770      	bx	lr
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 8002d0c:	4808      	ldr	r0, [pc, #32]	; (8002d30 <RTC_WeekDayNum+0x74>)
 8002d0e:	eb01 0441 	add.w	r4, r1, r1, lsl #1
 8002d12:	ebc1 01c4 	rsb	r1, r1, r4, lsl #3
 8002d16:	fba0 0101 	umull	r0, r1, r0, r1
 8002d1a:	3202      	adds	r2, #2
 8002d1c:	4805      	ldr	r0, [pc, #20]	; (8002d34 <RTC_WeekDayNum+0x78>)
 8002d1e:	441a      	add	r2, r3
 8002d20:	eb02 0151 	add.w	r1, r2, r1, lsr #1
 8002d24:	fba0 0c03 	umull	r0, ip, r0, r3
 8002d28:	eb01 0193 	add.w	r1, r1, r3, lsr #2
 8002d2c:	e7dd      	b.n	8002cea <RTC_WeekDayNum+0x2e>
 8002d2e:	bf00      	nop
 8002d30:	38e38e39 	.word	0x38e38e39
 8002d34:	51eb851f 	.word	0x51eb851f
 8002d38:	24924925 	.word	0x24924925

08002d3c <RTC_WriteAlarmCounter>:
{
 8002d3c:	b570      	push	{r4, r5, r6, lr}
 8002d3e:	4604      	mov	r4, r0
 8002d40:	460e      	mov	r6, r1
  tickstart = HAL_GetTick();
 8002d42:	f7fe fe41 	bl	80019c8 <HAL_GetTick>
 8002d46:	4605      	mov	r5, r0
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8002d48:	e005      	b.n	8002d56 <RTC_WriteAlarmCounter+0x1a>
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8002d4a:	f7fe fe3d 	bl	80019c8 <HAL_GetTick>
 8002d4e:	1b40      	subs	r0, r0, r5
 8002d50:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8002d54:	d81f      	bhi.n	8002d96 <RTC_WriteAlarmCounter+0x5a>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8002d56:	6823      	ldr	r3, [r4, #0]
 8002d58:	685a      	ldr	r2, [r3, #4]
 8002d5a:	0692      	lsls	r2, r2, #26
 8002d5c:	d5f5      	bpl.n	8002d4a <RTC_WriteAlarmCounter+0xe>
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002d5e:	685a      	ldr	r2, [r3, #4]
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 8002d60:	0c31      	lsrs	r1, r6, #16
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002d62:	f042 0210 	orr.w	r2, r2, #16
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 8002d66:	b2b6      	uxth	r6, r6
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002d68:	605a      	str	r2, [r3, #4]
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 8002d6a:	6219      	str	r1, [r3, #32]
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 8002d6c:	625e      	str	r6, [r3, #36]	; 0x24
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002d6e:	685a      	ldr	r2, [r3, #4]
 8002d70:	f022 0210 	bic.w	r2, r2, #16
 8002d74:	605a      	str	r2, [r3, #4]
  tickstart = HAL_GetTick();
 8002d76:	f7fe fe27 	bl	80019c8 <HAL_GetTick>
 8002d7a:	4605      	mov	r5, r0
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8002d7c:	e005      	b.n	8002d8a <RTC_WriteAlarmCounter+0x4e>
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8002d7e:	f7fe fe23 	bl	80019c8 <HAL_GetTick>
 8002d82:	1b40      	subs	r0, r0, r5
 8002d84:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8002d88:	d805      	bhi.n	8002d96 <RTC_WriteAlarmCounter+0x5a>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8002d8a:	6823      	ldr	r3, [r4, #0]
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	069b      	lsls	r3, r3, #26
 8002d90:	d5f5      	bpl.n	8002d7e <RTC_WriteAlarmCounter+0x42>
  HAL_StatusTypeDef status = HAL_OK;
 8002d92:	2000      	movs	r0, #0
}
 8002d94:	bd70      	pop	{r4, r5, r6, pc}
    status = HAL_ERROR;
 8002d96:	2001      	movs	r0, #1
}
 8002d98:	bd70      	pop	{r4, r5, r6, pc}
 8002d9a:	bf00      	nop

08002d9c <HAL_RTC_Init>:
  if (hrtc == NULL)
 8002d9c:	2800      	cmp	r0, #0
 8002d9e:	d075      	beq.n	8002e8c <HAL_RTC_Init+0xf0>
{
 8002da0:	b538      	push	{r3, r4, r5, lr}
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8002da2:	7c43      	ldrb	r3, [r0, #17]
 8002da4:	4604      	mov	r4, r0
 8002da6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d062      	beq.n	8002e74 <HAL_RTC_Init+0xd8>
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002dae:	2302      	movs	r3, #2
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 8002db0:	6822      	ldr	r2, [r4, #0]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002db2:	7463      	strb	r3, [r4, #17]
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 8002db4:	6853      	ldr	r3, [r2, #4]
 8002db6:	f023 0308 	bic.w	r3, r3, #8
 8002dba:	6053      	str	r3, [r2, #4]
  tickstart = HAL_GetTick();
 8002dbc:	f7fe fe04 	bl	80019c8 <HAL_GetTick>
 8002dc0:	4605      	mov	r5, r0
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8002dc2:	e005      	b.n	8002dd0 <HAL_RTC_Init+0x34>
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8002dc4:	f7fe fe00 	bl	80019c8 <HAL_GetTick>
 8002dc8:	1b40      	subs	r0, r0, r5
 8002dca:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8002dce:	d84d      	bhi.n	8002e6c <HAL_RTC_Init+0xd0>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8002dd0:	6823      	ldr	r3, [r4, #0]
 8002dd2:	685b      	ldr	r3, [r3, #4]
 8002dd4:	0718      	lsls	r0, r3, #28
 8002dd6:	d5f5      	bpl.n	8002dc4 <HAL_RTC_Init+0x28>
  tickstart = HAL_GetTick();
 8002dd8:	f7fe fdf6 	bl	80019c8 <HAL_GetTick>
 8002ddc:	4605      	mov	r5, r0
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8002dde:	e005      	b.n	8002dec <HAL_RTC_Init+0x50>
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8002de0:	f7fe fdf2 	bl	80019c8 <HAL_GetTick>
 8002de4:	1b40      	subs	r0, r0, r5
 8002de6:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8002dea:	d83f      	bhi.n	8002e6c <HAL_RTC_Init+0xd0>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8002dec:	6823      	ldr	r3, [r4, #0]
 8002dee:	685a      	ldr	r2, [r3, #4]
 8002df0:	0691      	lsls	r1, r2, #26
 8002df2:	d5f5      	bpl.n	8002de0 <HAL_RTC_Init+0x44>
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002df4:	6859      	ldr	r1, [r3, #4]
    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8002df6:	68a0      	ldr	r0, [r4, #8]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002df8:	f041 0110 	orr.w	r1, r1, #16
 8002dfc:	6059      	str	r1, [r3, #4]
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 8002dfe:	6859      	ldr	r1, [r3, #4]
 8002e00:	f021 0107 	bic.w	r1, r1, #7
 8002e04:	6059      	str	r1, [r3, #4]
    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8002e06:	b120      	cbz	r0, 8002e12 <HAL_RTC_Init+0x76>
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 8002e08:	4921      	ldr	r1, [pc, #132]	; (8002e90 <HAL_RTC_Init+0xf4>)
 8002e0a:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8002e0c:	f022 0201 	bic.w	r2, r2, #1
 8002e10:	630a      	str	r2, [r1, #48]	; 0x30
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 8002e12:	491f      	ldr	r1, [pc, #124]	; (8002e90 <HAL_RTC_Init+0xf4>)
 8002e14:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8002e16:	f422 7260 	bic.w	r2, r2, #896	; 0x380
 8002e1a:	4302      	orrs	r2, r0
 8002e1c:	62ca      	str	r2, [r1, #44]	; 0x2c
    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 8002e1e:	6861      	ldr	r1, [r4, #4]
 8002e20:	1c4a      	adds	r2, r1, #1
 8002e22:	d02b      	beq.n	8002e7c <HAL_RTC_Init+0xe0>
    MODIFY_REG(hrtc->Instance->PRLH, RTC_PRLH_PRL, (prescaler >> 16U));
 8002e24:	6898      	ldr	r0, [r3, #8]
    MODIFY_REG(hrtc->Instance->PRLL, RTC_PRLL_PRL, (prescaler & RTC_PRLL_PRL));
 8002e26:	b28d      	uxth	r5, r1
    MODIFY_REG(hrtc->Instance->PRLH, RTC_PRLH_PRL, (prescaler >> 16U));
 8002e28:	f020 000f 	bic.w	r0, r0, #15
 8002e2c:	ea40 4111 	orr.w	r1, r0, r1, lsr #16
 8002e30:	6099      	str	r1, [r3, #8]
    MODIFY_REG(hrtc->Instance->PRLL, RTC_PRLL_PRL, (prescaler & RTC_PRLL_PRL));
 8002e32:	68da      	ldr	r2, [r3, #12]
 8002e34:	0c12      	lsrs	r2, r2, #16
 8002e36:	0412      	lsls	r2, r2, #16
 8002e38:	432a      	orrs	r2, r5
 8002e3a:	60da      	str	r2, [r3, #12]
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002e3c:	685a      	ldr	r2, [r3, #4]
 8002e3e:	f022 0210 	bic.w	r2, r2, #16
 8002e42:	605a      	str	r2, [r3, #4]
  tickstart = HAL_GetTick();
 8002e44:	f7fe fdc0 	bl	80019c8 <HAL_GetTick>
 8002e48:	4605      	mov	r5, r0
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8002e4a:	e005      	b.n	8002e58 <HAL_RTC_Init+0xbc>
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8002e4c:	f7fe fdbc 	bl	80019c8 <HAL_GetTick>
 8002e50:	1b40      	subs	r0, r0, r5
 8002e52:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8002e56:	d809      	bhi.n	8002e6c <HAL_RTC_Init+0xd0>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8002e58:	6823      	ldr	r3, [r4, #0]
 8002e5a:	685b      	ldr	r3, [r3, #4]
 8002e5c:	069b      	lsls	r3, r3, #26
 8002e5e:	d5f5      	bpl.n	8002e4c <HAL_RTC_Init+0xb0>
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 8002e60:	2301      	movs	r3, #1
 8002e62:	7363      	strb	r3, [r4, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 8002e64:	81e3      	strh	r3, [r4, #14]
    hrtc->State = HAL_RTC_STATE_READY;
 8002e66:	7463      	strb	r3, [r4, #17]
    return HAL_OK;
 8002e68:	2000      	movs	r0, #0
}
 8002e6a:	bd38      	pop	{r3, r4, r5, pc}
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002e6c:	2304      	movs	r3, #4
 8002e6e:	7463      	strb	r3, [r4, #17]
    return HAL_ERROR;
 8002e70:	2001      	movs	r0, #1
}
 8002e72:	bd38      	pop	{r3, r4, r5, pc}
    hrtc->Lock = HAL_UNLOCKED;
 8002e74:	7402      	strb	r2, [r0, #16]
    HAL_RTC_MspInit(hrtc);
 8002e76:	f7fe fb89 	bl	800158c <HAL_RTC_MspInit>
 8002e7a:	e798      	b.n	8002dae <HAL_RTC_Init+0x12>
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 8002e7c:	2001      	movs	r0, #1
 8002e7e:	f7ff fea3 	bl	8002bc8 <HAL_RCCEx_GetPeriphCLKFreq>
      if (prescaler == 0U)
 8002e82:	2800      	cmp	r0, #0
 8002e84:	d0f2      	beq.n	8002e6c <HAL_RTC_Init+0xd0>
    MODIFY_REG(hrtc->Instance->PRLH, RTC_PRLH_PRL, (prescaler >> 16U));
 8002e86:	6823      	ldr	r3, [r4, #0]
        prescaler = prescaler - 1U;
 8002e88:	1e41      	subs	r1, r0, #1
 8002e8a:	e7cb      	b.n	8002e24 <HAL_RTC_Init+0x88>
    return HAL_ERROR;
 8002e8c:	2001      	movs	r0, #1
}
 8002e8e:	4770      	bx	lr
 8002e90:	40006c00 	.word	0x40006c00

08002e94 <HAL_RTC_SetTime>:
  if ((hrtc == NULL) || (sTime == NULL))
 8002e94:	2800      	cmp	r0, #0
 8002e96:	f000 8085 	beq.w	8002fa4 <HAL_RTC_SetTime+0x110>
 8002e9a:	2900      	cmp	r1, #0
 8002e9c:	f000 8082 	beq.w	8002fa4 <HAL_RTC_SetTime+0x110>
{
 8002ea0:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hrtc);
 8002ea2:	7c03      	ldrb	r3, [r0, #16]
 8002ea4:	4604      	mov	r4, r0
 8002ea6:	2b01      	cmp	r3, #1
 8002ea8:	d07e      	beq.n	8002fa8 <HAL_RTC_SetTime+0x114>
 8002eaa:	2001      	movs	r0, #1
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002eac:	2302      	movs	r3, #2
  __HAL_LOCK(hrtc);
 8002eae:	7420      	strb	r0, [r4, #16]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002eb0:	7463      	strb	r3, [r4, #17]
  if (Format == RTC_FORMAT_BIN)
 8002eb2:	2a00      	cmp	r2, #0
 8002eb4:	d05b      	beq.n	8002f6e <HAL_RTC_SetTime+0xda>
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8002eb6:	f44f 6661 	mov.w	r6, #3600	; 0xe10
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 8002eba:	784a      	ldrb	r2, [r1, #1]
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8002ebc:	7808      	ldrb	r0, [r1, #0]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 8002ebe:	0913      	lsrs	r3, r2, #4
 8002ec0:	eb03 0583 	add.w	r5, r3, r3, lsl #2
  return (tmp + (Value & (uint8_t)0x0F));
 8002ec4:	f002 030f 	and.w	r3, r2, #15
 8002ec8:	eb03 0345 	add.w	r3, r3, r5, lsl #1
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 8002ecc:	b2db      	uxtb	r3, r3
 8002ece:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
 8002ed2:	009d      	lsls	r5, r3, #2
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 8002ed4:	0903      	lsrs	r3, r0, #4
 8002ed6:	eb03 0283 	add.w	r2, r3, r3, lsl #2
  return (tmp + (Value & (uint8_t)0x0F));
 8002eda:	f000 030f 	and.w	r3, r0, #15
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 8002ede:	7889      	ldrb	r1, [r1, #2]
  return (tmp + (Value & (uint8_t)0x0F));
 8002ee0:	eb03 0342 	add.w	r3, r3, r2, lsl #1
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8002ee4:	b2db      	uxtb	r3, r3
 8002ee6:	fb06 5503 	mla	r5, r6, r3, r5
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 8002eea:	090b      	lsrs	r3, r1, #4
 8002eec:	eb03 0283 	add.w	r2, r3, r3, lsl #2
  return (tmp + (Value & (uint8_t)0x0F));
 8002ef0:	f001 030f 	and.w	r3, r1, #15
 8002ef4:	eb03 0342 	add.w	r3, r3, r2, lsl #1
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 8002ef8:	b2db      	uxtb	r3, r3
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8002efa:	441d      	add	r5, r3
  tickstart = HAL_GetTick();
 8002efc:	f7fe fd64 	bl	80019c8 <HAL_GetTick>
 8002f00:	4606      	mov	r6, r0
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8002f02:	e005      	b.n	8002f10 <HAL_RTC_SetTime+0x7c>
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8002f04:	f7fe fd60 	bl	80019c8 <HAL_GetTick>
 8002f08:	1b83      	subs	r3, r0, r6
 8002f0a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002f0e:	d843      	bhi.n	8002f98 <HAL_RTC_SetTime+0x104>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8002f10:	6823      	ldr	r3, [r4, #0]
 8002f12:	685a      	ldr	r2, [r3, #4]
 8002f14:	0691      	lsls	r1, r2, #26
 8002f16:	d5f5      	bpl.n	8002f04 <HAL_RTC_SetTime+0x70>
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002f18:	6859      	ldr	r1, [r3, #4]
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 8002f1a:	0c2a      	lsrs	r2, r5, #16
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002f1c:	f041 0110 	orr.w	r1, r1, #16
 8002f20:	6059      	str	r1, [r3, #4]
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 8002f22:	619a      	str	r2, [r3, #24]
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 8002f24:	b2aa      	uxth	r2, r5
 8002f26:	61da      	str	r2, [r3, #28]
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002f28:	685a      	ldr	r2, [r3, #4]
 8002f2a:	f022 0210 	bic.w	r2, r2, #16
 8002f2e:	605a      	str	r2, [r3, #4]
  tickstart = HAL_GetTick();
 8002f30:	f7fe fd4a 	bl	80019c8 <HAL_GetTick>
 8002f34:	4606      	mov	r6, r0
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8002f36:	e005      	b.n	8002f44 <HAL_RTC_SetTime+0xb0>
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8002f38:	f7fe fd46 	bl	80019c8 <HAL_GetTick>
 8002f3c:	1b80      	subs	r0, r0, r6
 8002f3e:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8002f42:	d829      	bhi.n	8002f98 <HAL_RTC_SetTime+0x104>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8002f44:	6823      	ldr	r3, [r4, #0]
 8002f46:	685a      	ldr	r2, [r3, #4]
 8002f48:	0692      	lsls	r2, r2, #26
 8002f4a:	d5f5      	bpl.n	8002f38 <HAL_RTC_SetTime+0xa4>
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 8002f4c:	685a      	ldr	r2, [r3, #4]
 8002f4e:	f022 0205 	bic.w	r2, r2, #5
 8002f52:	605a      	str	r2, [r3, #4]
  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 8002f54:	6a1a      	ldr	r2, [r3, #32]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 8002f56:	6a59      	ldr	r1, [r3, #36]	; 0x24
  return (((uint32_t) high1 << 16U) | low);
 8002f58:	b289      	uxth	r1, r1
 8002f5a:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
      if (counter_alarm < counter_time)
 8002f5e:	428d      	cmp	r5, r1
 8002f60:	d811      	bhi.n	8002f86 <HAL_RTC_SetTime+0xf2>
    __HAL_UNLOCK(hrtc);
 8002f62:	2300      	movs	r3, #0
    hrtc->State = HAL_RTC_STATE_READY;
 8002f64:	2201      	movs	r2, #1
    __HAL_UNLOCK(hrtc);
 8002f66:	7423      	strb	r3, [r4, #16]
    hrtc->State = HAL_RTC_STATE_READY;
 8002f68:	7462      	strb	r2, [r4, #17]
    return HAL_OK;
 8002f6a:	4618      	mov	r0, r3
}
 8002f6c:	bd70      	pop	{r4, r5, r6, pc}
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8002f6e:	f44f 6061 	mov.w	r0, #3600	; 0xe10
                              ((uint32_t)sTime->Minutes * 60U) + \
 8002f72:	784b      	ldrb	r3, [r1, #1]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8002f74:	780a      	ldrb	r2, [r1, #0]
                              ((uint32_t)sTime->Minutes * 60U) + \
 8002f76:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
 8002f7a:	009d      	lsls	r5, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8002f7c:	fb00 5502 	mla	r5, r0, r2, r5
                              ((uint32_t)sTime->Seconds));
 8002f80:	788b      	ldrb	r3, [r1, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8002f82:	441d      	add	r5, r3
 8002f84:	e7ba      	b.n	8002efc <HAL_RTC_SetTime+0x68>
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8002f86:	f501 31a8 	add.w	r1, r1, #86016	; 0x15000
 8002f8a:	4620      	mov	r0, r4
 8002f8c:	f501 71c0 	add.w	r1, r1, #384	; 0x180
 8002f90:	f7ff fed4 	bl	8002d3c <RTC_WriteAlarmCounter>
 8002f94:	2800      	cmp	r0, #0
 8002f96:	d0e4      	beq.n	8002f62 <HAL_RTC_SetTime+0xce>
          hrtc->State = HAL_RTC_STATE_ERROR;
 8002f98:	2204      	movs	r2, #4
          __HAL_UNLOCK(hrtc);
 8002f9a:	2300      	movs	r3, #0
          hrtc->State = HAL_RTC_STATE_ERROR;
 8002f9c:	7462      	strb	r2, [r4, #17]
          __HAL_UNLOCK(hrtc);
 8002f9e:	7423      	strb	r3, [r4, #16]
          return HAL_ERROR;
 8002fa0:	2001      	movs	r0, #1
}
 8002fa2:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8002fa4:	2001      	movs	r0, #1
}
 8002fa6:	4770      	bx	lr
  __HAL_LOCK(hrtc);
 8002fa8:	2002      	movs	r0, #2
}
 8002faa:	bd70      	pop	{r4, r5, r6, pc}

08002fac <HAL_RTC_SetDate>:
  if ((hrtc == NULL) || (sDate == NULL))
 8002fac:	2800      	cmp	r0, #0
 8002fae:	f000 8099 	beq.w	80030e4 <HAL_RTC_SetDate+0x138>
{
 8002fb2:	b570      	push	{r4, r5, r6, lr}
 8002fb4:	460d      	mov	r5, r1
  if ((hrtc == NULL) || (sDate == NULL))
 8002fb6:	2900      	cmp	r1, #0
 8002fb8:	f000 8096 	beq.w	80030e8 <HAL_RTC_SetDate+0x13c>
  __HAL_LOCK(hrtc);
 8002fbc:	7c03      	ldrb	r3, [r0, #16]
 8002fbe:	4604      	mov	r4, r0
 8002fc0:	2b01      	cmp	r3, #1
 8002fc2:	f000 8093 	beq.w	80030ec <HAL_RTC_SetDate+0x140>
 8002fc6:	2101      	movs	r1, #1
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002fc8:	2302      	movs	r3, #2
  __HAL_LOCK(hrtc);
 8002fca:	7401      	strb	r1, [r0, #16]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002fcc:	7443      	strb	r3, [r0, #17]
  if (Format == RTC_FORMAT_BIN)
 8002fce:	2a00      	cmp	r2, #0
 8002fd0:	d036      	beq.n	8003040 <HAL_RTC_SetDate+0x94>
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 8002fd2:	78eb      	ldrb	r3, [r5, #3]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 8002fd4:	0918      	lsrs	r0, r3, #4
 8002fd6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  return (tmp + (Value & (uint8_t)0x0F));
 8002fda:	f003 030f 	and.w	r3, r3, #15
 8002fde:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8002fe2:	b2c0      	uxtb	r0, r0
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 8002fe4:	73e0      	strb	r0, [r4, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 8002fe6:	786b      	ldrb	r3, [r5, #1]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 8002fe8:	0919      	lsrs	r1, r3, #4
 8002fea:	eb01 0281 	add.w	r2, r1, r1, lsl #2
  return (tmp + (Value & (uint8_t)0x0F));
 8002fee:	f003 010f 	and.w	r1, r3, #15
 8002ff2:	eb01 0142 	add.w	r1, r1, r2, lsl #1
 8002ff6:	b2c9      	uxtb	r1, r1
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 8002ff8:	7361      	strb	r1, [r4, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 8002ffa:	78ab      	ldrb	r3, [r5, #2]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 8002ffc:	091a      	lsrs	r2, r3, #4
 8002ffe:	eb02 0682 	add.w	r6, r2, r2, lsl #2
  return (tmp + (Value & (uint8_t)0x0F));
 8003002:	f003 020f 	and.w	r2, r3, #15
 8003006:	eb02 0246 	add.w	r2, r2, r6, lsl #1
 800300a:	b2d2      	uxtb	r2, r2
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 800300c:	73a2      	strb	r2, [r4, #14]
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 800300e:	f7ff fe55 	bl	8002cbc <RTC_WeekDayNum>
 8003012:	7320      	strb	r0, [r4, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 8003014:	7028      	strb	r0, [r5, #0]
  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8003016:	6823      	ldr	r3, [r4, #0]
 8003018:	6999      	ldr	r1, [r3, #24]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 800301a:	69dd      	ldr	r5, [r3, #28]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 800301c:	699a      	ldr	r2, [r3, #24]
  if (high1 != high2)
 800301e:	b28e      	uxth	r6, r1
 8003020:	b290      	uxth	r0, r2
 8003022:	4286      	cmp	r6, r0
 8003024:	d013      	beq.n	800304e <HAL_RTC_SetDate+0xa2>
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 8003026:	69dd      	ldr	r5, [r3, #28]
  if (hours > 24U)
 8003028:	4b31      	ldr	r3, [pc, #196]	; (80030f0 <HAL_RTC_SetDate+0x144>)
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 800302a:	b2ad      	uxth	r5, r5
 800302c:	ea45 4502 	orr.w	r5, r5, r2, lsl #16
  if (hours > 24U)
 8003030:	429d      	cmp	r5, r3
 8003032:	d812      	bhi.n	800305a <HAL_RTC_SetDate+0xae>
  __HAL_UNLOCK(hrtc);
 8003034:	2300      	movs	r3, #0
  hrtc->State = HAL_RTC_STATE_READY ;
 8003036:	2201      	movs	r2, #1
  __HAL_UNLOCK(hrtc);
 8003038:	7423      	strb	r3, [r4, #16]
  hrtc->State = HAL_RTC_STATE_READY ;
 800303a:	7462      	strb	r2, [r4, #17]
  return HAL_OK;
 800303c:	4618      	mov	r0, r3
}
 800303e:	bd70      	pop	{r4, r5, r6, pc}
    hrtc->DateToUpdate.Year  = sDate->Year;
 8003040:	78e8      	ldrb	r0, [r5, #3]
 8003042:	73e0      	strb	r0, [r4, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 8003044:	7869      	ldrb	r1, [r5, #1]
 8003046:	7361      	strb	r1, [r4, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 8003048:	78aa      	ldrb	r2, [r5, #2]
 800304a:	73a2      	strb	r2, [r4, #14]
 800304c:	e7df      	b.n	800300e <HAL_RTC_SetDate+0x62>
  if (hours > 24U)
 800304e:	4b28      	ldr	r3, [pc, #160]	; (80030f0 <HAL_RTC_SetDate+0x144>)
    timecounter = (((uint32_t) high1 << 16U) | low);
 8003050:	b2ad      	uxth	r5, r5
 8003052:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
  if (hours > 24U)
 8003056:	429d      	cmp	r5, r3
 8003058:	d9ec      	bls.n	8003034 <HAL_RTC_SetDate+0x88>
  tickstart = HAL_GetTick();
 800305a:	f7fe fcb5 	bl	80019c8 <HAL_GetTick>
 800305e:	4606      	mov	r6, r0
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8003060:	e005      	b.n	800306e <HAL_RTC_SetDate+0xc2>
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8003062:	f7fe fcb1 	bl	80019c8 <HAL_GetTick>
 8003066:	1b80      	subs	r0, r0, r6
 8003068:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800306c:	d834      	bhi.n	80030d8 <HAL_RTC_SetDate+0x12c>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800306e:	6823      	ldr	r3, [r4, #0]
 8003070:	685a      	ldr	r2, [r3, #4]
 8003072:	0691      	lsls	r1, r2, #26
 8003074:	d5f5      	bpl.n	8003062 <HAL_RTC_SetDate+0xb6>
 8003076:	4e1f      	ldr	r6, [pc, #124]	; (80030f4 <HAL_RTC_SetDate+0x148>)
 8003078:	4a1f      	ldr	r2, [pc, #124]	; (80030f8 <HAL_RTC_SetDate+0x14c>)
 800307a:	fba6 1605 	umull	r1, r6, r6, r5
 800307e:	0c36      	lsrs	r6, r6, #16
 8003080:	fb02 5616 	mls	r6, r2, r6, r5
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003084:	685a      	ldr	r2, [r3, #4]
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 8003086:	0c31      	lsrs	r1, r6, #16
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003088:	f042 0210 	orr.w	r2, r2, #16
 800308c:	605a      	str	r2, [r3, #4]
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 800308e:	b2b2      	uxth	r2, r6
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 8003090:	6199      	str	r1, [r3, #24]
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 8003092:	61da      	str	r2, [r3, #28]
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003094:	685a      	ldr	r2, [r3, #4]
 8003096:	f022 0210 	bic.w	r2, r2, #16
 800309a:	605a      	str	r2, [r3, #4]
  tickstart = HAL_GetTick();
 800309c:	f7fe fc94 	bl	80019c8 <HAL_GetTick>
 80030a0:	4605      	mov	r5, r0
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80030a2:	e005      	b.n	80030b0 <HAL_RTC_SetDate+0x104>
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80030a4:	f7fe fc90 	bl	80019c8 <HAL_GetTick>
 80030a8:	1b40      	subs	r0, r0, r5
 80030aa:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80030ae:	d813      	bhi.n	80030d8 <HAL_RTC_SetDate+0x12c>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80030b0:	6823      	ldr	r3, [r4, #0]
 80030b2:	685a      	ldr	r2, [r3, #4]
 80030b4:	0692      	lsls	r2, r2, #26
 80030b6:	d5f5      	bpl.n	80030a4 <HAL_RTC_SetDate+0xf8>
  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 80030b8:	6a1a      	ldr	r2, [r3, #32]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 80030ba:	6a59      	ldr	r1, [r3, #36]	; 0x24
  return (((uint32_t) high1 << 16U) | low);
 80030bc:	b289      	uxth	r1, r1
 80030be:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
      if (counter_alarm < counter_time)
 80030c2:	428e      	cmp	r6, r1
 80030c4:	d9b6      	bls.n	8003034 <HAL_RTC_SetDate+0x88>
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 80030c6:	f501 31a8 	add.w	r1, r1, #86016	; 0x15000
 80030ca:	4620      	mov	r0, r4
 80030cc:	f501 71c0 	add.w	r1, r1, #384	; 0x180
 80030d0:	f7ff fe34 	bl	8002d3c <RTC_WriteAlarmCounter>
 80030d4:	2800      	cmp	r0, #0
 80030d6:	d0ad      	beq.n	8003034 <HAL_RTC_SetDate+0x88>
          hrtc->State = HAL_RTC_STATE_ERROR;
 80030d8:	2204      	movs	r2, #4
          __HAL_UNLOCK(hrtc);
 80030da:	2300      	movs	r3, #0
          hrtc->State = HAL_RTC_STATE_ERROR;
 80030dc:	7462      	strb	r2, [r4, #17]
          __HAL_UNLOCK(hrtc);
 80030de:	7423      	strb	r3, [r4, #16]
          return HAL_ERROR;
 80030e0:	2001      	movs	r0, #1
}
 80030e2:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 80030e4:	2001      	movs	r0, #1
}
 80030e6:	4770      	bx	lr
    return HAL_ERROR;
 80030e8:	2001      	movs	r0, #1
}
 80030ea:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hrtc);
 80030ec:	2002      	movs	r0, #2
}
 80030ee:	bd70      	pop	{r4, r5, r6, pc}
 80030f0:	00015f8f 	.word	0x00015f8f
 80030f4:	c22e4507 	.word	0xc22e4507
 80030f8:	00015180 	.word	0x00015180

080030fc <SPI_WaitFlagStateUntilTimeout.constprop.0>:
  * @param  State flag state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 80030fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003100:	461e      	mov	r6, r3
 8003102:	4614      	mov	r4, r2
 8003104:	b082      	sub	sp, #8
 8003106:	460d      	mov	r5, r1
 8003108:	4607      	mov	r7, r0
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800310a:	f7fe fc5d 	bl	80019c8 <HAL_GetTick>
 800310e:	4426      	add	r6, r4
 8003110:	1a36      	subs	r6, r6, r0
  tmp_tickstart = HAL_GetTick();
 8003112:	f7fe fc59 	bl	80019c8 <HAL_GetTick>
 8003116:	4680      	mov	r8, r0

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003118:	4b25      	ldr	r3, [pc, #148]	; (80031b0 <SPI_WaitFlagStateUntilTimeout.constprop.0+0xb4>)
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f3c3 33cb 	ubfx	r3, r3, #15, #12
 8003120:	fb06 f303 	mul.w	r3, r6, r3
 8003124:	9301      	str	r3, [sp, #4]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003126:	683a      	ldr	r2, [r7, #0]
 8003128:	e001      	b.n	800312e <SPI_WaitFlagStateUntilTimeout.constprop.0+0x32>
  {
    if (Timeout != HAL_MAX_DELAY)
 800312a:	1c63      	adds	r3, r4, #1
 800312c:	d107      	bne.n	800313e <SPI_WaitFlagStateUntilTimeout.constprop.0+0x42>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800312e:	6893      	ldr	r3, [r2, #8]
 8003130:	ea35 0303 	bics.w	r3, r5, r3
 8003134:	d0f9      	beq.n	800312a <SPI_WaitFlagStateUntilTimeout.constprop.0+0x2e>
      }
      count--;
    }
  }

  return HAL_OK;
 8003136:	2000      	movs	r0, #0
}
 8003138:	b002      	add	sp, #8
 800313a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800313e:	f7fe fc43 	bl	80019c8 <HAL_GetTick>
 8003142:	eba0 0308 	sub.w	r3, r0, r8
 8003146:	42b3      	cmp	r3, r6
 8003148:	d207      	bcs.n	800315a <SPI_WaitFlagStateUntilTimeout.constprop.0+0x5e>
      if(count == 0U)
 800314a:	9b01      	ldr	r3, [sp, #4]
        tmp_timeout = 0U;
 800314c:	2b00      	cmp	r3, #0
      count--;
 800314e:	9b01      	ldr	r3, [sp, #4]
        tmp_timeout = 0U;
 8003150:	bf08      	it	eq
 8003152:	2600      	moveq	r6, #0
      count--;
 8003154:	3b01      	subs	r3, #1
 8003156:	9301      	str	r3, [sp, #4]
 8003158:	e7e5      	b.n	8003126 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x2a>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800315a:	e9d7 3100 	ldrd	r3, r1, [r7]
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800315e:	685a      	ldr	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003160:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003164:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003168:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800316a:	d014      	beq.n	8003196 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x9a>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800316c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800316e:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8003172:	d007      	beq.n	8003184 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x88>
        hspi->State = HAL_SPI_STATE_READY;
 8003174:	2201      	movs	r2, #1
        __HAL_UNLOCK(hspi);
 8003176:	2300      	movs	r3, #0
        return HAL_TIMEOUT;
 8003178:	2003      	movs	r0, #3
        hspi->State = HAL_SPI_STATE_READY;
 800317a:	f887 2051 	strb.w	r2, [r7, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 800317e:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
        return HAL_TIMEOUT;
 8003182:	e7d9      	b.n	8003138 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x3c>
          SPI_RESET_CRC(hspi);
 8003184:	681a      	ldr	r2, [r3, #0]
 8003186:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800318a:	601a      	str	r2, [r3, #0]
 800318c:	681a      	ldr	r2, [r3, #0]
 800318e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003192:	601a      	str	r2, [r3, #0]
 8003194:	e7ee      	b.n	8003174 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x78>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003196:	68ba      	ldr	r2, [r7, #8]
 8003198:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 800319c:	d002      	beq.n	80031a4 <SPI_WaitFlagStateUntilTimeout.constprop.0+0xa8>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800319e:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 80031a2:	d1e3      	bne.n	800316c <SPI_WaitFlagStateUntilTimeout.constprop.0+0x70>
          __HAL_SPI_DISABLE(hspi);
 80031a4:	681a      	ldr	r2, [r3, #0]
 80031a6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80031aa:	601a      	str	r2, [r3, #0]
 80031ac:	e7de      	b.n	800316c <SPI_WaitFlagStateUntilTimeout.constprop.0+0x70>
 80031ae:	bf00      	nop
 80031b0:	20000014 	.word	0x20000014

080031b4 <HAL_SPI_Init>:
  if (hspi == NULL)
 80031b4:	2800      	cmp	r0, #0
 80031b6:	d058      	beq.n	800326a <HAL_SPI_Init+0xb6>
{
 80031b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80031ba:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80031bc:	4604      	mov	r4, r0
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d044      	beq.n	800324c <HAL_SPI_Init+0x98>
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80031c2:	2300      	movs	r3, #0
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80031c4:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80031c8:	2300      	movs	r3, #0
  if (hspi->State == HAL_SPI_STATE_RESET)
 80031ca:	f894 2051 	ldrb.w	r2, [r4, #81]	; 0x51
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80031ce:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 80031d0:	f002 01ff 	and.w	r1, r2, #255	; 0xff
 80031d4:	2a00      	cmp	r2, #0
 80031d6:	d03f      	beq.n	8003258 <HAL_SPI_Init+0xa4>
 80031d8:	469c      	mov	ip, r3
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80031da:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
  hspi->State = HAL_SPI_STATE_BUSY;
 80031de:	2602      	movs	r6, #2
  hspi->State     = HAL_SPI_STATE_READY;
 80031e0:	f04f 0e01 	mov.w	lr, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80031e4:	2500      	movs	r5, #0
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80031e6:	f402 4204 	and.w	r2, r2, #33792	; 0x8400
 80031ea:	f403 7382 	and.w	r3, r3, #260	; 0x104
 80031ee:	4313      	orrs	r3, r2
 80031f0:	68e2      	ldr	r2, [r4, #12]
 80031f2:	69a0      	ldr	r0, [r4, #24]
 80031f4:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80031f8:	4313      	orrs	r3, r2
 80031fa:	6922      	ldr	r2, [r4, #16]
  hspi->State = HAL_SPI_STATE_BUSY;
 80031fc:	f884 6051 	strb.w	r6, [r4, #81]	; 0x51
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003200:	4032      	ands	r2, r6
 8003202:	4313      	orrs	r3, r2
 8003204:	6962      	ldr	r2, [r4, #20]
  __HAL_SPI_DISABLE(hspi);
 8003206:	6821      	ldr	r1, [r4, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003208:	ea02 020e 	and.w	r2, r2, lr
 800320c:	431a      	orrs	r2, r3
 800320e:	69e3      	ldr	r3, [r4, #28]
 8003210:	6a26      	ldr	r6, [r4, #32]
 8003212:	f003 0738 	and.w	r7, r3, #56	; 0x38
 8003216:	f400 7300 	and.w	r3, r0, #512	; 0x200
 800321a:	4313      	orrs	r3, r2
 800321c:	f006 0680 	and.w	r6, r6, #128	; 0x80
  __HAL_SPI_DISABLE(hspi);
 8003220:	680a      	ldr	r2, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003222:	433b      	orrs	r3, r7
 8003224:	4333      	orrs	r3, r6
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8003226:	0c00      	lsrs	r0, r0, #16
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003228:	ea43 030c 	orr.w	r3, r3, ip
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800322c:	f000 0004 	and.w	r0, r0, #4
  __HAL_SPI_DISABLE(hspi);
 8003230:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003234:	600a      	str	r2, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003236:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8003238:	6048      	str	r0, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800323a:	69cb      	ldr	r3, [r1, #28]
  return HAL_OK;
 800323c:	4628      	mov	r0, r5
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800323e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003242:	61cb      	str	r3, [r1, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003244:	6565      	str	r5, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003246:	f884 e051 	strb.w	lr, [r4, #81]	; 0x51
}
 800324a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800324c:	6842      	ldr	r2, [r0, #4]
 800324e:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8003252:	d0b9      	beq.n	80031c8 <HAL_SPI_Init+0x14>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003254:	61c3      	str	r3, [r0, #28]
 8003256:	e7b7      	b.n	80031c8 <HAL_SPI_Init+0x14>
    HAL_SPI_MspInit(hspi);
 8003258:	4620      	mov	r0, r4
    hspi->Lock = HAL_UNLOCKED;
 800325a:	f884 1050 	strb.w	r1, [r4, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 800325e:	f7fe f9b5 	bl	80015cc <HAL_SPI_MspInit>
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003262:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003264:	f403 5c00 	and.w	ip, r3, #8192	; 0x2000
 8003268:	e7b7      	b.n	80031da <HAL_SPI_Init+0x26>
    return HAL_ERROR;
 800326a:	2001      	movs	r0, #1
}
 800326c:	4770      	bx	lr
 800326e:	bf00      	nop

08003270 <HAL_SPI_Transmit>:
{
 8003270:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003274:	461d      	mov	r5, r3
  __HAL_LOCK(hspi);
 8003276:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
{
 800327a:	b082      	sub	sp, #8
  __HAL_LOCK(hspi);
 800327c:	2b01      	cmp	r3, #1
 800327e:	d05e      	beq.n	800333e <HAL_SPI_Transmit+0xce>
 8003280:	2301      	movs	r3, #1
 8003282:	4604      	mov	r4, r0
 8003284:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
 8003288:	4688      	mov	r8, r1
 800328a:	4617      	mov	r7, r2
  tickstart = HAL_GetTick();
 800328c:	f7fe fb9c 	bl	80019c8 <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 8003290:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
  tickstart = HAL_GetTick();
 8003294:	4606      	mov	r6, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8003296:	2b01      	cmp	r3, #1
 8003298:	b2d8      	uxtb	r0, r3
 800329a:	d009      	beq.n	80032b0 <HAL_SPI_Transmit+0x40>
    errorcode = HAL_BUSY;
 800329c:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 800329e:	2201      	movs	r2, #1
  __HAL_UNLOCK(hspi);
 80032a0:	2300      	movs	r3, #0
  hspi->State = HAL_SPI_STATE_READY;
 80032a2:	f884 2051 	strb.w	r2, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80032a6:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 80032aa:	b002      	add	sp, #8
 80032ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if ((pData == NULL) || (Size == 0U))
 80032b0:	f1b8 0f00 	cmp.w	r8, #0
 80032b4:	d0f3      	beq.n	800329e <HAL_SPI_Transmit+0x2e>
 80032b6:	2f00      	cmp	r7, #0
 80032b8:	d0f1      	beq.n	800329e <HAL_SPI_Transmit+0x2e>
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80032ba:	2300      	movs	r3, #0
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80032bc:	2203      	movs	r2, #3
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80032be:	63a3      	str	r3, [r4, #56]	; 0x38
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80032c0:	f884 2051 	strb.w	r2, [r4, #81]	; 0x51
  hspi->RxXferSize  = 0U;
 80032c4:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80032c6:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->TxISR       = NULL;
 80032c8:	6463      	str	r3, [r4, #68]	; 0x44
  hspi->TxXferCount = Size;
 80032ca:	86e7      	strh	r7, [r4, #54]	; 0x36
  hspi->RxISR       = NULL;
 80032cc:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->RxXferCount = 0U;
 80032ce:	87e3      	strh	r3, [r4, #62]	; 0x3e
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80032d0:	68a3      	ldr	r3, [r4, #8]
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80032d2:	f8c4 8030 	str.w	r8, [r4, #48]	; 0x30
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80032d6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
  hspi->TxXferSize  = Size;
 80032da:	86a7      	strh	r7, [r4, #52]	; 0x34
    __HAL_SPI_DISABLE(hspi);
 80032dc:	6823      	ldr	r3, [r4, #0]
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80032de:	d059      	beq.n	8003394 <HAL_SPI_Transmit+0x124>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80032e0:	681a      	ldr	r2, [r3, #0]
 80032e2:	0652      	lsls	r2, r2, #25
 80032e4:	d403      	bmi.n	80032ee <HAL_SPI_Transmit+0x7e>
    __HAL_SPI_ENABLE(hspi);
 80032e6:	681a      	ldr	r2, [r3, #0]
 80032e8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80032ec:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80032ee:	68e2      	ldr	r2, [r4, #12]
 80032f0:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80032f4:	6862      	ldr	r2, [r4, #4]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80032f6:	d026      	beq.n	8003346 <HAL_SPI_Transmit+0xd6>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80032f8:	2a00      	cmp	r2, #0
 80032fa:	d054      	beq.n	80033a6 <HAL_SPI_Transmit+0x136>
 80032fc:	2f01      	cmp	r7, #1
 80032fe:	d052      	beq.n	80033a6 <HAL_SPI_Transmit+0x136>
    while (hspi->TxXferCount > 0U)
 8003300:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8003302:	b29b      	uxth	r3, r3
 8003304:	b973      	cbnz	r3, 8003324 <HAL_SPI_Transmit+0xb4>
 8003306:	e05c      	b.n	80033c2 <HAL_SPI_Transmit+0x152>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003308:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800330a:	7812      	ldrb	r2, [r2, #0]
 800330c:	731a      	strb	r2, [r3, #12]
        hspi->TxXferCount--;
 800330e:	8ee1      	ldrh	r1, [r4, #54]	; 0x36
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003310:	6b23      	ldr	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8003312:	3901      	subs	r1, #1
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003314:	3301      	adds	r3, #1
        hspi->TxXferCount--;
 8003316:	b289      	uxth	r1, r1
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003318:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 800331a:	86e1      	strh	r1, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 800331c:	8ee1      	ldrh	r1, [r4, #54]	; 0x36
 800331e:	b289      	uxth	r1, r1
 8003320:	2900      	cmp	r1, #0
 8003322:	d04e      	beq.n	80033c2 <HAL_SPI_Transmit+0x152>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003324:	6823      	ldr	r3, [r4, #0]
 8003326:	689a      	ldr	r2, [r3, #8]
 8003328:	0792      	lsls	r2, r2, #30
 800332a:	d4ed      	bmi.n	8003308 <HAL_SPI_Transmit+0x98>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800332c:	f7fe fb4c 	bl	80019c8 <HAL_GetTick>
 8003330:	1b80      	subs	r0, r0, r6
 8003332:	42a8      	cmp	r0, r5
 8003334:	d342      	bcc.n	80033bc <HAL_SPI_Transmit+0x14c>
 8003336:	1c6b      	adds	r3, r5, #1
 8003338:	d0f0      	beq.n	800331c <HAL_SPI_Transmit+0xac>
          errorcode = HAL_TIMEOUT;
 800333a:	2003      	movs	r0, #3
 800333c:	e7af      	b.n	800329e <HAL_SPI_Transmit+0x2e>
  __HAL_LOCK(hspi);
 800333e:	2002      	movs	r0, #2
}
 8003340:	b002      	add	sp, #8
 8003342:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003346:	2a00      	cmp	r2, #0
 8003348:	d155      	bne.n	80033f6 <HAL_SPI_Transmit+0x186>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800334a:	4641      	mov	r1, r8
 800334c:	f831 2b02 	ldrh.w	r2, [r1], #2
 8003350:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 8003352:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003354:	6321      	str	r1, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8003356:	3a01      	subs	r2, #1
 8003358:	b292      	uxth	r2, r2
 800335a:	86e2      	strh	r2, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 800335c:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 800335e:	b292      	uxth	r2, r2
 8003360:	b96a      	cbnz	r2, 800337e <HAL_SPI_Transmit+0x10e>
 8003362:	e02e      	b.n	80033c2 <HAL_SPI_Transmit+0x152>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003364:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8003366:	f832 1b02 	ldrh.w	r1, [r2], #2
 800336a:	60d9      	str	r1, [r3, #12]
        hspi->TxXferCount--;
 800336c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800336e:	6322      	str	r2, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8003370:	3b01      	subs	r3, #1
 8003372:	b29b      	uxth	r3, r3
 8003374:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 8003376:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8003378:	b29b      	uxth	r3, r3
 800337a:	b313      	cbz	r3, 80033c2 <HAL_SPI_Transmit+0x152>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800337c:	6823      	ldr	r3, [r4, #0]
 800337e:	689a      	ldr	r2, [r3, #8]
 8003380:	0790      	lsls	r0, r2, #30
 8003382:	d4ef      	bmi.n	8003364 <HAL_SPI_Transmit+0xf4>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003384:	f7fe fb20 	bl	80019c8 <HAL_GetTick>
 8003388:	1b80      	subs	r0, r0, r6
 800338a:	42a8      	cmp	r0, r5
 800338c:	d336      	bcc.n	80033fc <HAL_SPI_Transmit+0x18c>
 800338e:	1c69      	adds	r1, r5, #1
 8003390:	d0f1      	beq.n	8003376 <HAL_SPI_Transmit+0x106>
 8003392:	e7d2      	b.n	800333a <HAL_SPI_Transmit+0xca>
    __HAL_SPI_DISABLE(hspi);
 8003394:	681a      	ldr	r2, [r3, #0]
 8003396:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800339a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800339c:	681a      	ldr	r2, [r3, #0]
 800339e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80033a2:	601a      	str	r2, [r3, #0]
 80033a4:	e79c      	b.n	80032e0 <HAL_SPI_Transmit+0x70>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80033a6:	f898 2000 	ldrb.w	r2, [r8]
 80033aa:	731a      	strb	r2, [r3, #12]
      hspi->TxXferCount--;
 80033ac:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80033ae:	6b22      	ldr	r2, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 80033b0:	3b01      	subs	r3, #1
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80033b2:	3201      	adds	r2, #1
      hspi->TxXferCount--;
 80033b4:	b29b      	uxth	r3, r3
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80033b6:	6322      	str	r2, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 80033b8:	86e3      	strh	r3, [r4, #54]	; 0x36
 80033ba:	e7a1      	b.n	8003300 <HAL_SPI_Transmit+0x90>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80033bc:	2d00      	cmp	r5, #0
 80033be:	d1ad      	bne.n	800331c <HAL_SPI_Transmit+0xac>
 80033c0:	e7bb      	b.n	800333a <HAL_SPI_Transmit+0xca>
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80033c2:	4633      	mov	r3, r6
 80033c4:	462a      	mov	r2, r5
 80033c6:	2180      	movs	r1, #128	; 0x80
 80033c8:	4620      	mov	r0, r4
 80033ca:	f7ff fe97 	bl	80030fc <SPI_WaitFlagStateUntilTimeout.constprop.0>
 80033ce:	b120      	cbz	r0, 80033da <HAL_SPI_Transmit+0x16a>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80033d0:	2220      	movs	r2, #32
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80033d2:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80033d4:	4313      	orrs	r3, r2
 80033d6:	6563      	str	r3, [r4, #84]	; 0x54
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80033d8:	6562      	str	r2, [r4, #84]	; 0x54
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80033da:	68a3      	ldr	r3, [r4, #8]
 80033dc:	b933      	cbnz	r3, 80033ec <HAL_SPI_Transmit+0x17c>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80033de:	6822      	ldr	r2, [r4, #0]
 80033e0:	9301      	str	r3, [sp, #4]
 80033e2:	68d3      	ldr	r3, [r2, #12]
 80033e4:	9301      	str	r3, [sp, #4]
 80033e6:	6893      	ldr	r3, [r2, #8]
 80033e8:	9301      	str	r3, [sp, #4]
 80033ea:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80033ec:	6d60      	ldr	r0, [r4, #84]	; 0x54
    errorcode = HAL_BUSY;
 80033ee:	3800      	subs	r0, #0
 80033f0:	bf18      	it	ne
 80033f2:	2001      	movne	r0, #1
error:
 80033f4:	e753      	b.n	800329e <HAL_SPI_Transmit+0x2e>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80033f6:	2f01      	cmp	r7, #1
 80033f8:	d1b0      	bne.n	800335c <HAL_SPI_Transmit+0xec>
 80033fa:	e7a6      	b.n	800334a <HAL_SPI_Transmit+0xda>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80033fc:	2d00      	cmp	r5, #0
 80033fe:	d1ba      	bne.n	8003376 <HAL_SPI_Transmit+0x106>
 8003400:	e79b      	b.n	800333a <HAL_SPI_Transmit+0xca>
 8003402:	bf00      	nop

08003404 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003404:	6a03      	ldr	r3, [r0, #32]
{
 8003406:	b470      	push	{r4, r5, r6}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003408:	f023 0301 	bic.w	r3, r3, #1
 800340c:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800340e:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003410:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003412:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003414:	680e      	ldr	r6, [r1, #0]
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003416:	4d0f      	ldr	r5, [pc, #60]	; (8003454 <TIM_OC1_SetConfig+0x50>)
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003418:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 800341c:	4332      	orrs	r2, r6
  tmpccer |= OC_Config->OCPolarity;
 800341e:	688e      	ldr	r6, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 8003420:	f023 0302 	bic.w	r3, r3, #2
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003424:	42a8      	cmp	r0, r5
  tmpccer |= OC_Config->OCPolarity;
 8003426:	ea43 0306 	orr.w	r3, r3, r6
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800342a:	d006      	beq.n	800343a <TIM_OC1_SetConfig+0x36>

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800342c:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 800342e:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8003430:	6182      	str	r2, [r0, #24]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 8003432:	bc70      	pop	{r4, r5, r6}
  TIMx->CCR1 = OC_Config->Pulse;
 8003434:	6341      	str	r1, [r0, #52]	; 0x34
  TIMx->CCER = tmpccer;
 8003436:	6203      	str	r3, [r0, #32]
}
 8003438:	4770      	bx	lr
    tmpccer |= OC_Config->OCNPolarity;
 800343a:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 800343c:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8003440:	432b      	orrs	r3, r5
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003442:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 8003446:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
 800344a:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 800344c:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 8003450:	432c      	orrs	r4, r5
 8003452:	e7eb      	b.n	800342c <TIM_OC1_SetConfig+0x28>
 8003454:	40012c00 	.word	0x40012c00

08003458 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003458:	6a03      	ldr	r3, [r0, #32]
{
 800345a:	b470      	push	{r4, r5, r6}
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800345c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003460:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003462:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003464:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003466:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003468:	680e      	ldr	r6, [r1, #0]
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800346a:	4d10      	ldr	r5, [pc, #64]	; (80034ac <TIM_OC3_SetConfig+0x54>)
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800346c:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8003470:	4332      	orrs	r2, r6
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003472:	688e      	ldr	r6, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 8003474:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003478:	42a8      	cmp	r0, r5
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800347a:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800347e:	d006      	beq.n	800348e <TIM_OC3_SetConfig+0x36>

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003480:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8003482:	6044      	str	r4, [r0, #4]
  TIMx->CCMR2 = tmpccmrx;
 8003484:	61c2      	str	r2, [r0, #28]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 8003486:	bc70      	pop	{r4, r5, r6}
  TIMx->CCR3 = OC_Config->Pulse;
 8003488:	63c1      	str	r1, [r0, #60]	; 0x3c
  TIMx->CCER = tmpccer;
 800348a:	6203      	str	r3, [r0, #32]
}
 800348c:	4770      	bx	lr
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800348e:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 8003490:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003494:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003498:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800349c:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
 80034a0:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC3NE;
 80034a2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80034a6:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
 80034aa:	e7e9      	b.n	8003480 <TIM_OC3_SetConfig+0x28>
 80034ac:	40012c00 	.word	0x40012c00

080034b0 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80034b0:	6a03      	ldr	r3, [r0, #32]
{
 80034b2:	b430      	push	{r4, r5}
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80034b4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80034b8:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80034ba:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80034bc:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80034be:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80034c0:	f8d1 c000 	ldr.w	ip, [r1]
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80034c4:	4d0c      	ldr	r5, [pc, #48]	; (80034f8 <TIM_OC4_SetConfig+0x48>)
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80034c6:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80034ca:	ea42 220c 	orr.w	r2, r2, ip, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80034ce:	f8d1 c008 	ldr.w	ip, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 80034d2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80034d6:	42a8      	cmp	r0, r5
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80034d8:	ea43 330c 	orr.w	r3, r3, ip, lsl #12
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80034dc:	d006      	beq.n	80034ec <TIM_OC4_SetConfig+0x3c>

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80034de:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 80034e0:	6044      	str	r4, [r0, #4]
  TIMx->CCMR2 = tmpccmrx;
 80034e2:	61c2      	str	r2, [r0, #28]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 80034e4:	bc30      	pop	{r4, r5}
  TIMx->CCR4 = OC_Config->Pulse;
 80034e6:	6401      	str	r1, [r0, #64]	; 0x40
  TIMx->CCER = tmpccer;
 80034e8:	6203      	str	r3, [r0, #32]
}
 80034ea:	4770      	bx	lr
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80034ec:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 80034ee:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80034f2:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
 80034f6:	e7f2      	b.n	80034de <TIM_OC4_SetConfig+0x2e>
 80034f8:	40012c00 	.word	0x40012c00

080034fc <HAL_TIM_OC_Start>:
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80034fc:	bb41      	cbnz	r1, 8003550 <HAL_TIM_OC_Start+0x54>
 80034fe:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8003502:	2b01      	cmp	r3, #1
 8003504:	d12c      	bne.n	8003560 <HAL_TIM_OC_Start+0x64>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003506:	2302      	movs	r3, #2
 8003508:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800350c:	2201      	movs	r2, #1
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800350e:	6803      	ldr	r3, [r0, #0]
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003510:	f001 011f 	and.w	r1, r1, #31

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003514:	6a18      	ldr	r0, [r3, #32]
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003516:	fa02 f101 	lsl.w	r1, r2, r1
  TIMx->CCER &= ~tmp;
 800351a:	ea20 0001 	bic.w	r0, r0, r1
{
 800351e:	b410      	push	{r4}
  TIMx->CCER &= ~tmp;
 8003520:	6218      	str	r0, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003522:	6a1a      	ldr	r2, [r3, #32]
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003524:	4c21      	ldr	r4, [pc, #132]	; (80035ac <HAL_TIM_OC_Start+0xb0>)
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003526:	4311      	orrs	r1, r2
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003528:	42a3      	cmp	r3, r4
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800352a:	6219      	str	r1, [r3, #32]
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800352c:	d01a      	beq.n	8003564 <HAL_TIM_OC_Start+0x68>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800352e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003532:	d01b      	beq.n	800356c <HAL_TIM_OC_Start+0x70>
 8003534:	4a1e      	ldr	r2, [pc, #120]	; (80035b0 <HAL_TIM_OC_Start+0xb4>)
 8003536:	4293      	cmp	r3, r2
 8003538:	d018      	beq.n	800356c <HAL_TIM_OC_Start+0x70>
 800353a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800353e:	4293      	cmp	r3, r2
 8003540:	d014      	beq.n	800356c <HAL_TIM_OC_Start+0x70>
    __HAL_TIM_ENABLE(htim);
 8003542:	681a      	ldr	r2, [r3, #0]
  return HAL_OK;
 8003544:	2000      	movs	r0, #0
    __HAL_TIM_ENABLE(htim);
 8003546:	f042 0201 	orr.w	r2, r2, #1
}
 800354a:	bc10      	pop	{r4}
    __HAL_TIM_ENABLE(htim);
 800354c:	601a      	str	r2, [r3, #0]
}
 800354e:	4770      	bx	lr
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003550:	2904      	cmp	r1, #4
 8003552:	d023      	beq.n	800359c <HAL_TIM_OC_Start+0xa0>
 8003554:	2908      	cmp	r1, #8
 8003556:	d019      	beq.n	800358c <HAL_TIM_OC_Start+0x90>
 8003558:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800355c:	2b01      	cmp	r3, #1
 800355e:	d00d      	beq.n	800357c <HAL_TIM_OC_Start+0x80>
    return HAL_ERROR;
 8003560:	2001      	movs	r0, #1
}
 8003562:	4770      	bx	lr
    __HAL_TIM_MOE_ENABLE(htim);
 8003564:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003566:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800356a:	645a      	str	r2, [r3, #68]	; 0x44
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800356c:	689a      	ldr	r2, [r3, #8]
 800356e:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003572:	2a06      	cmp	r2, #6
 8003574:	d1e5      	bne.n	8003542 <HAL_TIM_OC_Start+0x46>
  return HAL_OK;
 8003576:	2000      	movs	r0, #0
}
 8003578:	bc10      	pop	{r4}
 800357a:	4770      	bx	lr
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800357c:	2904      	cmp	r1, #4
 800357e:	d011      	beq.n	80035a4 <HAL_TIM_OC_Start+0xa8>
 8003580:	2908      	cmp	r1, #8
 8003582:	d007      	beq.n	8003594 <HAL_TIM_OC_Start+0x98>
 8003584:	2302      	movs	r3, #2
 8003586:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
 800358a:	e7bf      	b.n	800350c <HAL_TIM_OC_Start+0x10>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800358c:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8003590:	2b01      	cmp	r3, #1
 8003592:	d1e5      	bne.n	8003560 <HAL_TIM_OC_Start+0x64>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003594:	2302      	movs	r3, #2
 8003596:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 800359a:	e7b7      	b.n	800350c <HAL_TIM_OC_Start+0x10>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800359c:	f890 303f 	ldrb.w	r3, [r0, #63]	; 0x3f
 80035a0:	2b01      	cmp	r3, #1
 80035a2:	d1dd      	bne.n	8003560 <HAL_TIM_OC_Start+0x64>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80035a4:	2302      	movs	r3, #2
 80035a6:	f880 303f 	strb.w	r3, [r0, #63]	; 0x3f
 80035aa:	e7af      	b.n	800350c <HAL_TIM_OC_Start+0x10>
 80035ac:	40012c00 	.word	0x40012c00
 80035b0:	40000400 	.word	0x40000400

080035b4 <HAL_TIM_PWM_Start>:
 80035b4:	f7ff bfa2 	b.w	80034fc <HAL_TIM_OC_Start>

080035b8 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80035b8:	4a24      	ldr	r2, [pc, #144]	; (800364c <TIM_Base_SetConfig+0x94>)
{
 80035ba:	b430      	push	{r4, r5}
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80035bc:	4290      	cmp	r0, r2
  tmpcr1 = TIMx->CR1;
 80035be:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80035c0:	d02c      	beq.n	800361c <TIM_Base_SetConfig+0x64>
 80035c2:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80035c6:	d014      	beq.n	80035f2 <TIM_Base_SetConfig+0x3a>
 80035c8:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80035cc:	4290      	cmp	r0, r2
 80035ce:	d010      	beq.n	80035f2 <TIM_Base_SetConfig+0x3a>
 80035d0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80035d4:	4290      	cmp	r0, r2
 80035d6:	d00c      	beq.n	80035f2 <TIM_Base_SetConfig+0x3a>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80035d8:	694d      	ldr	r5, [r1, #20]
 80035da:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80035de:	432b      	orrs	r3, r5
  TIMx->ARR = (uint32_t)Structure->Period ;
 80035e0:	688c      	ldr	r4, [r1, #8]
  TIMx->PSC = Structure->Prescaler;
 80035e2:	680a      	ldr	r2, [r1, #0]
  TIMx->CR1 = tmpcr1;
 80035e4:	6003      	str	r3, [r0, #0]
  TIMx->EGR = TIM_EGR_UG;
 80035e6:	2301      	movs	r3, #1
  TIMx->ARR = (uint32_t)Structure->Period ;
 80035e8:	62c4      	str	r4, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80035ea:	6282      	str	r2, [r0, #40]	; 0x28
}
 80035ec:	bc30      	pop	{r4, r5}
  TIMx->EGR = TIM_EGR_UG;
 80035ee:	6143      	str	r3, [r0, #20]
}
 80035f0:	4770      	bx	lr
    tmpcr1 |= Structure->CounterMode;
 80035f2:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80035f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80035f8:	68cc      	ldr	r4, [r1, #12]
    tmpcr1 |= Structure->CounterMode;
 80035fa:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 80035fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003600:	694a      	ldr	r2, [r1, #20]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003602:	4323      	orrs	r3, r4
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003604:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003608:	4313      	orrs	r3, r2
  TIMx->ARR = (uint32_t)Structure->Period ;
 800360a:	688c      	ldr	r4, [r1, #8]
  TIMx->PSC = Structure->Prescaler;
 800360c:	680a      	ldr	r2, [r1, #0]
  TIMx->CR1 = tmpcr1;
 800360e:	6003      	str	r3, [r0, #0]
  TIMx->EGR = TIM_EGR_UG;
 8003610:	2301      	movs	r3, #1
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003612:	62c4      	str	r4, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003614:	6282      	str	r2, [r0, #40]	; 0x28
}
 8003616:	bc30      	pop	{r4, r5}
  TIMx->EGR = TIM_EGR_UG;
 8003618:	6143      	str	r3, [r0, #20]
}
 800361a:	4770      	bx	lr
    tmpcr1 |= Structure->CounterMode;
 800361c:	684c      	ldr	r4, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800361e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003622:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 |= Structure->CounterMode;
 8003624:	4323      	orrs	r3, r4
    tmpcr1 &= ~TIM_CR1_CKD;
 8003626:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800362a:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800362c:	694a      	ldr	r2, [r1, #20]
 800362e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003632:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8003634:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003636:	688b      	ldr	r3, [r1, #8]
}
 8003638:	bc30      	pop	{r4, r5}
  TIMx->ARR = (uint32_t)Structure->Period ;
 800363a:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800363c:	680b      	ldr	r3, [r1, #0]
 800363e:	6283      	str	r3, [r0, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8003640:	690b      	ldr	r3, [r1, #16]
 8003642:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8003644:	2301      	movs	r3, #1
 8003646:	6143      	str	r3, [r0, #20]
}
 8003648:	4770      	bx	lr
 800364a:	bf00      	nop
 800364c:	40012c00 	.word	0x40012c00

08003650 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 8003650:	b350      	cbz	r0, 80036a8 <HAL_TIM_PWM_Init+0x58>
{
 8003652:	b510      	push	{r4, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 8003654:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003658:	4604      	mov	r4, r0
 800365a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800365e:	b1f3      	cbz	r3, 800369e <HAL_TIM_PWM_Init+0x4e>
  htim->State = HAL_TIM_STATE_BUSY;
 8003660:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003662:	4621      	mov	r1, r4
  htim->State = HAL_TIM_STATE_BUSY;
 8003664:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003668:	f851 0b04 	ldr.w	r0, [r1], #4
 800366c:	f7ff ffa4 	bl	80035b8 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003670:	2301      	movs	r3, #1
 8003672:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003676:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 800367a:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800367e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8003682:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003686:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800368a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800368e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8003692:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 8003696:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800369a:	2000      	movs	r0, #0
}
 800369c:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 800369e:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 80036a2:	f7fd fff5 	bl	8001690 <HAL_TIM_PWM_MspInit>
 80036a6:	e7db      	b.n	8003660 <HAL_TIM_PWM_Init+0x10>
    return HAL_ERROR;
 80036a8:	2001      	movs	r0, #1
}
 80036aa:	4770      	bx	lr

080036ac <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80036ac:	6a03      	ldr	r3, [r0, #32]
{
 80036ae:	b470      	push	{r4, r5, r6}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80036b0:	f023 0310 	bic.w	r3, r3, #16
 80036b4:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 80036b6:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 80036b8:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 80036ba:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80036bc:	680e      	ldr	r6, [r1, #0]
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80036be:	4d11      	ldr	r5, [pc, #68]	; (8003704 <TIM_OC2_SetConfig+0x58>)
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80036c0:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80036c4:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80036c8:	688e      	ldr	r6, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 80036ca:	f023 0320 	bic.w	r3, r3, #32
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80036ce:	42a8      	cmp	r0, r5
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80036d0:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80036d4:	d006      	beq.n	80036e4 <TIM_OC2_SetConfig+0x38>
  TIMx->CCR2 = OC_Config->Pulse;
 80036d6:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 80036d8:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 80036da:	6182      	str	r2, [r0, #24]
}
 80036dc:	bc70      	pop	{r4, r5, r6}
  TIMx->CCR2 = OC_Config->Pulse;
 80036de:	6381      	str	r1, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 80036e0:	6203      	str	r3, [r0, #32]
}
 80036e2:	4770      	bx	lr
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80036e4:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 80036e6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80036ea:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80036ee:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80036f2:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
 80036f6:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC2NE;
 80036f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80036fc:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
 8003700:	e7e9      	b.n	80036d6 <TIM_OC2_SetConfig+0x2a>
 8003702:	bf00      	nop
 8003704:	40012c00 	.word	0x40012c00

08003708 <HAL_TIM_PWM_ConfigChannel>:
{
 8003708:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 800370a:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800370e:	2b01      	cmp	r3, #1
 8003710:	d065      	beq.n	80037de <HAL_TIM_PWM_ConfigChannel+0xd6>
 8003712:	2301      	movs	r3, #1
 8003714:	4604      	mov	r4, r0
 8003716:	460d      	mov	r5, r1
 8003718:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  switch (Channel)
 800371c:	2a0c      	cmp	r2, #12
 800371e:	d818      	bhi.n	8003752 <HAL_TIM_PWM_ConfigChannel+0x4a>
 8003720:	e8df f002 	tbb	[pc, r2]
 8003724:	17171707 	.word	0x17171707
 8003728:	17171732 	.word	0x17171732
 800372c:	17171748 	.word	0x17171748
 8003730:	1c          	.byte	0x1c
 8003731:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003732:	6800      	ldr	r0, [r0, #0]
 8003734:	f7ff fe66 	bl	8003404 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003738:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800373a:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800373c:	6999      	ldr	r1, [r3, #24]
 800373e:	f041 0108 	orr.w	r1, r1, #8
 8003742:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003744:	6999      	ldr	r1, [r3, #24]
 8003746:	f021 0104 	bic.w	r1, r1, #4
 800374a:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800374c:	699a      	ldr	r2, [r3, #24]
 800374e:	4302      	orrs	r2, r0
 8003750:	619a      	str	r2, [r3, #24]
  __HAL_UNLOCK(htim);
 8003752:	2300      	movs	r3, #0
  return HAL_OK;
 8003754:	4618      	mov	r0, r3
  __HAL_UNLOCK(htim);
 8003756:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 800375a:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800375c:	6800      	ldr	r0, [r0, #0]
 800375e:	f7ff fea7 	bl	80034b0 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003762:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003764:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003766:	69d9      	ldr	r1, [r3, #28]
 8003768:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 800376c:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800376e:	69d9      	ldr	r1, [r3, #28]
 8003770:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8003774:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003776:	69da      	ldr	r2, [r3, #28]
 8003778:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 800377c:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(htim);
 800377e:	2300      	movs	r3, #0
  return HAL_OK;
 8003780:	4618      	mov	r0, r3
  __HAL_UNLOCK(htim);
 8003782:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  return HAL_OK;
 8003786:	e7e8      	b.n	800375a <HAL_TIM_PWM_ConfigChannel+0x52>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003788:	6800      	ldr	r0, [r0, #0]
 800378a:	f7ff ff8f 	bl	80036ac <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800378e:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003790:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003792:	6999      	ldr	r1, [r3, #24]
 8003794:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 8003798:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800379a:	6999      	ldr	r1, [r3, #24]
 800379c:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 80037a0:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80037a2:	699a      	ldr	r2, [r3, #24]
 80037a4:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 80037a8:	619a      	str	r2, [r3, #24]
  __HAL_UNLOCK(htim);
 80037aa:	2300      	movs	r3, #0
  return HAL_OK;
 80037ac:	4618      	mov	r0, r3
  __HAL_UNLOCK(htim);
 80037ae:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  return HAL_OK;
 80037b2:	e7d2      	b.n	800375a <HAL_TIM_PWM_ConfigChannel+0x52>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80037b4:	6800      	ldr	r0, [r0, #0]
 80037b6:	f7ff fe4f 	bl	8003458 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80037ba:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80037bc:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80037be:	69d9      	ldr	r1, [r3, #28]
 80037c0:	f041 0108 	orr.w	r1, r1, #8
 80037c4:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80037c6:	69d9      	ldr	r1, [r3, #28]
 80037c8:	f021 0104 	bic.w	r1, r1, #4
 80037cc:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80037ce:	69da      	ldr	r2, [r3, #28]
 80037d0:	4302      	orrs	r2, r0
 80037d2:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(htim);
 80037d4:	2300      	movs	r3, #0
  return HAL_OK;
 80037d6:	4618      	mov	r0, r3
  __HAL_UNLOCK(htim);
 80037d8:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  return HAL_OK;
 80037dc:	e7bd      	b.n	800375a <HAL_TIM_PWM_ConfigChannel+0x52>
  __HAL_LOCK(htim);
 80037de:	2002      	movs	r0, #2
}
 80037e0:	bd38      	pop	{r3, r4, r5, pc}
 80037e2:	bf00      	nop

080037e4 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80037e4:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
 80037e8:	2a01      	cmp	r2, #1
 80037ea:	d027      	beq.n	800383c <HAL_TIMEx_MasterConfigSynchronization+0x58>
 80037ec:	4603      	mov	r3, r0

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037ee:	2002      	movs	r0, #2

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80037f0:	681a      	ldr	r2, [r3, #0]
{
 80037f2:	b430      	push	{r4, r5}
  htim->State = HAL_TIM_STATE_BUSY;
 80037f4:	f883 003d 	strb.w	r0, [r3, #61]	; 0x3d
  tmpcr2 = htim->Instance->CR2;
 80037f8:	6850      	ldr	r0, [r2, #4]
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80037fa:	680c      	ldr	r4, [r1, #0]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80037fc:	4d10      	ldr	r5, [pc, #64]	; (8003840 <HAL_TIMEx_MasterConfigSynchronization+0x5c>)
  tmpcr2 &= ~TIM_CR2_MMS;
 80037fe:	f020 0070 	bic.w	r0, r0, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003802:	4320      	orrs	r0, r4
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003804:	42aa      	cmp	r2, r5
  tmpsmcr = htim->Instance->SMCR;
 8003806:	6894      	ldr	r4, [r2, #8]
  htim->Instance->CR2 = tmpcr2;
 8003808:	6050      	str	r0, [r2, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800380a:	d009      	beq.n	8003820 <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 800380c:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8003810:	d006      	beq.n	8003820 <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 8003812:	480c      	ldr	r0, [pc, #48]	; (8003844 <HAL_TIMEx_MasterConfigSynchronization+0x60>)
 8003814:	4282      	cmp	r2, r0
 8003816:	d003      	beq.n	8003820 <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 8003818:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 800381c:	4282      	cmp	r2, r0
 800381e:	d104      	bne.n	800382a <HAL_TIMEx_MasterConfigSynchronization+0x46>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003820:	6849      	ldr	r1, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003822:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003826:	430c      	orrs	r4, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003828:	6094      	str	r4, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 800382a:	2200      	movs	r2, #0
  htim->State = HAL_TIM_STATE_READY;
 800382c:	2101      	movs	r1, #1
  __HAL_UNLOCK(htim);
 800382e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_READY;
 8003832:	f883 103d 	strb.w	r1, [r3, #61]	; 0x3d

  return HAL_OK;
 8003836:	4610      	mov	r0, r2
}
 8003838:	bc30      	pop	{r4, r5}
 800383a:	4770      	bx	lr
  __HAL_LOCK(htim);
 800383c:	2002      	movs	r0, #2
}
 800383e:	4770      	bx	lr
 8003840:	40012c00 	.word	0x40012c00
 8003844:	40000400 	.word	0x40000400

08003848 <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003848:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800384c:	2b01      	cmp	r3, #1
 800384e:	d023      	beq.n	8003898 <HAL_TIMEx_ConfigBreakDeadTime+0x50>
 8003850:	4602      	mov	r2, r0
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003852:	e9d1 0302 	ldrd	r0, r3, [r1, #8]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;

  __HAL_UNLOCK(htim);
 8003856:	f04f 0c00 	mov.w	ip, #0
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800385a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800385e:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003860:	6848      	ldr	r0, [r1, #4]
 8003862:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003866:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003868:	6808      	ldr	r0, [r1, #0]
 800386a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800386e:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003870:	6908      	ldr	r0, [r1, #16]
 8003872:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
{
 8003876:	b410      	push	{r4}
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003878:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800387a:	694c      	ldr	r4, [r1, #20]
 800387c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003880:	69c8      	ldr	r0, [r1, #28]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003882:	4323      	orrs	r3, r4
  htim->Instance->BDTR = tmpbdtr;
 8003884:	6811      	ldr	r1, [r2, #0]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003886:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800388a:	4303      	orrs	r3, r0
  htim->Instance->BDTR = tmpbdtr;
 800388c:	644b      	str	r3, [r1, #68]	; 0x44
  __HAL_UNLOCK(htim);
 800388e:	f882 c03c 	strb.w	ip, [r2, #60]	; 0x3c

  return HAL_OK;
 8003892:	4660      	mov	r0, ip
}
 8003894:	bc10      	pop	{r4}
 8003896:	4770      	bx	lr
  __HAL_LOCK(htim);
 8003898:	2002      	movs	r0, #2
}
 800389a:	4770      	bx	lr

0800389c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800389c:	b538      	push	{r3, r4, r5, lr}
 800389e:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80038a0:	6803      	ldr	r3, [r0, #0]
 80038a2:	68c1      	ldr	r1, [r0, #12]
 80038a4:	691a      	ldr	r2, [r3, #16]
  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);


  if(huart->Instance == USART1)
 80038a6:	4d1c      	ldr	r5, [pc, #112]	; (8003918 <UART_SetConfig+0x7c>)
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80038a8:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80038ac:	430a      	orrs	r2, r1
 80038ae:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80038b0:	6882      	ldr	r2, [r0, #8]
 80038b2:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1,
 80038b4:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80038b6:	4302      	orrs	r2, r0
 80038b8:	6960      	ldr	r0, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 80038ba:	f421 51b0 	bic.w	r1, r1, #5632	; 0x1600
 80038be:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80038c2:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 80038c4:	430a      	orrs	r2, r1
 80038c6:	60da      	str	r2, [r3, #12]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80038c8:	695a      	ldr	r2, [r3, #20]
 80038ca:	69a1      	ldr	r1, [r4, #24]
 80038cc:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80038d0:	430a      	orrs	r2, r1
  if(huart->Instance == USART1)
 80038d2:	42ab      	cmp	r3, r5
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80038d4:	615a      	str	r2, [r3, #20]
  if(huart->Instance == USART1)
 80038d6:	d01b      	beq.n	8003910 <UART_SetConfig+0x74>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80038d8:	f7ff f8d4 	bl	8002a84 <HAL_RCC_GetPCLK1Freq>
 80038dc:	4603      	mov	r3, r0
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80038de:	6862      	ldr	r2, [r4, #4]
 80038e0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80038e4:	0092      	lsls	r2, r2, #2
 80038e6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80038ea:	fbb3 f3f2 	udiv	r3, r3, r2
 80038ee:	2564      	movs	r5, #100	; 0x64
 80038f0:	490a      	ldr	r1, [pc, #40]	; (800391c <UART_SetConfig+0x80>)
 80038f2:	6820      	ldr	r0, [r4, #0]
 80038f4:	fba1 4203 	umull	r4, r2, r1, r3
 80038f8:	0952      	lsrs	r2, r2, #5
 80038fa:	fb05 3312 	mls	r3, r5, r2, r3
 80038fe:	011b      	lsls	r3, r3, #4
 8003900:	3332      	adds	r3, #50	; 0x32
 8003902:	fba1 1303 	umull	r1, r3, r1, r3
 8003906:	0112      	lsls	r2, r2, #4
 8003908:	eb02 1353 	add.w	r3, r2, r3, lsr #5
 800390c:	6083      	str	r3, [r0, #8]
#endif /* USART_CR1_OVER8 */
}
 800390e:	bd38      	pop	{r3, r4, r5, pc}
    pclk = HAL_RCC_GetPCLK2Freq();
 8003910:	f7ff f8c8 	bl	8002aa4 <HAL_RCC_GetPCLK2Freq>
 8003914:	4603      	mov	r3, r0
 8003916:	e7e2      	b.n	80038de <UART_SetConfig+0x42>
 8003918:	40013800 	.word	0x40013800
 800391c:	51eb851f 	.word	0x51eb851f

08003920 <HAL_UART_Init>:
  if (huart == NULL)
 8003920:	b360      	cbz	r0, 800397c <HAL_UART_Init+0x5c>
{
 8003922:	b538      	push	{r3, r4, r5, lr}
  if (huart->gState == HAL_UART_STATE_RESET)
 8003924:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003928:	4604      	mov	r4, r0
 800392a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800392e:	b303      	cbz	r3, 8003972 <HAL_UART_Init+0x52>
  huart->gState = HAL_UART_STATE_BUSY;
 8003930:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8003932:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8003934:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UART_DISABLE(huart);
 8003938:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 800393a:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 800393c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003940:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8003942:	f7ff ffab 	bl	800389c <UART_SetConfig>
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003946:	2500      	movs	r5, #0
  huart->gState = HAL_UART_STATE_READY;
 8003948:	2120      	movs	r1, #32
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800394a:	6823      	ldr	r3, [r4, #0]
  return HAL_OK;
 800394c:	4628      	mov	r0, r5
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800394e:	691a      	ldr	r2, [r3, #16]
 8003950:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003954:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003956:	695a      	ldr	r2, [r3, #20]
 8003958:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800395c:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 800395e:	68da      	ldr	r2, [r3, #12]
 8003960:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003964:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003966:	6425      	str	r5, [r4, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003968:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800396c:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e
}
 8003970:	bd38      	pop	{r3, r4, r5, pc}
    huart->Lock = HAL_UNLOCKED;
 8003972:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_UART_MspInit(huart);
 8003976:	f7fd fecb 	bl	8001710 <HAL_UART_MspInit>
 800397a:	e7d9      	b.n	8003930 <HAL_UART_Init+0x10>
    return HAL_ERROR;
 800397c:	2001      	movs	r0, #1
}
 800397e:	4770      	bx	lr

08003980 <HAL_UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_READY)
 8003980:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8003984:	2b20      	cmp	r3, #32
 8003986:	d122      	bne.n	80039ce <HAL_UART_Receive_IT+0x4e>
    if ((pData == NULL) || (Size == 0U))
 8003988:	b1f9      	cbz	r1, 80039ca <HAL_UART_Receive_IT+0x4a>
 800398a:	b1f2      	cbz	r2, 80039ca <HAL_UART_Receive_IT+0x4a>
    __HAL_LOCK(huart);
 800398c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8003990:	2b01      	cmp	r3, #1
 8003992:	d01c      	beq.n	80039ce <HAL_UART_Receive_IT+0x4e>
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003994:	2300      	movs	r3, #0
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003996:	f04f 0c22 	mov.w	ip, #34	; 0x22
  huart->pRxBuffPtr = pData;
 800399a:	6281      	str	r1, [r0, #40]	; 0x28
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800399c:	6801      	ldr	r1, [r0, #0]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800399e:	6303      	str	r3, [r0, #48]	; 0x30
  __HAL_UNLOCK(huart);
 80039a0:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  huart->RxXferCount = Size;
 80039a4:	85c2      	strh	r2, [r0, #46]	; 0x2e
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039a6:	6403      	str	r3, [r0, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80039a8:	f880 c03e 	strb.w	ip, [r0, #62]	; 0x3e
  huart->RxXferSize = Size;
 80039ac:	8582      	strh	r2, [r0, #44]	; 0x2c
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80039ae:	68ca      	ldr	r2, [r1, #12]
    return(UART_Start_Receive_IT(huart, pData, Size));
 80039b0:	4618      	mov	r0, r3
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80039b2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80039b6:	60ca      	str	r2, [r1, #12]
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80039b8:	694b      	ldr	r3, [r1, #20]
 80039ba:	f043 0301 	orr.w	r3, r3, #1
 80039be:	614b      	str	r3, [r1, #20]
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80039c0:	68cb      	ldr	r3, [r1, #12]
 80039c2:	f043 0320 	orr.w	r3, r3, #32
 80039c6:	60cb      	str	r3, [r1, #12]
    return(UART_Start_Receive_IT(huart, pData, Size));
 80039c8:	4770      	bx	lr
      return HAL_ERROR;
 80039ca:	2001      	movs	r0, #1
 80039cc:	4770      	bx	lr
    return HAL_BUSY;
 80039ce:	2002      	movs	r0, #2
}
 80039d0:	4770      	bx	lr
 80039d2:	bf00      	nop

080039d4 <HAL_UART_ErrorCallback>:
 80039d4:	4770      	bx	lr
 80039d6:	bf00      	nop

080039d8 <UART_DMAAbortOnError>:
{
 80039d8:	b508      	push	{r3, lr}
  huart->RxXferCount = 0x00U;
 80039da:	2300      	movs	r3, #0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80039dc:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0x00U;
 80039de:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80039e0:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 80039e2:	f7ff fff7 	bl	80039d4 <HAL_UART_ErrorCallback>
}
 80039e6:	bd08      	pop	{r3, pc}

080039e8 <HAL_UARTEx_RxEventCallback>:
}
 80039e8:	4770      	bx	lr
 80039ea:	bf00      	nop

080039ec <UART_Receive_IT.part.0.isra.0>:
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80039ec:	6883      	ldr	r3, [r0, #8]
 80039ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039f2:	d03b      	beq.n	8003a6c <UART_Receive_IT.part.0.isra.0+0x80>
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80039f4:	6a82      	ldr	r2, [r0, #40]	; 0x28
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d030      	beq.n	8003a5c <UART_Receive_IT.part.0.isra.0+0x70>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80039fa:	6803      	ldr	r3, [r0, #0]
 80039fc:	685b      	ldr	r3, [r3, #4]
 80039fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003a02:	7013      	strb	r3, [r2, #0]
      huart->pRxBuffPtr += 1U;
 8003a04:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8003a06:	3301      	adds	r3, #1
 8003a08:	6283      	str	r3, [r0, #40]	; 0x28
    if (--huart->RxXferCount == 0U)
 8003a0a:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 8003a0c:	3b01      	subs	r3, #1
 8003a0e:	b29b      	uxth	r3, r3
 8003a10:	85c3      	strh	r3, [r0, #46]	; 0x2e
 8003a12:	bb53      	cbnz	r3, 8003a6a <UART_Receive_IT.part.0.isra.0+0x7e>
      huart->RxState = HAL_UART_STATE_READY;
 8003a14:	f04f 0c20 	mov.w	ip, #32
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003a18:	6802      	ldr	r2, [r0, #0]
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
 8003a1a:	b500      	push	{lr}
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003a1c:	68d1      	ldr	r1, [r2, #12]
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
 8003a1e:	b083      	sub	sp, #12
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003a20:	f021 0120 	bic.w	r1, r1, #32
 8003a24:	60d1      	str	r1, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003a26:	68d1      	ldr	r1, [r2, #12]
 8003a28:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8003a2c:	60d1      	str	r1, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003a2e:	6951      	ldr	r1, [r2, #20]
 8003a30:	f021 0101 	bic.w	r1, r1, #1
 8003a34:	6151      	str	r1, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8003a36:	f880 c03e 	strb.w	ip, [r0, #62]	; 0x3e
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a3a:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8003a3c:	2901      	cmp	r1, #1
 8003a3e:	d120      	bne.n	8003a82 <UART_Receive_IT.part.0.isra.0+0x96>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a40:	6303      	str	r3, [r0, #48]	; 0x30
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a42:	68d1      	ldr	r1, [r2, #12]
 8003a44:	f021 0110 	bic.w	r1, r1, #16
 8003a48:	60d1      	str	r1, [r2, #12]
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003a4a:	6811      	ldr	r1, [r2, #0]
 8003a4c:	06c9      	lsls	r1, r1, #27
 8003a4e:	d422      	bmi.n	8003a96 <UART_Receive_IT.part.0.isra.0+0xaa>
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003a50:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8003a52:	f7ff ffc9 	bl	80039e8 <HAL_UARTEx_RxEventCallback>
}
 8003a56:	b003      	add	sp, #12
 8003a58:	f85d fb04 	ldr.w	pc, [sp], #4
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003a5c:	6903      	ldr	r3, [r0, #16]
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d1cb      	bne.n	80039fa <UART_Receive_IT.part.0.isra.0+0xe>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003a62:	6803      	ldr	r3, [r0, #0]
 8003a64:	685b      	ldr	r3, [r3, #4]
 8003a66:	7013      	strb	r3, [r2, #0]
 8003a68:	e7cc      	b.n	8003a04 <UART_Receive_IT.part.0.isra.0+0x18>
 8003a6a:	4770      	bx	lr
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a6c:	6903      	ldr	r3, [r0, #16]
 8003a6e:	b96b      	cbnz	r3, 8003a8c <UART_Receive_IT.part.0.isra.0+0xa0>
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003a70:	6802      	ldr	r2, [r0, #0]
 8003a72:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8003a74:	6852      	ldr	r2, [r2, #4]
 8003a76:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003a7a:	f823 2b02 	strh.w	r2, [r3], #2
      huart->pRxBuffPtr += 2U;
 8003a7e:	6283      	str	r3, [r0, #40]	; 0x28
 8003a80:	e7c3      	b.n	8003a0a <UART_Receive_IT.part.0.isra.0+0x1e>
       HAL_UART_RxCpltCallback(huart);
 8003a82:	f7fd fc93 	bl	80013ac <HAL_UART_RxCpltCallback>
}
 8003a86:	b003      	add	sp, #12
 8003a88:	f85d fb04 	ldr.w	pc, [sp], #4
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003a8c:	6803      	ldr	r3, [r0, #0]
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003a8e:	6a82      	ldr	r2, [r0, #40]	; 0x28
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003a90:	685b      	ldr	r3, [r3, #4]
 8003a92:	7013      	strb	r3, [r2, #0]
 8003a94:	e7b6      	b.n	8003a04 <UART_Receive_IT.part.0.isra.0+0x18>
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003a96:	9301      	str	r3, [sp, #4]
 8003a98:	6813      	ldr	r3, [r2, #0]
 8003a9a:	9301      	str	r3, [sp, #4]
 8003a9c:	6853      	ldr	r3, [r2, #4]
 8003a9e:	9301      	str	r3, [sp, #4]
 8003aa0:	9b01      	ldr	r3, [sp, #4]
 8003aa2:	e7d5      	b.n	8003a50 <UART_Receive_IT.part.0.isra.0+0x64>

08003aa4 <HAL_UART_IRQHandler>:
{
 8003aa4:	b530      	push	{r4, r5, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003aa6:	6803      	ldr	r3, [r0, #0]
{
 8003aa8:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003aaa:	681a      	ldr	r2, [r3, #0]
{
 8003aac:	b083      	sub	sp, #12
  if (errorflags == RESET)
 8003aae:	f012 0f0f 	tst.w	r2, #15
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003ab2:	68d9      	ldr	r1, [r3, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003ab4:	695d      	ldr	r5, [r3, #20]
  if (errorflags == RESET)
 8003ab6:	d14e      	bne.n	8003b56 <HAL_UART_IRQHandler+0xb2>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003ab8:	0695      	lsls	r5, r2, #26
 8003aba:	d502      	bpl.n	8003ac2 <HAL_UART_IRQHandler+0x1e>
 8003abc:	068d      	lsls	r5, r1, #26
 8003abe:	f100 80b3 	bmi.w	8003c28 <HAL_UART_IRQHandler+0x184>
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ac2:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8003ac4:	2801      	cmp	r0, #1
 8003ac6:	d00b      	beq.n	8003ae0 <HAL_UART_IRQHandler+0x3c>
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003ac8:	0610      	lsls	r0, r2, #24
 8003aca:	d502      	bpl.n	8003ad2 <HAL_UART_IRQHandler+0x2e>
 8003acc:	060d      	lsls	r5, r1, #24
 8003ace:	f100 8081 	bmi.w	8003bd4 <HAL_UART_IRQHandler+0x130>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003ad2:	0650      	lsls	r0, r2, #25
 8003ad4:	d502      	bpl.n	8003adc <HAL_UART_IRQHandler+0x38>
 8003ad6:	064a      	lsls	r2, r1, #25
 8003ad8:	f100 809b 	bmi.w	8003c12 <HAL_UART_IRQHandler+0x16e>
}
 8003adc:	b003      	add	sp, #12
 8003ade:	bd30      	pop	{r4, r5, pc}
      &&((isrflags & USART_SR_IDLE) != 0U)
 8003ae0:	06d0      	lsls	r0, r2, #27
 8003ae2:	d5f1      	bpl.n	8003ac8 <HAL_UART_IRQHandler+0x24>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8003ae4:	06cd      	lsls	r5, r1, #27
 8003ae6:	d5ef      	bpl.n	8003ac8 <HAL_UART_IRQHandler+0x24>
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003ae8:	2100      	movs	r1, #0
 8003aea:	9101      	str	r1, [sp, #4]
 8003aec:	681a      	ldr	r2, [r3, #0]
 8003aee:	9201      	str	r2, [sp, #4]
 8003af0:	685a      	ldr	r2, [r3, #4]
 8003af2:	9201      	str	r2, [sp, #4]
 8003af4:	9a01      	ldr	r2, [sp, #4]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003af6:	695a      	ldr	r2, [r3, #20]
 8003af8:	f012 0240 	ands.w	r2, r2, #64	; 0x40
 8003afc:	f000 80cc 	beq.w	8003c98 <HAL_UART_IRQHandler+0x1f4>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003b00:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8003b02:	6802      	ldr	r2, [r0, #0]
 8003b04:	6852      	ldr	r2, [r2, #4]
 8003b06:	b292      	uxth	r2, r2
      if (  (nb_remaining_rx_data > 0U)
 8003b08:	2a00      	cmp	r2, #0
 8003b0a:	d0e7      	beq.n	8003adc <HAL_UART_IRQHandler+0x38>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8003b0c:	8da5      	ldrh	r5, [r4, #44]	; 0x2c
 8003b0e:	4295      	cmp	r5, r2
 8003b10:	d9e4      	bls.n	8003adc <HAL_UART_IRQHandler+0x38>
        huart->RxXferCount = nb_remaining_rx_data;
 8003b12:	85e2      	strh	r2, [r4, #46]	; 0x2e
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003b14:	6982      	ldr	r2, [r0, #24]
 8003b16:	2a20      	cmp	r2, #32
 8003b18:	d016      	beq.n	8003b48 <HAL_UART_IRQHandler+0xa4>
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003b1a:	68da      	ldr	r2, [r3, #12]
 8003b1c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003b20:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b22:	695a      	ldr	r2, [r3, #20]
 8003b24:	f022 0201 	bic.w	r2, r2, #1
 8003b28:	615a      	str	r2, [r3, #20]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003b2a:	695a      	ldr	r2, [r3, #20]
 8003b2c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b30:	615a      	str	r2, [r3, #20]
          huart->RxState = HAL_UART_STATE_READY;
 8003b32:	2220      	movs	r2, #32
 8003b34:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b38:	6321      	str	r1, [r4, #48]	; 0x30
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b3a:	68da      	ldr	r2, [r3, #12]
 8003b3c:	f022 0210 	bic.w	r2, r2, #16
 8003b40:	60da      	str	r2, [r3, #12]
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003b42:	f7fe fabb 	bl	80020bc <HAL_DMA_Abort>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003b46:	8da5      	ldrh	r5, [r4, #44]	; 0x2c
 8003b48:	8de1      	ldrh	r1, [r4, #46]	; 0x2e
 8003b4a:	4620      	mov	r0, r4
 8003b4c:	1a69      	subs	r1, r5, r1
 8003b4e:	b289      	uxth	r1, r1
 8003b50:	f7ff ff4a 	bl	80039e8 <HAL_UARTEx_RxEventCallback>
 8003b54:	e7c2      	b.n	8003adc <HAL_UART_IRQHandler+0x38>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003b56:	f005 0501 	and.w	r5, r5, #1
 8003b5a:	f401 7090 	and.w	r0, r1, #288	; 0x120
 8003b5e:	4328      	orrs	r0, r5
 8003b60:	d0af      	beq.n	8003ac2 <HAL_UART_IRQHandler+0x1e>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003b62:	07d0      	lsls	r0, r2, #31
 8003b64:	d505      	bpl.n	8003b72 <HAL_UART_IRQHandler+0xce>
 8003b66:	05c8      	lsls	r0, r1, #23
 8003b68:	d503      	bpl.n	8003b72 <HAL_UART_IRQHandler+0xce>
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003b6a:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8003b6c:	f040 0001 	orr.w	r0, r0, #1
 8003b70:	6420      	str	r0, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003b72:	0750      	lsls	r0, r2, #29
 8003b74:	d529      	bpl.n	8003bca <HAL_UART_IRQHandler+0x126>
 8003b76:	b14d      	cbz	r5, 8003b8c <HAL_UART_IRQHandler+0xe8>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003b78:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8003b7a:	f040 0002 	orr.w	r0, r0, #2
 8003b7e:	6420      	str	r0, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003b80:	0790      	lsls	r0, r2, #30
 8003b82:	d503      	bpl.n	8003b8c <HAL_UART_IRQHandler+0xe8>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003b84:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8003b86:	f040 0004 	orr.w	r0, r0, #4
 8003b8a:	6420      	str	r0, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003b8c:	0710      	lsls	r0, r2, #28
 8003b8e:	d507      	bpl.n	8003ba0 <HAL_UART_IRQHandler+0xfc>
 8003b90:	f001 0020 	and.w	r0, r1, #32
 8003b94:	4328      	orrs	r0, r5
 8003b96:	d003      	beq.n	8003ba0 <HAL_UART_IRQHandler+0xfc>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003b98:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8003b9a:	f040 0008 	orr.w	r0, r0, #8
 8003b9e:	6420      	str	r0, [r4, #64]	; 0x40
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003ba0:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8003ba2:	2800      	cmp	r0, #0
 8003ba4:	d09a      	beq.n	8003adc <HAL_UART_IRQHandler+0x38>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003ba6:	0690      	lsls	r0, r2, #26
 8003ba8:	d502      	bpl.n	8003bb0 <HAL_UART_IRQHandler+0x10c>
 8003baa:	068a      	lsls	r2, r1, #26
 8003bac:	f100 8095 	bmi.w	8003cda <HAL_UART_IRQHandler+0x236>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003bb0:	695a      	ldr	r2, [r3, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003bb2:	6c25      	ldr	r5, [r4, #64]	; 0x40
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003bb4:	f002 0240 	and.w	r2, r2, #64	; 0x40
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003bb8:	f005 0508 	and.w	r5, r5, #8
 8003bbc:	4315      	orrs	r5, r2
 8003bbe:	d13d      	bne.n	8003c3c <HAL_UART_IRQHandler+0x198>
        HAL_UART_ErrorCallback(huart);
 8003bc0:	4620      	mov	r0, r4
 8003bc2:	f7ff ff07 	bl	80039d4 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003bc6:	6425      	str	r5, [r4, #64]	; 0x40
 8003bc8:	e788      	b.n	8003adc <HAL_UART_IRQHandler+0x38>
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003bca:	0790      	lsls	r0, r2, #30
 8003bcc:	d5de      	bpl.n	8003b8c <HAL_UART_IRQHandler+0xe8>
 8003bce:	2d00      	cmp	r5, #0
 8003bd0:	d0dc      	beq.n	8003b8c <HAL_UART_IRQHandler+0xe8>
 8003bd2:	e7d7      	b.n	8003b84 <HAL_UART_IRQHandler+0xe0>
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003bd4:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 8003bd8:	2a21      	cmp	r2, #33	; 0x21
 8003bda:	f47f af7f 	bne.w	8003adc <HAL_UART_IRQHandler+0x38>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003bde:	68a2      	ldr	r2, [r4, #8]
 8003be0:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8003be4:	f000 8083 	beq.w	8003cee <HAL_UART_IRQHandler+0x24a>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003be8:	6a22      	ldr	r2, [r4, #32]
 8003bea:	1c51      	adds	r1, r2, #1
 8003bec:	6221      	str	r1, [r4, #32]
 8003bee:	7812      	ldrb	r2, [r2, #0]
 8003bf0:	605a      	str	r2, [r3, #4]
    if (--huart->TxXferCount == 0U)
 8003bf2:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 8003bf4:	3a01      	subs	r2, #1
 8003bf6:	b292      	uxth	r2, r2
 8003bf8:	84e2      	strh	r2, [r4, #38]	; 0x26
 8003bfa:	2a00      	cmp	r2, #0
 8003bfc:	f47f af6e 	bne.w	8003adc <HAL_UART_IRQHandler+0x38>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003c00:	68da      	ldr	r2, [r3, #12]
 8003c02:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003c06:	60da      	str	r2, [r3, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003c08:	68da      	ldr	r2, [r3, #12]
 8003c0a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003c0e:	60da      	str	r2, [r3, #12]
 8003c10:	e764      	b.n	8003adc <HAL_UART_IRQHandler+0x38>
  huart->gState = HAL_UART_STATE_READY;
 8003c12:	2120      	movs	r1, #32
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003c14:	68da      	ldr	r2, [r3, #12]
  HAL_UART_TxCpltCallback(huart);
 8003c16:	4620      	mov	r0, r4
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003c18:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c1c:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8003c1e:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
  HAL_UART_TxCpltCallback(huart);
 8003c22:	f7fd fbdb 	bl	80013dc <HAL_UART_TxCpltCallback>
  return HAL_OK;
 8003c26:	e759      	b.n	8003adc <HAL_UART_IRQHandler+0x38>
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003c28:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8003c2c:	2b22      	cmp	r3, #34	; 0x22
 8003c2e:	f47f af55 	bne.w	8003adc <HAL_UART_IRQHandler+0x38>
}
 8003c32:	b003      	add	sp, #12
 8003c34:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003c38:	f7ff bed8 	b.w	80039ec <UART_Receive_IT.part.0.isra.0>
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003c3c:	68da      	ldr	r2, [r3, #12]
 8003c3e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003c42:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c44:	695a      	ldr	r2, [r3, #20]
 8003c46:	f022 0201 	bic.w	r2, r2, #1
 8003c4a:	615a      	str	r2, [r3, #20]
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c4c:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8003c4e:	2a01      	cmp	r2, #1
 8003c50:	d103      	bne.n	8003c5a <HAL_UART_IRQHandler+0x1b6>
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c52:	68da      	ldr	r2, [r3, #12]
 8003c54:	f022 0210 	bic.w	r2, r2, #16
 8003c58:	60da      	str	r2, [r3, #12]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c5a:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 8003c5c:	2120      	movs	r1, #32
 8003c5e:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c62:	6322      	str	r2, [r4, #48]	; 0x30
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c64:	695a      	ldr	r2, [r3, #20]
 8003c66:	0655      	lsls	r5, r2, #25
 8003c68:	d512      	bpl.n	8003c90 <HAL_UART_IRQHandler+0x1ec>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003c6a:	695a      	ldr	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 8003c6c:	6ba0      	ldr	r0, [r4, #56]	; 0x38
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003c6e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c72:	615a      	str	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 8003c74:	b160      	cbz	r0, 8003c90 <HAL_UART_IRQHandler+0x1ec>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003c76:	4b24      	ldr	r3, [pc, #144]	; (8003d08 <HAL_UART_IRQHandler+0x264>)
 8003c78:	6343      	str	r3, [r0, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003c7a:	f7fe fa41 	bl	8002100 <HAL_DMA_Abort_IT>
 8003c7e:	2800      	cmp	r0, #0
 8003c80:	f43f af2c 	beq.w	8003adc <HAL_UART_IRQHandler+0x38>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003c84:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8003c86:	6b43      	ldr	r3, [r0, #52]	; 0x34
}
 8003c88:	b003      	add	sp, #12
 8003c8a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003c8e:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 8003c90:	4620      	mov	r0, r4
 8003c92:	f7ff fe9f 	bl	80039d4 <HAL_UART_ErrorCallback>
 8003c96:	e721      	b.n	8003adc <HAL_UART_IRQHandler+0x38>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003c98:	8de0      	ldrh	r0, [r4, #46]	; 0x2e
      if (  (huart->RxXferCount > 0U)
 8003c9a:	8de1      	ldrh	r1, [r4, #46]	; 0x2e
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003c9c:	b280      	uxth	r0, r0
      if (  (huart->RxXferCount > 0U)
 8003c9e:	b289      	uxth	r1, r1
 8003ca0:	2900      	cmp	r1, #0
 8003ca2:	f43f af1b 	beq.w	8003adc <HAL_UART_IRQHandler+0x38>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003ca6:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 8003ca8:	1a08      	subs	r0, r1, r0
 8003caa:	b281      	uxth	r1, r0
          &&(nb_rx_data > 0U) )
 8003cac:	2900      	cmp	r1, #0
 8003cae:	f43f af15 	beq.w	8003adc <HAL_UART_IRQHandler+0x38>
        huart->RxState = HAL_UART_STATE_READY;
 8003cb2:	2520      	movs	r5, #32
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003cb4:	68d8      	ldr	r0, [r3, #12]
 8003cb6:	f420 7090 	bic.w	r0, r0, #288	; 0x120
 8003cba:	60d8      	str	r0, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003cbc:	6958      	ldr	r0, [r3, #20]
 8003cbe:	f020 0001 	bic.w	r0, r0, #1
 8003cc2:	6158      	str	r0, [r3, #20]
        huart->RxState = HAL_UART_STATE_READY;
 8003cc4:	f884 503e 	strb.w	r5, [r4, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003cc8:	6322      	str	r2, [r4, #48]	; 0x30
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003cca:	68da      	ldr	r2, [r3, #12]
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003ccc:	4620      	mov	r0, r4
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003cce:	f022 0210 	bic.w	r2, r2, #16
 8003cd2:	60da      	str	r2, [r3, #12]
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003cd4:	f7ff fe88 	bl	80039e8 <HAL_UARTEx_RxEventCallback>
 8003cd8:	e700      	b.n	8003adc <HAL_UART_IRQHandler+0x38>
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003cda:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
 8003cde:	2a22      	cmp	r2, #34	; 0x22
 8003ce0:	f47f af66 	bne.w	8003bb0 <HAL_UART_IRQHandler+0x10c>
 8003ce4:	4620      	mov	r0, r4
 8003ce6:	f7ff fe81 	bl	80039ec <UART_Receive_IT.part.0.isra.0>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003cea:	6823      	ldr	r3, [r4, #0]
 8003cec:	e760      	b.n	8003bb0 <HAL_UART_IRQHandler+0x10c>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003cee:	6922      	ldr	r2, [r4, #16]
 8003cf0:	2a00      	cmp	r2, #0
 8003cf2:	f47f af79 	bne.w	8003be8 <HAL_UART_IRQHandler+0x144>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003cf6:	6a22      	ldr	r2, [r4, #32]
 8003cf8:	f832 1b02 	ldrh.w	r1, [r2], #2
 8003cfc:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8003d00:	6059      	str	r1, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003d02:	6222      	str	r2, [r4, #32]
 8003d04:	e775      	b.n	8003bf2 <HAL_UART_IRQHandler+0x14e>
 8003d06:	bf00      	nop
 8003d08:	080039d9 	.word	0x080039d9

08003d0c <__errno>:
 8003d0c:	4b01      	ldr	r3, [pc, #4]	; (8003d14 <__errno+0x8>)
 8003d0e:	6818      	ldr	r0, [r3, #0]
 8003d10:	4770      	bx	lr
 8003d12:	bf00      	nop
 8003d14:	20000020 	.word	0x20000020

08003d18 <__libc_init_array>:
 8003d18:	b570      	push	{r4, r5, r6, lr}
 8003d1a:	2600      	movs	r6, #0
 8003d1c:	4d0c      	ldr	r5, [pc, #48]	; (8003d50 <__libc_init_array+0x38>)
 8003d1e:	4c0d      	ldr	r4, [pc, #52]	; (8003d54 <__libc_init_array+0x3c>)
 8003d20:	1b64      	subs	r4, r4, r5
 8003d22:	10a4      	asrs	r4, r4, #2
 8003d24:	42a6      	cmp	r6, r4
 8003d26:	d109      	bne.n	8003d3c <__libc_init_array+0x24>
 8003d28:	f002 ff2a 	bl	8006b80 <_init>
 8003d2c:	2600      	movs	r6, #0
 8003d2e:	4d0a      	ldr	r5, [pc, #40]	; (8003d58 <__libc_init_array+0x40>)
 8003d30:	4c0a      	ldr	r4, [pc, #40]	; (8003d5c <__libc_init_array+0x44>)
 8003d32:	1b64      	subs	r4, r4, r5
 8003d34:	10a4      	asrs	r4, r4, #2
 8003d36:	42a6      	cmp	r6, r4
 8003d38:	d105      	bne.n	8003d46 <__libc_init_array+0x2e>
 8003d3a:	bd70      	pop	{r4, r5, r6, pc}
 8003d3c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d40:	4798      	blx	r3
 8003d42:	3601      	adds	r6, #1
 8003d44:	e7ee      	b.n	8003d24 <__libc_init_array+0xc>
 8003d46:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d4a:	4798      	blx	r3
 8003d4c:	3601      	adds	r6, #1
 8003d4e:	e7f2      	b.n	8003d36 <__libc_init_array+0x1e>
 8003d50:	0800750c 	.word	0x0800750c
 8003d54:	0800750c 	.word	0x0800750c
 8003d58:	0800750c 	.word	0x0800750c
 8003d5c:	08007510 	.word	0x08007510

08003d60 <memcpy>:
 8003d60:	440a      	add	r2, r1
 8003d62:	4291      	cmp	r1, r2
 8003d64:	f100 33ff 	add.w	r3, r0, #4294967295
 8003d68:	d100      	bne.n	8003d6c <memcpy+0xc>
 8003d6a:	4770      	bx	lr
 8003d6c:	b510      	push	{r4, lr}
 8003d6e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003d72:	4291      	cmp	r1, r2
 8003d74:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003d78:	d1f9      	bne.n	8003d6e <memcpy+0xe>
 8003d7a:	bd10      	pop	{r4, pc}

08003d7c <memset>:
 8003d7c:	4603      	mov	r3, r0
 8003d7e:	4402      	add	r2, r0
 8003d80:	4293      	cmp	r3, r2
 8003d82:	d100      	bne.n	8003d86 <memset+0xa>
 8003d84:	4770      	bx	lr
 8003d86:	f803 1b01 	strb.w	r1, [r3], #1
 8003d8a:	e7f9      	b.n	8003d80 <memset+0x4>

08003d8c <__cvt>:
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003d92:	461f      	mov	r7, r3
 8003d94:	bfbb      	ittet	lt
 8003d96:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8003d9a:	461f      	movlt	r7, r3
 8003d9c:	2300      	movge	r3, #0
 8003d9e:	232d      	movlt	r3, #45	; 0x2d
 8003da0:	b088      	sub	sp, #32
 8003da2:	4614      	mov	r4, r2
 8003da4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8003da6:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8003da8:	7013      	strb	r3, [r2, #0]
 8003daa:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8003dac:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8003db0:	f023 0820 	bic.w	r8, r3, #32
 8003db4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003db8:	d005      	beq.n	8003dc6 <__cvt+0x3a>
 8003dba:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8003dbe:	d100      	bne.n	8003dc2 <__cvt+0x36>
 8003dc0:	3501      	adds	r5, #1
 8003dc2:	2302      	movs	r3, #2
 8003dc4:	e000      	b.n	8003dc8 <__cvt+0x3c>
 8003dc6:	2303      	movs	r3, #3
 8003dc8:	aa07      	add	r2, sp, #28
 8003dca:	9204      	str	r2, [sp, #16]
 8003dcc:	aa06      	add	r2, sp, #24
 8003dce:	e9cd a202 	strd	sl, r2, [sp, #8]
 8003dd2:	e9cd 3500 	strd	r3, r5, [sp]
 8003dd6:	4622      	mov	r2, r4
 8003dd8:	463b      	mov	r3, r7
 8003dda:	f000 fd11 	bl	8004800 <_dtoa_r>
 8003dde:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8003de2:	4606      	mov	r6, r0
 8003de4:	d102      	bne.n	8003dec <__cvt+0x60>
 8003de6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003de8:	07db      	lsls	r3, r3, #31
 8003dea:	d522      	bpl.n	8003e32 <__cvt+0xa6>
 8003dec:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003df0:	eb06 0905 	add.w	r9, r6, r5
 8003df4:	d110      	bne.n	8003e18 <__cvt+0x8c>
 8003df6:	7833      	ldrb	r3, [r6, #0]
 8003df8:	2b30      	cmp	r3, #48	; 0x30
 8003dfa:	d10a      	bne.n	8003e12 <__cvt+0x86>
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	2300      	movs	r3, #0
 8003e00:	4620      	mov	r0, r4
 8003e02:	4639      	mov	r1, r7
 8003e04:	f7fc fdd0 	bl	80009a8 <__aeabi_dcmpeq>
 8003e08:	b918      	cbnz	r0, 8003e12 <__cvt+0x86>
 8003e0a:	f1c5 0501 	rsb	r5, r5, #1
 8003e0e:	f8ca 5000 	str.w	r5, [sl]
 8003e12:	f8da 3000 	ldr.w	r3, [sl]
 8003e16:	4499      	add	r9, r3
 8003e18:	2200      	movs	r2, #0
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	4620      	mov	r0, r4
 8003e1e:	4639      	mov	r1, r7
 8003e20:	f7fc fdc2 	bl	80009a8 <__aeabi_dcmpeq>
 8003e24:	b108      	cbz	r0, 8003e2a <__cvt+0x9e>
 8003e26:	f8cd 901c 	str.w	r9, [sp, #28]
 8003e2a:	2230      	movs	r2, #48	; 0x30
 8003e2c:	9b07      	ldr	r3, [sp, #28]
 8003e2e:	454b      	cmp	r3, r9
 8003e30:	d307      	bcc.n	8003e42 <__cvt+0xb6>
 8003e32:	4630      	mov	r0, r6
 8003e34:	9b07      	ldr	r3, [sp, #28]
 8003e36:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8003e38:	1b9b      	subs	r3, r3, r6
 8003e3a:	6013      	str	r3, [r2, #0]
 8003e3c:	b008      	add	sp, #32
 8003e3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e42:	1c59      	adds	r1, r3, #1
 8003e44:	9107      	str	r1, [sp, #28]
 8003e46:	701a      	strb	r2, [r3, #0]
 8003e48:	e7f0      	b.n	8003e2c <__cvt+0xa0>

08003e4a <__exponent>:
 8003e4a:	4603      	mov	r3, r0
 8003e4c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003e4e:	2900      	cmp	r1, #0
 8003e50:	f803 2b02 	strb.w	r2, [r3], #2
 8003e54:	bfb6      	itet	lt
 8003e56:	222d      	movlt	r2, #45	; 0x2d
 8003e58:	222b      	movge	r2, #43	; 0x2b
 8003e5a:	4249      	neglt	r1, r1
 8003e5c:	2909      	cmp	r1, #9
 8003e5e:	7042      	strb	r2, [r0, #1]
 8003e60:	dd2b      	ble.n	8003eba <__exponent+0x70>
 8003e62:	f10d 0407 	add.w	r4, sp, #7
 8003e66:	46a4      	mov	ip, r4
 8003e68:	270a      	movs	r7, #10
 8003e6a:	fb91 f6f7 	sdiv	r6, r1, r7
 8003e6e:	460a      	mov	r2, r1
 8003e70:	46a6      	mov	lr, r4
 8003e72:	fb07 1516 	mls	r5, r7, r6, r1
 8003e76:	2a63      	cmp	r2, #99	; 0x63
 8003e78:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8003e7c:	4631      	mov	r1, r6
 8003e7e:	f104 34ff 	add.w	r4, r4, #4294967295
 8003e82:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8003e86:	dcf0      	bgt.n	8003e6a <__exponent+0x20>
 8003e88:	3130      	adds	r1, #48	; 0x30
 8003e8a:	f1ae 0502 	sub.w	r5, lr, #2
 8003e8e:	f804 1c01 	strb.w	r1, [r4, #-1]
 8003e92:	4629      	mov	r1, r5
 8003e94:	1c44      	adds	r4, r0, #1
 8003e96:	4561      	cmp	r1, ip
 8003e98:	d30a      	bcc.n	8003eb0 <__exponent+0x66>
 8003e9a:	f10d 0209 	add.w	r2, sp, #9
 8003e9e:	eba2 020e 	sub.w	r2, r2, lr
 8003ea2:	4565      	cmp	r5, ip
 8003ea4:	bf88      	it	hi
 8003ea6:	2200      	movhi	r2, #0
 8003ea8:	4413      	add	r3, r2
 8003eaa:	1a18      	subs	r0, r3, r0
 8003eac:	b003      	add	sp, #12
 8003eae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003eb0:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003eb4:	f804 2f01 	strb.w	r2, [r4, #1]!
 8003eb8:	e7ed      	b.n	8003e96 <__exponent+0x4c>
 8003eba:	2330      	movs	r3, #48	; 0x30
 8003ebc:	3130      	adds	r1, #48	; 0x30
 8003ebe:	7083      	strb	r3, [r0, #2]
 8003ec0:	70c1      	strb	r1, [r0, #3]
 8003ec2:	1d03      	adds	r3, r0, #4
 8003ec4:	e7f1      	b.n	8003eaa <__exponent+0x60>
	...

08003ec8 <_printf_float>:
 8003ec8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ecc:	b091      	sub	sp, #68	; 0x44
 8003ece:	460c      	mov	r4, r1
 8003ed0:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8003ed4:	4616      	mov	r6, r2
 8003ed6:	461f      	mov	r7, r3
 8003ed8:	4605      	mov	r5, r0
 8003eda:	f001 fb75 	bl	80055c8 <_localeconv_r>
 8003ede:	6803      	ldr	r3, [r0, #0]
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	9309      	str	r3, [sp, #36]	; 0x24
 8003ee4:	f7fc f934 	bl	8000150 <strlen>
 8003ee8:	2300      	movs	r3, #0
 8003eea:	930e      	str	r3, [sp, #56]	; 0x38
 8003eec:	f8d8 3000 	ldr.w	r3, [r8]
 8003ef0:	900a      	str	r0, [sp, #40]	; 0x28
 8003ef2:	3307      	adds	r3, #7
 8003ef4:	f023 0307 	bic.w	r3, r3, #7
 8003ef8:	f103 0208 	add.w	r2, r3, #8
 8003efc:	f894 9018 	ldrb.w	r9, [r4, #24]
 8003f00:	f8d4 b000 	ldr.w	fp, [r4]
 8003f04:	f8c8 2000 	str.w	r2, [r8]
 8003f08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f0c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8003f10:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8003f14:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8003f18:	930b      	str	r3, [sp, #44]	; 0x2c
 8003f1a:	f04f 32ff 	mov.w	r2, #4294967295
 8003f1e:	4640      	mov	r0, r8
 8003f20:	4b9c      	ldr	r3, [pc, #624]	; (8004194 <_printf_float+0x2cc>)
 8003f22:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003f24:	f7fc fd72 	bl	8000a0c <__aeabi_dcmpun>
 8003f28:	bb70      	cbnz	r0, 8003f88 <_printf_float+0xc0>
 8003f2a:	f04f 32ff 	mov.w	r2, #4294967295
 8003f2e:	4640      	mov	r0, r8
 8003f30:	4b98      	ldr	r3, [pc, #608]	; (8004194 <_printf_float+0x2cc>)
 8003f32:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003f34:	f7fc fd4c 	bl	80009d0 <__aeabi_dcmple>
 8003f38:	bb30      	cbnz	r0, 8003f88 <_printf_float+0xc0>
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	2300      	movs	r3, #0
 8003f3e:	4640      	mov	r0, r8
 8003f40:	4651      	mov	r1, sl
 8003f42:	f7fc fd3b 	bl	80009bc <__aeabi_dcmplt>
 8003f46:	b110      	cbz	r0, 8003f4e <_printf_float+0x86>
 8003f48:	232d      	movs	r3, #45	; 0x2d
 8003f4a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003f4e:	4b92      	ldr	r3, [pc, #584]	; (8004198 <_printf_float+0x2d0>)
 8003f50:	4892      	ldr	r0, [pc, #584]	; (800419c <_printf_float+0x2d4>)
 8003f52:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8003f56:	bf94      	ite	ls
 8003f58:	4698      	movls	r8, r3
 8003f5a:	4680      	movhi	r8, r0
 8003f5c:	2303      	movs	r3, #3
 8003f5e:	f04f 0a00 	mov.w	sl, #0
 8003f62:	6123      	str	r3, [r4, #16]
 8003f64:	f02b 0304 	bic.w	r3, fp, #4
 8003f68:	6023      	str	r3, [r4, #0]
 8003f6a:	4633      	mov	r3, r6
 8003f6c:	4621      	mov	r1, r4
 8003f6e:	4628      	mov	r0, r5
 8003f70:	9700      	str	r7, [sp, #0]
 8003f72:	aa0f      	add	r2, sp, #60	; 0x3c
 8003f74:	f000 f9d4 	bl	8004320 <_printf_common>
 8003f78:	3001      	adds	r0, #1
 8003f7a:	f040 8090 	bne.w	800409e <_printf_float+0x1d6>
 8003f7e:	f04f 30ff 	mov.w	r0, #4294967295
 8003f82:	b011      	add	sp, #68	; 0x44
 8003f84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003f88:	4642      	mov	r2, r8
 8003f8a:	4653      	mov	r3, sl
 8003f8c:	4640      	mov	r0, r8
 8003f8e:	4651      	mov	r1, sl
 8003f90:	f7fc fd3c 	bl	8000a0c <__aeabi_dcmpun>
 8003f94:	b148      	cbz	r0, 8003faa <_printf_float+0xe2>
 8003f96:	f1ba 0f00 	cmp.w	sl, #0
 8003f9a:	bfb8      	it	lt
 8003f9c:	232d      	movlt	r3, #45	; 0x2d
 8003f9e:	4880      	ldr	r0, [pc, #512]	; (80041a0 <_printf_float+0x2d8>)
 8003fa0:	bfb8      	it	lt
 8003fa2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8003fa6:	4b7f      	ldr	r3, [pc, #508]	; (80041a4 <_printf_float+0x2dc>)
 8003fa8:	e7d3      	b.n	8003f52 <_printf_float+0x8a>
 8003faa:	6863      	ldr	r3, [r4, #4]
 8003fac:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8003fb0:	1c5a      	adds	r2, r3, #1
 8003fb2:	d142      	bne.n	800403a <_printf_float+0x172>
 8003fb4:	2306      	movs	r3, #6
 8003fb6:	6063      	str	r3, [r4, #4]
 8003fb8:	2200      	movs	r2, #0
 8003fba:	9206      	str	r2, [sp, #24]
 8003fbc:	aa0e      	add	r2, sp, #56	; 0x38
 8003fbe:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8003fc2:	aa0d      	add	r2, sp, #52	; 0x34
 8003fc4:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8003fc8:	9203      	str	r2, [sp, #12]
 8003fca:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8003fce:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8003fd2:	6023      	str	r3, [r4, #0]
 8003fd4:	6863      	ldr	r3, [r4, #4]
 8003fd6:	4642      	mov	r2, r8
 8003fd8:	9300      	str	r3, [sp, #0]
 8003fda:	4628      	mov	r0, r5
 8003fdc:	4653      	mov	r3, sl
 8003fde:	910b      	str	r1, [sp, #44]	; 0x2c
 8003fe0:	f7ff fed4 	bl	8003d8c <__cvt>
 8003fe4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003fe6:	4680      	mov	r8, r0
 8003fe8:	2947      	cmp	r1, #71	; 0x47
 8003fea:	990d      	ldr	r1, [sp, #52]	; 0x34
 8003fec:	d108      	bne.n	8004000 <_printf_float+0x138>
 8003fee:	1cc8      	adds	r0, r1, #3
 8003ff0:	db02      	blt.n	8003ff8 <_printf_float+0x130>
 8003ff2:	6863      	ldr	r3, [r4, #4]
 8003ff4:	4299      	cmp	r1, r3
 8003ff6:	dd40      	ble.n	800407a <_printf_float+0x1b2>
 8003ff8:	f1a9 0902 	sub.w	r9, r9, #2
 8003ffc:	fa5f f989 	uxtb.w	r9, r9
 8004000:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004004:	d81f      	bhi.n	8004046 <_printf_float+0x17e>
 8004006:	464a      	mov	r2, r9
 8004008:	3901      	subs	r1, #1
 800400a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800400e:	910d      	str	r1, [sp, #52]	; 0x34
 8004010:	f7ff ff1b 	bl	8003e4a <__exponent>
 8004014:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004016:	4682      	mov	sl, r0
 8004018:	1813      	adds	r3, r2, r0
 800401a:	2a01      	cmp	r2, #1
 800401c:	6123      	str	r3, [r4, #16]
 800401e:	dc02      	bgt.n	8004026 <_printf_float+0x15e>
 8004020:	6822      	ldr	r2, [r4, #0]
 8004022:	07d2      	lsls	r2, r2, #31
 8004024:	d501      	bpl.n	800402a <_printf_float+0x162>
 8004026:	3301      	adds	r3, #1
 8004028:	6123      	str	r3, [r4, #16]
 800402a:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800402e:	2b00      	cmp	r3, #0
 8004030:	d09b      	beq.n	8003f6a <_printf_float+0xa2>
 8004032:	232d      	movs	r3, #45	; 0x2d
 8004034:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004038:	e797      	b.n	8003f6a <_printf_float+0xa2>
 800403a:	2947      	cmp	r1, #71	; 0x47
 800403c:	d1bc      	bne.n	8003fb8 <_printf_float+0xf0>
 800403e:	2b00      	cmp	r3, #0
 8004040:	d1ba      	bne.n	8003fb8 <_printf_float+0xf0>
 8004042:	2301      	movs	r3, #1
 8004044:	e7b7      	b.n	8003fb6 <_printf_float+0xee>
 8004046:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800404a:	d118      	bne.n	800407e <_printf_float+0x1b6>
 800404c:	2900      	cmp	r1, #0
 800404e:	6863      	ldr	r3, [r4, #4]
 8004050:	dd0b      	ble.n	800406a <_printf_float+0x1a2>
 8004052:	6121      	str	r1, [r4, #16]
 8004054:	b913      	cbnz	r3, 800405c <_printf_float+0x194>
 8004056:	6822      	ldr	r2, [r4, #0]
 8004058:	07d0      	lsls	r0, r2, #31
 800405a:	d502      	bpl.n	8004062 <_printf_float+0x19a>
 800405c:	3301      	adds	r3, #1
 800405e:	440b      	add	r3, r1
 8004060:	6123      	str	r3, [r4, #16]
 8004062:	f04f 0a00 	mov.w	sl, #0
 8004066:	65a1      	str	r1, [r4, #88]	; 0x58
 8004068:	e7df      	b.n	800402a <_printf_float+0x162>
 800406a:	b913      	cbnz	r3, 8004072 <_printf_float+0x1aa>
 800406c:	6822      	ldr	r2, [r4, #0]
 800406e:	07d2      	lsls	r2, r2, #31
 8004070:	d501      	bpl.n	8004076 <_printf_float+0x1ae>
 8004072:	3302      	adds	r3, #2
 8004074:	e7f4      	b.n	8004060 <_printf_float+0x198>
 8004076:	2301      	movs	r3, #1
 8004078:	e7f2      	b.n	8004060 <_printf_float+0x198>
 800407a:	f04f 0967 	mov.w	r9, #103	; 0x67
 800407e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004080:	4299      	cmp	r1, r3
 8004082:	db05      	blt.n	8004090 <_printf_float+0x1c8>
 8004084:	6823      	ldr	r3, [r4, #0]
 8004086:	6121      	str	r1, [r4, #16]
 8004088:	07d8      	lsls	r0, r3, #31
 800408a:	d5ea      	bpl.n	8004062 <_printf_float+0x19a>
 800408c:	1c4b      	adds	r3, r1, #1
 800408e:	e7e7      	b.n	8004060 <_printf_float+0x198>
 8004090:	2900      	cmp	r1, #0
 8004092:	bfcc      	ite	gt
 8004094:	2201      	movgt	r2, #1
 8004096:	f1c1 0202 	rsble	r2, r1, #2
 800409a:	4413      	add	r3, r2
 800409c:	e7e0      	b.n	8004060 <_printf_float+0x198>
 800409e:	6823      	ldr	r3, [r4, #0]
 80040a0:	055a      	lsls	r2, r3, #21
 80040a2:	d407      	bmi.n	80040b4 <_printf_float+0x1ec>
 80040a4:	6923      	ldr	r3, [r4, #16]
 80040a6:	4642      	mov	r2, r8
 80040a8:	4631      	mov	r1, r6
 80040aa:	4628      	mov	r0, r5
 80040ac:	47b8      	blx	r7
 80040ae:	3001      	adds	r0, #1
 80040b0:	d12b      	bne.n	800410a <_printf_float+0x242>
 80040b2:	e764      	b.n	8003f7e <_printf_float+0xb6>
 80040b4:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80040b8:	f240 80dd 	bls.w	8004276 <_printf_float+0x3ae>
 80040bc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80040c0:	2200      	movs	r2, #0
 80040c2:	2300      	movs	r3, #0
 80040c4:	f7fc fc70 	bl	80009a8 <__aeabi_dcmpeq>
 80040c8:	2800      	cmp	r0, #0
 80040ca:	d033      	beq.n	8004134 <_printf_float+0x26c>
 80040cc:	2301      	movs	r3, #1
 80040ce:	4631      	mov	r1, r6
 80040d0:	4628      	mov	r0, r5
 80040d2:	4a35      	ldr	r2, [pc, #212]	; (80041a8 <_printf_float+0x2e0>)
 80040d4:	47b8      	blx	r7
 80040d6:	3001      	adds	r0, #1
 80040d8:	f43f af51 	beq.w	8003f7e <_printf_float+0xb6>
 80040dc:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80040e0:	429a      	cmp	r2, r3
 80040e2:	db02      	blt.n	80040ea <_printf_float+0x222>
 80040e4:	6823      	ldr	r3, [r4, #0]
 80040e6:	07d8      	lsls	r0, r3, #31
 80040e8:	d50f      	bpl.n	800410a <_printf_float+0x242>
 80040ea:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80040ee:	4631      	mov	r1, r6
 80040f0:	4628      	mov	r0, r5
 80040f2:	47b8      	blx	r7
 80040f4:	3001      	adds	r0, #1
 80040f6:	f43f af42 	beq.w	8003f7e <_printf_float+0xb6>
 80040fa:	f04f 0800 	mov.w	r8, #0
 80040fe:	f104 091a 	add.w	r9, r4, #26
 8004102:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004104:	3b01      	subs	r3, #1
 8004106:	4543      	cmp	r3, r8
 8004108:	dc09      	bgt.n	800411e <_printf_float+0x256>
 800410a:	6823      	ldr	r3, [r4, #0]
 800410c:	079b      	lsls	r3, r3, #30
 800410e:	f100 8102 	bmi.w	8004316 <_printf_float+0x44e>
 8004112:	68e0      	ldr	r0, [r4, #12]
 8004114:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004116:	4298      	cmp	r0, r3
 8004118:	bfb8      	it	lt
 800411a:	4618      	movlt	r0, r3
 800411c:	e731      	b.n	8003f82 <_printf_float+0xba>
 800411e:	2301      	movs	r3, #1
 8004120:	464a      	mov	r2, r9
 8004122:	4631      	mov	r1, r6
 8004124:	4628      	mov	r0, r5
 8004126:	47b8      	blx	r7
 8004128:	3001      	adds	r0, #1
 800412a:	f43f af28 	beq.w	8003f7e <_printf_float+0xb6>
 800412e:	f108 0801 	add.w	r8, r8, #1
 8004132:	e7e6      	b.n	8004102 <_printf_float+0x23a>
 8004134:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004136:	2b00      	cmp	r3, #0
 8004138:	dc38      	bgt.n	80041ac <_printf_float+0x2e4>
 800413a:	2301      	movs	r3, #1
 800413c:	4631      	mov	r1, r6
 800413e:	4628      	mov	r0, r5
 8004140:	4a19      	ldr	r2, [pc, #100]	; (80041a8 <_printf_float+0x2e0>)
 8004142:	47b8      	blx	r7
 8004144:	3001      	adds	r0, #1
 8004146:	f43f af1a 	beq.w	8003f7e <_printf_float+0xb6>
 800414a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800414e:	4313      	orrs	r3, r2
 8004150:	d102      	bne.n	8004158 <_printf_float+0x290>
 8004152:	6823      	ldr	r3, [r4, #0]
 8004154:	07d9      	lsls	r1, r3, #31
 8004156:	d5d8      	bpl.n	800410a <_printf_float+0x242>
 8004158:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800415c:	4631      	mov	r1, r6
 800415e:	4628      	mov	r0, r5
 8004160:	47b8      	blx	r7
 8004162:	3001      	adds	r0, #1
 8004164:	f43f af0b 	beq.w	8003f7e <_printf_float+0xb6>
 8004168:	f04f 0900 	mov.w	r9, #0
 800416c:	f104 0a1a 	add.w	sl, r4, #26
 8004170:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004172:	425b      	negs	r3, r3
 8004174:	454b      	cmp	r3, r9
 8004176:	dc01      	bgt.n	800417c <_printf_float+0x2b4>
 8004178:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800417a:	e794      	b.n	80040a6 <_printf_float+0x1de>
 800417c:	2301      	movs	r3, #1
 800417e:	4652      	mov	r2, sl
 8004180:	4631      	mov	r1, r6
 8004182:	4628      	mov	r0, r5
 8004184:	47b8      	blx	r7
 8004186:	3001      	adds	r0, #1
 8004188:	f43f aef9 	beq.w	8003f7e <_printf_float+0xb6>
 800418c:	f109 0901 	add.w	r9, r9, #1
 8004190:	e7ee      	b.n	8004170 <_printf_float+0x2a8>
 8004192:	bf00      	nop
 8004194:	7fefffff 	.word	0x7fefffff
 8004198:	08007138 	.word	0x08007138
 800419c:	0800713c 	.word	0x0800713c
 80041a0:	08007144 	.word	0x08007144
 80041a4:	08007140 	.word	0x08007140
 80041a8:	08007148 	.word	0x08007148
 80041ac:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80041ae:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80041b0:	429a      	cmp	r2, r3
 80041b2:	bfa8      	it	ge
 80041b4:	461a      	movge	r2, r3
 80041b6:	2a00      	cmp	r2, #0
 80041b8:	4691      	mov	r9, r2
 80041ba:	dc37      	bgt.n	800422c <_printf_float+0x364>
 80041bc:	f04f 0b00 	mov.w	fp, #0
 80041c0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80041c4:	f104 021a 	add.w	r2, r4, #26
 80041c8:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80041cc:	ebaa 0309 	sub.w	r3, sl, r9
 80041d0:	455b      	cmp	r3, fp
 80041d2:	dc33      	bgt.n	800423c <_printf_float+0x374>
 80041d4:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80041d8:	429a      	cmp	r2, r3
 80041da:	db3b      	blt.n	8004254 <_printf_float+0x38c>
 80041dc:	6823      	ldr	r3, [r4, #0]
 80041de:	07da      	lsls	r2, r3, #31
 80041e0:	d438      	bmi.n	8004254 <_printf_float+0x38c>
 80041e2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80041e4:	990d      	ldr	r1, [sp, #52]	; 0x34
 80041e6:	eba3 020a 	sub.w	r2, r3, sl
 80041ea:	eba3 0901 	sub.w	r9, r3, r1
 80041ee:	4591      	cmp	r9, r2
 80041f0:	bfa8      	it	ge
 80041f2:	4691      	movge	r9, r2
 80041f4:	f1b9 0f00 	cmp.w	r9, #0
 80041f8:	dc34      	bgt.n	8004264 <_printf_float+0x39c>
 80041fa:	f04f 0800 	mov.w	r8, #0
 80041fe:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004202:	f104 0a1a 	add.w	sl, r4, #26
 8004206:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800420a:	1a9b      	subs	r3, r3, r2
 800420c:	eba3 0309 	sub.w	r3, r3, r9
 8004210:	4543      	cmp	r3, r8
 8004212:	f77f af7a 	ble.w	800410a <_printf_float+0x242>
 8004216:	2301      	movs	r3, #1
 8004218:	4652      	mov	r2, sl
 800421a:	4631      	mov	r1, r6
 800421c:	4628      	mov	r0, r5
 800421e:	47b8      	blx	r7
 8004220:	3001      	adds	r0, #1
 8004222:	f43f aeac 	beq.w	8003f7e <_printf_float+0xb6>
 8004226:	f108 0801 	add.w	r8, r8, #1
 800422a:	e7ec      	b.n	8004206 <_printf_float+0x33e>
 800422c:	4613      	mov	r3, r2
 800422e:	4631      	mov	r1, r6
 8004230:	4642      	mov	r2, r8
 8004232:	4628      	mov	r0, r5
 8004234:	47b8      	blx	r7
 8004236:	3001      	adds	r0, #1
 8004238:	d1c0      	bne.n	80041bc <_printf_float+0x2f4>
 800423a:	e6a0      	b.n	8003f7e <_printf_float+0xb6>
 800423c:	2301      	movs	r3, #1
 800423e:	4631      	mov	r1, r6
 8004240:	4628      	mov	r0, r5
 8004242:	920b      	str	r2, [sp, #44]	; 0x2c
 8004244:	47b8      	blx	r7
 8004246:	3001      	adds	r0, #1
 8004248:	f43f ae99 	beq.w	8003f7e <_printf_float+0xb6>
 800424c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800424e:	f10b 0b01 	add.w	fp, fp, #1
 8004252:	e7b9      	b.n	80041c8 <_printf_float+0x300>
 8004254:	4631      	mov	r1, r6
 8004256:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800425a:	4628      	mov	r0, r5
 800425c:	47b8      	blx	r7
 800425e:	3001      	adds	r0, #1
 8004260:	d1bf      	bne.n	80041e2 <_printf_float+0x31a>
 8004262:	e68c      	b.n	8003f7e <_printf_float+0xb6>
 8004264:	464b      	mov	r3, r9
 8004266:	4631      	mov	r1, r6
 8004268:	4628      	mov	r0, r5
 800426a:	eb08 020a 	add.w	r2, r8, sl
 800426e:	47b8      	blx	r7
 8004270:	3001      	adds	r0, #1
 8004272:	d1c2      	bne.n	80041fa <_printf_float+0x332>
 8004274:	e683      	b.n	8003f7e <_printf_float+0xb6>
 8004276:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004278:	2a01      	cmp	r2, #1
 800427a:	dc01      	bgt.n	8004280 <_printf_float+0x3b8>
 800427c:	07db      	lsls	r3, r3, #31
 800427e:	d537      	bpl.n	80042f0 <_printf_float+0x428>
 8004280:	2301      	movs	r3, #1
 8004282:	4642      	mov	r2, r8
 8004284:	4631      	mov	r1, r6
 8004286:	4628      	mov	r0, r5
 8004288:	47b8      	blx	r7
 800428a:	3001      	adds	r0, #1
 800428c:	f43f ae77 	beq.w	8003f7e <_printf_float+0xb6>
 8004290:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004294:	4631      	mov	r1, r6
 8004296:	4628      	mov	r0, r5
 8004298:	47b8      	blx	r7
 800429a:	3001      	adds	r0, #1
 800429c:	f43f ae6f 	beq.w	8003f7e <_printf_float+0xb6>
 80042a0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80042a4:	2200      	movs	r2, #0
 80042a6:	2300      	movs	r3, #0
 80042a8:	f7fc fb7e 	bl	80009a8 <__aeabi_dcmpeq>
 80042ac:	b9d8      	cbnz	r0, 80042e6 <_printf_float+0x41e>
 80042ae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80042b0:	f108 0201 	add.w	r2, r8, #1
 80042b4:	3b01      	subs	r3, #1
 80042b6:	4631      	mov	r1, r6
 80042b8:	4628      	mov	r0, r5
 80042ba:	47b8      	blx	r7
 80042bc:	3001      	adds	r0, #1
 80042be:	d10e      	bne.n	80042de <_printf_float+0x416>
 80042c0:	e65d      	b.n	8003f7e <_printf_float+0xb6>
 80042c2:	2301      	movs	r3, #1
 80042c4:	464a      	mov	r2, r9
 80042c6:	4631      	mov	r1, r6
 80042c8:	4628      	mov	r0, r5
 80042ca:	47b8      	blx	r7
 80042cc:	3001      	adds	r0, #1
 80042ce:	f43f ae56 	beq.w	8003f7e <_printf_float+0xb6>
 80042d2:	f108 0801 	add.w	r8, r8, #1
 80042d6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80042d8:	3b01      	subs	r3, #1
 80042da:	4543      	cmp	r3, r8
 80042dc:	dcf1      	bgt.n	80042c2 <_printf_float+0x3fa>
 80042de:	4653      	mov	r3, sl
 80042e0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80042e4:	e6e0      	b.n	80040a8 <_printf_float+0x1e0>
 80042e6:	f04f 0800 	mov.w	r8, #0
 80042ea:	f104 091a 	add.w	r9, r4, #26
 80042ee:	e7f2      	b.n	80042d6 <_printf_float+0x40e>
 80042f0:	2301      	movs	r3, #1
 80042f2:	4642      	mov	r2, r8
 80042f4:	e7df      	b.n	80042b6 <_printf_float+0x3ee>
 80042f6:	2301      	movs	r3, #1
 80042f8:	464a      	mov	r2, r9
 80042fa:	4631      	mov	r1, r6
 80042fc:	4628      	mov	r0, r5
 80042fe:	47b8      	blx	r7
 8004300:	3001      	adds	r0, #1
 8004302:	f43f ae3c 	beq.w	8003f7e <_printf_float+0xb6>
 8004306:	f108 0801 	add.w	r8, r8, #1
 800430a:	68e3      	ldr	r3, [r4, #12]
 800430c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800430e:	1a5b      	subs	r3, r3, r1
 8004310:	4543      	cmp	r3, r8
 8004312:	dcf0      	bgt.n	80042f6 <_printf_float+0x42e>
 8004314:	e6fd      	b.n	8004112 <_printf_float+0x24a>
 8004316:	f04f 0800 	mov.w	r8, #0
 800431a:	f104 0919 	add.w	r9, r4, #25
 800431e:	e7f4      	b.n	800430a <_printf_float+0x442>

08004320 <_printf_common>:
 8004320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004324:	4616      	mov	r6, r2
 8004326:	4699      	mov	r9, r3
 8004328:	688a      	ldr	r2, [r1, #8]
 800432a:	690b      	ldr	r3, [r1, #16]
 800432c:	4607      	mov	r7, r0
 800432e:	4293      	cmp	r3, r2
 8004330:	bfb8      	it	lt
 8004332:	4613      	movlt	r3, r2
 8004334:	6033      	str	r3, [r6, #0]
 8004336:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800433a:	460c      	mov	r4, r1
 800433c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004340:	b10a      	cbz	r2, 8004346 <_printf_common+0x26>
 8004342:	3301      	adds	r3, #1
 8004344:	6033      	str	r3, [r6, #0]
 8004346:	6823      	ldr	r3, [r4, #0]
 8004348:	0699      	lsls	r1, r3, #26
 800434a:	bf42      	ittt	mi
 800434c:	6833      	ldrmi	r3, [r6, #0]
 800434e:	3302      	addmi	r3, #2
 8004350:	6033      	strmi	r3, [r6, #0]
 8004352:	6825      	ldr	r5, [r4, #0]
 8004354:	f015 0506 	ands.w	r5, r5, #6
 8004358:	d106      	bne.n	8004368 <_printf_common+0x48>
 800435a:	f104 0a19 	add.w	sl, r4, #25
 800435e:	68e3      	ldr	r3, [r4, #12]
 8004360:	6832      	ldr	r2, [r6, #0]
 8004362:	1a9b      	subs	r3, r3, r2
 8004364:	42ab      	cmp	r3, r5
 8004366:	dc28      	bgt.n	80043ba <_printf_common+0x9a>
 8004368:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800436c:	1e13      	subs	r3, r2, #0
 800436e:	6822      	ldr	r2, [r4, #0]
 8004370:	bf18      	it	ne
 8004372:	2301      	movne	r3, #1
 8004374:	0692      	lsls	r2, r2, #26
 8004376:	d42d      	bmi.n	80043d4 <_printf_common+0xb4>
 8004378:	4649      	mov	r1, r9
 800437a:	4638      	mov	r0, r7
 800437c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004380:	47c0      	blx	r8
 8004382:	3001      	adds	r0, #1
 8004384:	d020      	beq.n	80043c8 <_printf_common+0xa8>
 8004386:	6823      	ldr	r3, [r4, #0]
 8004388:	68e5      	ldr	r5, [r4, #12]
 800438a:	f003 0306 	and.w	r3, r3, #6
 800438e:	2b04      	cmp	r3, #4
 8004390:	bf18      	it	ne
 8004392:	2500      	movne	r5, #0
 8004394:	6832      	ldr	r2, [r6, #0]
 8004396:	f04f 0600 	mov.w	r6, #0
 800439a:	68a3      	ldr	r3, [r4, #8]
 800439c:	bf08      	it	eq
 800439e:	1aad      	subeq	r5, r5, r2
 80043a0:	6922      	ldr	r2, [r4, #16]
 80043a2:	bf08      	it	eq
 80043a4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80043a8:	4293      	cmp	r3, r2
 80043aa:	bfc4      	itt	gt
 80043ac:	1a9b      	subgt	r3, r3, r2
 80043ae:	18ed      	addgt	r5, r5, r3
 80043b0:	341a      	adds	r4, #26
 80043b2:	42b5      	cmp	r5, r6
 80043b4:	d11a      	bne.n	80043ec <_printf_common+0xcc>
 80043b6:	2000      	movs	r0, #0
 80043b8:	e008      	b.n	80043cc <_printf_common+0xac>
 80043ba:	2301      	movs	r3, #1
 80043bc:	4652      	mov	r2, sl
 80043be:	4649      	mov	r1, r9
 80043c0:	4638      	mov	r0, r7
 80043c2:	47c0      	blx	r8
 80043c4:	3001      	adds	r0, #1
 80043c6:	d103      	bne.n	80043d0 <_printf_common+0xb0>
 80043c8:	f04f 30ff 	mov.w	r0, #4294967295
 80043cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80043d0:	3501      	adds	r5, #1
 80043d2:	e7c4      	b.n	800435e <_printf_common+0x3e>
 80043d4:	2030      	movs	r0, #48	; 0x30
 80043d6:	18e1      	adds	r1, r4, r3
 80043d8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80043dc:	1c5a      	adds	r2, r3, #1
 80043de:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80043e2:	4422      	add	r2, r4
 80043e4:	3302      	adds	r3, #2
 80043e6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80043ea:	e7c5      	b.n	8004378 <_printf_common+0x58>
 80043ec:	2301      	movs	r3, #1
 80043ee:	4622      	mov	r2, r4
 80043f0:	4649      	mov	r1, r9
 80043f2:	4638      	mov	r0, r7
 80043f4:	47c0      	blx	r8
 80043f6:	3001      	adds	r0, #1
 80043f8:	d0e6      	beq.n	80043c8 <_printf_common+0xa8>
 80043fa:	3601      	adds	r6, #1
 80043fc:	e7d9      	b.n	80043b2 <_printf_common+0x92>
	...

08004400 <_printf_i>:
 8004400:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004404:	7e0f      	ldrb	r7, [r1, #24]
 8004406:	4691      	mov	r9, r2
 8004408:	2f78      	cmp	r7, #120	; 0x78
 800440a:	4680      	mov	r8, r0
 800440c:	460c      	mov	r4, r1
 800440e:	469a      	mov	sl, r3
 8004410:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004412:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004416:	d807      	bhi.n	8004428 <_printf_i+0x28>
 8004418:	2f62      	cmp	r7, #98	; 0x62
 800441a:	d80a      	bhi.n	8004432 <_printf_i+0x32>
 800441c:	2f00      	cmp	r7, #0
 800441e:	f000 80d9 	beq.w	80045d4 <_printf_i+0x1d4>
 8004422:	2f58      	cmp	r7, #88	; 0x58
 8004424:	f000 80a4 	beq.w	8004570 <_printf_i+0x170>
 8004428:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800442c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004430:	e03a      	b.n	80044a8 <_printf_i+0xa8>
 8004432:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004436:	2b15      	cmp	r3, #21
 8004438:	d8f6      	bhi.n	8004428 <_printf_i+0x28>
 800443a:	a101      	add	r1, pc, #4	; (adr r1, 8004440 <_printf_i+0x40>)
 800443c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004440:	08004499 	.word	0x08004499
 8004444:	080044ad 	.word	0x080044ad
 8004448:	08004429 	.word	0x08004429
 800444c:	08004429 	.word	0x08004429
 8004450:	08004429 	.word	0x08004429
 8004454:	08004429 	.word	0x08004429
 8004458:	080044ad 	.word	0x080044ad
 800445c:	08004429 	.word	0x08004429
 8004460:	08004429 	.word	0x08004429
 8004464:	08004429 	.word	0x08004429
 8004468:	08004429 	.word	0x08004429
 800446c:	080045bb 	.word	0x080045bb
 8004470:	080044dd 	.word	0x080044dd
 8004474:	0800459d 	.word	0x0800459d
 8004478:	08004429 	.word	0x08004429
 800447c:	08004429 	.word	0x08004429
 8004480:	080045dd 	.word	0x080045dd
 8004484:	08004429 	.word	0x08004429
 8004488:	080044dd 	.word	0x080044dd
 800448c:	08004429 	.word	0x08004429
 8004490:	08004429 	.word	0x08004429
 8004494:	080045a5 	.word	0x080045a5
 8004498:	682b      	ldr	r3, [r5, #0]
 800449a:	1d1a      	adds	r2, r3, #4
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	602a      	str	r2, [r5, #0]
 80044a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80044a4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80044a8:	2301      	movs	r3, #1
 80044aa:	e0a4      	b.n	80045f6 <_printf_i+0x1f6>
 80044ac:	6820      	ldr	r0, [r4, #0]
 80044ae:	6829      	ldr	r1, [r5, #0]
 80044b0:	0606      	lsls	r6, r0, #24
 80044b2:	f101 0304 	add.w	r3, r1, #4
 80044b6:	d50a      	bpl.n	80044ce <_printf_i+0xce>
 80044b8:	680e      	ldr	r6, [r1, #0]
 80044ba:	602b      	str	r3, [r5, #0]
 80044bc:	2e00      	cmp	r6, #0
 80044be:	da03      	bge.n	80044c8 <_printf_i+0xc8>
 80044c0:	232d      	movs	r3, #45	; 0x2d
 80044c2:	4276      	negs	r6, r6
 80044c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80044c8:	230a      	movs	r3, #10
 80044ca:	485e      	ldr	r0, [pc, #376]	; (8004644 <_printf_i+0x244>)
 80044cc:	e019      	b.n	8004502 <_printf_i+0x102>
 80044ce:	680e      	ldr	r6, [r1, #0]
 80044d0:	f010 0f40 	tst.w	r0, #64	; 0x40
 80044d4:	602b      	str	r3, [r5, #0]
 80044d6:	bf18      	it	ne
 80044d8:	b236      	sxthne	r6, r6
 80044da:	e7ef      	b.n	80044bc <_printf_i+0xbc>
 80044dc:	682b      	ldr	r3, [r5, #0]
 80044de:	6820      	ldr	r0, [r4, #0]
 80044e0:	1d19      	adds	r1, r3, #4
 80044e2:	6029      	str	r1, [r5, #0]
 80044e4:	0601      	lsls	r1, r0, #24
 80044e6:	d501      	bpl.n	80044ec <_printf_i+0xec>
 80044e8:	681e      	ldr	r6, [r3, #0]
 80044ea:	e002      	b.n	80044f2 <_printf_i+0xf2>
 80044ec:	0646      	lsls	r6, r0, #25
 80044ee:	d5fb      	bpl.n	80044e8 <_printf_i+0xe8>
 80044f0:	881e      	ldrh	r6, [r3, #0]
 80044f2:	2f6f      	cmp	r7, #111	; 0x6f
 80044f4:	bf0c      	ite	eq
 80044f6:	2308      	moveq	r3, #8
 80044f8:	230a      	movne	r3, #10
 80044fa:	4852      	ldr	r0, [pc, #328]	; (8004644 <_printf_i+0x244>)
 80044fc:	2100      	movs	r1, #0
 80044fe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004502:	6865      	ldr	r5, [r4, #4]
 8004504:	2d00      	cmp	r5, #0
 8004506:	bfa8      	it	ge
 8004508:	6821      	ldrge	r1, [r4, #0]
 800450a:	60a5      	str	r5, [r4, #8]
 800450c:	bfa4      	itt	ge
 800450e:	f021 0104 	bicge.w	r1, r1, #4
 8004512:	6021      	strge	r1, [r4, #0]
 8004514:	b90e      	cbnz	r6, 800451a <_printf_i+0x11a>
 8004516:	2d00      	cmp	r5, #0
 8004518:	d04d      	beq.n	80045b6 <_printf_i+0x1b6>
 800451a:	4615      	mov	r5, r2
 800451c:	fbb6 f1f3 	udiv	r1, r6, r3
 8004520:	fb03 6711 	mls	r7, r3, r1, r6
 8004524:	5dc7      	ldrb	r7, [r0, r7]
 8004526:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800452a:	4637      	mov	r7, r6
 800452c:	42bb      	cmp	r3, r7
 800452e:	460e      	mov	r6, r1
 8004530:	d9f4      	bls.n	800451c <_printf_i+0x11c>
 8004532:	2b08      	cmp	r3, #8
 8004534:	d10b      	bne.n	800454e <_printf_i+0x14e>
 8004536:	6823      	ldr	r3, [r4, #0]
 8004538:	07de      	lsls	r6, r3, #31
 800453a:	d508      	bpl.n	800454e <_printf_i+0x14e>
 800453c:	6923      	ldr	r3, [r4, #16]
 800453e:	6861      	ldr	r1, [r4, #4]
 8004540:	4299      	cmp	r1, r3
 8004542:	bfde      	ittt	le
 8004544:	2330      	movle	r3, #48	; 0x30
 8004546:	f805 3c01 	strble.w	r3, [r5, #-1]
 800454a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800454e:	1b52      	subs	r2, r2, r5
 8004550:	6122      	str	r2, [r4, #16]
 8004552:	464b      	mov	r3, r9
 8004554:	4621      	mov	r1, r4
 8004556:	4640      	mov	r0, r8
 8004558:	f8cd a000 	str.w	sl, [sp]
 800455c:	aa03      	add	r2, sp, #12
 800455e:	f7ff fedf 	bl	8004320 <_printf_common>
 8004562:	3001      	adds	r0, #1
 8004564:	d14c      	bne.n	8004600 <_printf_i+0x200>
 8004566:	f04f 30ff 	mov.w	r0, #4294967295
 800456a:	b004      	add	sp, #16
 800456c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004570:	4834      	ldr	r0, [pc, #208]	; (8004644 <_printf_i+0x244>)
 8004572:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004576:	6829      	ldr	r1, [r5, #0]
 8004578:	6823      	ldr	r3, [r4, #0]
 800457a:	f851 6b04 	ldr.w	r6, [r1], #4
 800457e:	6029      	str	r1, [r5, #0]
 8004580:	061d      	lsls	r5, r3, #24
 8004582:	d514      	bpl.n	80045ae <_printf_i+0x1ae>
 8004584:	07df      	lsls	r7, r3, #31
 8004586:	bf44      	itt	mi
 8004588:	f043 0320 	orrmi.w	r3, r3, #32
 800458c:	6023      	strmi	r3, [r4, #0]
 800458e:	b91e      	cbnz	r6, 8004598 <_printf_i+0x198>
 8004590:	6823      	ldr	r3, [r4, #0]
 8004592:	f023 0320 	bic.w	r3, r3, #32
 8004596:	6023      	str	r3, [r4, #0]
 8004598:	2310      	movs	r3, #16
 800459a:	e7af      	b.n	80044fc <_printf_i+0xfc>
 800459c:	6823      	ldr	r3, [r4, #0]
 800459e:	f043 0320 	orr.w	r3, r3, #32
 80045a2:	6023      	str	r3, [r4, #0]
 80045a4:	2378      	movs	r3, #120	; 0x78
 80045a6:	4828      	ldr	r0, [pc, #160]	; (8004648 <_printf_i+0x248>)
 80045a8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80045ac:	e7e3      	b.n	8004576 <_printf_i+0x176>
 80045ae:	0659      	lsls	r1, r3, #25
 80045b0:	bf48      	it	mi
 80045b2:	b2b6      	uxthmi	r6, r6
 80045b4:	e7e6      	b.n	8004584 <_printf_i+0x184>
 80045b6:	4615      	mov	r5, r2
 80045b8:	e7bb      	b.n	8004532 <_printf_i+0x132>
 80045ba:	682b      	ldr	r3, [r5, #0]
 80045bc:	6826      	ldr	r6, [r4, #0]
 80045be:	1d18      	adds	r0, r3, #4
 80045c0:	6961      	ldr	r1, [r4, #20]
 80045c2:	6028      	str	r0, [r5, #0]
 80045c4:	0635      	lsls	r5, r6, #24
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	d501      	bpl.n	80045ce <_printf_i+0x1ce>
 80045ca:	6019      	str	r1, [r3, #0]
 80045cc:	e002      	b.n	80045d4 <_printf_i+0x1d4>
 80045ce:	0670      	lsls	r0, r6, #25
 80045d0:	d5fb      	bpl.n	80045ca <_printf_i+0x1ca>
 80045d2:	8019      	strh	r1, [r3, #0]
 80045d4:	2300      	movs	r3, #0
 80045d6:	4615      	mov	r5, r2
 80045d8:	6123      	str	r3, [r4, #16]
 80045da:	e7ba      	b.n	8004552 <_printf_i+0x152>
 80045dc:	682b      	ldr	r3, [r5, #0]
 80045de:	2100      	movs	r1, #0
 80045e0:	1d1a      	adds	r2, r3, #4
 80045e2:	602a      	str	r2, [r5, #0]
 80045e4:	681d      	ldr	r5, [r3, #0]
 80045e6:	6862      	ldr	r2, [r4, #4]
 80045e8:	4628      	mov	r0, r5
 80045ea:	f000 fffd 	bl	80055e8 <memchr>
 80045ee:	b108      	cbz	r0, 80045f4 <_printf_i+0x1f4>
 80045f0:	1b40      	subs	r0, r0, r5
 80045f2:	6060      	str	r0, [r4, #4]
 80045f4:	6863      	ldr	r3, [r4, #4]
 80045f6:	6123      	str	r3, [r4, #16]
 80045f8:	2300      	movs	r3, #0
 80045fa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80045fe:	e7a8      	b.n	8004552 <_printf_i+0x152>
 8004600:	462a      	mov	r2, r5
 8004602:	4649      	mov	r1, r9
 8004604:	4640      	mov	r0, r8
 8004606:	6923      	ldr	r3, [r4, #16]
 8004608:	47d0      	blx	sl
 800460a:	3001      	adds	r0, #1
 800460c:	d0ab      	beq.n	8004566 <_printf_i+0x166>
 800460e:	6823      	ldr	r3, [r4, #0]
 8004610:	079b      	lsls	r3, r3, #30
 8004612:	d413      	bmi.n	800463c <_printf_i+0x23c>
 8004614:	68e0      	ldr	r0, [r4, #12]
 8004616:	9b03      	ldr	r3, [sp, #12]
 8004618:	4298      	cmp	r0, r3
 800461a:	bfb8      	it	lt
 800461c:	4618      	movlt	r0, r3
 800461e:	e7a4      	b.n	800456a <_printf_i+0x16a>
 8004620:	2301      	movs	r3, #1
 8004622:	4632      	mov	r2, r6
 8004624:	4649      	mov	r1, r9
 8004626:	4640      	mov	r0, r8
 8004628:	47d0      	blx	sl
 800462a:	3001      	adds	r0, #1
 800462c:	d09b      	beq.n	8004566 <_printf_i+0x166>
 800462e:	3501      	adds	r5, #1
 8004630:	68e3      	ldr	r3, [r4, #12]
 8004632:	9903      	ldr	r1, [sp, #12]
 8004634:	1a5b      	subs	r3, r3, r1
 8004636:	42ab      	cmp	r3, r5
 8004638:	dcf2      	bgt.n	8004620 <_printf_i+0x220>
 800463a:	e7eb      	b.n	8004614 <_printf_i+0x214>
 800463c:	2500      	movs	r5, #0
 800463e:	f104 0619 	add.w	r6, r4, #25
 8004642:	e7f5      	b.n	8004630 <_printf_i+0x230>
 8004644:	0800714a 	.word	0x0800714a
 8004648:	0800715b 	.word	0x0800715b

0800464c <iprintf>:
 800464c:	b40f      	push	{r0, r1, r2, r3}
 800464e:	4b0a      	ldr	r3, [pc, #40]	; (8004678 <iprintf+0x2c>)
 8004650:	b513      	push	{r0, r1, r4, lr}
 8004652:	681c      	ldr	r4, [r3, #0]
 8004654:	b124      	cbz	r4, 8004660 <iprintf+0x14>
 8004656:	69a3      	ldr	r3, [r4, #24]
 8004658:	b913      	cbnz	r3, 8004660 <iprintf+0x14>
 800465a:	4620      	mov	r0, r4
 800465c:	f000 ff16 	bl	800548c <__sinit>
 8004660:	ab05      	add	r3, sp, #20
 8004662:	4620      	mov	r0, r4
 8004664:	9a04      	ldr	r2, [sp, #16]
 8004666:	68a1      	ldr	r1, [r4, #8]
 8004668:	9301      	str	r3, [sp, #4]
 800466a:	f001 fdc1 	bl	80061f0 <_vfiprintf_r>
 800466e:	b002      	add	sp, #8
 8004670:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004674:	b004      	add	sp, #16
 8004676:	4770      	bx	lr
 8004678:	20000020 	.word	0x20000020

0800467c <siprintf>:
 800467c:	b40e      	push	{r1, r2, r3}
 800467e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004682:	b500      	push	{lr}
 8004684:	b09c      	sub	sp, #112	; 0x70
 8004686:	ab1d      	add	r3, sp, #116	; 0x74
 8004688:	9002      	str	r0, [sp, #8]
 800468a:	9006      	str	r0, [sp, #24]
 800468c:	9107      	str	r1, [sp, #28]
 800468e:	9104      	str	r1, [sp, #16]
 8004690:	4808      	ldr	r0, [pc, #32]	; (80046b4 <siprintf+0x38>)
 8004692:	4909      	ldr	r1, [pc, #36]	; (80046b8 <siprintf+0x3c>)
 8004694:	f853 2b04 	ldr.w	r2, [r3], #4
 8004698:	9105      	str	r1, [sp, #20]
 800469a:	6800      	ldr	r0, [r0, #0]
 800469c:	a902      	add	r1, sp, #8
 800469e:	9301      	str	r3, [sp, #4]
 80046a0:	f001 fc7e 	bl	8005fa0 <_svfiprintf_r>
 80046a4:	2200      	movs	r2, #0
 80046a6:	9b02      	ldr	r3, [sp, #8]
 80046a8:	701a      	strb	r2, [r3, #0]
 80046aa:	b01c      	add	sp, #112	; 0x70
 80046ac:	f85d eb04 	ldr.w	lr, [sp], #4
 80046b0:	b003      	add	sp, #12
 80046b2:	4770      	bx	lr
 80046b4:	20000020 	.word	0x20000020
 80046b8:	ffff0208 	.word	0xffff0208

080046bc <strncpy>:
 80046bc:	4603      	mov	r3, r0
 80046be:	b510      	push	{r4, lr}
 80046c0:	3901      	subs	r1, #1
 80046c2:	b132      	cbz	r2, 80046d2 <strncpy+0x16>
 80046c4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80046c8:	3a01      	subs	r2, #1
 80046ca:	f803 4b01 	strb.w	r4, [r3], #1
 80046ce:	2c00      	cmp	r4, #0
 80046d0:	d1f7      	bne.n	80046c2 <strncpy+0x6>
 80046d2:	2100      	movs	r1, #0
 80046d4:	441a      	add	r2, r3
 80046d6:	4293      	cmp	r3, r2
 80046d8:	d100      	bne.n	80046dc <strncpy+0x20>
 80046da:	bd10      	pop	{r4, pc}
 80046dc:	f803 1b01 	strb.w	r1, [r3], #1
 80046e0:	e7f9      	b.n	80046d6 <strncpy+0x1a>

080046e2 <quorem>:
 80046e2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80046e6:	6903      	ldr	r3, [r0, #16]
 80046e8:	690c      	ldr	r4, [r1, #16]
 80046ea:	4607      	mov	r7, r0
 80046ec:	42a3      	cmp	r3, r4
 80046ee:	f2c0 8082 	blt.w	80047f6 <quorem+0x114>
 80046f2:	3c01      	subs	r4, #1
 80046f4:	f100 0514 	add.w	r5, r0, #20
 80046f8:	f101 0814 	add.w	r8, r1, #20
 80046fc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004700:	9301      	str	r3, [sp, #4]
 8004702:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004706:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800470a:	3301      	adds	r3, #1
 800470c:	429a      	cmp	r2, r3
 800470e:	fbb2 f6f3 	udiv	r6, r2, r3
 8004712:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8004716:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800471a:	d331      	bcc.n	8004780 <quorem+0x9e>
 800471c:	f04f 0e00 	mov.w	lr, #0
 8004720:	4640      	mov	r0, r8
 8004722:	46ac      	mov	ip, r5
 8004724:	46f2      	mov	sl, lr
 8004726:	f850 2b04 	ldr.w	r2, [r0], #4
 800472a:	b293      	uxth	r3, r2
 800472c:	fb06 e303 	mla	r3, r6, r3, lr
 8004730:	0c12      	lsrs	r2, r2, #16
 8004732:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8004736:	b29b      	uxth	r3, r3
 8004738:	fb06 e202 	mla	r2, r6, r2, lr
 800473c:	ebaa 0303 	sub.w	r3, sl, r3
 8004740:	f8dc a000 	ldr.w	sl, [ip]
 8004744:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8004748:	fa1f fa8a 	uxth.w	sl, sl
 800474c:	4453      	add	r3, sl
 800474e:	f8dc a000 	ldr.w	sl, [ip]
 8004752:	b292      	uxth	r2, r2
 8004754:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8004758:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800475c:	b29b      	uxth	r3, r3
 800475e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004762:	4581      	cmp	r9, r0
 8004764:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8004768:	f84c 3b04 	str.w	r3, [ip], #4
 800476c:	d2db      	bcs.n	8004726 <quorem+0x44>
 800476e:	f855 300b 	ldr.w	r3, [r5, fp]
 8004772:	b92b      	cbnz	r3, 8004780 <quorem+0x9e>
 8004774:	9b01      	ldr	r3, [sp, #4]
 8004776:	3b04      	subs	r3, #4
 8004778:	429d      	cmp	r5, r3
 800477a:	461a      	mov	r2, r3
 800477c:	d32f      	bcc.n	80047de <quorem+0xfc>
 800477e:	613c      	str	r4, [r7, #16]
 8004780:	4638      	mov	r0, r7
 8004782:	f001 f9bd 	bl	8005b00 <__mcmp>
 8004786:	2800      	cmp	r0, #0
 8004788:	db25      	blt.n	80047d6 <quorem+0xf4>
 800478a:	4628      	mov	r0, r5
 800478c:	f04f 0c00 	mov.w	ip, #0
 8004790:	3601      	adds	r6, #1
 8004792:	f858 1b04 	ldr.w	r1, [r8], #4
 8004796:	f8d0 e000 	ldr.w	lr, [r0]
 800479a:	b28b      	uxth	r3, r1
 800479c:	ebac 0303 	sub.w	r3, ip, r3
 80047a0:	fa1f f28e 	uxth.w	r2, lr
 80047a4:	4413      	add	r3, r2
 80047a6:	0c0a      	lsrs	r2, r1, #16
 80047a8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80047ac:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80047b0:	b29b      	uxth	r3, r3
 80047b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80047b6:	45c1      	cmp	r9, r8
 80047b8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80047bc:	f840 3b04 	str.w	r3, [r0], #4
 80047c0:	d2e7      	bcs.n	8004792 <quorem+0xb0>
 80047c2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80047c6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80047ca:	b922      	cbnz	r2, 80047d6 <quorem+0xf4>
 80047cc:	3b04      	subs	r3, #4
 80047ce:	429d      	cmp	r5, r3
 80047d0:	461a      	mov	r2, r3
 80047d2:	d30a      	bcc.n	80047ea <quorem+0x108>
 80047d4:	613c      	str	r4, [r7, #16]
 80047d6:	4630      	mov	r0, r6
 80047d8:	b003      	add	sp, #12
 80047da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80047de:	6812      	ldr	r2, [r2, #0]
 80047e0:	3b04      	subs	r3, #4
 80047e2:	2a00      	cmp	r2, #0
 80047e4:	d1cb      	bne.n	800477e <quorem+0x9c>
 80047e6:	3c01      	subs	r4, #1
 80047e8:	e7c6      	b.n	8004778 <quorem+0x96>
 80047ea:	6812      	ldr	r2, [r2, #0]
 80047ec:	3b04      	subs	r3, #4
 80047ee:	2a00      	cmp	r2, #0
 80047f0:	d1f0      	bne.n	80047d4 <quorem+0xf2>
 80047f2:	3c01      	subs	r4, #1
 80047f4:	e7eb      	b.n	80047ce <quorem+0xec>
 80047f6:	2000      	movs	r0, #0
 80047f8:	e7ee      	b.n	80047d8 <quorem+0xf6>
 80047fa:	0000      	movs	r0, r0
 80047fc:	0000      	movs	r0, r0
	...

08004800 <_dtoa_r>:
 8004800:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004804:	4616      	mov	r6, r2
 8004806:	461f      	mov	r7, r3
 8004808:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800480a:	b099      	sub	sp, #100	; 0x64
 800480c:	4605      	mov	r5, r0
 800480e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8004812:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8004816:	b974      	cbnz	r4, 8004836 <_dtoa_r+0x36>
 8004818:	2010      	movs	r0, #16
 800481a:	f000 fedd 	bl	80055d8 <malloc>
 800481e:	4602      	mov	r2, r0
 8004820:	6268      	str	r0, [r5, #36]	; 0x24
 8004822:	b920      	cbnz	r0, 800482e <_dtoa_r+0x2e>
 8004824:	21ea      	movs	r1, #234	; 0xea
 8004826:	4ba8      	ldr	r3, [pc, #672]	; (8004ac8 <_dtoa_r+0x2c8>)
 8004828:	48a8      	ldr	r0, [pc, #672]	; (8004acc <_dtoa_r+0x2cc>)
 800482a:	f001 ff37 	bl	800669c <__assert_func>
 800482e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8004832:	6004      	str	r4, [r0, #0]
 8004834:	60c4      	str	r4, [r0, #12]
 8004836:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004838:	6819      	ldr	r1, [r3, #0]
 800483a:	b151      	cbz	r1, 8004852 <_dtoa_r+0x52>
 800483c:	685a      	ldr	r2, [r3, #4]
 800483e:	2301      	movs	r3, #1
 8004840:	4093      	lsls	r3, r2
 8004842:	604a      	str	r2, [r1, #4]
 8004844:	608b      	str	r3, [r1, #8]
 8004846:	4628      	mov	r0, r5
 8004848:	f000 ff1c 	bl	8005684 <_Bfree>
 800484c:	2200      	movs	r2, #0
 800484e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004850:	601a      	str	r2, [r3, #0]
 8004852:	1e3b      	subs	r3, r7, #0
 8004854:	bfaf      	iteee	ge
 8004856:	2300      	movge	r3, #0
 8004858:	2201      	movlt	r2, #1
 800485a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800485e:	9305      	strlt	r3, [sp, #20]
 8004860:	bfa8      	it	ge
 8004862:	f8c8 3000 	strge.w	r3, [r8]
 8004866:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800486a:	4b99      	ldr	r3, [pc, #612]	; (8004ad0 <_dtoa_r+0x2d0>)
 800486c:	bfb8      	it	lt
 800486e:	f8c8 2000 	strlt.w	r2, [r8]
 8004872:	ea33 0309 	bics.w	r3, r3, r9
 8004876:	d119      	bne.n	80048ac <_dtoa_r+0xac>
 8004878:	f242 730f 	movw	r3, #9999	; 0x270f
 800487c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800487e:	6013      	str	r3, [r2, #0]
 8004880:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004884:	4333      	orrs	r3, r6
 8004886:	f000 857f 	beq.w	8005388 <_dtoa_r+0xb88>
 800488a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800488c:	b953      	cbnz	r3, 80048a4 <_dtoa_r+0xa4>
 800488e:	4b91      	ldr	r3, [pc, #580]	; (8004ad4 <_dtoa_r+0x2d4>)
 8004890:	e022      	b.n	80048d8 <_dtoa_r+0xd8>
 8004892:	4b91      	ldr	r3, [pc, #580]	; (8004ad8 <_dtoa_r+0x2d8>)
 8004894:	9303      	str	r3, [sp, #12]
 8004896:	3308      	adds	r3, #8
 8004898:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800489a:	6013      	str	r3, [r2, #0]
 800489c:	9803      	ldr	r0, [sp, #12]
 800489e:	b019      	add	sp, #100	; 0x64
 80048a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80048a4:	4b8b      	ldr	r3, [pc, #556]	; (8004ad4 <_dtoa_r+0x2d4>)
 80048a6:	9303      	str	r3, [sp, #12]
 80048a8:	3303      	adds	r3, #3
 80048aa:	e7f5      	b.n	8004898 <_dtoa_r+0x98>
 80048ac:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80048b0:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 80048b4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80048b8:	2200      	movs	r2, #0
 80048ba:	2300      	movs	r3, #0
 80048bc:	f7fc f874 	bl	80009a8 <__aeabi_dcmpeq>
 80048c0:	4680      	mov	r8, r0
 80048c2:	b158      	cbz	r0, 80048dc <_dtoa_r+0xdc>
 80048c4:	2301      	movs	r3, #1
 80048c6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80048c8:	6013      	str	r3, [r2, #0]
 80048ca:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	f000 8558 	beq.w	8005382 <_dtoa_r+0xb82>
 80048d2:	4882      	ldr	r0, [pc, #520]	; (8004adc <_dtoa_r+0x2dc>)
 80048d4:	6018      	str	r0, [r3, #0]
 80048d6:	1e43      	subs	r3, r0, #1
 80048d8:	9303      	str	r3, [sp, #12]
 80048da:	e7df      	b.n	800489c <_dtoa_r+0x9c>
 80048dc:	ab16      	add	r3, sp, #88	; 0x58
 80048de:	9301      	str	r3, [sp, #4]
 80048e0:	ab17      	add	r3, sp, #92	; 0x5c
 80048e2:	9300      	str	r3, [sp, #0]
 80048e4:	4628      	mov	r0, r5
 80048e6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80048ea:	f001 f9b1 	bl	8005c50 <__d2b>
 80048ee:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80048f2:	4683      	mov	fp, r0
 80048f4:	2c00      	cmp	r4, #0
 80048f6:	d07f      	beq.n	80049f8 <_dtoa_r+0x1f8>
 80048f8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80048fc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80048fe:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8004902:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004906:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800490a:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800490e:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8004912:	2200      	movs	r2, #0
 8004914:	4b72      	ldr	r3, [pc, #456]	; (8004ae0 <_dtoa_r+0x2e0>)
 8004916:	f7fb fc27 	bl	8000168 <__aeabi_dsub>
 800491a:	a365      	add	r3, pc, #404	; (adr r3, 8004ab0 <_dtoa_r+0x2b0>)
 800491c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004920:	f7fb fdda 	bl	80004d8 <__aeabi_dmul>
 8004924:	a364      	add	r3, pc, #400	; (adr r3, 8004ab8 <_dtoa_r+0x2b8>)
 8004926:	e9d3 2300 	ldrd	r2, r3, [r3]
 800492a:	f7fb fc1f 	bl	800016c <__adddf3>
 800492e:	4606      	mov	r6, r0
 8004930:	4620      	mov	r0, r4
 8004932:	460f      	mov	r7, r1
 8004934:	f7fb fd66 	bl	8000404 <__aeabi_i2d>
 8004938:	a361      	add	r3, pc, #388	; (adr r3, 8004ac0 <_dtoa_r+0x2c0>)
 800493a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800493e:	f7fb fdcb 	bl	80004d8 <__aeabi_dmul>
 8004942:	4602      	mov	r2, r0
 8004944:	460b      	mov	r3, r1
 8004946:	4630      	mov	r0, r6
 8004948:	4639      	mov	r1, r7
 800494a:	f7fb fc0f 	bl	800016c <__adddf3>
 800494e:	4606      	mov	r6, r0
 8004950:	460f      	mov	r7, r1
 8004952:	f7fc f871 	bl	8000a38 <__aeabi_d2iz>
 8004956:	2200      	movs	r2, #0
 8004958:	4682      	mov	sl, r0
 800495a:	2300      	movs	r3, #0
 800495c:	4630      	mov	r0, r6
 800495e:	4639      	mov	r1, r7
 8004960:	f7fc f82c 	bl	80009bc <__aeabi_dcmplt>
 8004964:	b148      	cbz	r0, 800497a <_dtoa_r+0x17a>
 8004966:	4650      	mov	r0, sl
 8004968:	f7fb fd4c 	bl	8000404 <__aeabi_i2d>
 800496c:	4632      	mov	r2, r6
 800496e:	463b      	mov	r3, r7
 8004970:	f7fc f81a 	bl	80009a8 <__aeabi_dcmpeq>
 8004974:	b908      	cbnz	r0, 800497a <_dtoa_r+0x17a>
 8004976:	f10a 3aff 	add.w	sl, sl, #4294967295
 800497a:	f1ba 0f16 	cmp.w	sl, #22
 800497e:	d858      	bhi.n	8004a32 <_dtoa_r+0x232>
 8004980:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004984:	4b57      	ldr	r3, [pc, #348]	; (8004ae4 <_dtoa_r+0x2e4>)
 8004986:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800498a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800498e:	f7fc f815 	bl	80009bc <__aeabi_dcmplt>
 8004992:	2800      	cmp	r0, #0
 8004994:	d04f      	beq.n	8004a36 <_dtoa_r+0x236>
 8004996:	2300      	movs	r3, #0
 8004998:	f10a 3aff 	add.w	sl, sl, #4294967295
 800499c:	930f      	str	r3, [sp, #60]	; 0x3c
 800499e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80049a0:	1b1c      	subs	r4, r3, r4
 80049a2:	1e63      	subs	r3, r4, #1
 80049a4:	9309      	str	r3, [sp, #36]	; 0x24
 80049a6:	bf49      	itett	mi
 80049a8:	f1c4 0301 	rsbmi	r3, r4, #1
 80049ac:	2300      	movpl	r3, #0
 80049ae:	9306      	strmi	r3, [sp, #24]
 80049b0:	2300      	movmi	r3, #0
 80049b2:	bf54      	ite	pl
 80049b4:	9306      	strpl	r3, [sp, #24]
 80049b6:	9309      	strmi	r3, [sp, #36]	; 0x24
 80049b8:	f1ba 0f00 	cmp.w	sl, #0
 80049bc:	db3d      	blt.n	8004a3a <_dtoa_r+0x23a>
 80049be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80049c0:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 80049c4:	4453      	add	r3, sl
 80049c6:	9309      	str	r3, [sp, #36]	; 0x24
 80049c8:	2300      	movs	r3, #0
 80049ca:	930a      	str	r3, [sp, #40]	; 0x28
 80049cc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80049ce:	2b09      	cmp	r3, #9
 80049d0:	f200 808c 	bhi.w	8004aec <_dtoa_r+0x2ec>
 80049d4:	2b05      	cmp	r3, #5
 80049d6:	bfc4      	itt	gt
 80049d8:	3b04      	subgt	r3, #4
 80049da:	9322      	strgt	r3, [sp, #136]	; 0x88
 80049dc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80049de:	bfc8      	it	gt
 80049e0:	2400      	movgt	r4, #0
 80049e2:	f1a3 0302 	sub.w	r3, r3, #2
 80049e6:	bfd8      	it	le
 80049e8:	2401      	movle	r4, #1
 80049ea:	2b03      	cmp	r3, #3
 80049ec:	f200 808a 	bhi.w	8004b04 <_dtoa_r+0x304>
 80049f0:	e8df f003 	tbb	[pc, r3]
 80049f4:	5b4d4f2d 	.word	0x5b4d4f2d
 80049f8:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 80049fc:	441c      	add	r4, r3
 80049fe:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8004a02:	2b20      	cmp	r3, #32
 8004a04:	bfc3      	ittte	gt
 8004a06:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8004a0a:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8004a0e:	fa09 f303 	lslgt.w	r3, r9, r3
 8004a12:	f1c3 0320 	rsble	r3, r3, #32
 8004a16:	bfc6      	itte	gt
 8004a18:	fa26 f000 	lsrgt.w	r0, r6, r0
 8004a1c:	4318      	orrgt	r0, r3
 8004a1e:	fa06 f003 	lslle.w	r0, r6, r3
 8004a22:	f7fb fcdf 	bl	80003e4 <__aeabi_ui2d>
 8004a26:	2301      	movs	r3, #1
 8004a28:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8004a2c:	3c01      	subs	r4, #1
 8004a2e:	9313      	str	r3, [sp, #76]	; 0x4c
 8004a30:	e76f      	b.n	8004912 <_dtoa_r+0x112>
 8004a32:	2301      	movs	r3, #1
 8004a34:	e7b2      	b.n	800499c <_dtoa_r+0x19c>
 8004a36:	900f      	str	r0, [sp, #60]	; 0x3c
 8004a38:	e7b1      	b.n	800499e <_dtoa_r+0x19e>
 8004a3a:	9b06      	ldr	r3, [sp, #24]
 8004a3c:	eba3 030a 	sub.w	r3, r3, sl
 8004a40:	9306      	str	r3, [sp, #24]
 8004a42:	f1ca 0300 	rsb	r3, sl, #0
 8004a46:	930a      	str	r3, [sp, #40]	; 0x28
 8004a48:	2300      	movs	r3, #0
 8004a4a:	930e      	str	r3, [sp, #56]	; 0x38
 8004a4c:	e7be      	b.n	80049cc <_dtoa_r+0x1cc>
 8004a4e:	2300      	movs	r3, #0
 8004a50:	930b      	str	r3, [sp, #44]	; 0x2c
 8004a52:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	dc58      	bgt.n	8004b0a <_dtoa_r+0x30a>
 8004a58:	f04f 0901 	mov.w	r9, #1
 8004a5c:	464b      	mov	r3, r9
 8004a5e:	f8cd 9020 	str.w	r9, [sp, #32]
 8004a62:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 8004a66:	2200      	movs	r2, #0
 8004a68:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8004a6a:	6042      	str	r2, [r0, #4]
 8004a6c:	2204      	movs	r2, #4
 8004a6e:	f102 0614 	add.w	r6, r2, #20
 8004a72:	429e      	cmp	r6, r3
 8004a74:	6841      	ldr	r1, [r0, #4]
 8004a76:	d94e      	bls.n	8004b16 <_dtoa_r+0x316>
 8004a78:	4628      	mov	r0, r5
 8004a7a:	f000 fdc3 	bl	8005604 <_Balloc>
 8004a7e:	9003      	str	r0, [sp, #12]
 8004a80:	2800      	cmp	r0, #0
 8004a82:	d14c      	bne.n	8004b1e <_dtoa_r+0x31e>
 8004a84:	4602      	mov	r2, r0
 8004a86:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8004a8a:	4b17      	ldr	r3, [pc, #92]	; (8004ae8 <_dtoa_r+0x2e8>)
 8004a8c:	e6cc      	b.n	8004828 <_dtoa_r+0x28>
 8004a8e:	2301      	movs	r3, #1
 8004a90:	e7de      	b.n	8004a50 <_dtoa_r+0x250>
 8004a92:	2300      	movs	r3, #0
 8004a94:	930b      	str	r3, [sp, #44]	; 0x2c
 8004a96:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004a98:	eb0a 0903 	add.w	r9, sl, r3
 8004a9c:	f109 0301 	add.w	r3, r9, #1
 8004aa0:	2b01      	cmp	r3, #1
 8004aa2:	9308      	str	r3, [sp, #32]
 8004aa4:	bfb8      	it	lt
 8004aa6:	2301      	movlt	r3, #1
 8004aa8:	e7dd      	b.n	8004a66 <_dtoa_r+0x266>
 8004aaa:	2301      	movs	r3, #1
 8004aac:	e7f2      	b.n	8004a94 <_dtoa_r+0x294>
 8004aae:	bf00      	nop
 8004ab0:	636f4361 	.word	0x636f4361
 8004ab4:	3fd287a7 	.word	0x3fd287a7
 8004ab8:	8b60c8b3 	.word	0x8b60c8b3
 8004abc:	3fc68a28 	.word	0x3fc68a28
 8004ac0:	509f79fb 	.word	0x509f79fb
 8004ac4:	3fd34413 	.word	0x3fd34413
 8004ac8:	08007179 	.word	0x08007179
 8004acc:	08007190 	.word	0x08007190
 8004ad0:	7ff00000 	.word	0x7ff00000
 8004ad4:	08007175 	.word	0x08007175
 8004ad8:	0800716c 	.word	0x0800716c
 8004adc:	08007149 	.word	0x08007149
 8004ae0:	3ff80000 	.word	0x3ff80000
 8004ae4:	080072e0 	.word	0x080072e0
 8004ae8:	080071eb 	.word	0x080071eb
 8004aec:	2401      	movs	r4, #1
 8004aee:	2300      	movs	r3, #0
 8004af0:	940b      	str	r4, [sp, #44]	; 0x2c
 8004af2:	9322      	str	r3, [sp, #136]	; 0x88
 8004af4:	f04f 39ff 	mov.w	r9, #4294967295
 8004af8:	2200      	movs	r2, #0
 8004afa:	2312      	movs	r3, #18
 8004afc:	f8cd 9020 	str.w	r9, [sp, #32]
 8004b00:	9223      	str	r2, [sp, #140]	; 0x8c
 8004b02:	e7b0      	b.n	8004a66 <_dtoa_r+0x266>
 8004b04:	2301      	movs	r3, #1
 8004b06:	930b      	str	r3, [sp, #44]	; 0x2c
 8004b08:	e7f4      	b.n	8004af4 <_dtoa_r+0x2f4>
 8004b0a:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 8004b0e:	464b      	mov	r3, r9
 8004b10:	f8cd 9020 	str.w	r9, [sp, #32]
 8004b14:	e7a7      	b.n	8004a66 <_dtoa_r+0x266>
 8004b16:	3101      	adds	r1, #1
 8004b18:	6041      	str	r1, [r0, #4]
 8004b1a:	0052      	lsls	r2, r2, #1
 8004b1c:	e7a7      	b.n	8004a6e <_dtoa_r+0x26e>
 8004b1e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004b20:	9a03      	ldr	r2, [sp, #12]
 8004b22:	601a      	str	r2, [r3, #0]
 8004b24:	9b08      	ldr	r3, [sp, #32]
 8004b26:	2b0e      	cmp	r3, #14
 8004b28:	f200 80a8 	bhi.w	8004c7c <_dtoa_r+0x47c>
 8004b2c:	2c00      	cmp	r4, #0
 8004b2e:	f000 80a5 	beq.w	8004c7c <_dtoa_r+0x47c>
 8004b32:	f1ba 0f00 	cmp.w	sl, #0
 8004b36:	dd34      	ble.n	8004ba2 <_dtoa_r+0x3a2>
 8004b38:	4a9a      	ldr	r2, [pc, #616]	; (8004da4 <_dtoa_r+0x5a4>)
 8004b3a:	f00a 030f 	and.w	r3, sl, #15
 8004b3e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8004b42:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8004b46:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004b4a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8004b4e:	ea4f 142a 	mov.w	r4, sl, asr #4
 8004b52:	d016      	beq.n	8004b82 <_dtoa_r+0x382>
 8004b54:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004b58:	4b93      	ldr	r3, [pc, #588]	; (8004da8 <_dtoa_r+0x5a8>)
 8004b5a:	2703      	movs	r7, #3
 8004b5c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004b60:	f7fb fde4 	bl	800072c <__aeabi_ddiv>
 8004b64:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004b68:	f004 040f 	and.w	r4, r4, #15
 8004b6c:	4e8e      	ldr	r6, [pc, #568]	; (8004da8 <_dtoa_r+0x5a8>)
 8004b6e:	b954      	cbnz	r4, 8004b86 <_dtoa_r+0x386>
 8004b70:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004b74:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004b78:	f7fb fdd8 	bl	800072c <__aeabi_ddiv>
 8004b7c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004b80:	e029      	b.n	8004bd6 <_dtoa_r+0x3d6>
 8004b82:	2702      	movs	r7, #2
 8004b84:	e7f2      	b.n	8004b6c <_dtoa_r+0x36c>
 8004b86:	07e1      	lsls	r1, r4, #31
 8004b88:	d508      	bpl.n	8004b9c <_dtoa_r+0x39c>
 8004b8a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004b8e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8004b92:	f7fb fca1 	bl	80004d8 <__aeabi_dmul>
 8004b96:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004b9a:	3701      	adds	r7, #1
 8004b9c:	1064      	asrs	r4, r4, #1
 8004b9e:	3608      	adds	r6, #8
 8004ba0:	e7e5      	b.n	8004b6e <_dtoa_r+0x36e>
 8004ba2:	f000 80a5 	beq.w	8004cf0 <_dtoa_r+0x4f0>
 8004ba6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004baa:	f1ca 0400 	rsb	r4, sl, #0
 8004bae:	4b7d      	ldr	r3, [pc, #500]	; (8004da4 <_dtoa_r+0x5a4>)
 8004bb0:	f004 020f 	and.w	r2, r4, #15
 8004bb4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004bb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bbc:	f7fb fc8c 	bl	80004d8 <__aeabi_dmul>
 8004bc0:	2702      	movs	r7, #2
 8004bc2:	2300      	movs	r3, #0
 8004bc4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004bc8:	4e77      	ldr	r6, [pc, #476]	; (8004da8 <_dtoa_r+0x5a8>)
 8004bca:	1124      	asrs	r4, r4, #4
 8004bcc:	2c00      	cmp	r4, #0
 8004bce:	f040 8084 	bne.w	8004cda <_dtoa_r+0x4da>
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d1d2      	bne.n	8004b7c <_dtoa_r+0x37c>
 8004bd6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	f000 808b 	beq.w	8004cf4 <_dtoa_r+0x4f4>
 8004bde:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8004be2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8004be6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004bea:	2200      	movs	r2, #0
 8004bec:	4b6f      	ldr	r3, [pc, #444]	; (8004dac <_dtoa_r+0x5ac>)
 8004bee:	f7fb fee5 	bl	80009bc <__aeabi_dcmplt>
 8004bf2:	2800      	cmp	r0, #0
 8004bf4:	d07e      	beq.n	8004cf4 <_dtoa_r+0x4f4>
 8004bf6:	9b08      	ldr	r3, [sp, #32]
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d07b      	beq.n	8004cf4 <_dtoa_r+0x4f4>
 8004bfc:	f1b9 0f00 	cmp.w	r9, #0
 8004c00:	dd38      	ble.n	8004c74 <_dtoa_r+0x474>
 8004c02:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004c06:	2200      	movs	r2, #0
 8004c08:	4b69      	ldr	r3, [pc, #420]	; (8004db0 <_dtoa_r+0x5b0>)
 8004c0a:	f7fb fc65 	bl	80004d8 <__aeabi_dmul>
 8004c0e:	464c      	mov	r4, r9
 8004c10:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004c14:	f10a 38ff 	add.w	r8, sl, #4294967295
 8004c18:	3701      	adds	r7, #1
 8004c1a:	4638      	mov	r0, r7
 8004c1c:	f7fb fbf2 	bl	8000404 <__aeabi_i2d>
 8004c20:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004c24:	f7fb fc58 	bl	80004d8 <__aeabi_dmul>
 8004c28:	2200      	movs	r2, #0
 8004c2a:	4b62      	ldr	r3, [pc, #392]	; (8004db4 <_dtoa_r+0x5b4>)
 8004c2c:	f7fb fa9e 	bl	800016c <__adddf3>
 8004c30:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8004c34:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004c38:	9611      	str	r6, [sp, #68]	; 0x44
 8004c3a:	2c00      	cmp	r4, #0
 8004c3c:	d15d      	bne.n	8004cfa <_dtoa_r+0x4fa>
 8004c3e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004c42:	2200      	movs	r2, #0
 8004c44:	4b5c      	ldr	r3, [pc, #368]	; (8004db8 <_dtoa_r+0x5b8>)
 8004c46:	f7fb fa8f 	bl	8000168 <__aeabi_dsub>
 8004c4a:	4602      	mov	r2, r0
 8004c4c:	460b      	mov	r3, r1
 8004c4e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004c52:	4633      	mov	r3, r6
 8004c54:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004c56:	f7fb fecf 	bl	80009f8 <__aeabi_dcmpgt>
 8004c5a:	2800      	cmp	r0, #0
 8004c5c:	f040 829c 	bne.w	8005198 <_dtoa_r+0x998>
 8004c60:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004c64:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004c66:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8004c6a:	f7fb fea7 	bl	80009bc <__aeabi_dcmplt>
 8004c6e:	2800      	cmp	r0, #0
 8004c70:	f040 8290 	bne.w	8005194 <_dtoa_r+0x994>
 8004c74:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8004c78:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8004c7c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	f2c0 8152 	blt.w	8004f28 <_dtoa_r+0x728>
 8004c84:	f1ba 0f0e 	cmp.w	sl, #14
 8004c88:	f300 814e 	bgt.w	8004f28 <_dtoa_r+0x728>
 8004c8c:	4b45      	ldr	r3, [pc, #276]	; (8004da4 <_dtoa_r+0x5a4>)
 8004c8e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8004c92:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004c96:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8004c9a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	f280 80db 	bge.w	8004e58 <_dtoa_r+0x658>
 8004ca2:	9b08      	ldr	r3, [sp, #32]
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	f300 80d7 	bgt.w	8004e58 <_dtoa_r+0x658>
 8004caa:	f040 8272 	bne.w	8005192 <_dtoa_r+0x992>
 8004cae:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	4b40      	ldr	r3, [pc, #256]	; (8004db8 <_dtoa_r+0x5b8>)
 8004cb6:	f7fb fc0f 	bl	80004d8 <__aeabi_dmul>
 8004cba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004cbe:	f7fb fe91 	bl	80009e4 <__aeabi_dcmpge>
 8004cc2:	9c08      	ldr	r4, [sp, #32]
 8004cc4:	4626      	mov	r6, r4
 8004cc6:	2800      	cmp	r0, #0
 8004cc8:	f040 8248 	bne.w	800515c <_dtoa_r+0x95c>
 8004ccc:	2331      	movs	r3, #49	; 0x31
 8004cce:	9f03      	ldr	r7, [sp, #12]
 8004cd0:	f10a 0a01 	add.w	sl, sl, #1
 8004cd4:	f807 3b01 	strb.w	r3, [r7], #1
 8004cd8:	e244      	b.n	8005164 <_dtoa_r+0x964>
 8004cda:	07e2      	lsls	r2, r4, #31
 8004cdc:	d505      	bpl.n	8004cea <_dtoa_r+0x4ea>
 8004cde:	e9d6 2300 	ldrd	r2, r3, [r6]
 8004ce2:	f7fb fbf9 	bl	80004d8 <__aeabi_dmul>
 8004ce6:	2301      	movs	r3, #1
 8004ce8:	3701      	adds	r7, #1
 8004cea:	1064      	asrs	r4, r4, #1
 8004cec:	3608      	adds	r6, #8
 8004cee:	e76d      	b.n	8004bcc <_dtoa_r+0x3cc>
 8004cf0:	2702      	movs	r7, #2
 8004cf2:	e770      	b.n	8004bd6 <_dtoa_r+0x3d6>
 8004cf4:	46d0      	mov	r8, sl
 8004cf6:	9c08      	ldr	r4, [sp, #32]
 8004cf8:	e78f      	b.n	8004c1a <_dtoa_r+0x41a>
 8004cfa:	9903      	ldr	r1, [sp, #12]
 8004cfc:	4b29      	ldr	r3, [pc, #164]	; (8004da4 <_dtoa_r+0x5a4>)
 8004cfe:	4421      	add	r1, r4
 8004d00:	9112      	str	r1, [sp, #72]	; 0x48
 8004d02:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004d04:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8004d08:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8004d0c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8004d10:	2900      	cmp	r1, #0
 8004d12:	d055      	beq.n	8004dc0 <_dtoa_r+0x5c0>
 8004d14:	2000      	movs	r0, #0
 8004d16:	4929      	ldr	r1, [pc, #164]	; (8004dbc <_dtoa_r+0x5bc>)
 8004d18:	f7fb fd08 	bl	800072c <__aeabi_ddiv>
 8004d1c:	463b      	mov	r3, r7
 8004d1e:	4632      	mov	r2, r6
 8004d20:	f7fb fa22 	bl	8000168 <__aeabi_dsub>
 8004d24:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004d28:	9f03      	ldr	r7, [sp, #12]
 8004d2a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004d2e:	f7fb fe83 	bl	8000a38 <__aeabi_d2iz>
 8004d32:	4604      	mov	r4, r0
 8004d34:	f7fb fb66 	bl	8000404 <__aeabi_i2d>
 8004d38:	4602      	mov	r2, r0
 8004d3a:	460b      	mov	r3, r1
 8004d3c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004d40:	f7fb fa12 	bl	8000168 <__aeabi_dsub>
 8004d44:	4602      	mov	r2, r0
 8004d46:	460b      	mov	r3, r1
 8004d48:	3430      	adds	r4, #48	; 0x30
 8004d4a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004d4e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004d52:	f807 4b01 	strb.w	r4, [r7], #1
 8004d56:	f7fb fe31 	bl	80009bc <__aeabi_dcmplt>
 8004d5a:	2800      	cmp	r0, #0
 8004d5c:	d174      	bne.n	8004e48 <_dtoa_r+0x648>
 8004d5e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004d62:	2000      	movs	r0, #0
 8004d64:	4911      	ldr	r1, [pc, #68]	; (8004dac <_dtoa_r+0x5ac>)
 8004d66:	f7fb f9ff 	bl	8000168 <__aeabi_dsub>
 8004d6a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004d6e:	f7fb fe25 	bl	80009bc <__aeabi_dcmplt>
 8004d72:	2800      	cmp	r0, #0
 8004d74:	f040 80b7 	bne.w	8004ee6 <_dtoa_r+0x6e6>
 8004d78:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004d7a:	429f      	cmp	r7, r3
 8004d7c:	f43f af7a 	beq.w	8004c74 <_dtoa_r+0x474>
 8004d80:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004d84:	2200      	movs	r2, #0
 8004d86:	4b0a      	ldr	r3, [pc, #40]	; (8004db0 <_dtoa_r+0x5b0>)
 8004d88:	f7fb fba6 	bl	80004d8 <__aeabi_dmul>
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004d92:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004d96:	4b06      	ldr	r3, [pc, #24]	; (8004db0 <_dtoa_r+0x5b0>)
 8004d98:	f7fb fb9e 	bl	80004d8 <__aeabi_dmul>
 8004d9c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004da0:	e7c3      	b.n	8004d2a <_dtoa_r+0x52a>
 8004da2:	bf00      	nop
 8004da4:	080072e0 	.word	0x080072e0
 8004da8:	080072b8 	.word	0x080072b8
 8004dac:	3ff00000 	.word	0x3ff00000
 8004db0:	40240000 	.word	0x40240000
 8004db4:	401c0000 	.word	0x401c0000
 8004db8:	40140000 	.word	0x40140000
 8004dbc:	3fe00000 	.word	0x3fe00000
 8004dc0:	4630      	mov	r0, r6
 8004dc2:	4639      	mov	r1, r7
 8004dc4:	f7fb fb88 	bl	80004d8 <__aeabi_dmul>
 8004dc8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004dca:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004dce:	9c03      	ldr	r4, [sp, #12]
 8004dd0:	9314      	str	r3, [sp, #80]	; 0x50
 8004dd2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004dd6:	f7fb fe2f 	bl	8000a38 <__aeabi_d2iz>
 8004dda:	9015      	str	r0, [sp, #84]	; 0x54
 8004ddc:	f7fb fb12 	bl	8000404 <__aeabi_i2d>
 8004de0:	4602      	mov	r2, r0
 8004de2:	460b      	mov	r3, r1
 8004de4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004de8:	f7fb f9be 	bl	8000168 <__aeabi_dsub>
 8004dec:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004dee:	4606      	mov	r6, r0
 8004df0:	3330      	adds	r3, #48	; 0x30
 8004df2:	f804 3b01 	strb.w	r3, [r4], #1
 8004df6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004df8:	460f      	mov	r7, r1
 8004dfa:	429c      	cmp	r4, r3
 8004dfc:	f04f 0200 	mov.w	r2, #0
 8004e00:	d124      	bne.n	8004e4c <_dtoa_r+0x64c>
 8004e02:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004e06:	4bb0      	ldr	r3, [pc, #704]	; (80050c8 <_dtoa_r+0x8c8>)
 8004e08:	f7fb f9b0 	bl	800016c <__adddf3>
 8004e0c:	4602      	mov	r2, r0
 8004e0e:	460b      	mov	r3, r1
 8004e10:	4630      	mov	r0, r6
 8004e12:	4639      	mov	r1, r7
 8004e14:	f7fb fdf0 	bl	80009f8 <__aeabi_dcmpgt>
 8004e18:	2800      	cmp	r0, #0
 8004e1a:	d163      	bne.n	8004ee4 <_dtoa_r+0x6e4>
 8004e1c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004e20:	2000      	movs	r0, #0
 8004e22:	49a9      	ldr	r1, [pc, #676]	; (80050c8 <_dtoa_r+0x8c8>)
 8004e24:	f7fb f9a0 	bl	8000168 <__aeabi_dsub>
 8004e28:	4602      	mov	r2, r0
 8004e2a:	460b      	mov	r3, r1
 8004e2c:	4630      	mov	r0, r6
 8004e2e:	4639      	mov	r1, r7
 8004e30:	f7fb fdc4 	bl	80009bc <__aeabi_dcmplt>
 8004e34:	2800      	cmp	r0, #0
 8004e36:	f43f af1d 	beq.w	8004c74 <_dtoa_r+0x474>
 8004e3a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8004e3c:	1e7b      	subs	r3, r7, #1
 8004e3e:	9314      	str	r3, [sp, #80]	; 0x50
 8004e40:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8004e44:	2b30      	cmp	r3, #48	; 0x30
 8004e46:	d0f8      	beq.n	8004e3a <_dtoa_r+0x63a>
 8004e48:	46c2      	mov	sl, r8
 8004e4a:	e03b      	b.n	8004ec4 <_dtoa_r+0x6c4>
 8004e4c:	4b9f      	ldr	r3, [pc, #636]	; (80050cc <_dtoa_r+0x8cc>)
 8004e4e:	f7fb fb43 	bl	80004d8 <__aeabi_dmul>
 8004e52:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004e56:	e7bc      	b.n	8004dd2 <_dtoa_r+0x5d2>
 8004e58:	9f03      	ldr	r7, [sp, #12]
 8004e5a:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8004e5e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004e62:	4640      	mov	r0, r8
 8004e64:	4649      	mov	r1, r9
 8004e66:	f7fb fc61 	bl	800072c <__aeabi_ddiv>
 8004e6a:	f7fb fde5 	bl	8000a38 <__aeabi_d2iz>
 8004e6e:	4604      	mov	r4, r0
 8004e70:	f7fb fac8 	bl	8000404 <__aeabi_i2d>
 8004e74:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004e78:	f7fb fb2e 	bl	80004d8 <__aeabi_dmul>
 8004e7c:	4602      	mov	r2, r0
 8004e7e:	460b      	mov	r3, r1
 8004e80:	4640      	mov	r0, r8
 8004e82:	4649      	mov	r1, r9
 8004e84:	f7fb f970 	bl	8000168 <__aeabi_dsub>
 8004e88:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8004e8c:	f807 6b01 	strb.w	r6, [r7], #1
 8004e90:	9e03      	ldr	r6, [sp, #12]
 8004e92:	f8dd c020 	ldr.w	ip, [sp, #32]
 8004e96:	1bbe      	subs	r6, r7, r6
 8004e98:	45b4      	cmp	ip, r6
 8004e9a:	4602      	mov	r2, r0
 8004e9c:	460b      	mov	r3, r1
 8004e9e:	d136      	bne.n	8004f0e <_dtoa_r+0x70e>
 8004ea0:	f7fb f964 	bl	800016c <__adddf3>
 8004ea4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004ea8:	4680      	mov	r8, r0
 8004eaa:	4689      	mov	r9, r1
 8004eac:	f7fb fda4 	bl	80009f8 <__aeabi_dcmpgt>
 8004eb0:	bb58      	cbnz	r0, 8004f0a <_dtoa_r+0x70a>
 8004eb2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004eb6:	4640      	mov	r0, r8
 8004eb8:	4649      	mov	r1, r9
 8004eba:	f7fb fd75 	bl	80009a8 <__aeabi_dcmpeq>
 8004ebe:	b108      	cbz	r0, 8004ec4 <_dtoa_r+0x6c4>
 8004ec0:	07e1      	lsls	r1, r4, #31
 8004ec2:	d422      	bmi.n	8004f0a <_dtoa_r+0x70a>
 8004ec4:	4628      	mov	r0, r5
 8004ec6:	4659      	mov	r1, fp
 8004ec8:	f000 fbdc 	bl	8005684 <_Bfree>
 8004ecc:	2300      	movs	r3, #0
 8004ece:	703b      	strb	r3, [r7, #0]
 8004ed0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8004ed2:	f10a 0001 	add.w	r0, sl, #1
 8004ed6:	6018      	str	r0, [r3, #0]
 8004ed8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	f43f acde 	beq.w	800489c <_dtoa_r+0x9c>
 8004ee0:	601f      	str	r7, [r3, #0]
 8004ee2:	e4db      	b.n	800489c <_dtoa_r+0x9c>
 8004ee4:	4627      	mov	r7, r4
 8004ee6:	463b      	mov	r3, r7
 8004ee8:	461f      	mov	r7, r3
 8004eea:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004eee:	2a39      	cmp	r2, #57	; 0x39
 8004ef0:	d107      	bne.n	8004f02 <_dtoa_r+0x702>
 8004ef2:	9a03      	ldr	r2, [sp, #12]
 8004ef4:	429a      	cmp	r2, r3
 8004ef6:	d1f7      	bne.n	8004ee8 <_dtoa_r+0x6e8>
 8004ef8:	2230      	movs	r2, #48	; 0x30
 8004efa:	9903      	ldr	r1, [sp, #12]
 8004efc:	f108 0801 	add.w	r8, r8, #1
 8004f00:	700a      	strb	r2, [r1, #0]
 8004f02:	781a      	ldrb	r2, [r3, #0]
 8004f04:	3201      	adds	r2, #1
 8004f06:	701a      	strb	r2, [r3, #0]
 8004f08:	e79e      	b.n	8004e48 <_dtoa_r+0x648>
 8004f0a:	46d0      	mov	r8, sl
 8004f0c:	e7eb      	b.n	8004ee6 <_dtoa_r+0x6e6>
 8004f0e:	2200      	movs	r2, #0
 8004f10:	4b6e      	ldr	r3, [pc, #440]	; (80050cc <_dtoa_r+0x8cc>)
 8004f12:	f7fb fae1 	bl	80004d8 <__aeabi_dmul>
 8004f16:	2200      	movs	r2, #0
 8004f18:	2300      	movs	r3, #0
 8004f1a:	4680      	mov	r8, r0
 8004f1c:	4689      	mov	r9, r1
 8004f1e:	f7fb fd43 	bl	80009a8 <__aeabi_dcmpeq>
 8004f22:	2800      	cmp	r0, #0
 8004f24:	d09b      	beq.n	8004e5e <_dtoa_r+0x65e>
 8004f26:	e7cd      	b.n	8004ec4 <_dtoa_r+0x6c4>
 8004f28:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004f2a:	2a00      	cmp	r2, #0
 8004f2c:	f000 80d0 	beq.w	80050d0 <_dtoa_r+0x8d0>
 8004f30:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8004f32:	2a01      	cmp	r2, #1
 8004f34:	f300 80ae 	bgt.w	8005094 <_dtoa_r+0x894>
 8004f38:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8004f3a:	2a00      	cmp	r2, #0
 8004f3c:	f000 80a6 	beq.w	800508c <_dtoa_r+0x88c>
 8004f40:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8004f44:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8004f46:	9f06      	ldr	r7, [sp, #24]
 8004f48:	9a06      	ldr	r2, [sp, #24]
 8004f4a:	2101      	movs	r1, #1
 8004f4c:	441a      	add	r2, r3
 8004f4e:	9206      	str	r2, [sp, #24]
 8004f50:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004f52:	4628      	mov	r0, r5
 8004f54:	441a      	add	r2, r3
 8004f56:	9209      	str	r2, [sp, #36]	; 0x24
 8004f58:	f000 fc4a 	bl	80057f0 <__i2b>
 8004f5c:	4606      	mov	r6, r0
 8004f5e:	2f00      	cmp	r7, #0
 8004f60:	dd0c      	ble.n	8004f7c <_dtoa_r+0x77c>
 8004f62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	dd09      	ble.n	8004f7c <_dtoa_r+0x77c>
 8004f68:	42bb      	cmp	r3, r7
 8004f6a:	bfa8      	it	ge
 8004f6c:	463b      	movge	r3, r7
 8004f6e:	9a06      	ldr	r2, [sp, #24]
 8004f70:	1aff      	subs	r7, r7, r3
 8004f72:	1ad2      	subs	r2, r2, r3
 8004f74:	9206      	str	r2, [sp, #24]
 8004f76:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004f78:	1ad3      	subs	r3, r2, r3
 8004f7a:	9309      	str	r3, [sp, #36]	; 0x24
 8004f7c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004f7e:	b1f3      	cbz	r3, 8004fbe <_dtoa_r+0x7be>
 8004f80:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	f000 80a8 	beq.w	80050d8 <_dtoa_r+0x8d8>
 8004f88:	2c00      	cmp	r4, #0
 8004f8a:	dd10      	ble.n	8004fae <_dtoa_r+0x7ae>
 8004f8c:	4631      	mov	r1, r6
 8004f8e:	4622      	mov	r2, r4
 8004f90:	4628      	mov	r0, r5
 8004f92:	f000 fceb 	bl	800596c <__pow5mult>
 8004f96:	465a      	mov	r2, fp
 8004f98:	4601      	mov	r1, r0
 8004f9a:	4606      	mov	r6, r0
 8004f9c:	4628      	mov	r0, r5
 8004f9e:	f000 fc3d 	bl	800581c <__multiply>
 8004fa2:	4680      	mov	r8, r0
 8004fa4:	4659      	mov	r1, fp
 8004fa6:	4628      	mov	r0, r5
 8004fa8:	f000 fb6c 	bl	8005684 <_Bfree>
 8004fac:	46c3      	mov	fp, r8
 8004fae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004fb0:	1b1a      	subs	r2, r3, r4
 8004fb2:	d004      	beq.n	8004fbe <_dtoa_r+0x7be>
 8004fb4:	4659      	mov	r1, fp
 8004fb6:	4628      	mov	r0, r5
 8004fb8:	f000 fcd8 	bl	800596c <__pow5mult>
 8004fbc:	4683      	mov	fp, r0
 8004fbe:	2101      	movs	r1, #1
 8004fc0:	4628      	mov	r0, r5
 8004fc2:	f000 fc15 	bl	80057f0 <__i2b>
 8004fc6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004fc8:	4604      	mov	r4, r0
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	f340 8086 	ble.w	80050dc <_dtoa_r+0x8dc>
 8004fd0:	461a      	mov	r2, r3
 8004fd2:	4601      	mov	r1, r0
 8004fd4:	4628      	mov	r0, r5
 8004fd6:	f000 fcc9 	bl	800596c <__pow5mult>
 8004fda:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004fdc:	4604      	mov	r4, r0
 8004fde:	2b01      	cmp	r3, #1
 8004fe0:	dd7f      	ble.n	80050e2 <_dtoa_r+0x8e2>
 8004fe2:	f04f 0800 	mov.w	r8, #0
 8004fe6:	6923      	ldr	r3, [r4, #16]
 8004fe8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8004fec:	6918      	ldr	r0, [r3, #16]
 8004fee:	f000 fbb1 	bl	8005754 <__hi0bits>
 8004ff2:	f1c0 0020 	rsb	r0, r0, #32
 8004ff6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004ff8:	4418      	add	r0, r3
 8004ffa:	f010 001f 	ands.w	r0, r0, #31
 8004ffe:	f000 8092 	beq.w	8005126 <_dtoa_r+0x926>
 8005002:	f1c0 0320 	rsb	r3, r0, #32
 8005006:	2b04      	cmp	r3, #4
 8005008:	f340 808a 	ble.w	8005120 <_dtoa_r+0x920>
 800500c:	f1c0 001c 	rsb	r0, r0, #28
 8005010:	9b06      	ldr	r3, [sp, #24]
 8005012:	4407      	add	r7, r0
 8005014:	4403      	add	r3, r0
 8005016:	9306      	str	r3, [sp, #24]
 8005018:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800501a:	4403      	add	r3, r0
 800501c:	9309      	str	r3, [sp, #36]	; 0x24
 800501e:	9b06      	ldr	r3, [sp, #24]
 8005020:	2b00      	cmp	r3, #0
 8005022:	dd05      	ble.n	8005030 <_dtoa_r+0x830>
 8005024:	4659      	mov	r1, fp
 8005026:	461a      	mov	r2, r3
 8005028:	4628      	mov	r0, r5
 800502a:	f000 fcf9 	bl	8005a20 <__lshift>
 800502e:	4683      	mov	fp, r0
 8005030:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005032:	2b00      	cmp	r3, #0
 8005034:	dd05      	ble.n	8005042 <_dtoa_r+0x842>
 8005036:	4621      	mov	r1, r4
 8005038:	461a      	mov	r2, r3
 800503a:	4628      	mov	r0, r5
 800503c:	f000 fcf0 	bl	8005a20 <__lshift>
 8005040:	4604      	mov	r4, r0
 8005042:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005044:	2b00      	cmp	r3, #0
 8005046:	d070      	beq.n	800512a <_dtoa_r+0x92a>
 8005048:	4621      	mov	r1, r4
 800504a:	4658      	mov	r0, fp
 800504c:	f000 fd58 	bl	8005b00 <__mcmp>
 8005050:	2800      	cmp	r0, #0
 8005052:	da6a      	bge.n	800512a <_dtoa_r+0x92a>
 8005054:	2300      	movs	r3, #0
 8005056:	4659      	mov	r1, fp
 8005058:	220a      	movs	r2, #10
 800505a:	4628      	mov	r0, r5
 800505c:	f000 fb34 	bl	80056c8 <__multadd>
 8005060:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005062:	4683      	mov	fp, r0
 8005064:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005068:	2b00      	cmp	r3, #0
 800506a:	f000 8194 	beq.w	8005396 <_dtoa_r+0xb96>
 800506e:	4631      	mov	r1, r6
 8005070:	2300      	movs	r3, #0
 8005072:	220a      	movs	r2, #10
 8005074:	4628      	mov	r0, r5
 8005076:	f000 fb27 	bl	80056c8 <__multadd>
 800507a:	f1b9 0f00 	cmp.w	r9, #0
 800507e:	4606      	mov	r6, r0
 8005080:	f300 8093 	bgt.w	80051aa <_dtoa_r+0x9aa>
 8005084:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005086:	2b02      	cmp	r3, #2
 8005088:	dc57      	bgt.n	800513a <_dtoa_r+0x93a>
 800508a:	e08e      	b.n	80051aa <_dtoa_r+0x9aa>
 800508c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800508e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005092:	e757      	b.n	8004f44 <_dtoa_r+0x744>
 8005094:	9b08      	ldr	r3, [sp, #32]
 8005096:	1e5c      	subs	r4, r3, #1
 8005098:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800509a:	42a3      	cmp	r3, r4
 800509c:	bfb7      	itett	lt
 800509e:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80050a0:	1b1c      	subge	r4, r3, r4
 80050a2:	1ae2      	sublt	r2, r4, r3
 80050a4:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80050a6:	bfbe      	ittt	lt
 80050a8:	940a      	strlt	r4, [sp, #40]	; 0x28
 80050aa:	189b      	addlt	r3, r3, r2
 80050ac:	930e      	strlt	r3, [sp, #56]	; 0x38
 80050ae:	9b08      	ldr	r3, [sp, #32]
 80050b0:	bfb8      	it	lt
 80050b2:	2400      	movlt	r4, #0
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	bfbb      	ittet	lt
 80050b8:	9b06      	ldrlt	r3, [sp, #24]
 80050ba:	9a08      	ldrlt	r2, [sp, #32]
 80050bc:	9f06      	ldrge	r7, [sp, #24]
 80050be:	1a9f      	sublt	r7, r3, r2
 80050c0:	bfac      	ite	ge
 80050c2:	9b08      	ldrge	r3, [sp, #32]
 80050c4:	2300      	movlt	r3, #0
 80050c6:	e73f      	b.n	8004f48 <_dtoa_r+0x748>
 80050c8:	3fe00000 	.word	0x3fe00000
 80050cc:	40240000 	.word	0x40240000
 80050d0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80050d2:	9f06      	ldr	r7, [sp, #24]
 80050d4:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80050d6:	e742      	b.n	8004f5e <_dtoa_r+0x75e>
 80050d8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80050da:	e76b      	b.n	8004fb4 <_dtoa_r+0x7b4>
 80050dc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80050de:	2b01      	cmp	r3, #1
 80050e0:	dc19      	bgt.n	8005116 <_dtoa_r+0x916>
 80050e2:	9b04      	ldr	r3, [sp, #16]
 80050e4:	b9bb      	cbnz	r3, 8005116 <_dtoa_r+0x916>
 80050e6:	9b05      	ldr	r3, [sp, #20]
 80050e8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80050ec:	b99b      	cbnz	r3, 8005116 <_dtoa_r+0x916>
 80050ee:	9b05      	ldr	r3, [sp, #20]
 80050f0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80050f4:	0d1b      	lsrs	r3, r3, #20
 80050f6:	051b      	lsls	r3, r3, #20
 80050f8:	b183      	cbz	r3, 800511c <_dtoa_r+0x91c>
 80050fa:	f04f 0801 	mov.w	r8, #1
 80050fe:	9b06      	ldr	r3, [sp, #24]
 8005100:	3301      	adds	r3, #1
 8005102:	9306      	str	r3, [sp, #24]
 8005104:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005106:	3301      	adds	r3, #1
 8005108:	9309      	str	r3, [sp, #36]	; 0x24
 800510a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800510c:	2b00      	cmp	r3, #0
 800510e:	f47f af6a 	bne.w	8004fe6 <_dtoa_r+0x7e6>
 8005112:	2001      	movs	r0, #1
 8005114:	e76f      	b.n	8004ff6 <_dtoa_r+0x7f6>
 8005116:	f04f 0800 	mov.w	r8, #0
 800511a:	e7f6      	b.n	800510a <_dtoa_r+0x90a>
 800511c:	4698      	mov	r8, r3
 800511e:	e7f4      	b.n	800510a <_dtoa_r+0x90a>
 8005120:	f43f af7d 	beq.w	800501e <_dtoa_r+0x81e>
 8005124:	4618      	mov	r0, r3
 8005126:	301c      	adds	r0, #28
 8005128:	e772      	b.n	8005010 <_dtoa_r+0x810>
 800512a:	9b08      	ldr	r3, [sp, #32]
 800512c:	2b00      	cmp	r3, #0
 800512e:	dc36      	bgt.n	800519e <_dtoa_r+0x99e>
 8005130:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005132:	2b02      	cmp	r3, #2
 8005134:	dd33      	ble.n	800519e <_dtoa_r+0x99e>
 8005136:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800513a:	f1b9 0f00 	cmp.w	r9, #0
 800513e:	d10d      	bne.n	800515c <_dtoa_r+0x95c>
 8005140:	4621      	mov	r1, r4
 8005142:	464b      	mov	r3, r9
 8005144:	2205      	movs	r2, #5
 8005146:	4628      	mov	r0, r5
 8005148:	f000 fabe 	bl	80056c8 <__multadd>
 800514c:	4601      	mov	r1, r0
 800514e:	4604      	mov	r4, r0
 8005150:	4658      	mov	r0, fp
 8005152:	f000 fcd5 	bl	8005b00 <__mcmp>
 8005156:	2800      	cmp	r0, #0
 8005158:	f73f adb8 	bgt.w	8004ccc <_dtoa_r+0x4cc>
 800515c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800515e:	9f03      	ldr	r7, [sp, #12]
 8005160:	ea6f 0a03 	mvn.w	sl, r3
 8005164:	f04f 0800 	mov.w	r8, #0
 8005168:	4621      	mov	r1, r4
 800516a:	4628      	mov	r0, r5
 800516c:	f000 fa8a 	bl	8005684 <_Bfree>
 8005170:	2e00      	cmp	r6, #0
 8005172:	f43f aea7 	beq.w	8004ec4 <_dtoa_r+0x6c4>
 8005176:	f1b8 0f00 	cmp.w	r8, #0
 800517a:	d005      	beq.n	8005188 <_dtoa_r+0x988>
 800517c:	45b0      	cmp	r8, r6
 800517e:	d003      	beq.n	8005188 <_dtoa_r+0x988>
 8005180:	4641      	mov	r1, r8
 8005182:	4628      	mov	r0, r5
 8005184:	f000 fa7e 	bl	8005684 <_Bfree>
 8005188:	4631      	mov	r1, r6
 800518a:	4628      	mov	r0, r5
 800518c:	f000 fa7a 	bl	8005684 <_Bfree>
 8005190:	e698      	b.n	8004ec4 <_dtoa_r+0x6c4>
 8005192:	2400      	movs	r4, #0
 8005194:	4626      	mov	r6, r4
 8005196:	e7e1      	b.n	800515c <_dtoa_r+0x95c>
 8005198:	46c2      	mov	sl, r8
 800519a:	4626      	mov	r6, r4
 800519c:	e596      	b.n	8004ccc <_dtoa_r+0x4cc>
 800519e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80051a0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	f000 80fd 	beq.w	80053a4 <_dtoa_r+0xba4>
 80051aa:	2f00      	cmp	r7, #0
 80051ac:	dd05      	ble.n	80051ba <_dtoa_r+0x9ba>
 80051ae:	4631      	mov	r1, r6
 80051b0:	463a      	mov	r2, r7
 80051b2:	4628      	mov	r0, r5
 80051b4:	f000 fc34 	bl	8005a20 <__lshift>
 80051b8:	4606      	mov	r6, r0
 80051ba:	f1b8 0f00 	cmp.w	r8, #0
 80051be:	d05c      	beq.n	800527a <_dtoa_r+0xa7a>
 80051c0:	4628      	mov	r0, r5
 80051c2:	6871      	ldr	r1, [r6, #4]
 80051c4:	f000 fa1e 	bl	8005604 <_Balloc>
 80051c8:	4607      	mov	r7, r0
 80051ca:	b928      	cbnz	r0, 80051d8 <_dtoa_r+0x9d8>
 80051cc:	4602      	mov	r2, r0
 80051ce:	f240 21ea 	movw	r1, #746	; 0x2ea
 80051d2:	4b7f      	ldr	r3, [pc, #508]	; (80053d0 <_dtoa_r+0xbd0>)
 80051d4:	f7ff bb28 	b.w	8004828 <_dtoa_r+0x28>
 80051d8:	6932      	ldr	r2, [r6, #16]
 80051da:	f106 010c 	add.w	r1, r6, #12
 80051de:	3202      	adds	r2, #2
 80051e0:	0092      	lsls	r2, r2, #2
 80051e2:	300c      	adds	r0, #12
 80051e4:	f7fe fdbc 	bl	8003d60 <memcpy>
 80051e8:	2201      	movs	r2, #1
 80051ea:	4639      	mov	r1, r7
 80051ec:	4628      	mov	r0, r5
 80051ee:	f000 fc17 	bl	8005a20 <__lshift>
 80051f2:	46b0      	mov	r8, r6
 80051f4:	4606      	mov	r6, r0
 80051f6:	9b03      	ldr	r3, [sp, #12]
 80051f8:	3301      	adds	r3, #1
 80051fa:	9308      	str	r3, [sp, #32]
 80051fc:	9b03      	ldr	r3, [sp, #12]
 80051fe:	444b      	add	r3, r9
 8005200:	930a      	str	r3, [sp, #40]	; 0x28
 8005202:	9b04      	ldr	r3, [sp, #16]
 8005204:	f003 0301 	and.w	r3, r3, #1
 8005208:	9309      	str	r3, [sp, #36]	; 0x24
 800520a:	9b08      	ldr	r3, [sp, #32]
 800520c:	4621      	mov	r1, r4
 800520e:	3b01      	subs	r3, #1
 8005210:	4658      	mov	r0, fp
 8005212:	9304      	str	r3, [sp, #16]
 8005214:	f7ff fa65 	bl	80046e2 <quorem>
 8005218:	4603      	mov	r3, r0
 800521a:	4641      	mov	r1, r8
 800521c:	3330      	adds	r3, #48	; 0x30
 800521e:	9006      	str	r0, [sp, #24]
 8005220:	4658      	mov	r0, fp
 8005222:	930b      	str	r3, [sp, #44]	; 0x2c
 8005224:	f000 fc6c 	bl	8005b00 <__mcmp>
 8005228:	4632      	mov	r2, r6
 800522a:	4681      	mov	r9, r0
 800522c:	4621      	mov	r1, r4
 800522e:	4628      	mov	r0, r5
 8005230:	f000 fc82 	bl	8005b38 <__mdiff>
 8005234:	68c2      	ldr	r2, [r0, #12]
 8005236:	4607      	mov	r7, r0
 8005238:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800523a:	bb02      	cbnz	r2, 800527e <_dtoa_r+0xa7e>
 800523c:	4601      	mov	r1, r0
 800523e:	4658      	mov	r0, fp
 8005240:	f000 fc5e 	bl	8005b00 <__mcmp>
 8005244:	4602      	mov	r2, r0
 8005246:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005248:	4639      	mov	r1, r7
 800524a:	4628      	mov	r0, r5
 800524c:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8005250:	f000 fa18 	bl	8005684 <_Bfree>
 8005254:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005256:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005258:	9f08      	ldr	r7, [sp, #32]
 800525a:	ea43 0102 	orr.w	r1, r3, r2
 800525e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005260:	430b      	orrs	r3, r1
 8005262:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005264:	d10d      	bne.n	8005282 <_dtoa_r+0xa82>
 8005266:	2b39      	cmp	r3, #57	; 0x39
 8005268:	d029      	beq.n	80052be <_dtoa_r+0xabe>
 800526a:	f1b9 0f00 	cmp.w	r9, #0
 800526e:	dd01      	ble.n	8005274 <_dtoa_r+0xa74>
 8005270:	9b06      	ldr	r3, [sp, #24]
 8005272:	3331      	adds	r3, #49	; 0x31
 8005274:	9a04      	ldr	r2, [sp, #16]
 8005276:	7013      	strb	r3, [r2, #0]
 8005278:	e776      	b.n	8005168 <_dtoa_r+0x968>
 800527a:	4630      	mov	r0, r6
 800527c:	e7b9      	b.n	80051f2 <_dtoa_r+0x9f2>
 800527e:	2201      	movs	r2, #1
 8005280:	e7e2      	b.n	8005248 <_dtoa_r+0xa48>
 8005282:	f1b9 0f00 	cmp.w	r9, #0
 8005286:	db06      	blt.n	8005296 <_dtoa_r+0xa96>
 8005288:	9922      	ldr	r1, [sp, #136]	; 0x88
 800528a:	ea41 0909 	orr.w	r9, r1, r9
 800528e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005290:	ea59 0101 	orrs.w	r1, r9, r1
 8005294:	d120      	bne.n	80052d8 <_dtoa_r+0xad8>
 8005296:	2a00      	cmp	r2, #0
 8005298:	ddec      	ble.n	8005274 <_dtoa_r+0xa74>
 800529a:	4659      	mov	r1, fp
 800529c:	2201      	movs	r2, #1
 800529e:	4628      	mov	r0, r5
 80052a0:	9308      	str	r3, [sp, #32]
 80052a2:	f000 fbbd 	bl	8005a20 <__lshift>
 80052a6:	4621      	mov	r1, r4
 80052a8:	4683      	mov	fp, r0
 80052aa:	f000 fc29 	bl	8005b00 <__mcmp>
 80052ae:	2800      	cmp	r0, #0
 80052b0:	9b08      	ldr	r3, [sp, #32]
 80052b2:	dc02      	bgt.n	80052ba <_dtoa_r+0xaba>
 80052b4:	d1de      	bne.n	8005274 <_dtoa_r+0xa74>
 80052b6:	07da      	lsls	r2, r3, #31
 80052b8:	d5dc      	bpl.n	8005274 <_dtoa_r+0xa74>
 80052ba:	2b39      	cmp	r3, #57	; 0x39
 80052bc:	d1d8      	bne.n	8005270 <_dtoa_r+0xa70>
 80052be:	2339      	movs	r3, #57	; 0x39
 80052c0:	9a04      	ldr	r2, [sp, #16]
 80052c2:	7013      	strb	r3, [r2, #0]
 80052c4:	463b      	mov	r3, r7
 80052c6:	461f      	mov	r7, r3
 80052c8:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 80052cc:	3b01      	subs	r3, #1
 80052ce:	2a39      	cmp	r2, #57	; 0x39
 80052d0:	d050      	beq.n	8005374 <_dtoa_r+0xb74>
 80052d2:	3201      	adds	r2, #1
 80052d4:	701a      	strb	r2, [r3, #0]
 80052d6:	e747      	b.n	8005168 <_dtoa_r+0x968>
 80052d8:	2a00      	cmp	r2, #0
 80052da:	dd03      	ble.n	80052e4 <_dtoa_r+0xae4>
 80052dc:	2b39      	cmp	r3, #57	; 0x39
 80052de:	d0ee      	beq.n	80052be <_dtoa_r+0xabe>
 80052e0:	3301      	adds	r3, #1
 80052e2:	e7c7      	b.n	8005274 <_dtoa_r+0xa74>
 80052e4:	9a08      	ldr	r2, [sp, #32]
 80052e6:	990a      	ldr	r1, [sp, #40]	; 0x28
 80052e8:	f802 3c01 	strb.w	r3, [r2, #-1]
 80052ec:	428a      	cmp	r2, r1
 80052ee:	d02a      	beq.n	8005346 <_dtoa_r+0xb46>
 80052f0:	4659      	mov	r1, fp
 80052f2:	2300      	movs	r3, #0
 80052f4:	220a      	movs	r2, #10
 80052f6:	4628      	mov	r0, r5
 80052f8:	f000 f9e6 	bl	80056c8 <__multadd>
 80052fc:	45b0      	cmp	r8, r6
 80052fe:	4683      	mov	fp, r0
 8005300:	f04f 0300 	mov.w	r3, #0
 8005304:	f04f 020a 	mov.w	r2, #10
 8005308:	4641      	mov	r1, r8
 800530a:	4628      	mov	r0, r5
 800530c:	d107      	bne.n	800531e <_dtoa_r+0xb1e>
 800530e:	f000 f9db 	bl	80056c8 <__multadd>
 8005312:	4680      	mov	r8, r0
 8005314:	4606      	mov	r6, r0
 8005316:	9b08      	ldr	r3, [sp, #32]
 8005318:	3301      	adds	r3, #1
 800531a:	9308      	str	r3, [sp, #32]
 800531c:	e775      	b.n	800520a <_dtoa_r+0xa0a>
 800531e:	f000 f9d3 	bl	80056c8 <__multadd>
 8005322:	4631      	mov	r1, r6
 8005324:	4680      	mov	r8, r0
 8005326:	2300      	movs	r3, #0
 8005328:	220a      	movs	r2, #10
 800532a:	4628      	mov	r0, r5
 800532c:	f000 f9cc 	bl	80056c8 <__multadd>
 8005330:	4606      	mov	r6, r0
 8005332:	e7f0      	b.n	8005316 <_dtoa_r+0xb16>
 8005334:	f1b9 0f00 	cmp.w	r9, #0
 8005338:	bfcc      	ite	gt
 800533a:	464f      	movgt	r7, r9
 800533c:	2701      	movle	r7, #1
 800533e:	f04f 0800 	mov.w	r8, #0
 8005342:	9a03      	ldr	r2, [sp, #12]
 8005344:	4417      	add	r7, r2
 8005346:	4659      	mov	r1, fp
 8005348:	2201      	movs	r2, #1
 800534a:	4628      	mov	r0, r5
 800534c:	9308      	str	r3, [sp, #32]
 800534e:	f000 fb67 	bl	8005a20 <__lshift>
 8005352:	4621      	mov	r1, r4
 8005354:	4683      	mov	fp, r0
 8005356:	f000 fbd3 	bl	8005b00 <__mcmp>
 800535a:	2800      	cmp	r0, #0
 800535c:	dcb2      	bgt.n	80052c4 <_dtoa_r+0xac4>
 800535e:	d102      	bne.n	8005366 <_dtoa_r+0xb66>
 8005360:	9b08      	ldr	r3, [sp, #32]
 8005362:	07db      	lsls	r3, r3, #31
 8005364:	d4ae      	bmi.n	80052c4 <_dtoa_r+0xac4>
 8005366:	463b      	mov	r3, r7
 8005368:	461f      	mov	r7, r3
 800536a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800536e:	2a30      	cmp	r2, #48	; 0x30
 8005370:	d0fa      	beq.n	8005368 <_dtoa_r+0xb68>
 8005372:	e6f9      	b.n	8005168 <_dtoa_r+0x968>
 8005374:	9a03      	ldr	r2, [sp, #12]
 8005376:	429a      	cmp	r2, r3
 8005378:	d1a5      	bne.n	80052c6 <_dtoa_r+0xac6>
 800537a:	2331      	movs	r3, #49	; 0x31
 800537c:	f10a 0a01 	add.w	sl, sl, #1
 8005380:	e779      	b.n	8005276 <_dtoa_r+0xa76>
 8005382:	4b14      	ldr	r3, [pc, #80]	; (80053d4 <_dtoa_r+0xbd4>)
 8005384:	f7ff baa8 	b.w	80048d8 <_dtoa_r+0xd8>
 8005388:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800538a:	2b00      	cmp	r3, #0
 800538c:	f47f aa81 	bne.w	8004892 <_dtoa_r+0x92>
 8005390:	4b11      	ldr	r3, [pc, #68]	; (80053d8 <_dtoa_r+0xbd8>)
 8005392:	f7ff baa1 	b.w	80048d8 <_dtoa_r+0xd8>
 8005396:	f1b9 0f00 	cmp.w	r9, #0
 800539a:	dc03      	bgt.n	80053a4 <_dtoa_r+0xba4>
 800539c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800539e:	2b02      	cmp	r3, #2
 80053a0:	f73f aecb 	bgt.w	800513a <_dtoa_r+0x93a>
 80053a4:	9f03      	ldr	r7, [sp, #12]
 80053a6:	4621      	mov	r1, r4
 80053a8:	4658      	mov	r0, fp
 80053aa:	f7ff f99a 	bl	80046e2 <quorem>
 80053ae:	9a03      	ldr	r2, [sp, #12]
 80053b0:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80053b4:	f807 3b01 	strb.w	r3, [r7], #1
 80053b8:	1aba      	subs	r2, r7, r2
 80053ba:	4591      	cmp	r9, r2
 80053bc:	ddba      	ble.n	8005334 <_dtoa_r+0xb34>
 80053be:	4659      	mov	r1, fp
 80053c0:	2300      	movs	r3, #0
 80053c2:	220a      	movs	r2, #10
 80053c4:	4628      	mov	r0, r5
 80053c6:	f000 f97f 	bl	80056c8 <__multadd>
 80053ca:	4683      	mov	fp, r0
 80053cc:	e7eb      	b.n	80053a6 <_dtoa_r+0xba6>
 80053ce:	bf00      	nop
 80053d0:	080071eb 	.word	0x080071eb
 80053d4:	08007148 	.word	0x08007148
 80053d8:	0800716c 	.word	0x0800716c

080053dc <std>:
 80053dc:	2300      	movs	r3, #0
 80053de:	b510      	push	{r4, lr}
 80053e0:	4604      	mov	r4, r0
 80053e2:	e9c0 3300 	strd	r3, r3, [r0]
 80053e6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80053ea:	6083      	str	r3, [r0, #8]
 80053ec:	8181      	strh	r1, [r0, #12]
 80053ee:	6643      	str	r3, [r0, #100]	; 0x64
 80053f0:	81c2      	strh	r2, [r0, #14]
 80053f2:	6183      	str	r3, [r0, #24]
 80053f4:	4619      	mov	r1, r3
 80053f6:	2208      	movs	r2, #8
 80053f8:	305c      	adds	r0, #92	; 0x5c
 80053fa:	f7fe fcbf 	bl	8003d7c <memset>
 80053fe:	4b05      	ldr	r3, [pc, #20]	; (8005414 <std+0x38>)
 8005400:	6224      	str	r4, [r4, #32]
 8005402:	6263      	str	r3, [r4, #36]	; 0x24
 8005404:	4b04      	ldr	r3, [pc, #16]	; (8005418 <std+0x3c>)
 8005406:	62a3      	str	r3, [r4, #40]	; 0x28
 8005408:	4b04      	ldr	r3, [pc, #16]	; (800541c <std+0x40>)
 800540a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800540c:	4b04      	ldr	r3, [pc, #16]	; (8005420 <std+0x44>)
 800540e:	6323      	str	r3, [r4, #48]	; 0x30
 8005410:	bd10      	pop	{r4, pc}
 8005412:	bf00      	nop
 8005414:	08006471 	.word	0x08006471
 8005418:	08006493 	.word	0x08006493
 800541c:	080064cb 	.word	0x080064cb
 8005420:	080064ef 	.word	0x080064ef

08005424 <_cleanup_r>:
 8005424:	4901      	ldr	r1, [pc, #4]	; (800542c <_cleanup_r+0x8>)
 8005426:	f000 b8af 	b.w	8005588 <_fwalk_reent>
 800542a:	bf00      	nop
 800542c:	080067fd 	.word	0x080067fd

08005430 <__sfmoreglue>:
 8005430:	2268      	movs	r2, #104	; 0x68
 8005432:	b570      	push	{r4, r5, r6, lr}
 8005434:	1e4d      	subs	r5, r1, #1
 8005436:	4355      	muls	r5, r2
 8005438:	460e      	mov	r6, r1
 800543a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800543e:	f000 fcdf 	bl	8005e00 <_malloc_r>
 8005442:	4604      	mov	r4, r0
 8005444:	b140      	cbz	r0, 8005458 <__sfmoreglue+0x28>
 8005446:	2100      	movs	r1, #0
 8005448:	e9c0 1600 	strd	r1, r6, [r0]
 800544c:	300c      	adds	r0, #12
 800544e:	60a0      	str	r0, [r4, #8]
 8005450:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005454:	f7fe fc92 	bl	8003d7c <memset>
 8005458:	4620      	mov	r0, r4
 800545a:	bd70      	pop	{r4, r5, r6, pc}

0800545c <__sfp_lock_acquire>:
 800545c:	4801      	ldr	r0, [pc, #4]	; (8005464 <__sfp_lock_acquire+0x8>)
 800545e:	f000 b8b8 	b.w	80055d2 <__retarget_lock_acquire_recursive>
 8005462:	bf00      	nop
 8005464:	20000ed5 	.word	0x20000ed5

08005468 <__sfp_lock_release>:
 8005468:	4801      	ldr	r0, [pc, #4]	; (8005470 <__sfp_lock_release+0x8>)
 800546a:	f000 b8b3 	b.w	80055d4 <__retarget_lock_release_recursive>
 800546e:	bf00      	nop
 8005470:	20000ed5 	.word	0x20000ed5

08005474 <__sinit_lock_acquire>:
 8005474:	4801      	ldr	r0, [pc, #4]	; (800547c <__sinit_lock_acquire+0x8>)
 8005476:	f000 b8ac 	b.w	80055d2 <__retarget_lock_acquire_recursive>
 800547a:	bf00      	nop
 800547c:	20000ed6 	.word	0x20000ed6

08005480 <__sinit_lock_release>:
 8005480:	4801      	ldr	r0, [pc, #4]	; (8005488 <__sinit_lock_release+0x8>)
 8005482:	f000 b8a7 	b.w	80055d4 <__retarget_lock_release_recursive>
 8005486:	bf00      	nop
 8005488:	20000ed6 	.word	0x20000ed6

0800548c <__sinit>:
 800548c:	b510      	push	{r4, lr}
 800548e:	4604      	mov	r4, r0
 8005490:	f7ff fff0 	bl	8005474 <__sinit_lock_acquire>
 8005494:	69a3      	ldr	r3, [r4, #24]
 8005496:	b11b      	cbz	r3, 80054a0 <__sinit+0x14>
 8005498:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800549c:	f7ff bff0 	b.w	8005480 <__sinit_lock_release>
 80054a0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80054a4:	6523      	str	r3, [r4, #80]	; 0x50
 80054a6:	4b13      	ldr	r3, [pc, #76]	; (80054f4 <__sinit+0x68>)
 80054a8:	4a13      	ldr	r2, [pc, #76]	; (80054f8 <__sinit+0x6c>)
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	62a2      	str	r2, [r4, #40]	; 0x28
 80054ae:	42a3      	cmp	r3, r4
 80054b0:	bf08      	it	eq
 80054b2:	2301      	moveq	r3, #1
 80054b4:	4620      	mov	r0, r4
 80054b6:	bf08      	it	eq
 80054b8:	61a3      	streq	r3, [r4, #24]
 80054ba:	f000 f81f 	bl	80054fc <__sfp>
 80054be:	6060      	str	r0, [r4, #4]
 80054c0:	4620      	mov	r0, r4
 80054c2:	f000 f81b 	bl	80054fc <__sfp>
 80054c6:	60a0      	str	r0, [r4, #8]
 80054c8:	4620      	mov	r0, r4
 80054ca:	f000 f817 	bl	80054fc <__sfp>
 80054ce:	2200      	movs	r2, #0
 80054d0:	2104      	movs	r1, #4
 80054d2:	60e0      	str	r0, [r4, #12]
 80054d4:	6860      	ldr	r0, [r4, #4]
 80054d6:	f7ff ff81 	bl	80053dc <std>
 80054da:	2201      	movs	r2, #1
 80054dc:	2109      	movs	r1, #9
 80054de:	68a0      	ldr	r0, [r4, #8]
 80054e0:	f7ff ff7c 	bl	80053dc <std>
 80054e4:	2202      	movs	r2, #2
 80054e6:	2112      	movs	r1, #18
 80054e8:	68e0      	ldr	r0, [r4, #12]
 80054ea:	f7ff ff77 	bl	80053dc <std>
 80054ee:	2301      	movs	r3, #1
 80054f0:	61a3      	str	r3, [r4, #24]
 80054f2:	e7d1      	b.n	8005498 <__sinit+0xc>
 80054f4:	08007134 	.word	0x08007134
 80054f8:	08005425 	.word	0x08005425

080054fc <__sfp>:
 80054fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054fe:	4607      	mov	r7, r0
 8005500:	f7ff ffac 	bl	800545c <__sfp_lock_acquire>
 8005504:	4b1e      	ldr	r3, [pc, #120]	; (8005580 <__sfp+0x84>)
 8005506:	681e      	ldr	r6, [r3, #0]
 8005508:	69b3      	ldr	r3, [r6, #24]
 800550a:	b913      	cbnz	r3, 8005512 <__sfp+0x16>
 800550c:	4630      	mov	r0, r6
 800550e:	f7ff ffbd 	bl	800548c <__sinit>
 8005512:	3648      	adds	r6, #72	; 0x48
 8005514:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005518:	3b01      	subs	r3, #1
 800551a:	d503      	bpl.n	8005524 <__sfp+0x28>
 800551c:	6833      	ldr	r3, [r6, #0]
 800551e:	b30b      	cbz	r3, 8005564 <__sfp+0x68>
 8005520:	6836      	ldr	r6, [r6, #0]
 8005522:	e7f7      	b.n	8005514 <__sfp+0x18>
 8005524:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005528:	b9d5      	cbnz	r5, 8005560 <__sfp+0x64>
 800552a:	4b16      	ldr	r3, [pc, #88]	; (8005584 <__sfp+0x88>)
 800552c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005530:	60e3      	str	r3, [r4, #12]
 8005532:	6665      	str	r5, [r4, #100]	; 0x64
 8005534:	f000 f84c 	bl	80055d0 <__retarget_lock_init_recursive>
 8005538:	f7ff ff96 	bl	8005468 <__sfp_lock_release>
 800553c:	2208      	movs	r2, #8
 800553e:	4629      	mov	r1, r5
 8005540:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005544:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005548:	6025      	str	r5, [r4, #0]
 800554a:	61a5      	str	r5, [r4, #24]
 800554c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005550:	f7fe fc14 	bl	8003d7c <memset>
 8005554:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005558:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800555c:	4620      	mov	r0, r4
 800555e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005560:	3468      	adds	r4, #104	; 0x68
 8005562:	e7d9      	b.n	8005518 <__sfp+0x1c>
 8005564:	2104      	movs	r1, #4
 8005566:	4638      	mov	r0, r7
 8005568:	f7ff ff62 	bl	8005430 <__sfmoreglue>
 800556c:	4604      	mov	r4, r0
 800556e:	6030      	str	r0, [r6, #0]
 8005570:	2800      	cmp	r0, #0
 8005572:	d1d5      	bne.n	8005520 <__sfp+0x24>
 8005574:	f7ff ff78 	bl	8005468 <__sfp_lock_release>
 8005578:	230c      	movs	r3, #12
 800557a:	603b      	str	r3, [r7, #0]
 800557c:	e7ee      	b.n	800555c <__sfp+0x60>
 800557e:	bf00      	nop
 8005580:	08007134 	.word	0x08007134
 8005584:	ffff0001 	.word	0xffff0001

08005588 <_fwalk_reent>:
 8005588:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800558c:	4606      	mov	r6, r0
 800558e:	4688      	mov	r8, r1
 8005590:	2700      	movs	r7, #0
 8005592:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005596:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800559a:	f1b9 0901 	subs.w	r9, r9, #1
 800559e:	d505      	bpl.n	80055ac <_fwalk_reent+0x24>
 80055a0:	6824      	ldr	r4, [r4, #0]
 80055a2:	2c00      	cmp	r4, #0
 80055a4:	d1f7      	bne.n	8005596 <_fwalk_reent+0xe>
 80055a6:	4638      	mov	r0, r7
 80055a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80055ac:	89ab      	ldrh	r3, [r5, #12]
 80055ae:	2b01      	cmp	r3, #1
 80055b0:	d907      	bls.n	80055c2 <_fwalk_reent+0x3a>
 80055b2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80055b6:	3301      	adds	r3, #1
 80055b8:	d003      	beq.n	80055c2 <_fwalk_reent+0x3a>
 80055ba:	4629      	mov	r1, r5
 80055bc:	4630      	mov	r0, r6
 80055be:	47c0      	blx	r8
 80055c0:	4307      	orrs	r7, r0
 80055c2:	3568      	adds	r5, #104	; 0x68
 80055c4:	e7e9      	b.n	800559a <_fwalk_reent+0x12>
	...

080055c8 <_localeconv_r>:
 80055c8:	4800      	ldr	r0, [pc, #0]	; (80055cc <_localeconv_r+0x4>)
 80055ca:	4770      	bx	lr
 80055cc:	20000174 	.word	0x20000174

080055d0 <__retarget_lock_init_recursive>:
 80055d0:	4770      	bx	lr

080055d2 <__retarget_lock_acquire_recursive>:
 80055d2:	4770      	bx	lr

080055d4 <__retarget_lock_release_recursive>:
 80055d4:	4770      	bx	lr
	...

080055d8 <malloc>:
 80055d8:	4b02      	ldr	r3, [pc, #8]	; (80055e4 <malloc+0xc>)
 80055da:	4601      	mov	r1, r0
 80055dc:	6818      	ldr	r0, [r3, #0]
 80055de:	f000 bc0f 	b.w	8005e00 <_malloc_r>
 80055e2:	bf00      	nop
 80055e4:	20000020 	.word	0x20000020

080055e8 <memchr>:
 80055e8:	4603      	mov	r3, r0
 80055ea:	b510      	push	{r4, lr}
 80055ec:	b2c9      	uxtb	r1, r1
 80055ee:	4402      	add	r2, r0
 80055f0:	4293      	cmp	r3, r2
 80055f2:	4618      	mov	r0, r3
 80055f4:	d101      	bne.n	80055fa <memchr+0x12>
 80055f6:	2000      	movs	r0, #0
 80055f8:	e003      	b.n	8005602 <memchr+0x1a>
 80055fa:	7804      	ldrb	r4, [r0, #0]
 80055fc:	3301      	adds	r3, #1
 80055fe:	428c      	cmp	r4, r1
 8005600:	d1f6      	bne.n	80055f0 <memchr+0x8>
 8005602:	bd10      	pop	{r4, pc}

08005604 <_Balloc>:
 8005604:	b570      	push	{r4, r5, r6, lr}
 8005606:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005608:	4604      	mov	r4, r0
 800560a:	460d      	mov	r5, r1
 800560c:	b976      	cbnz	r6, 800562c <_Balloc+0x28>
 800560e:	2010      	movs	r0, #16
 8005610:	f7ff ffe2 	bl	80055d8 <malloc>
 8005614:	4602      	mov	r2, r0
 8005616:	6260      	str	r0, [r4, #36]	; 0x24
 8005618:	b920      	cbnz	r0, 8005624 <_Balloc+0x20>
 800561a:	2166      	movs	r1, #102	; 0x66
 800561c:	4b17      	ldr	r3, [pc, #92]	; (800567c <_Balloc+0x78>)
 800561e:	4818      	ldr	r0, [pc, #96]	; (8005680 <_Balloc+0x7c>)
 8005620:	f001 f83c 	bl	800669c <__assert_func>
 8005624:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005628:	6006      	str	r6, [r0, #0]
 800562a:	60c6      	str	r6, [r0, #12]
 800562c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800562e:	68f3      	ldr	r3, [r6, #12]
 8005630:	b183      	cbz	r3, 8005654 <_Balloc+0x50>
 8005632:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005634:	68db      	ldr	r3, [r3, #12]
 8005636:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800563a:	b9b8      	cbnz	r0, 800566c <_Balloc+0x68>
 800563c:	2101      	movs	r1, #1
 800563e:	fa01 f605 	lsl.w	r6, r1, r5
 8005642:	1d72      	adds	r2, r6, #5
 8005644:	4620      	mov	r0, r4
 8005646:	0092      	lsls	r2, r2, #2
 8005648:	f000 fb5e 	bl	8005d08 <_calloc_r>
 800564c:	b160      	cbz	r0, 8005668 <_Balloc+0x64>
 800564e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005652:	e00e      	b.n	8005672 <_Balloc+0x6e>
 8005654:	2221      	movs	r2, #33	; 0x21
 8005656:	2104      	movs	r1, #4
 8005658:	4620      	mov	r0, r4
 800565a:	f000 fb55 	bl	8005d08 <_calloc_r>
 800565e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005660:	60f0      	str	r0, [r6, #12]
 8005662:	68db      	ldr	r3, [r3, #12]
 8005664:	2b00      	cmp	r3, #0
 8005666:	d1e4      	bne.n	8005632 <_Balloc+0x2e>
 8005668:	2000      	movs	r0, #0
 800566a:	bd70      	pop	{r4, r5, r6, pc}
 800566c:	6802      	ldr	r2, [r0, #0]
 800566e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005672:	2300      	movs	r3, #0
 8005674:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005678:	e7f7      	b.n	800566a <_Balloc+0x66>
 800567a:	bf00      	nop
 800567c:	08007179 	.word	0x08007179
 8005680:	0800725c 	.word	0x0800725c

08005684 <_Bfree>:
 8005684:	b570      	push	{r4, r5, r6, lr}
 8005686:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005688:	4605      	mov	r5, r0
 800568a:	460c      	mov	r4, r1
 800568c:	b976      	cbnz	r6, 80056ac <_Bfree+0x28>
 800568e:	2010      	movs	r0, #16
 8005690:	f7ff ffa2 	bl	80055d8 <malloc>
 8005694:	4602      	mov	r2, r0
 8005696:	6268      	str	r0, [r5, #36]	; 0x24
 8005698:	b920      	cbnz	r0, 80056a4 <_Bfree+0x20>
 800569a:	218a      	movs	r1, #138	; 0x8a
 800569c:	4b08      	ldr	r3, [pc, #32]	; (80056c0 <_Bfree+0x3c>)
 800569e:	4809      	ldr	r0, [pc, #36]	; (80056c4 <_Bfree+0x40>)
 80056a0:	f000 fffc 	bl	800669c <__assert_func>
 80056a4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80056a8:	6006      	str	r6, [r0, #0]
 80056aa:	60c6      	str	r6, [r0, #12]
 80056ac:	b13c      	cbz	r4, 80056be <_Bfree+0x3a>
 80056ae:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80056b0:	6862      	ldr	r2, [r4, #4]
 80056b2:	68db      	ldr	r3, [r3, #12]
 80056b4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80056b8:	6021      	str	r1, [r4, #0]
 80056ba:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80056be:	bd70      	pop	{r4, r5, r6, pc}
 80056c0:	08007179 	.word	0x08007179
 80056c4:	0800725c 	.word	0x0800725c

080056c8 <__multadd>:
 80056c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80056cc:	4607      	mov	r7, r0
 80056ce:	460c      	mov	r4, r1
 80056d0:	461e      	mov	r6, r3
 80056d2:	2000      	movs	r0, #0
 80056d4:	690d      	ldr	r5, [r1, #16]
 80056d6:	f101 0c14 	add.w	ip, r1, #20
 80056da:	f8dc 3000 	ldr.w	r3, [ip]
 80056de:	3001      	adds	r0, #1
 80056e0:	b299      	uxth	r1, r3
 80056e2:	fb02 6101 	mla	r1, r2, r1, r6
 80056e6:	0c1e      	lsrs	r6, r3, #16
 80056e8:	0c0b      	lsrs	r3, r1, #16
 80056ea:	fb02 3306 	mla	r3, r2, r6, r3
 80056ee:	b289      	uxth	r1, r1
 80056f0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80056f4:	4285      	cmp	r5, r0
 80056f6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80056fa:	f84c 1b04 	str.w	r1, [ip], #4
 80056fe:	dcec      	bgt.n	80056da <__multadd+0x12>
 8005700:	b30e      	cbz	r6, 8005746 <__multadd+0x7e>
 8005702:	68a3      	ldr	r3, [r4, #8]
 8005704:	42ab      	cmp	r3, r5
 8005706:	dc19      	bgt.n	800573c <__multadd+0x74>
 8005708:	6861      	ldr	r1, [r4, #4]
 800570a:	4638      	mov	r0, r7
 800570c:	3101      	adds	r1, #1
 800570e:	f7ff ff79 	bl	8005604 <_Balloc>
 8005712:	4680      	mov	r8, r0
 8005714:	b928      	cbnz	r0, 8005722 <__multadd+0x5a>
 8005716:	4602      	mov	r2, r0
 8005718:	21b5      	movs	r1, #181	; 0xb5
 800571a:	4b0c      	ldr	r3, [pc, #48]	; (800574c <__multadd+0x84>)
 800571c:	480c      	ldr	r0, [pc, #48]	; (8005750 <__multadd+0x88>)
 800571e:	f000 ffbd 	bl	800669c <__assert_func>
 8005722:	6922      	ldr	r2, [r4, #16]
 8005724:	f104 010c 	add.w	r1, r4, #12
 8005728:	3202      	adds	r2, #2
 800572a:	0092      	lsls	r2, r2, #2
 800572c:	300c      	adds	r0, #12
 800572e:	f7fe fb17 	bl	8003d60 <memcpy>
 8005732:	4621      	mov	r1, r4
 8005734:	4638      	mov	r0, r7
 8005736:	f7ff ffa5 	bl	8005684 <_Bfree>
 800573a:	4644      	mov	r4, r8
 800573c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005740:	3501      	adds	r5, #1
 8005742:	615e      	str	r6, [r3, #20]
 8005744:	6125      	str	r5, [r4, #16]
 8005746:	4620      	mov	r0, r4
 8005748:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800574c:	080071eb 	.word	0x080071eb
 8005750:	0800725c 	.word	0x0800725c

08005754 <__hi0bits>:
 8005754:	0c02      	lsrs	r2, r0, #16
 8005756:	0412      	lsls	r2, r2, #16
 8005758:	4603      	mov	r3, r0
 800575a:	b9ca      	cbnz	r2, 8005790 <__hi0bits+0x3c>
 800575c:	0403      	lsls	r3, r0, #16
 800575e:	2010      	movs	r0, #16
 8005760:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8005764:	bf04      	itt	eq
 8005766:	021b      	lsleq	r3, r3, #8
 8005768:	3008      	addeq	r0, #8
 800576a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800576e:	bf04      	itt	eq
 8005770:	011b      	lsleq	r3, r3, #4
 8005772:	3004      	addeq	r0, #4
 8005774:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8005778:	bf04      	itt	eq
 800577a:	009b      	lsleq	r3, r3, #2
 800577c:	3002      	addeq	r0, #2
 800577e:	2b00      	cmp	r3, #0
 8005780:	db05      	blt.n	800578e <__hi0bits+0x3a>
 8005782:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8005786:	f100 0001 	add.w	r0, r0, #1
 800578a:	bf08      	it	eq
 800578c:	2020      	moveq	r0, #32
 800578e:	4770      	bx	lr
 8005790:	2000      	movs	r0, #0
 8005792:	e7e5      	b.n	8005760 <__hi0bits+0xc>

08005794 <__lo0bits>:
 8005794:	6803      	ldr	r3, [r0, #0]
 8005796:	4602      	mov	r2, r0
 8005798:	f013 0007 	ands.w	r0, r3, #7
 800579c:	d00b      	beq.n	80057b6 <__lo0bits+0x22>
 800579e:	07d9      	lsls	r1, r3, #31
 80057a0:	d421      	bmi.n	80057e6 <__lo0bits+0x52>
 80057a2:	0798      	lsls	r0, r3, #30
 80057a4:	bf49      	itett	mi
 80057a6:	085b      	lsrmi	r3, r3, #1
 80057a8:	089b      	lsrpl	r3, r3, #2
 80057aa:	2001      	movmi	r0, #1
 80057ac:	6013      	strmi	r3, [r2, #0]
 80057ae:	bf5c      	itt	pl
 80057b0:	2002      	movpl	r0, #2
 80057b2:	6013      	strpl	r3, [r2, #0]
 80057b4:	4770      	bx	lr
 80057b6:	b299      	uxth	r1, r3
 80057b8:	b909      	cbnz	r1, 80057be <__lo0bits+0x2a>
 80057ba:	2010      	movs	r0, #16
 80057bc:	0c1b      	lsrs	r3, r3, #16
 80057be:	b2d9      	uxtb	r1, r3
 80057c0:	b909      	cbnz	r1, 80057c6 <__lo0bits+0x32>
 80057c2:	3008      	adds	r0, #8
 80057c4:	0a1b      	lsrs	r3, r3, #8
 80057c6:	0719      	lsls	r1, r3, #28
 80057c8:	bf04      	itt	eq
 80057ca:	091b      	lsreq	r3, r3, #4
 80057cc:	3004      	addeq	r0, #4
 80057ce:	0799      	lsls	r1, r3, #30
 80057d0:	bf04      	itt	eq
 80057d2:	089b      	lsreq	r3, r3, #2
 80057d4:	3002      	addeq	r0, #2
 80057d6:	07d9      	lsls	r1, r3, #31
 80057d8:	d403      	bmi.n	80057e2 <__lo0bits+0x4e>
 80057da:	085b      	lsrs	r3, r3, #1
 80057dc:	f100 0001 	add.w	r0, r0, #1
 80057e0:	d003      	beq.n	80057ea <__lo0bits+0x56>
 80057e2:	6013      	str	r3, [r2, #0]
 80057e4:	4770      	bx	lr
 80057e6:	2000      	movs	r0, #0
 80057e8:	4770      	bx	lr
 80057ea:	2020      	movs	r0, #32
 80057ec:	4770      	bx	lr
	...

080057f0 <__i2b>:
 80057f0:	b510      	push	{r4, lr}
 80057f2:	460c      	mov	r4, r1
 80057f4:	2101      	movs	r1, #1
 80057f6:	f7ff ff05 	bl	8005604 <_Balloc>
 80057fa:	4602      	mov	r2, r0
 80057fc:	b928      	cbnz	r0, 800580a <__i2b+0x1a>
 80057fe:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8005802:	4b04      	ldr	r3, [pc, #16]	; (8005814 <__i2b+0x24>)
 8005804:	4804      	ldr	r0, [pc, #16]	; (8005818 <__i2b+0x28>)
 8005806:	f000 ff49 	bl	800669c <__assert_func>
 800580a:	2301      	movs	r3, #1
 800580c:	6144      	str	r4, [r0, #20]
 800580e:	6103      	str	r3, [r0, #16]
 8005810:	bd10      	pop	{r4, pc}
 8005812:	bf00      	nop
 8005814:	080071eb 	.word	0x080071eb
 8005818:	0800725c 	.word	0x0800725c

0800581c <__multiply>:
 800581c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005820:	4691      	mov	r9, r2
 8005822:	690a      	ldr	r2, [r1, #16]
 8005824:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8005828:	460c      	mov	r4, r1
 800582a:	429a      	cmp	r2, r3
 800582c:	bfbe      	ittt	lt
 800582e:	460b      	movlt	r3, r1
 8005830:	464c      	movlt	r4, r9
 8005832:	4699      	movlt	r9, r3
 8005834:	6927      	ldr	r7, [r4, #16]
 8005836:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800583a:	68a3      	ldr	r3, [r4, #8]
 800583c:	6861      	ldr	r1, [r4, #4]
 800583e:	eb07 060a 	add.w	r6, r7, sl
 8005842:	42b3      	cmp	r3, r6
 8005844:	b085      	sub	sp, #20
 8005846:	bfb8      	it	lt
 8005848:	3101      	addlt	r1, #1
 800584a:	f7ff fedb 	bl	8005604 <_Balloc>
 800584e:	b930      	cbnz	r0, 800585e <__multiply+0x42>
 8005850:	4602      	mov	r2, r0
 8005852:	f240 115d 	movw	r1, #349	; 0x15d
 8005856:	4b43      	ldr	r3, [pc, #268]	; (8005964 <__multiply+0x148>)
 8005858:	4843      	ldr	r0, [pc, #268]	; (8005968 <__multiply+0x14c>)
 800585a:	f000 ff1f 	bl	800669c <__assert_func>
 800585e:	f100 0514 	add.w	r5, r0, #20
 8005862:	462b      	mov	r3, r5
 8005864:	2200      	movs	r2, #0
 8005866:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800586a:	4543      	cmp	r3, r8
 800586c:	d321      	bcc.n	80058b2 <__multiply+0x96>
 800586e:	f104 0314 	add.w	r3, r4, #20
 8005872:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8005876:	f109 0314 	add.w	r3, r9, #20
 800587a:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800587e:	9202      	str	r2, [sp, #8]
 8005880:	1b3a      	subs	r2, r7, r4
 8005882:	3a15      	subs	r2, #21
 8005884:	f022 0203 	bic.w	r2, r2, #3
 8005888:	3204      	adds	r2, #4
 800588a:	f104 0115 	add.w	r1, r4, #21
 800588e:	428f      	cmp	r7, r1
 8005890:	bf38      	it	cc
 8005892:	2204      	movcc	r2, #4
 8005894:	9201      	str	r2, [sp, #4]
 8005896:	9a02      	ldr	r2, [sp, #8]
 8005898:	9303      	str	r3, [sp, #12]
 800589a:	429a      	cmp	r2, r3
 800589c:	d80c      	bhi.n	80058b8 <__multiply+0x9c>
 800589e:	2e00      	cmp	r6, #0
 80058a0:	dd03      	ble.n	80058aa <__multiply+0x8e>
 80058a2:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d059      	beq.n	800595e <__multiply+0x142>
 80058aa:	6106      	str	r6, [r0, #16]
 80058ac:	b005      	add	sp, #20
 80058ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80058b2:	f843 2b04 	str.w	r2, [r3], #4
 80058b6:	e7d8      	b.n	800586a <__multiply+0x4e>
 80058b8:	f8b3 a000 	ldrh.w	sl, [r3]
 80058bc:	f1ba 0f00 	cmp.w	sl, #0
 80058c0:	d023      	beq.n	800590a <__multiply+0xee>
 80058c2:	46a9      	mov	r9, r5
 80058c4:	f04f 0c00 	mov.w	ip, #0
 80058c8:	f104 0e14 	add.w	lr, r4, #20
 80058cc:	f85e 2b04 	ldr.w	r2, [lr], #4
 80058d0:	f8d9 1000 	ldr.w	r1, [r9]
 80058d4:	fa1f fb82 	uxth.w	fp, r2
 80058d8:	b289      	uxth	r1, r1
 80058da:	fb0a 110b 	mla	r1, sl, fp, r1
 80058de:	4461      	add	r1, ip
 80058e0:	f8d9 c000 	ldr.w	ip, [r9]
 80058e4:	0c12      	lsrs	r2, r2, #16
 80058e6:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80058ea:	fb0a c202 	mla	r2, sl, r2, ip
 80058ee:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80058f2:	b289      	uxth	r1, r1
 80058f4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80058f8:	4577      	cmp	r7, lr
 80058fa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80058fe:	f849 1b04 	str.w	r1, [r9], #4
 8005902:	d8e3      	bhi.n	80058cc <__multiply+0xb0>
 8005904:	9a01      	ldr	r2, [sp, #4]
 8005906:	f845 c002 	str.w	ip, [r5, r2]
 800590a:	9a03      	ldr	r2, [sp, #12]
 800590c:	3304      	adds	r3, #4
 800590e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8005912:	f1b9 0f00 	cmp.w	r9, #0
 8005916:	d020      	beq.n	800595a <__multiply+0x13e>
 8005918:	46ae      	mov	lr, r5
 800591a:	f04f 0a00 	mov.w	sl, #0
 800591e:	6829      	ldr	r1, [r5, #0]
 8005920:	f104 0c14 	add.w	ip, r4, #20
 8005924:	f8bc b000 	ldrh.w	fp, [ip]
 8005928:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800592c:	b289      	uxth	r1, r1
 800592e:	fb09 220b 	mla	r2, r9, fp, r2
 8005932:	4492      	add	sl, r2
 8005934:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8005938:	f84e 1b04 	str.w	r1, [lr], #4
 800593c:	f85c 2b04 	ldr.w	r2, [ip], #4
 8005940:	f8be 1000 	ldrh.w	r1, [lr]
 8005944:	0c12      	lsrs	r2, r2, #16
 8005946:	fb09 1102 	mla	r1, r9, r2, r1
 800594a:	4567      	cmp	r7, ip
 800594c:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8005950:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8005954:	d8e6      	bhi.n	8005924 <__multiply+0x108>
 8005956:	9a01      	ldr	r2, [sp, #4]
 8005958:	50a9      	str	r1, [r5, r2]
 800595a:	3504      	adds	r5, #4
 800595c:	e79b      	b.n	8005896 <__multiply+0x7a>
 800595e:	3e01      	subs	r6, #1
 8005960:	e79d      	b.n	800589e <__multiply+0x82>
 8005962:	bf00      	nop
 8005964:	080071eb 	.word	0x080071eb
 8005968:	0800725c 	.word	0x0800725c

0800596c <__pow5mult>:
 800596c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005970:	4615      	mov	r5, r2
 8005972:	f012 0203 	ands.w	r2, r2, #3
 8005976:	4606      	mov	r6, r0
 8005978:	460f      	mov	r7, r1
 800597a:	d007      	beq.n	800598c <__pow5mult+0x20>
 800597c:	4c25      	ldr	r4, [pc, #148]	; (8005a14 <__pow5mult+0xa8>)
 800597e:	3a01      	subs	r2, #1
 8005980:	2300      	movs	r3, #0
 8005982:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005986:	f7ff fe9f 	bl	80056c8 <__multadd>
 800598a:	4607      	mov	r7, r0
 800598c:	10ad      	asrs	r5, r5, #2
 800598e:	d03d      	beq.n	8005a0c <__pow5mult+0xa0>
 8005990:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8005992:	b97c      	cbnz	r4, 80059b4 <__pow5mult+0x48>
 8005994:	2010      	movs	r0, #16
 8005996:	f7ff fe1f 	bl	80055d8 <malloc>
 800599a:	4602      	mov	r2, r0
 800599c:	6270      	str	r0, [r6, #36]	; 0x24
 800599e:	b928      	cbnz	r0, 80059ac <__pow5mult+0x40>
 80059a0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80059a4:	4b1c      	ldr	r3, [pc, #112]	; (8005a18 <__pow5mult+0xac>)
 80059a6:	481d      	ldr	r0, [pc, #116]	; (8005a1c <__pow5mult+0xb0>)
 80059a8:	f000 fe78 	bl	800669c <__assert_func>
 80059ac:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80059b0:	6004      	str	r4, [r0, #0]
 80059b2:	60c4      	str	r4, [r0, #12]
 80059b4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80059b8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80059bc:	b94c      	cbnz	r4, 80059d2 <__pow5mult+0x66>
 80059be:	f240 2171 	movw	r1, #625	; 0x271
 80059c2:	4630      	mov	r0, r6
 80059c4:	f7ff ff14 	bl	80057f0 <__i2b>
 80059c8:	2300      	movs	r3, #0
 80059ca:	4604      	mov	r4, r0
 80059cc:	f8c8 0008 	str.w	r0, [r8, #8]
 80059d0:	6003      	str	r3, [r0, #0]
 80059d2:	f04f 0900 	mov.w	r9, #0
 80059d6:	07eb      	lsls	r3, r5, #31
 80059d8:	d50a      	bpl.n	80059f0 <__pow5mult+0x84>
 80059da:	4639      	mov	r1, r7
 80059dc:	4622      	mov	r2, r4
 80059de:	4630      	mov	r0, r6
 80059e0:	f7ff ff1c 	bl	800581c <__multiply>
 80059e4:	4680      	mov	r8, r0
 80059e6:	4639      	mov	r1, r7
 80059e8:	4630      	mov	r0, r6
 80059ea:	f7ff fe4b 	bl	8005684 <_Bfree>
 80059ee:	4647      	mov	r7, r8
 80059f0:	106d      	asrs	r5, r5, #1
 80059f2:	d00b      	beq.n	8005a0c <__pow5mult+0xa0>
 80059f4:	6820      	ldr	r0, [r4, #0]
 80059f6:	b938      	cbnz	r0, 8005a08 <__pow5mult+0x9c>
 80059f8:	4622      	mov	r2, r4
 80059fa:	4621      	mov	r1, r4
 80059fc:	4630      	mov	r0, r6
 80059fe:	f7ff ff0d 	bl	800581c <__multiply>
 8005a02:	6020      	str	r0, [r4, #0]
 8005a04:	f8c0 9000 	str.w	r9, [r0]
 8005a08:	4604      	mov	r4, r0
 8005a0a:	e7e4      	b.n	80059d6 <__pow5mult+0x6a>
 8005a0c:	4638      	mov	r0, r7
 8005a0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005a12:	bf00      	nop
 8005a14:	080073a8 	.word	0x080073a8
 8005a18:	08007179 	.word	0x08007179
 8005a1c:	0800725c 	.word	0x0800725c

08005a20 <__lshift>:
 8005a20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005a24:	460c      	mov	r4, r1
 8005a26:	4607      	mov	r7, r0
 8005a28:	4691      	mov	r9, r2
 8005a2a:	6923      	ldr	r3, [r4, #16]
 8005a2c:	6849      	ldr	r1, [r1, #4]
 8005a2e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8005a32:	68a3      	ldr	r3, [r4, #8]
 8005a34:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005a38:	f108 0601 	add.w	r6, r8, #1
 8005a3c:	42b3      	cmp	r3, r6
 8005a3e:	db0b      	blt.n	8005a58 <__lshift+0x38>
 8005a40:	4638      	mov	r0, r7
 8005a42:	f7ff fddf 	bl	8005604 <_Balloc>
 8005a46:	4605      	mov	r5, r0
 8005a48:	b948      	cbnz	r0, 8005a5e <__lshift+0x3e>
 8005a4a:	4602      	mov	r2, r0
 8005a4c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8005a50:	4b29      	ldr	r3, [pc, #164]	; (8005af8 <__lshift+0xd8>)
 8005a52:	482a      	ldr	r0, [pc, #168]	; (8005afc <__lshift+0xdc>)
 8005a54:	f000 fe22 	bl	800669c <__assert_func>
 8005a58:	3101      	adds	r1, #1
 8005a5a:	005b      	lsls	r3, r3, #1
 8005a5c:	e7ee      	b.n	8005a3c <__lshift+0x1c>
 8005a5e:	2300      	movs	r3, #0
 8005a60:	f100 0114 	add.w	r1, r0, #20
 8005a64:	f100 0210 	add.w	r2, r0, #16
 8005a68:	4618      	mov	r0, r3
 8005a6a:	4553      	cmp	r3, sl
 8005a6c:	db37      	blt.n	8005ade <__lshift+0xbe>
 8005a6e:	6920      	ldr	r0, [r4, #16]
 8005a70:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005a74:	f104 0314 	add.w	r3, r4, #20
 8005a78:	f019 091f 	ands.w	r9, r9, #31
 8005a7c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005a80:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8005a84:	d02f      	beq.n	8005ae6 <__lshift+0xc6>
 8005a86:	468a      	mov	sl, r1
 8005a88:	f04f 0c00 	mov.w	ip, #0
 8005a8c:	f1c9 0e20 	rsb	lr, r9, #32
 8005a90:	681a      	ldr	r2, [r3, #0]
 8005a92:	fa02 f209 	lsl.w	r2, r2, r9
 8005a96:	ea42 020c 	orr.w	r2, r2, ip
 8005a9a:	f84a 2b04 	str.w	r2, [sl], #4
 8005a9e:	f853 2b04 	ldr.w	r2, [r3], #4
 8005aa2:	4298      	cmp	r0, r3
 8005aa4:	fa22 fc0e 	lsr.w	ip, r2, lr
 8005aa8:	d8f2      	bhi.n	8005a90 <__lshift+0x70>
 8005aaa:	1b03      	subs	r3, r0, r4
 8005aac:	3b15      	subs	r3, #21
 8005aae:	f023 0303 	bic.w	r3, r3, #3
 8005ab2:	3304      	adds	r3, #4
 8005ab4:	f104 0215 	add.w	r2, r4, #21
 8005ab8:	4290      	cmp	r0, r2
 8005aba:	bf38      	it	cc
 8005abc:	2304      	movcc	r3, #4
 8005abe:	f841 c003 	str.w	ip, [r1, r3]
 8005ac2:	f1bc 0f00 	cmp.w	ip, #0
 8005ac6:	d001      	beq.n	8005acc <__lshift+0xac>
 8005ac8:	f108 0602 	add.w	r6, r8, #2
 8005acc:	3e01      	subs	r6, #1
 8005ace:	4638      	mov	r0, r7
 8005ad0:	4621      	mov	r1, r4
 8005ad2:	612e      	str	r6, [r5, #16]
 8005ad4:	f7ff fdd6 	bl	8005684 <_Bfree>
 8005ad8:	4628      	mov	r0, r5
 8005ada:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ade:	f842 0f04 	str.w	r0, [r2, #4]!
 8005ae2:	3301      	adds	r3, #1
 8005ae4:	e7c1      	b.n	8005a6a <__lshift+0x4a>
 8005ae6:	3904      	subs	r1, #4
 8005ae8:	f853 2b04 	ldr.w	r2, [r3], #4
 8005aec:	4298      	cmp	r0, r3
 8005aee:	f841 2f04 	str.w	r2, [r1, #4]!
 8005af2:	d8f9      	bhi.n	8005ae8 <__lshift+0xc8>
 8005af4:	e7ea      	b.n	8005acc <__lshift+0xac>
 8005af6:	bf00      	nop
 8005af8:	080071eb 	.word	0x080071eb
 8005afc:	0800725c 	.word	0x0800725c

08005b00 <__mcmp>:
 8005b00:	4603      	mov	r3, r0
 8005b02:	690a      	ldr	r2, [r1, #16]
 8005b04:	6900      	ldr	r0, [r0, #16]
 8005b06:	b530      	push	{r4, r5, lr}
 8005b08:	1a80      	subs	r0, r0, r2
 8005b0a:	d10d      	bne.n	8005b28 <__mcmp+0x28>
 8005b0c:	3314      	adds	r3, #20
 8005b0e:	3114      	adds	r1, #20
 8005b10:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8005b14:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8005b18:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005b1c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8005b20:	4295      	cmp	r5, r2
 8005b22:	d002      	beq.n	8005b2a <__mcmp+0x2a>
 8005b24:	d304      	bcc.n	8005b30 <__mcmp+0x30>
 8005b26:	2001      	movs	r0, #1
 8005b28:	bd30      	pop	{r4, r5, pc}
 8005b2a:	42a3      	cmp	r3, r4
 8005b2c:	d3f4      	bcc.n	8005b18 <__mcmp+0x18>
 8005b2e:	e7fb      	b.n	8005b28 <__mcmp+0x28>
 8005b30:	f04f 30ff 	mov.w	r0, #4294967295
 8005b34:	e7f8      	b.n	8005b28 <__mcmp+0x28>
	...

08005b38 <__mdiff>:
 8005b38:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b3c:	460d      	mov	r5, r1
 8005b3e:	4607      	mov	r7, r0
 8005b40:	4611      	mov	r1, r2
 8005b42:	4628      	mov	r0, r5
 8005b44:	4614      	mov	r4, r2
 8005b46:	f7ff ffdb 	bl	8005b00 <__mcmp>
 8005b4a:	1e06      	subs	r6, r0, #0
 8005b4c:	d111      	bne.n	8005b72 <__mdiff+0x3a>
 8005b4e:	4631      	mov	r1, r6
 8005b50:	4638      	mov	r0, r7
 8005b52:	f7ff fd57 	bl	8005604 <_Balloc>
 8005b56:	4602      	mov	r2, r0
 8005b58:	b928      	cbnz	r0, 8005b66 <__mdiff+0x2e>
 8005b5a:	f240 2132 	movw	r1, #562	; 0x232
 8005b5e:	4b3a      	ldr	r3, [pc, #232]	; (8005c48 <__mdiff+0x110>)
 8005b60:	483a      	ldr	r0, [pc, #232]	; (8005c4c <__mdiff+0x114>)
 8005b62:	f000 fd9b 	bl	800669c <__assert_func>
 8005b66:	2301      	movs	r3, #1
 8005b68:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8005b6c:	4610      	mov	r0, r2
 8005b6e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b72:	bfa4      	itt	ge
 8005b74:	4623      	movge	r3, r4
 8005b76:	462c      	movge	r4, r5
 8005b78:	4638      	mov	r0, r7
 8005b7a:	6861      	ldr	r1, [r4, #4]
 8005b7c:	bfa6      	itte	ge
 8005b7e:	461d      	movge	r5, r3
 8005b80:	2600      	movge	r6, #0
 8005b82:	2601      	movlt	r6, #1
 8005b84:	f7ff fd3e 	bl	8005604 <_Balloc>
 8005b88:	4602      	mov	r2, r0
 8005b8a:	b918      	cbnz	r0, 8005b94 <__mdiff+0x5c>
 8005b8c:	f44f 7110 	mov.w	r1, #576	; 0x240
 8005b90:	4b2d      	ldr	r3, [pc, #180]	; (8005c48 <__mdiff+0x110>)
 8005b92:	e7e5      	b.n	8005b60 <__mdiff+0x28>
 8005b94:	f102 0814 	add.w	r8, r2, #20
 8005b98:	46c2      	mov	sl, r8
 8005b9a:	f04f 0c00 	mov.w	ip, #0
 8005b9e:	6927      	ldr	r7, [r4, #16]
 8005ba0:	60c6      	str	r6, [r0, #12]
 8005ba2:	692e      	ldr	r6, [r5, #16]
 8005ba4:	f104 0014 	add.w	r0, r4, #20
 8005ba8:	f105 0914 	add.w	r9, r5, #20
 8005bac:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8005bb0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8005bb4:	3410      	adds	r4, #16
 8005bb6:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8005bba:	f859 3b04 	ldr.w	r3, [r9], #4
 8005bbe:	fa1f f18b 	uxth.w	r1, fp
 8005bc2:	448c      	add	ip, r1
 8005bc4:	b299      	uxth	r1, r3
 8005bc6:	0c1b      	lsrs	r3, r3, #16
 8005bc8:	ebac 0101 	sub.w	r1, ip, r1
 8005bcc:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8005bd0:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8005bd4:	b289      	uxth	r1, r1
 8005bd6:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8005bda:	454e      	cmp	r6, r9
 8005bdc:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8005be0:	f84a 3b04 	str.w	r3, [sl], #4
 8005be4:	d8e7      	bhi.n	8005bb6 <__mdiff+0x7e>
 8005be6:	1b73      	subs	r3, r6, r5
 8005be8:	3b15      	subs	r3, #21
 8005bea:	f023 0303 	bic.w	r3, r3, #3
 8005bee:	3515      	adds	r5, #21
 8005bf0:	3304      	adds	r3, #4
 8005bf2:	42ae      	cmp	r6, r5
 8005bf4:	bf38      	it	cc
 8005bf6:	2304      	movcc	r3, #4
 8005bf8:	4418      	add	r0, r3
 8005bfa:	4443      	add	r3, r8
 8005bfc:	461e      	mov	r6, r3
 8005bfe:	4605      	mov	r5, r0
 8005c00:	4575      	cmp	r5, lr
 8005c02:	d30e      	bcc.n	8005c22 <__mdiff+0xea>
 8005c04:	f10e 0103 	add.w	r1, lr, #3
 8005c08:	1a09      	subs	r1, r1, r0
 8005c0a:	f021 0103 	bic.w	r1, r1, #3
 8005c0e:	3803      	subs	r0, #3
 8005c10:	4586      	cmp	lr, r0
 8005c12:	bf38      	it	cc
 8005c14:	2100      	movcc	r1, #0
 8005c16:	4419      	add	r1, r3
 8005c18:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8005c1c:	b18b      	cbz	r3, 8005c42 <__mdiff+0x10a>
 8005c1e:	6117      	str	r7, [r2, #16]
 8005c20:	e7a4      	b.n	8005b6c <__mdiff+0x34>
 8005c22:	f855 8b04 	ldr.w	r8, [r5], #4
 8005c26:	fa1f f188 	uxth.w	r1, r8
 8005c2a:	4461      	add	r1, ip
 8005c2c:	140c      	asrs	r4, r1, #16
 8005c2e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8005c32:	b289      	uxth	r1, r1
 8005c34:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8005c38:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8005c3c:	f846 1b04 	str.w	r1, [r6], #4
 8005c40:	e7de      	b.n	8005c00 <__mdiff+0xc8>
 8005c42:	3f01      	subs	r7, #1
 8005c44:	e7e8      	b.n	8005c18 <__mdiff+0xe0>
 8005c46:	bf00      	nop
 8005c48:	080071eb 	.word	0x080071eb
 8005c4c:	0800725c 	.word	0x0800725c

08005c50 <__d2b>:
 8005c50:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8005c54:	2101      	movs	r1, #1
 8005c56:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8005c5a:	4690      	mov	r8, r2
 8005c5c:	461d      	mov	r5, r3
 8005c5e:	f7ff fcd1 	bl	8005604 <_Balloc>
 8005c62:	4604      	mov	r4, r0
 8005c64:	b930      	cbnz	r0, 8005c74 <__d2b+0x24>
 8005c66:	4602      	mov	r2, r0
 8005c68:	f240 310a 	movw	r1, #778	; 0x30a
 8005c6c:	4b24      	ldr	r3, [pc, #144]	; (8005d00 <__d2b+0xb0>)
 8005c6e:	4825      	ldr	r0, [pc, #148]	; (8005d04 <__d2b+0xb4>)
 8005c70:	f000 fd14 	bl	800669c <__assert_func>
 8005c74:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8005c78:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8005c7c:	bb2d      	cbnz	r5, 8005cca <__d2b+0x7a>
 8005c7e:	9301      	str	r3, [sp, #4]
 8005c80:	f1b8 0300 	subs.w	r3, r8, #0
 8005c84:	d026      	beq.n	8005cd4 <__d2b+0x84>
 8005c86:	4668      	mov	r0, sp
 8005c88:	9300      	str	r3, [sp, #0]
 8005c8a:	f7ff fd83 	bl	8005794 <__lo0bits>
 8005c8e:	9900      	ldr	r1, [sp, #0]
 8005c90:	b1f0      	cbz	r0, 8005cd0 <__d2b+0x80>
 8005c92:	9a01      	ldr	r2, [sp, #4]
 8005c94:	f1c0 0320 	rsb	r3, r0, #32
 8005c98:	fa02 f303 	lsl.w	r3, r2, r3
 8005c9c:	430b      	orrs	r3, r1
 8005c9e:	40c2      	lsrs	r2, r0
 8005ca0:	6163      	str	r3, [r4, #20]
 8005ca2:	9201      	str	r2, [sp, #4]
 8005ca4:	9b01      	ldr	r3, [sp, #4]
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	bf14      	ite	ne
 8005caa:	2102      	movne	r1, #2
 8005cac:	2101      	moveq	r1, #1
 8005cae:	61a3      	str	r3, [r4, #24]
 8005cb0:	6121      	str	r1, [r4, #16]
 8005cb2:	b1c5      	cbz	r5, 8005ce6 <__d2b+0x96>
 8005cb4:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8005cb8:	4405      	add	r5, r0
 8005cba:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8005cbe:	603d      	str	r5, [r7, #0]
 8005cc0:	6030      	str	r0, [r6, #0]
 8005cc2:	4620      	mov	r0, r4
 8005cc4:	b002      	add	sp, #8
 8005cc6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005cca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005cce:	e7d6      	b.n	8005c7e <__d2b+0x2e>
 8005cd0:	6161      	str	r1, [r4, #20]
 8005cd2:	e7e7      	b.n	8005ca4 <__d2b+0x54>
 8005cd4:	a801      	add	r0, sp, #4
 8005cd6:	f7ff fd5d 	bl	8005794 <__lo0bits>
 8005cda:	2101      	movs	r1, #1
 8005cdc:	9b01      	ldr	r3, [sp, #4]
 8005cde:	6121      	str	r1, [r4, #16]
 8005ce0:	6163      	str	r3, [r4, #20]
 8005ce2:	3020      	adds	r0, #32
 8005ce4:	e7e5      	b.n	8005cb2 <__d2b+0x62>
 8005ce6:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8005cea:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8005cee:	6038      	str	r0, [r7, #0]
 8005cf0:	6918      	ldr	r0, [r3, #16]
 8005cf2:	f7ff fd2f 	bl	8005754 <__hi0bits>
 8005cf6:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8005cfa:	6031      	str	r1, [r6, #0]
 8005cfc:	e7e1      	b.n	8005cc2 <__d2b+0x72>
 8005cfe:	bf00      	nop
 8005d00:	080071eb 	.word	0x080071eb
 8005d04:	0800725c 	.word	0x0800725c

08005d08 <_calloc_r>:
 8005d08:	b570      	push	{r4, r5, r6, lr}
 8005d0a:	fba1 5402 	umull	r5, r4, r1, r2
 8005d0e:	b934      	cbnz	r4, 8005d1e <_calloc_r+0x16>
 8005d10:	4629      	mov	r1, r5
 8005d12:	f000 f875 	bl	8005e00 <_malloc_r>
 8005d16:	4606      	mov	r6, r0
 8005d18:	b928      	cbnz	r0, 8005d26 <_calloc_r+0x1e>
 8005d1a:	4630      	mov	r0, r6
 8005d1c:	bd70      	pop	{r4, r5, r6, pc}
 8005d1e:	220c      	movs	r2, #12
 8005d20:	2600      	movs	r6, #0
 8005d22:	6002      	str	r2, [r0, #0]
 8005d24:	e7f9      	b.n	8005d1a <_calloc_r+0x12>
 8005d26:	462a      	mov	r2, r5
 8005d28:	4621      	mov	r1, r4
 8005d2a:	f7fe f827 	bl	8003d7c <memset>
 8005d2e:	e7f4      	b.n	8005d1a <_calloc_r+0x12>

08005d30 <_free_r>:
 8005d30:	b538      	push	{r3, r4, r5, lr}
 8005d32:	4605      	mov	r5, r0
 8005d34:	2900      	cmp	r1, #0
 8005d36:	d040      	beq.n	8005dba <_free_r+0x8a>
 8005d38:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005d3c:	1f0c      	subs	r4, r1, #4
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	bfb8      	it	lt
 8005d42:	18e4      	addlt	r4, r4, r3
 8005d44:	f000 fe4c 	bl	80069e0 <__malloc_lock>
 8005d48:	4a1c      	ldr	r2, [pc, #112]	; (8005dbc <_free_r+0x8c>)
 8005d4a:	6813      	ldr	r3, [r2, #0]
 8005d4c:	b933      	cbnz	r3, 8005d5c <_free_r+0x2c>
 8005d4e:	6063      	str	r3, [r4, #4]
 8005d50:	6014      	str	r4, [r2, #0]
 8005d52:	4628      	mov	r0, r5
 8005d54:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005d58:	f000 be48 	b.w	80069ec <__malloc_unlock>
 8005d5c:	42a3      	cmp	r3, r4
 8005d5e:	d908      	bls.n	8005d72 <_free_r+0x42>
 8005d60:	6820      	ldr	r0, [r4, #0]
 8005d62:	1821      	adds	r1, r4, r0
 8005d64:	428b      	cmp	r3, r1
 8005d66:	bf01      	itttt	eq
 8005d68:	6819      	ldreq	r1, [r3, #0]
 8005d6a:	685b      	ldreq	r3, [r3, #4]
 8005d6c:	1809      	addeq	r1, r1, r0
 8005d6e:	6021      	streq	r1, [r4, #0]
 8005d70:	e7ed      	b.n	8005d4e <_free_r+0x1e>
 8005d72:	461a      	mov	r2, r3
 8005d74:	685b      	ldr	r3, [r3, #4]
 8005d76:	b10b      	cbz	r3, 8005d7c <_free_r+0x4c>
 8005d78:	42a3      	cmp	r3, r4
 8005d7a:	d9fa      	bls.n	8005d72 <_free_r+0x42>
 8005d7c:	6811      	ldr	r1, [r2, #0]
 8005d7e:	1850      	adds	r0, r2, r1
 8005d80:	42a0      	cmp	r0, r4
 8005d82:	d10b      	bne.n	8005d9c <_free_r+0x6c>
 8005d84:	6820      	ldr	r0, [r4, #0]
 8005d86:	4401      	add	r1, r0
 8005d88:	1850      	adds	r0, r2, r1
 8005d8a:	4283      	cmp	r3, r0
 8005d8c:	6011      	str	r1, [r2, #0]
 8005d8e:	d1e0      	bne.n	8005d52 <_free_r+0x22>
 8005d90:	6818      	ldr	r0, [r3, #0]
 8005d92:	685b      	ldr	r3, [r3, #4]
 8005d94:	4401      	add	r1, r0
 8005d96:	6011      	str	r1, [r2, #0]
 8005d98:	6053      	str	r3, [r2, #4]
 8005d9a:	e7da      	b.n	8005d52 <_free_r+0x22>
 8005d9c:	d902      	bls.n	8005da4 <_free_r+0x74>
 8005d9e:	230c      	movs	r3, #12
 8005da0:	602b      	str	r3, [r5, #0]
 8005da2:	e7d6      	b.n	8005d52 <_free_r+0x22>
 8005da4:	6820      	ldr	r0, [r4, #0]
 8005da6:	1821      	adds	r1, r4, r0
 8005da8:	428b      	cmp	r3, r1
 8005daa:	bf01      	itttt	eq
 8005dac:	6819      	ldreq	r1, [r3, #0]
 8005dae:	685b      	ldreq	r3, [r3, #4]
 8005db0:	1809      	addeq	r1, r1, r0
 8005db2:	6021      	streq	r1, [r4, #0]
 8005db4:	6063      	str	r3, [r4, #4]
 8005db6:	6054      	str	r4, [r2, #4]
 8005db8:	e7cb      	b.n	8005d52 <_free_r+0x22>
 8005dba:	bd38      	pop	{r3, r4, r5, pc}
 8005dbc:	20000ed8 	.word	0x20000ed8

08005dc0 <sbrk_aligned>:
 8005dc0:	b570      	push	{r4, r5, r6, lr}
 8005dc2:	4e0e      	ldr	r6, [pc, #56]	; (8005dfc <sbrk_aligned+0x3c>)
 8005dc4:	460c      	mov	r4, r1
 8005dc6:	6831      	ldr	r1, [r6, #0]
 8005dc8:	4605      	mov	r5, r0
 8005dca:	b911      	cbnz	r1, 8005dd2 <sbrk_aligned+0x12>
 8005dcc:	f000 fb40 	bl	8006450 <_sbrk_r>
 8005dd0:	6030      	str	r0, [r6, #0]
 8005dd2:	4621      	mov	r1, r4
 8005dd4:	4628      	mov	r0, r5
 8005dd6:	f000 fb3b 	bl	8006450 <_sbrk_r>
 8005dda:	1c43      	adds	r3, r0, #1
 8005ddc:	d00a      	beq.n	8005df4 <sbrk_aligned+0x34>
 8005dde:	1cc4      	adds	r4, r0, #3
 8005de0:	f024 0403 	bic.w	r4, r4, #3
 8005de4:	42a0      	cmp	r0, r4
 8005de6:	d007      	beq.n	8005df8 <sbrk_aligned+0x38>
 8005de8:	1a21      	subs	r1, r4, r0
 8005dea:	4628      	mov	r0, r5
 8005dec:	f000 fb30 	bl	8006450 <_sbrk_r>
 8005df0:	3001      	adds	r0, #1
 8005df2:	d101      	bne.n	8005df8 <sbrk_aligned+0x38>
 8005df4:	f04f 34ff 	mov.w	r4, #4294967295
 8005df8:	4620      	mov	r0, r4
 8005dfa:	bd70      	pop	{r4, r5, r6, pc}
 8005dfc:	20000edc 	.word	0x20000edc

08005e00 <_malloc_r>:
 8005e00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005e04:	1ccd      	adds	r5, r1, #3
 8005e06:	f025 0503 	bic.w	r5, r5, #3
 8005e0a:	3508      	adds	r5, #8
 8005e0c:	2d0c      	cmp	r5, #12
 8005e0e:	bf38      	it	cc
 8005e10:	250c      	movcc	r5, #12
 8005e12:	2d00      	cmp	r5, #0
 8005e14:	4607      	mov	r7, r0
 8005e16:	db01      	blt.n	8005e1c <_malloc_r+0x1c>
 8005e18:	42a9      	cmp	r1, r5
 8005e1a:	d905      	bls.n	8005e28 <_malloc_r+0x28>
 8005e1c:	230c      	movs	r3, #12
 8005e1e:	2600      	movs	r6, #0
 8005e20:	603b      	str	r3, [r7, #0]
 8005e22:	4630      	mov	r0, r6
 8005e24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005e28:	4e2e      	ldr	r6, [pc, #184]	; (8005ee4 <_malloc_r+0xe4>)
 8005e2a:	f000 fdd9 	bl	80069e0 <__malloc_lock>
 8005e2e:	6833      	ldr	r3, [r6, #0]
 8005e30:	461c      	mov	r4, r3
 8005e32:	bb34      	cbnz	r4, 8005e82 <_malloc_r+0x82>
 8005e34:	4629      	mov	r1, r5
 8005e36:	4638      	mov	r0, r7
 8005e38:	f7ff ffc2 	bl	8005dc0 <sbrk_aligned>
 8005e3c:	1c43      	adds	r3, r0, #1
 8005e3e:	4604      	mov	r4, r0
 8005e40:	d14d      	bne.n	8005ede <_malloc_r+0xde>
 8005e42:	6834      	ldr	r4, [r6, #0]
 8005e44:	4626      	mov	r6, r4
 8005e46:	2e00      	cmp	r6, #0
 8005e48:	d140      	bne.n	8005ecc <_malloc_r+0xcc>
 8005e4a:	6823      	ldr	r3, [r4, #0]
 8005e4c:	4631      	mov	r1, r6
 8005e4e:	4638      	mov	r0, r7
 8005e50:	eb04 0803 	add.w	r8, r4, r3
 8005e54:	f000 fafc 	bl	8006450 <_sbrk_r>
 8005e58:	4580      	cmp	r8, r0
 8005e5a:	d13a      	bne.n	8005ed2 <_malloc_r+0xd2>
 8005e5c:	6821      	ldr	r1, [r4, #0]
 8005e5e:	3503      	adds	r5, #3
 8005e60:	1a6d      	subs	r5, r5, r1
 8005e62:	f025 0503 	bic.w	r5, r5, #3
 8005e66:	3508      	adds	r5, #8
 8005e68:	2d0c      	cmp	r5, #12
 8005e6a:	bf38      	it	cc
 8005e6c:	250c      	movcc	r5, #12
 8005e6e:	4638      	mov	r0, r7
 8005e70:	4629      	mov	r1, r5
 8005e72:	f7ff ffa5 	bl	8005dc0 <sbrk_aligned>
 8005e76:	3001      	adds	r0, #1
 8005e78:	d02b      	beq.n	8005ed2 <_malloc_r+0xd2>
 8005e7a:	6823      	ldr	r3, [r4, #0]
 8005e7c:	442b      	add	r3, r5
 8005e7e:	6023      	str	r3, [r4, #0]
 8005e80:	e00e      	b.n	8005ea0 <_malloc_r+0xa0>
 8005e82:	6822      	ldr	r2, [r4, #0]
 8005e84:	1b52      	subs	r2, r2, r5
 8005e86:	d41e      	bmi.n	8005ec6 <_malloc_r+0xc6>
 8005e88:	2a0b      	cmp	r2, #11
 8005e8a:	d916      	bls.n	8005eba <_malloc_r+0xba>
 8005e8c:	1961      	adds	r1, r4, r5
 8005e8e:	42a3      	cmp	r3, r4
 8005e90:	6025      	str	r5, [r4, #0]
 8005e92:	bf18      	it	ne
 8005e94:	6059      	strne	r1, [r3, #4]
 8005e96:	6863      	ldr	r3, [r4, #4]
 8005e98:	bf08      	it	eq
 8005e9a:	6031      	streq	r1, [r6, #0]
 8005e9c:	5162      	str	r2, [r4, r5]
 8005e9e:	604b      	str	r3, [r1, #4]
 8005ea0:	4638      	mov	r0, r7
 8005ea2:	f104 060b 	add.w	r6, r4, #11
 8005ea6:	f000 fda1 	bl	80069ec <__malloc_unlock>
 8005eaa:	f026 0607 	bic.w	r6, r6, #7
 8005eae:	1d23      	adds	r3, r4, #4
 8005eb0:	1af2      	subs	r2, r6, r3
 8005eb2:	d0b6      	beq.n	8005e22 <_malloc_r+0x22>
 8005eb4:	1b9b      	subs	r3, r3, r6
 8005eb6:	50a3      	str	r3, [r4, r2]
 8005eb8:	e7b3      	b.n	8005e22 <_malloc_r+0x22>
 8005eba:	6862      	ldr	r2, [r4, #4]
 8005ebc:	42a3      	cmp	r3, r4
 8005ebe:	bf0c      	ite	eq
 8005ec0:	6032      	streq	r2, [r6, #0]
 8005ec2:	605a      	strne	r2, [r3, #4]
 8005ec4:	e7ec      	b.n	8005ea0 <_malloc_r+0xa0>
 8005ec6:	4623      	mov	r3, r4
 8005ec8:	6864      	ldr	r4, [r4, #4]
 8005eca:	e7b2      	b.n	8005e32 <_malloc_r+0x32>
 8005ecc:	4634      	mov	r4, r6
 8005ece:	6876      	ldr	r6, [r6, #4]
 8005ed0:	e7b9      	b.n	8005e46 <_malloc_r+0x46>
 8005ed2:	230c      	movs	r3, #12
 8005ed4:	4638      	mov	r0, r7
 8005ed6:	603b      	str	r3, [r7, #0]
 8005ed8:	f000 fd88 	bl	80069ec <__malloc_unlock>
 8005edc:	e7a1      	b.n	8005e22 <_malloc_r+0x22>
 8005ede:	6025      	str	r5, [r4, #0]
 8005ee0:	e7de      	b.n	8005ea0 <_malloc_r+0xa0>
 8005ee2:	bf00      	nop
 8005ee4:	20000ed8 	.word	0x20000ed8

08005ee8 <__ssputs_r>:
 8005ee8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005eec:	688e      	ldr	r6, [r1, #8]
 8005eee:	4682      	mov	sl, r0
 8005ef0:	429e      	cmp	r6, r3
 8005ef2:	460c      	mov	r4, r1
 8005ef4:	4690      	mov	r8, r2
 8005ef6:	461f      	mov	r7, r3
 8005ef8:	d838      	bhi.n	8005f6c <__ssputs_r+0x84>
 8005efa:	898a      	ldrh	r2, [r1, #12]
 8005efc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005f00:	d032      	beq.n	8005f68 <__ssputs_r+0x80>
 8005f02:	6825      	ldr	r5, [r4, #0]
 8005f04:	6909      	ldr	r1, [r1, #16]
 8005f06:	3301      	adds	r3, #1
 8005f08:	eba5 0901 	sub.w	r9, r5, r1
 8005f0c:	6965      	ldr	r5, [r4, #20]
 8005f0e:	444b      	add	r3, r9
 8005f10:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005f14:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005f18:	106d      	asrs	r5, r5, #1
 8005f1a:	429d      	cmp	r5, r3
 8005f1c:	bf38      	it	cc
 8005f1e:	461d      	movcc	r5, r3
 8005f20:	0553      	lsls	r3, r2, #21
 8005f22:	d531      	bpl.n	8005f88 <__ssputs_r+0xa0>
 8005f24:	4629      	mov	r1, r5
 8005f26:	f7ff ff6b 	bl	8005e00 <_malloc_r>
 8005f2a:	4606      	mov	r6, r0
 8005f2c:	b950      	cbnz	r0, 8005f44 <__ssputs_r+0x5c>
 8005f2e:	230c      	movs	r3, #12
 8005f30:	f04f 30ff 	mov.w	r0, #4294967295
 8005f34:	f8ca 3000 	str.w	r3, [sl]
 8005f38:	89a3      	ldrh	r3, [r4, #12]
 8005f3a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005f3e:	81a3      	strh	r3, [r4, #12]
 8005f40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f44:	464a      	mov	r2, r9
 8005f46:	6921      	ldr	r1, [r4, #16]
 8005f48:	f7fd ff0a 	bl	8003d60 <memcpy>
 8005f4c:	89a3      	ldrh	r3, [r4, #12]
 8005f4e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005f52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f56:	81a3      	strh	r3, [r4, #12]
 8005f58:	6126      	str	r6, [r4, #16]
 8005f5a:	444e      	add	r6, r9
 8005f5c:	6026      	str	r6, [r4, #0]
 8005f5e:	463e      	mov	r6, r7
 8005f60:	6165      	str	r5, [r4, #20]
 8005f62:	eba5 0509 	sub.w	r5, r5, r9
 8005f66:	60a5      	str	r5, [r4, #8]
 8005f68:	42be      	cmp	r6, r7
 8005f6a:	d900      	bls.n	8005f6e <__ssputs_r+0x86>
 8005f6c:	463e      	mov	r6, r7
 8005f6e:	4632      	mov	r2, r6
 8005f70:	4641      	mov	r1, r8
 8005f72:	6820      	ldr	r0, [r4, #0]
 8005f74:	f000 fd1a 	bl	80069ac <memmove>
 8005f78:	68a3      	ldr	r3, [r4, #8]
 8005f7a:	2000      	movs	r0, #0
 8005f7c:	1b9b      	subs	r3, r3, r6
 8005f7e:	60a3      	str	r3, [r4, #8]
 8005f80:	6823      	ldr	r3, [r4, #0]
 8005f82:	4433      	add	r3, r6
 8005f84:	6023      	str	r3, [r4, #0]
 8005f86:	e7db      	b.n	8005f40 <__ssputs_r+0x58>
 8005f88:	462a      	mov	r2, r5
 8005f8a:	f000 fd35 	bl	80069f8 <_realloc_r>
 8005f8e:	4606      	mov	r6, r0
 8005f90:	2800      	cmp	r0, #0
 8005f92:	d1e1      	bne.n	8005f58 <__ssputs_r+0x70>
 8005f94:	4650      	mov	r0, sl
 8005f96:	6921      	ldr	r1, [r4, #16]
 8005f98:	f7ff feca 	bl	8005d30 <_free_r>
 8005f9c:	e7c7      	b.n	8005f2e <__ssputs_r+0x46>
	...

08005fa0 <_svfiprintf_r>:
 8005fa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005fa4:	4698      	mov	r8, r3
 8005fa6:	898b      	ldrh	r3, [r1, #12]
 8005fa8:	4607      	mov	r7, r0
 8005faa:	061b      	lsls	r3, r3, #24
 8005fac:	460d      	mov	r5, r1
 8005fae:	4614      	mov	r4, r2
 8005fb0:	b09d      	sub	sp, #116	; 0x74
 8005fb2:	d50e      	bpl.n	8005fd2 <_svfiprintf_r+0x32>
 8005fb4:	690b      	ldr	r3, [r1, #16]
 8005fb6:	b963      	cbnz	r3, 8005fd2 <_svfiprintf_r+0x32>
 8005fb8:	2140      	movs	r1, #64	; 0x40
 8005fba:	f7ff ff21 	bl	8005e00 <_malloc_r>
 8005fbe:	6028      	str	r0, [r5, #0]
 8005fc0:	6128      	str	r0, [r5, #16]
 8005fc2:	b920      	cbnz	r0, 8005fce <_svfiprintf_r+0x2e>
 8005fc4:	230c      	movs	r3, #12
 8005fc6:	603b      	str	r3, [r7, #0]
 8005fc8:	f04f 30ff 	mov.w	r0, #4294967295
 8005fcc:	e0d1      	b.n	8006172 <_svfiprintf_r+0x1d2>
 8005fce:	2340      	movs	r3, #64	; 0x40
 8005fd0:	616b      	str	r3, [r5, #20]
 8005fd2:	2300      	movs	r3, #0
 8005fd4:	9309      	str	r3, [sp, #36]	; 0x24
 8005fd6:	2320      	movs	r3, #32
 8005fd8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005fdc:	2330      	movs	r3, #48	; 0x30
 8005fde:	f04f 0901 	mov.w	r9, #1
 8005fe2:	f8cd 800c 	str.w	r8, [sp, #12]
 8005fe6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800618c <_svfiprintf_r+0x1ec>
 8005fea:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005fee:	4623      	mov	r3, r4
 8005ff0:	469a      	mov	sl, r3
 8005ff2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005ff6:	b10a      	cbz	r2, 8005ffc <_svfiprintf_r+0x5c>
 8005ff8:	2a25      	cmp	r2, #37	; 0x25
 8005ffa:	d1f9      	bne.n	8005ff0 <_svfiprintf_r+0x50>
 8005ffc:	ebba 0b04 	subs.w	fp, sl, r4
 8006000:	d00b      	beq.n	800601a <_svfiprintf_r+0x7a>
 8006002:	465b      	mov	r3, fp
 8006004:	4622      	mov	r2, r4
 8006006:	4629      	mov	r1, r5
 8006008:	4638      	mov	r0, r7
 800600a:	f7ff ff6d 	bl	8005ee8 <__ssputs_r>
 800600e:	3001      	adds	r0, #1
 8006010:	f000 80aa 	beq.w	8006168 <_svfiprintf_r+0x1c8>
 8006014:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006016:	445a      	add	r2, fp
 8006018:	9209      	str	r2, [sp, #36]	; 0x24
 800601a:	f89a 3000 	ldrb.w	r3, [sl]
 800601e:	2b00      	cmp	r3, #0
 8006020:	f000 80a2 	beq.w	8006168 <_svfiprintf_r+0x1c8>
 8006024:	2300      	movs	r3, #0
 8006026:	f04f 32ff 	mov.w	r2, #4294967295
 800602a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800602e:	f10a 0a01 	add.w	sl, sl, #1
 8006032:	9304      	str	r3, [sp, #16]
 8006034:	9307      	str	r3, [sp, #28]
 8006036:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800603a:	931a      	str	r3, [sp, #104]	; 0x68
 800603c:	4654      	mov	r4, sl
 800603e:	2205      	movs	r2, #5
 8006040:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006044:	4851      	ldr	r0, [pc, #324]	; (800618c <_svfiprintf_r+0x1ec>)
 8006046:	f7ff facf 	bl	80055e8 <memchr>
 800604a:	9a04      	ldr	r2, [sp, #16]
 800604c:	b9d8      	cbnz	r0, 8006086 <_svfiprintf_r+0xe6>
 800604e:	06d0      	lsls	r0, r2, #27
 8006050:	bf44      	itt	mi
 8006052:	2320      	movmi	r3, #32
 8006054:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006058:	0711      	lsls	r1, r2, #28
 800605a:	bf44      	itt	mi
 800605c:	232b      	movmi	r3, #43	; 0x2b
 800605e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006062:	f89a 3000 	ldrb.w	r3, [sl]
 8006066:	2b2a      	cmp	r3, #42	; 0x2a
 8006068:	d015      	beq.n	8006096 <_svfiprintf_r+0xf6>
 800606a:	4654      	mov	r4, sl
 800606c:	2000      	movs	r0, #0
 800606e:	f04f 0c0a 	mov.w	ip, #10
 8006072:	9a07      	ldr	r2, [sp, #28]
 8006074:	4621      	mov	r1, r4
 8006076:	f811 3b01 	ldrb.w	r3, [r1], #1
 800607a:	3b30      	subs	r3, #48	; 0x30
 800607c:	2b09      	cmp	r3, #9
 800607e:	d94e      	bls.n	800611e <_svfiprintf_r+0x17e>
 8006080:	b1b0      	cbz	r0, 80060b0 <_svfiprintf_r+0x110>
 8006082:	9207      	str	r2, [sp, #28]
 8006084:	e014      	b.n	80060b0 <_svfiprintf_r+0x110>
 8006086:	eba0 0308 	sub.w	r3, r0, r8
 800608a:	fa09 f303 	lsl.w	r3, r9, r3
 800608e:	4313      	orrs	r3, r2
 8006090:	46a2      	mov	sl, r4
 8006092:	9304      	str	r3, [sp, #16]
 8006094:	e7d2      	b.n	800603c <_svfiprintf_r+0x9c>
 8006096:	9b03      	ldr	r3, [sp, #12]
 8006098:	1d19      	adds	r1, r3, #4
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	9103      	str	r1, [sp, #12]
 800609e:	2b00      	cmp	r3, #0
 80060a0:	bfbb      	ittet	lt
 80060a2:	425b      	neglt	r3, r3
 80060a4:	f042 0202 	orrlt.w	r2, r2, #2
 80060a8:	9307      	strge	r3, [sp, #28]
 80060aa:	9307      	strlt	r3, [sp, #28]
 80060ac:	bfb8      	it	lt
 80060ae:	9204      	strlt	r2, [sp, #16]
 80060b0:	7823      	ldrb	r3, [r4, #0]
 80060b2:	2b2e      	cmp	r3, #46	; 0x2e
 80060b4:	d10c      	bne.n	80060d0 <_svfiprintf_r+0x130>
 80060b6:	7863      	ldrb	r3, [r4, #1]
 80060b8:	2b2a      	cmp	r3, #42	; 0x2a
 80060ba:	d135      	bne.n	8006128 <_svfiprintf_r+0x188>
 80060bc:	9b03      	ldr	r3, [sp, #12]
 80060be:	3402      	adds	r4, #2
 80060c0:	1d1a      	adds	r2, r3, #4
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	9203      	str	r2, [sp, #12]
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	bfb8      	it	lt
 80060ca:	f04f 33ff 	movlt.w	r3, #4294967295
 80060ce:	9305      	str	r3, [sp, #20]
 80060d0:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8006190 <_svfiprintf_r+0x1f0>
 80060d4:	2203      	movs	r2, #3
 80060d6:	4650      	mov	r0, sl
 80060d8:	7821      	ldrb	r1, [r4, #0]
 80060da:	f7ff fa85 	bl	80055e8 <memchr>
 80060de:	b140      	cbz	r0, 80060f2 <_svfiprintf_r+0x152>
 80060e0:	2340      	movs	r3, #64	; 0x40
 80060e2:	eba0 000a 	sub.w	r0, r0, sl
 80060e6:	fa03 f000 	lsl.w	r0, r3, r0
 80060ea:	9b04      	ldr	r3, [sp, #16]
 80060ec:	3401      	adds	r4, #1
 80060ee:	4303      	orrs	r3, r0
 80060f0:	9304      	str	r3, [sp, #16]
 80060f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80060f6:	2206      	movs	r2, #6
 80060f8:	4826      	ldr	r0, [pc, #152]	; (8006194 <_svfiprintf_r+0x1f4>)
 80060fa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80060fe:	f7ff fa73 	bl	80055e8 <memchr>
 8006102:	2800      	cmp	r0, #0
 8006104:	d038      	beq.n	8006178 <_svfiprintf_r+0x1d8>
 8006106:	4b24      	ldr	r3, [pc, #144]	; (8006198 <_svfiprintf_r+0x1f8>)
 8006108:	bb1b      	cbnz	r3, 8006152 <_svfiprintf_r+0x1b2>
 800610a:	9b03      	ldr	r3, [sp, #12]
 800610c:	3307      	adds	r3, #7
 800610e:	f023 0307 	bic.w	r3, r3, #7
 8006112:	3308      	adds	r3, #8
 8006114:	9303      	str	r3, [sp, #12]
 8006116:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006118:	4433      	add	r3, r6
 800611a:	9309      	str	r3, [sp, #36]	; 0x24
 800611c:	e767      	b.n	8005fee <_svfiprintf_r+0x4e>
 800611e:	460c      	mov	r4, r1
 8006120:	2001      	movs	r0, #1
 8006122:	fb0c 3202 	mla	r2, ip, r2, r3
 8006126:	e7a5      	b.n	8006074 <_svfiprintf_r+0xd4>
 8006128:	2300      	movs	r3, #0
 800612a:	f04f 0c0a 	mov.w	ip, #10
 800612e:	4619      	mov	r1, r3
 8006130:	3401      	adds	r4, #1
 8006132:	9305      	str	r3, [sp, #20]
 8006134:	4620      	mov	r0, r4
 8006136:	f810 2b01 	ldrb.w	r2, [r0], #1
 800613a:	3a30      	subs	r2, #48	; 0x30
 800613c:	2a09      	cmp	r2, #9
 800613e:	d903      	bls.n	8006148 <_svfiprintf_r+0x1a8>
 8006140:	2b00      	cmp	r3, #0
 8006142:	d0c5      	beq.n	80060d0 <_svfiprintf_r+0x130>
 8006144:	9105      	str	r1, [sp, #20]
 8006146:	e7c3      	b.n	80060d0 <_svfiprintf_r+0x130>
 8006148:	4604      	mov	r4, r0
 800614a:	2301      	movs	r3, #1
 800614c:	fb0c 2101 	mla	r1, ip, r1, r2
 8006150:	e7f0      	b.n	8006134 <_svfiprintf_r+0x194>
 8006152:	ab03      	add	r3, sp, #12
 8006154:	9300      	str	r3, [sp, #0]
 8006156:	462a      	mov	r2, r5
 8006158:	4638      	mov	r0, r7
 800615a:	4b10      	ldr	r3, [pc, #64]	; (800619c <_svfiprintf_r+0x1fc>)
 800615c:	a904      	add	r1, sp, #16
 800615e:	f7fd feb3 	bl	8003ec8 <_printf_float>
 8006162:	1c42      	adds	r2, r0, #1
 8006164:	4606      	mov	r6, r0
 8006166:	d1d6      	bne.n	8006116 <_svfiprintf_r+0x176>
 8006168:	89ab      	ldrh	r3, [r5, #12]
 800616a:	065b      	lsls	r3, r3, #25
 800616c:	f53f af2c 	bmi.w	8005fc8 <_svfiprintf_r+0x28>
 8006170:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006172:	b01d      	add	sp, #116	; 0x74
 8006174:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006178:	ab03      	add	r3, sp, #12
 800617a:	9300      	str	r3, [sp, #0]
 800617c:	462a      	mov	r2, r5
 800617e:	4638      	mov	r0, r7
 8006180:	4b06      	ldr	r3, [pc, #24]	; (800619c <_svfiprintf_r+0x1fc>)
 8006182:	a904      	add	r1, sp, #16
 8006184:	f7fe f93c 	bl	8004400 <_printf_i>
 8006188:	e7eb      	b.n	8006162 <_svfiprintf_r+0x1c2>
 800618a:	bf00      	nop
 800618c:	080073b4 	.word	0x080073b4
 8006190:	080073ba 	.word	0x080073ba
 8006194:	080073be 	.word	0x080073be
 8006198:	08003ec9 	.word	0x08003ec9
 800619c:	08005ee9 	.word	0x08005ee9

080061a0 <__sfputc_r>:
 80061a0:	6893      	ldr	r3, [r2, #8]
 80061a2:	b410      	push	{r4}
 80061a4:	3b01      	subs	r3, #1
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	6093      	str	r3, [r2, #8]
 80061aa:	da07      	bge.n	80061bc <__sfputc_r+0x1c>
 80061ac:	6994      	ldr	r4, [r2, #24]
 80061ae:	42a3      	cmp	r3, r4
 80061b0:	db01      	blt.n	80061b6 <__sfputc_r+0x16>
 80061b2:	290a      	cmp	r1, #10
 80061b4:	d102      	bne.n	80061bc <__sfputc_r+0x1c>
 80061b6:	bc10      	pop	{r4}
 80061b8:	f000 b99e 	b.w	80064f8 <__swbuf_r>
 80061bc:	6813      	ldr	r3, [r2, #0]
 80061be:	1c58      	adds	r0, r3, #1
 80061c0:	6010      	str	r0, [r2, #0]
 80061c2:	7019      	strb	r1, [r3, #0]
 80061c4:	4608      	mov	r0, r1
 80061c6:	bc10      	pop	{r4}
 80061c8:	4770      	bx	lr

080061ca <__sfputs_r>:
 80061ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061cc:	4606      	mov	r6, r0
 80061ce:	460f      	mov	r7, r1
 80061d0:	4614      	mov	r4, r2
 80061d2:	18d5      	adds	r5, r2, r3
 80061d4:	42ac      	cmp	r4, r5
 80061d6:	d101      	bne.n	80061dc <__sfputs_r+0x12>
 80061d8:	2000      	movs	r0, #0
 80061da:	e007      	b.n	80061ec <__sfputs_r+0x22>
 80061dc:	463a      	mov	r2, r7
 80061de:	4630      	mov	r0, r6
 80061e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80061e4:	f7ff ffdc 	bl	80061a0 <__sfputc_r>
 80061e8:	1c43      	adds	r3, r0, #1
 80061ea:	d1f3      	bne.n	80061d4 <__sfputs_r+0xa>
 80061ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080061f0 <_vfiprintf_r>:
 80061f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061f4:	460d      	mov	r5, r1
 80061f6:	4614      	mov	r4, r2
 80061f8:	4698      	mov	r8, r3
 80061fa:	4606      	mov	r6, r0
 80061fc:	b09d      	sub	sp, #116	; 0x74
 80061fe:	b118      	cbz	r0, 8006208 <_vfiprintf_r+0x18>
 8006200:	6983      	ldr	r3, [r0, #24]
 8006202:	b90b      	cbnz	r3, 8006208 <_vfiprintf_r+0x18>
 8006204:	f7ff f942 	bl	800548c <__sinit>
 8006208:	4b89      	ldr	r3, [pc, #548]	; (8006430 <_vfiprintf_r+0x240>)
 800620a:	429d      	cmp	r5, r3
 800620c:	d11b      	bne.n	8006246 <_vfiprintf_r+0x56>
 800620e:	6875      	ldr	r5, [r6, #4]
 8006210:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006212:	07d9      	lsls	r1, r3, #31
 8006214:	d405      	bmi.n	8006222 <_vfiprintf_r+0x32>
 8006216:	89ab      	ldrh	r3, [r5, #12]
 8006218:	059a      	lsls	r2, r3, #22
 800621a:	d402      	bmi.n	8006222 <_vfiprintf_r+0x32>
 800621c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800621e:	f7ff f9d8 	bl	80055d2 <__retarget_lock_acquire_recursive>
 8006222:	89ab      	ldrh	r3, [r5, #12]
 8006224:	071b      	lsls	r3, r3, #28
 8006226:	d501      	bpl.n	800622c <_vfiprintf_r+0x3c>
 8006228:	692b      	ldr	r3, [r5, #16]
 800622a:	b9eb      	cbnz	r3, 8006268 <_vfiprintf_r+0x78>
 800622c:	4629      	mov	r1, r5
 800622e:	4630      	mov	r0, r6
 8006230:	f000 f9c6 	bl	80065c0 <__swsetup_r>
 8006234:	b1c0      	cbz	r0, 8006268 <_vfiprintf_r+0x78>
 8006236:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006238:	07dc      	lsls	r4, r3, #31
 800623a:	d50e      	bpl.n	800625a <_vfiprintf_r+0x6a>
 800623c:	f04f 30ff 	mov.w	r0, #4294967295
 8006240:	b01d      	add	sp, #116	; 0x74
 8006242:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006246:	4b7b      	ldr	r3, [pc, #492]	; (8006434 <_vfiprintf_r+0x244>)
 8006248:	429d      	cmp	r5, r3
 800624a:	d101      	bne.n	8006250 <_vfiprintf_r+0x60>
 800624c:	68b5      	ldr	r5, [r6, #8]
 800624e:	e7df      	b.n	8006210 <_vfiprintf_r+0x20>
 8006250:	4b79      	ldr	r3, [pc, #484]	; (8006438 <_vfiprintf_r+0x248>)
 8006252:	429d      	cmp	r5, r3
 8006254:	bf08      	it	eq
 8006256:	68f5      	ldreq	r5, [r6, #12]
 8006258:	e7da      	b.n	8006210 <_vfiprintf_r+0x20>
 800625a:	89ab      	ldrh	r3, [r5, #12]
 800625c:	0598      	lsls	r0, r3, #22
 800625e:	d4ed      	bmi.n	800623c <_vfiprintf_r+0x4c>
 8006260:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006262:	f7ff f9b7 	bl	80055d4 <__retarget_lock_release_recursive>
 8006266:	e7e9      	b.n	800623c <_vfiprintf_r+0x4c>
 8006268:	2300      	movs	r3, #0
 800626a:	9309      	str	r3, [sp, #36]	; 0x24
 800626c:	2320      	movs	r3, #32
 800626e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006272:	2330      	movs	r3, #48	; 0x30
 8006274:	f04f 0901 	mov.w	r9, #1
 8006278:	f8cd 800c 	str.w	r8, [sp, #12]
 800627c:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800643c <_vfiprintf_r+0x24c>
 8006280:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006284:	4623      	mov	r3, r4
 8006286:	469a      	mov	sl, r3
 8006288:	f813 2b01 	ldrb.w	r2, [r3], #1
 800628c:	b10a      	cbz	r2, 8006292 <_vfiprintf_r+0xa2>
 800628e:	2a25      	cmp	r2, #37	; 0x25
 8006290:	d1f9      	bne.n	8006286 <_vfiprintf_r+0x96>
 8006292:	ebba 0b04 	subs.w	fp, sl, r4
 8006296:	d00b      	beq.n	80062b0 <_vfiprintf_r+0xc0>
 8006298:	465b      	mov	r3, fp
 800629a:	4622      	mov	r2, r4
 800629c:	4629      	mov	r1, r5
 800629e:	4630      	mov	r0, r6
 80062a0:	f7ff ff93 	bl	80061ca <__sfputs_r>
 80062a4:	3001      	adds	r0, #1
 80062a6:	f000 80aa 	beq.w	80063fe <_vfiprintf_r+0x20e>
 80062aa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80062ac:	445a      	add	r2, fp
 80062ae:	9209      	str	r2, [sp, #36]	; 0x24
 80062b0:	f89a 3000 	ldrb.w	r3, [sl]
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	f000 80a2 	beq.w	80063fe <_vfiprintf_r+0x20e>
 80062ba:	2300      	movs	r3, #0
 80062bc:	f04f 32ff 	mov.w	r2, #4294967295
 80062c0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80062c4:	f10a 0a01 	add.w	sl, sl, #1
 80062c8:	9304      	str	r3, [sp, #16]
 80062ca:	9307      	str	r3, [sp, #28]
 80062cc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80062d0:	931a      	str	r3, [sp, #104]	; 0x68
 80062d2:	4654      	mov	r4, sl
 80062d4:	2205      	movs	r2, #5
 80062d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80062da:	4858      	ldr	r0, [pc, #352]	; (800643c <_vfiprintf_r+0x24c>)
 80062dc:	f7ff f984 	bl	80055e8 <memchr>
 80062e0:	9a04      	ldr	r2, [sp, #16]
 80062e2:	b9d8      	cbnz	r0, 800631c <_vfiprintf_r+0x12c>
 80062e4:	06d1      	lsls	r1, r2, #27
 80062e6:	bf44      	itt	mi
 80062e8:	2320      	movmi	r3, #32
 80062ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80062ee:	0713      	lsls	r3, r2, #28
 80062f0:	bf44      	itt	mi
 80062f2:	232b      	movmi	r3, #43	; 0x2b
 80062f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80062f8:	f89a 3000 	ldrb.w	r3, [sl]
 80062fc:	2b2a      	cmp	r3, #42	; 0x2a
 80062fe:	d015      	beq.n	800632c <_vfiprintf_r+0x13c>
 8006300:	4654      	mov	r4, sl
 8006302:	2000      	movs	r0, #0
 8006304:	f04f 0c0a 	mov.w	ip, #10
 8006308:	9a07      	ldr	r2, [sp, #28]
 800630a:	4621      	mov	r1, r4
 800630c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006310:	3b30      	subs	r3, #48	; 0x30
 8006312:	2b09      	cmp	r3, #9
 8006314:	d94e      	bls.n	80063b4 <_vfiprintf_r+0x1c4>
 8006316:	b1b0      	cbz	r0, 8006346 <_vfiprintf_r+0x156>
 8006318:	9207      	str	r2, [sp, #28]
 800631a:	e014      	b.n	8006346 <_vfiprintf_r+0x156>
 800631c:	eba0 0308 	sub.w	r3, r0, r8
 8006320:	fa09 f303 	lsl.w	r3, r9, r3
 8006324:	4313      	orrs	r3, r2
 8006326:	46a2      	mov	sl, r4
 8006328:	9304      	str	r3, [sp, #16]
 800632a:	e7d2      	b.n	80062d2 <_vfiprintf_r+0xe2>
 800632c:	9b03      	ldr	r3, [sp, #12]
 800632e:	1d19      	adds	r1, r3, #4
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	9103      	str	r1, [sp, #12]
 8006334:	2b00      	cmp	r3, #0
 8006336:	bfbb      	ittet	lt
 8006338:	425b      	neglt	r3, r3
 800633a:	f042 0202 	orrlt.w	r2, r2, #2
 800633e:	9307      	strge	r3, [sp, #28]
 8006340:	9307      	strlt	r3, [sp, #28]
 8006342:	bfb8      	it	lt
 8006344:	9204      	strlt	r2, [sp, #16]
 8006346:	7823      	ldrb	r3, [r4, #0]
 8006348:	2b2e      	cmp	r3, #46	; 0x2e
 800634a:	d10c      	bne.n	8006366 <_vfiprintf_r+0x176>
 800634c:	7863      	ldrb	r3, [r4, #1]
 800634e:	2b2a      	cmp	r3, #42	; 0x2a
 8006350:	d135      	bne.n	80063be <_vfiprintf_r+0x1ce>
 8006352:	9b03      	ldr	r3, [sp, #12]
 8006354:	3402      	adds	r4, #2
 8006356:	1d1a      	adds	r2, r3, #4
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	9203      	str	r2, [sp, #12]
 800635c:	2b00      	cmp	r3, #0
 800635e:	bfb8      	it	lt
 8006360:	f04f 33ff 	movlt.w	r3, #4294967295
 8006364:	9305      	str	r3, [sp, #20]
 8006366:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8006440 <_vfiprintf_r+0x250>
 800636a:	2203      	movs	r2, #3
 800636c:	4650      	mov	r0, sl
 800636e:	7821      	ldrb	r1, [r4, #0]
 8006370:	f7ff f93a 	bl	80055e8 <memchr>
 8006374:	b140      	cbz	r0, 8006388 <_vfiprintf_r+0x198>
 8006376:	2340      	movs	r3, #64	; 0x40
 8006378:	eba0 000a 	sub.w	r0, r0, sl
 800637c:	fa03 f000 	lsl.w	r0, r3, r0
 8006380:	9b04      	ldr	r3, [sp, #16]
 8006382:	3401      	adds	r4, #1
 8006384:	4303      	orrs	r3, r0
 8006386:	9304      	str	r3, [sp, #16]
 8006388:	f814 1b01 	ldrb.w	r1, [r4], #1
 800638c:	2206      	movs	r2, #6
 800638e:	482d      	ldr	r0, [pc, #180]	; (8006444 <_vfiprintf_r+0x254>)
 8006390:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006394:	f7ff f928 	bl	80055e8 <memchr>
 8006398:	2800      	cmp	r0, #0
 800639a:	d03f      	beq.n	800641c <_vfiprintf_r+0x22c>
 800639c:	4b2a      	ldr	r3, [pc, #168]	; (8006448 <_vfiprintf_r+0x258>)
 800639e:	bb1b      	cbnz	r3, 80063e8 <_vfiprintf_r+0x1f8>
 80063a0:	9b03      	ldr	r3, [sp, #12]
 80063a2:	3307      	adds	r3, #7
 80063a4:	f023 0307 	bic.w	r3, r3, #7
 80063a8:	3308      	adds	r3, #8
 80063aa:	9303      	str	r3, [sp, #12]
 80063ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80063ae:	443b      	add	r3, r7
 80063b0:	9309      	str	r3, [sp, #36]	; 0x24
 80063b2:	e767      	b.n	8006284 <_vfiprintf_r+0x94>
 80063b4:	460c      	mov	r4, r1
 80063b6:	2001      	movs	r0, #1
 80063b8:	fb0c 3202 	mla	r2, ip, r2, r3
 80063bc:	e7a5      	b.n	800630a <_vfiprintf_r+0x11a>
 80063be:	2300      	movs	r3, #0
 80063c0:	f04f 0c0a 	mov.w	ip, #10
 80063c4:	4619      	mov	r1, r3
 80063c6:	3401      	adds	r4, #1
 80063c8:	9305      	str	r3, [sp, #20]
 80063ca:	4620      	mov	r0, r4
 80063cc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80063d0:	3a30      	subs	r2, #48	; 0x30
 80063d2:	2a09      	cmp	r2, #9
 80063d4:	d903      	bls.n	80063de <_vfiprintf_r+0x1ee>
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d0c5      	beq.n	8006366 <_vfiprintf_r+0x176>
 80063da:	9105      	str	r1, [sp, #20]
 80063dc:	e7c3      	b.n	8006366 <_vfiprintf_r+0x176>
 80063de:	4604      	mov	r4, r0
 80063e0:	2301      	movs	r3, #1
 80063e2:	fb0c 2101 	mla	r1, ip, r1, r2
 80063e6:	e7f0      	b.n	80063ca <_vfiprintf_r+0x1da>
 80063e8:	ab03      	add	r3, sp, #12
 80063ea:	9300      	str	r3, [sp, #0]
 80063ec:	462a      	mov	r2, r5
 80063ee:	4630      	mov	r0, r6
 80063f0:	4b16      	ldr	r3, [pc, #88]	; (800644c <_vfiprintf_r+0x25c>)
 80063f2:	a904      	add	r1, sp, #16
 80063f4:	f7fd fd68 	bl	8003ec8 <_printf_float>
 80063f8:	4607      	mov	r7, r0
 80063fa:	1c78      	adds	r0, r7, #1
 80063fc:	d1d6      	bne.n	80063ac <_vfiprintf_r+0x1bc>
 80063fe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006400:	07d9      	lsls	r1, r3, #31
 8006402:	d405      	bmi.n	8006410 <_vfiprintf_r+0x220>
 8006404:	89ab      	ldrh	r3, [r5, #12]
 8006406:	059a      	lsls	r2, r3, #22
 8006408:	d402      	bmi.n	8006410 <_vfiprintf_r+0x220>
 800640a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800640c:	f7ff f8e2 	bl	80055d4 <__retarget_lock_release_recursive>
 8006410:	89ab      	ldrh	r3, [r5, #12]
 8006412:	065b      	lsls	r3, r3, #25
 8006414:	f53f af12 	bmi.w	800623c <_vfiprintf_r+0x4c>
 8006418:	9809      	ldr	r0, [sp, #36]	; 0x24
 800641a:	e711      	b.n	8006240 <_vfiprintf_r+0x50>
 800641c:	ab03      	add	r3, sp, #12
 800641e:	9300      	str	r3, [sp, #0]
 8006420:	462a      	mov	r2, r5
 8006422:	4630      	mov	r0, r6
 8006424:	4b09      	ldr	r3, [pc, #36]	; (800644c <_vfiprintf_r+0x25c>)
 8006426:	a904      	add	r1, sp, #16
 8006428:	f7fd ffea 	bl	8004400 <_printf_i>
 800642c:	e7e4      	b.n	80063f8 <_vfiprintf_r+0x208>
 800642e:	bf00      	nop
 8006430:	0800721c 	.word	0x0800721c
 8006434:	0800723c 	.word	0x0800723c
 8006438:	080071fc 	.word	0x080071fc
 800643c:	080073b4 	.word	0x080073b4
 8006440:	080073ba 	.word	0x080073ba
 8006444:	080073be 	.word	0x080073be
 8006448:	08003ec9 	.word	0x08003ec9
 800644c:	080061cb 	.word	0x080061cb

08006450 <_sbrk_r>:
 8006450:	b538      	push	{r3, r4, r5, lr}
 8006452:	2300      	movs	r3, #0
 8006454:	4d05      	ldr	r5, [pc, #20]	; (800646c <_sbrk_r+0x1c>)
 8006456:	4604      	mov	r4, r0
 8006458:	4608      	mov	r0, r1
 800645a:	602b      	str	r3, [r5, #0]
 800645c:	f7fb fa26 	bl	80018ac <_sbrk>
 8006460:	1c43      	adds	r3, r0, #1
 8006462:	d102      	bne.n	800646a <_sbrk_r+0x1a>
 8006464:	682b      	ldr	r3, [r5, #0]
 8006466:	b103      	cbz	r3, 800646a <_sbrk_r+0x1a>
 8006468:	6023      	str	r3, [r4, #0]
 800646a:	bd38      	pop	{r3, r4, r5, pc}
 800646c:	20000ee0 	.word	0x20000ee0

08006470 <__sread>:
 8006470:	b510      	push	{r4, lr}
 8006472:	460c      	mov	r4, r1
 8006474:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006478:	f000 faee 	bl	8006a58 <_read_r>
 800647c:	2800      	cmp	r0, #0
 800647e:	bfab      	itete	ge
 8006480:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006482:	89a3      	ldrhlt	r3, [r4, #12]
 8006484:	181b      	addge	r3, r3, r0
 8006486:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800648a:	bfac      	ite	ge
 800648c:	6563      	strge	r3, [r4, #84]	; 0x54
 800648e:	81a3      	strhlt	r3, [r4, #12]
 8006490:	bd10      	pop	{r4, pc}

08006492 <__swrite>:
 8006492:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006496:	461f      	mov	r7, r3
 8006498:	898b      	ldrh	r3, [r1, #12]
 800649a:	4605      	mov	r5, r0
 800649c:	05db      	lsls	r3, r3, #23
 800649e:	460c      	mov	r4, r1
 80064a0:	4616      	mov	r6, r2
 80064a2:	d505      	bpl.n	80064b0 <__swrite+0x1e>
 80064a4:	2302      	movs	r3, #2
 80064a6:	2200      	movs	r2, #0
 80064a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80064ac:	f000 f9f4 	bl	8006898 <_lseek_r>
 80064b0:	89a3      	ldrh	r3, [r4, #12]
 80064b2:	4632      	mov	r2, r6
 80064b4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80064b8:	81a3      	strh	r3, [r4, #12]
 80064ba:	4628      	mov	r0, r5
 80064bc:	463b      	mov	r3, r7
 80064be:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80064c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80064c6:	f000 b869 	b.w	800659c <_write_r>

080064ca <__sseek>:
 80064ca:	b510      	push	{r4, lr}
 80064cc:	460c      	mov	r4, r1
 80064ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80064d2:	f000 f9e1 	bl	8006898 <_lseek_r>
 80064d6:	1c43      	adds	r3, r0, #1
 80064d8:	89a3      	ldrh	r3, [r4, #12]
 80064da:	bf15      	itete	ne
 80064dc:	6560      	strne	r0, [r4, #84]	; 0x54
 80064de:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80064e2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80064e6:	81a3      	strheq	r3, [r4, #12]
 80064e8:	bf18      	it	ne
 80064ea:	81a3      	strhne	r3, [r4, #12]
 80064ec:	bd10      	pop	{r4, pc}

080064ee <__sclose>:
 80064ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80064f2:	f000 b8f1 	b.w	80066d8 <_close_r>
	...

080064f8 <__swbuf_r>:
 80064f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064fa:	460e      	mov	r6, r1
 80064fc:	4614      	mov	r4, r2
 80064fe:	4605      	mov	r5, r0
 8006500:	b118      	cbz	r0, 800650a <__swbuf_r+0x12>
 8006502:	6983      	ldr	r3, [r0, #24]
 8006504:	b90b      	cbnz	r3, 800650a <__swbuf_r+0x12>
 8006506:	f7fe ffc1 	bl	800548c <__sinit>
 800650a:	4b21      	ldr	r3, [pc, #132]	; (8006590 <__swbuf_r+0x98>)
 800650c:	429c      	cmp	r4, r3
 800650e:	d12b      	bne.n	8006568 <__swbuf_r+0x70>
 8006510:	686c      	ldr	r4, [r5, #4]
 8006512:	69a3      	ldr	r3, [r4, #24]
 8006514:	60a3      	str	r3, [r4, #8]
 8006516:	89a3      	ldrh	r3, [r4, #12]
 8006518:	071a      	lsls	r2, r3, #28
 800651a:	d52f      	bpl.n	800657c <__swbuf_r+0x84>
 800651c:	6923      	ldr	r3, [r4, #16]
 800651e:	b36b      	cbz	r3, 800657c <__swbuf_r+0x84>
 8006520:	6923      	ldr	r3, [r4, #16]
 8006522:	6820      	ldr	r0, [r4, #0]
 8006524:	b2f6      	uxtb	r6, r6
 8006526:	1ac0      	subs	r0, r0, r3
 8006528:	6963      	ldr	r3, [r4, #20]
 800652a:	4637      	mov	r7, r6
 800652c:	4283      	cmp	r3, r0
 800652e:	dc04      	bgt.n	800653a <__swbuf_r+0x42>
 8006530:	4621      	mov	r1, r4
 8006532:	4628      	mov	r0, r5
 8006534:	f000 f962 	bl	80067fc <_fflush_r>
 8006538:	bb30      	cbnz	r0, 8006588 <__swbuf_r+0x90>
 800653a:	68a3      	ldr	r3, [r4, #8]
 800653c:	3001      	adds	r0, #1
 800653e:	3b01      	subs	r3, #1
 8006540:	60a3      	str	r3, [r4, #8]
 8006542:	6823      	ldr	r3, [r4, #0]
 8006544:	1c5a      	adds	r2, r3, #1
 8006546:	6022      	str	r2, [r4, #0]
 8006548:	701e      	strb	r6, [r3, #0]
 800654a:	6963      	ldr	r3, [r4, #20]
 800654c:	4283      	cmp	r3, r0
 800654e:	d004      	beq.n	800655a <__swbuf_r+0x62>
 8006550:	89a3      	ldrh	r3, [r4, #12]
 8006552:	07db      	lsls	r3, r3, #31
 8006554:	d506      	bpl.n	8006564 <__swbuf_r+0x6c>
 8006556:	2e0a      	cmp	r6, #10
 8006558:	d104      	bne.n	8006564 <__swbuf_r+0x6c>
 800655a:	4621      	mov	r1, r4
 800655c:	4628      	mov	r0, r5
 800655e:	f000 f94d 	bl	80067fc <_fflush_r>
 8006562:	b988      	cbnz	r0, 8006588 <__swbuf_r+0x90>
 8006564:	4638      	mov	r0, r7
 8006566:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006568:	4b0a      	ldr	r3, [pc, #40]	; (8006594 <__swbuf_r+0x9c>)
 800656a:	429c      	cmp	r4, r3
 800656c:	d101      	bne.n	8006572 <__swbuf_r+0x7a>
 800656e:	68ac      	ldr	r4, [r5, #8]
 8006570:	e7cf      	b.n	8006512 <__swbuf_r+0x1a>
 8006572:	4b09      	ldr	r3, [pc, #36]	; (8006598 <__swbuf_r+0xa0>)
 8006574:	429c      	cmp	r4, r3
 8006576:	bf08      	it	eq
 8006578:	68ec      	ldreq	r4, [r5, #12]
 800657a:	e7ca      	b.n	8006512 <__swbuf_r+0x1a>
 800657c:	4621      	mov	r1, r4
 800657e:	4628      	mov	r0, r5
 8006580:	f000 f81e 	bl	80065c0 <__swsetup_r>
 8006584:	2800      	cmp	r0, #0
 8006586:	d0cb      	beq.n	8006520 <__swbuf_r+0x28>
 8006588:	f04f 37ff 	mov.w	r7, #4294967295
 800658c:	e7ea      	b.n	8006564 <__swbuf_r+0x6c>
 800658e:	bf00      	nop
 8006590:	0800721c 	.word	0x0800721c
 8006594:	0800723c 	.word	0x0800723c
 8006598:	080071fc 	.word	0x080071fc

0800659c <_write_r>:
 800659c:	b538      	push	{r3, r4, r5, lr}
 800659e:	4604      	mov	r4, r0
 80065a0:	4608      	mov	r0, r1
 80065a2:	4611      	mov	r1, r2
 80065a4:	2200      	movs	r2, #0
 80065a6:	4d05      	ldr	r5, [pc, #20]	; (80065bc <_write_r+0x20>)
 80065a8:	602a      	str	r2, [r5, #0]
 80065aa:	461a      	mov	r2, r3
 80065ac:	f7fa fbb6 	bl	8000d1c <_write>
 80065b0:	1c43      	adds	r3, r0, #1
 80065b2:	d102      	bne.n	80065ba <_write_r+0x1e>
 80065b4:	682b      	ldr	r3, [r5, #0]
 80065b6:	b103      	cbz	r3, 80065ba <_write_r+0x1e>
 80065b8:	6023      	str	r3, [r4, #0]
 80065ba:	bd38      	pop	{r3, r4, r5, pc}
 80065bc:	20000ee0 	.word	0x20000ee0

080065c0 <__swsetup_r>:
 80065c0:	4b32      	ldr	r3, [pc, #200]	; (800668c <__swsetup_r+0xcc>)
 80065c2:	b570      	push	{r4, r5, r6, lr}
 80065c4:	681d      	ldr	r5, [r3, #0]
 80065c6:	4606      	mov	r6, r0
 80065c8:	460c      	mov	r4, r1
 80065ca:	b125      	cbz	r5, 80065d6 <__swsetup_r+0x16>
 80065cc:	69ab      	ldr	r3, [r5, #24]
 80065ce:	b913      	cbnz	r3, 80065d6 <__swsetup_r+0x16>
 80065d0:	4628      	mov	r0, r5
 80065d2:	f7fe ff5b 	bl	800548c <__sinit>
 80065d6:	4b2e      	ldr	r3, [pc, #184]	; (8006690 <__swsetup_r+0xd0>)
 80065d8:	429c      	cmp	r4, r3
 80065da:	d10f      	bne.n	80065fc <__swsetup_r+0x3c>
 80065dc:	686c      	ldr	r4, [r5, #4]
 80065de:	89a3      	ldrh	r3, [r4, #12]
 80065e0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80065e4:	0719      	lsls	r1, r3, #28
 80065e6:	d42c      	bmi.n	8006642 <__swsetup_r+0x82>
 80065e8:	06dd      	lsls	r5, r3, #27
 80065ea:	d411      	bmi.n	8006610 <__swsetup_r+0x50>
 80065ec:	2309      	movs	r3, #9
 80065ee:	6033      	str	r3, [r6, #0]
 80065f0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80065f4:	f04f 30ff 	mov.w	r0, #4294967295
 80065f8:	81a3      	strh	r3, [r4, #12]
 80065fa:	e03e      	b.n	800667a <__swsetup_r+0xba>
 80065fc:	4b25      	ldr	r3, [pc, #148]	; (8006694 <__swsetup_r+0xd4>)
 80065fe:	429c      	cmp	r4, r3
 8006600:	d101      	bne.n	8006606 <__swsetup_r+0x46>
 8006602:	68ac      	ldr	r4, [r5, #8]
 8006604:	e7eb      	b.n	80065de <__swsetup_r+0x1e>
 8006606:	4b24      	ldr	r3, [pc, #144]	; (8006698 <__swsetup_r+0xd8>)
 8006608:	429c      	cmp	r4, r3
 800660a:	bf08      	it	eq
 800660c:	68ec      	ldreq	r4, [r5, #12]
 800660e:	e7e6      	b.n	80065de <__swsetup_r+0x1e>
 8006610:	0758      	lsls	r0, r3, #29
 8006612:	d512      	bpl.n	800663a <__swsetup_r+0x7a>
 8006614:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006616:	b141      	cbz	r1, 800662a <__swsetup_r+0x6a>
 8006618:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800661c:	4299      	cmp	r1, r3
 800661e:	d002      	beq.n	8006626 <__swsetup_r+0x66>
 8006620:	4630      	mov	r0, r6
 8006622:	f7ff fb85 	bl	8005d30 <_free_r>
 8006626:	2300      	movs	r3, #0
 8006628:	6363      	str	r3, [r4, #52]	; 0x34
 800662a:	89a3      	ldrh	r3, [r4, #12]
 800662c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006630:	81a3      	strh	r3, [r4, #12]
 8006632:	2300      	movs	r3, #0
 8006634:	6063      	str	r3, [r4, #4]
 8006636:	6923      	ldr	r3, [r4, #16]
 8006638:	6023      	str	r3, [r4, #0]
 800663a:	89a3      	ldrh	r3, [r4, #12]
 800663c:	f043 0308 	orr.w	r3, r3, #8
 8006640:	81a3      	strh	r3, [r4, #12]
 8006642:	6923      	ldr	r3, [r4, #16]
 8006644:	b94b      	cbnz	r3, 800665a <__swsetup_r+0x9a>
 8006646:	89a3      	ldrh	r3, [r4, #12]
 8006648:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800664c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006650:	d003      	beq.n	800665a <__swsetup_r+0x9a>
 8006652:	4621      	mov	r1, r4
 8006654:	4630      	mov	r0, r6
 8006656:	f000 f957 	bl	8006908 <__smakebuf_r>
 800665a:	89a0      	ldrh	r0, [r4, #12]
 800665c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006660:	f010 0301 	ands.w	r3, r0, #1
 8006664:	d00a      	beq.n	800667c <__swsetup_r+0xbc>
 8006666:	2300      	movs	r3, #0
 8006668:	60a3      	str	r3, [r4, #8]
 800666a:	6963      	ldr	r3, [r4, #20]
 800666c:	425b      	negs	r3, r3
 800666e:	61a3      	str	r3, [r4, #24]
 8006670:	6923      	ldr	r3, [r4, #16]
 8006672:	b943      	cbnz	r3, 8006686 <__swsetup_r+0xc6>
 8006674:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006678:	d1ba      	bne.n	80065f0 <__swsetup_r+0x30>
 800667a:	bd70      	pop	{r4, r5, r6, pc}
 800667c:	0781      	lsls	r1, r0, #30
 800667e:	bf58      	it	pl
 8006680:	6963      	ldrpl	r3, [r4, #20]
 8006682:	60a3      	str	r3, [r4, #8]
 8006684:	e7f4      	b.n	8006670 <__swsetup_r+0xb0>
 8006686:	2000      	movs	r0, #0
 8006688:	e7f7      	b.n	800667a <__swsetup_r+0xba>
 800668a:	bf00      	nop
 800668c:	20000020 	.word	0x20000020
 8006690:	0800721c 	.word	0x0800721c
 8006694:	0800723c 	.word	0x0800723c
 8006698:	080071fc 	.word	0x080071fc

0800669c <__assert_func>:
 800669c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800669e:	4614      	mov	r4, r2
 80066a0:	461a      	mov	r2, r3
 80066a2:	4b09      	ldr	r3, [pc, #36]	; (80066c8 <__assert_func+0x2c>)
 80066a4:	4605      	mov	r5, r0
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	68d8      	ldr	r0, [r3, #12]
 80066aa:	b14c      	cbz	r4, 80066c0 <__assert_func+0x24>
 80066ac:	4b07      	ldr	r3, [pc, #28]	; (80066cc <__assert_func+0x30>)
 80066ae:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80066b2:	9100      	str	r1, [sp, #0]
 80066b4:	462b      	mov	r3, r5
 80066b6:	4906      	ldr	r1, [pc, #24]	; (80066d0 <__assert_func+0x34>)
 80066b8:	f000 f8dc 	bl	8006874 <fiprintf>
 80066bc:	f000 f9eb 	bl	8006a96 <abort>
 80066c0:	4b04      	ldr	r3, [pc, #16]	; (80066d4 <__assert_func+0x38>)
 80066c2:	461c      	mov	r4, r3
 80066c4:	e7f3      	b.n	80066ae <__assert_func+0x12>
 80066c6:	bf00      	nop
 80066c8:	20000020 	.word	0x20000020
 80066cc:	080073c5 	.word	0x080073c5
 80066d0:	080073d2 	.word	0x080073d2
 80066d4:	08007400 	.word	0x08007400

080066d8 <_close_r>:
 80066d8:	b538      	push	{r3, r4, r5, lr}
 80066da:	2300      	movs	r3, #0
 80066dc:	4d05      	ldr	r5, [pc, #20]	; (80066f4 <_close_r+0x1c>)
 80066de:	4604      	mov	r4, r0
 80066e0:	4608      	mov	r0, r1
 80066e2:	602b      	str	r3, [r5, #0]
 80066e4:	f7fb f8d4 	bl	8001890 <_close>
 80066e8:	1c43      	adds	r3, r0, #1
 80066ea:	d102      	bne.n	80066f2 <_close_r+0x1a>
 80066ec:	682b      	ldr	r3, [r5, #0]
 80066ee:	b103      	cbz	r3, 80066f2 <_close_r+0x1a>
 80066f0:	6023      	str	r3, [r4, #0]
 80066f2:	bd38      	pop	{r3, r4, r5, pc}
 80066f4:	20000ee0 	.word	0x20000ee0

080066f8 <__sflush_r>:
 80066f8:	898a      	ldrh	r2, [r1, #12]
 80066fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066fc:	4605      	mov	r5, r0
 80066fe:	0710      	lsls	r0, r2, #28
 8006700:	460c      	mov	r4, r1
 8006702:	d457      	bmi.n	80067b4 <__sflush_r+0xbc>
 8006704:	684b      	ldr	r3, [r1, #4]
 8006706:	2b00      	cmp	r3, #0
 8006708:	dc04      	bgt.n	8006714 <__sflush_r+0x1c>
 800670a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800670c:	2b00      	cmp	r3, #0
 800670e:	dc01      	bgt.n	8006714 <__sflush_r+0x1c>
 8006710:	2000      	movs	r0, #0
 8006712:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006714:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006716:	2e00      	cmp	r6, #0
 8006718:	d0fa      	beq.n	8006710 <__sflush_r+0x18>
 800671a:	2300      	movs	r3, #0
 800671c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006720:	682f      	ldr	r7, [r5, #0]
 8006722:	602b      	str	r3, [r5, #0]
 8006724:	d032      	beq.n	800678c <__sflush_r+0x94>
 8006726:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006728:	89a3      	ldrh	r3, [r4, #12]
 800672a:	075a      	lsls	r2, r3, #29
 800672c:	d505      	bpl.n	800673a <__sflush_r+0x42>
 800672e:	6863      	ldr	r3, [r4, #4]
 8006730:	1ac0      	subs	r0, r0, r3
 8006732:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006734:	b10b      	cbz	r3, 800673a <__sflush_r+0x42>
 8006736:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006738:	1ac0      	subs	r0, r0, r3
 800673a:	2300      	movs	r3, #0
 800673c:	4602      	mov	r2, r0
 800673e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006740:	4628      	mov	r0, r5
 8006742:	6a21      	ldr	r1, [r4, #32]
 8006744:	47b0      	blx	r6
 8006746:	1c43      	adds	r3, r0, #1
 8006748:	89a3      	ldrh	r3, [r4, #12]
 800674a:	d106      	bne.n	800675a <__sflush_r+0x62>
 800674c:	6829      	ldr	r1, [r5, #0]
 800674e:	291d      	cmp	r1, #29
 8006750:	d82c      	bhi.n	80067ac <__sflush_r+0xb4>
 8006752:	4a29      	ldr	r2, [pc, #164]	; (80067f8 <__sflush_r+0x100>)
 8006754:	40ca      	lsrs	r2, r1
 8006756:	07d6      	lsls	r6, r2, #31
 8006758:	d528      	bpl.n	80067ac <__sflush_r+0xb4>
 800675a:	2200      	movs	r2, #0
 800675c:	6062      	str	r2, [r4, #4]
 800675e:	6922      	ldr	r2, [r4, #16]
 8006760:	04d9      	lsls	r1, r3, #19
 8006762:	6022      	str	r2, [r4, #0]
 8006764:	d504      	bpl.n	8006770 <__sflush_r+0x78>
 8006766:	1c42      	adds	r2, r0, #1
 8006768:	d101      	bne.n	800676e <__sflush_r+0x76>
 800676a:	682b      	ldr	r3, [r5, #0]
 800676c:	b903      	cbnz	r3, 8006770 <__sflush_r+0x78>
 800676e:	6560      	str	r0, [r4, #84]	; 0x54
 8006770:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006772:	602f      	str	r7, [r5, #0]
 8006774:	2900      	cmp	r1, #0
 8006776:	d0cb      	beq.n	8006710 <__sflush_r+0x18>
 8006778:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800677c:	4299      	cmp	r1, r3
 800677e:	d002      	beq.n	8006786 <__sflush_r+0x8e>
 8006780:	4628      	mov	r0, r5
 8006782:	f7ff fad5 	bl	8005d30 <_free_r>
 8006786:	2000      	movs	r0, #0
 8006788:	6360      	str	r0, [r4, #52]	; 0x34
 800678a:	e7c2      	b.n	8006712 <__sflush_r+0x1a>
 800678c:	6a21      	ldr	r1, [r4, #32]
 800678e:	2301      	movs	r3, #1
 8006790:	4628      	mov	r0, r5
 8006792:	47b0      	blx	r6
 8006794:	1c41      	adds	r1, r0, #1
 8006796:	d1c7      	bne.n	8006728 <__sflush_r+0x30>
 8006798:	682b      	ldr	r3, [r5, #0]
 800679a:	2b00      	cmp	r3, #0
 800679c:	d0c4      	beq.n	8006728 <__sflush_r+0x30>
 800679e:	2b1d      	cmp	r3, #29
 80067a0:	d001      	beq.n	80067a6 <__sflush_r+0xae>
 80067a2:	2b16      	cmp	r3, #22
 80067a4:	d101      	bne.n	80067aa <__sflush_r+0xb2>
 80067a6:	602f      	str	r7, [r5, #0]
 80067a8:	e7b2      	b.n	8006710 <__sflush_r+0x18>
 80067aa:	89a3      	ldrh	r3, [r4, #12]
 80067ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80067b0:	81a3      	strh	r3, [r4, #12]
 80067b2:	e7ae      	b.n	8006712 <__sflush_r+0x1a>
 80067b4:	690f      	ldr	r7, [r1, #16]
 80067b6:	2f00      	cmp	r7, #0
 80067b8:	d0aa      	beq.n	8006710 <__sflush_r+0x18>
 80067ba:	0793      	lsls	r3, r2, #30
 80067bc:	bf18      	it	ne
 80067be:	2300      	movne	r3, #0
 80067c0:	680e      	ldr	r6, [r1, #0]
 80067c2:	bf08      	it	eq
 80067c4:	694b      	ldreq	r3, [r1, #20]
 80067c6:	1bf6      	subs	r6, r6, r7
 80067c8:	600f      	str	r7, [r1, #0]
 80067ca:	608b      	str	r3, [r1, #8]
 80067cc:	2e00      	cmp	r6, #0
 80067ce:	dd9f      	ble.n	8006710 <__sflush_r+0x18>
 80067d0:	4633      	mov	r3, r6
 80067d2:	463a      	mov	r2, r7
 80067d4:	4628      	mov	r0, r5
 80067d6:	6a21      	ldr	r1, [r4, #32]
 80067d8:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 80067dc:	47e0      	blx	ip
 80067de:	2800      	cmp	r0, #0
 80067e0:	dc06      	bgt.n	80067f0 <__sflush_r+0xf8>
 80067e2:	89a3      	ldrh	r3, [r4, #12]
 80067e4:	f04f 30ff 	mov.w	r0, #4294967295
 80067e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80067ec:	81a3      	strh	r3, [r4, #12]
 80067ee:	e790      	b.n	8006712 <__sflush_r+0x1a>
 80067f0:	4407      	add	r7, r0
 80067f2:	1a36      	subs	r6, r6, r0
 80067f4:	e7ea      	b.n	80067cc <__sflush_r+0xd4>
 80067f6:	bf00      	nop
 80067f8:	20400001 	.word	0x20400001

080067fc <_fflush_r>:
 80067fc:	b538      	push	{r3, r4, r5, lr}
 80067fe:	690b      	ldr	r3, [r1, #16]
 8006800:	4605      	mov	r5, r0
 8006802:	460c      	mov	r4, r1
 8006804:	b913      	cbnz	r3, 800680c <_fflush_r+0x10>
 8006806:	2500      	movs	r5, #0
 8006808:	4628      	mov	r0, r5
 800680a:	bd38      	pop	{r3, r4, r5, pc}
 800680c:	b118      	cbz	r0, 8006816 <_fflush_r+0x1a>
 800680e:	6983      	ldr	r3, [r0, #24]
 8006810:	b90b      	cbnz	r3, 8006816 <_fflush_r+0x1a>
 8006812:	f7fe fe3b 	bl	800548c <__sinit>
 8006816:	4b14      	ldr	r3, [pc, #80]	; (8006868 <_fflush_r+0x6c>)
 8006818:	429c      	cmp	r4, r3
 800681a:	d11b      	bne.n	8006854 <_fflush_r+0x58>
 800681c:	686c      	ldr	r4, [r5, #4]
 800681e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006822:	2b00      	cmp	r3, #0
 8006824:	d0ef      	beq.n	8006806 <_fflush_r+0xa>
 8006826:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006828:	07d0      	lsls	r0, r2, #31
 800682a:	d404      	bmi.n	8006836 <_fflush_r+0x3a>
 800682c:	0599      	lsls	r1, r3, #22
 800682e:	d402      	bmi.n	8006836 <_fflush_r+0x3a>
 8006830:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006832:	f7fe fece 	bl	80055d2 <__retarget_lock_acquire_recursive>
 8006836:	4628      	mov	r0, r5
 8006838:	4621      	mov	r1, r4
 800683a:	f7ff ff5d 	bl	80066f8 <__sflush_r>
 800683e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006840:	4605      	mov	r5, r0
 8006842:	07da      	lsls	r2, r3, #31
 8006844:	d4e0      	bmi.n	8006808 <_fflush_r+0xc>
 8006846:	89a3      	ldrh	r3, [r4, #12]
 8006848:	059b      	lsls	r3, r3, #22
 800684a:	d4dd      	bmi.n	8006808 <_fflush_r+0xc>
 800684c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800684e:	f7fe fec1 	bl	80055d4 <__retarget_lock_release_recursive>
 8006852:	e7d9      	b.n	8006808 <_fflush_r+0xc>
 8006854:	4b05      	ldr	r3, [pc, #20]	; (800686c <_fflush_r+0x70>)
 8006856:	429c      	cmp	r4, r3
 8006858:	d101      	bne.n	800685e <_fflush_r+0x62>
 800685a:	68ac      	ldr	r4, [r5, #8]
 800685c:	e7df      	b.n	800681e <_fflush_r+0x22>
 800685e:	4b04      	ldr	r3, [pc, #16]	; (8006870 <_fflush_r+0x74>)
 8006860:	429c      	cmp	r4, r3
 8006862:	bf08      	it	eq
 8006864:	68ec      	ldreq	r4, [r5, #12]
 8006866:	e7da      	b.n	800681e <_fflush_r+0x22>
 8006868:	0800721c 	.word	0x0800721c
 800686c:	0800723c 	.word	0x0800723c
 8006870:	080071fc 	.word	0x080071fc

08006874 <fiprintf>:
 8006874:	b40e      	push	{r1, r2, r3}
 8006876:	b503      	push	{r0, r1, lr}
 8006878:	4601      	mov	r1, r0
 800687a:	ab03      	add	r3, sp, #12
 800687c:	4805      	ldr	r0, [pc, #20]	; (8006894 <fiprintf+0x20>)
 800687e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006882:	6800      	ldr	r0, [r0, #0]
 8006884:	9301      	str	r3, [sp, #4]
 8006886:	f7ff fcb3 	bl	80061f0 <_vfiprintf_r>
 800688a:	b002      	add	sp, #8
 800688c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006890:	b003      	add	sp, #12
 8006892:	4770      	bx	lr
 8006894:	20000020 	.word	0x20000020

08006898 <_lseek_r>:
 8006898:	b538      	push	{r3, r4, r5, lr}
 800689a:	4604      	mov	r4, r0
 800689c:	4608      	mov	r0, r1
 800689e:	4611      	mov	r1, r2
 80068a0:	2200      	movs	r2, #0
 80068a2:	4d05      	ldr	r5, [pc, #20]	; (80068b8 <_lseek_r+0x20>)
 80068a4:	602a      	str	r2, [r5, #0]
 80068a6:	461a      	mov	r2, r3
 80068a8:	f7fa fffe 	bl	80018a8 <_lseek>
 80068ac:	1c43      	adds	r3, r0, #1
 80068ae:	d102      	bne.n	80068b6 <_lseek_r+0x1e>
 80068b0:	682b      	ldr	r3, [r5, #0]
 80068b2:	b103      	cbz	r3, 80068b6 <_lseek_r+0x1e>
 80068b4:	6023      	str	r3, [r4, #0]
 80068b6:	bd38      	pop	{r3, r4, r5, pc}
 80068b8:	20000ee0 	.word	0x20000ee0

080068bc <__swhatbuf_r>:
 80068bc:	b570      	push	{r4, r5, r6, lr}
 80068be:	460e      	mov	r6, r1
 80068c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80068c4:	4614      	mov	r4, r2
 80068c6:	2900      	cmp	r1, #0
 80068c8:	461d      	mov	r5, r3
 80068ca:	b096      	sub	sp, #88	; 0x58
 80068cc:	da08      	bge.n	80068e0 <__swhatbuf_r+0x24>
 80068ce:	2200      	movs	r2, #0
 80068d0:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80068d4:	602a      	str	r2, [r5, #0]
 80068d6:	061a      	lsls	r2, r3, #24
 80068d8:	d410      	bmi.n	80068fc <__swhatbuf_r+0x40>
 80068da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80068de:	e00e      	b.n	80068fe <__swhatbuf_r+0x42>
 80068e0:	466a      	mov	r2, sp
 80068e2:	f000 f8df 	bl	8006aa4 <_fstat_r>
 80068e6:	2800      	cmp	r0, #0
 80068e8:	dbf1      	blt.n	80068ce <__swhatbuf_r+0x12>
 80068ea:	9a01      	ldr	r2, [sp, #4]
 80068ec:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80068f0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80068f4:	425a      	negs	r2, r3
 80068f6:	415a      	adcs	r2, r3
 80068f8:	602a      	str	r2, [r5, #0]
 80068fa:	e7ee      	b.n	80068da <__swhatbuf_r+0x1e>
 80068fc:	2340      	movs	r3, #64	; 0x40
 80068fe:	2000      	movs	r0, #0
 8006900:	6023      	str	r3, [r4, #0]
 8006902:	b016      	add	sp, #88	; 0x58
 8006904:	bd70      	pop	{r4, r5, r6, pc}
	...

08006908 <__smakebuf_r>:
 8006908:	898b      	ldrh	r3, [r1, #12]
 800690a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800690c:	079d      	lsls	r5, r3, #30
 800690e:	4606      	mov	r6, r0
 8006910:	460c      	mov	r4, r1
 8006912:	d507      	bpl.n	8006924 <__smakebuf_r+0x1c>
 8006914:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006918:	6023      	str	r3, [r4, #0]
 800691a:	6123      	str	r3, [r4, #16]
 800691c:	2301      	movs	r3, #1
 800691e:	6163      	str	r3, [r4, #20]
 8006920:	b002      	add	sp, #8
 8006922:	bd70      	pop	{r4, r5, r6, pc}
 8006924:	466a      	mov	r2, sp
 8006926:	ab01      	add	r3, sp, #4
 8006928:	f7ff ffc8 	bl	80068bc <__swhatbuf_r>
 800692c:	9900      	ldr	r1, [sp, #0]
 800692e:	4605      	mov	r5, r0
 8006930:	4630      	mov	r0, r6
 8006932:	f7ff fa65 	bl	8005e00 <_malloc_r>
 8006936:	b948      	cbnz	r0, 800694c <__smakebuf_r+0x44>
 8006938:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800693c:	059a      	lsls	r2, r3, #22
 800693e:	d4ef      	bmi.n	8006920 <__smakebuf_r+0x18>
 8006940:	f023 0303 	bic.w	r3, r3, #3
 8006944:	f043 0302 	orr.w	r3, r3, #2
 8006948:	81a3      	strh	r3, [r4, #12]
 800694a:	e7e3      	b.n	8006914 <__smakebuf_r+0xc>
 800694c:	4b0d      	ldr	r3, [pc, #52]	; (8006984 <__smakebuf_r+0x7c>)
 800694e:	62b3      	str	r3, [r6, #40]	; 0x28
 8006950:	89a3      	ldrh	r3, [r4, #12]
 8006952:	6020      	str	r0, [r4, #0]
 8006954:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006958:	81a3      	strh	r3, [r4, #12]
 800695a:	9b00      	ldr	r3, [sp, #0]
 800695c:	6120      	str	r0, [r4, #16]
 800695e:	6163      	str	r3, [r4, #20]
 8006960:	9b01      	ldr	r3, [sp, #4]
 8006962:	b15b      	cbz	r3, 800697c <__smakebuf_r+0x74>
 8006964:	4630      	mov	r0, r6
 8006966:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800696a:	f000 f8ad 	bl	8006ac8 <_isatty_r>
 800696e:	b128      	cbz	r0, 800697c <__smakebuf_r+0x74>
 8006970:	89a3      	ldrh	r3, [r4, #12]
 8006972:	f023 0303 	bic.w	r3, r3, #3
 8006976:	f043 0301 	orr.w	r3, r3, #1
 800697a:	81a3      	strh	r3, [r4, #12]
 800697c:	89a0      	ldrh	r0, [r4, #12]
 800697e:	4305      	orrs	r5, r0
 8006980:	81a5      	strh	r5, [r4, #12]
 8006982:	e7cd      	b.n	8006920 <__smakebuf_r+0x18>
 8006984:	08005425 	.word	0x08005425

08006988 <__ascii_mbtowc>:
 8006988:	b082      	sub	sp, #8
 800698a:	b901      	cbnz	r1, 800698e <__ascii_mbtowc+0x6>
 800698c:	a901      	add	r1, sp, #4
 800698e:	b142      	cbz	r2, 80069a2 <__ascii_mbtowc+0x1a>
 8006990:	b14b      	cbz	r3, 80069a6 <__ascii_mbtowc+0x1e>
 8006992:	7813      	ldrb	r3, [r2, #0]
 8006994:	600b      	str	r3, [r1, #0]
 8006996:	7812      	ldrb	r2, [r2, #0]
 8006998:	1e10      	subs	r0, r2, #0
 800699a:	bf18      	it	ne
 800699c:	2001      	movne	r0, #1
 800699e:	b002      	add	sp, #8
 80069a0:	4770      	bx	lr
 80069a2:	4610      	mov	r0, r2
 80069a4:	e7fb      	b.n	800699e <__ascii_mbtowc+0x16>
 80069a6:	f06f 0001 	mvn.w	r0, #1
 80069aa:	e7f8      	b.n	800699e <__ascii_mbtowc+0x16>

080069ac <memmove>:
 80069ac:	4288      	cmp	r0, r1
 80069ae:	b510      	push	{r4, lr}
 80069b0:	eb01 0402 	add.w	r4, r1, r2
 80069b4:	d902      	bls.n	80069bc <memmove+0x10>
 80069b6:	4284      	cmp	r4, r0
 80069b8:	4623      	mov	r3, r4
 80069ba:	d807      	bhi.n	80069cc <memmove+0x20>
 80069bc:	1e43      	subs	r3, r0, #1
 80069be:	42a1      	cmp	r1, r4
 80069c0:	d008      	beq.n	80069d4 <memmove+0x28>
 80069c2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80069c6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80069ca:	e7f8      	b.n	80069be <memmove+0x12>
 80069cc:	4601      	mov	r1, r0
 80069ce:	4402      	add	r2, r0
 80069d0:	428a      	cmp	r2, r1
 80069d2:	d100      	bne.n	80069d6 <memmove+0x2a>
 80069d4:	bd10      	pop	{r4, pc}
 80069d6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80069da:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80069de:	e7f7      	b.n	80069d0 <memmove+0x24>

080069e0 <__malloc_lock>:
 80069e0:	4801      	ldr	r0, [pc, #4]	; (80069e8 <__malloc_lock+0x8>)
 80069e2:	f7fe bdf6 	b.w	80055d2 <__retarget_lock_acquire_recursive>
 80069e6:	bf00      	nop
 80069e8:	20000ed4 	.word	0x20000ed4

080069ec <__malloc_unlock>:
 80069ec:	4801      	ldr	r0, [pc, #4]	; (80069f4 <__malloc_unlock+0x8>)
 80069ee:	f7fe bdf1 	b.w	80055d4 <__retarget_lock_release_recursive>
 80069f2:	bf00      	nop
 80069f4:	20000ed4 	.word	0x20000ed4

080069f8 <_realloc_r>:
 80069f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80069fc:	4680      	mov	r8, r0
 80069fe:	4614      	mov	r4, r2
 8006a00:	460e      	mov	r6, r1
 8006a02:	b921      	cbnz	r1, 8006a0e <_realloc_r+0x16>
 8006a04:	4611      	mov	r1, r2
 8006a06:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006a0a:	f7ff b9f9 	b.w	8005e00 <_malloc_r>
 8006a0e:	b92a      	cbnz	r2, 8006a1c <_realloc_r+0x24>
 8006a10:	f7ff f98e 	bl	8005d30 <_free_r>
 8006a14:	4625      	mov	r5, r4
 8006a16:	4628      	mov	r0, r5
 8006a18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006a1c:	f000 f864 	bl	8006ae8 <_malloc_usable_size_r>
 8006a20:	4284      	cmp	r4, r0
 8006a22:	4607      	mov	r7, r0
 8006a24:	d802      	bhi.n	8006a2c <_realloc_r+0x34>
 8006a26:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006a2a:	d812      	bhi.n	8006a52 <_realloc_r+0x5a>
 8006a2c:	4621      	mov	r1, r4
 8006a2e:	4640      	mov	r0, r8
 8006a30:	f7ff f9e6 	bl	8005e00 <_malloc_r>
 8006a34:	4605      	mov	r5, r0
 8006a36:	2800      	cmp	r0, #0
 8006a38:	d0ed      	beq.n	8006a16 <_realloc_r+0x1e>
 8006a3a:	42bc      	cmp	r4, r7
 8006a3c:	4622      	mov	r2, r4
 8006a3e:	4631      	mov	r1, r6
 8006a40:	bf28      	it	cs
 8006a42:	463a      	movcs	r2, r7
 8006a44:	f7fd f98c 	bl	8003d60 <memcpy>
 8006a48:	4631      	mov	r1, r6
 8006a4a:	4640      	mov	r0, r8
 8006a4c:	f7ff f970 	bl	8005d30 <_free_r>
 8006a50:	e7e1      	b.n	8006a16 <_realloc_r+0x1e>
 8006a52:	4635      	mov	r5, r6
 8006a54:	e7df      	b.n	8006a16 <_realloc_r+0x1e>
	...

08006a58 <_read_r>:
 8006a58:	b538      	push	{r3, r4, r5, lr}
 8006a5a:	4604      	mov	r4, r0
 8006a5c:	4608      	mov	r0, r1
 8006a5e:	4611      	mov	r1, r2
 8006a60:	2200      	movs	r2, #0
 8006a62:	4d05      	ldr	r5, [pc, #20]	; (8006a78 <_read_r+0x20>)
 8006a64:	602a      	str	r2, [r5, #0]
 8006a66:	461a      	mov	r2, r3
 8006a68:	f7fa ff04 	bl	8001874 <_read>
 8006a6c:	1c43      	adds	r3, r0, #1
 8006a6e:	d102      	bne.n	8006a76 <_read_r+0x1e>
 8006a70:	682b      	ldr	r3, [r5, #0]
 8006a72:	b103      	cbz	r3, 8006a76 <_read_r+0x1e>
 8006a74:	6023      	str	r3, [r4, #0]
 8006a76:	bd38      	pop	{r3, r4, r5, pc}
 8006a78:	20000ee0 	.word	0x20000ee0

08006a7c <__ascii_wctomb>:
 8006a7c:	4603      	mov	r3, r0
 8006a7e:	4608      	mov	r0, r1
 8006a80:	b141      	cbz	r1, 8006a94 <__ascii_wctomb+0x18>
 8006a82:	2aff      	cmp	r2, #255	; 0xff
 8006a84:	d904      	bls.n	8006a90 <__ascii_wctomb+0x14>
 8006a86:	228a      	movs	r2, #138	; 0x8a
 8006a88:	f04f 30ff 	mov.w	r0, #4294967295
 8006a8c:	601a      	str	r2, [r3, #0]
 8006a8e:	4770      	bx	lr
 8006a90:	2001      	movs	r0, #1
 8006a92:	700a      	strb	r2, [r1, #0]
 8006a94:	4770      	bx	lr

08006a96 <abort>:
 8006a96:	2006      	movs	r0, #6
 8006a98:	b508      	push	{r3, lr}
 8006a9a:	f000 f855 	bl	8006b48 <raise>
 8006a9e:	2001      	movs	r0, #1
 8006aa0:	f7fa fee2 	bl	8001868 <_exit>

08006aa4 <_fstat_r>:
 8006aa4:	b538      	push	{r3, r4, r5, lr}
 8006aa6:	2300      	movs	r3, #0
 8006aa8:	4d06      	ldr	r5, [pc, #24]	; (8006ac4 <_fstat_r+0x20>)
 8006aaa:	4604      	mov	r4, r0
 8006aac:	4608      	mov	r0, r1
 8006aae:	4611      	mov	r1, r2
 8006ab0:	602b      	str	r3, [r5, #0]
 8006ab2:	f7fa fef1 	bl	8001898 <_fstat>
 8006ab6:	1c43      	adds	r3, r0, #1
 8006ab8:	d102      	bne.n	8006ac0 <_fstat_r+0x1c>
 8006aba:	682b      	ldr	r3, [r5, #0]
 8006abc:	b103      	cbz	r3, 8006ac0 <_fstat_r+0x1c>
 8006abe:	6023      	str	r3, [r4, #0]
 8006ac0:	bd38      	pop	{r3, r4, r5, pc}
 8006ac2:	bf00      	nop
 8006ac4:	20000ee0 	.word	0x20000ee0

08006ac8 <_isatty_r>:
 8006ac8:	b538      	push	{r3, r4, r5, lr}
 8006aca:	2300      	movs	r3, #0
 8006acc:	4d05      	ldr	r5, [pc, #20]	; (8006ae4 <_isatty_r+0x1c>)
 8006ace:	4604      	mov	r4, r0
 8006ad0:	4608      	mov	r0, r1
 8006ad2:	602b      	str	r3, [r5, #0]
 8006ad4:	f7fa fee6 	bl	80018a4 <_isatty>
 8006ad8:	1c43      	adds	r3, r0, #1
 8006ada:	d102      	bne.n	8006ae2 <_isatty_r+0x1a>
 8006adc:	682b      	ldr	r3, [r5, #0]
 8006ade:	b103      	cbz	r3, 8006ae2 <_isatty_r+0x1a>
 8006ae0:	6023      	str	r3, [r4, #0]
 8006ae2:	bd38      	pop	{r3, r4, r5, pc}
 8006ae4:	20000ee0 	.word	0x20000ee0

08006ae8 <_malloc_usable_size_r>:
 8006ae8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006aec:	1f18      	subs	r0, r3, #4
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	bfbc      	itt	lt
 8006af2:	580b      	ldrlt	r3, [r1, r0]
 8006af4:	18c0      	addlt	r0, r0, r3
 8006af6:	4770      	bx	lr

08006af8 <_raise_r>:
 8006af8:	291f      	cmp	r1, #31
 8006afa:	b538      	push	{r3, r4, r5, lr}
 8006afc:	4604      	mov	r4, r0
 8006afe:	460d      	mov	r5, r1
 8006b00:	d904      	bls.n	8006b0c <_raise_r+0x14>
 8006b02:	2316      	movs	r3, #22
 8006b04:	6003      	str	r3, [r0, #0]
 8006b06:	f04f 30ff 	mov.w	r0, #4294967295
 8006b0a:	bd38      	pop	{r3, r4, r5, pc}
 8006b0c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8006b0e:	b112      	cbz	r2, 8006b16 <_raise_r+0x1e>
 8006b10:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006b14:	b94b      	cbnz	r3, 8006b2a <_raise_r+0x32>
 8006b16:	4620      	mov	r0, r4
 8006b18:	f000 f830 	bl	8006b7c <_getpid_r>
 8006b1c:	462a      	mov	r2, r5
 8006b1e:	4601      	mov	r1, r0
 8006b20:	4620      	mov	r0, r4
 8006b22:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006b26:	f000 b817 	b.w	8006b58 <_kill_r>
 8006b2a:	2b01      	cmp	r3, #1
 8006b2c:	d00a      	beq.n	8006b44 <_raise_r+0x4c>
 8006b2e:	1c59      	adds	r1, r3, #1
 8006b30:	d103      	bne.n	8006b3a <_raise_r+0x42>
 8006b32:	2316      	movs	r3, #22
 8006b34:	6003      	str	r3, [r0, #0]
 8006b36:	2001      	movs	r0, #1
 8006b38:	e7e7      	b.n	8006b0a <_raise_r+0x12>
 8006b3a:	2400      	movs	r4, #0
 8006b3c:	4628      	mov	r0, r5
 8006b3e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006b42:	4798      	blx	r3
 8006b44:	2000      	movs	r0, #0
 8006b46:	e7e0      	b.n	8006b0a <_raise_r+0x12>

08006b48 <raise>:
 8006b48:	4b02      	ldr	r3, [pc, #8]	; (8006b54 <raise+0xc>)
 8006b4a:	4601      	mov	r1, r0
 8006b4c:	6818      	ldr	r0, [r3, #0]
 8006b4e:	f7ff bfd3 	b.w	8006af8 <_raise_r>
 8006b52:	bf00      	nop
 8006b54:	20000020 	.word	0x20000020

08006b58 <_kill_r>:
 8006b58:	b538      	push	{r3, r4, r5, lr}
 8006b5a:	2300      	movs	r3, #0
 8006b5c:	4d06      	ldr	r5, [pc, #24]	; (8006b78 <_kill_r+0x20>)
 8006b5e:	4604      	mov	r4, r0
 8006b60:	4608      	mov	r0, r1
 8006b62:	4611      	mov	r1, r2
 8006b64:	602b      	str	r3, [r5, #0]
 8006b66:	f7fa fe75 	bl	8001854 <_kill>
 8006b6a:	1c43      	adds	r3, r0, #1
 8006b6c:	d102      	bne.n	8006b74 <_kill_r+0x1c>
 8006b6e:	682b      	ldr	r3, [r5, #0]
 8006b70:	b103      	cbz	r3, 8006b74 <_kill_r+0x1c>
 8006b72:	6023      	str	r3, [r4, #0]
 8006b74:	bd38      	pop	{r3, r4, r5, pc}
 8006b76:	bf00      	nop
 8006b78:	20000ee0 	.word	0x20000ee0

08006b7c <_getpid_r>:
 8006b7c:	f7fa be68 	b.w	8001850 <_getpid>

08006b80 <_init>:
 8006b80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b82:	bf00      	nop
 8006b84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b86:	bc08      	pop	{r3}
 8006b88:	469e      	mov	lr, r3
 8006b8a:	4770      	bx	lr

08006b8c <_fini>:
 8006b8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b8e:	bf00      	nop
 8006b90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b92:	bc08      	pop	{r3}
 8006b94:	469e      	mov	lr, r3
 8006b96:	4770      	bx	lr
