
Black_box.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000064f8  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000094c  08006608  08006608  00016608  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006f54  08006f54  000201e4  2**0
                  CONTENTS
  4 .ARM          00000000  08006f54  08006f54  000201e4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006f54  08006f54  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006f54  08006f54  00016f54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006f58  08006f58  00016f58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  08006f5c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000ce0  200001e4  08007140  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000ec4  08007140  00020ec4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015d63  00000000  00000000  0002020d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000036b7  00000000  00000000  00035f70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    0000d221  00000000  00000000  00039627  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f18  00000000  00000000  00046848  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001728  00000000  00000000  00047760  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001a42a  00000000  00000000  00048e88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00017779  00000000  00000000  000632b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000950ac  00000000  00000000  0007aa2b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0010fad7  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003f90  00000000  00000000  0010fb28  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e4 	.word	0x200001e4
 800012c:	00000000 	.word	0x00000000
 8000130:	080065f0 	.word	0x080065f0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e8 	.word	0x200001e8
 800014c:	080065f0 	.word	0x080065f0

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <RingBuf_Clear>:
 *
 * @param[in] rb #RINGBUF_t structure instance
 * @return #RINGBUF_STATUS enum
 */
RINGBUF_STATUS RingBuf_Clear(RINGBUF_t *rb) {
    if (rb->buf == NULL) return RINGBUF_PARAM_ERR;
 8000a88:	6802      	ldr	r2, [r0, #0]
RINGBUF_STATUS RingBuf_Clear(RINGBUF_t *rb) {
 8000a8a:	4603      	mov	r3, r0
    if (rb->buf == NULL) return RINGBUF_PARAM_ERR;
 8000a8c:	b11a      	cbz	r2, 8000a96 <RingBuf_Clear+0xe>
    rb->head = rb->tail = 0;
 8000a8e:	2000      	movs	r0, #0
 8000a90:	6058      	str	r0, [r3, #4]
 8000a92:	6098      	str	r0, [r3, #8]
    return RINGBUF_OK;
 8000a94:	4770      	bx	lr
    if (rb->buf == NULL) return RINGBUF_PARAM_ERR;
 8000a96:	2002      	movs	r0, #2
}
 8000a98:	4770      	bx	lr

08000a9a <RingBuf_Init>:
RINGBUF_STATUS RingBuf_Init(void *buf, u16_t size, size_t cellsize, RINGBUF_t *rb) {
 8000a9a:	b510      	push	{r4, lr}
 8000a9c:	461c      	mov	r4, r3
    rb->size = size; // size of array
 8000a9e:	60d9      	str	r1, [r3, #12]
    rb->buf = buf;      // set pointer to buffer
 8000aa0:	6018      	str	r0, [r3, #0]
    rb->cell_size = cellsize; // size of 1 cell of array
 8000aa2:	611a      	str	r2, [r3, #16]
    RingBuf_Clear(rb); // clear all
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	f7ff ffef 	bl	8000a88 <RingBuf_Clear>
    return rb->buf ? RINGBUF_OK : RINGBUF_PARAM_ERR;
 8000aaa:	6823      	ldr	r3, [r4, #0]
 8000aac:	2b00      	cmp	r3, #0
}
 8000aae:	bf0c      	ite	eq
 8000ab0:	2002      	moveq	r0, #2
 8000ab2:	2000      	movne	r0, #0
 8000ab4:	bd10      	pop	{r4, pc}

08000ab6 <RingBuf_Available>:
 * @param[out] len Size to read [bytes]
 * @param[in] rb #RINGBUF_t structure instance
 * @return #RINGBUF_STATUS enum
 */
RINGBUF_STATUS RingBuf_Available(u16_t *len, RINGBUF_t *rb) {
    if (rb->buf == NULL) return RINGBUF_PARAM_ERR;
 8000ab6:	680b      	ldr	r3, [r1, #0]
 8000ab8:	b173      	cbz	r3, 8000ad8 <RingBuf_Available+0x22>
    if (rb->head < rb->tail)
 8000aba:	688a      	ldr	r2, [r1, #8]
 8000abc:	684b      	ldr	r3, [r1, #4]
 8000abe:	429a      	cmp	r2, r3
        *len = rb->size - rb->tail + rb->head;
 8000ac0:	bf3d      	ittte	cc
 8000ac2:	68cb      	ldrcc	r3, [r1, #12]
 8000ac4:	684a      	ldrcc	r2, [r1, #4]
 8000ac6:	6889      	ldrcc	r1, [r1, #8]
    else
        *len = rb->head - rb->tail;
 8000ac8:	688b      	ldrcs	r3, [r1, #8]
 8000aca:	bf2c      	ite	cs
 8000acc:	684a      	ldrcs	r2, [r1, #4]
        *len = rb->size - rb->tail + rb->head;
 8000ace:	185b      	addcc	r3, r3, r1
        *len = rb->head - rb->tail;
 8000ad0:	1a9b      	subs	r3, r3, r2
 8000ad2:	8003      	strh	r3, [r0, #0]
    return RINGBUF_OK;
 8000ad4:	2000      	movs	r0, #0
 8000ad6:	4770      	bx	lr
    if (rb->buf == NULL) return RINGBUF_PARAM_ERR;
 8000ad8:	2002      	movs	r0, #2
}
 8000ada:	4770      	bx	lr

08000adc <RingBuf_BytePut>:
 * @param[in] data Data byte to be put [bytes]
 * @param[in] rb #RINGBUF_t structure instance
 * @return #RINGBUF_STATUS enum
 */
RINGBUF_STATUS RingBuf_BytePut(const u8_t data, RINGBUF_t *rb) {
    if (rb->buf == NULL) return RINGBUF_PARAM_ERR;
 8000adc:	680a      	ldr	r2, [r1, #0]
RINGBUF_STATUS RingBuf_BytePut(const u8_t data, RINGBUF_t *rb) {
 8000ade:	b510      	push	{r4, lr}
    if (rb->buf == NULL) return RINGBUF_PARAM_ERR;
 8000ae0:	b152      	cbz	r2, 8000af8 <RingBuf_BytePut+0x1c>
    rb->buf[rb->head++] = data; // put byte in cell and increment data
 8000ae2:	688b      	ldr	r3, [r1, #8]
 8000ae4:	1c5c      	adds	r4, r3, #1
 8000ae6:	608c      	str	r4, [r1, #8]
 8000ae8:	54d0      	strb	r0, [r2, r3]
    if (rb->head >= rb->size) // if overflow
 8000aea:	688a      	ldr	r2, [r1, #8]
 8000aec:	68cb      	ldr	r3, [r1, #12]
 8000aee:	2000      	movs	r0, #0
 8000af0:	429a      	cmp	r2, r3
 8000af2:	d300      	bcc.n	8000af6 <RingBuf_BytePut+0x1a>
        rb->head = 0;   // set to start
 8000af4:	6088      	str	r0, [r1, #8]
    return RINGBUF_OK;
}
 8000af6:	bd10      	pop	{r4, pc}
    if (rb->buf == NULL) return RINGBUF_PARAM_ERR;
 8000af8:	2002      	movs	r0, #2
 8000afa:	e7fc      	b.n	8000af6 <RingBuf_BytePut+0x1a>

08000afc <RingBuf_DataWatch>:
 * @param[out] data Data from buffer
 * @param[in] len Length of data to be read [bytes]
 * @param[in] rb #RINGBUF_t structure instance
 * @return #RINGBUF_STATUS enum
 */
RINGBUF_STATUS RingBuf_DataWatch(void *data, u16_t len, RINGBUF_t *rb) {
 8000afc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000b00:	4688      	mov	r8, r1
 8000b02:	4614      	mov	r4, r2
    if (data == NULL)
 8000b04:	4607      	mov	r7, r0
 8000b06:	2800      	cmp	r0, #0
 8000b08:	d031      	beq.n	8000b6e <RingBuf_DataWatch+0x72>
        return RINGBUF_PARAM_ERR;
    if (len > rb->size)
 8000b0a:	68d3      	ldr	r3, [r2, #12]
 8000b0c:	4299      	cmp	r1, r3
 8000b0e:	d830      	bhi.n	8000b72 <RingBuf_DataWatch+0x76>
        return RINGBUF_OVERFLOW;
    // OUTPUT data index start address
    u16_t s_addr = 0;
    // available space in the end of buffer
    u16_t space = rb->size - rb->tail;
 8000b10:	68d1      	ldr	r1, [r2, #12]
 8000b12:	6855      	ldr	r5, [r2, #4]
 8000b14:	fa1f f981 	uxth.w	r9, r1
 8000b18:	b2ad      	uxth	r5, r5
 8000b1a:	eba9 0605 	sub.w	r6, r9, r5
 8000b1e:	b2b6      	uxth	r6, r6
    u16_t loc_tail = rb->tail;
    if (len > space) { // if len > available space
 8000b20:	45b0      	cmp	r8, r6
    u16_t loc_tail = rb->tail;
 8000b22:	6853      	ldr	r3, [r2, #4]
    if (len > space) { // if len > available space
 8000b24:	d810      	bhi.n	8000b48 <RingBuf_DataWatch+0x4c>
    u16_t s_addr = 0;
 8000b26:	2600      	movs	r6, #0
    u16_t loc_tail = rb->tail;
 8000b28:	b29b      	uxth	r3, r3
        s_addr = space;
        // new length - len-space
        len -= space;
    }
    // copy all the data from the buf storage
    memcpy(&data[s_addr * rb->cell_size], &rb->buf[loc_tail * rb->cell_size], len * rb->cell_size);
 8000b2a:	6920      	ldr	r0, [r4, #16]
 8000b2c:	6821      	ldr	r1, [r4, #0]
 8000b2e:	6925      	ldr	r5, [r4, #16]
 8000b30:	6922      	ldr	r2, [r4, #16]
 8000b32:	fb05 1103 	mla	r1, r5, r3, r1
 8000b36:	fb02 f208 	mul.w	r2, r2, r8
 8000b3a:	fb00 7006 	mla	r0, r0, r6, r7
 8000b3e:	f002 fe47 	bl	80037d0 <memcpy>
 8000b42:	2000      	movs	r0, #0
    return RINGBUF_OK;
}
 8000b44:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        memcpy(&data[s_addr * rb->cell_size], &rb->buf[loc_tail * rb->cell_size], space * rb->cell_size);
 8000b48:	6922      	ldr	r2, [r4, #16]
 8000b4a:	f8d4 c000 	ldr.w	ip, [r4]
 8000b4e:	6921      	ldr	r1, [r4, #16]
 8000b50:	6922      	ldr	r2, [r4, #16]
 8000b52:	b29b      	uxth	r3, r3
 8000b54:	fb01 c103 	mla	r1, r1, r3, ip
 8000b58:	4372      	muls	r2, r6
 8000b5a:	f002 fe39 	bl	80037d0 <memcpy>
        len -= space;
 8000b5e:	eb08 0105 	add.w	r1, r8, r5
 8000b62:	eba1 0109 	sub.w	r1, r1, r9
        loc_tail = 0;
 8000b66:	2300      	movs	r3, #0
        len -= space;
 8000b68:	fa1f f881 	uxth.w	r8, r1
 8000b6c:	e7dd      	b.n	8000b2a <RingBuf_DataWatch+0x2e>
        return RINGBUF_PARAM_ERR;
 8000b6e:	2002      	movs	r0, #2
 8000b70:	e7e8      	b.n	8000b44 <RingBuf_DataWatch+0x48>
        return RINGBUF_OVERFLOW;
 8000b72:	2003      	movs	r0, #3
 8000b74:	e7e6      	b.n	8000b44 <RingBuf_DataWatch+0x48>

08000b76 <RingBuf_DataRead>:
RINGBUF_STATUS RingBuf_DataRead(void *data, u16_t len, RINGBUF_t *rb) {
 8000b76:	b538      	push	{r3, r4, r5, lr}
    if (rb->buf == NULL) return RINGBUF_PARAM_ERR;
 8000b78:	6813      	ldr	r3, [r2, #0]
RINGBUF_STATUS RingBuf_DataRead(void *data, u16_t len, RINGBUF_t *rb) {
 8000b7a:	460d      	mov	r5, r1
 8000b7c:	4614      	mov	r4, r2
    if (rb->buf == NULL) return RINGBUF_PARAM_ERR;
 8000b7e:	b15b      	cbz	r3, 8000b98 <RingBuf_DataRead+0x22>
    RINGBUF_STATUS st = RingBuf_DataWatch(data, len, rb);
 8000b80:	f7ff ffbc 	bl	8000afc <RingBuf_DataWatch>
    if (st != RINGBUF_OK)
 8000b84:	b938      	cbnz	r0, 8000b96 <RingBuf_DataRead+0x20>
    rb->tail += len;
 8000b86:	6861      	ldr	r1, [r4, #4]
 8000b88:	440d      	add	r5, r1
 8000b8a:	6065      	str	r5, [r4, #4]
    if (rb->tail >= rb->size)
 8000b8c:	6862      	ldr	r2, [r4, #4]
 8000b8e:	68e3      	ldr	r3, [r4, #12]
 8000b90:	429a      	cmp	r2, r3
 8000b92:	d300      	bcc.n	8000b96 <RingBuf_DataRead+0x20>
        rb->tail = 0;
 8000b94:	6060      	str	r0, [r4, #4]
}
 8000b96:	bd38      	pop	{r3, r4, r5, pc}
    if (rb->buf == NULL) return RINGBUF_PARAM_ERR;
 8000b98:	2002      	movs	r0, #2
 8000b9a:	e7fc      	b.n	8000b96 <RingBuf_DataRead+0x20>

08000b9c <lcd_sendcommands>:
  lcd_bufupload();
  DISP_INIT_SEND_DAT;
}

void lcd_sendcommands(uint8_t* data, uint8_t N)
{
 8000b9c:	b570      	push	{r4, r5, r6, lr}
 8000b9e:	4604      	mov	r4, r0
 8000ba0:	460d      	mov	r5, r1
  DISP_INIT_SEND_COM;
 8000ba2:	4e09      	ldr	r6, [pc, #36]	; (8000bc8 <lcd_sendcommands+0x2c>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	4630      	mov	r0, r6
 8000ba8:	2102      	movs	r1, #2
 8000baa:	f001 fb13 	bl	80021d4 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi2, data, N, 10);
 8000bae:	462a      	mov	r2, r5
 8000bb0:	4621      	mov	r1, r4
 8000bb2:	230a      	movs	r3, #10
 8000bb4:	4805      	ldr	r0, [pc, #20]	; (8000bcc <lcd_sendcommands+0x30>)
 8000bb6:	f002 f90f 	bl	8002dd8 <HAL_SPI_Transmit>
  DISP_INIT_SEND_DAT;
 8000bba:	4630      	mov	r0, r6
}
 8000bbc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  DISP_INIT_SEND_DAT;
 8000bc0:	2201      	movs	r2, #1
 8000bc2:	2102      	movs	r1, #2
 8000bc4:	f001 bb06 	b.w	80021d4 <HAL_GPIO_WritePin>
 8000bc8:	40010800 	.word	0x40010800
 8000bcc:	200006ec 	.word	0x200006ec

08000bd0 <lcd_bufupload>:

void lcd_bufupload(void)
{
 8000bd0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8000bd4:	24b0      	movs	r4, #176	; 0xb0
  for(uint8_t j = 0; j < 8; j++)
  {
	uint8_t tmp_arr[] = {(0xB0 + j), 0x10, 0x00};
 8000bd6:	f04f 0810 	mov.w	r8, #16
 8000bda:	2700      	movs	r7, #0
 8000bdc:	4d0d      	ldr	r5, [pc, #52]	; (8000c14 <lcd_bufupload+0x44>)
    lcd_sendcommands(tmp_arr, 3);
    HAL_SPI_Transmit(&hspi2, dispbuffer[j], 128, 10);
 8000bde:	4e0e      	ldr	r6, [pc, #56]	; (8000c18 <lcd_bufupload+0x48>)
    lcd_sendcommands(tmp_arr, 3);
 8000be0:	2103      	movs	r1, #3
	uint8_t tmp_arr[] = {(0xB0 + j), 0x10, 0x00};
 8000be2:	f88d 4004 	strb.w	r4, [sp, #4]
    lcd_sendcommands(tmp_arr, 3);
 8000be6:	a801      	add	r0, sp, #4
  for(uint8_t j = 0; j < 8; j++)
 8000be8:	3401      	adds	r4, #1
	uint8_t tmp_arr[] = {(0xB0 + j), 0x10, 0x00};
 8000bea:	f88d 8005 	strb.w	r8, [sp, #5]
 8000bee:	f88d 7006 	strb.w	r7, [sp, #6]
  for(uint8_t j = 0; j < 8; j++)
 8000bf2:	b2e4      	uxtb	r4, r4
    lcd_sendcommands(tmp_arr, 3);
 8000bf4:	f7ff ffd2 	bl	8000b9c <lcd_sendcommands>
    HAL_SPI_Transmit(&hspi2, dispbuffer[j], 128, 10);
 8000bf8:	4629      	mov	r1, r5
 8000bfa:	230a      	movs	r3, #10
 8000bfc:	2280      	movs	r2, #128	; 0x80
 8000bfe:	4630      	mov	r0, r6
 8000c00:	f002 f8ea 	bl	8002dd8 <HAL_SPI_Transmit>
  for(uint8_t j = 0; j < 8; j++)
 8000c04:	2cb8      	cmp	r4, #184	; 0xb8
 8000c06:	f105 0580 	add.w	r5, r5, #128	; 0x80
 8000c0a:	d1e9      	bne.n	8000be0 <lcd_bufupload+0x10>
  }
}
 8000c0c:	b002      	add	sp, #8
 8000c0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000c12:	bf00      	nop
 8000c14:	20000200 	.word	0x20000200
 8000c18:	200006ec 	.word	0x200006ec

08000c1c <lcd_bufwsmb8x5>:


/******************************************/
void lcd_bufwsmb8x5(const uint8_t ch, uint8_t pg, uint8_t cl)
{
 8000c1c:	b5f0      	push	{r4, r5, r6, r7, lr}
	for(uint8_t i = 0; i < 5; i++)
	  {
	    dispbuffer[pg][cl + i] = char_8x5[ch][i];
 8000c1e:	4d09      	ldr	r5, [pc, #36]	; (8000c44 <lcd_bufwsmb8x5+0x28>)
 8000c20:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8000c24:	4b08      	ldr	r3, [pc, #32]	; (8000c48 <lcd_bufwsmb8x5+0x2c>)
 8000c26:	182f      	adds	r7, r5, r0
 8000c28:	5828      	ldr	r0, [r5, r0]
 8000c2a:	eb02 14c1 	add.w	r4, r2, r1, lsl #7
 8000c2e:	5118      	str	r0, [r3, r4]
 8000c30:	191e      	adds	r6, r3, r4
	  }
	cl = cl+5;
	dispbuffer[pg][cl] = 0x00;
 8000c32:	eb03 13c1 	add.w	r3, r3, r1, lsl #7
 8000c36:	2100      	movs	r1, #0
	    dispbuffer[pg][cl + i] = char_8x5[ch][i];
 8000c38:	7938      	ldrb	r0, [r7, #4]
	cl = cl+5;
 8000c3a:	3205      	adds	r2, #5
	dispbuffer[pg][cl] = 0x00;
 8000c3c:	b2d2      	uxtb	r2, r2
	    dispbuffer[pg][cl + i] = char_8x5[ch][i];
 8000c3e:	7130      	strb	r0, [r6, #4]
	dispbuffer[pg][cl] = 0x00;
 8000c40:	5499      	strb	r1, [r3, r2]
	cl++;
}
 8000c42:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c44:	08006615 	.word	0x08006615
 8000c48:	20000200 	.word	0x20000200

08000c4c <lcd_bufwstr8x5>:

uint8_t lcd_bufwstr8x5(uint8_t *str, uint8_t pg, uint8_t cl, uint8_t newline_fl)
{
 8000c4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if(str == NULL) str = str_null;
 8000c50:	4f12      	ldr	r7, [pc, #72]	; (8000c9c <lcd_bufwstr8x5+0x50>)
{
 8000c52:	4689      	mov	r9, r1
 8000c54:	4614      	mov	r4, r2
 8000c56:	4698      	mov	r8, r3
  if(str == NULL) str = str_null;
 8000c58:	2800      	cmp	r0, #0
 8000c5a:	bf18      	it	ne
 8000c5c:	4607      	movne	r7, r0
  uint8_t i = 0;
  while(str[i])
 8000c5e:	2600      	movs	r6, #0
 8000c60:	b2f5      	uxtb	r5, r6
 8000c62:	5d78      	ldrb	r0, [r7, r5]
 8000c64:	b910      	cbnz	r0, 8000c6c <lcd_bufwstr8x5+0x20>
    }
    if(pg > 7) return 0;
    i++;
  }
  return i;
}
 8000c66:	4628      	mov	r0, r5
 8000c68:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	lcd_bufwsmb8x5(str[i], pg, cl);
 8000c6c:	4622      	mov	r2, r4
    cl += 6;
 8000c6e:	3406      	adds	r4, #6
	lcd_bufwsmb8x5(str[i], pg, cl);
 8000c70:	4649      	mov	r1, r9
    cl += 6;
 8000c72:	b2e4      	uxtb	r4, r4
	lcd_bufwsmb8x5(str[i], pg, cl);
 8000c74:	f7ff ffd2 	bl	8000c1c <lcd_bufwsmb8x5>
    if(cl > 122)
 8000c78:	2c7a      	cmp	r4, #122	; 0x7a
 8000c7a:	d907      	bls.n	8000c8c <lcd_bufwstr8x5+0x40>
      if(newline_fl)
 8000c7c:	f1b8 0f00 	cmp.w	r8, #0
 8000c80:	d0f1      	beq.n	8000c66 <lcd_bufwstr8x5+0x1a>
        cl = 0;
 8000c82:	2400      	movs	r4, #0
        pg++;
 8000c84:	f109 0101 	add.w	r1, r9, #1
 8000c88:	fa5f f981 	uxtb.w	r9, r1
    if(pg > 7) return 0;
 8000c8c:	f1b9 0f07 	cmp.w	r9, #7
 8000c90:	f106 0601 	add.w	r6, r6, #1
 8000c94:	d9e4      	bls.n	8000c60 <lcd_bufwstr8x5+0x14>
 8000c96:	2500      	movs	r5, #0
 8000c98:	e7e5      	b.n	8000c66 <lcd_bufwstr8x5+0x1a>
 8000c9a:	bf00      	nop
 8000c9c:	20000000 	.word	0x20000000

08000ca0 <lcd_buferase>:
}

void lcd_buferase(void)
{
  for(uint8_t j = 0; j < 8; j++)
    for(uint8_t i = 0; i < 128; i++) dispbuffer[j][i] = 0;
 8000ca0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000ca4:	2100      	movs	r1, #0
 8000ca6:	4801      	ldr	r0, [pc, #4]	; (8000cac <lcd_buferase+0xc>)
 8000ca8:	f002 bda0 	b.w	80037ec <memset>
 8000cac:	20000200 	.word	0x20000200

08000cb0 <lcd_init>:
{
 8000cb0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  DISP_RESET_OFF;
 8000cb2:	2201      	movs	r2, #1
 8000cb4:	2104      	movs	r1, #4
 8000cb6:	481f      	ldr	r0, [pc, #124]	; (8000d34 <lcd_init+0x84>)
 8000cb8:	f001 fa8c 	bl	80021d4 <HAL_GPIO_WritePin>
  DISP_INIT_SEND_DAT;
 8000cbc:	2201      	movs	r2, #1
 8000cbe:	2102      	movs	r1, #2
 8000cc0:	481c      	ldr	r0, [pc, #112]	; (8000d34 <lcd_init+0x84>)
 8000cc2:	f001 fa87 	bl	80021d4 <HAL_GPIO_WritePin>
  HAL_Delay(2);
 8000cc6:	2002      	movs	r0, #2
 8000cc8:	f000 fdaa 	bl	8001820 <HAL_Delay>
  DISP_RESET_ON;
 8000ccc:	2200      	movs	r2, #0
 8000cce:	2104      	movs	r1, #4
 8000cd0:	4818      	ldr	r0, [pc, #96]	; (8000d34 <lcd_init+0x84>)
 8000cd2:	f001 fa7f 	bl	80021d4 <HAL_GPIO_WritePin>
  HAL_Delay(2);
 8000cd6:	2002      	movs	r0, #2
 8000cd8:	f000 fda2 	bl	8001820 <HAL_Delay>
  DISP_RESET_OFF;
 8000cdc:	2201      	movs	r2, #1
 8000cde:	2104      	movs	r1, #4
 8000ce0:	4814      	ldr	r0, [pc, #80]	; (8000d34 <lcd_init+0x84>)
 8000ce2:	f001 fa77 	bl	80021d4 <HAL_GPIO_WritePin>
  DISP_INIT_SEND_COM;
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	2102      	movs	r1, #2
 8000cea:	4812      	ldr	r0, [pc, #72]	; (8000d34 <lcd_init+0x84>)
 8000cec:	f001 fa72 	bl	80021d4 <HAL_GPIO_WritePin>
  uint8_t init_data_array[13] = {
 8000cf0:	466a      	mov	r2, sp
 8000cf2:	4615      	mov	r5, r2
 8000cf4:	4b10      	ldr	r3, [pc, #64]	; (8000d38 <lcd_init+0x88>)
 8000cf6:	f103 0608 	add.w	r6, r3, #8
 8000cfa:	4614      	mov	r4, r2
 8000cfc:	6818      	ldr	r0, [r3, #0]
 8000cfe:	6859      	ldr	r1, [r3, #4]
 8000d00:	3308      	adds	r3, #8
 8000d02:	c403      	stmia	r4!, {r0, r1}
 8000d04:	42b3      	cmp	r3, r6
 8000d06:	4622      	mov	r2, r4
 8000d08:	d1f7      	bne.n	8000cfa <lcd_init+0x4a>
 8000d0a:	6818      	ldr	r0, [r3, #0]
 8000d0c:	791b      	ldrb	r3, [r3, #4]
  HAL_SPI_Transmit(&hspi2, init_data_array, 13, 20);
 8000d0e:	4629      	mov	r1, r5
 8000d10:	220d      	movs	r2, #13
  uint8_t init_data_array[13] = {
 8000d12:	6020      	str	r0, [r4, #0]
 8000d14:	7123      	strb	r3, [r4, #4]
  HAL_SPI_Transmit(&hspi2, init_data_array, 13, 20);
 8000d16:	4809      	ldr	r0, [pc, #36]	; (8000d3c <lcd_init+0x8c>)
 8000d18:	2314      	movs	r3, #20
 8000d1a:	f002 f85d 	bl	8002dd8 <HAL_SPI_Transmit>
  lcd_buferase();
 8000d1e:	f7ff ffbf 	bl	8000ca0 <lcd_buferase>
  lcd_bufupload();
 8000d22:	f7ff ff55 	bl	8000bd0 <lcd_bufupload>
  DISP_INIT_SEND_DAT;
 8000d26:	2201      	movs	r2, #1
 8000d28:	2102      	movs	r1, #2
 8000d2a:	4802      	ldr	r0, [pc, #8]	; (8000d34 <lcd_init+0x84>)
 8000d2c:	f001 fa52 	bl	80021d4 <HAL_GPIO_WritePin>
}
 8000d30:	b004      	add	sp, #16
 8000d32:	bd70      	pop	{r4, r5, r6, pc}
 8000d34:	40010800 	.word	0x40010800
 8000d38:	08006608 	.word	0x08006608
 8000d3c:	200006ec 	.word	0x200006ec

08000d40 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
  {
 8000d40:	4610      	mov	r0, r2
  	for (int i = 0; i < len; i++)
 8000d42:	2300      	movs	r3, #0
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000d44:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
  {
 8000d48:	b530      	push	{r4, r5, lr}
  	for (int i = 0; i < len; i++)
 8000d4a:	4283      	cmp	r3, r0
 8000d4c:	db00      	blt.n	8000d50 <_write+0x10>
  	{
  		ITM_SendChar(*ptr++);
  	}
  	return len;
  }
 8000d4e:	bd30      	pop	{r4, r5, pc}
 8000d50:	f8d2 4e80 	ldr.w	r4, [r2, #3712]	; 0xe80
 8000d54:	07e5      	lsls	r5, r4, #31
 8000d56:	d507      	bpl.n	8000d68 <_write+0x28>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000d58:	f8d2 4e00 	ldr.w	r4, [r2, #3584]	; 0xe00
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000d5c:	07e4      	lsls	r4, r4, #31
 8000d5e:	d503      	bpl.n	8000d68 <_write+0x28>
  		ITM_SendChar(*ptr++);
 8000d60:	5ccc      	ldrb	r4, [r1, r3]
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000d62:	6815      	ldr	r5, [r2, #0]
 8000d64:	b115      	cbz	r5, 8000d6c <_write+0x2c>
    {
      __NOP();
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000d66:	7014      	strb	r4, [r2, #0]
  	for (int i = 0; i < len; i++)
 8000d68:	3301      	adds	r3, #1
 8000d6a:	e7ee      	b.n	8000d4a <_write+0xa>
      __NOP();
 8000d6c:	bf00      	nop
 8000d6e:	e7f8      	b.n	8000d62 <_write+0x22>

08000d70 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d70:	b510      	push	{r4, lr}
 8000d72:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d74:	2214      	movs	r2, #20
 8000d76:	2100      	movs	r1, #0
 8000d78:	a80c      	add	r0, sp, #48	; 0x30
 8000d7a:	f002 fd37 	bl	80037ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d7e:	2214      	movs	r2, #20
 8000d80:	2100      	movs	r1, #0
 8000d82:	eb0d 0002 	add.w	r0, sp, r2
 8000d86:	f002 fd31 	bl	80037ec <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d8a:	2210      	movs	r2, #16
 8000d8c:	2100      	movs	r1, #0
 8000d8e:	a801      	add	r0, sp, #4
 8000d90:	f002 fd2c 	bl	80037ec <memset>
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d94:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d96:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d9a:	2105      	movs	r1, #5
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000d9c:	2201      	movs	r2, #1
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d9e:	e9cd 130a 	strd	r1, r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000da2:	e9cd 4311 	strd	r4, r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000da6:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000daa:	a80a      	add	r0, sp, #40	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000dac:	e9cd 220d 	strd	r2, r2, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000db0:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000db2:	f001 fa1b 	bl	80021ec <HAL_RCC_OscConfig>
 8000db6:	b108      	cbz	r0, 8000dbc <SystemClock_Config+0x4c>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000db8:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000dba:	e7fe      	b.n	8000dba <SystemClock_Config+0x4a>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000dbc:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000dbe:	e9cd 3405 	strd	r3, r4, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000dc2:	f44f 6380 	mov.w	r3, #1024	; 0x400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000dc6:	9007      	str	r0, [sp, #28]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000dc8:	e9cd 3008 	strd	r3, r0, [sp, #32]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000dcc:	4621      	mov	r1, r4
 8000dce:	a805      	add	r0, sp, #20
 8000dd0:	f001 fbe2 	bl	8002598 <HAL_RCC_ClockConfig>
 8000dd4:	b108      	cbz	r0, 8000dda <SystemClock_Config+0x6a>
 8000dd6:	b672      	cpsid	i
  while (1)
 8000dd8:	e7fe      	b.n	8000dd8 <SystemClock_Config+0x68>
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000dda:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000dde:	2203      	movs	r2, #3
 8000de0:	e9cd 2301 	strd	r2, r3, [sp, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000de4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000de8:	a801      	add	r0, sp, #4
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000dea:	9303      	str	r3, [sp, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000dec:	f001 fc90 	bl	8002710 <HAL_RCCEx_PeriphCLKConfig>
 8000df0:	b108      	cbz	r0, 8000df6 <SystemClock_Config+0x86>
 8000df2:	b672      	cpsid	i
  while (1)
 8000df4:	e7fe      	b.n	8000df4 <SystemClock_Config+0x84>
}
 8000df6:	b014      	add	sp, #80	; 0x50
 8000df8:	bd10      	pop	{r4, pc}
	...

08000dfc <main>:
{
 8000dfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e00:	f04f 0a10 	mov.w	sl, #16
{
 8000e04:	b097      	sub	sp, #92	; 0x5c
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e06:	4cac      	ldr	r4, [pc, #688]	; (80010b8 <main+0x2bc>)
  HAL_Init();
 8000e08:	f000 fce6 	bl	80017d8 <HAL_Init>
  SystemClock_Config();
 8000e0c:	f7ff ffb0 	bl	8000d70 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e10:	4652      	mov	r2, sl
 8000e12:	2100      	movs	r1, #0
 8000e14:	a80e      	add	r0, sp, #56	; 0x38
 8000e16:	f002 fce9 	bl	80037ec <memset>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e1a:	69a3      	ldr	r3, [r4, #24]
  HAL_GPIO_WritePin(SHUTDOWN_GPIO_Port, SHUTDOWN_Pin, GPIO_PIN_SET);
 8000e1c:	2201      	movs	r2, #1
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e1e:	ea43 030a 	orr.w	r3, r3, sl
 8000e22:	61a3      	str	r3, [r4, #24]
 8000e24:	69a3      	ldr	r3, [r4, #24]
  HAL_GPIO_WritePin(SHUTDOWN_GPIO_Port, SHUTDOWN_Pin, GPIO_PIN_SET);
 8000e26:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e2a:	ea03 030a 	and.w	r3, r3, sl
 8000e2e:	9301      	str	r3, [sp, #4]
 8000e30:	9b01      	ldr	r3, [sp, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e32:	69a3      	ldr	r3, [r4, #24]
  HAL_GPIO_WritePin(SHUTDOWN_GPIO_Port, SHUTDOWN_Pin, GPIO_PIN_SET);
 8000e34:	48a1      	ldr	r0, [pc, #644]	; (80010bc <main+0x2c0>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e36:	f043 0320 	orr.w	r3, r3, #32
 8000e3a:	61a3      	str	r3, [r4, #24]
 8000e3c:	69a3      	ldr	r3, [r4, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e3e:	2500      	movs	r5, #0
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e40:	f003 0320 	and.w	r3, r3, #32
 8000e44:	9302      	str	r3, [sp, #8]
 8000e46:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e48:	69a3      	ldr	r3, [r4, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e4a:	f04f 0802 	mov.w	r8, #2
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e4e:	f043 0304 	orr.w	r3, r3, #4
 8000e52:	61a3      	str	r3, [r4, #24]
 8000e54:	69a3      	ldr	r3, [r4, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000e56:	f04f 0911 	mov.w	r9, #17
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e5a:	f003 0304 	and.w	r3, r3, #4
 8000e5e:	9303      	str	r3, [sp, #12]
 8000e60:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e62:	69a3      	ldr	r3, [r4, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e64:	2601      	movs	r6, #1
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e66:	f043 0308 	orr.w	r3, r3, #8
 8000e6a:	61a3      	str	r3, [r4, #24]
 8000e6c:	69a3      	ldr	r3, [r4, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e6e:	f04f 0b06 	mov.w	fp, #6
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e72:	f003 0308 	and.w	r3, r3, #8
 8000e76:	9304      	str	r3, [sp, #16]
 8000e78:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(SHUTDOWN_GPIO_Port, SHUTDOWN_Pin, GPIO_PIN_SET);
 8000e7a:	f001 f9ab 	bl	80021d4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, DISP_RS_Pin|DISP_RSE_Pin, GPIO_PIN_RESET);
 8000e7e:	2200      	movs	r2, #0
 8000e80:	2106      	movs	r1, #6
 8000e82:	488f      	ldr	r0, [pc, #572]	; (80010c0 <main+0x2c4>)
 8000e84:	f001 f9a6 	bl	80021d4 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000e88:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  GPIO_InitStruct.Pin = JOYSTICK_BTN_Pin;
 8000e8c:	2708      	movs	r7, #8
  HAL_GPIO_Init(SHUTDOWN_GPIO_Port, &GPIO_InitStruct);
 8000e8e:	488b      	ldr	r0, [pc, #556]	; (80010bc <main+0x2c0>)
 8000e90:	a90e      	add	r1, sp, #56	; 0x38
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000e92:	e9cd 390e 	strd	r3, r9, [sp, #56]	; 0x38
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e96:	e9cd 5810 	strd	r5, r8, [sp, #64]	; 0x40
  HAL_GPIO_Init(SHUTDOWN_GPIO_Port, &GPIO_InitStruct);
 8000e9a:	f001 f8c1 	bl	8002020 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e9e:	4888      	ldr	r0, [pc, #544]	; (80010c0 <main+0x2c4>)
 8000ea0:	a90e      	add	r1, sp, #56	; 0x38
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ea2:	e9cd 5810 	strd	r5, r8, [sp, #64]	; 0x40
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ea6:	e9cd b60e 	strd	fp, r6, [sp, #56]	; 0x38
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eaa:	f001 f8b9 	bl	8002020 <HAL_GPIO_Init>
  HAL_GPIO_Init(JOYSTICK_BTN_GPIO_Port, &GPIO_InitStruct);
 8000eae:	4884      	ldr	r0, [pc, #528]	; (80010c0 <main+0x2c4>)
 8000eb0:	a90e      	add	r1, sp, #56	; 0x38
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000eb2:	e9cd 750e 	strd	r7, r5, [sp, #56]	; 0x38
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000eb6:	9610      	str	r6, [sp, #64]	; 0x40
  HAL_GPIO_Init(JOYSTICK_BTN_GPIO_Port, &GPIO_InitStruct);
 8000eb8:	f001 f8b2 	bl	8002020 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = BTN_1_Pin|BTN_2_Pin|BTN_3_Pin|BTN_4_Pin;
 8000ebc:	23f0      	movs	r3, #240	; 0xf0
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ebe:	4881      	ldr	r0, [pc, #516]	; (80010c4 <main+0x2c8>)
 8000ec0:	a90e      	add	r1, sp, #56	; 0x38
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ec2:	e9cd 350e 	strd	r3, r5, [sp, #56]	; 0x38
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ec6:	9610      	str	r6, [sp, #64]	; 0x40
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ec8:	f001 f8aa 	bl	8002020 <HAL_GPIO_Init>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000ecc:	6963      	ldr	r3, [r4, #20]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000ece:	462a      	mov	r2, r5
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000ed0:	4333      	orrs	r3, r6
 8000ed2:	6163      	str	r3, [r4, #20]
 8000ed4:	6963      	ldr	r3, [r4, #20]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000ed6:	4629      	mov	r1, r5
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000ed8:	4033      	ands	r3, r6
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000eda:	200b      	movs	r0, #11
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000edc:	9300      	str	r3, [sp, #0]
 8000ede:	9b00      	ldr	r3, [sp, #0]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000ee0:	f000 feea 	bl	8001cb8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000ee4:	200b      	movs	r0, #11
 8000ee6:	f000 ff19 	bl	8001d1c <HAL_NVIC_EnableIRQ>
  hadc1.Instance = ADC1;
 8000eea:	4c77      	ldr	r4, [pc, #476]	; (80010c8 <main+0x2cc>)
 8000eec:	4b77      	ldr	r3, [pc, #476]	; (80010cc <main+0x2d0>)
  ADC_ChannelConfTypeDef sConfig = {0};
 8000eee:	e9cd 550e 	strd	r5, r5, [sp, #56]	; 0x38
  hadc1.Instance = ADC1;
 8000ef2:	6023      	str	r3, [r4, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000ef4:	f44f 7380 	mov.w	r3, #256	; 0x100
  ADC_ChannelConfTypeDef sConfig = {0};
 8000ef8:	9510      	str	r5, [sp, #64]	; 0x40
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000efa:	60a3      	str	r3, [r4, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000efc:	7325      	strb	r5, [r4, #12]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000efe:	f44f 2360 	mov.w	r3, #917504	; 0xe0000
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f02:	7525      	strb	r5, [r4, #20]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f04:	6065      	str	r5, [r4, #4]
  hadc1.Init.NbrOfConversion = 5;
 8000f06:	2505      	movs	r5, #5
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f08:	4620      	mov	r0, r4
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f0a:	61e3      	str	r3, [r4, #28]
  hadc1.Init.NbrOfConversion = 5;
 8000f0c:	6125      	str	r5, [r4, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f0e:	f000 fe43 	bl	8001b98 <HAL_ADC_Init>
 8000f12:	b108      	cbz	r0, 8000f18 <main+0x11c>
 8000f14:	b672      	cpsid	i
  while (1)
 8000f16:	e7fe      	b.n	8000f16 <main+0x11a>
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000f18:	e9cd 060e 	strd	r0, r6, [sp, #56]	; 0x38
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f1c:	a90e      	add	r1, sp, #56	; 0x38
 8000f1e:	4620      	mov	r0, r4
  sConfig.SamplingTime = ADC_SAMPLETIME_71CYCLES_5;
 8000f20:	f8cd b040 	str.w	fp, [sp, #64]	; 0x40
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f24:	f000 fcca 	bl	80018bc <HAL_ADC_ConfigChannel>
 8000f28:	b108      	cbz	r0, 8000f2e <main+0x132>
 8000f2a:	b672      	cpsid	i
  while (1)
 8000f2c:	e7fe      	b.n	8000f2c <main+0x130>
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f2e:	4620      	mov	r0, r4
 8000f30:	a90e      	add	r1, sp, #56	; 0x38
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000f32:	e9cd 780e 	strd	r7, r8, [sp, #56]	; 0x38
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f36:	f000 fcc1 	bl	80018bc <HAL_ADC_ConfigChannel>
 8000f3a:	b108      	cbz	r0, 8000f40 <main+0x144>
 8000f3c:	b672      	cpsid	i
  while (1)
 8000f3e:	e7fe      	b.n	8000f3e <main+0x142>
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000f40:	f04f 0809 	mov.w	r8, #9
 8000f44:	2303      	movs	r3, #3
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f46:	4620      	mov	r0, r4
 8000f48:	a90e      	add	r1, sp, #56	; 0x38
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000f4a:	e9cd 830e 	strd	r8, r3, [sp, #56]	; 0x38
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f4e:	f000 fcb5 	bl	80018bc <HAL_ADC_ConfigChannel>
 8000f52:	b108      	cbz	r0, 8000f58 <main+0x15c>
 8000f54:	b672      	cpsid	i
  while (1)
 8000f56:	e7fe      	b.n	8000f56 <main+0x15a>
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000f58:	2304      	movs	r3, #4
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f5a:	4620      	mov	r0, r4
 8000f5c:	a90e      	add	r1, sp, #56	; 0x38
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000f5e:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000f62:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f64:	f000 fcaa 	bl	80018bc <HAL_ADC_ConfigChannel>
 8000f68:	b108      	cbz	r0, 8000f6e <main+0x172>
 8000f6a:	b672      	cpsid	i
  while (1)
 8000f6c:	e7fe      	b.n	8000f6c <main+0x170>
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f6e:	4620      	mov	r0, r4
 8000f70:	a90e      	add	r1, sp, #56	; 0x38
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8000f72:	e9cd 950e 	strd	r9, r5, [sp, #56]	; 0x38
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f76:	f000 fca1 	bl	80018bc <HAL_ADC_ConfigChannel>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	b108      	cbz	r0, 8000f82 <main+0x186>
 8000f7e:	b672      	cpsid	i
  while (1)
 8000f80:	e7fe      	b.n	8000f80 <main+0x184>
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000f82:	f44f 7282 	mov.w	r2, #260	; 0x104
  hspi2.Instance = SPI2;
 8000f86:	4852      	ldr	r0, [pc, #328]	; (80010d0 <main+0x2d4>)
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000f88:	f8df e148 	ldr.w	lr, [pc, #328]	; 80010d4 <main+0x2d8>
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000f8c:	e9c0 3302 	strd	r3, r3, [r0, #8]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000f90:	e9c0 e200 	strd	lr, r2, [r0]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000f94:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000f98:	f44f 2280 	mov.w	r2, #262144	; 0x40000
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f9c:	e9c0 3308 	strd	r3, r3, [r0, #32]
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000fa0:	6283      	str	r3, [r0, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000fa2:	230a      	movs	r3, #10
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000fa4:	e9c0 2706 	strd	r2, r7, [r0, #24]
  hspi2.Init.CRCPolynomial = 10;
 8000fa8:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000faa:	f001 febd 	bl	8002d28 <HAL_SPI_Init>
 8000fae:	4604      	mov	r4, r0
 8000fb0:	b108      	cbz	r0, 8000fb6 <main+0x1ba>
 8000fb2:	b672      	cpsid	i
  while (1)
 8000fb4:	e7fe      	b.n	8000fb4 <main+0x1b8>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000fb6:	221c      	movs	r2, #28
 8000fb8:	4601      	mov	r1, r0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fba:	e9cd 0005 	strd	r0, r0, [sp, #20]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000fbe:	eb0d 0002 	add.w	r0, sp, r2
 8000fc2:	f002 fc13 	bl	80037ec <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000fc6:	2220      	movs	r2, #32
 8000fc8:	4621      	mov	r1, r4
 8000fca:	a80e      	add	r0, sp, #56	; 0x38
 8000fcc:	f002 fc0e 	bl	80037ec <memset>
  htim1.Instance = TIM1;
 8000fd0:	4d41      	ldr	r5, [pc, #260]	; (80010d8 <main+0x2dc>)
 8000fd2:	4b42      	ldr	r3, [pc, #264]	; (80010dc <main+0x2e0>)
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000fd4:	4628      	mov	r0, r5
  htim1.Init.Prescaler = 0;
 8000fd6:	e9c5 3400 	strd	r3, r4, [r5]
  htim1.Init.Period = 65535;
 8000fda:	f64f 73ff 	movw	r3, #65535	; 0xffff
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fde:	e9c5 4405 	strd	r4, r4, [r5, #20]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fe2:	e9c5 3403 	strd	r3, r4, [r5, #12]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fe6:	60ac      	str	r4, [r5, #8]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000fe8:	f002 f850 	bl	800308c <HAL_TIM_PWM_Init>
 8000fec:	b108      	cbz	r0, 8000ff2 <main+0x1f6>
 8000fee:	b672      	cpsid	i
  while (1)
 8000ff0:	e7fe      	b.n	8000ff0 <main+0x1f4>
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ff2:	e9cd 0005 	strd	r0, r0, [sp, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000ff6:	a905      	add	r1, sp, #20
 8000ff8:	4628      	mov	r0, r5
 8000ffa:	f002 f95d 	bl	80032b8 <HAL_TIMEx_MasterConfigSynchronization>
 8000ffe:	4602      	mov	r2, r0
 8001000:	b108      	cbz	r0, 8001006 <main+0x20a>
 8001002:	b672      	cpsid	i
  while (1)
 8001004:	e7fe      	b.n	8001004 <main+0x208>
  sConfigOC.Pulse = 50000;
 8001006:	f04f 0c60 	mov.w	ip, #96	; 0x60
 800100a:	f24c 3350 	movw	r3, #50000	; 0xc350
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800100e:	e9cd 0009 	strd	r0, r0, [sp, #36]	; 0x24
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001012:	e9cd 000b 	strd	r0, r0, [sp, #44]	; 0x2c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001016:	900d      	str	r0, [sp, #52]	; 0x34
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001018:	a907      	add	r1, sp, #28
 800101a:	4628      	mov	r0, r5
  sConfigOC.Pulse = 50000;
 800101c:	e9cd c307 	strd	ip, r3, [sp, #28]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001020:	f002 f88c 	bl	800313c <HAL_TIM_PWM_ConfigChannel>
 8001024:	b108      	cbz	r0, 800102a <main+0x22e>
 8001026:	b672      	cpsid	i
  while (1)
 8001028:	e7fe      	b.n	8001028 <main+0x22c>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800102a:	2300      	movs	r3, #0
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800102c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001030:	4829      	ldr	r0, [pc, #164]	; (80010d8 <main+0x2dc>)
 8001032:	a90e      	add	r1, sp, #56	; 0x38
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001034:	e9cd 330e 	strd	r3, r3, [sp, #56]	; 0x38
  sBreakDeadTimeConfig.DeadTime = 0;
 8001038:	e9cd 3310 	strd	r3, r3, [sp, #64]	; 0x40
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800103c:	9312      	str	r3, [sp, #72]	; 0x48
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800103e:	9213      	str	r2, [sp, #76]	; 0x4c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001040:	9315      	str	r3, [sp, #84]	; 0x54
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001042:	f002 f967 	bl	8003314 <HAL_TIMEx_ConfigBreakDeadTime>
 8001046:	4604      	mov	r4, r0
 8001048:	b108      	cbz	r0, 800104e <main+0x252>
 800104a:	b672      	cpsid	i
  while (1)
 800104c:	e7fe      	b.n	800104c <main+0x250>
  HAL_TIM_MspPostInit(&htim1);
 800104e:	4822      	ldr	r0, [pc, #136]	; (80010d8 <main+0x2dc>)
 8001050:	f000 fa6c 	bl	800152c <HAL_TIM_MspPostInit>
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 8001054:	f04f 33ff 	mov.w	r3, #4294967295
  hrtc.Instance = RTC;
 8001058:	4e21      	ldr	r6, [pc, #132]	; (80010e0 <main+0x2e4>)
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 800105a:	4f22      	ldr	r7, [pc, #136]	; (80010e4 <main+0x2e8>)
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800105c:	4630      	mov	r0, r6
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 800105e:	e9c6 7300 	strd	r7, r3, [r6]
  RTC_TimeTypeDef sTime = {0};
 8001062:	f8ad 401c 	strh.w	r4, [sp, #28]
 8001066:	f88d 401e 	strb.w	r4, [sp, #30]
  RTC_DateTypeDef DateToUpdate = {0};
 800106a:	940e      	str	r4, [sp, #56]	; 0x38
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_NONE;
 800106c:	60b4      	str	r4, [r6, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800106e:	f001 fda9 	bl	8002bc4 <HAL_RTC_Init>
 8001072:	b108      	cbz	r0, 8001078 <main+0x27c>
 8001074:	b672      	cpsid	i
  while (1)
 8001076:	e7fe      	b.n	8001076 <main+0x27a>
  sTime.Hours = 0x0;
 8001078:	f88d 001c 	strb.w	r0, [sp, #28]
  sTime.Minutes = 0x0;
 800107c:	f88d 001d 	strb.w	r0, [sp, #29]
  sTime.Seconds = 0x0;
 8001080:	f88d 001e 	strb.w	r0, [sp, #30]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001084:	2201      	movs	r2, #1
 8001086:	4630      	mov	r0, r6
 8001088:	a907      	add	r1, sp, #28
 800108a:	f001 fcd7 	bl	8002a3c <HAL_RTC_SetTime>
 800108e:	b108      	cbz	r0, 8001094 <main+0x298>
 8001090:	b672      	cpsid	i
  while (1)
 8001092:	e7fe      	b.n	8001092 <main+0x296>
  DateToUpdate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001094:	2401      	movs	r4, #1
  DateToUpdate.Year = 0x0;
 8001096:	f88d 003b 	strb.w	r0, [sp, #59]	; 0x3b
  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BCD) != HAL_OK)
 800109a:	4622      	mov	r2, r4
 800109c:	4630      	mov	r0, r6
 800109e:	a90e      	add	r1, sp, #56	; 0x38
  DateToUpdate.WeekDay = RTC_WEEKDAY_MONDAY;
 80010a0:	f88d 4038 	strb.w	r4, [sp, #56]	; 0x38
  DateToUpdate.Month = RTC_MONTH_JANUARY;
 80010a4:	f88d 4039 	strb.w	r4, [sp, #57]	; 0x39
  DateToUpdate.Date = 0x1;
 80010a8:	f88d 403a 	strb.w	r4, [sp, #58]	; 0x3a
  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BCD) != HAL_OK)
 80010ac:	f001 fd16 	bl	8002adc <HAL_RTC_SetDate>
 80010b0:	4603      	mov	r3, r0
 80010b2:	b1c8      	cbz	r0, 80010e8 <main+0x2ec>
 80010b4:	b672      	cpsid	i
  while (1)
 80010b6:	e7fe      	b.n	80010b6 <main+0x2ba>
 80010b8:	40021000 	.word	0x40021000
 80010bc:	40011000 	.word	0x40011000
 80010c0:	40010800 	.word	0x40010800
 80010c4:	40010c00 	.word	0x40010c00
 80010c8:	2000060c 	.word	0x2000060c
 80010cc:	40012400 	.word	0x40012400
 80010d0:	200006ec 	.word	0x200006ec
 80010d4:	40003800 	.word	0x40003800
 80010d8:	20000744 	.word	0x20000744
 80010dc:	40012c00 	.word	0x40012c00
 80010e0:	20000680 	.word	0x20000680
 80010e4:	40002800 	.word	0x40002800
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80010e8:	f44f 7282 	mov.w	r2, #260	; 0x104
  hspi1.Instance = SPI1;
 80010ec:	4867      	ldr	r0, [pc, #412]	; (800128c <main+0x490>)
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80010ee:	4968      	ldr	r1, [pc, #416]	; (8001290 <main+0x494>)
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80010f0:	e9c0 3302 	strd	r3, r3, [r0, #8]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80010f4:	e9c0 1200 	strd	r1, r2, [r0]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80010f8:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80010fc:	2208      	movs	r2, #8
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80010fe:	e9c0 3308 	strd	r3, r3, [r0, #32]
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001102:	6283      	str	r3, [r0, #40]	; 0x28
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001104:	f44f 2680 	mov.w	r6, #262144	; 0x40000
  hspi1.Init.CRCPolynomial = 10;
 8001108:	230a      	movs	r3, #10
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800110a:	e9c0 6206 	strd	r6, r2, [r0, #24]
  hspi1.Init.CRCPolynomial = 10;
 800110e:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001110:	f001 fe0a 	bl	8002d28 <HAL_SPI_Init>
 8001114:	4603      	mov	r3, r0
 8001116:	b108      	cbz	r0, 800111c <main+0x320>
 8001118:	b672      	cpsid	i
  while (1)
 800111a:	e7fe      	b.n	800111a <main+0x31e>
  huart1.Init.BaudRate = 9600;
 800111c:	f44f 5816 	mov.w	r8, #9600	; 0x2580
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001120:	270c      	movs	r7, #12
  huart1.Instance = USART1;
 8001122:	485c      	ldr	r0, [pc, #368]	; (8001294 <main+0x498>)
  huart1.Init.BaudRate = 9600;
 8001124:	4a5c      	ldr	r2, [pc, #368]	; (8001298 <main+0x49c>)
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001126:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart1.Init.BaudRate = 9600;
 800112a:	e9c0 2800 	strd	r2, r8, [r0]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800112e:	e9c0 7305 	strd	r7, r3, [r0, #20]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001132:	6103      	str	r3, [r0, #16]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001134:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001136:	f002 f963 	bl	8003400 <HAL_UART_Init>
 800113a:	b108      	cbz	r0, 8001140 <main+0x344>
 800113c:	b672      	cpsid	i
  while (1)
 800113e:	e7fe      	b.n	800113e <main+0x342>
  huart3.Instance = USART3;
 8001140:	4e56      	ldr	r6, [pc, #344]	; (800129c <main+0x4a0>)
 8001142:	4b57      	ldr	r3, [pc, #348]	; (80012a0 <main+0x4a4>)
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001144:	e9c6 0704 	strd	r0, r7, [r6, #16]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001148:	e9c6 0002 	strd	r0, r0, [r6, #8]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800114c:	e9c6 0006 	strd	r0, r0, [r6, #24]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001150:	4630      	mov	r0, r6
  huart3.Init.BaudRate = 9600;
 8001152:	e9c6 3800 	strd	r3, r8, [r6]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001156:	f002 f953 	bl	8003400 <HAL_UART_Init>
 800115a:	4607      	mov	r7, r0
 800115c:	b108      	cbz	r0, 8001162 <main+0x366>
 800115e:	b672      	cpsid	i
  while (1)
 8001160:	e7fe      	b.n	8001160 <main+0x364>
  lcd_init();
 8001162:	f7ff fda5 	bl	8000cb0 <lcd_init>
  RingBuf_Init(rx_buf, 1024, 1, &ringbuf);
 8001166:	4622      	mov	r2, r4
 8001168:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800116c:	4b4d      	ldr	r3, [pc, #308]	; (80012a4 <main+0x4a8>)
 800116e:	484e      	ldr	r0, [pc, #312]	; (80012a8 <main+0x4ac>)
 8001170:	f7ff fc93 	bl	8000a9a <RingBuf_Init>
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, dutyCycle);
 8001174:	f44f 4230 	mov.w	r2, #45056	; 0xb000
 8001178:	682b      	ldr	r3, [r5, #0]
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800117a:	4639      	mov	r1, r7
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, dutyCycle);
 800117c:	635a      	str	r2, [r3, #52]	; 0x34
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800117e:	484b      	ldr	r0, [pc, #300]	; (80012ac <main+0x4b0>)
 8001180:	f002 f898 	bl	80032b4 <HAL_TIM_PWM_Start>
  HAL_UART_Receive_IT(&huart3, &temp_byte, 1);
 8001184:	4622      	mov	r2, r4
 8001186:	4630      	mov	r0, r6
 8001188:	4949      	ldr	r1, [pc, #292]	; (80012b0 <main+0x4b4>)
 800118a:	f002 fade 	bl	800374a <HAL_UART_Receive_IT>
  uint32_t temp_tick[3] = {0};
 800118e:	46b8      	mov	r8, r7
  uint16_t buf_len = 0;
 8001190:	f8ad 7038 	strh.w	r7, [sp, #56]	; 0x38
  lcd_buferase();
 8001194:	f7ff fd84 	bl	8000ca0 <lcd_buferase>
      sprintf((char*)temp_str[0], "jox - %d", ADC_data.jox);
 8001198:	4d46      	ldr	r5, [pc, #280]	; (80012b4 <main+0x4b8>)
  	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)ADC_data.array, 5);
 800119a:	4e47      	ldr	r6, [pc, #284]	; (80012b8 <main+0x4bc>)
        strncpy((char*)temp_str[1], (char*)temp_str[0], 128);
 800119c:	f105 0980 	add.w	r9, r5, #128	; 0x80
  	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)ADC_data.array, 5);
 80011a0:	2205      	movs	r2, #5
 80011a2:	4631      	mov	r1, r6
 80011a4:	4845      	ldr	r0, [pc, #276]	; (80012bc <main+0x4c0>)
 80011a6:	f000 fc43 	bl	8001a30 <HAL_ADC_Start_DMA>
    RingBuf_Available(&buf_len, &ringbuf);
 80011aa:	493e      	ldr	r1, [pc, #248]	; (80012a4 <main+0x4a8>)
 80011ac:	a80e      	add	r0, sp, #56	; 0x38
 80011ae:	f7ff fc82 	bl	8000ab6 <RingBuf_Available>
    if(((HAL_GetTick() - temp_tick[0]) > period[0]) && buferasedfl)
 80011b2:	f000 fb2f 	bl	8001814 <HAL_GetTick>
 80011b6:	eba0 0008 	sub.w	r0, r0, r8
 80011ba:	2832      	cmp	r0, #50	; 0x32
 80011bc:	d94c      	bls.n	8001258 <main+0x45c>
 80011be:	2c00      	cmp	r4, #0
 80011c0:	d04a      	beq.n	8001258 <main+0x45c>
      temp_tick[0] = HAL_GetTick();
 80011c2:	f000 fb27 	bl	8001814 <HAL_GetTick>
      if(buf_len)
 80011c6:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
      temp_tick[0] = HAL_GetTick();
 80011ca:	4680      	mov	r8, r0
      if(buf_len)
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d056      	beq.n	800127e <main+0x482>
        RingBuf_DataRead(temp_str[0], buf_len, &ringbuf);
 80011d0:	4619      	mov	r1, r3
 80011d2:	4a34      	ldr	r2, [pc, #208]	; (80012a4 <main+0x4a8>)
 80011d4:	4837      	ldr	r0, [pc, #220]	; (80012b4 <main+0x4b8>)
 80011d6:	f7ff fcce 	bl	8000b76 <RingBuf_DataRead>
        temp_str[0][buf_len] = '\0';
 80011da:	2300      	movs	r3, #0
 80011dc:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
        lcd_bufwstr8x5(temp_str[0], 0, 0, 0);
 80011e0:	4619      	mov	r1, r3
        temp_str[0][buf_len] = '\0';
 80011e2:	54ab      	strb	r3, [r5, r2]
        lcd_bufwstr8x5(temp_str[0], 0, 0, 0);
 80011e4:	4833      	ldr	r0, [pc, #204]	; (80012b4 <main+0x4b8>)
 80011e6:	461a      	mov	r2, r3
 80011e8:	f7ff fd30 	bl	8000c4c <lcd_bufwstr8x5>
        strncpy((char*)temp_str[1], (char*)temp_str[0], 128);
 80011ec:	2280      	movs	r2, #128	; 0x80
 80011ee:	4648      	mov	r0, r9
 80011f0:	4930      	ldr	r1, [pc, #192]	; (80012b4 <main+0x4b8>)
 80011f2:	f002 ff9b 	bl	800412c <strncpy>
      sprintf((char*)temp_str[0], "jox - %d", ADC_data.jox);
 80011f6:	8872      	ldrh	r2, [r6, #2]
 80011f8:	4931      	ldr	r1, [pc, #196]	; (80012c0 <main+0x4c4>)
 80011fa:	4628      	mov	r0, r5
 80011fc:	f002 ff76 	bl	80040ec <siprintf>
      lcd_bufwstr8x5(temp_str[0], 1, 0, 0);
 8001200:	2300      	movs	r3, #0
 8001202:	2101      	movs	r1, #1
 8001204:	461a      	mov	r2, r3
 8001206:	4628      	mov	r0, r5
 8001208:	f7ff fd20 	bl	8000c4c <lcd_bufwstr8x5>
      sprintf((char*)temp_str[0], "joy - %d", ADC_data.joy);
 800120c:	88b2      	ldrh	r2, [r6, #4]
 800120e:	492d      	ldr	r1, [pc, #180]	; (80012c4 <main+0x4c8>)
 8001210:	4628      	mov	r0, r5
 8001212:	f002 ff6b 	bl	80040ec <siprintf>
      lcd_bufwstr8x5(temp_str[0], 2, 0, 0);
 8001216:	2300      	movs	r3, #0
 8001218:	2102      	movs	r1, #2
 800121a:	461a      	mov	r2, r3
 800121c:	4628      	mov	r0, r5
 800121e:	f7ff fd15 	bl	8000c4c <lcd_bufwstr8x5>
      sprintf((char*)temp_str[0], "%ld.%ld sec from start", HAL_GetTick()/1000, (HAL_GetTick()%1000)/100);
 8001222:	f000 faf7 	bl	8001814 <HAL_GetTick>
 8001226:	4604      	mov	r4, r0
 8001228:	f000 faf4 	bl	8001814 <HAL_GetTick>
 800122c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001230:	fbb0 f3f1 	udiv	r3, r0, r1
 8001234:	2264      	movs	r2, #100	; 0x64
 8001236:	fb03 0311 	mls	r3, r3, r1, r0
 800123a:	4628      	mov	r0, r5
 800123c:	fbb3 f3f2 	udiv	r3, r3, r2
 8001240:	fbb4 f2f1 	udiv	r2, r4, r1
 8001244:	4920      	ldr	r1, [pc, #128]	; (80012c8 <main+0x4cc>)
 8001246:	f002 ff51 	bl	80040ec <siprintf>
      lcd_bufwstr8x5(temp_str[0], 7, 0, 0);
 800124a:	2300      	movs	r3, #0
 800124c:	2107      	movs	r1, #7
 800124e:	461a      	mov	r2, r3
 8001250:	4628      	mov	r0, r5
 8001252:	f7ff fcfb 	bl	8000c4c <lcd_bufwstr8x5>
      buferasedfl = 0;
 8001256:	2400      	movs	r4, #0
    if((HAL_GetTick() - temp_tick[2]) > period[2])
 8001258:	f000 fadc 	bl	8001814 <HAL_GetTick>
 800125c:	1bc0      	subs	r0, r0, r7
 800125e:	2832      	cmp	r0, #50	; 0x32
 8001260:	d99e      	bls.n	80011a0 <main+0x3a4>
      temp_tick[2] = HAL_GetTick();
 8001262:	f000 fad7 	bl	8001814 <HAL_GetTick>
 8001266:	4607      	mov	r7, r0
      lcd_bufupload();
 8001268:	f7ff fcb2 	bl	8000bd0 <lcd_bufupload>
      printf("jox - %d, joy - %d\r\n", ADC_data.jox, ADC_data.joy);
 800126c:	88b2      	ldrh	r2, [r6, #4]
 800126e:	8871      	ldrh	r1, [r6, #2]
 8001270:	4816      	ldr	r0, [pc, #88]	; (80012cc <main+0x4d0>)
 8001272:	f002 ff23 	bl	80040bc <iprintf>
      buferasedfl = 1;
 8001276:	2401      	movs	r4, #1
      lcd_buferase();
 8001278:	f7ff fd12 	bl	8000ca0 <lcd_buferase>
      buferasedfl = 1;
 800127c:	e790      	b.n	80011a0 <main+0x3a4>
        lcd_bufwstr8x5(temp_str[1], 0, 0, 0);
 800127e:	461a      	mov	r2, r3
 8001280:	4619      	mov	r1, r3
 8001282:	4813      	ldr	r0, [pc, #76]	; (80012d0 <main+0x4d4>)
 8001284:	f7ff fce2 	bl	8000c4c <lcd_bufwstr8x5>
 8001288:	e7b5      	b.n	80011f6 <main+0x3fa>
 800128a:	bf00      	nop
 800128c:	20000694 	.word	0x20000694
 8001290:	40013000 	.word	0x40013000
 8001294:	2000078c 	.word	0x2000078c
 8001298:	40013800 	.word	0x40013800
 800129c:	200007d0 	.word	0x200007d0
 80012a0:	40004800 	.word	0x40004800
 80012a4:	20000814 	.word	0x20000814
 80012a8:	20000828 	.word	0x20000828
 80012ac:	20000744 	.word	0x20000744
 80012b0:	20000c28 	.word	0x20000c28
 80012b4:	20000c29 	.word	0x20000c29
 80012b8:	20000600 	.word	0x20000600
 80012bc:	2000060c 	.word	0x2000060c
 80012c0:	08006b15 	.word	0x08006b15
 80012c4:	08006b1e 	.word	0x08006b1e
 80012c8:	08006b27 	.word	0x08006b27
 80012cc:	08006b3e 	.word	0x08006b3e
 80012d0:	20000ca9 	.word	0x20000ca9

080012d4 <HAL_UART_RxCpltCallback>:
{
 80012d4:	b538      	push	{r3, r4, r5, lr}
  if(huart == &huart3)
 80012d6:	4b08      	ldr	r3, [pc, #32]	; (80012f8 <HAL_UART_RxCpltCallback+0x24>)
{
 80012d8:	4604      	mov	r4, r0
  if(huart == &huart3)
 80012da:	4298      	cmp	r0, r3
 80012dc:	d10b      	bne.n	80012f6 <HAL_UART_RxCpltCallback+0x22>
    RingBuf_BytePut(temp_byte, &ringbuf);
 80012de:	4d07      	ldr	r5, [pc, #28]	; (80012fc <HAL_UART_RxCpltCallback+0x28>)
 80012e0:	4907      	ldr	r1, [pc, #28]	; (8001300 <HAL_UART_RxCpltCallback+0x2c>)
 80012e2:	7828      	ldrb	r0, [r5, #0]
 80012e4:	f7ff fbfa 	bl	8000adc <RingBuf_BytePut>
    HAL_UART_Receive_IT (&huart3, &temp_byte, 1);
 80012e8:	4629      	mov	r1, r5
 80012ea:	4620      	mov	r0, r4
}
 80012ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    HAL_UART_Receive_IT (&huart3, &temp_byte, 1);
 80012f0:	2201      	movs	r2, #1
 80012f2:	f002 ba2a 	b.w	800374a <HAL_UART_Receive_IT>
}
 80012f6:	bd38      	pop	{r3, r4, r5, pc}
 80012f8:	200007d0 	.word	0x200007d0
 80012fc:	20000c28 	.word	0x20000c28
 8001300:	20000814 	.word	0x20000814

08001304 <HAL_UART_TxCpltCallback>:
 8001304:	4770      	bx	lr

08001306 <HAL_ADC_ConvCpltCallback>:
}
 8001306:	4770      	bx	lr

08001308 <Error_Handler>:
 8001308:	b672      	cpsid	i
  while (1)
 800130a:	e7fe      	b.n	800130a <Error_Handler+0x2>

0800130c <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800130c:	4b0e      	ldr	r3, [pc, #56]	; (8001348 <HAL_MspInit+0x3c>)
{
 800130e:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 8001310:	699a      	ldr	r2, [r3, #24]
 8001312:	f042 0201 	orr.w	r2, r2, #1
 8001316:	619a      	str	r2, [r3, #24]
 8001318:	699a      	ldr	r2, [r3, #24]
 800131a:	f002 0201 	and.w	r2, r2, #1
 800131e:	9200      	str	r2, [sp, #0]
 8001320:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001322:	69da      	ldr	r2, [r3, #28]
 8001324:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001328:	61da      	str	r2, [r3, #28]
 800132a:	69db      	ldr	r3, [r3, #28]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800132c:	4a07      	ldr	r2, [pc, #28]	; (800134c <HAL_MspInit+0x40>)
  __HAL_RCC_PWR_CLK_ENABLE();
 800132e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001332:	9301      	str	r3, [sp, #4]
 8001334:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001336:	6853      	ldr	r3, [r2, #4]
 8001338:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800133c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001340:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001342:	b002      	add	sp, #8
 8001344:	4770      	bx	lr
 8001346:	bf00      	nop
 8001348:	40021000 	.word	0x40021000
 800134c:	40010000 	.word	0x40010000

08001350 <HAL_ADC_MspInit>:
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001350:	2210      	movs	r2, #16
{
 8001352:	b530      	push	{r4, r5, lr}
 8001354:	4605      	mov	r5, r0
 8001356:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001358:	eb0d 0002 	add.w	r0, sp, r2
 800135c:	2100      	movs	r1, #0
 800135e:	f002 fa45 	bl	80037ec <memset>
  if(hadc->Instance==ADC1)
 8001362:	682a      	ldr	r2, [r5, #0]
 8001364:	4b23      	ldr	r3, [pc, #140]	; (80013f4 <HAL_ADC_MspInit+0xa4>)
 8001366:	429a      	cmp	r2, r3
 8001368:	d142      	bne.n	80013f0 <HAL_ADC_MspInit+0xa0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800136a:	f503 436c 	add.w	r3, r3, #60416	; 0xec00
 800136e:	699a      	ldr	r2, [r3, #24]
    PA0-WKUP     ------> ADC1_IN0
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = BAT_LVL_CTRL_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001370:	2403      	movs	r4, #3
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001372:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001376:	619a      	str	r2, [r3, #24]
 8001378:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(BAT_LVL_CTRL_GPIO_Port, &GPIO_InitStruct);
 800137a:	481f      	ldr	r0, [pc, #124]	; (80013f8 <HAL_ADC_MspInit+0xa8>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 800137c:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8001380:	9201      	str	r2, [sp, #4]
 8001382:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001384:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(BAT_LVL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8001386:	a904      	add	r1, sp, #16
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001388:	f042 0204 	orr.w	r2, r2, #4
 800138c:	619a      	str	r2, [r3, #24]
 800138e:	699a      	ldr	r2, [r3, #24]
 8001390:	f002 0204 	and.w	r2, r2, #4
 8001394:	9202      	str	r2, [sp, #8]
 8001396:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001398:	699a      	ldr	r2, [r3, #24]
 800139a:	f042 0208 	orr.w	r2, r2, #8
 800139e:	619a      	str	r2, [r3, #24]
 80013a0:	699b      	ldr	r3, [r3, #24]
 80013a2:	f003 0308 	and.w	r3, r3, #8
 80013a6:	9303      	str	r3, [sp, #12]
 80013a8:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013aa:	2301      	movs	r3, #1
 80013ac:	e9cd 3404 	strd	r3, r4, [sp, #16]
    HAL_GPIO_Init(BAT_LVL_CTRL_GPIO_Port, &GPIO_InitStruct);
 80013b0:	f000 fe36 	bl	8002020 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = JOYSTICK_OX_Pin|JOYSTICK_OY_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013b4:	4811      	ldr	r0, [pc, #68]	; (80013fc <HAL_ADC_MspInit+0xac>)
 80013b6:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013b8:	e9cd 4404 	strd	r4, r4, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013bc:	f000 fe30 	bl	8002020 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80013c0:	2300      	movs	r3, #0
    hdma_adc1.Instance = DMA1_Channel1;
 80013c2:	4c0f      	ldr	r4, [pc, #60]	; (8001400 <HAL_ADC_MspInit+0xb0>)
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80013c4:	4a0f      	ldr	r2, [pc, #60]	; (8001404 <HAL_ADC_MspInit+0xb4>)
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80013c6:	2180      	movs	r1, #128	; 0x80
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80013c8:	e9c4 2300 	strd	r2, r3, [r4]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80013cc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80013d0:	e9c4 1203 	strd	r1, r2, [r4, #12]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80013d4:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_adc1.Init.Mode = DMA_NORMAL;
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80013d8:	4620      	mov	r0, r4
    hdma_adc1.Init.Mode = DMA_NORMAL;
 80013da:	e9c4 2305 	strd	r2, r3, [r4, #20]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80013de:	60a3      	str	r3, [r4, #8]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80013e0:	61e3      	str	r3, [r4, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80013e2:	f000 fcbd 	bl	8001d60 <HAL_DMA_Init>
 80013e6:	b108      	cbz	r0, 80013ec <HAL_ADC_MspInit+0x9c>
    {
      Error_Handler();
 80013e8:	f7ff ff8e 	bl	8001308 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80013ec:	622c      	str	r4, [r5, #32]
 80013ee:	6265      	str	r5, [r4, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80013f0:	b009      	add	sp, #36	; 0x24
 80013f2:	bd30      	pop	{r4, r5, pc}
 80013f4:	40012400 	.word	0x40012400
 80013f8:	40010800 	.word	0x40010800
 80013fc:	40010c00 	.word	0x40010c00
 8001400:	2000063c 	.word	0x2000063c
 8001404:	40020008 	.word	0x40020008

08001408 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001408:	b507      	push	{r0, r1, r2, lr}
  if(hrtc->Instance==RTC)
 800140a:	4b0b      	ldr	r3, [pc, #44]	; (8001438 <HAL_RTC_MspInit+0x30>)
 800140c:	6802      	ldr	r2, [r0, #0]
 800140e:	429a      	cmp	r2, r3
 8001410:	d10f      	bne.n	8001432 <HAL_RTC_MspInit+0x2a>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 8001412:	f000 fee5 	bl	80021e0 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 8001416:	4b09      	ldr	r3, [pc, #36]	; (800143c <HAL_RTC_MspInit+0x34>)
 8001418:	69da      	ldr	r2, [r3, #28]
 800141a:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 800141e:	61da      	str	r2, [r3, #28]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001420:	2201      	movs	r2, #1
    __HAL_RCC_BKP_CLK_ENABLE();
 8001422:	69db      	ldr	r3, [r3, #28]
 8001424:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001428:	9301      	str	r3, [sp, #4]
 800142a:	9b01      	ldr	r3, [sp, #4]
    __HAL_RCC_RTC_ENABLE();
 800142c:	4b04      	ldr	r3, [pc, #16]	; (8001440 <HAL_RTC_MspInit+0x38>)
 800142e:	f8c3 243c 	str.w	r2, [r3, #1084]	; 0x43c
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001432:	b003      	add	sp, #12
 8001434:	f85d fb04 	ldr.w	pc, [sp], #4
 8001438:	40002800 	.word	0x40002800
 800143c:	40021000 	.word	0x40021000
 8001440:	42420000 	.word	0x42420000

08001444 <HAL_SPI_MspInit>:
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001444:	2210      	movs	r2, #16
{
 8001446:	b510      	push	{r4, lr}
 8001448:	4604      	mov	r4, r0
 800144a:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800144c:	eb0d 0002 	add.w	r0, sp, r2
 8001450:	2100      	movs	r1, #0
 8001452:	f002 f9cb 	bl	80037ec <memset>
  if(hspi->Instance==SPI1)
 8001456:	6823      	ldr	r3, [r4, #0]
 8001458:	4a25      	ldr	r2, [pc, #148]	; (80014f0 <HAL_SPI_MspInit+0xac>)
 800145a:	4293      	cmp	r3, r2
 800145c:	d127      	bne.n	80014ae <HAL_SPI_MspInit+0x6a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800145e:	4b25      	ldr	r3, [pc, #148]	; (80014f4 <HAL_SPI_MspInit+0xb0>)
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001460:	21b0      	movs	r1, #176	; 0xb0
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001462:	699a      	ldr	r2, [r3, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001464:	4824      	ldr	r0, [pc, #144]	; (80014f8 <HAL_SPI_MspInit+0xb4>)
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001466:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800146a:	619a      	str	r2, [r3, #24]
 800146c:	699a      	ldr	r2, [r3, #24]
 800146e:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001472:	9200      	str	r2, [sp, #0]
 8001474:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001476:	699a      	ldr	r2, [r3, #24]
 8001478:	f042 0204 	orr.w	r2, r2, #4
 800147c:	619a      	str	r2, [r3, #24]
 800147e:	699b      	ldr	r3, [r3, #24]
 8001480:	f003 0304 	and.w	r3, r3, #4
 8001484:	9301      	str	r3, [sp, #4]
 8001486:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001488:	2302      	movs	r3, #2
 800148a:	e9cd 1304 	strd	r1, r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800148e:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001490:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001492:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001494:	f000 fdc4 	bl	8002020 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001498:	2040      	movs	r0, #64	; 0x40
 800149a:	2300      	movs	r3, #0
 800149c:	e9cd 0304 	strd	r0, r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014a0:	4815      	ldr	r0, [pc, #84]	; (80014f8 <HAL_SPI_MspInit+0xb4>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a2:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014a4:	a904      	add	r1, sp, #16
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = DISP_SPI_CS_Pin|DISP_SPI_SCK_Pin|GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014a6:	f000 fdbb 	bl	8002020 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80014aa:	b008      	add	sp, #32
 80014ac:	bd10      	pop	{r4, pc}
  else if(hspi->Instance==SPI2)
 80014ae:	4a13      	ldr	r2, [pc, #76]	; (80014fc <HAL_SPI_MspInit+0xb8>)
 80014b0:	4293      	cmp	r3, r2
 80014b2:	d1fa      	bne.n	80014aa <HAL_SPI_MspInit+0x66>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80014b4:	4b0f      	ldr	r3, [pc, #60]	; (80014f4 <HAL_SPI_MspInit+0xb0>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014b6:	4812      	ldr	r0, [pc, #72]	; (8001500 <HAL_SPI_MspInit+0xbc>)
    __HAL_RCC_SPI2_CLK_ENABLE();
 80014b8:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014ba:	a904      	add	r1, sp, #16
    __HAL_RCC_SPI2_CLK_ENABLE();
 80014bc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80014c0:	61da      	str	r2, [r3, #28]
 80014c2:	69da      	ldr	r2, [r3, #28]
 80014c4:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80014c8:	9202      	str	r2, [sp, #8]
 80014ca:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014cc:	699a      	ldr	r2, [r3, #24]
 80014ce:	f042 0208 	orr.w	r2, r2, #8
 80014d2:	619a      	str	r2, [r3, #24]
 80014d4:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014d6:	f44f 4230 	mov.w	r2, #45056	; 0xb000
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014da:	f003 0308 	and.w	r3, r3, #8
 80014de:	9303      	str	r3, [sp, #12]
 80014e0:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014e2:	2302      	movs	r3, #2
 80014e4:	e9cd 2304 	strd	r2, r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80014e8:	2303      	movs	r3, #3
 80014ea:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014ec:	e7db      	b.n	80014a6 <HAL_SPI_MspInit+0x62>
 80014ee:	bf00      	nop
 80014f0:	40013000 	.word	0x40013000
 80014f4:	40021000 	.word	0x40021000
 80014f8:	40010800 	.word	0x40010800
 80014fc:	40003800 	.word	0x40003800
 8001500:	40010c00 	.word	0x40010c00

08001504 <HAL_TIM_PWM_MspInit>:
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
  if(htim_pwm->Instance==TIM1)
 8001504:	6802      	ldr	r2, [r0, #0]
 8001506:	4b08      	ldr	r3, [pc, #32]	; (8001528 <HAL_TIM_PWM_MspInit+0x24>)
{
 8001508:	b082      	sub	sp, #8
  if(htim_pwm->Instance==TIM1)
 800150a:	429a      	cmp	r2, r3
 800150c:	d10a      	bne.n	8001524 <HAL_TIM_PWM_MspInit+0x20>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800150e:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 8001512:	699a      	ldr	r2, [r3, #24]
 8001514:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001518:	619a      	str	r2, [r3, #24]
 800151a:	699b      	ldr	r3, [r3, #24]
 800151c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001520:	9301      	str	r3, [sp, #4]
 8001522:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001524:	b002      	add	sp, #8
 8001526:	4770      	bx	lr
 8001528:	40012c00 	.word	0x40012c00

0800152c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800152c:	b510      	push	{r4, lr}
 800152e:	4604      	mov	r4, r0
 8001530:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001532:	2210      	movs	r2, #16
 8001534:	2100      	movs	r1, #0
 8001536:	a802      	add	r0, sp, #8
 8001538:	f002 f958 	bl	80037ec <memset>
  if(htim->Instance==TIM1)
 800153c:	6822      	ldr	r2, [r4, #0]
 800153e:	4b0d      	ldr	r3, [pc, #52]	; (8001574 <HAL_TIM_MspPostInit+0x48>)
 8001540:	429a      	cmp	r2, r3
 8001542:	d114      	bne.n	800156e <HAL_TIM_MspPostInit+0x42>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001544:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 8001548:	699a      	ldr	r2, [r3, #24]
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = DISP_BRIGHT_PWM_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    HAL_GPIO_Init(DISP_BRIGHT_PWM_GPIO_Port, &GPIO_InitStruct);
 800154a:	480b      	ldr	r0, [pc, #44]	; (8001578 <HAL_TIM_MspPostInit+0x4c>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800154c:	f042 0204 	orr.w	r2, r2, #4
 8001550:	619a      	str	r2, [r3, #24]
 8001552:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001554:	f44f 7280 	mov.w	r2, #256	; 0x100
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001558:	f003 0304 	and.w	r3, r3, #4
 800155c:	9301      	str	r3, [sp, #4]
 800155e:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001560:	2302      	movs	r3, #2
    HAL_GPIO_Init(DISP_BRIGHT_PWM_GPIO_Port, &GPIO_InitStruct);
 8001562:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001564:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001568:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(DISP_BRIGHT_PWM_GPIO_Port, &GPIO_InitStruct);
 800156a:	f000 fd59 	bl	8002020 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800156e:	b006      	add	sp, #24
 8001570:	bd10      	pop	{r4, pc}
 8001572:	bf00      	nop
 8001574:	40012c00 	.word	0x40012c00
 8001578:	40010800 	.word	0x40010800

0800157c <HAL_UART_MspInit>:
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800157c:	2210      	movs	r2, #16
{
 800157e:	b510      	push	{r4, lr}
 8001580:	4604      	mov	r4, r0
 8001582:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001584:	eb0d 0002 	add.w	r0, sp, r2
 8001588:	2100      	movs	r1, #0
 800158a:	f002 f92f 	bl	80037ec <memset>
  if(huart->Instance==USART1)
 800158e:	6823      	ldr	r3, [r4, #0]
 8001590:	4a33      	ldr	r2, [pc, #204]	; (8001660 <HAL_UART_MspInit+0xe4>)
 8001592:	4293      	cmp	r3, r2
 8001594:	d131      	bne.n	80015fa <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001596:	4b33      	ldr	r3, [pc, #204]	; (8001664 <HAL_UART_MspInit+0xe8>)
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ESP_UART_TX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001598:	f44f 7100 	mov.w	r1, #512	; 0x200
    __HAL_RCC_USART1_CLK_ENABLE();
 800159c:	699a      	ldr	r2, [r3, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(ESP_UART_TX_GPIO_Port, &GPIO_InitStruct);
 800159e:	4832      	ldr	r0, [pc, #200]	; (8001668 <HAL_UART_MspInit+0xec>)
    __HAL_RCC_USART1_CLK_ENABLE();
 80015a0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80015a4:	619a      	str	r2, [r3, #24]
 80015a6:	699a      	ldr	r2, [r3, #24]

    GPIO_InitStruct.Pin = ESP_UART_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015a8:	2400      	movs	r4, #0
    __HAL_RCC_USART1_CLK_ENABLE();
 80015aa:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80015ae:	9200      	str	r2, [sp, #0]
 80015b0:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015b2:	699a      	ldr	r2, [r3, #24]
 80015b4:	f042 0204 	orr.w	r2, r2, #4
 80015b8:	619a      	str	r2, [r3, #24]
 80015ba:	699b      	ldr	r3, [r3, #24]
 80015bc:	f003 0304 	and.w	r3, r3, #4
 80015c0:	9301      	str	r3, [sp, #4]
 80015c2:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015c4:	2302      	movs	r3, #2
 80015c6:	e9cd 1304 	strd	r1, r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80015ca:	2303      	movs	r3, #3
    HAL_GPIO_Init(ESP_UART_TX_GPIO_Port, &GPIO_InitStruct);
 80015cc:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80015ce:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(ESP_UART_TX_GPIO_Port, &GPIO_InitStruct);
 80015d0:	f000 fd26 	bl	8002020 <HAL_GPIO_Init>
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(ESP_UART_RX_GPIO_Port, &GPIO_InitStruct);
 80015d8:	4823      	ldr	r0, [pc, #140]	; (8001668 <HAL_UART_MspInit+0xec>)
 80015da:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015dc:	e9cd 3404 	strd	r3, r4, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e0:	9406      	str	r4, [sp, #24]
    HAL_GPIO_Init(ESP_UART_RX_GPIO_Port, &GPIO_InitStruct);
 80015e2:	f000 fd1d 	bl	8002020 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80015e6:	2025      	movs	r0, #37	; 0x25
 80015e8:	4622      	mov	r2, r4
 80015ea:	4621      	mov	r1, r4
 80015ec:	f000 fb64 	bl	8001cb8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80015f0:	2025      	movs	r0, #37	; 0x25
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(EXT_RX_GPIO_Port, &GPIO_InitStruct);

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80015f2:	f000 fb93 	bl	8001d1c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80015f6:	b008      	add	sp, #32
 80015f8:	bd10      	pop	{r4, pc}
  else if(huart->Instance==USART3)
 80015fa:	4a1c      	ldr	r2, [pc, #112]	; (800166c <HAL_UART_MspInit+0xf0>)
 80015fc:	4293      	cmp	r3, r2
 80015fe:	d1fa      	bne.n	80015f6 <HAL_UART_MspInit+0x7a>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001600:	4b18      	ldr	r3, [pc, #96]	; (8001664 <HAL_UART_MspInit+0xe8>)
    HAL_GPIO_Init(EXT_TX_GPIO_Port, &GPIO_InitStruct);
 8001602:	481b      	ldr	r0, [pc, #108]	; (8001670 <HAL_UART_MspInit+0xf4>)
    __HAL_RCC_USART3_CLK_ENABLE();
 8001604:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(EXT_TX_GPIO_Port, &GPIO_InitStruct);
 8001606:	a904      	add	r1, sp, #16
    __HAL_RCC_USART3_CLK_ENABLE();
 8001608:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800160c:	61da      	str	r2, [r3, #28]
 800160e:	69da      	ldr	r2, [r3, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001610:	2400      	movs	r4, #0
    __HAL_RCC_USART3_CLK_ENABLE();
 8001612:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 8001616:	9202      	str	r2, [sp, #8]
 8001618:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800161a:	699a      	ldr	r2, [r3, #24]
 800161c:	f042 0208 	orr.w	r2, r2, #8
 8001620:	619a      	str	r2, [r3, #24]
 8001622:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001624:	f44f 6280 	mov.w	r2, #1024	; 0x400
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001628:	f003 0308 	and.w	r3, r3, #8
 800162c:	9303      	str	r3, [sp, #12]
 800162e:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001630:	2302      	movs	r3, #2
 8001632:	e9cd 2304 	strd	r2, r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001636:	2303      	movs	r3, #3
 8001638:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(EXT_TX_GPIO_Port, &GPIO_InitStruct);
 800163a:	f000 fcf1 	bl	8002020 <HAL_GPIO_Init>
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800163e:	f44f 6300 	mov.w	r3, #2048	; 0x800
    HAL_GPIO_Init(EXT_RX_GPIO_Port, &GPIO_InitStruct);
 8001642:	480b      	ldr	r0, [pc, #44]	; (8001670 <HAL_UART_MspInit+0xf4>)
 8001644:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001646:	e9cd 3404 	strd	r3, r4, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800164a:	9406      	str	r4, [sp, #24]
    HAL_GPIO_Init(EXT_RX_GPIO_Port, &GPIO_InitStruct);
 800164c:	f000 fce8 	bl	8002020 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001650:	2027      	movs	r0, #39	; 0x27
 8001652:	4622      	mov	r2, r4
 8001654:	4621      	mov	r1, r4
 8001656:	f000 fb2f 	bl	8001cb8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800165a:	2027      	movs	r0, #39	; 0x27
 800165c:	e7c9      	b.n	80015f2 <HAL_UART_MspInit+0x76>
 800165e:	bf00      	nop
 8001660:	40013800 	.word	0x40013800
 8001664:	40021000 	.word	0x40021000
 8001668:	40010800 	.word	0x40010800
 800166c:	40004800 	.word	0x40004800
 8001670:	40010c00 	.word	0x40010c00

08001674 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001674:	e7fe      	b.n	8001674 <NMI_Handler>

08001676 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001676:	e7fe      	b.n	8001676 <HardFault_Handler>

08001678 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001678:	e7fe      	b.n	8001678 <MemManage_Handler>

0800167a <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800167a:	e7fe      	b.n	800167a <BusFault_Handler>

0800167c <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800167c:	e7fe      	b.n	800167c <UsageFault_Handler>

0800167e <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800167e:	4770      	bx	lr

08001680 <DebugMon_Handler>:
 8001680:	4770      	bx	lr

08001682 <PendSV_Handler>:
 8001682:	4770      	bx	lr

08001684 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001684:	f000 b8ba 	b.w	80017fc <HAL_IncTick>

08001688 <DMA1_Channel1_IRQHandler>:
void DMA1_Channel1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001688:	4801      	ldr	r0, [pc, #4]	; (8001690 <DMA1_Channel1_IRQHandler+0x8>)
 800168a:	f000 bc37 	b.w	8001efc <HAL_DMA_IRQHandler>
 800168e:	bf00      	nop
 8001690:	2000063c 	.word	0x2000063c

08001694 <USART1_IRQHandler>:
void USART1_IRQHandler(void)
{
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001694:	4801      	ldr	r0, [pc, #4]	; (800169c <USART1_IRQHandler+0x8>)
 8001696:	f001 bf37 	b.w	8003508 <HAL_UART_IRQHandler>
 800169a:	bf00      	nop
 800169c:	2000078c 	.word	0x2000078c

080016a0 <USART3_IRQHandler>:
void USART3_IRQHandler(void)
{
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80016a0:	4801      	ldr	r0, [pc, #4]	; (80016a8 <USART3_IRQHandler+0x8>)
 80016a2:	f001 bf31 	b.w	8003508 <HAL_UART_IRQHandler>
 80016a6:	bf00      	nop
 80016a8:	200007d0 	.word	0x200007d0

080016ac <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 80016ac:	2001      	movs	r0, #1
 80016ae:	4770      	bx	lr

080016b0 <_kill>:

int _kill(int pid, int sig)
{
 80016b0:	b508      	push	{r3, lr}
	errno = EINVAL;
 80016b2:	f002 f863 	bl	800377c <__errno>
 80016b6:	2316      	movs	r3, #22
 80016b8:	6003      	str	r3, [r0, #0]
	return -1;
}
 80016ba:	f04f 30ff 	mov.w	r0, #4294967295
 80016be:	bd08      	pop	{r3, pc}

080016c0 <_exit>:

void _exit (int status)
{
 80016c0:	b508      	push	{r3, lr}
	errno = EINVAL;
 80016c2:	f002 f85b 	bl	800377c <__errno>
 80016c6:	2316      	movs	r3, #22
 80016c8:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 80016ca:	e7fe      	b.n	80016ca <_exit+0xa>

080016cc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80016cc:	b570      	push	{r4, r5, r6, lr}
 80016ce:	460d      	mov	r5, r1
 80016d0:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016d2:	460e      	mov	r6, r1
 80016d4:	1b73      	subs	r3, r6, r5
 80016d6:	429c      	cmp	r4, r3
 80016d8:	dc01      	bgt.n	80016de <_read+0x12>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 80016da:	4620      	mov	r0, r4
 80016dc:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 80016de:	f3af 8000 	nop.w
 80016e2:	f806 0b01 	strb.w	r0, [r6], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016e6:	e7f5      	b.n	80016d4 <_read+0x8>

080016e8 <_close>:
}

int _close(int file)
{
	return -1;
}
 80016e8:	f04f 30ff 	mov.w	r0, #4294967295
 80016ec:	4770      	bx	lr

080016ee <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 80016ee:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
 80016f2:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 80016f4:	604b      	str	r3, [r1, #4]
}
 80016f6:	4770      	bx	lr

080016f8 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 80016f8:	2001      	movs	r0, #1
 80016fa:	4770      	bx	lr

080016fc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 80016fc:	2000      	movs	r0, #0
 80016fe:	4770      	bx	lr

08001700 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001700:	4a0b      	ldr	r2, [pc, #44]	; (8001730 <_sbrk+0x30>)
{
 8001702:	4603      	mov	r3, r0
  if (NULL == __sbrk_heap_end)
 8001704:	6811      	ldr	r1, [r2, #0]
{
 8001706:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 8001708:	b909      	cbnz	r1, 800170e <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 800170a:	490a      	ldr	r1, [pc, #40]	; (8001734 <_sbrk+0x34>)
 800170c:	6011      	str	r1, [r2, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800170e:	6810      	ldr	r0, [r2, #0]
 8001710:	4909      	ldr	r1, [pc, #36]	; (8001738 <_sbrk+0x38>)
 8001712:	4c0a      	ldr	r4, [pc, #40]	; (800173c <_sbrk+0x3c>)
 8001714:	4403      	add	r3, r0
 8001716:	1b09      	subs	r1, r1, r4
 8001718:	428b      	cmp	r3, r1
 800171a:	d906      	bls.n	800172a <_sbrk+0x2a>
  {
    errno = ENOMEM;
 800171c:	f002 f82e 	bl	800377c <__errno>
 8001720:	230c      	movs	r3, #12
 8001722:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8001724:	f04f 30ff 	mov.w	r0, #4294967295

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 8001728:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 800172a:	6013      	str	r3, [r2, #0]
  return (void *)prev_heap_end;
 800172c:	e7fc      	b.n	8001728 <_sbrk+0x28>
 800172e:	bf00      	nop
 8001730:	20000eac 	.word	0x20000eac
 8001734:	20000ec8 	.word	0x20000ec8
 8001738:	20005000 	.word	0x20005000
 800173c:	00000400 	.word	0x00000400

08001740 <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001740:	4770      	bx	lr
	...

08001744 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001744:	480c      	ldr	r0, [pc, #48]	; (8001778 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001746:	490d      	ldr	r1, [pc, #52]	; (800177c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001748:	4a0d      	ldr	r2, [pc, #52]	; (8001780 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800174a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800174c:	e002      	b.n	8001754 <LoopCopyDataInit>

0800174e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800174e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001750:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001752:	3304      	adds	r3, #4

08001754 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001754:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001756:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001758:	d3f9      	bcc.n	800174e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800175a:	4a0a      	ldr	r2, [pc, #40]	; (8001784 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800175c:	4c0a      	ldr	r4, [pc, #40]	; (8001788 <LoopFillZerobss+0x22>)
  movs r3, #0
 800175e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001760:	e001      	b.n	8001766 <LoopFillZerobss>

08001762 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001762:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001764:	3204      	adds	r2, #4

08001766 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001766:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001768:	d3fb      	bcc.n	8001762 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800176a:	f7ff ffe9 	bl	8001740 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800176e:	f002 f80b 	bl	8003788 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001772:	f7ff fb43 	bl	8000dfc <main>
  bx lr
 8001776:	4770      	bx	lr
  ldr r0, =_sdata
 8001778:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800177c:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8001780:	08006f5c 	.word	0x08006f5c
  ldr r2, =_sbss
 8001784:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8001788:	20000ec4 	.word	0x20000ec4

0800178c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800178c:	e7fe      	b.n	800178c <ADC1_2_IRQHandler>
	...

08001790 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001790:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001792:	4b0e      	ldr	r3, [pc, #56]	; (80017cc <HAL_InitTick+0x3c>)
{
 8001794:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001796:	7818      	ldrb	r0, [r3, #0]
 8001798:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800179c:	fbb3 f3f0 	udiv	r3, r3, r0
 80017a0:	4a0b      	ldr	r2, [pc, #44]	; (80017d0 <HAL_InitTick+0x40>)
 80017a2:	6810      	ldr	r0, [r2, #0]
 80017a4:	fbb0 f0f3 	udiv	r0, r0, r3
 80017a8:	f000 fac6 	bl	8001d38 <HAL_SYSTICK_Config>
 80017ac:	4604      	mov	r4, r0
 80017ae:	b958      	cbnz	r0, 80017c8 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017b0:	2d0f      	cmp	r5, #15
 80017b2:	d809      	bhi.n	80017c8 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017b4:	4602      	mov	r2, r0
 80017b6:	4629      	mov	r1, r5
 80017b8:	f04f 30ff 	mov.w	r0, #4294967295
 80017bc:	f000 fa7c 	bl	8001cb8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80017c0:	4620      	mov	r0, r4
 80017c2:	4b04      	ldr	r3, [pc, #16]	; (80017d4 <HAL_InitTick+0x44>)
 80017c4:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80017c6:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80017c8:	2001      	movs	r0, #1
 80017ca:	e7fc      	b.n	80017c6 <HAL_InitTick+0x36>
 80017cc:	2000000c 	.word	0x2000000c
 80017d0:	20000008 	.word	0x20000008
 80017d4:	20000010 	.word	0x20000010

080017d8 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80017d8:	4a07      	ldr	r2, [pc, #28]	; (80017f8 <HAL_Init+0x20>)
{
 80017da:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80017dc:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017de:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80017e0:	f043 0310 	orr.w	r3, r3, #16
 80017e4:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017e6:	f000 fa55 	bl	8001c94 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80017ea:	200f      	movs	r0, #15
 80017ec:	f7ff ffd0 	bl	8001790 <HAL_InitTick>
  HAL_MspInit();
 80017f0:	f7ff fd8c 	bl	800130c <HAL_MspInit>
}
 80017f4:	2000      	movs	r0, #0
 80017f6:	bd08      	pop	{r3, pc}
 80017f8:	40022000 	.word	0x40022000

080017fc <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80017fc:	4a03      	ldr	r2, [pc, #12]	; (800180c <HAL_IncTick+0x10>)
 80017fe:	4b04      	ldr	r3, [pc, #16]	; (8001810 <HAL_IncTick+0x14>)
 8001800:	6811      	ldr	r1, [r2, #0]
 8001802:	781b      	ldrb	r3, [r3, #0]
 8001804:	440b      	add	r3, r1
 8001806:	6013      	str	r3, [r2, #0]
}
 8001808:	4770      	bx	lr
 800180a:	bf00      	nop
 800180c:	20000eb0 	.word	0x20000eb0
 8001810:	2000000c 	.word	0x2000000c

08001814 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001814:	4b01      	ldr	r3, [pc, #4]	; (800181c <HAL_GetTick+0x8>)
 8001816:	6818      	ldr	r0, [r3, #0]
}
 8001818:	4770      	bx	lr
 800181a:	bf00      	nop
 800181c:	20000eb0 	.word	0x20000eb0

08001820 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001820:	b538      	push	{r3, r4, r5, lr}
 8001822:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001824:	f7ff fff6 	bl	8001814 <HAL_GetTick>
 8001828:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800182a:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 800182c:	bf1e      	ittt	ne
 800182e:	4b04      	ldrne	r3, [pc, #16]	; (8001840 <HAL_Delay+0x20>)
 8001830:	781b      	ldrbne	r3, [r3, #0]
 8001832:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001834:	f7ff ffee 	bl	8001814 <HAL_GetTick>
 8001838:	1b43      	subs	r3, r0, r5
 800183a:	42a3      	cmp	r3, r4
 800183c:	d3fa      	bcc.n	8001834 <HAL_Delay+0x14>
  {
  }
}
 800183e:	bd38      	pop	{r3, r4, r5, pc}
 8001840:	2000000c 	.word	0x2000000c

08001844 <ADC_DMAConvCplt>:
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001844:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 8001846:	b510      	push	{r4, lr}
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001848:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800184a:	f012 0f50 	tst.w	r2, #80	; 0x50
 800184e:	d11b      	bne.n	8001888 <ADC_DMAConvCplt+0x44>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001850:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001852:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001856:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001858:	681a      	ldr	r2, [r3, #0]
 800185a:	6892      	ldr	r2, [r2, #8]
 800185c:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 8001860:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
 8001864:	d10c      	bne.n	8001880 <ADC_DMAConvCplt+0x3c>
 8001866:	7b1a      	ldrb	r2, [r3, #12]
 8001868:	b952      	cbnz	r2, 8001880 <ADC_DMAConvCplt+0x3c>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800186a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800186c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001870:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001872:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001874:	04d2      	lsls	r2, r2, #19
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001876:	bf5e      	ittt	pl
 8001878:	6a9a      	ldrpl	r2, [r3, #40]	; 0x28
 800187a:	f042 0201 	orrpl.w	r2, r2, #1
 800187e:	629a      	strpl	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001880:	4618      	mov	r0, r3
 8001882:	f7ff fd40 	bl	8001306 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8001886:	bd10      	pop	{r4, pc}
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8001888:	6a1b      	ldr	r3, [r3, #32]
}
 800188a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    hadc->DMA_Handle->XferErrorCallback(hdma);
 800188e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001890:	4718      	bx	r3

08001892 <HAL_ADC_ConvHalfCpltCallback>:
 8001892:	4770      	bx	lr

08001894 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001894:	b508      	push	{r3, lr}
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001896:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8001898:	f7ff fffb 	bl	8001892 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800189c:	bd08      	pop	{r3, pc}

0800189e <HAL_ADC_ErrorCallback>:
 800189e:	4770      	bx	lr

080018a0 <ADC_DMAError>:
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80018a0:	6a40      	ldr	r0, [r0, #36]	; 0x24
{
 80018a2:	b508      	push	{r3, lr}
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80018a4:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80018a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80018aa:	6283      	str	r3, [r0, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80018ac:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80018ae:	f043 0304 	orr.w	r3, r3, #4
 80018b2:	62c3      	str	r3, [r0, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80018b4:	f7ff fff3 	bl	800189e <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80018b8:	bd08      	pop	{r3, pc}
	...

080018bc <HAL_ADC_ConfigChannel>:
  __IO uint32_t wait_loop_index = 0U;
 80018bc:	2300      	movs	r3, #0
{ 
 80018be:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0U;
 80018c0:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 80018c2:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
{ 
 80018c6:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 80018c8:	2b01      	cmp	r3, #1
 80018ca:	d06c      	beq.n	80019a6 <HAL_ADC_ConfigChannel+0xea>
 80018cc:	2301      	movs	r3, #1
 80018ce:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  if (sConfig->Rank < 7U)
 80018d2:	684d      	ldr	r5, [r1, #4]
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80018d4:	6802      	ldr	r2, [r0, #0]
  if (sConfig->Rank < 7U)
 80018d6:	2d06      	cmp	r5, #6
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80018d8:	6808      	ldr	r0, [r1, #0]
 80018da:	eb05 0385 	add.w	r3, r5, r5, lsl #2
  if (sConfig->Rank < 7U)
 80018de:	d822      	bhi.n	8001926 <HAL_ADC_ConfigChannel+0x6a>
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80018e0:	261f      	movs	r6, #31
 80018e2:	6b55      	ldr	r5, [r2, #52]	; 0x34
 80018e4:	3b05      	subs	r3, #5
 80018e6:	409e      	lsls	r6, r3
 80018e8:	ea25 0506 	bic.w	r5, r5, r6
 80018ec:	fa00 f303 	lsl.w	r3, r0, r3
 80018f0:	432b      	orrs	r3, r5
 80018f2:	6353      	str	r3, [r2, #52]	; 0x34
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80018f4:	2809      	cmp	r0, #9
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80018f6:	688b      	ldr	r3, [r1, #8]
 80018f8:	eb00 0540 	add.w	r5, r0, r0, lsl #1
 80018fc:	f04f 0107 	mov.w	r1, #7
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001900:	d929      	bls.n	8001956 <HAL_ADC_ConfigChannel+0x9a>
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001902:	68d6      	ldr	r6, [r2, #12]
 8001904:	3d1e      	subs	r5, #30
 8001906:	40a9      	lsls	r1, r5
 8001908:	ea26 0101 	bic.w	r1, r6, r1
 800190c:	40ab      	lsls	r3, r5
 800190e:	430b      	orrs	r3, r1
 8001910:	60d3      	str	r3, [r2, #12]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001912:	f1a0 0310 	sub.w	r3, r0, #16
 8001916:	2b01      	cmp	r3, #1
 8001918:	d925      	bls.n	8001966 <HAL_ADC_ConfigChannel+0xaa>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800191a:	2000      	movs	r0, #0
  __HAL_UNLOCK(hadc);
 800191c:	2300      	movs	r3, #0
 800191e:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
}
 8001922:	b002      	add	sp, #8
 8001924:	bd70      	pop	{r4, r5, r6, pc}
  else if (sConfig->Rank < 13U)
 8001926:	2d0c      	cmp	r5, #12
 8001928:	f04f 051f 	mov.w	r5, #31
 800192c:	d809      	bhi.n	8001942 <HAL_ADC_ConfigChannel+0x86>
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800192e:	6b16      	ldr	r6, [r2, #48]	; 0x30
 8001930:	3b23      	subs	r3, #35	; 0x23
 8001932:	409d      	lsls	r5, r3
 8001934:	ea26 0505 	bic.w	r5, r6, r5
 8001938:	fa00 f303 	lsl.w	r3, r0, r3
 800193c:	432b      	orrs	r3, r5
 800193e:	6313      	str	r3, [r2, #48]	; 0x30
 8001940:	e7d8      	b.n	80018f4 <HAL_ADC_ConfigChannel+0x38>
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001942:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
 8001944:	3b41      	subs	r3, #65	; 0x41
 8001946:	409d      	lsls	r5, r3
 8001948:	ea26 0505 	bic.w	r5, r6, r5
 800194c:	fa00 f303 	lsl.w	r3, r0, r3
 8001950:	432b      	orrs	r3, r5
 8001952:	62d3      	str	r3, [r2, #44]	; 0x2c
 8001954:	e7ce      	b.n	80018f4 <HAL_ADC_ConfigChannel+0x38>
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001956:	6910      	ldr	r0, [r2, #16]
 8001958:	40a9      	lsls	r1, r5
 800195a:	ea20 0101 	bic.w	r1, r0, r1
 800195e:	40ab      	lsls	r3, r5
 8001960:	430b      	orrs	r3, r1
 8001962:	6113      	str	r3, [r2, #16]
 8001964:	e7d9      	b.n	800191a <HAL_ADC_ConfigChannel+0x5e>
    if (hadc->Instance == ADC1)
 8001966:	4b11      	ldr	r3, [pc, #68]	; (80019ac <HAL_ADC_ConfigChannel+0xf0>)
 8001968:	429a      	cmp	r2, r3
 800196a:	d116      	bne.n	800199a <HAL_ADC_ConfigChannel+0xde>
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 800196c:	6893      	ldr	r3, [r2, #8]
 800196e:	021b      	lsls	r3, r3, #8
 8001970:	d4d3      	bmi.n	800191a <HAL_ADC_ConfigChannel+0x5e>
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001972:	6893      	ldr	r3, [r2, #8]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001974:	2810      	cmp	r0, #16
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001976:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800197a:	6093      	str	r3, [r2, #8]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800197c:	d1cd      	bne.n	800191a <HAL_ADC_ConfigChannel+0x5e>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800197e:	4b0c      	ldr	r3, [pc, #48]	; (80019b0 <HAL_ADC_ConfigChannel+0xf4>)
 8001980:	4a0c      	ldr	r2, [pc, #48]	; (80019b4 <HAL_ADC_ConfigChannel+0xf8>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	fbb3 f3f2 	udiv	r3, r3, r2
 8001988:	220a      	movs	r2, #10
 800198a:	4353      	muls	r3, r2
            wait_loop_index--;
 800198c:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 800198e:	9b01      	ldr	r3, [sp, #4]
 8001990:	2b00      	cmp	r3, #0
 8001992:	d0c2      	beq.n	800191a <HAL_ADC_ConfigChannel+0x5e>
            wait_loop_index--;
 8001994:	9b01      	ldr	r3, [sp, #4]
 8001996:	3b01      	subs	r3, #1
 8001998:	e7f8      	b.n	800198c <HAL_ADC_ConfigChannel+0xd0>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800199a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
      tmp_hal_status = HAL_ERROR;
 800199c:	2001      	movs	r0, #1
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800199e:	f043 0320 	orr.w	r3, r3, #32
 80019a2:	62a3      	str	r3, [r4, #40]	; 0x28
      tmp_hal_status = HAL_ERROR;
 80019a4:	e7ba      	b.n	800191c <HAL_ADC_ConfigChannel+0x60>
  __HAL_LOCK(hadc);
 80019a6:	2002      	movs	r0, #2
 80019a8:	e7bb      	b.n	8001922 <HAL_ADC_ConfigChannel+0x66>
 80019aa:	bf00      	nop
 80019ac:	40012400 	.word	0x40012400
 80019b0:	20000008 	.word	0x20000008
 80019b4:	000f4240 	.word	0x000f4240

080019b8 <ADC_Enable>:
  __IO uint32_t wait_loop_index = 0U;
 80019b8:	2300      	movs	r3, #0
{
 80019ba:	b537      	push	{r0, r1, r2, r4, r5, lr}
  __IO uint32_t wait_loop_index = 0U;
 80019bc:	9301      	str	r3, [sp, #4]
  if (ADC_IS_ENABLE(hadc) == RESET)
 80019be:	6803      	ldr	r3, [r0, #0]
{
 80019c0:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 80019c2:	689a      	ldr	r2, [r3, #8]
 80019c4:	07d2      	lsls	r2, r2, #31
 80019c6:	d502      	bpl.n	80019ce <ADC_Enable+0x16>
  return HAL_OK;
 80019c8:	2000      	movs	r0, #0
}
 80019ca:	b003      	add	sp, #12
 80019cc:	bd30      	pop	{r4, r5, pc}
    __HAL_ADC_ENABLE(hadc);
 80019ce:	689a      	ldr	r2, [r3, #8]
 80019d0:	f042 0201 	orr.w	r2, r2, #1
 80019d4:	609a      	str	r2, [r3, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80019d6:	4b14      	ldr	r3, [pc, #80]	; (8001a28 <ADC_Enable+0x70>)
 80019d8:	4a14      	ldr	r2, [pc, #80]	; (8001a2c <ADC_Enable+0x74>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	fbb3 f3f2 	udiv	r3, r3, r2
      wait_loop_index--;
 80019e0:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 80019e2:	9b01      	ldr	r3, [sp, #4]
 80019e4:	b9e3      	cbnz	r3, 8001a20 <ADC_Enable+0x68>
    tickstart = HAL_GetTick();
 80019e6:	f7ff ff15 	bl	8001814 <HAL_GetTick>
 80019ea:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) == RESET)
 80019ec:	6823      	ldr	r3, [r4, #0]
 80019ee:	689b      	ldr	r3, [r3, #8]
 80019f0:	07db      	lsls	r3, r3, #31
 80019f2:	d4e9      	bmi.n	80019c8 <ADC_Enable+0x10>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80019f4:	f7ff ff0e 	bl	8001814 <HAL_GetTick>
 80019f8:	1b40      	subs	r0, r0, r5
 80019fa:	2802      	cmp	r0, #2
 80019fc:	d9f6      	bls.n	80019ec <ADC_Enable+0x34>
        if(ADC_IS_ENABLE(hadc) == RESET)
 80019fe:	6823      	ldr	r3, [r4, #0]
 8001a00:	689b      	ldr	r3, [r3, #8]
 8001a02:	f013 0301 	ands.w	r3, r3, #1
 8001a06:	d1f1      	bne.n	80019ec <ADC_Enable+0x34>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a08:	6aa2      	ldr	r2, [r4, #40]	; 0x28
          return HAL_ERROR;
 8001a0a:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a0c:	f042 0210 	orr.w	r2, r2, #16
 8001a10:	62a2      	str	r2, [r4, #40]	; 0x28
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a12:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
          __HAL_UNLOCK(hadc);
 8001a14:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a18:	f042 0201 	orr.w	r2, r2, #1
 8001a1c:	62e2      	str	r2, [r4, #44]	; 0x2c
          return HAL_ERROR;
 8001a1e:	e7d4      	b.n	80019ca <ADC_Enable+0x12>
      wait_loop_index--;
 8001a20:	9b01      	ldr	r3, [sp, #4]
 8001a22:	3b01      	subs	r3, #1
 8001a24:	e7dc      	b.n	80019e0 <ADC_Enable+0x28>
 8001a26:	bf00      	nop
 8001a28:	20000008 	.word	0x20000008
 8001a2c:	000f4240 	.word	0x000f4240

08001a30 <HAL_ADC_Start_DMA>:
{
 8001a30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8001a34:	4b40      	ldr	r3, [pc, #256]	; (8001b38 <HAL_ADC_Start_DMA+0x108>)
{
 8001a36:	4690      	mov	r8, r2
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8001a38:	6802      	ldr	r2, [r0, #0]
{
 8001a3a:	4604      	mov	r4, r0
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8001a3c:	429a      	cmp	r2, r3
{
 8001a3e:	460f      	mov	r7, r1
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8001a40:	d002      	beq.n	8001a48 <HAL_ADC_Start_DMA+0x18>
 8001a42:	493e      	ldr	r1, [pc, #248]	; (8001b3c <HAL_ADC_Start_DMA+0x10c>)
 8001a44:	428a      	cmp	r2, r1
 8001a46:	d103      	bne.n	8001a50 <HAL_ADC_Start_DMA+0x20>
 8001a48:	685b      	ldr	r3, [r3, #4]
 8001a4a:	f413 2f70 	tst.w	r3, #983040	; 0xf0000
 8001a4e:	d16e      	bne.n	8001b2e <HAL_ADC_Start_DMA+0xfe>
    __HAL_LOCK(hadc);
 8001a50:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8001a54:	2b01      	cmp	r3, #1
 8001a56:	d06c      	beq.n	8001b32 <HAL_ADC_Start_DMA+0x102>
 8001a58:	2301      	movs	r3, #1
    tmp_hal_status = ADC_Enable(hadc);
 8001a5a:	4620      	mov	r0, r4
    __HAL_LOCK(hadc);
 8001a5c:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
    tmp_hal_status = ADC_Enable(hadc);
 8001a60:	f7ff ffaa 	bl	80019b8 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8001a64:	4606      	mov	r6, r0
 8001a66:	2800      	cmp	r0, #0
 8001a68:	d15d      	bne.n	8001b26 <HAL_ADC_Start_DMA+0xf6>
      ADC_STATE_CLR_SET(hadc->State,
 8001a6a:	6aa5      	ldr	r5, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001a6c:	6821      	ldr	r1, [r4, #0]
 8001a6e:	4b33      	ldr	r3, [pc, #204]	; (8001b3c <HAL_ADC_Start_DMA+0x10c>)
      ADC_STATE_CLR_SET(hadc->State,
 8001a70:	f425 6570 	bic.w	r5, r5, #3840	; 0xf00
 8001a74:	f025 0501 	bic.w	r5, r5, #1
 8001a78:	f445 7580 	orr.w	r5, r5, #256	; 0x100
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001a7c:	4299      	cmp	r1, r3
      ADC_STATE_CLR_SET(hadc->State,
 8001a7e:	62a5      	str	r5, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001a80:	d104      	bne.n	8001a8c <HAL_ADC_Start_DMA+0x5c>
 8001a82:	4a2d      	ldr	r2, [pc, #180]	; (8001b38 <HAL_ADC_Start_DMA+0x108>)
 8001a84:	6853      	ldr	r3, [r2, #4]
 8001a86:	f413 2f70 	tst.w	r3, #983040	; 0xf0000
 8001a8a:	d13e      	bne.n	8001b0a <HAL_ADC_Start_DMA+0xda>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001a8c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001a8e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001a92:	62a3      	str	r3, [r4, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001a94:	684b      	ldr	r3, [r1, #4]
 8001a96:	055a      	lsls	r2, r3, #21
 8001a98:	d505      	bpl.n	8001aa6 <HAL_ADC_Start_DMA+0x76>
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001a9a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001a9c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001aa0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001aa4:	62a3      	str	r3, [r4, #40]	; 0x28
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001aa6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001aa8:	6a20      	ldr	r0, [r4, #32]
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001aaa:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001aae:	bf18      	it	ne
 8001ab0:	6ae3      	ldrne	r3, [r4, #44]	; 0x2c
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001ab2:	463a      	mov	r2, r7
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001ab4:	bf18      	it	ne
 8001ab6:	f023 0306 	bicne.w	r3, r3, #6
        ADC_CLEAR_ERRORCODE(hadc);
 8001aba:	62e3      	str	r3, [r4, #44]	; 0x2c
      __HAL_UNLOCK(hadc);
 8001abc:	2300      	movs	r3, #0
 8001abe:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001ac2:	4b1f      	ldr	r3, [pc, #124]	; (8001b40 <HAL_ADC_Start_DMA+0x110>)
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001ac4:	314c      	adds	r1, #76	; 0x4c
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001ac6:	6283      	str	r3, [r0, #40]	; 0x28
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001ac8:	4b1e      	ldr	r3, [pc, #120]	; (8001b44 <HAL_ADC_Start_DMA+0x114>)
 8001aca:	62c3      	str	r3, [r0, #44]	; 0x2c
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001acc:	4b1e      	ldr	r3, [pc, #120]	; (8001b48 <HAL_ADC_Start_DMA+0x118>)
 8001ace:	6303      	str	r3, [r0, #48]	; 0x30
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001ad0:	f06f 0302 	mvn.w	r3, #2
 8001ad4:	f841 3c4c 	str.w	r3, [r1, #-76]
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001ad8:	f851 3c44 	ldr.w	r3, [r1, #-68]
 8001adc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ae0:	f841 3c44 	str.w	r3, [r1, #-68]
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001ae4:	4643      	mov	r3, r8
 8001ae6:	f000 f969 	bl	8001dbc <HAL_DMA_Start_IT>
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8001aea:	6823      	ldr	r3, [r4, #0]
 8001aec:	689a      	ldr	r2, [r3, #8]
 8001aee:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 8001af2:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001af6:	689a      	ldr	r2, [r3, #8]
 8001af8:	bf0c      	ite	eq
 8001afa:	f442 02a0 	orreq.w	r2, r2, #5242880	; 0x500000
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001afe:	f442 1280 	orrne.w	r2, r2, #1048576	; 0x100000
 8001b02:	609a      	str	r2, [r3, #8]
}
 8001b04:	4630      	mov	r0, r6
 8001b06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001b0a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001b0c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001b10:	62a3      	str	r3, [r4, #40]	; 0x28
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001b12:	6853      	ldr	r3, [r2, #4]
 8001b14:	055b      	lsls	r3, r3, #21
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001b16:	bf41      	itttt	mi
 8001b18:	6aa0      	ldrmi	r0, [r4, #40]	; 0x28
 8001b1a:	f420 5040 	bicmi.w	r0, r0, #12288	; 0x3000
 8001b1e:	f440 5080 	orrmi.w	r0, r0, #4096	; 0x1000
 8001b22:	62a0      	strmi	r0, [r4, #40]	; 0x28
 8001b24:	e7bf      	b.n	8001aa6 <HAL_ADC_Start_DMA+0x76>
      __HAL_UNLOCK(hadc);
 8001b26:	2300      	movs	r3, #0
 8001b28:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 8001b2c:	e7ea      	b.n	8001b04 <HAL_ADC_Start_DMA+0xd4>
    tmp_hal_status = HAL_ERROR;
 8001b2e:	2601      	movs	r6, #1
 8001b30:	e7e8      	b.n	8001b04 <HAL_ADC_Start_DMA+0xd4>
    __HAL_LOCK(hadc);
 8001b32:	2602      	movs	r6, #2
 8001b34:	e7e6      	b.n	8001b04 <HAL_ADC_Start_DMA+0xd4>
 8001b36:	bf00      	nop
 8001b38:	40012400 	.word	0x40012400
 8001b3c:	40012800 	.word	0x40012800
 8001b40:	08001845 	.word	0x08001845
 8001b44:	08001895 	.word	0x08001895
 8001b48:	080018a1 	.word	0x080018a1

08001b4c <ADC_ConversionStop_Disable>:
{
 8001b4c:	b538      	push	{r3, r4, r5, lr}
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001b4e:	6803      	ldr	r3, [r0, #0]
{
 8001b50:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001b52:	689a      	ldr	r2, [r3, #8]
 8001b54:	07d1      	lsls	r1, r2, #31
 8001b56:	d401      	bmi.n	8001b5c <ADC_ConversionStop_Disable+0x10>
  return HAL_OK;
 8001b58:	2000      	movs	r0, #0
}
 8001b5a:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_ADC_DISABLE(hadc);
 8001b5c:	689a      	ldr	r2, [r3, #8]
 8001b5e:	f022 0201 	bic.w	r2, r2, #1
 8001b62:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8001b64:	f7ff fe56 	bl	8001814 <HAL_GetTick>
 8001b68:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001b6a:	6823      	ldr	r3, [r4, #0]
 8001b6c:	689b      	ldr	r3, [r3, #8]
 8001b6e:	07db      	lsls	r3, r3, #31
 8001b70:	d5f2      	bpl.n	8001b58 <ADC_ConversionStop_Disable+0xc>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001b72:	f7ff fe4f 	bl	8001814 <HAL_GetTick>
 8001b76:	1b40      	subs	r0, r0, r5
 8001b78:	2802      	cmp	r0, #2
 8001b7a:	d9f6      	bls.n	8001b6a <ADC_ConversionStop_Disable+0x1e>
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001b7c:	6823      	ldr	r3, [r4, #0]
 8001b7e:	689b      	ldr	r3, [r3, #8]
 8001b80:	07da      	lsls	r2, r3, #31
 8001b82:	d5f2      	bpl.n	8001b6a <ADC_ConversionStop_Disable+0x1e>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b84:	6aa3      	ldr	r3, [r4, #40]	; 0x28
          return HAL_ERROR;
 8001b86:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b88:	f043 0310 	orr.w	r3, r3, #16
 8001b8c:	62a3      	str	r3, [r4, #40]	; 0x28
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b8e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001b90:	f043 0301 	orr.w	r3, r3, #1
 8001b94:	62e3      	str	r3, [r4, #44]	; 0x2c
          return HAL_ERROR;
 8001b96:	e7e0      	b.n	8001b5a <ADC_ConversionStop_Disable+0xe>

08001b98 <HAL_ADC_Init>:
{
 8001b98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(hadc == NULL)
 8001b9a:	4604      	mov	r4, r0
 8001b9c:	2800      	cmp	r0, #0
 8001b9e:	d06e      	beq.n	8001c7e <HAL_ADC_Init+0xe6>
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001ba0:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8001ba2:	b923      	cbnz	r3, 8001bae <HAL_ADC_Init+0x16>
    ADC_CLEAR_ERRORCODE(hadc);
 8001ba4:	62c3      	str	r3, [r0, #44]	; 0x2c
    hadc->Lock = HAL_UNLOCKED;
 8001ba6:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    HAL_ADC_MspInit(hadc);
 8001baa:	f7ff fbd1 	bl	8001350 <HAL_ADC_MspInit>
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001bae:	4620      	mov	r0, r4
 8001bb0:	f7ff ffcc 	bl	8001b4c <ADC_ConversionStop_Disable>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001bb4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001bb6:	f013 0310 	ands.w	r3, r3, #16
 8001bba:	d162      	bne.n	8001c82 <HAL_ADC_Init+0xea>
 8001bbc:	2800      	cmp	r0, #0
 8001bbe:	d160      	bne.n	8001c82 <HAL_ADC_Init+0xea>
    ADC_STATE_CLR_SET(hadc->State,
 8001bc0:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001bc2:	69e5      	ldr	r5, [r4, #28]
 8001bc4:	6861      	ldr	r1, [r4, #4]
    ADC_STATE_CLR_SET(hadc->State,
 8001bc6:	f422 5288 	bic.w	r2, r2, #4352	; 0x1100
 8001bca:	f022 0202 	bic.w	r2, r2, #2
 8001bce:	f042 0202 	orr.w	r2, r2, #2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001bd2:	4329      	orrs	r1, r5
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001bd4:	68a5      	ldr	r5, [r4, #8]
    ADC_STATE_CLR_SET(hadc->State,
 8001bd6:	62a2      	str	r2, [r4, #40]	; 0x28
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001bd8:	7b22      	ldrb	r2, [r4, #12]
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001bda:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001bde:	ea41 0142 	orr.w	r1, r1, r2, lsl #1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001be2:	d037      	beq.n	8001c54 <HAL_ADC_Init+0xbc>
 8001be4:	2d01      	cmp	r5, #1
 8001be6:	bf14      	ite	ne
 8001be8:	2700      	movne	r7, #0
 8001bea:	f44f 7780 	moveq.w	r7, #256	; 0x100
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001bee:	7d26      	ldrb	r6, [r4, #20]
 8001bf0:	2e01      	cmp	r6, #1
 8001bf2:	d106      	bne.n	8001c02 <HAL_ADC_Init+0x6a>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001bf4:	bb82      	cbnz	r2, 8001c58 <HAL_ADC_Init+0xc0>
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001bf6:	69a2      	ldr	r2, [r4, #24]
 8001bf8:	3a01      	subs	r2, #1
 8001bfa:	ea47 3642 	orr.w	r6, r7, r2, lsl #13
 8001bfe:	f446 6700 	orr.w	r7, r6, #2048	; 0x800
      MODIFY_REG(hadc->Instance->CR1,
 8001c02:	6822      	ldr	r2, [r4, #0]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001c04:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
      MODIFY_REG(hadc->Instance->CR1,
 8001c08:	6856      	ldr	r6, [r2, #4]
 8001c0a:	f426 4669 	bic.w	r6, r6, #59648	; 0xe900
 8001c0e:	ea46 0607 	orr.w	r6, r6, r7
 8001c12:	6056      	str	r6, [r2, #4]
      MODIFY_REG(hadc->Instance->CR2,
 8001c14:	6897      	ldr	r7, [r2, #8]
 8001c16:	4e1d      	ldr	r6, [pc, #116]	; (8001c8c <HAL_ADC_Init+0xf4>)
 8001c18:	ea06 0607 	and.w	r6, r6, r7
 8001c1c:	ea46 0601 	orr.w	r6, r6, r1
 8001c20:	6096      	str	r6, [r2, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001c22:	d001      	beq.n	8001c28 <HAL_ADC_Init+0x90>
 8001c24:	2d01      	cmp	r5, #1
 8001c26:	d102      	bne.n	8001c2e <HAL_ADC_Init+0x96>
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001c28:	6923      	ldr	r3, [r4, #16]
 8001c2a:	3b01      	subs	r3, #1
 8001c2c:	051b      	lsls	r3, r3, #20
    MODIFY_REG(hadc->Instance->SQR1,
 8001c2e:	6ad5      	ldr	r5, [r2, #44]	; 0x2c
 8001c30:	f425 0570 	bic.w	r5, r5, #15728640	; 0xf00000
 8001c34:	432b      	orrs	r3, r5
 8001c36:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001c38:	6892      	ldr	r2, [r2, #8]
 8001c3a:	4b15      	ldr	r3, [pc, #84]	; (8001c90 <HAL_ADC_Init+0xf8>)
 8001c3c:	4013      	ands	r3, r2
 8001c3e:	4299      	cmp	r1, r3
 8001c40:	d113      	bne.n	8001c6a <HAL_ADC_Init+0xd2>
      ADC_CLEAR_ERRORCODE(hadc);
 8001c42:	2300      	movs	r3, #0
 8001c44:	62e3      	str	r3, [r4, #44]	; 0x2c
      ADC_STATE_CLR_SET(hadc->State,
 8001c46:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001c48:	f023 0303 	bic.w	r3, r3, #3
 8001c4c:	f043 0301 	orr.w	r3, r3, #1
 8001c50:	62a3      	str	r3, [r4, #40]	; 0x28
}
 8001c52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001c54:	462f      	mov	r7, r5
 8001c56:	e7ca      	b.n	8001bee <HAL_ADC_Init+0x56>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001c58:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001c5a:	f042 0220 	orr.w	r2, r2, #32
 8001c5e:	62a2      	str	r2, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c60:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001c62:	f042 0201 	orr.w	r2, r2, #1
 8001c66:	62e2      	str	r2, [r4, #44]	; 0x2c
 8001c68:	e7cb      	b.n	8001c02 <HAL_ADC_Init+0x6a>
      ADC_STATE_CLR_SET(hadc->State,
 8001c6a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001c6c:	f023 0312 	bic.w	r3, r3, #18
 8001c70:	f043 0310 	orr.w	r3, r3, #16
 8001c74:	62a3      	str	r3, [r4, #40]	; 0x28
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c76:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001c78:	f043 0301 	orr.w	r3, r3, #1
 8001c7c:	62e3      	str	r3, [r4, #44]	; 0x2c
    return HAL_ERROR;
 8001c7e:	2001      	movs	r0, #1
 8001c80:	e7e7      	b.n	8001c52 <HAL_ADC_Init+0xba>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c82:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001c84:	f043 0310 	orr.w	r3, r3, #16
 8001c88:	62a3      	str	r3, [r4, #40]	; 0x28
    tmp_hal_status = HAL_ERROR;
 8001c8a:	e7f8      	b.n	8001c7e <HAL_ADC_Init+0xe6>
 8001c8c:	ffe1f7fd 	.word	0xffe1f7fd
 8001c90:	ff1f0efe 	.word	0xff1f0efe

08001c94 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c94:	4907      	ldr	r1, [pc, #28]	; (8001cb4 <HAL_NVIC_SetPriorityGrouping+0x20>)
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001c96:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c98:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001c9a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c9e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001ca2:	0412      	lsls	r2, r2, #16
 8001ca4:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ca6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ca8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001cac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8001cb0:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8001cb2:	4770      	bx	lr
 8001cb4:	e000ed00 	.word	0xe000ed00

08001cb8 <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001cb8:	4b16      	ldr	r3, [pc, #88]	; (8001d14 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001cba:	b530      	push	{r4, r5, lr}
 8001cbc:	68dc      	ldr	r4, [r3, #12]
 8001cbe:	f3c4 2402 	ubfx	r4, r4, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001cc2:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001cc6:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001cc8:	2b04      	cmp	r3, #4
 8001cca:	bf28      	it	cs
 8001ccc:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001cce:	2d06      	cmp	r5, #6
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cd0:	f04f 35ff 	mov.w	r5, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001cd4:	bf98      	it	ls
 8001cd6:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cd8:	fa05 f303 	lsl.w	r3, r5, r3
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001cdc:	bf88      	it	hi
 8001cde:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ce0:	ea21 0303 	bic.w	r3, r1, r3
 8001ce4:	40a3      	lsls	r3, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ce6:	fa05 f404 	lsl.w	r4, r5, r4
 8001cea:	ea22 0204 	bic.w	r2, r2, r4
  if ((int32_t)(IRQn) >= 0)
 8001cee:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cf0:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cf4:	bfac      	ite	ge
 8001cf6:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cfa:	4a07      	ldrlt	r2, [pc, #28]	; (8001d18 <HAL_NVIC_SetPriority+0x60>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cfc:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8001d00:	b2db      	uxtb	r3, r3
 8001d02:	bfab      	itete	ge
 8001d04:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d08:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d0c:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d10:	5413      	strblt	r3, [r2, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001d12:	bd30      	pop	{r4, r5, pc}
 8001d14:	e000ed00 	.word	0xe000ed00
 8001d18:	e000ed14 	.word	0xe000ed14

08001d1c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001d1c:	2800      	cmp	r0, #0
 8001d1e:	db08      	blt.n	8001d32 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d20:	2301      	movs	r3, #1
 8001d22:	0942      	lsrs	r2, r0, #5
 8001d24:	f000 001f 	and.w	r0, r0, #31
 8001d28:	fa03 f000 	lsl.w	r0, r3, r0
 8001d2c:	4b01      	ldr	r3, [pc, #4]	; (8001d34 <HAL_NVIC_EnableIRQ+0x18>)
 8001d2e:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001d32:	4770      	bx	lr
 8001d34:	e000e100 	.word	0xe000e100

08001d38 <HAL_SYSTICK_Config>:
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d38:	3801      	subs	r0, #1
 8001d3a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8001d3e:	d20b      	bcs.n	8001d58 <HAL_SYSTICK_Config+0x20>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d40:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d44:	21f0      	movs	r1, #240	; 0xf0
 8001d46:	4a05      	ldr	r2, [pc, #20]	; (8001d5c <HAL_SYSTICK_Config+0x24>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d48:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d4a:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d4e:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d50:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d52:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d54:	611a      	str	r2, [r3, #16]
  return (0UL);                                                     /* Function successful */
 8001d56:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001d58:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001d5a:	4770      	bx	lr
 8001d5c:	e000ed00 	.word	0xe000ed00

08001d60 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001d60:	b510      	push	{r4, lr}
  uint32_t tmp = 0U;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001d62:	b320      	cbz	r0, 8001dae <HAL_DMA_Init+0x4e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001d64:	2214      	movs	r2, #20
 8001d66:	6801      	ldr	r1, [r0, #0]
 8001d68:	4b12      	ldr	r3, [pc, #72]	; (8001db4 <HAL_DMA_Init+0x54>)
 8001d6a:	440b      	add	r3, r1
 8001d6c:	fbb3 f3f2 	udiv	r3, r3, r2
 8001d70:	009b      	lsls	r3, r3, #2
 8001d72:	6403      	str	r3, [r0, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001d74:	4b10      	ldr	r3, [pc, #64]	; (8001db8 <HAL_DMA_Init+0x58>)

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001d76:	680a      	ldr	r2, [r1, #0]
  hdma->DmaBaseAddress = DMA1;
 8001d78:	63c3      	str	r3, [r0, #60]	; 0x3c
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001d7a:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
 8001d7e:	4323      	orrs	r3, r4
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d80:	68c4      	ldr	r4, [r0, #12]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001d82:	f422 527f 	bic.w	r2, r2, #16320	; 0x3fc0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d86:	4323      	orrs	r3, r4
 8001d88:	6904      	ldr	r4, [r0, #16]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001d8a:	f022 0230 	bic.w	r2, r2, #48	; 0x30
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d8e:	4323      	orrs	r3, r4
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d90:	6944      	ldr	r4, [r0, #20]
 8001d92:	4323      	orrs	r3, r4
 8001d94:	6984      	ldr	r4, [r0, #24]
 8001d96:	4323      	orrs	r3, r4
          hdma->Init.Mode                | hdma->Init.Priority;
 8001d98:	69c4      	ldr	r4, [r0, #28]
 8001d9a:	4323      	orrs	r3, r4
  tmp |=  hdma->Init.Direction        |
 8001d9c:	4313      	orrs	r3, r2

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001d9e:	600b      	str	r3, [r1, #0]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001da0:	f44f 7280 	mov.w	r2, #256	; 0x100
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001da4:	2300      	movs	r3, #0
  hdma->Lock = HAL_UNLOCKED;
 8001da6:	8402      	strh	r2, [r0, #32]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001da8:	6383      	str	r3, [r0, #56]	; 0x38

  return HAL_OK;
 8001daa:	4618      	mov	r0, r3
}
 8001dac:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001dae:	2001      	movs	r0, #1
 8001db0:	e7fc      	b.n	8001dac <HAL_DMA_Init+0x4c>
 8001db2:	bf00      	nop
 8001db4:	bffdfff8 	.word	0xbffdfff8
 8001db8:	40020000 	.word	0x40020000

08001dbc <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001dbc:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001dbe:	f890 4020 	ldrb.w	r4, [r0, #32]
 8001dc2:	2c01      	cmp	r4, #1
 8001dc4:	d034      	beq.n	8001e30 <HAL_DMA_Start_IT+0x74>
 8001dc6:	2401      	movs	r4, #1
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001dc8:	f890 5021 	ldrb.w	r5, [r0, #33]	; 0x21
  __HAL_LOCK(hdma);
 8001dcc:	f880 4020 	strb.w	r4, [r0, #32]
  if(HAL_DMA_STATE_READY == hdma->State)
 8001dd0:	42a5      	cmp	r5, r4
 8001dd2:	f04f 0600 	mov.w	r6, #0
 8001dd6:	f04f 0402 	mov.w	r4, #2
 8001dda:	d127      	bne.n	8001e2c <HAL_DMA_Start_IT+0x70>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001ddc:	f880 4021 	strb.w	r4, [r0, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001de0:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001de2:	6386      	str	r6, [r0, #56]	; 0x38
    __HAL_DMA_DISABLE(hdma);
 8001de4:	6826      	ldr	r6, [r4, #0]
 8001de6:	f026 0601 	bic.w	r6, r6, #1
 8001dea:	6026      	str	r6, [r4, #0]
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001dec:	e9d0 670f 	ldrd	r6, r7, [r0, #60]	; 0x3c
 8001df0:	40bd      	lsls	r5, r7
 8001df2:	6075      	str	r5, [r6, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001df4:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001df6:	6843      	ldr	r3, [r0, #4]
 8001df8:	2b10      	cmp	r3, #16
    if(NULL != hdma->XferHalfCpltCallback)
 8001dfa:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001dfc:	bf0b      	itete	eq
 8001dfe:	60a2      	streq	r2, [r4, #8]
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8001e00:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 8001e02:	60e1      	streq	r1, [r4, #12]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8001e04:	60e2      	strne	r2, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback)
 8001e06:	b14b      	cbz	r3, 8001e1c <HAL_DMA_Start_IT+0x60>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001e08:	6823      	ldr	r3, [r4, #0]
 8001e0a:	f043 030e 	orr.w	r3, r3, #14
  HAL_StatusTypeDef status = HAL_OK;
 8001e0e:	2000      	movs	r0, #0
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001e10:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 8001e12:	6823      	ldr	r3, [r4, #0]
 8001e14:	f043 0301 	orr.w	r3, r3, #1
 8001e18:	6023      	str	r3, [r4, #0]
}
 8001e1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001e1c:	6823      	ldr	r3, [r4, #0]
 8001e1e:	f023 0304 	bic.w	r3, r3, #4
 8001e22:	6023      	str	r3, [r4, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001e24:	6823      	ldr	r3, [r4, #0]
 8001e26:	f043 030a 	orr.w	r3, r3, #10
 8001e2a:	e7f0      	b.n	8001e0e <HAL_DMA_Start_IT+0x52>
    __HAL_UNLOCK(hdma); 
 8001e2c:	f880 6020 	strb.w	r6, [r0, #32]
  __HAL_LOCK(hdma);
 8001e30:	2002      	movs	r0, #2
 8001e32:	e7f2      	b.n	8001e1a <HAL_DMA_Start_IT+0x5e>

08001e34 <HAL_DMA_Abort>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001e34:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 8001e38:	2b02      	cmp	r3, #2
 8001e3a:	d006      	beq.n	8001e4a <HAL_DMA_Abort+0x16>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e3c:	2304      	movs	r3, #4
 8001e3e:	6383      	str	r3, [r0, #56]	; 0x38
    __HAL_UNLOCK(hdma);
 8001e40:	2300      	movs	r3, #0
 8001e42:	f880 3020 	strb.w	r3, [r0, #32]
    return HAL_ERROR;
 8001e46:	2001      	movs	r0, #1
 8001e48:	4770      	bx	lr
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001e4a:	6803      	ldr	r3, [r0, #0]
 8001e4c:	681a      	ldr	r2, [r3, #0]
 8001e4e:	f022 020e 	bic.w	r2, r2, #14
 8001e52:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 8001e54:	681a      	ldr	r2, [r3, #0]
 8001e56:	f022 0201 	bic.w	r2, r2, #1
 8001e5a:	601a      	str	r2, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001e5c:	2301      	movs	r3, #1
 8001e5e:	e9d0 210f 	ldrd	r2, r1, [r0, #60]	; 0x3c
 8001e62:	408b      	lsls	r3, r1
 8001e64:	6053      	str	r3, [r2, #4]
  __HAL_UNLOCK(hdma);      
 8001e66:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001e6a:	8403      	strh	r3, [r0, #32]
  return status; 
 8001e6c:	2000      	movs	r0, #0
}
 8001e6e:	4770      	bx	lr

08001e70 <HAL_DMA_Abort_IT>:
{  
 8001e70:	b508      	push	{r3, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001e72:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 8001e76:	2b02      	cmp	r3, #2
 8001e78:	d003      	beq.n	8001e82 <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e7a:	2304      	movs	r3, #4
 8001e7c:	6383      	str	r3, [r0, #56]	; 0x38
    status = HAL_ERROR;
 8001e7e:	2001      	movs	r0, #1
}
 8001e80:	bd08      	pop	{r3, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001e82:	6803      	ldr	r3, [r0, #0]
 8001e84:	681a      	ldr	r2, [r3, #0]
 8001e86:	f022 020e 	bic.w	r2, r2, #14
 8001e8a:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 8001e8c:	681a      	ldr	r2, [r3, #0]
 8001e8e:	f022 0201 	bic.w	r2, r2, #1
 8001e92:	601a      	str	r2, [r3, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001e94:	4a17      	ldr	r2, [pc, #92]	; (8001ef4 <HAL_DMA_Abort_IT+0x84>)
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d01c      	beq.n	8001ed4 <HAL_DMA_Abort_IT+0x64>
 8001e9a:	3214      	adds	r2, #20
 8001e9c:	4293      	cmp	r3, r2
 8001e9e:	d01b      	beq.n	8001ed8 <HAL_DMA_Abort_IT+0x68>
 8001ea0:	3214      	adds	r2, #20
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d01a      	beq.n	8001edc <HAL_DMA_Abort_IT+0x6c>
 8001ea6:	3214      	adds	r2, #20
 8001ea8:	4293      	cmp	r3, r2
 8001eaa:	d01a      	beq.n	8001ee2 <HAL_DMA_Abort_IT+0x72>
 8001eac:	3214      	adds	r2, #20
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d01a      	beq.n	8001ee8 <HAL_DMA_Abort_IT+0x78>
 8001eb2:	3214      	adds	r2, #20
 8001eb4:	4293      	cmp	r3, r2
 8001eb6:	bf0c      	ite	eq
 8001eb8:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
 8001ebc:	f04f 7380 	movne.w	r3, #16777216	; 0x1000000
 8001ec0:	4a0d      	ldr	r2, [pc, #52]	; (8001ef8 <HAL_DMA_Abort_IT+0x88>)
 8001ec2:	6053      	str	r3, [r2, #4]
    __HAL_UNLOCK(hdma);
 8001ec4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001ec8:	8403      	strh	r3, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 8001eca:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8001ecc:	b17b      	cbz	r3, 8001eee <HAL_DMA_Abort_IT+0x7e>
      hdma->XferAbortCallback(hdma);
 8001ece:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8001ed0:	2000      	movs	r0, #0
 8001ed2:	e7d5      	b.n	8001e80 <HAL_DMA_Abort_IT+0x10>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001ed4:	2301      	movs	r3, #1
 8001ed6:	e7f3      	b.n	8001ec0 <HAL_DMA_Abort_IT+0x50>
 8001ed8:	2310      	movs	r3, #16
 8001eda:	e7f1      	b.n	8001ec0 <HAL_DMA_Abort_IT+0x50>
 8001edc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001ee0:	e7ee      	b.n	8001ec0 <HAL_DMA_Abort_IT+0x50>
 8001ee2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ee6:	e7eb      	b.n	8001ec0 <HAL_DMA_Abort_IT+0x50>
 8001ee8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001eec:	e7e8      	b.n	8001ec0 <HAL_DMA_Abort_IT+0x50>
  HAL_StatusTypeDef status = HAL_OK;
 8001eee:	4618      	mov	r0, r3
 8001ef0:	e7c6      	b.n	8001e80 <HAL_DMA_Abort_IT+0x10>
 8001ef2:	bf00      	nop
 8001ef4:	40020008 	.word	0x40020008
 8001ef8:	40020000 	.word	0x40020000

08001efc <HAL_DMA_IRQHandler>:
{
 8001efc:	b470      	push	{r4, r5, r6}
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001efe:	2504      	movs	r5, #4
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001f00:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001f02:	6c02      	ldr	r2, [r0, #64]	; 0x40
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001f04:	6834      	ldr	r4, [r6, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8001f06:	6803      	ldr	r3, [r0, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001f08:	4095      	lsls	r5, r2
 8001f0a:	4225      	tst	r5, r4
  uint32_t source_it = hdma->Instance->CCR;
 8001f0c:	6819      	ldr	r1, [r3, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001f0e:	d032      	beq.n	8001f76 <HAL_DMA_IRQHandler+0x7a>
 8001f10:	074d      	lsls	r5, r1, #29
 8001f12:	d530      	bpl.n	8001f76 <HAL_DMA_IRQHandler+0x7a>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001f14:	681a      	ldr	r2, [r3, #0]
 8001f16:	0696      	lsls	r6, r2, #26
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001f18:	bf5e      	ittt	pl
 8001f1a:	681a      	ldrpl	r2, [r3, #0]
 8001f1c:	f022 0204 	bicpl.w	r2, r2, #4
 8001f20:	601a      	strpl	r2, [r3, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001f22:	4a3d      	ldr	r2, [pc, #244]	; (8002018 <HAL_DMA_IRQHandler+0x11c>)
 8001f24:	4293      	cmp	r3, r2
 8001f26:	d019      	beq.n	8001f5c <HAL_DMA_IRQHandler+0x60>
 8001f28:	3214      	adds	r2, #20
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	d018      	beq.n	8001f60 <HAL_DMA_IRQHandler+0x64>
 8001f2e:	3214      	adds	r2, #20
 8001f30:	4293      	cmp	r3, r2
 8001f32:	d017      	beq.n	8001f64 <HAL_DMA_IRQHandler+0x68>
 8001f34:	3214      	adds	r2, #20
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d017      	beq.n	8001f6a <HAL_DMA_IRQHandler+0x6e>
 8001f3a:	3214      	adds	r2, #20
 8001f3c:	4293      	cmp	r3, r2
 8001f3e:	d017      	beq.n	8001f70 <HAL_DMA_IRQHandler+0x74>
 8001f40:	3214      	adds	r2, #20
 8001f42:	4293      	cmp	r3, r2
 8001f44:	bf0c      	ite	eq
 8001f46:	f44f 0380 	moveq.w	r3, #4194304	; 0x400000
 8001f4a:	f04f 6380 	movne.w	r3, #67108864	; 0x4000000
 8001f4e:	4a33      	ldr	r2, [pc, #204]	; (800201c <HAL_DMA_IRQHandler+0x120>)
 8001f50:	6053      	str	r3, [r2, #4]
    if(hdma->XferHalfCpltCallback != NULL)
 8001f52:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    if (hdma->XferErrorCallback != NULL)
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d05c      	beq.n	8002012 <HAL_DMA_IRQHandler+0x116>
}
 8001f58:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 8001f5a:	4718      	bx	r3
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001f5c:	2304      	movs	r3, #4
 8001f5e:	e7f6      	b.n	8001f4e <HAL_DMA_IRQHandler+0x52>
 8001f60:	2340      	movs	r3, #64	; 0x40
 8001f62:	e7f4      	b.n	8001f4e <HAL_DMA_IRQHandler+0x52>
 8001f64:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001f68:	e7f1      	b.n	8001f4e <HAL_DMA_IRQHandler+0x52>
 8001f6a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001f6e:	e7ee      	b.n	8001f4e <HAL_DMA_IRQHandler+0x52>
 8001f70:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001f74:	e7eb      	b.n	8001f4e <HAL_DMA_IRQHandler+0x52>
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001f76:	2502      	movs	r5, #2
 8001f78:	4095      	lsls	r5, r2
 8001f7a:	4225      	tst	r5, r4
 8001f7c:	d035      	beq.n	8001fea <HAL_DMA_IRQHandler+0xee>
 8001f7e:	078d      	lsls	r5, r1, #30
 8001f80:	d533      	bpl.n	8001fea <HAL_DMA_IRQHandler+0xee>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001f82:	681a      	ldr	r2, [r3, #0]
 8001f84:	0694      	lsls	r4, r2, #26
 8001f86:	d406      	bmi.n	8001f96 <HAL_DMA_IRQHandler+0x9a>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001f88:	681a      	ldr	r2, [r3, #0]
 8001f8a:	f022 020a 	bic.w	r2, r2, #10
 8001f8e:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8001f90:	2201      	movs	r2, #1
 8001f92:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001f96:	4a20      	ldr	r2, [pc, #128]	; (8002018 <HAL_DMA_IRQHandler+0x11c>)
 8001f98:	4293      	cmp	r3, r2
 8001f9a:	d019      	beq.n	8001fd0 <HAL_DMA_IRQHandler+0xd4>
 8001f9c:	3214      	adds	r2, #20
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	d018      	beq.n	8001fd4 <HAL_DMA_IRQHandler+0xd8>
 8001fa2:	3214      	adds	r2, #20
 8001fa4:	4293      	cmp	r3, r2
 8001fa6:	d017      	beq.n	8001fd8 <HAL_DMA_IRQHandler+0xdc>
 8001fa8:	3214      	adds	r2, #20
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d017      	beq.n	8001fde <HAL_DMA_IRQHandler+0xe2>
 8001fae:	3214      	adds	r2, #20
 8001fb0:	4293      	cmp	r3, r2
 8001fb2:	d017      	beq.n	8001fe4 <HAL_DMA_IRQHandler+0xe8>
 8001fb4:	3214      	adds	r2, #20
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	bf0c      	ite	eq
 8001fba:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
 8001fbe:	f04f 7300 	movne.w	r3, #33554432	; 0x2000000
 8001fc2:	4a16      	ldr	r2, [pc, #88]	; (800201c <HAL_DMA_IRQHandler+0x120>)
 8001fc4:	6053      	str	r3, [r2, #4]
    __HAL_UNLOCK(hdma);
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferCpltCallback != NULL)
 8001fcc:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8001fce:	e7c1      	b.n	8001f54 <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001fd0:	2302      	movs	r3, #2
 8001fd2:	e7f6      	b.n	8001fc2 <HAL_DMA_IRQHandler+0xc6>
 8001fd4:	2320      	movs	r3, #32
 8001fd6:	e7f4      	b.n	8001fc2 <HAL_DMA_IRQHandler+0xc6>
 8001fd8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001fdc:	e7f1      	b.n	8001fc2 <HAL_DMA_IRQHandler+0xc6>
 8001fde:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001fe2:	e7ee      	b.n	8001fc2 <HAL_DMA_IRQHandler+0xc6>
 8001fe4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001fe8:	e7eb      	b.n	8001fc2 <HAL_DMA_IRQHandler+0xc6>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001fea:	2508      	movs	r5, #8
 8001fec:	4095      	lsls	r5, r2
 8001fee:	4225      	tst	r5, r4
 8001ff0:	d00f      	beq.n	8002012 <HAL_DMA_IRQHandler+0x116>
 8001ff2:	0709      	lsls	r1, r1, #28
 8001ff4:	d50d      	bpl.n	8002012 <HAL_DMA_IRQHandler+0x116>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001ff6:	6819      	ldr	r1, [r3, #0]
 8001ff8:	f021 010e 	bic.w	r1, r1, #14
 8001ffc:	6019      	str	r1, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001ffe:	2301      	movs	r3, #1
 8002000:	fa03 f202 	lsl.w	r2, r3, r2
 8002004:	6072      	str	r2, [r6, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002006:	6383      	str	r3, [r0, #56]	; 0x38
    __HAL_UNLOCK(hdma);
 8002008:	f44f 7380 	mov.w	r3, #256	; 0x100
 800200c:	8403      	strh	r3, [r0, #32]
    if (hdma->XferErrorCallback != NULL)
 800200e:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8002010:	e7a0      	b.n	8001f54 <HAL_DMA_IRQHandler+0x58>
}
 8002012:	bc70      	pop	{r4, r5, r6}
 8002014:	4770      	bx	lr
 8002016:	bf00      	nop
 8002018:	40020008 	.word	0x40020008
 800201c:	40020000 	.word	0x40020000

08002020 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002020:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002024:	2200      	movs	r2, #0
  uint32_t position = 0x00u;
 8002026:	4616      	mov	r6, r2
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002028:	4f64      	ldr	r7, [pc, #400]	; (80021bc <HAL_GPIO_Init+0x19c>)
 800202a:	4b65      	ldr	r3, [pc, #404]	; (80021c0 <HAL_GPIO_Init+0x1a0>)
      switch (GPIO_Init->Mode)
 800202c:	f8df c194 	ldr.w	ip, [pc, #404]	; 80021c4 <HAL_GPIO_Init+0x1a4>
 8002030:	f8df e194 	ldr.w	lr, [pc, #404]	; 80021c8 <HAL_GPIO_Init+0x1a8>
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002034:	680d      	ldr	r5, [r1, #0]
 8002036:	fa35 f406 	lsrs.w	r4, r5, r6
 800203a:	d102      	bne.n	8002042 <HAL_GPIO_Init+0x22>
      }
    }

	position++;
  }
}
 800203c:	b003      	add	sp, #12
 800203e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ioposition = (0x01uL << position);
 8002042:	f04f 0801 	mov.w	r8, #1
 8002046:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800204a:	ea05 0408 	and.w	r4, r5, r8
    if (iocurrent == ioposition)
 800204e:	ea38 0505 	bics.w	r5, r8, r5
 8002052:	d17b      	bne.n	800214c <HAL_GPIO_Init+0x12c>
      switch (GPIO_Init->Mode)
 8002054:	684d      	ldr	r5, [r1, #4]
 8002056:	2d03      	cmp	r5, #3
 8002058:	d807      	bhi.n	800206a <HAL_GPIO_Init+0x4a>
 800205a:	3d01      	subs	r5, #1
 800205c:	2d02      	cmp	r5, #2
 800205e:	f200 8088 	bhi.w	8002172 <HAL_GPIO_Init+0x152>
 8002062:	e8df f005 	tbb	[pc, r5]
 8002066:	9b96      	.short	0x9b96
 8002068:	a1          	.byte	0xa1
 8002069:	00          	.byte	0x00
 800206a:	2d12      	cmp	r5, #18
 800206c:	f000 8099 	beq.w	80021a2 <HAL_GPIO_Init+0x182>
 8002070:	d86e      	bhi.n	8002150 <HAL_GPIO_Init+0x130>
 8002072:	2d11      	cmp	r5, #17
 8002074:	f000 808f 	beq.w	8002196 <HAL_GPIO_Init+0x176>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002078:	2cff      	cmp	r4, #255	; 0xff
 800207a:	bf98      	it	ls
 800207c:	4682      	movls	sl, r0
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800207e:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002082:	bf88      	it	hi
 8002084:	f100 0a04 	addhi.w	sl, r0, #4
 8002088:	ea4f 0586 	mov.w	r5, r6, lsl #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800208c:	f8da 8000 	ldr.w	r8, [sl]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002090:	bf88      	it	hi
 8002092:	3d20      	subhi	r5, #32
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002094:	fa09 fb05 	lsl.w	fp, r9, r5
 8002098:	ea28 080b 	bic.w	r8, r8, fp
 800209c:	fa02 f505 	lsl.w	r5, r2, r5
 80020a0:	ea48 0505 	orr.w	r5, r8, r5
 80020a4:	f8ca 5000 	str.w	r5, [sl]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80020a8:	f8d1 a004 	ldr.w	sl, [r1, #4]
 80020ac:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 80020b0:	d04c      	beq.n	800214c <HAL_GPIO_Init+0x12c>
        __HAL_RCC_AFIO_CLK_ENABLE();
 80020b2:	69bd      	ldr	r5, [r7, #24]
 80020b4:	f026 0803 	bic.w	r8, r6, #3
 80020b8:	f045 0501 	orr.w	r5, r5, #1
 80020bc:	61bd      	str	r5, [r7, #24]
 80020be:	69bd      	ldr	r5, [r7, #24]
 80020c0:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 80020c4:	f005 0501 	and.w	r5, r5, #1
 80020c8:	9501      	str	r5, [sp, #4]
 80020ca:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80020ce:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 80020d2:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80020d4:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2u];
 80020d8:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80020dc:	fa09 f90b 	lsl.w	r9, r9, fp
 80020e0:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80020e4:	4d39      	ldr	r5, [pc, #228]	; (80021cc <HAL_GPIO_Init+0x1ac>)
 80020e6:	42a8      	cmp	r0, r5
 80020e8:	d062      	beq.n	80021b0 <HAL_GPIO_Init+0x190>
 80020ea:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80020ee:	42a8      	cmp	r0, r5
 80020f0:	d060      	beq.n	80021b4 <HAL_GPIO_Init+0x194>
 80020f2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80020f6:	42a8      	cmp	r0, r5
 80020f8:	d05e      	beq.n	80021b8 <HAL_GPIO_Init+0x198>
 80020fa:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80020fe:	42a8      	cmp	r0, r5
 8002100:	bf0c      	ite	eq
 8002102:	2503      	moveq	r5, #3
 8002104:	2504      	movne	r5, #4
 8002106:	fa05 f50b 	lsl.w	r5, r5, fp
 800210a:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2u] = temp;
 800210e:	f8c8 5008 	str.w	r5, [r8, #8]
          SET_BIT(EXTI->IMR, iocurrent);
 8002112:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002114:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 8002118:	bf14      	ite	ne
 800211a:	4325      	orrne	r5, r4
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800211c:	43a5      	biceq	r5, r4
 800211e:	601d      	str	r5, [r3, #0]
          SET_BIT(EXTI->EMR, iocurrent);
 8002120:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002122:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 8002126:	bf14      	ite	ne
 8002128:	4325      	orrne	r5, r4
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800212a:	43a5      	biceq	r5, r4
 800212c:	605d      	str	r5, [r3, #4]
          SET_BIT(EXTI->RTSR, iocurrent);
 800212e:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002130:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8002134:	bf14      	ite	ne
 8002136:	4325      	orrne	r5, r4
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002138:	43a5      	biceq	r5, r4
 800213a:	609d      	str	r5, [r3, #8]
          SET_BIT(EXTI->FTSR, iocurrent);
 800213c:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800213e:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 8002142:	bf14      	ite	ne
 8002144:	432c      	orrne	r4, r5
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002146:	ea25 0404 	biceq.w	r4, r5, r4
 800214a:	60dc      	str	r4, [r3, #12]
	position++;
 800214c:	3601      	adds	r6, #1
 800214e:	e771      	b.n	8002034 <HAL_GPIO_Init+0x14>
      switch (GPIO_Init->Mode)
 8002150:	f8df 907c 	ldr.w	r9, [pc, #124]	; 80021d0 <HAL_GPIO_Init+0x1b0>
 8002154:	454d      	cmp	r5, r9
 8002156:	d00c      	beq.n	8002172 <HAL_GPIO_Init+0x152>
 8002158:	d817      	bhi.n	800218a <HAL_GPIO_Init+0x16a>
 800215a:	f5a9 1980 	sub.w	r9, r9, #1048576	; 0x100000
 800215e:	454d      	cmp	r5, r9
 8002160:	d007      	beq.n	8002172 <HAL_GPIO_Init+0x152>
 8002162:	f509 2970 	add.w	r9, r9, #983040	; 0xf0000
 8002166:	454d      	cmp	r5, r9
 8002168:	d003      	beq.n	8002172 <HAL_GPIO_Init+0x152>
 800216a:	f5a9 1980 	sub.w	r9, r9, #1048576	; 0x100000
 800216e:	454d      	cmp	r5, r9
 8002170:	d182      	bne.n	8002078 <HAL_GPIO_Init+0x58>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002172:	688a      	ldr	r2, [r1, #8]
 8002174:	b1d2      	cbz	r2, 80021ac <HAL_GPIO_Init+0x18c>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002176:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 8002178:	bf08      	it	eq
 800217a:	f8c0 8010 	streq.w	r8, [r0, #16]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800217e:	f04f 0208 	mov.w	r2, #8
            GPIOx->BRR = ioposition;
 8002182:	bf18      	it	ne
 8002184:	f8c0 8014 	strne.w	r8, [r0, #20]
 8002188:	e776      	b.n	8002078 <HAL_GPIO_Init+0x58>
      switch (GPIO_Init->Mode)
 800218a:	4565      	cmp	r5, ip
 800218c:	d0f1      	beq.n	8002172 <HAL_GPIO_Init+0x152>
 800218e:	4575      	cmp	r5, lr
 8002190:	e7ee      	b.n	8002170 <HAL_GPIO_Init+0x150>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002192:	68ca      	ldr	r2, [r1, #12]
          break;
 8002194:	e770      	b.n	8002078 <HAL_GPIO_Init+0x58>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002196:	68ca      	ldr	r2, [r1, #12]
 8002198:	3204      	adds	r2, #4
          break;
 800219a:	e76d      	b.n	8002078 <HAL_GPIO_Init+0x58>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800219c:	68ca      	ldr	r2, [r1, #12]
 800219e:	3208      	adds	r2, #8
          break;
 80021a0:	e76a      	b.n	8002078 <HAL_GPIO_Init+0x58>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80021a2:	68ca      	ldr	r2, [r1, #12]
 80021a4:	320c      	adds	r2, #12
          break;
 80021a6:	e767      	b.n	8002078 <HAL_GPIO_Init+0x58>
      switch (GPIO_Init->Mode)
 80021a8:	2200      	movs	r2, #0
 80021aa:	e765      	b.n	8002078 <HAL_GPIO_Init+0x58>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80021ac:	2204      	movs	r2, #4
 80021ae:	e763      	b.n	8002078 <HAL_GPIO_Init+0x58>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80021b0:	2500      	movs	r5, #0
 80021b2:	e7a8      	b.n	8002106 <HAL_GPIO_Init+0xe6>
 80021b4:	2501      	movs	r5, #1
 80021b6:	e7a6      	b.n	8002106 <HAL_GPIO_Init+0xe6>
 80021b8:	2502      	movs	r5, #2
 80021ba:	e7a4      	b.n	8002106 <HAL_GPIO_Init+0xe6>
 80021bc:	40021000 	.word	0x40021000
 80021c0:	40010400 	.word	0x40010400
 80021c4:	10310000 	.word	0x10310000
 80021c8:	10320000 	.word	0x10320000
 80021cc:	40010800 	.word	0x40010800
 80021d0:	10220000 	.word	0x10220000

080021d4 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80021d4:	b10a      	cbz	r2, 80021da <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80021d6:	6101      	str	r1, [r0, #16]
  }
}
 80021d8:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80021da:	0409      	lsls	r1, r1, #16
 80021dc:	e7fb      	b.n	80021d6 <HAL_GPIO_WritePin+0x2>
	...

080021e0 <HAL_PWR_EnableBkUpAccess>:
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 80021e0:	2201      	movs	r2, #1
 80021e2:	4b01      	ldr	r3, [pc, #4]	; (80021e8 <HAL_PWR_EnableBkUpAccess+0x8>)
 80021e4:	621a      	str	r2, [r3, #32]
}
 80021e6:	4770      	bx	lr
 80021e8:	420e0000 	.word	0x420e0000

080021ec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80021ec:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80021f0:	4605      	mov	r5, r0
 80021f2:	b338      	cbz	r0, 8002244 <HAL_RCC_OscConfig+0x58>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80021f4:	6803      	ldr	r3, [r0, #0]
 80021f6:	07db      	lsls	r3, r3, #31
 80021f8:	d410      	bmi.n	800221c <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80021fa:	682b      	ldr	r3, [r5, #0]
 80021fc:	079f      	lsls	r7, r3, #30
 80021fe:	d45e      	bmi.n	80022be <HAL_RCC_OscConfig+0xd2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002200:	682b      	ldr	r3, [r5, #0]
 8002202:	0719      	lsls	r1, r3, #28
 8002204:	f100 8095 	bmi.w	8002332 <HAL_RCC_OscConfig+0x146>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002208:	682b      	ldr	r3, [r5, #0]
 800220a:	075a      	lsls	r2, r3, #29
 800220c:	f100 80c1 	bmi.w	8002392 <HAL_RCC_OscConfig+0x1a6>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002210:	69e8      	ldr	r0, [r5, #28]
 8002212:	2800      	cmp	r0, #0
 8002214:	f040 812c 	bne.w	8002470 <HAL_RCC_OscConfig+0x284>
        }
      }
    }
  }

  return HAL_OK;
 8002218:	2000      	movs	r0, #0
 800221a:	e029      	b.n	8002270 <HAL_RCC_OscConfig+0x84>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800221c:	4c90      	ldr	r4, [pc, #576]	; (8002460 <HAL_RCC_OscConfig+0x274>)
 800221e:	6863      	ldr	r3, [r4, #4]
 8002220:	f003 030c 	and.w	r3, r3, #12
 8002224:	2b04      	cmp	r3, #4
 8002226:	d007      	beq.n	8002238 <HAL_RCC_OscConfig+0x4c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002228:	6863      	ldr	r3, [r4, #4]
 800222a:	f003 030c 	and.w	r3, r3, #12
 800222e:	2b08      	cmp	r3, #8
 8002230:	d10a      	bne.n	8002248 <HAL_RCC_OscConfig+0x5c>
 8002232:	6863      	ldr	r3, [r4, #4]
 8002234:	03de      	lsls	r6, r3, #15
 8002236:	d507      	bpl.n	8002248 <HAL_RCC_OscConfig+0x5c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002238:	6823      	ldr	r3, [r4, #0]
 800223a:	039c      	lsls	r4, r3, #14
 800223c:	d5dd      	bpl.n	80021fa <HAL_RCC_OscConfig+0xe>
 800223e:	686b      	ldr	r3, [r5, #4]
 8002240:	2b00      	cmp	r3, #0
 8002242:	d1da      	bne.n	80021fa <HAL_RCC_OscConfig+0xe>
          return HAL_ERROR;
 8002244:	2001      	movs	r0, #1
 8002246:	e013      	b.n	8002270 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002248:	686b      	ldr	r3, [r5, #4]
 800224a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800224e:	d112      	bne.n	8002276 <HAL_RCC_OscConfig+0x8a>
 8002250:	6823      	ldr	r3, [r4, #0]
 8002252:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002256:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8002258:	f7ff fadc 	bl	8001814 <HAL_GetTick>
 800225c:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800225e:	6823      	ldr	r3, [r4, #0]
 8002260:	0398      	lsls	r0, r3, #14
 8002262:	d4ca      	bmi.n	80021fa <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002264:	f7ff fad6 	bl	8001814 <HAL_GetTick>
 8002268:	1b80      	subs	r0, r0, r6
 800226a:	2864      	cmp	r0, #100	; 0x64
 800226c:	d9f7      	bls.n	800225e <HAL_RCC_OscConfig+0x72>
            return HAL_TIMEOUT;
 800226e:	2003      	movs	r0, #3
}
 8002270:	b002      	add	sp, #8
 8002272:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002276:	b99b      	cbnz	r3, 80022a0 <HAL_RCC_OscConfig+0xb4>
 8002278:	6823      	ldr	r3, [r4, #0]
 800227a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800227e:	6023      	str	r3, [r4, #0]
 8002280:	6823      	ldr	r3, [r4, #0]
 8002282:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002286:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8002288:	f7ff fac4 	bl	8001814 <HAL_GetTick>
 800228c:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800228e:	6823      	ldr	r3, [r4, #0]
 8002290:	0399      	lsls	r1, r3, #14
 8002292:	d5b2      	bpl.n	80021fa <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002294:	f7ff fabe 	bl	8001814 <HAL_GetTick>
 8002298:	1b80      	subs	r0, r0, r6
 800229a:	2864      	cmp	r0, #100	; 0x64
 800229c:	d9f7      	bls.n	800228e <HAL_RCC_OscConfig+0xa2>
 800229e:	e7e6      	b.n	800226e <HAL_RCC_OscConfig+0x82>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80022a4:	6823      	ldr	r3, [r4, #0]
 80022a6:	d103      	bne.n	80022b0 <HAL_RCC_OscConfig+0xc4>
 80022a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80022ac:	6023      	str	r3, [r4, #0]
 80022ae:	e7cf      	b.n	8002250 <HAL_RCC_OscConfig+0x64>
 80022b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022b4:	6023      	str	r3, [r4, #0]
 80022b6:	6823      	ldr	r3, [r4, #0]
 80022b8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022bc:	e7cb      	b.n	8002256 <HAL_RCC_OscConfig+0x6a>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80022be:	4c68      	ldr	r4, [pc, #416]	; (8002460 <HAL_RCC_OscConfig+0x274>)
 80022c0:	6863      	ldr	r3, [r4, #4]
 80022c2:	f013 0f0c 	tst.w	r3, #12
 80022c6:	d007      	beq.n	80022d8 <HAL_RCC_OscConfig+0xec>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80022c8:	6863      	ldr	r3, [r4, #4]
 80022ca:	f003 030c 	and.w	r3, r3, #12
 80022ce:	2b08      	cmp	r3, #8
 80022d0:	d110      	bne.n	80022f4 <HAL_RCC_OscConfig+0x108>
 80022d2:	6863      	ldr	r3, [r4, #4]
 80022d4:	03da      	lsls	r2, r3, #15
 80022d6:	d40d      	bmi.n	80022f4 <HAL_RCC_OscConfig+0x108>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022d8:	6823      	ldr	r3, [r4, #0]
 80022da:	079b      	lsls	r3, r3, #30
 80022dc:	d502      	bpl.n	80022e4 <HAL_RCC_OscConfig+0xf8>
 80022de:	692b      	ldr	r3, [r5, #16]
 80022e0:	2b01      	cmp	r3, #1
 80022e2:	d1af      	bne.n	8002244 <HAL_RCC_OscConfig+0x58>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022e4:	6823      	ldr	r3, [r4, #0]
 80022e6:	696a      	ldr	r2, [r5, #20]
 80022e8:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80022ec:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80022f0:	6023      	str	r3, [r4, #0]
 80022f2:	e785      	b.n	8002200 <HAL_RCC_OscConfig+0x14>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80022f4:	692a      	ldr	r2, [r5, #16]
 80022f6:	4b5b      	ldr	r3, [pc, #364]	; (8002464 <HAL_RCC_OscConfig+0x278>)
 80022f8:	b16a      	cbz	r2, 8002316 <HAL_RCC_OscConfig+0x12a>
        __HAL_RCC_HSI_ENABLE();
 80022fa:	2201      	movs	r2, #1
 80022fc:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80022fe:	f7ff fa89 	bl	8001814 <HAL_GetTick>
 8002302:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002304:	6823      	ldr	r3, [r4, #0]
 8002306:	079f      	lsls	r7, r3, #30
 8002308:	d4ec      	bmi.n	80022e4 <HAL_RCC_OscConfig+0xf8>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800230a:	f7ff fa83 	bl	8001814 <HAL_GetTick>
 800230e:	1b80      	subs	r0, r0, r6
 8002310:	2802      	cmp	r0, #2
 8002312:	d9f7      	bls.n	8002304 <HAL_RCC_OscConfig+0x118>
 8002314:	e7ab      	b.n	800226e <HAL_RCC_OscConfig+0x82>
        __HAL_RCC_HSI_DISABLE();
 8002316:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002318:	f7ff fa7c 	bl	8001814 <HAL_GetTick>
 800231c:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800231e:	6823      	ldr	r3, [r4, #0]
 8002320:	0798      	lsls	r0, r3, #30
 8002322:	f57f af6d 	bpl.w	8002200 <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002326:	f7ff fa75 	bl	8001814 <HAL_GetTick>
 800232a:	1b80      	subs	r0, r0, r6
 800232c:	2802      	cmp	r0, #2
 800232e:	d9f6      	bls.n	800231e <HAL_RCC_OscConfig+0x132>
 8002330:	e79d      	b.n	800226e <HAL_RCC_OscConfig+0x82>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002332:	69aa      	ldr	r2, [r5, #24]
 8002334:	4e4a      	ldr	r6, [pc, #296]	; (8002460 <HAL_RCC_OscConfig+0x274>)
 8002336:	4b4b      	ldr	r3, [pc, #300]	; (8002464 <HAL_RCC_OscConfig+0x278>)
 8002338:	b1e2      	cbz	r2, 8002374 <HAL_RCC_OscConfig+0x188>
      __HAL_RCC_LSI_ENABLE();
 800233a:	2201      	movs	r2, #1
 800233c:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
      tickstart = HAL_GetTick();
 8002340:	f7ff fa68 	bl	8001814 <HAL_GetTick>
 8002344:	4604      	mov	r4, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002346:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8002348:	079b      	lsls	r3, r3, #30
 800234a:	d50d      	bpl.n	8002368 <HAL_RCC_OscConfig+0x17c>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800234c:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8002350:	4b45      	ldr	r3, [pc, #276]	; (8002468 <HAL_RCC_OscConfig+0x27c>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	fbb3 f3f2 	udiv	r3, r3, r2
 8002358:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 800235a:	bf00      	nop
  }
  while (Delay --);
 800235c:	9b01      	ldr	r3, [sp, #4]
 800235e:	1e5a      	subs	r2, r3, #1
 8002360:	9201      	str	r2, [sp, #4]
 8002362:	2b00      	cmp	r3, #0
 8002364:	d1f9      	bne.n	800235a <HAL_RCC_OscConfig+0x16e>
 8002366:	e74f      	b.n	8002208 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002368:	f7ff fa54 	bl	8001814 <HAL_GetTick>
 800236c:	1b00      	subs	r0, r0, r4
 800236e:	2802      	cmp	r0, #2
 8002370:	d9e9      	bls.n	8002346 <HAL_RCC_OscConfig+0x15a>
 8002372:	e77c      	b.n	800226e <HAL_RCC_OscConfig+0x82>
      __HAL_RCC_LSI_DISABLE();
 8002374:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
      tickstart = HAL_GetTick();
 8002378:	f7ff fa4c 	bl	8001814 <HAL_GetTick>
 800237c:	4604      	mov	r4, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800237e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8002380:	079f      	lsls	r7, r3, #30
 8002382:	f57f af41 	bpl.w	8002208 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002386:	f7ff fa45 	bl	8001814 <HAL_GetTick>
 800238a:	1b00      	subs	r0, r0, r4
 800238c:	2802      	cmp	r0, #2
 800238e:	d9f6      	bls.n	800237e <HAL_RCC_OscConfig+0x192>
 8002390:	e76d      	b.n	800226e <HAL_RCC_OscConfig+0x82>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002392:	4c33      	ldr	r4, [pc, #204]	; (8002460 <HAL_RCC_OscConfig+0x274>)
 8002394:	69e3      	ldr	r3, [r4, #28]
 8002396:	00d8      	lsls	r0, r3, #3
 8002398:	d424      	bmi.n	80023e4 <HAL_RCC_OscConfig+0x1f8>
      pwrclkchanged = SET;
 800239a:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 800239c:	69e3      	ldr	r3, [r4, #28]
 800239e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023a2:	61e3      	str	r3, [r4, #28]
 80023a4:	69e3      	ldr	r3, [r4, #28]
 80023a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023aa:	9300      	str	r3, [sp, #0]
 80023ac:	9b00      	ldr	r3, [sp, #0]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023ae:	4e2f      	ldr	r6, [pc, #188]	; (800246c <HAL_RCC_OscConfig+0x280>)
 80023b0:	6833      	ldr	r3, [r6, #0]
 80023b2:	05d9      	lsls	r1, r3, #23
 80023b4:	d518      	bpl.n	80023e8 <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023b6:	68eb      	ldr	r3, [r5, #12]
 80023b8:	2b01      	cmp	r3, #1
 80023ba:	d126      	bne.n	800240a <HAL_RCC_OscConfig+0x21e>
 80023bc:	6a23      	ldr	r3, [r4, #32]
 80023be:	f043 0301 	orr.w	r3, r3, #1
 80023c2:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 80023c4:	f7ff fa26 	bl	8001814 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023c8:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80023cc:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023ce:	6a23      	ldr	r3, [r4, #32]
 80023d0:	079b      	lsls	r3, r3, #30
 80023d2:	d53f      	bpl.n	8002454 <HAL_RCC_OscConfig+0x268>
    if (pwrclkchanged == SET)
 80023d4:	2f00      	cmp	r7, #0
 80023d6:	f43f af1b 	beq.w	8002210 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 80023da:	69e3      	ldr	r3, [r4, #28]
 80023dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80023e0:	61e3      	str	r3, [r4, #28]
 80023e2:	e715      	b.n	8002210 <HAL_RCC_OscConfig+0x24>
    FlagStatus       pwrclkchanged = RESET;
 80023e4:	2700      	movs	r7, #0
 80023e6:	e7e2      	b.n	80023ae <HAL_RCC_OscConfig+0x1c2>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80023e8:	6833      	ldr	r3, [r6, #0]
 80023ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023ee:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80023f0:	f7ff fa10 	bl	8001814 <HAL_GetTick>
 80023f4:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023f6:	6833      	ldr	r3, [r6, #0]
 80023f8:	05da      	lsls	r2, r3, #23
 80023fa:	d4dc      	bmi.n	80023b6 <HAL_RCC_OscConfig+0x1ca>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023fc:	f7ff fa0a 	bl	8001814 <HAL_GetTick>
 8002400:	eba0 0008 	sub.w	r0, r0, r8
 8002404:	2864      	cmp	r0, #100	; 0x64
 8002406:	d9f6      	bls.n	80023f6 <HAL_RCC_OscConfig+0x20a>
 8002408:	e731      	b.n	800226e <HAL_RCC_OscConfig+0x82>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800240a:	b9ab      	cbnz	r3, 8002438 <HAL_RCC_OscConfig+0x24c>
 800240c:	6a23      	ldr	r3, [r4, #32]
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800240e:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002412:	f023 0301 	bic.w	r3, r3, #1
 8002416:	6223      	str	r3, [r4, #32]
 8002418:	6a23      	ldr	r3, [r4, #32]
 800241a:	f023 0304 	bic.w	r3, r3, #4
 800241e:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8002420:	f7ff f9f8 	bl	8001814 <HAL_GetTick>
 8002424:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002426:	6a23      	ldr	r3, [r4, #32]
 8002428:	0798      	lsls	r0, r3, #30
 800242a:	d5d3      	bpl.n	80023d4 <HAL_RCC_OscConfig+0x1e8>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800242c:	f7ff f9f2 	bl	8001814 <HAL_GetTick>
 8002430:	1b80      	subs	r0, r0, r6
 8002432:	4540      	cmp	r0, r8
 8002434:	d9f7      	bls.n	8002426 <HAL_RCC_OscConfig+0x23a>
 8002436:	e71a      	b.n	800226e <HAL_RCC_OscConfig+0x82>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002438:	2b05      	cmp	r3, #5
 800243a:	6a23      	ldr	r3, [r4, #32]
 800243c:	d103      	bne.n	8002446 <HAL_RCC_OscConfig+0x25a>
 800243e:	f043 0304 	orr.w	r3, r3, #4
 8002442:	6223      	str	r3, [r4, #32]
 8002444:	e7ba      	b.n	80023bc <HAL_RCC_OscConfig+0x1d0>
 8002446:	f023 0301 	bic.w	r3, r3, #1
 800244a:	6223      	str	r3, [r4, #32]
 800244c:	6a23      	ldr	r3, [r4, #32]
 800244e:	f023 0304 	bic.w	r3, r3, #4
 8002452:	e7b6      	b.n	80023c2 <HAL_RCC_OscConfig+0x1d6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002454:	f7ff f9de 	bl	8001814 <HAL_GetTick>
 8002458:	1b80      	subs	r0, r0, r6
 800245a:	4540      	cmp	r0, r8
 800245c:	d9b7      	bls.n	80023ce <HAL_RCC_OscConfig+0x1e2>
 800245e:	e706      	b.n	800226e <HAL_RCC_OscConfig+0x82>
 8002460:	40021000 	.word	0x40021000
 8002464:	42420000 	.word	0x42420000
 8002468:	20000008 	.word	0x20000008
 800246c:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002470:	4c2a      	ldr	r4, [pc, #168]	; (800251c <HAL_RCC_OscConfig+0x330>)
 8002472:	6863      	ldr	r3, [r4, #4]
 8002474:	f003 030c 	and.w	r3, r3, #12
 8002478:	2b08      	cmp	r3, #8
 800247a:	d03e      	beq.n	80024fa <HAL_RCC_OscConfig+0x30e>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800247c:	2200      	movs	r2, #0
 800247e:	4b28      	ldr	r3, [pc, #160]	; (8002520 <HAL_RCC_OscConfig+0x334>)
 8002480:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8002482:	661a      	str	r2, [r3, #96]	; 0x60
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002484:	d12c      	bne.n	80024e0 <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 8002486:	f7ff f9c5 	bl	8001814 <HAL_GetTick>
 800248a:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800248c:	6823      	ldr	r3, [r4, #0]
 800248e:	0199      	lsls	r1, r3, #6
 8002490:	d420      	bmi.n	80024d4 <HAL_RCC_OscConfig+0x2e8>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002492:	6a2b      	ldr	r3, [r5, #32]
 8002494:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002498:	d105      	bne.n	80024a6 <HAL_RCC_OscConfig+0x2ba>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800249a:	6862      	ldr	r2, [r4, #4]
 800249c:	68a9      	ldr	r1, [r5, #8]
 800249e:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80024a2:	430a      	orrs	r2, r1
 80024a4:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80024a6:	6a69      	ldr	r1, [r5, #36]	; 0x24
 80024a8:	6862      	ldr	r2, [r4, #4]
 80024aa:	430b      	orrs	r3, r1
 80024ac:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 80024b0:	4313      	orrs	r3, r2
        __HAL_RCC_PLL_ENABLE();
 80024b2:	2201      	movs	r2, #1
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80024b4:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 80024b6:	4b1a      	ldr	r3, [pc, #104]	; (8002520 <HAL_RCC_OscConfig+0x334>)
 80024b8:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 80024ba:	f7ff f9ab 	bl	8001814 <HAL_GetTick>
 80024be:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80024c0:	6823      	ldr	r3, [r4, #0]
 80024c2:	019a      	lsls	r2, r3, #6
 80024c4:	f53f aea8 	bmi.w	8002218 <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024c8:	f7ff f9a4 	bl	8001814 <HAL_GetTick>
 80024cc:	1b40      	subs	r0, r0, r5
 80024ce:	2802      	cmp	r0, #2
 80024d0:	d9f6      	bls.n	80024c0 <HAL_RCC_OscConfig+0x2d4>
 80024d2:	e6cc      	b.n	800226e <HAL_RCC_OscConfig+0x82>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024d4:	f7ff f99e 	bl	8001814 <HAL_GetTick>
 80024d8:	1b80      	subs	r0, r0, r6
 80024da:	2802      	cmp	r0, #2
 80024dc:	d9d6      	bls.n	800248c <HAL_RCC_OscConfig+0x2a0>
 80024de:	e6c6      	b.n	800226e <HAL_RCC_OscConfig+0x82>
        tickstart = HAL_GetTick();
 80024e0:	f7ff f998 	bl	8001814 <HAL_GetTick>
 80024e4:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024e6:	6823      	ldr	r3, [r4, #0]
 80024e8:	019b      	lsls	r3, r3, #6
 80024ea:	f57f ae95 	bpl.w	8002218 <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024ee:	f7ff f991 	bl	8001814 <HAL_GetTick>
 80024f2:	1b40      	subs	r0, r0, r5
 80024f4:	2802      	cmp	r0, #2
 80024f6:	d9f6      	bls.n	80024e6 <HAL_RCC_OscConfig+0x2fa>
 80024f8:	e6b9      	b.n	800226e <HAL_RCC_OscConfig+0x82>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80024fa:	2801      	cmp	r0, #1
 80024fc:	f43f aeb8 	beq.w	8002270 <HAL_RCC_OscConfig+0x84>
        pll_config = RCC->CFGR;
 8002500:	6863      	ldr	r3, [r4, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002502:	6a2a      	ldr	r2, [r5, #32]
 8002504:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 8002508:	4291      	cmp	r1, r2
 800250a:	f47f ae9b 	bne.w	8002244 <HAL_RCC_OscConfig+0x58>
 800250e:	6a6a      	ldr	r2, [r5, #36]	; 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002510:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002514:	4293      	cmp	r3, r2
 8002516:	f43f ae7f 	beq.w	8002218 <HAL_RCC_OscConfig+0x2c>
 800251a:	e693      	b.n	8002244 <HAL_RCC_OscConfig+0x58>
 800251c:	40021000 	.word	0x40021000
 8002520:	42420000 	.word	0x42420000

08002524 <HAL_RCC_GetSysClockFreq>:
{
 8002524:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002526:	4b18      	ldr	r3, [pc, #96]	; (8002588 <HAL_RCC_GetSysClockFreq+0x64>)
{
 8002528:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800252a:	ac02      	add	r4, sp, #8
 800252c:	f103 0510 	add.w	r5, r3, #16
 8002530:	4622      	mov	r2, r4
 8002532:	6818      	ldr	r0, [r3, #0]
 8002534:	6859      	ldr	r1, [r3, #4]
 8002536:	3308      	adds	r3, #8
 8002538:	c203      	stmia	r2!, {r0, r1}
 800253a:	42ab      	cmp	r3, r5
 800253c:	4614      	mov	r4, r2
 800253e:	d1f7      	bne.n	8002530 <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002540:	f240 2301 	movw	r3, #513	; 0x201
  tmpreg = RCC->CFGR;
 8002544:	4911      	ldr	r1, [pc, #68]	; (800258c <HAL_RCC_GetSysClockFreq+0x68>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002546:	f8ad 3004 	strh.w	r3, [sp, #4]
  tmpreg = RCC->CFGR;
 800254a:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 800254c:	f003 020c 	and.w	r2, r3, #12
 8002550:	2a08      	cmp	r2, #8
 8002552:	d117      	bne.n	8002584 <HAL_RCC_GetSysClockFreq+0x60>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002554:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8002558:	3218      	adds	r2, #24
 800255a:	446a      	add	r2, sp
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800255c:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800255e:	f812 0c10 	ldrb.w	r0, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002562:	d50c      	bpl.n	800257e <HAL_RCC_GetSysClockFreq+0x5a>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002564:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002566:	4a0a      	ldr	r2, [pc, #40]	; (8002590 <HAL_RCC_GetSysClockFreq+0x6c>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002568:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800256c:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800256e:	3318      	adds	r3, #24
 8002570:	446b      	add	r3, sp
 8002572:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002576:	fbb0 f0f3 	udiv	r0, r0, r3
}
 800257a:	b007      	add	sp, #28
 800257c:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800257e:	4b05      	ldr	r3, [pc, #20]	; (8002594 <HAL_RCC_GetSysClockFreq+0x70>)
 8002580:	4358      	muls	r0, r3
 8002582:	e7fa      	b.n	800257a <HAL_RCC_GetSysClockFreq+0x56>
      sysclockfreq = HSE_VALUE;
 8002584:	4802      	ldr	r0, [pc, #8]	; (8002590 <HAL_RCC_GetSysClockFreq+0x6c>)
  return sysclockfreq;
 8002586:	e7f8      	b.n	800257a <HAL_RCC_GetSysClockFreq+0x56>
 8002588:	08006b6b 	.word	0x08006b6b
 800258c:	40021000 	.word	0x40021000
 8002590:	007a1200 	.word	0x007a1200
 8002594:	003d0900 	.word	0x003d0900

08002598 <HAL_RCC_ClockConfig>:
{
 8002598:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800259c:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 800259e:	4604      	mov	r4, r0
 80025a0:	b910      	cbnz	r0, 80025a8 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 80025a2:	2001      	movs	r0, #1
}
 80025a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80025a8:	4a44      	ldr	r2, [pc, #272]	; (80026bc <HAL_RCC_ClockConfig+0x124>)
 80025aa:	6813      	ldr	r3, [r2, #0]
 80025ac:	f003 0307 	and.w	r3, r3, #7
 80025b0:	428b      	cmp	r3, r1
 80025b2:	d328      	bcc.n	8002606 <HAL_RCC_ClockConfig+0x6e>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025b4:	6821      	ldr	r1, [r4, #0]
 80025b6:	078e      	lsls	r6, r1, #30
 80025b8:	d430      	bmi.n	800261c <HAL_RCC_ClockConfig+0x84>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80025ba:	07ca      	lsls	r2, r1, #31
 80025bc:	d443      	bmi.n	8002646 <HAL_RCC_ClockConfig+0xae>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80025be:	4a3f      	ldr	r2, [pc, #252]	; (80026bc <HAL_RCC_ClockConfig+0x124>)
 80025c0:	6813      	ldr	r3, [r2, #0]
 80025c2:	f003 0307 	and.w	r3, r3, #7
 80025c6:	42ab      	cmp	r3, r5
 80025c8:	d865      	bhi.n	8002696 <HAL_RCC_ClockConfig+0xfe>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025ca:	6822      	ldr	r2, [r4, #0]
 80025cc:	4d3c      	ldr	r5, [pc, #240]	; (80026c0 <HAL_RCC_ClockConfig+0x128>)
 80025ce:	f012 0f04 	tst.w	r2, #4
 80025d2:	d16c      	bne.n	80026ae <HAL_RCC_ClockConfig+0x116>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025d4:	0713      	lsls	r3, r2, #28
 80025d6:	d506      	bpl.n	80025e6 <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80025d8:	686b      	ldr	r3, [r5, #4]
 80025da:	6922      	ldr	r2, [r4, #16]
 80025dc:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80025e0:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80025e4:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80025e6:	f7ff ff9d 	bl	8002524 <HAL_RCC_GetSysClockFreq>
 80025ea:	686b      	ldr	r3, [r5, #4]
 80025ec:	4a35      	ldr	r2, [pc, #212]	; (80026c4 <HAL_RCC_ClockConfig+0x12c>)
 80025ee:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80025f2:	5cd3      	ldrb	r3, [r2, r3]
 80025f4:	40d8      	lsrs	r0, r3
 80025f6:	4b34      	ldr	r3, [pc, #208]	; (80026c8 <HAL_RCC_ClockConfig+0x130>)
 80025f8:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 80025fa:	4b34      	ldr	r3, [pc, #208]	; (80026cc <HAL_RCC_ClockConfig+0x134>)
 80025fc:	6818      	ldr	r0, [r3, #0]
 80025fe:	f7ff f8c7 	bl	8001790 <HAL_InitTick>
  return HAL_OK;
 8002602:	2000      	movs	r0, #0
 8002604:	e7ce      	b.n	80025a4 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002606:	6813      	ldr	r3, [r2, #0]
 8002608:	f023 0307 	bic.w	r3, r3, #7
 800260c:	430b      	orrs	r3, r1
 800260e:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002610:	6813      	ldr	r3, [r2, #0]
 8002612:	f003 0307 	and.w	r3, r3, #7
 8002616:	428b      	cmp	r3, r1
 8002618:	d1c3      	bne.n	80025a2 <HAL_RCC_ClockConfig+0xa>
 800261a:	e7cb      	b.n	80025b4 <HAL_RCC_ClockConfig+0x1c>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800261c:	4b28      	ldr	r3, [pc, #160]	; (80026c0 <HAL_RCC_ClockConfig+0x128>)
 800261e:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002622:	bf1e      	ittt	ne
 8002624:	685a      	ldrne	r2, [r3, #4]
 8002626:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 800262a:	605a      	strne	r2, [r3, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800262c:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800262e:	bf42      	ittt	mi
 8002630:	685a      	ldrmi	r2, [r3, #4]
 8002632:	f442 5260 	orrmi.w	r2, r2, #14336	; 0x3800
 8002636:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002638:	685a      	ldr	r2, [r3, #4]
 800263a:	68a0      	ldr	r0, [r4, #8]
 800263c:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8002640:	4302      	orrs	r2, r0
 8002642:	605a      	str	r2, [r3, #4]
 8002644:	e7b9      	b.n	80025ba <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002646:	6862      	ldr	r2, [r4, #4]
 8002648:	4e1d      	ldr	r6, [pc, #116]	; (80026c0 <HAL_RCC_ClockConfig+0x128>)
 800264a:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800264c:	6833      	ldr	r3, [r6, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800264e:	d11a      	bne.n	8002686 <HAL_RCC_ClockConfig+0xee>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002650:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002654:	d0a5      	beq.n	80025a2 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002656:	6873      	ldr	r3, [r6, #4]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002658:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800265c:	f023 0303 	bic.w	r3, r3, #3
 8002660:	4313      	orrs	r3, r2
 8002662:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8002664:	f7ff f8d6 	bl	8001814 <HAL_GetTick>
 8002668:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800266a:	6873      	ldr	r3, [r6, #4]
 800266c:	6862      	ldr	r2, [r4, #4]
 800266e:	f003 030c 	and.w	r3, r3, #12
 8002672:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8002676:	d0a2      	beq.n	80025be <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002678:	f7ff f8cc 	bl	8001814 <HAL_GetTick>
 800267c:	1bc0      	subs	r0, r0, r7
 800267e:	4540      	cmp	r0, r8
 8002680:	d9f3      	bls.n	800266a <HAL_RCC_ClockConfig+0xd2>
        return HAL_TIMEOUT;
 8002682:	2003      	movs	r0, #3
 8002684:	e78e      	b.n	80025a4 <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002686:	2a02      	cmp	r2, #2
 8002688:	d102      	bne.n	8002690 <HAL_RCC_ClockConfig+0xf8>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800268a:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800268e:	e7e1      	b.n	8002654 <HAL_RCC_ClockConfig+0xbc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002690:	f013 0f02 	tst.w	r3, #2
 8002694:	e7de      	b.n	8002654 <HAL_RCC_ClockConfig+0xbc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002696:	6813      	ldr	r3, [r2, #0]
 8002698:	f023 0307 	bic.w	r3, r3, #7
 800269c:	432b      	orrs	r3, r5
 800269e:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026a0:	6813      	ldr	r3, [r2, #0]
 80026a2:	f003 0307 	and.w	r3, r3, #7
 80026a6:	42ab      	cmp	r3, r5
 80026a8:	f47f af7b 	bne.w	80025a2 <HAL_RCC_ClockConfig+0xa>
 80026ac:	e78d      	b.n	80025ca <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80026ae:	686b      	ldr	r3, [r5, #4]
 80026b0:	68e1      	ldr	r1, [r4, #12]
 80026b2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80026b6:	430b      	orrs	r3, r1
 80026b8:	606b      	str	r3, [r5, #4]
 80026ba:	e78b      	b.n	80025d4 <HAL_RCC_ClockConfig+0x3c>
 80026bc:	40022000 	.word	0x40022000
 80026c0:	40021000 	.word	0x40021000
 80026c4:	08006b53 	.word	0x08006b53
 80026c8:	20000008 	.word	0x20000008
 80026cc:	20000010 	.word	0x20000010

080026d0 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80026d0:	4b04      	ldr	r3, [pc, #16]	; (80026e4 <HAL_RCC_GetPCLK1Freq+0x14>)
 80026d2:	4a05      	ldr	r2, [pc, #20]	; (80026e8 <HAL_RCC_GetPCLK1Freq+0x18>)
 80026d4:	685b      	ldr	r3, [r3, #4]
 80026d6:	f3c3 2302 	ubfx	r3, r3, #8, #3
 80026da:	5cd3      	ldrb	r3, [r2, r3]
 80026dc:	4a03      	ldr	r2, [pc, #12]	; (80026ec <HAL_RCC_GetPCLK1Freq+0x1c>)
 80026de:	6810      	ldr	r0, [r2, #0]
}
 80026e0:	40d8      	lsrs	r0, r3
 80026e2:	4770      	bx	lr
 80026e4:	40021000 	.word	0x40021000
 80026e8:	08006b63 	.word	0x08006b63
 80026ec:	20000008 	.word	0x20000008

080026f0 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80026f0:	4b04      	ldr	r3, [pc, #16]	; (8002704 <HAL_RCC_GetPCLK2Freq+0x14>)
 80026f2:	4a05      	ldr	r2, [pc, #20]	; (8002708 <HAL_RCC_GetPCLK2Freq+0x18>)
 80026f4:	685b      	ldr	r3, [r3, #4]
 80026f6:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 80026fa:	5cd3      	ldrb	r3, [r2, r3]
 80026fc:	4a03      	ldr	r2, [pc, #12]	; (800270c <HAL_RCC_GetPCLK2Freq+0x1c>)
 80026fe:	6810      	ldr	r0, [r2, #0]
}
 8002700:	40d8      	lsrs	r0, r3
 8002702:	4770      	bx	lr
 8002704:	40021000 	.word	0x40021000
 8002708:	08006b63 	.word	0x08006b63
 800270c:	20000008 	.word	0x20000008

08002710 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002710:	6803      	ldr	r3, [r0, #0]
{
 8002712:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002716:	07d9      	lsls	r1, r3, #31
{
 8002718:	4605      	mov	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800271a:	d520      	bpl.n	800275e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800271c:	4c36      	ldr	r4, [pc, #216]	; (80027f8 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800271e:	69e3      	ldr	r3, [r4, #28]
 8002720:	00da      	lsls	r2, r3, #3
 8002722:	d432      	bmi.n	800278a <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
 8002724:	2601      	movs	r6, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8002726:	69e3      	ldr	r3, [r4, #28]
 8002728:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800272c:	61e3      	str	r3, [r4, #28]
 800272e:	69e3      	ldr	r3, [r4, #28]
 8002730:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002734:	9301      	str	r3, [sp, #4]
 8002736:	9b01      	ldr	r3, [sp, #4]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002738:	4f30      	ldr	r7, [pc, #192]	; (80027fc <HAL_RCCEx_PeriphCLKConfig+0xec>)
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	05db      	lsls	r3, r3, #23
 800273e:	d526      	bpl.n	800278e <HAL_RCCEx_PeriphCLKConfig+0x7e>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002740:	6a23      	ldr	r3, [r4, #32]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002742:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8002746:	d136      	bne.n	80027b6 <HAL_RCCEx_PeriphCLKConfig+0xa6>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002748:	6a23      	ldr	r3, [r4, #32]
 800274a:	686a      	ldr	r2, [r5, #4]
 800274c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002750:	4313      	orrs	r3, r2
 8002752:	6223      	str	r3, [r4, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002754:	b11e      	cbz	r6, 800275e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002756:	69e3      	ldr	r3, [r4, #28]
 8002758:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800275c:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800275e:	6828      	ldr	r0, [r5, #0]
 8002760:	0783      	lsls	r3, r0, #30
 8002762:	d506      	bpl.n	8002772 <HAL_RCCEx_PeriphCLKConfig+0x62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002764:	4924      	ldr	r1, [pc, #144]	; (80027f8 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8002766:	68ab      	ldr	r3, [r5, #8]
 8002768:	684a      	ldr	r2, [r1, #4]
 800276a:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800276e:	431a      	orrs	r2, r3
 8002770:	604a      	str	r2, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002772:	f010 0010 	ands.w	r0, r0, #16
 8002776:	d01b      	beq.n	80027b0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002778:	4a1f      	ldr	r2, [pc, #124]	; (80027f8 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800277a:	68e9      	ldr	r1, [r5, #12]
 800277c:	6853      	ldr	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800277e:	2000      	movs	r0, #0
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002780:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002784:	430b      	orrs	r3, r1
 8002786:	6053      	str	r3, [r2, #4]
 8002788:	e012      	b.n	80027b0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    FlagStatus pwrclkchanged = RESET;
 800278a:	2600      	movs	r6, #0
 800278c:	e7d4      	b.n	8002738 <HAL_RCCEx_PeriphCLKConfig+0x28>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002794:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8002796:	f7ff f83d 	bl	8001814 <HAL_GetTick>
 800279a:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	05d8      	lsls	r0, r3, #23
 80027a0:	d4ce      	bmi.n	8002740 <HAL_RCCEx_PeriphCLKConfig+0x30>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027a2:	f7ff f837 	bl	8001814 <HAL_GetTick>
 80027a6:	eba0 0008 	sub.w	r0, r0, r8
 80027aa:	2864      	cmp	r0, #100	; 0x64
 80027ac:	d9f6      	bls.n	800279c <HAL_RCCEx_PeriphCLKConfig+0x8c>
          return HAL_TIMEOUT;
 80027ae:	2003      	movs	r0, #3
}
 80027b0:	b002      	add	sp, #8
 80027b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80027b6:	686a      	ldr	r2, [r5, #4]
 80027b8:	f402 7240 	and.w	r2, r2, #768	; 0x300
 80027bc:	429a      	cmp	r2, r3
 80027be:	d0c3      	beq.n	8002748 <HAL_RCCEx_PeriphCLKConfig+0x38>
      __HAL_RCC_BACKUPRESET_FORCE();
 80027c0:	2001      	movs	r0, #1
 80027c2:	4a0f      	ldr	r2, [pc, #60]	; (8002800 <HAL_RCCEx_PeriphCLKConfig+0xf0>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80027c4:	6a23      	ldr	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 80027c6:	f8c2 0440 	str.w	r0, [r2, #1088]	; 0x440
      __HAL_RCC_BACKUPRESET_RELEASE();
 80027ca:	2000      	movs	r0, #0
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80027cc:	f423 7140 	bic.w	r1, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 80027d0:	f8c2 0440 	str.w	r0, [r2, #1088]	; 0x440
      RCC->BDCR = temp_reg;
 80027d4:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80027d6:	07d9      	lsls	r1, r3, #31
 80027d8:	d5b6      	bpl.n	8002748 <HAL_RCCEx_PeriphCLKConfig+0x38>
        tickstart = HAL_GetTick();
 80027da:	f7ff f81b 	bl	8001814 <HAL_GetTick>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027de:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 80027e2:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027e4:	6a23      	ldr	r3, [r4, #32]
 80027e6:	079a      	lsls	r2, r3, #30
 80027e8:	d4ae      	bmi.n	8002748 <HAL_RCCEx_PeriphCLKConfig+0x38>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027ea:	f7ff f813 	bl	8001814 <HAL_GetTick>
 80027ee:	1bc0      	subs	r0, r0, r7
 80027f0:	4540      	cmp	r0, r8
 80027f2:	d9f7      	bls.n	80027e4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80027f4:	e7db      	b.n	80027ae <HAL_RCCEx_PeriphCLKConfig+0x9e>
 80027f6:	bf00      	nop
 80027f8:	40021000 	.word	0x40021000
 80027fc:	40007000 	.word	0x40007000
 8002800:	42420000 	.word	0x42420000

08002804 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8002804:	4602      	mov	r2, r0
 8002806:	b570      	push	{r4, r5, r6, lr}
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002808:	4b33      	ldr	r3, [pc, #204]	; (80028d8 <HAL_RCCEx_GetPeriphCLKFreq+0xd4>)
{
 800280a:	b086      	sub	sp, #24
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800280c:	ad02      	add	r5, sp, #8
 800280e:	f103 0610 	add.w	r6, r3, #16
 8002812:	462c      	mov	r4, r5
 8002814:	6818      	ldr	r0, [r3, #0]
 8002816:	6859      	ldr	r1, [r3, #4]
 8002818:	3308      	adds	r3, #8
 800281a:	c403      	stmia	r4!, {r0, r1}
 800281c:	42b3      	cmp	r3, r6
 800281e:	4625      	mov	r5, r4
 8002820:	d1f7      	bne.n	8002812 <HAL_RCCEx_GetPeriphCLKFreq+0xe>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002822:	f240 2301 	movw	r3, #513	; 0x201
  uint32_t temp_reg = 0U, frequency = 0U;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8002826:	2a02      	cmp	r2, #2
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002828:	f8ad 3004 	strh.w	r3, [sp, #4]
  switch (PeriphClk)
 800282c:	d047      	beq.n	80028be <HAL_RCCEx_GetPeriphCLKFreq+0xba>
 800282e:	2a10      	cmp	r2, #16
 8002830:	d003      	beq.n	800283a <HAL_RCCEx_GetPeriphCLKFreq+0x36>
 8002832:	2a01      	cmp	r2, #1
 8002834:	d024      	beq.n	8002880 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
  uint32_t temp_reg = 0U, frequency = 0U;
 8002836:	2000      	movs	r0, #0
    default:
    {
      break;
    }
  }
  return (frequency);
 8002838:	e036      	b.n	80028a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa4>
      temp_reg = RCC->CFGR;
 800283a:	4a28      	ldr	r2, [pc, #160]	; (80028dc <HAL_RCCEx_GetPeriphCLKFreq+0xd8>)
 800283c:	6851      	ldr	r1, [r2, #4]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 800283e:	6810      	ldr	r0, [r2, #0]
 8002840:	f010 7080 	ands.w	r0, r0, #16777216	; 0x1000000
 8002844:	d030      	beq.n	80028a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa4>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002846:	f3c1 4383 	ubfx	r3, r1, #18, #4
 800284a:	3318      	adds	r3, #24
 800284c:	446b      	add	r3, sp
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800284e:	03c9      	lsls	r1, r1, #15
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002850:	f813 0c10 	ldrb.w	r0, [r3, #-16]
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002854:	bf49      	itett	mi
 8002856:	6853      	ldrmi	r3, [r2, #4]
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002858:	4b21      	ldrpl	r3, [pc, #132]	; (80028e0 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>)
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800285a:	f3c3 4340 	ubfxmi	r3, r3, #17, #1
 800285e:	3318      	addmi	r3, #24
 8002860:	bf41      	itttt	mi
 8002862:	446b      	addmi	r3, sp
 8002864:	f813 1c14 	ldrbmi.w	r1, [r3, #-20]
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8002868:	4b1e      	ldrmi	r3, [pc, #120]	; (80028e4 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>)
 800286a:	fbb3 f3f1 	udivmi	r3, r3, r1
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800286e:	4358      	muls	r0, r3
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8002870:	6853      	ldr	r3, [r2, #4]
 8002872:	025b      	lsls	r3, r3, #9
 8002874:	d418      	bmi.n	80028a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa4>
          frequency = (pllclk * 2) / 3;
 8002876:	2303      	movs	r3, #3
 8002878:	0040      	lsls	r0, r0, #1
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 800287a:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 800287e:	e013      	b.n	80028a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa4>
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8002880:	f240 3102 	movw	r1, #770	; 0x302
      temp_reg = RCC->BDCR;
 8002884:	4a15      	ldr	r2, [pc, #84]	; (80028dc <HAL_RCCEx_GetPeriphCLKFreq+0xd8>)
 8002886:	6a13      	ldr	r3, [r2, #32]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8002888:	4019      	ands	r1, r3
 800288a:	f5b1 7f81 	cmp.w	r1, #258	; 0x102
 800288e:	d01f      	beq.n	80028d0 <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8002890:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002894:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002898:	d108      	bne.n	80028ac <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
        frequency = LSI_VALUE;
 800289a:	f649 4340 	movw	r3, #40000	; 0x9c40
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 800289e:	6a50      	ldr	r0, [r2, #36]	; 0x24
        frequency = LSI_VALUE;
 80028a0:	f010 0002 	ands.w	r0, r0, #2
        frequency = HSE_VALUE / 128U;
 80028a4:	bf18      	it	ne
 80028a6:	4618      	movne	r0, r3
}
 80028a8:	b006      	add	sp, #24
 80028aa:	bd70      	pop	{r4, r5, r6, pc}
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80028ac:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80028b0:	d1c1      	bne.n	8002836 <HAL_RCCEx_GetPeriphCLKFreq+0x32>
 80028b2:	6810      	ldr	r0, [r2, #0]
        frequency = HSE_VALUE / 128U;
 80028b4:	f24f 4324 	movw	r3, #62500	; 0xf424
 80028b8:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
 80028bc:	e7f2      	b.n	80028a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80028be:	f7ff ff17 	bl	80026f0 <HAL_RCC_GetPCLK2Freq>
 80028c2:	4b06      	ldr	r3, [pc, #24]	; (80028dc <HAL_RCCEx_GetPeriphCLKFreq+0xd8>)
 80028c4:	685b      	ldr	r3, [r3, #4]
 80028c6:	f3c3 3381 	ubfx	r3, r3, #14, #2
 80028ca:	3301      	adds	r3, #1
 80028cc:	005b      	lsls	r3, r3, #1
 80028ce:	e7d4      	b.n	800287a <HAL_RCCEx_GetPeriphCLKFreq+0x76>
        frequency = LSE_VALUE;
 80028d0:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80028d4:	e7e8      	b.n	80028a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa4>
 80028d6:	bf00      	nop
 80028d8:	08006b6b 	.word	0x08006b6b
 80028dc:	40021000 	.word	0x40021000
 80028e0:	003d0900 	.word	0x003d0900
 80028e4:	007a1200 	.word	0x007a1200

080028e8 <RTC_ReadTimeCounter>:
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
  uint32_t timecounter = 0U;

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 80028e8:	6803      	ldr	r3, [r0, #0]
{
 80028ea:	b530      	push	{r4, r5, lr}
  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 80028ec:	699a      	ldr	r2, [r3, #24]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 80028ee:	69d8      	ldr	r0, [r3, #28]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 80028f0:	6999      	ldr	r1, [r3, #24]

  if (high1 != high2)
 80028f2:	b295      	uxth	r5, r2
 80028f4:	b28c      	uxth	r4, r1
 80028f6:	42a5      	cmp	r5, r4
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 80028f8:	bf17      	itett	ne
 80028fa:	69d8      	ldrne	r0, [r3, #28]
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 80028fc:	b280      	uxtheq	r0, r0
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 80028fe:	b280      	uxthne	r0, r0
 8002900:	ea40 4001 	orrne.w	r0, r0, r1, lsl #16
    timecounter = (((uint32_t) high1 << 16U) | low);
 8002904:	bf08      	it	eq
 8002906:	ea40 4002 	orreq.w	r0, r0, r2, lsl #16
  }

  return timecounter;
}
 800290a:	bd30      	pop	{r4, r5, pc}

0800290c <RTC_ReadAlarmCounter>:
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
  uint16_t high1 = 0U, low = 0U;

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 800290c:	6803      	ldr	r3, [r0, #0]
 800290e:	6a18      	ldr	r0, [r3, #32]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 8002910:	6a5b      	ldr	r3, [r3, #36]	; 0x24

  return (((uint32_t) high1 << 16U) | low);
 8002912:	b29b      	uxth	r3, r3
}
 8002914:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8002918:	4770      	bx	lr

0800291a <RTC_Bcd2ToByte>:
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
  uint32_t tmp = 0U;
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
  return (tmp + (Value & (uint8_t)0x0F));
 800291a:	220a      	movs	r2, #10
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 800291c:	0903      	lsrs	r3, r0, #4
  return (tmp + (Value & (uint8_t)0x0F));
 800291e:	f000 000f 	and.w	r0, r0, #15
 8002922:	fb02 0003 	mla	r0, r2, r3, r0
}
 8002926:	b2c0      	uxtb	r0, r0
 8002928:	4770      	bx	lr

0800292a <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 800292a:	b530      	push	{r4, r5, lr}
 800292c:	4603      	mov	r3, r0
  uint32_t year = 0U, weekday = 0U;

  year = 2000U + nYear;
 800292e:	f500 64fa 	add.w	r4, r0, #2000	; 0x7d0

  if (nMonth < 3U)
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 8002932:	2017      	movs	r0, #23
 8002934:	2509      	movs	r5, #9
 8002936:	4348      	muls	r0, r1
  if (nMonth < 3U)
 8002938:	2902      	cmp	r1, #2
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 800293a:	fbb0 f5f5 	udiv	r5, r0, r5
  if (nMonth < 3U)
 800293e:	d817      	bhi.n	8002970 <RTC_WeekDayNum+0x46>
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 8002940:	3204      	adds	r2, #4
 8002942:	1910      	adds	r0, r2, r4
 8002944:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8002948:	f203 73cf 	addw	r3, r3, #1999	; 0x7cf
 800294c:	fbb3 f2f2 	udiv	r2, r3, r2
 8002950:	4428      	add	r0, r5
 8002952:	eb00 0093 	add.w	r0, r0, r3, lsr #2
 8002956:	4410      	add	r0, r2
 8002958:	2264      	movs	r2, #100	; 0x64
 800295a:	fbb3 f3f2 	udiv	r3, r3, r2
 800295e:	1ac0      	subs	r0, r0, r3
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 8002960:	2307      	movs	r3, #7
 8002962:	fbb0 f3f3 	udiv	r3, r0, r3
 8002966:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800296a:	1ac0      	subs	r0, r0, r3
  }

  return (uint8_t)weekday;
}
 800296c:	b2c0      	uxtb	r0, r0
 800296e:	bd30      	pop	{r4, r5, pc}
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 8002970:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8002974:	fbb4 f3f3 	udiv	r3, r4, r3
 8002978:	1c90      	adds	r0, r2, #2
 800297a:	4420      	add	r0, r4
 800297c:	4428      	add	r0, r5
 800297e:	eb00 0094 	add.w	r0, r0, r4, lsr #2
 8002982:	4418      	add	r0, r3
 8002984:	2364      	movs	r3, #100	; 0x64
 8002986:	fbb4 f4f3 	udiv	r4, r4, r3
 800298a:	1b00      	subs	r0, r0, r4
 800298c:	e7e8      	b.n	8002960 <RTC_WeekDayNum+0x36>

0800298e <RTC_EnterInitMode>:
{
 800298e:	b538      	push	{r3, r4, r5, lr}
 8002990:	4604      	mov	r4, r0
  tickstart = HAL_GetTick();
 8002992:	f7fe ff3f 	bl	8001814 <HAL_GetTick>
 8002996:	4605      	mov	r5, r0
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8002998:	6823      	ldr	r3, [r4, #0]
 800299a:	685a      	ldr	r2, [r3, #4]
 800299c:	0692      	lsls	r2, r2, #26
 800299e:	d505      	bpl.n	80029ac <RTC_EnterInitMode+0x1e>
  return HAL_OK;
 80029a0:	2000      	movs	r0, #0
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80029a2:	685a      	ldr	r2, [r3, #4]
 80029a4:	f042 0210 	orr.w	r2, r2, #16
 80029a8:	605a      	str	r2, [r3, #4]
}
 80029aa:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80029ac:	f7fe ff32 	bl	8001814 <HAL_GetTick>
 80029b0:	1b40      	subs	r0, r0, r5
 80029b2:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80029b6:	d9ef      	bls.n	8002998 <RTC_EnterInitMode+0xa>
      return HAL_TIMEOUT;
 80029b8:	2003      	movs	r0, #3
 80029ba:	e7f6      	b.n	80029aa <RTC_EnterInitMode+0x1c>

080029bc <RTC_ExitInitMode>:
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80029bc:	6802      	ldr	r2, [r0, #0]
{
 80029be:	b538      	push	{r3, r4, r5, lr}
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80029c0:	6853      	ldr	r3, [r2, #4]
{
 80029c2:	4604      	mov	r4, r0
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80029c4:	f023 0310 	bic.w	r3, r3, #16
 80029c8:	6053      	str	r3, [r2, #4]
  tickstart = HAL_GetTick();
 80029ca:	f7fe ff23 	bl	8001814 <HAL_GetTick>
 80029ce:	4605      	mov	r5, r0
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80029d0:	6823      	ldr	r3, [r4, #0]
 80029d2:	685b      	ldr	r3, [r3, #4]
 80029d4:	069b      	lsls	r3, r3, #26
 80029d6:	d501      	bpl.n	80029dc <RTC_ExitInitMode+0x20>
  return HAL_OK;
 80029d8:	2000      	movs	r0, #0
}
 80029da:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80029dc:	f7fe ff1a 	bl	8001814 <HAL_GetTick>
 80029e0:	1b40      	subs	r0, r0, r5
 80029e2:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80029e6:	d9f3      	bls.n	80029d0 <RTC_ExitInitMode+0x14>
      return HAL_TIMEOUT;
 80029e8:	2003      	movs	r0, #3
 80029ea:	e7f6      	b.n	80029da <RTC_ExitInitMode+0x1e>

080029ec <RTC_WriteTimeCounter>:
{
 80029ec:	b538      	push	{r3, r4, r5, lr}
 80029ee:	4605      	mov	r5, r0
 80029f0:	460c      	mov	r4, r1
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80029f2:	f7ff ffcc 	bl	800298e <RTC_EnterInitMode>
 80029f6:	b958      	cbnz	r0, 8002a10 <RTC_WriteTimeCounter+0x24>
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 80029f8:	682b      	ldr	r3, [r5, #0]
 80029fa:	0c22      	lsrs	r2, r4, #16
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 80029fc:	b2a4      	uxth	r4, r4
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 80029fe:	619a      	str	r2, [r3, #24]
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8002a00:	4628      	mov	r0, r5
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 8002a02:	61dc      	str	r4, [r3, #28]
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8002a04:	f7ff ffda 	bl	80029bc <RTC_ExitInitMode>
    status = HAL_ERROR;
 8002a08:	3800      	subs	r0, #0
 8002a0a:	bf18      	it	ne
 8002a0c:	2001      	movne	r0, #1
}
 8002a0e:	bd38      	pop	{r3, r4, r5, pc}
    status = HAL_ERROR;
 8002a10:	2001      	movs	r0, #1
 8002a12:	e7fc      	b.n	8002a0e <RTC_WriteTimeCounter+0x22>

08002a14 <RTC_WriteAlarmCounter>:
{
 8002a14:	b538      	push	{r3, r4, r5, lr}
 8002a16:	4605      	mov	r5, r0
 8002a18:	460c      	mov	r4, r1
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8002a1a:	f7ff ffb8 	bl	800298e <RTC_EnterInitMode>
 8002a1e:	b958      	cbnz	r0, 8002a38 <RTC_WriteAlarmCounter+0x24>
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 8002a20:	682b      	ldr	r3, [r5, #0]
 8002a22:	0c22      	lsrs	r2, r4, #16
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 8002a24:	b2a4      	uxth	r4, r4
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 8002a26:	621a      	str	r2, [r3, #32]
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8002a28:	4628      	mov	r0, r5
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 8002a2a:	625c      	str	r4, [r3, #36]	; 0x24
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8002a2c:	f7ff ffc6 	bl	80029bc <RTC_ExitInitMode>
    status = HAL_ERROR;
 8002a30:	3800      	subs	r0, #0
 8002a32:	bf18      	it	ne
 8002a34:	2001      	movne	r0, #1
}
 8002a36:	bd38      	pop	{r3, r4, r5, pc}
    status = HAL_ERROR;
 8002a38:	2001      	movs	r0, #1
 8002a3a:	e7fc      	b.n	8002a36 <RTC_WriteAlarmCounter+0x22>

08002a3c <HAL_RTC_SetTime>:
{
 8002a3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((hrtc == NULL) || (sTime == NULL))
 8002a3e:	4604      	mov	r4, r0
 8002a40:	b1e0      	cbz	r0, 8002a7c <HAL_RTC_SetTime+0x40>
 8002a42:	b1d9      	cbz	r1, 8002a7c <HAL_RTC_SetTime+0x40>
  __HAL_LOCK(hrtc);
 8002a44:	7c03      	ldrb	r3, [r0, #16]
 8002a46:	2502      	movs	r5, #2
 8002a48:	2b01      	cmp	r3, #1
 8002a4a:	d044      	beq.n	8002ad6 <HAL_RTC_SetTime+0x9a>
 8002a4c:	2301      	movs	r3, #1
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002a4e:	7445      	strb	r5, [r0, #17]
  __HAL_LOCK(hrtc);
 8002a50:	7403      	strb	r3, [r0, #16]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8002a52:	7808      	ldrb	r0, [r1, #0]
                              ((uint32_t)sTime->Minutes * 60U) + \
 8002a54:	784d      	ldrb	r5, [r1, #1]
                              ((uint32_t)sTime->Seconds));
 8002a56:	788f      	ldrb	r7, [r1, #2]
  if (Format == RTC_FORMAT_BIN)
 8002a58:	b992      	cbnz	r2, 8002a80 <HAL_RTC_SetTime+0x44>
                              ((uint32_t)sTime->Minutes * 60U) + \
 8002a5a:	263c      	movs	r6, #60	; 0x3c
 8002a5c:	4375      	muls	r5, r6
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8002a5e:	f44f 6661 	mov.w	r6, #3600	; 0xe10
 8002a62:	fb06 5500 	mla	r5, r6, r0, r5
 8002a66:	19ee      	adds	r6, r5, r7
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8002a68:	4631      	mov	r1, r6
 8002a6a:	4620      	mov	r0, r4
 8002a6c:	f7ff ffbe 	bl	80029ec <RTC_WriteTimeCounter>
 8002a70:	4605      	mov	r5, r0
 8002a72:	b1b0      	cbz	r0, 8002aa2 <HAL_RTC_SetTime+0x66>
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002a74:	2304      	movs	r3, #4
 8002a76:	7463      	strb	r3, [r4, #17]
    __HAL_UNLOCK(hrtc);
 8002a78:	2300      	movs	r3, #0
 8002a7a:	7423      	strb	r3, [r4, #16]
    return HAL_ERROR;
 8002a7c:	2501      	movs	r5, #1
 8002a7e:	e02a      	b.n	8002ad6 <HAL_RTC_SetTime+0x9a>
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8002a80:	f7ff ff4b 	bl	800291a <RTC_Bcd2ToByte>
 8002a84:	4601      	mov	r1, r0
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 8002a86:	4628      	mov	r0, r5
 8002a88:	f7ff ff47 	bl	800291a <RTC_Bcd2ToByte>
 8002a8c:	263c      	movs	r6, #60	; 0x3c
 8002a8e:	4346      	muls	r6, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8002a90:	f44f 6061 	mov.w	r0, #3600	; 0xe10
 8002a94:	fb00 6601 	mla	r6, r0, r1, r6
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 8002a98:	4638      	mov	r0, r7
 8002a9a:	f7ff ff3e 	bl	800291a <RTC_Bcd2ToByte>
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8002a9e:	4406      	add	r6, r0
 8002aa0:	e7e2      	b.n	8002a68 <HAL_RTC_SetTime+0x2c>
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 8002aa2:	6822      	ldr	r2, [r4, #0]
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8002aa4:	4620      	mov	r0, r4
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 8002aa6:	6853      	ldr	r3, [r2, #4]
 8002aa8:	f023 0305 	bic.w	r3, r3, #5
 8002aac:	6053      	str	r3, [r2, #4]
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8002aae:	f7ff ff2d 	bl	800290c <RTC_ReadAlarmCounter>
      if (counter_alarm < counter_time)
 8002ab2:	4286      	cmp	r6, r0
 8002ab4:	d90b      	bls.n	8002ace <HAL_RTC_SetTime+0x92>
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8002ab6:	f500 31a8 	add.w	r1, r0, #86016	; 0x15000
 8002aba:	f501 71c0 	add.w	r1, r1, #384	; 0x180
 8002abe:	4620      	mov	r0, r4
 8002ac0:	f7ff ffa8 	bl	8002a14 <RTC_WriteAlarmCounter>
 8002ac4:	b118      	cbz	r0, 8002ace <HAL_RTC_SetTime+0x92>
          hrtc->State = HAL_RTC_STATE_ERROR;
 8002ac6:	2304      	movs	r3, #4
          __HAL_UNLOCK(hrtc);
 8002ac8:	7425      	strb	r5, [r4, #16]
          hrtc->State = HAL_RTC_STATE_ERROR;
 8002aca:	7463      	strb	r3, [r4, #17]
          return HAL_ERROR;
 8002acc:	e7d6      	b.n	8002a7c <HAL_RTC_SetTime+0x40>
    hrtc->State = HAL_RTC_STATE_READY;
 8002ace:	2301      	movs	r3, #1
 8002ad0:	7463      	strb	r3, [r4, #17]
    __HAL_UNLOCK(hrtc);
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	7423      	strb	r3, [r4, #16]
}
 8002ad6:	4628      	mov	r0, r5
 8002ad8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002adc <HAL_RTC_SetDate>:
{
 8002adc:	b570      	push	{r4, r5, r6, lr}
 8002ade:	460d      	mov	r5, r1
  if ((hrtc == NULL) || (sDate == NULL))
 8002ae0:	4604      	mov	r4, r0
 8002ae2:	b350      	cbz	r0, 8002b3a <HAL_RTC_SetDate+0x5e>
 8002ae4:	b349      	cbz	r1, 8002b3a <HAL_RTC_SetDate+0x5e>
  __HAL_LOCK(hrtc);
 8002ae6:	7c03      	ldrb	r3, [r0, #16]
 8002ae8:	2002      	movs	r0, #2
 8002aea:	2b01      	cmp	r3, #1
 8002aec:	d048      	beq.n	8002b80 <HAL_RTC_SetDate+0xa4>
 8002aee:	2301      	movs	r3, #1
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002af0:	7460      	strb	r0, [r4, #17]
  __HAL_LOCK(hrtc);
 8002af2:	7423      	strb	r3, [r4, #16]
  if (Format == RTC_FORMAT_BIN)
 8002af4:	78c8      	ldrb	r0, [r1, #3]
 8002af6:	bb12      	cbnz	r2, 8002b3e <HAL_RTC_SetDate+0x62>
    hrtc->DateToUpdate.Year  = sDate->Year;
 8002af8:	73e0      	strb	r0, [r4, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 8002afa:	784b      	ldrb	r3, [r1, #1]
 8002afc:	7363      	strb	r3, [r4, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 8002afe:	788b      	ldrb	r3, [r1, #2]
 8002b00:	73a3      	strb	r3, [r4, #14]
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 8002b02:	7ba2      	ldrb	r2, [r4, #14]
 8002b04:	7b61      	ldrb	r1, [r4, #13]
 8002b06:	7be0      	ldrb	r0, [r4, #15]
 8002b08:	f7ff ff0f 	bl	800292a <RTC_WeekDayNum>
 8002b0c:	7320      	strb	r0, [r4, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 8002b0e:	7028      	strb	r0, [r5, #0]
  counter_time = RTC_ReadTimeCounter(hrtc);
 8002b10:	4620      	mov	r0, r4
 8002b12:	f7ff fee9 	bl	80028e8 <RTC_ReadTimeCounter>
  if (hours > 24U)
 8002b16:	4b1b      	ldr	r3, [pc, #108]	; (8002b84 <HAL_RTC_SetDate+0xa8>)
 8002b18:	4298      	cmp	r0, r3
 8002b1a:	d92d      	bls.n	8002b78 <HAL_RTC_SetDate+0x9c>
    counter_time -= ((hours / 24U) * 24U * 3600U);
 8002b1c:	4d1a      	ldr	r5, [pc, #104]	; (8002b88 <HAL_RTC_SetDate+0xac>)
 8002b1e:	fbb0 f1f5 	udiv	r1, r0, r5
 8002b22:	fb05 0511 	mls	r5, r5, r1, r0
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8002b26:	4620      	mov	r0, r4
 8002b28:	4629      	mov	r1, r5
 8002b2a:	f7ff ff5f 	bl	80029ec <RTC_WriteTimeCounter>
 8002b2e:	4606      	mov	r6, r0
 8002b30:	b188      	cbz	r0, 8002b56 <HAL_RTC_SetDate+0x7a>
      hrtc->State = HAL_RTC_STATE_ERROR;
 8002b32:	2304      	movs	r3, #4
 8002b34:	7463      	strb	r3, [r4, #17]
      __HAL_UNLOCK(hrtc);
 8002b36:	2300      	movs	r3, #0
 8002b38:	7423      	strb	r3, [r4, #16]
    return HAL_ERROR;
 8002b3a:	2001      	movs	r0, #1
 8002b3c:	e020      	b.n	8002b80 <HAL_RTC_SetDate+0xa4>
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 8002b3e:	f7ff feec 	bl	800291a <RTC_Bcd2ToByte>
 8002b42:	73e0      	strb	r0, [r4, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 8002b44:	7848      	ldrb	r0, [r1, #1]
 8002b46:	f7ff fee8 	bl	800291a <RTC_Bcd2ToByte>
 8002b4a:	7360      	strb	r0, [r4, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 8002b4c:	7888      	ldrb	r0, [r1, #2]
 8002b4e:	f7ff fee4 	bl	800291a <RTC_Bcd2ToByte>
 8002b52:	73a0      	strb	r0, [r4, #14]
 8002b54:	e7d5      	b.n	8002b02 <HAL_RTC_SetDate+0x26>
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8002b56:	4620      	mov	r0, r4
 8002b58:	f7ff fed8 	bl	800290c <RTC_ReadAlarmCounter>
      if (counter_alarm < counter_time)
 8002b5c:	4285      	cmp	r5, r0
 8002b5e:	d90b      	bls.n	8002b78 <HAL_RTC_SetDate+0x9c>
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8002b60:	f500 31a8 	add.w	r1, r0, #86016	; 0x15000
 8002b64:	f501 71c0 	add.w	r1, r1, #384	; 0x180
 8002b68:	4620      	mov	r0, r4
 8002b6a:	f7ff ff53 	bl	8002a14 <RTC_WriteAlarmCounter>
 8002b6e:	b118      	cbz	r0, 8002b78 <HAL_RTC_SetDate+0x9c>
          hrtc->State = HAL_RTC_STATE_ERROR;
 8002b70:	2304      	movs	r3, #4
          __HAL_UNLOCK(hrtc);
 8002b72:	7426      	strb	r6, [r4, #16]
          hrtc->State = HAL_RTC_STATE_ERROR;
 8002b74:	7463      	strb	r3, [r4, #17]
          return HAL_ERROR;
 8002b76:	e7e0      	b.n	8002b3a <HAL_RTC_SetDate+0x5e>
  hrtc->State = HAL_RTC_STATE_READY ;
 8002b78:	2301      	movs	r3, #1
  __HAL_UNLOCK(hrtc);
 8002b7a:	2000      	movs	r0, #0
  hrtc->State = HAL_RTC_STATE_READY ;
 8002b7c:	7463      	strb	r3, [r4, #17]
  __HAL_UNLOCK(hrtc);
 8002b7e:	7420      	strb	r0, [r4, #16]
}
 8002b80:	bd70      	pop	{r4, r5, r6, pc}
 8002b82:	bf00      	nop
 8002b84:	00015f8f 	.word	0x00015f8f
 8002b88:	00015180 	.word	0x00015180

08002b8c <HAL_RTC_WaitForSynchro>:
{
 8002b8c:	b538      	push	{r3, r4, r5, lr}
  if (hrtc == NULL)
 8002b8e:	4604      	mov	r4, r0
 8002b90:	b1a8      	cbz	r0, 8002bbe <HAL_RTC_WaitForSynchro+0x32>
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 8002b92:	6802      	ldr	r2, [r0, #0]
 8002b94:	6853      	ldr	r3, [r2, #4]
 8002b96:	f023 0308 	bic.w	r3, r3, #8
 8002b9a:	6053      	str	r3, [r2, #4]
  tickstart = HAL_GetTick();
 8002b9c:	f7fe fe3a 	bl	8001814 <HAL_GetTick>
 8002ba0:	4605      	mov	r5, r0
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8002ba2:	6823      	ldr	r3, [r4, #0]
 8002ba4:	685b      	ldr	r3, [r3, #4]
 8002ba6:	071b      	lsls	r3, r3, #28
 8002ba8:	d501      	bpl.n	8002bae <HAL_RTC_WaitForSynchro+0x22>
  return HAL_OK;
 8002baa:	2000      	movs	r0, #0
}
 8002bac:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8002bae:	f7fe fe31 	bl	8001814 <HAL_GetTick>
 8002bb2:	1b40      	subs	r0, r0, r5
 8002bb4:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8002bb8:	d9f3      	bls.n	8002ba2 <HAL_RTC_WaitForSynchro+0x16>
      return HAL_TIMEOUT;
 8002bba:	2003      	movs	r0, #3
 8002bbc:	e7f6      	b.n	8002bac <HAL_RTC_WaitForSynchro+0x20>
    return HAL_ERROR;
 8002bbe:	2001      	movs	r0, #1
 8002bc0:	e7f4      	b.n	8002bac <HAL_RTC_WaitForSynchro+0x20>
	...

08002bc4 <HAL_RTC_Init>:
{
 8002bc4:	b510      	push	{r4, lr}
  if (hrtc == NULL)
 8002bc6:	4604      	mov	r4, r0
 8002bc8:	b170      	cbz	r0, 8002be8 <HAL_RTC_Init+0x24>
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8002bca:	7c43      	ldrb	r3, [r0, #17]
 8002bcc:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002bd0:	b913      	cbnz	r3, 8002bd8 <HAL_RTC_Init+0x14>
    hrtc->Lock = HAL_UNLOCKED;
 8002bd2:	7402      	strb	r2, [r0, #16]
    HAL_RTC_MspInit(hrtc);
 8002bd4:	f7fe fc18 	bl	8001408 <HAL_RTC_MspInit>
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002bd8:	2302      	movs	r3, #2
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002bda:	4620      	mov	r0, r4
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002bdc:	7463      	strb	r3, [r4, #17]
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002bde:	f7ff ffd5 	bl	8002b8c <HAL_RTC_WaitForSynchro>
 8002be2:	b118      	cbz	r0, 8002bec <HAL_RTC_Init+0x28>
        hrtc->State = HAL_RTC_STATE_ERROR;
 8002be4:	2304      	movs	r3, #4
 8002be6:	7463      	strb	r3, [r4, #17]
    return HAL_ERROR;
 8002be8:	2001      	movs	r0, #1
 8002bea:	e036      	b.n	8002c5a <HAL_RTC_Init+0x96>
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8002bec:	4620      	mov	r0, r4
 8002bee:	f7ff fece 	bl	800298e <RTC_EnterInitMode>
 8002bf2:	2800      	cmp	r0, #0
 8002bf4:	d1f6      	bne.n	8002be4 <HAL_RTC_Init+0x20>
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 8002bf6:	6822      	ldr	r2, [r4, #0]
    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8002bf8:	68a0      	ldr	r0, [r4, #8]
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 8002bfa:	6853      	ldr	r3, [r2, #4]
 8002bfc:	f023 0307 	bic.w	r3, r3, #7
 8002c00:	6053      	str	r3, [r2, #4]
    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8002c02:	4a16      	ldr	r2, [pc, #88]	; (8002c5c <HAL_RTC_Init+0x98>)
 8002c04:	b118      	cbz	r0, 8002c0e <HAL_RTC_Init+0x4a>
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 8002c06:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8002c08:	f021 0101 	bic.w	r1, r1, #1
 8002c0c:	6311      	str	r1, [r2, #48]	; 0x30
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 8002c0e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8002c10:	f423 7360 	bic.w	r3, r3, #896	; 0x380
 8002c14:	4303      	orrs	r3, r0
 8002c16:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 8002c18:	6860      	ldr	r0, [r4, #4]
 8002c1a:	1c43      	adds	r3, r0, #1
 8002c1c:	d105      	bne.n	8002c2a <HAL_RTC_Init+0x66>
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 8002c1e:	2001      	movs	r0, #1
 8002c20:	f7ff fdf0 	bl	8002804 <HAL_RCCEx_GetPeriphCLKFreq>
      if (prescaler == 0U)
 8002c24:	2800      	cmp	r0, #0
 8002c26:	d0dd      	beq.n	8002be4 <HAL_RTC_Init+0x20>
        prescaler = prescaler - 1U;
 8002c28:	3801      	subs	r0, #1
    MODIFY_REG(hrtc->Instance->PRLH, RTC_PRLH_PRL, (prescaler >> 16U));
 8002c2a:	6822      	ldr	r2, [r4, #0]
 8002c2c:	6893      	ldr	r3, [r2, #8]
 8002c2e:	f023 030f 	bic.w	r3, r3, #15
 8002c32:	ea43 4310 	orr.w	r3, r3, r0, lsr #16
 8002c36:	6093      	str	r3, [r2, #8]
    MODIFY_REG(hrtc->Instance->PRLL, RTC_PRLL_PRL, (prescaler & RTC_PRLL_PRL));
 8002c38:	68d3      	ldr	r3, [r2, #12]
 8002c3a:	b280      	uxth	r0, r0
 8002c3c:	0c1b      	lsrs	r3, r3, #16
 8002c3e:	041b      	lsls	r3, r3, #16
 8002c40:	4318      	orrs	r0, r3
 8002c42:	60d0      	str	r0, [r2, #12]
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8002c44:	4620      	mov	r0, r4
 8002c46:	f7ff feb9 	bl	80029bc <RTC_ExitInitMode>
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	b110      	cbz	r0, 8002c54 <HAL_RTC_Init+0x90>
      hrtc->State = HAL_RTC_STATE_ERROR;
 8002c4e:	2204      	movs	r2, #4
 8002c50:	7462      	strb	r2, [r4, #17]
      return HAL_ERROR;
 8002c52:	e7c9      	b.n	8002be8 <HAL_RTC_Init+0x24>
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 8002c54:	7363      	strb	r3, [r4, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 8002c56:	81e3      	strh	r3, [r4, #14]
    hrtc->State = HAL_RTC_STATE_READY;
 8002c58:	7463      	strb	r3, [r4, #17]
}
 8002c5a:	bd10      	pop	{r4, pc}
 8002c5c:	40006c00 	.word	0x40006c00

08002c60 <SPI_WaitFlagStateUntilTimeout.constprop.0>:
  * @param  State flag state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 8002c60:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8002c64:	461c      	mov	r4, r3
 8002c66:	4616      	mov	r6, r2
 8002c68:	460f      	mov	r7, r1
 8002c6a:	4605      	mov	r5, r0
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002c6c:	f7fe fdd2 	bl	8001814 <HAL_GetTick>
 8002c70:	4434      	add	r4, r6
 8002c72:	1a24      	subs	r4, r4, r0
  tmp_tickstart = HAL_GetTick();
 8002c74:	f7fe fdce 	bl	8001814 <HAL_GetTick>
 8002c78:	4680      	mov	r8, r0

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002c7a:	4b23      	ldr	r3, [pc, #140]	; (8002d08 <SPI_WaitFlagStateUntilTimeout.constprop.0+0xa8>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f3c3 33cb 	ubfx	r3, r3, #15, #12
 8002c82:	4363      	muls	r3, r4

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002c84:	682a      	ldr	r2, [r5, #0]
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
      {
        tmp_timeout = 0U;
      }
      count--;
 8002c86:	9301      	str	r3, [sp, #4]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002c88:	6893      	ldr	r3, [r2, #8]
 8002c8a:	ea37 0303 	bics.w	r3, r7, r3
 8002c8e:	d001      	beq.n	8002c94 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x34>
    }
  }

  return HAL_OK;
 8002c90:	2000      	movs	r0, #0
 8002c92:	e02e      	b.n	8002cf2 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x92>
    if (Timeout != HAL_MAX_DELAY)
 8002c94:	1c73      	adds	r3, r6, #1
 8002c96:	d0f7      	beq.n	8002c88 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x28>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002c98:	f7fe fdbc 	bl	8001814 <HAL_GetTick>
 8002c9c:	eba0 0008 	sub.w	r0, r0, r8
 8002ca0:	42a0      	cmp	r0, r4
 8002ca2:	d329      	bcc.n	8002cf8 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x98>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002ca4:	682b      	ldr	r3, [r5, #0]
 8002ca6:	685a      	ldr	r2, [r3, #4]
 8002ca8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002cac:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002cae:	686a      	ldr	r2, [r5, #4]
 8002cb0:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8002cb4:	d10a      	bne.n	8002ccc <SPI_WaitFlagStateUntilTimeout.constprop.0+0x6c>
 8002cb6:	68aa      	ldr	r2, [r5, #8]
 8002cb8:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8002cbc:	d002      	beq.n	8002cc4 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x64>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002cbe:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8002cc2:	d103      	bne.n	8002ccc <SPI_WaitFlagStateUntilTimeout.constprop.0+0x6c>
          __HAL_SPI_DISABLE(hspi);
 8002cc4:	681a      	ldr	r2, [r3, #0]
 8002cc6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002cca:	601a      	str	r2, [r3, #0]
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002ccc:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8002cce:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8002cd2:	d107      	bne.n	8002ce4 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x84>
          SPI_RESET_CRC(hspi);
 8002cd4:	681a      	ldr	r2, [r3, #0]
 8002cd6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002cda:	601a      	str	r2, [r3, #0]
 8002cdc:	681a      	ldr	r2, [r3, #0]
 8002cde:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002ce2:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8002ce4:	2301      	movs	r3, #1
 8002ce6:	f885 3051 	strb.w	r3, [r5, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 8002cea:	2300      	movs	r3, #0
        return HAL_TIMEOUT;
 8002cec:	2003      	movs	r0, #3
        __HAL_UNLOCK(hspi);
 8002cee:	f885 3050 	strb.w	r3, [r5, #80]	; 0x50
}
 8002cf2:	b002      	add	sp, #8
 8002cf4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if(count == 0U)
 8002cf8:	9b01      	ldr	r3, [sp, #4]
        tmp_timeout = 0U;
 8002cfa:	2b00      	cmp	r3, #0
      count--;
 8002cfc:	9b01      	ldr	r3, [sp, #4]
        tmp_timeout = 0U;
 8002cfe:	bf08      	it	eq
 8002d00:	2400      	moveq	r4, #0
      count--;
 8002d02:	3b01      	subs	r3, #1
 8002d04:	e7be      	b.n	8002c84 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x24>
 8002d06:	bf00      	nop
 8002d08:	20000008 	.word	0x20000008

08002d0c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002d0c:	b510      	push	{r4, lr}
 8002d0e:	4613      	mov	r3, r2
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002d10:	460a      	mov	r2, r1
 8002d12:	2180      	movs	r1, #128	; 0x80
{
 8002d14:	4604      	mov	r4, r0
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002d16:	f7ff ffa3 	bl	8002c60 <SPI_WaitFlagStateUntilTimeout.constprop.0>
 8002d1a:	b120      	cbz	r0, 8002d26 <SPI_EndRxTxTransaction+0x1a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
 8002d1c:	2003      	movs	r0, #3
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002d1e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002d20:	f043 0320 	orr.w	r3, r3, #32
 8002d24:	6563      	str	r3, [r4, #84]	; 0x54
  }
  return HAL_OK;
}
 8002d26:	bd10      	pop	{r4, pc}

08002d28 <HAL_SPI_Init>:
{
 8002d28:	b510      	push	{r4, lr}
  if (hspi == NULL)
 8002d2a:	4604      	mov	r4, r0
 8002d2c:	2800      	cmp	r0, #0
 8002d2e:	d051      	beq.n	8002dd4 <HAL_SPI_Init+0xac>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002d30:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d14a      	bne.n	8002dcc <HAL_SPI_Init+0xa4>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002d36:	6842      	ldr	r2, [r0, #4]
 8002d38:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8002d3c:	d000      	beq.n	8002d40 <HAL_SPI_Init+0x18>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002d3e:	61c3      	str	r3, [r0, #28]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002d40:	2300      	movs	r3, #0
 8002d42:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8002d44:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 8002d48:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002d4c:	b923      	cbnz	r3, 8002d58 <HAL_SPI_Init+0x30>
    HAL_SPI_MspInit(hspi);
 8002d4e:	4620      	mov	r0, r4
    hspi->Lock = HAL_UNLOCKED;
 8002d50:	f884 2050 	strb.w	r2, [r4, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 8002d54:	f7fe fb76 	bl	8001444 <HAL_SPI_MspInit>
  hspi->State = HAL_SPI_STATE_BUSY;
 8002d58:	2302      	movs	r3, #2
  __HAL_SPI_DISABLE(hspi);
 8002d5a:	6822      	ldr	r2, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 8002d5c:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 8002d60:	6813      	ldr	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002d62:	68a0      	ldr	r0, [r4, #8]
  __HAL_SPI_DISABLE(hspi);
 8002d64:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002d68:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002d6a:	6863      	ldr	r3, [r4, #4]
 8002d6c:	f400 4004 	and.w	r0, r0, #33792	; 0x8400
 8002d70:	f403 7382 	and.w	r3, r3, #260	; 0x104
 8002d74:	4303      	orrs	r3, r0
 8002d76:	68e0      	ldr	r0, [r4, #12]
 8002d78:	69a1      	ldr	r1, [r4, #24]
 8002d7a:	f400 6000 	and.w	r0, r0, #2048	; 0x800
 8002d7e:	4303      	orrs	r3, r0
 8002d80:	6920      	ldr	r0, [r4, #16]
 8002d82:	f000 0002 	and.w	r0, r0, #2
 8002d86:	4303      	orrs	r3, r0
 8002d88:	6960      	ldr	r0, [r4, #20]
 8002d8a:	f000 0001 	and.w	r0, r0, #1
 8002d8e:	4303      	orrs	r3, r0
 8002d90:	f401 7000 	and.w	r0, r1, #512	; 0x200
 8002d94:	4303      	orrs	r3, r0
 8002d96:	69e0      	ldr	r0, [r4, #28]
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002d98:	0c09      	lsrs	r1, r1, #16
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002d9a:	f000 0038 	and.w	r0, r0, #56	; 0x38
 8002d9e:	4303      	orrs	r3, r0
 8002da0:	6a20      	ldr	r0, [r4, #32]
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002da2:	f001 0104 	and.w	r1, r1, #4
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002da6:	f000 0080 	and.w	r0, r0, #128	; 0x80
 8002daa:	4303      	orrs	r3, r0
 8002dac:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8002dae:	f400 5000 	and.w	r0, r0, #8192	; 0x2000
 8002db2:	4303      	orrs	r3, r0
 8002db4:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002db6:	6051      	str	r1, [r2, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002db8:	69d3      	ldr	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002dba:	2000      	movs	r0, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002dbc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002dc0:	61d3      	str	r3, [r2, #28]
  hspi->State     = HAL_SPI_STATE_READY;
 8002dc2:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002dc4:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002dc6:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
}
 8002dca:	bd10      	pop	{r4, pc}
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002dcc:	2300      	movs	r3, #0
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002dce:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002dd2:	e7b5      	b.n	8002d40 <HAL_SPI_Init+0x18>
    return HAL_ERROR;
 8002dd4:	2001      	movs	r0, #1
 8002dd6:	e7f8      	b.n	8002dca <HAL_SPI_Init+0xa2>

08002dd8 <HAL_SPI_Transmit>:
{
 8002dd8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8002ddc:	461e      	mov	r6, r3
  __HAL_LOCK(hspi);
 8002dde:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
{
 8002de2:	4604      	mov	r4, r0
  __HAL_LOCK(hspi);
 8002de4:	2b01      	cmp	r3, #1
{
 8002de6:	460d      	mov	r5, r1
 8002de8:	4617      	mov	r7, r2
  __HAL_LOCK(hspi);
 8002dea:	f000 80a0 	beq.w	8002f2e <HAL_SPI_Transmit+0x156>
 8002dee:	2301      	movs	r3, #1
 8002df0:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 8002df4:	f7fe fd0e 	bl	8001814 <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 8002df8:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
  tickstart = HAL_GetTick();
 8002dfc:	4680      	mov	r8, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8002dfe:	2b01      	cmp	r3, #1
 8002e00:	b2d8      	uxtb	r0, r3
 8002e02:	f040 8092 	bne.w	8002f2a <HAL_SPI_Transmit+0x152>
  if ((pData == NULL) || (Size == 0U))
 8002e06:	2d00      	cmp	r5, #0
 8002e08:	d05d      	beq.n	8002ec6 <HAL_SPI_Transmit+0xee>
 8002e0a:	2f00      	cmp	r7, #0
 8002e0c:	d05b      	beq.n	8002ec6 <HAL_SPI_Transmit+0xee>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002e0e:	2303      	movs	r3, #3
 8002e10:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002e14:	2300      	movs	r3, #0
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002e16:	68a2      	ldr	r2, [r4, #8]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002e18:	6563      	str	r3, [r4, #84]	; 0x54
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002e1a:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
  hspi->RxISR       = NULL;
 8002e1e:	e9c4 3310 	strd	r3, r3, [r4, #64]	; 0x40
  hspi->TxXferCount = Size;
 8002e22:	86e7      	strh	r7, [r4, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002e24:	63a3      	str	r3, [r4, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002e26:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002e28:	87e3      	strh	r3, [r4, #62]	; 0x3e
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002e2a:	6325      	str	r5, [r4, #48]	; 0x30
    __HAL_SPI_DISABLE(hspi);
 8002e2c:	6823      	ldr	r3, [r4, #0]
  hspi->TxXferSize  = Size;
 8002e2e:	86a7      	strh	r7, [r4, #52]	; 0x34
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002e30:	d107      	bne.n	8002e42 <HAL_SPI_Transmit+0x6a>
    __HAL_SPI_DISABLE(hspi);
 8002e32:	681a      	ldr	r2, [r3, #0]
 8002e34:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002e38:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002e3a:	681a      	ldr	r2, [r3, #0]
 8002e3c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002e40:	601a      	str	r2, [r3, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002e42:	681a      	ldr	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002e44:	68e1      	ldr	r1, [r4, #12]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002e46:	0652      	lsls	r2, r2, #25
    __HAL_SPI_ENABLE(hspi);
 8002e48:	bf5e      	ittt	pl
 8002e4a:	681a      	ldrpl	r2, [r3, #0]
 8002e4c:	f042 0240 	orrpl.w	r2, r2, #64	; 0x40
 8002e50:	601a      	strpl	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002e52:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002e56:	6862      	ldr	r2, [r4, #4]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002e58:	d141      	bne.n	8002ede <HAL_SPI_Transmit+0x106>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002e5a:	b10a      	cbz	r2, 8002e60 <HAL_SPI_Transmit+0x88>
 8002e5c:	2f01      	cmp	r7, #1
 8002e5e:	d107      	bne.n	8002e70 <HAL_SPI_Transmit+0x98>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002e60:	f835 2b02 	ldrh.w	r2, [r5], #2
 8002e64:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002e66:	6325      	str	r5, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8002e68:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8002e6a:	3b01      	subs	r3, #1
 8002e6c:	b29b      	uxth	r3, r3
 8002e6e:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 8002e70:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8002e72:	b29b      	uxth	r3, r3
 8002e74:	b9a3      	cbnz	r3, 8002ea0 <HAL_SPI_Transmit+0xc8>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002e76:	4642      	mov	r2, r8
 8002e78:	4631      	mov	r1, r6
 8002e7a:	4620      	mov	r0, r4
 8002e7c:	f7ff ff46 	bl	8002d0c <SPI_EndRxTxTransaction>
 8002e80:	2800      	cmp	r0, #0
 8002e82:	d14f      	bne.n	8002f24 <HAL_SPI_Transmit+0x14c>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002e84:	68a3      	ldr	r3, [r4, #8]
 8002e86:	b933      	cbnz	r3, 8002e96 <HAL_SPI_Transmit+0xbe>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002e88:	9301      	str	r3, [sp, #4]
 8002e8a:	6823      	ldr	r3, [r4, #0]
 8002e8c:	68da      	ldr	r2, [r3, #12]
 8002e8e:	9201      	str	r2, [sp, #4]
 8002e90:	689b      	ldr	r3, [r3, #8]
 8002e92:	9301      	str	r3, [sp, #4]
 8002e94:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002e96:	6d60      	ldr	r0, [r4, #84]	; 0x54
    errorcode = HAL_BUSY;
 8002e98:	3800      	subs	r0, #0
 8002e9a:	bf18      	it	ne
 8002e9c:	2001      	movne	r0, #1
error:
 8002e9e:	e012      	b.n	8002ec6 <HAL_SPI_Transmit+0xee>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002ea0:	6822      	ldr	r2, [r4, #0]
 8002ea2:	6893      	ldr	r3, [r2, #8]
 8002ea4:	0798      	lsls	r0, r3, #30
 8002ea6:	d505      	bpl.n	8002eb4 <HAL_SPI_Transmit+0xdc>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002ea8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002eaa:	f833 1b02 	ldrh.w	r1, [r3], #2
 8002eae:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002eb0:	6323      	str	r3, [r4, #48]	; 0x30
 8002eb2:	e7d9      	b.n	8002e68 <HAL_SPI_Transmit+0x90>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002eb4:	f7fe fcae 	bl	8001814 <HAL_GetTick>
 8002eb8:	eba0 0008 	sub.w	r0, r0, r8
 8002ebc:	42b0      	cmp	r0, r6
 8002ebe:	d30b      	bcc.n	8002ed8 <HAL_SPI_Transmit+0x100>
 8002ec0:	1c71      	adds	r1, r6, #1
 8002ec2:	d0d5      	beq.n	8002e70 <HAL_SPI_Transmit+0x98>
          errorcode = HAL_TIMEOUT;
 8002ec4:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 8002ec6:	2301      	movs	r3, #1
 8002ec8:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002ecc:	2300      	movs	r3, #0
 8002ece:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8002ed2:	b002      	add	sp, #8
 8002ed4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002ed8:	2e00      	cmp	r6, #0
 8002eda:	d1c9      	bne.n	8002e70 <HAL_SPI_Transmit+0x98>
 8002edc:	e7f2      	b.n	8002ec4 <HAL_SPI_Transmit+0xec>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002ede:	b10a      	cbz	r2, 8002ee4 <HAL_SPI_Transmit+0x10c>
 8002ee0:	2f01      	cmp	r7, #1
 8002ee2:	d108      	bne.n	8002ef6 <HAL_SPI_Transmit+0x11e>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002ee4:	782a      	ldrb	r2, [r5, #0]
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002ee6:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002ee8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002eea:	3301      	adds	r3, #1
 8002eec:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8002eee:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8002ef0:	3b01      	subs	r3, #1
 8002ef2:	b29b      	uxth	r3, r3
 8002ef4:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 8002ef6:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8002ef8:	b29b      	uxth	r3, r3
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d0bb      	beq.n	8002e76 <HAL_SPI_Transmit+0x9e>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002efe:	6823      	ldr	r3, [r4, #0]
 8002f00:	689a      	ldr	r2, [r3, #8]
 8002f02:	0792      	lsls	r2, r2, #30
 8002f04:	d502      	bpl.n	8002f0c <HAL_SPI_Transmit+0x134>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002f06:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8002f08:	7812      	ldrb	r2, [r2, #0]
 8002f0a:	e7ec      	b.n	8002ee6 <HAL_SPI_Transmit+0x10e>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002f0c:	f7fe fc82 	bl	8001814 <HAL_GetTick>
 8002f10:	eba0 0008 	sub.w	r0, r0, r8
 8002f14:	42b0      	cmp	r0, r6
 8002f16:	d302      	bcc.n	8002f1e <HAL_SPI_Transmit+0x146>
 8002f18:	1c73      	adds	r3, r6, #1
 8002f1a:	d0ec      	beq.n	8002ef6 <HAL_SPI_Transmit+0x11e>
 8002f1c:	e7d2      	b.n	8002ec4 <HAL_SPI_Transmit+0xec>
 8002f1e:	2e00      	cmp	r6, #0
 8002f20:	d1e9      	bne.n	8002ef6 <HAL_SPI_Transmit+0x11e>
 8002f22:	e7cf      	b.n	8002ec4 <HAL_SPI_Transmit+0xec>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002f24:	2320      	movs	r3, #32
 8002f26:	6563      	str	r3, [r4, #84]	; 0x54
 8002f28:	e7ac      	b.n	8002e84 <HAL_SPI_Transmit+0xac>
    errorcode = HAL_BUSY;
 8002f2a:	2002      	movs	r0, #2
 8002f2c:	e7cb      	b.n	8002ec6 <HAL_SPI_Transmit+0xee>
  __HAL_LOCK(hspi);
 8002f2e:	2002      	movs	r0, #2
 8002f30:	e7cf      	b.n	8002ed2 <HAL_SPI_Transmit+0xfa>
	...

08002f34 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002f34:	6a03      	ldr	r3, [r0, #32]
{
 8002f36:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002f38:	f023 0301 	bic.w	r3, r3, #1
 8002f3c:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f3e:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002f40:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002f42:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002f44:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002f46:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8002f4a:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002f4c:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 8002f4e:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 8002f52:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002f54:	4d0a      	ldr	r5, [pc, #40]	; (8002f80 <TIM_OC1_SetConfig+0x4c>)
 8002f56:	42a8      	cmp	r0, r5
 8002f58:	d10b      	bne.n	8002f72 <TIM_OC1_SetConfig+0x3e>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002f5a:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 8002f5c:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8002f60:	432b      	orrs	r3, r5
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002f62:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002f66:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
 8002f6a:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 8002f6c:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 8002f70:	432c      	orrs	r4, r5
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002f72:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002f74:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002f76:	684a      	ldr	r2, [r1, #4]
 8002f78:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002f7a:	6203      	str	r3, [r0, #32]
}
 8002f7c:	bd70      	pop	{r4, r5, r6, pc}
 8002f7e:	bf00      	nop
 8002f80:	40012c00 	.word	0x40012c00

08002f84 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002f84:	6a03      	ldr	r3, [r0, #32]
{
 8002f86:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002f88:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002f8c:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f8e:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002f90:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002f92:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002f94:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002f96:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8002f9a:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002f9c:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 8002f9e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002fa2:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002fa6:	4d0b      	ldr	r5, [pc, #44]	; (8002fd4 <TIM_OC3_SetConfig+0x50>)
 8002fa8:	42a8      	cmp	r0, r5
 8002faa:	d10d      	bne.n	8002fc8 <TIM_OC3_SetConfig+0x44>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002fac:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 8002fae:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002fb2:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002fb6:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002fba:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
 8002fbe:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC3NE;
 8002fc0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002fc4:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002fc8:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002fca:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002fcc:	684a      	ldr	r2, [r1, #4]
 8002fce:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002fd0:	6203      	str	r3, [r0, #32]
}
 8002fd2:	bd70      	pop	{r4, r5, r6, pc}
 8002fd4:	40012c00 	.word	0x40012c00

08002fd8 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002fd8:	6a03      	ldr	r3, [r0, #32]
{
 8002fda:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002fdc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002fe0:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002fe2:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002fe4:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002fe6:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002fe8:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002fea:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002fee:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002ff2:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 8002ff4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002ff8:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002ffc:	4d06      	ldr	r5, [pc, #24]	; (8003018 <TIM_OC4_SetConfig+0x40>)
 8002ffe:	42a8      	cmp	r0, r5

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003000:	bf02      	ittt	eq
 8003002:	694d      	ldreq	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003004:	f424 4480 	biceq.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003008:	ea44 1485 	orreq.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800300c:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800300e:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003010:	684a      	ldr	r2, [r1, #4]
 8003012:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003014:	6203      	str	r3, [r0, #32]
}
 8003016:	bd30      	pop	{r4, r5, pc}
 8003018:	40012c00 	.word	0x40012c00

0800301c <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800301c:	4a1a      	ldr	r2, [pc, #104]	; (8003088 <TIM_Base_SetConfig+0x6c>)
  tmpcr1 = TIMx->CR1;
 800301e:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003020:	4290      	cmp	r0, r2
 8003022:	d00a      	beq.n	800303a <TIM_Base_SetConfig+0x1e>
 8003024:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8003028:	d007      	beq.n	800303a <TIM_Base_SetConfig+0x1e>
 800302a:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800302e:	4290      	cmp	r0, r2
 8003030:	d003      	beq.n	800303a <TIM_Base_SetConfig+0x1e>
 8003032:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003036:	4290      	cmp	r0, r2
 8003038:	d115      	bne.n	8003066 <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= Structure->CounterMode;
 800303a:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800303c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8003040:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003042:	4a11      	ldr	r2, [pc, #68]	; (8003088 <TIM_Base_SetConfig+0x6c>)
 8003044:	4290      	cmp	r0, r2
 8003046:	d00a      	beq.n	800305e <TIM_Base_SetConfig+0x42>
 8003048:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800304c:	d007      	beq.n	800305e <TIM_Base_SetConfig+0x42>
 800304e:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8003052:	4290      	cmp	r0, r2
 8003054:	d003      	beq.n	800305e <TIM_Base_SetConfig+0x42>
 8003056:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800305a:	4290      	cmp	r0, r2
 800305c:	d103      	bne.n	8003066 <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800305e:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8003060:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003064:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003066:	694a      	ldr	r2, [r1, #20]
 8003068:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800306c:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 800306e:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003070:	688b      	ldr	r3, [r1, #8]
 8003072:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003074:	680b      	ldr	r3, [r1, #0]
 8003076:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003078:	4b03      	ldr	r3, [pc, #12]	; (8003088 <TIM_Base_SetConfig+0x6c>)
 800307a:	4298      	cmp	r0, r3
    TIMx->RCR = Structure->RepetitionCounter;
 800307c:	bf04      	itt	eq
 800307e:	690b      	ldreq	r3, [r1, #16]
 8003080:	6303      	streq	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8003082:	2301      	movs	r3, #1
 8003084:	6143      	str	r3, [r0, #20]
}
 8003086:	4770      	bx	lr
 8003088:	40012c00 	.word	0x40012c00

0800308c <HAL_TIM_PWM_Init>:
{
 800308c:	b510      	push	{r4, lr}
  if (htim == NULL)
 800308e:	4604      	mov	r4, r0
 8003090:	b330      	cbz	r0, 80030e0 <HAL_TIM_PWM_Init+0x54>
  if (htim->State == HAL_TIM_STATE_RESET)
 8003092:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003096:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800309a:	b91b      	cbnz	r3, 80030a4 <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 800309c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 80030a0:	f7fe fa30 	bl	8001504 <HAL_TIM_PWM_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 80030a4:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80030a6:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 80030a8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80030ac:	1d21      	adds	r1, r4, #4
 80030ae:	f7ff ffb5 	bl	800301c <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80030b2:	2301      	movs	r3, #1
  return HAL_OK;
 80030b4:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80030b6:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030ba:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 80030be:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 80030c2:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80030c6:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030ca:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80030ce:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80030d2:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80030d6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 80030da:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 80030de:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80030e0:	2001      	movs	r0, #1
 80030e2:	e7fc      	b.n	80030de <HAL_TIM_PWM_Init+0x52>

080030e4 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80030e4:	6a03      	ldr	r3, [r0, #32]
{
 80030e6:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80030e8:	f023 0310 	bic.w	r3, r3, #16
 80030ec:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 80030ee:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 80030f0:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 80030f2:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80030f4:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80030f6:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80030fa:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80030fe:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 8003100:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003104:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003108:	4d0b      	ldr	r5, [pc, #44]	; (8003138 <TIM_OC2_SetConfig+0x54>)
 800310a:	42a8      	cmp	r0, r5
 800310c:	d10d      	bne.n	800312a <TIM_OC2_SetConfig+0x46>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800310e:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8003110:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003114:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003118:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800311c:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
 8003120:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC2NE;
 8003122:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003126:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
  TIMx->CR2 = tmpcr2;
 800312a:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 800312c:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 800312e:	684a      	ldr	r2, [r1, #4]
 8003130:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8003132:	6203      	str	r3, [r0, #32]
}
 8003134:	bd70      	pop	{r4, r5, r6, pc}
 8003136:	bf00      	nop
 8003138:	40012c00 	.word	0x40012c00

0800313c <HAL_TIM_PWM_ConfigChannel>:
{
 800313c:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 800313e:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8003142:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8003144:	2b01      	cmp	r3, #1
 8003146:	d052      	beq.n	80031ee <HAL_TIM_PWM_ConfigChannel+0xb2>
 8003148:	2301      	movs	r3, #1
  switch (Channel)
 800314a:	2a08      	cmp	r2, #8
  __HAL_LOCK(htim);
 800314c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  switch (Channel)
 8003150:	d03c      	beq.n	80031cc <HAL_TIM_PWM_ConfigChannel+0x90>
 8003152:	d806      	bhi.n	8003162 <HAL_TIM_PWM_ConfigChannel+0x26>
 8003154:	b1c2      	cbz	r2, 8003188 <HAL_TIM_PWM_ConfigChannel+0x4c>
 8003156:	2a04      	cmp	r2, #4
 8003158:	d027      	beq.n	80031aa <HAL_TIM_PWM_ConfigChannel+0x6e>
  __HAL_UNLOCK(htim);
 800315a:	2000      	movs	r0, #0
 800315c:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8003160:	bd38      	pop	{r3, r4, r5, pc}
  switch (Channel)
 8003162:	2a0c      	cmp	r2, #12
 8003164:	d1f9      	bne.n	800315a <HAL_TIM_PWM_ConfigChannel+0x1e>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003166:	6800      	ldr	r0, [r0, #0]
 8003168:	f7ff ff36 	bl	8002fd8 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800316c:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800316e:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003170:	69da      	ldr	r2, [r3, #28]
 8003172:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003176:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003178:	69da      	ldr	r2, [r3, #28]
 800317a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800317e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003180:	69da      	ldr	r2, [r3, #28]
 8003182:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8003186:	e030      	b.n	80031ea <HAL_TIM_PWM_ConfigChannel+0xae>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003188:	6800      	ldr	r0, [r0, #0]
 800318a:	f7ff fed3 	bl	8002f34 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800318e:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003190:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003192:	699a      	ldr	r2, [r3, #24]
 8003194:	f042 0208 	orr.w	r2, r2, #8
 8003198:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800319a:	699a      	ldr	r2, [r3, #24]
 800319c:	f022 0204 	bic.w	r2, r2, #4
 80031a0:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80031a2:	699a      	ldr	r2, [r3, #24]
 80031a4:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80031a6:	619a      	str	r2, [r3, #24]
      break;
 80031a8:	e7d7      	b.n	800315a <HAL_TIM_PWM_ConfigChannel+0x1e>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80031aa:	6800      	ldr	r0, [r0, #0]
 80031ac:	f7ff ff9a 	bl	80030e4 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80031b0:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80031b2:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80031b4:	699a      	ldr	r2, [r3, #24]
 80031b6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80031ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80031bc:	699a      	ldr	r2, [r3, #24]
 80031be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80031c2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80031c4:	699a      	ldr	r2, [r3, #24]
 80031c6:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80031ca:	e7ec      	b.n	80031a6 <HAL_TIM_PWM_ConfigChannel+0x6a>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80031cc:	6800      	ldr	r0, [r0, #0]
 80031ce:	f7ff fed9 	bl	8002f84 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80031d2:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80031d4:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80031d6:	69da      	ldr	r2, [r3, #28]
 80031d8:	f042 0208 	orr.w	r2, r2, #8
 80031dc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80031de:	69da      	ldr	r2, [r3, #28]
 80031e0:	f022 0204 	bic.w	r2, r2, #4
 80031e4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80031e6:	69da      	ldr	r2, [r3, #28]
 80031e8:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80031ea:	61da      	str	r2, [r3, #28]
      break;
 80031ec:	e7b5      	b.n	800315a <HAL_TIM_PWM_ConfigChannel+0x1e>
  __HAL_LOCK(htim);
 80031ee:	2002      	movs	r0, #2
 80031f0:	e7b6      	b.n	8003160 <HAL_TIM_PWM_ConfigChannel+0x24>

080031f2 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80031f2:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80031f4:	2401      	movs	r4, #1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80031f6:	6a03      	ldr	r3, [r0, #32]
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80031f8:	f001 011f 	and.w	r1, r1, #31
 80031fc:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 80031fe:	ea23 0304 	bic.w	r3, r3, r4
 8003202:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003204:	6a03      	ldr	r3, [r0, #32]
 8003206:	408a      	lsls	r2, r1
 8003208:	431a      	orrs	r2, r3
 800320a:	6202      	str	r2, [r0, #32]
}
 800320c:	bd10      	pop	{r4, pc}
	...

08003210 <HAL_TIM_OC_Start>:
{
 8003210:	b510      	push	{r4, lr}
 8003212:	4604      	mov	r4, r0
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003214:	b929      	cbnz	r1, 8003222 <HAL_TIM_OC_Start+0x12>
 8003216:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 800321a:	2b01      	cmp	r3, #1
 800321c:	d021      	beq.n	8003262 <HAL_TIM_OC_Start+0x52>
    return HAL_ERROR;
 800321e:	2001      	movs	r0, #1
}
 8003220:	bd10      	pop	{r4, pc}
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003222:	2904      	cmp	r1, #4
 8003224:	d107      	bne.n	8003236 <HAL_TIM_OC_Start+0x26>
 8003226:	f890 303f 	ldrb.w	r3, [r0, #63]	; 0x3f
 800322a:	2b01      	cmp	r3, #1
 800322c:	d1f7      	bne.n	800321e <HAL_TIM_OC_Start+0xe>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800322e:	2302      	movs	r3, #2
 8003230:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8003234:	e018      	b.n	8003268 <HAL_TIM_OC_Start+0x58>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003236:	2908      	cmp	r1, #8
 8003238:	d107      	bne.n	800324a <HAL_TIM_OC_Start+0x3a>
 800323a:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800323e:	2b01      	cmp	r3, #1
 8003240:	d1ed      	bne.n	800321e <HAL_TIM_OC_Start+0xe>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003242:	2302      	movs	r3, #2
 8003244:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8003248:	e00e      	b.n	8003268 <HAL_TIM_OC_Start+0x58>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800324a:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800324e:	2b01      	cmp	r3, #1
 8003250:	d1e5      	bne.n	800321e <HAL_TIM_OC_Start+0xe>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003252:	2904      	cmp	r1, #4
 8003254:	d0eb      	beq.n	800322e <HAL_TIM_OC_Start+0x1e>
 8003256:	2908      	cmp	r1, #8
 8003258:	d0f3      	beq.n	8003242 <HAL_TIM_OC_Start+0x32>
 800325a:	2302      	movs	r3, #2
 800325c:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
 8003260:	e002      	b.n	8003268 <HAL_TIM_OC_Start+0x58>
 8003262:	2302      	movs	r3, #2
 8003264:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003268:	2201      	movs	r2, #1
 800326a:	6820      	ldr	r0, [r4, #0]
 800326c:	f7ff ffc1 	bl	80031f2 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003270:	6823      	ldr	r3, [r4, #0]
 8003272:	4a0e      	ldr	r2, [pc, #56]	; (80032ac <HAL_TIM_OC_Start+0x9c>)
 8003274:	4293      	cmp	r3, r2
 8003276:	d10a      	bne.n	800328e <HAL_TIM_OC_Start+0x7e>
    __HAL_TIM_MOE_ENABLE(htim);
 8003278:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800327a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800327e:	645a      	str	r2, [r3, #68]	; 0x44
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003280:	689a      	ldr	r2, [r3, #8]
 8003282:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003286:	2a06      	cmp	r2, #6
 8003288:	d10b      	bne.n	80032a2 <HAL_TIM_OC_Start+0x92>
  return HAL_OK;
 800328a:	2000      	movs	r0, #0
 800328c:	e7c8      	b.n	8003220 <HAL_TIM_OC_Start+0x10>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800328e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003292:	d0f5      	beq.n	8003280 <HAL_TIM_OC_Start+0x70>
 8003294:	4a06      	ldr	r2, [pc, #24]	; (80032b0 <HAL_TIM_OC_Start+0xa0>)
 8003296:	4293      	cmp	r3, r2
 8003298:	d0f2      	beq.n	8003280 <HAL_TIM_OC_Start+0x70>
 800329a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800329e:	4293      	cmp	r3, r2
 80032a0:	d0ee      	beq.n	8003280 <HAL_TIM_OC_Start+0x70>
    __HAL_TIM_ENABLE(htim);
 80032a2:	681a      	ldr	r2, [r3, #0]
 80032a4:	f042 0201 	orr.w	r2, r2, #1
 80032a8:	601a      	str	r2, [r3, #0]
 80032aa:	e7ee      	b.n	800328a <HAL_TIM_OC_Start+0x7a>
 80032ac:	40012c00 	.word	0x40012c00
 80032b0:	40000400 	.word	0x40000400

080032b4 <HAL_TIM_PWM_Start>:
 80032b4:	f7ff bfac 	b.w	8003210 <HAL_TIM_OC_Start>

080032b8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80032b8:	b530      	push	{r4, r5, lr}
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80032ba:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 80032be:	4602      	mov	r2, r0
  __HAL_LOCK(htim);
 80032c0:	2b01      	cmp	r3, #1
 80032c2:	f04f 0002 	mov.w	r0, #2
 80032c6:	d022      	beq.n	800330e <HAL_TIMEx_MasterConfigSynchronization+0x56>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80032c8:	6813      	ldr	r3, [r2, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 80032ca:	f882 003d 	strb.w	r0, [r2, #61]	; 0x3d
  tmpcr2 = htim->Instance->CR2;
 80032ce:	685c      	ldr	r4, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80032d0:	680d      	ldr	r5, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 80032d2:	f024 0470 	bic.w	r4, r4, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80032d6:	432c      	orrs	r4, r5
  tmpsmcr = htim->Instance->SMCR;
 80032d8:	6898      	ldr	r0, [r3, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80032da:	605c      	str	r4, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80032dc:	4c0c      	ldr	r4, [pc, #48]	; (8003310 <HAL_TIMEx_MasterConfigSynchronization+0x58>)
 80032de:	42a3      	cmp	r3, r4
 80032e0:	d00a      	beq.n	80032f8 <HAL_TIMEx_MasterConfigSynchronization+0x40>
 80032e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032e6:	d007      	beq.n	80032f8 <HAL_TIMEx_MasterConfigSynchronization+0x40>
 80032e8:	f5a4 3494 	sub.w	r4, r4, #75776	; 0x12800
 80032ec:	42a3      	cmp	r3, r4
 80032ee:	d003      	beq.n	80032f8 <HAL_TIMEx_MasterConfigSynchronization+0x40>
 80032f0:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80032f4:	42a3      	cmp	r3, r4
 80032f6:	d104      	bne.n	8003302 <HAL_TIMEx_MasterConfigSynchronization+0x4a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80032f8:	6849      	ldr	r1, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 80032fa:	f020 0080 	bic.w	r0, r0, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80032fe:	4301      	orrs	r1, r0

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003300:	6099      	str	r1, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003302:	2301      	movs	r3, #1

  __HAL_UNLOCK(htim);
 8003304:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8003306:	f882 303d 	strb.w	r3, [r2, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800330a:	f882 003c 	strb.w	r0, [r2, #60]	; 0x3c

  return HAL_OK;
}
 800330e:	bd30      	pop	{r4, r5, pc}
 8003310:	40012c00 	.word	0x40012c00

08003314 <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003314:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8003318:	2b01      	cmp	r3, #1
 800331a:	d01f      	beq.n	800335c <HAL_TIMEx_ConfigBreakDeadTime+0x48>
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800331c:	68cb      	ldr	r3, [r1, #12]
 800331e:	688a      	ldr	r2, [r1, #8]
 8003320:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003324:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003326:	684a      	ldr	r2, [r1, #4]
 8003328:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800332c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800332e:	680a      	ldr	r2, [r1, #0]
 8003330:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003334:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003336:	690a      	ldr	r2, [r1, #16]
 8003338:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800333c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800333e:	694a      	ldr	r2, [r1, #20]
 8003340:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003344:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003346:	69ca      	ldr	r2, [r1, #28]
 8003348:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800334c:	4313      	orrs	r3, r2


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800334e:	6802      	ldr	r2, [r0, #0]
 8003350:	6453      	str	r3, [r2, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003352:	2300      	movs	r3, #0
 8003354:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 8003358:	4618      	mov	r0, r3
 800335a:	4770      	bx	lr
  __HAL_LOCK(htim);
 800335c:	2002      	movs	r0, #2
}
 800335e:	4770      	bx	lr

08003360 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003360:	6803      	ldr	r3, [r0, #0]
 8003362:	68da      	ldr	r2, [r3, #12]
 8003364:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003368:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800336a:	695a      	ldr	r2, [r3, #20]
 800336c:	f022 0201 	bic.w	r2, r2, #1
 8003370:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003372:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8003374:	2a01      	cmp	r2, #1
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003376:	bf02      	ittt	eq
 8003378:	68da      	ldreq	r2, [r3, #12]
 800337a:	f022 0210 	biceq.w	r2, r2, #16
 800337e:	60da      	streq	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003380:	2320      	movs	r3, #32
 8003382:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003386:	2300      	movs	r3, #0
 8003388:	6303      	str	r3, [r0, #48]	; 0x30
}
 800338a:	4770      	bx	lr

0800338c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800338c:	b510      	push	{r4, lr}
 800338e:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003390:	6803      	ldr	r3, [r0, #0]
 8003392:	68c1      	ldr	r1, [r0, #12]
 8003394:	691a      	ldr	r2, [r3, #16]
 8003396:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800339a:	430a      	orrs	r2, r1
 800339c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800339e:	6882      	ldr	r2, [r0, #8]
 80033a0:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1,
 80033a2:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80033a4:	4302      	orrs	r2, r0
 80033a6:	6960      	ldr	r0, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 80033a8:	f421 51b0 	bic.w	r1, r1, #5632	; 0x1600
 80033ac:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80033b0:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 80033b2:	430a      	orrs	r2, r1
 80033b4:	60da      	str	r2, [r3, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80033b6:	695a      	ldr	r2, [r3, #20]
 80033b8:	69a1      	ldr	r1, [r4, #24]
 80033ba:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80033be:	430a      	orrs	r2, r1
 80033c0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80033c2:	4a0e      	ldr	r2, [pc, #56]	; (80033fc <UART_SetConfig+0x70>)
 80033c4:	4293      	cmp	r3, r2
 80033c6:	d115      	bne.n	80033f4 <UART_SetConfig+0x68>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80033c8:	f7ff f992 	bl	80026f0 <HAL_RCC_GetPCLK2Freq>
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80033cc:	2319      	movs	r3, #25
 80033ce:	4343      	muls	r3, r0
 80033d0:	6862      	ldr	r2, [r4, #4]
 80033d2:	6820      	ldr	r0, [r4, #0]
 80033d4:	0092      	lsls	r2, r2, #2
 80033d6:	fbb3 f3f2 	udiv	r3, r3, r2
 80033da:	2264      	movs	r2, #100	; 0x64
 80033dc:	fbb3 f1f2 	udiv	r1, r3, r2
 80033e0:	fb02 3311 	mls	r3, r2, r1, r3
 80033e4:	011b      	lsls	r3, r3, #4
 80033e6:	3332      	adds	r3, #50	; 0x32
 80033e8:	fbb3 f3f2 	udiv	r3, r3, r2
 80033ec:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 80033f0:	6083      	str	r3, [r0, #8]
#endif /* USART_CR1_OVER8 */
}
 80033f2:	bd10      	pop	{r4, pc}
    pclk = HAL_RCC_GetPCLK1Freq();
 80033f4:	f7ff f96c 	bl	80026d0 <HAL_RCC_GetPCLK1Freq>
 80033f8:	e7e8      	b.n	80033cc <UART_SetConfig+0x40>
 80033fa:	bf00      	nop
 80033fc:	40013800 	.word	0x40013800

08003400 <HAL_UART_Init>:
{
 8003400:	b510      	push	{r4, lr}
  if (huart == NULL)
 8003402:	4604      	mov	r4, r0
 8003404:	b340      	cbz	r0, 8003458 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 8003406:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800340a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800340e:	b91b      	cbnz	r3, 8003418 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8003410:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_UART_MspInit(huart);
 8003414:	f7fe f8b2 	bl	800157c <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8003418:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 800341a:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800341c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UART_DISABLE(huart);
 8003420:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 8003422:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 8003424:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003428:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 800342a:	f7ff ffaf 	bl	800338c <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800342e:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003430:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003432:	691a      	ldr	r2, [r3, #16]
 8003434:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003438:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800343a:	695a      	ldr	r2, [r3, #20]
 800343c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003440:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8003442:	68da      	ldr	r2, [r3, #12]
 8003444:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003448:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 800344a:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800344c:	6420      	str	r0, [r4, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800344e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003452:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
}
 8003456:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8003458:	2001      	movs	r0, #1
 800345a:	e7fc      	b.n	8003456 <HAL_UART_Init+0x56>

0800345c <HAL_UART_ErrorCallback>:
 800345c:	4770      	bx	lr

0800345e <UART_DMAAbortOnError>:
{
 800345e:	b508      	push	{r3, lr}
  huart->RxXferCount = 0x00U;
 8003460:	2300      	movs	r3, #0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003462:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0x00U;
 8003464:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003466:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 8003468:	f7ff fff8 	bl	800345c <HAL_UART_ErrorCallback>
}
 800346c:	bd08      	pop	{r3, pc}

0800346e <HAL_UARTEx_RxEventCallback>:
}
 800346e:	4770      	bx	lr

08003470 <UART_Receive_IT.part.0.isra.0>:
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
 8003470:	b507      	push	{r0, r1, r2, lr}
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003472:	6881      	ldr	r1, [r0, #8]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003474:	6a83      	ldr	r3, [r0, #40]	; 0x28
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003476:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800347a:	6802      	ldr	r2, [r0, #0]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800347c:	d134      	bne.n	80034e8 <UART_Receive_IT.part.0.isra.0+0x78>
 800347e:	6901      	ldr	r1, [r0, #16]
 8003480:	2900      	cmp	r1, #0
 8003482:	d134      	bne.n	80034ee <UART_Receive_IT.part.0.isra.0+0x7e>
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003484:	6852      	ldr	r2, [r2, #4]
 8003486:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800348a:	f823 2b02 	strh.w	r2, [r3], #2
    if (--huart->RxXferCount == 0U)
 800348e:	8dc2      	ldrh	r2, [r0, #46]	; 0x2e
      huart->pRxBuffPtr += 1U;
 8003490:	6283      	str	r3, [r0, #40]	; 0x28
    if (--huart->RxXferCount == 0U)
 8003492:	3a01      	subs	r2, #1
 8003494:	b292      	uxth	r2, r2
 8003496:	85c2      	strh	r2, [r0, #46]	; 0x2e
 8003498:	bb1a      	cbnz	r2, 80034e2 <UART_Receive_IT.part.0.isra.0+0x72>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800349a:	6803      	ldr	r3, [r0, #0]
 800349c:	68d9      	ldr	r1, [r3, #12]
 800349e:	f021 0120 	bic.w	r1, r1, #32
 80034a2:	60d9      	str	r1, [r3, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80034a4:	68d9      	ldr	r1, [r3, #12]
 80034a6:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 80034aa:	60d9      	str	r1, [r3, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80034ac:	6959      	ldr	r1, [r3, #20]
 80034ae:	f021 0101 	bic.w	r1, r1, #1
 80034b2:	6159      	str	r1, [r3, #20]
      huart->RxState = HAL_UART_STATE_READY;
 80034b4:	2120      	movs	r1, #32
 80034b6:	f880 103e 	strb.w	r1, [r0, #62]	; 0x3e
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80034ba:	6b01      	ldr	r1, [r0, #48]	; 0x30
 80034bc:	2901      	cmp	r1, #1
 80034be:	d120      	bne.n	8003502 <UART_Receive_IT.part.0.isra.0+0x92>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034c0:	6302      	str	r2, [r0, #48]	; 0x30
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80034c2:	68d9      	ldr	r1, [r3, #12]
 80034c4:	f021 0110 	bic.w	r1, r1, #16
 80034c8:	60d9      	str	r1, [r3, #12]
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80034ca:	6819      	ldr	r1, [r3, #0]
 80034cc:	06c9      	lsls	r1, r1, #27
 80034ce:	d505      	bpl.n	80034dc <UART_Receive_IT.part.0.isra.0+0x6c>
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80034d0:	9201      	str	r2, [sp, #4]
 80034d2:	681a      	ldr	r2, [r3, #0]
 80034d4:	9201      	str	r2, [sp, #4]
 80034d6:	685b      	ldr	r3, [r3, #4]
 80034d8:	9301      	str	r3, [sp, #4]
 80034da:	9b01      	ldr	r3, [sp, #4]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80034dc:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 80034de:	f7ff ffc6 	bl	800346e <HAL_UARTEx_RxEventCallback>
}
 80034e2:	b003      	add	sp, #12
 80034e4:	f85d fb04 	ldr.w	pc, [sp], #4
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80034e8:	b939      	cbnz	r1, 80034fa <UART_Receive_IT.part.0.isra.0+0x8a>
 80034ea:	6901      	ldr	r1, [r0, #16]
 80034ec:	b929      	cbnz	r1, 80034fa <UART_Receive_IT.part.0.isra.0+0x8a>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80034ee:	6852      	ldr	r2, [r2, #4]
 80034f0:	b2d2      	uxtb	r2, r2
 80034f2:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr += 1U;
 80034f4:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80034f6:	3301      	adds	r3, #1
 80034f8:	e7c9      	b.n	800348e <UART_Receive_IT.part.0.isra.0+0x1e>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80034fa:	6852      	ldr	r2, [r2, #4]
 80034fc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003500:	e7f7      	b.n	80034f2 <UART_Receive_IT.part.0.isra.0+0x82>
       HAL_UART_RxCpltCallback(huart);
 8003502:	f7fd fee7 	bl	80012d4 <HAL_UART_RxCpltCallback>
 8003506:	e7ec      	b.n	80034e2 <UART_Receive_IT.part.0.isra.0+0x72>

08003508 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003508:	6803      	ldr	r3, [r0, #0]
{
 800350a:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800350c:	681a      	ldr	r2, [r3, #0]
{
 800350e:	4604      	mov	r4, r0
  if (errorflags == RESET)
 8003510:	f012 0f0f 	tst.w	r2, #15
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003514:	68d9      	ldr	r1, [r3, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003516:	695d      	ldr	r5, [r3, #20]
  if (errorflags == RESET)
 8003518:	d10c      	bne.n	8003534 <HAL_UART_IRQHandler+0x2c>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800351a:	0695      	lsls	r5, r2, #26
 800351c:	d567      	bpl.n	80035ee <HAL_UART_IRQHandler+0xe6>
 800351e:	068d      	lsls	r5, r1, #26
 8003520:	d565      	bpl.n	80035ee <HAL_UART_IRQHandler+0xe6>
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003522:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8003526:	2b22      	cmp	r3, #34	; 0x22
 8003528:	d15b      	bne.n	80035e2 <HAL_UART_IRQHandler+0xda>
}
 800352a:	b003      	add	sp, #12
 800352c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003530:	f7ff bf9e 	b.w	8003470 <UART_Receive_IT.part.0.isra.0>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003534:	f005 0001 	and.w	r0, r5, #1
 8003538:	f401 7590 	and.w	r5, r1, #288	; 0x120
 800353c:	4305      	orrs	r5, r0
 800353e:	d056      	beq.n	80035ee <HAL_UART_IRQHandler+0xe6>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003540:	07d5      	lsls	r5, r2, #31
 8003542:	d505      	bpl.n	8003550 <HAL_UART_IRQHandler+0x48>
 8003544:	05cb      	lsls	r3, r1, #23
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003546:	bf42      	ittt	mi
 8003548:	6c23      	ldrmi	r3, [r4, #64]	; 0x40
 800354a:	f043 0301 	orrmi.w	r3, r3, #1
 800354e:	6423      	strmi	r3, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003550:	0755      	lsls	r5, r2, #29
 8003552:	d504      	bpl.n	800355e <HAL_UART_IRQHandler+0x56>
 8003554:	b118      	cbz	r0, 800355e <HAL_UART_IRQHandler+0x56>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003556:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003558:	f043 0302 	orr.w	r3, r3, #2
 800355c:	6423      	str	r3, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800355e:	0793      	lsls	r3, r2, #30
 8003560:	d504      	bpl.n	800356c <HAL_UART_IRQHandler+0x64>
 8003562:	b118      	cbz	r0, 800356c <HAL_UART_IRQHandler+0x64>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003564:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003566:	f043 0304 	orr.w	r3, r3, #4
 800356a:	6423      	str	r3, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800356c:	0715      	lsls	r5, r2, #28
 800356e:	d507      	bpl.n	8003580 <HAL_UART_IRQHandler+0x78>
 8003570:	f001 0320 	and.w	r3, r1, #32
 8003574:	4303      	orrs	r3, r0
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003576:	bf1e      	ittt	ne
 8003578:	6c23      	ldrne	r3, [r4, #64]	; 0x40
 800357a:	f043 0308 	orrne.w	r3, r3, #8
 800357e:	6423      	strne	r3, [r4, #64]	; 0x40
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003580:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003582:	b373      	cbz	r3, 80035e2 <HAL_UART_IRQHandler+0xda>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003584:	0692      	lsls	r2, r2, #26
 8003586:	d508      	bpl.n	800359a <HAL_UART_IRQHandler+0x92>
 8003588:	068b      	lsls	r3, r1, #26
 800358a:	d506      	bpl.n	800359a <HAL_UART_IRQHandler+0x92>
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800358c:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 8003590:	2b22      	cmp	r3, #34	; 0x22
 8003592:	d102      	bne.n	800359a <HAL_UART_IRQHandler+0x92>
 8003594:	4620      	mov	r0, r4
 8003596:	f7ff ff6b 	bl	8003470 <UART_Receive_IT.part.0.isra.0>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800359a:	6823      	ldr	r3, [r4, #0]
        UART_EndRxTransfer(huart);
 800359c:	4620      	mov	r0, r4
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800359e:	695b      	ldr	r3, [r3, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80035a0:	6c25      	ldr	r5, [r4, #64]	; 0x40
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80035a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80035a6:	f005 0508 	and.w	r5, r5, #8
 80035aa:	431d      	orrs	r5, r3
 80035ac:	d01b      	beq.n	80035e6 <HAL_UART_IRQHandler+0xde>
        UART_EndRxTransfer(huart);
 80035ae:	f7ff fed7 	bl	8003360 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035b2:	6823      	ldr	r3, [r4, #0]
 80035b4:	695a      	ldr	r2, [r3, #20]
 80035b6:	0655      	lsls	r5, r2, #25
 80035b8:	d510      	bpl.n	80035dc <HAL_UART_IRQHandler+0xd4>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80035ba:	695a      	ldr	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 80035bc:	6ba0      	ldr	r0, [r4, #56]	; 0x38
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80035be:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80035c2:	615a      	str	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 80035c4:	b150      	cbz	r0, 80035dc <HAL_UART_IRQHandler+0xd4>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80035c6:	4b53      	ldr	r3, [pc, #332]	; (8003714 <HAL_UART_IRQHandler+0x20c>)
 80035c8:	6343      	str	r3, [r0, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80035ca:	f7fe fc51 	bl	8001e70 <HAL_DMA_Abort_IT>
 80035ce:	b140      	cbz	r0, 80035e2 <HAL_UART_IRQHandler+0xda>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80035d0:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80035d2:	6b43      	ldr	r3, [r0, #52]	; 0x34
}
 80035d4:	b003      	add	sp, #12
 80035d6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80035da:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 80035dc:	4620      	mov	r0, r4
 80035de:	f7ff ff3d 	bl	800345c <HAL_UART_ErrorCallback>
}
 80035e2:	b003      	add	sp, #12
 80035e4:	bd30      	pop	{r4, r5, pc}
        HAL_UART_ErrorCallback(huart);
 80035e6:	f7ff ff39 	bl	800345c <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035ea:	6425      	str	r5, [r4, #64]	; 0x40
 80035ec:	e7f9      	b.n	80035e2 <HAL_UART_IRQHandler+0xda>
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80035ee:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80035f0:	2801      	cmp	r0, #1
 80035f2:	d155      	bne.n	80036a0 <HAL_UART_IRQHandler+0x198>
      &&((isrflags & USART_SR_IDLE) != 0U)
 80035f4:	06d0      	lsls	r0, r2, #27
 80035f6:	d553      	bpl.n	80036a0 <HAL_UART_IRQHandler+0x198>
      &&((cr1its & USART_SR_IDLE) != 0U))
 80035f8:	06cd      	lsls	r5, r1, #27
 80035fa:	d551      	bpl.n	80036a0 <HAL_UART_IRQHandler+0x198>
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80035fc:	2100      	movs	r1, #0
 80035fe:	9101      	str	r1, [sp, #4]
 8003600:	681a      	ldr	r2, [r3, #0]
 8003602:	9201      	str	r2, [sp, #4]
 8003604:	685a      	ldr	r2, [r3, #4]
 8003606:	9201      	str	r2, [sp, #4]
 8003608:	9a01      	ldr	r2, [sp, #4]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800360a:	695a      	ldr	r2, [r3, #20]
 800360c:	f012 0240 	ands.w	r2, r2, #64	; 0x40
 8003610:	d02a      	beq.n	8003668 <HAL_UART_IRQHandler+0x160>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003612:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8003614:	6802      	ldr	r2, [r0, #0]
 8003616:	6852      	ldr	r2, [r2, #4]
 8003618:	b292      	uxth	r2, r2
      if (  (nb_remaining_rx_data > 0U)
 800361a:	2a00      	cmp	r2, #0
 800361c:	d0e1      	beq.n	80035e2 <HAL_UART_IRQHandler+0xda>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 800361e:	8da5      	ldrh	r5, [r4, #44]	; 0x2c
 8003620:	4295      	cmp	r5, r2
 8003622:	d9de      	bls.n	80035e2 <HAL_UART_IRQHandler+0xda>
        huart->RxXferCount = nb_remaining_rx_data;
 8003624:	85e2      	strh	r2, [r4, #46]	; 0x2e
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003626:	6982      	ldr	r2, [r0, #24]
 8003628:	2a20      	cmp	r2, #32
 800362a:	d015      	beq.n	8003658 <HAL_UART_IRQHandler+0x150>
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800362c:	68da      	ldr	r2, [r3, #12]
 800362e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003632:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003634:	695a      	ldr	r2, [r3, #20]
 8003636:	f022 0201 	bic.w	r2, r2, #1
 800363a:	615a      	str	r2, [r3, #20]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800363c:	695a      	ldr	r2, [r3, #20]
 800363e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003642:	615a      	str	r2, [r3, #20]
          huart->RxState = HAL_UART_STATE_READY;
 8003644:	2220      	movs	r2, #32
 8003646:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800364a:	6321      	str	r1, [r4, #48]	; 0x30
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800364c:	68da      	ldr	r2, [r3, #12]
 800364e:	f022 0210 	bic.w	r2, r2, #16
 8003652:	60da      	str	r2, [r3, #12]
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003654:	f7fe fbee 	bl	8001e34 <HAL_DMA_Abort>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003658:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 800365a:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 800365c:	1ac9      	subs	r1, r1, r3
 800365e:	b289      	uxth	r1, r1
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003660:	4620      	mov	r0, r4
 8003662:	f7ff ff04 	bl	800346e <HAL_UARTEx_RxEventCallback>
 8003666:	e7bc      	b.n	80035e2 <HAL_UART_IRQHandler+0xda>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003668:	8de1      	ldrh	r1, [r4, #46]	; 0x2e
 800366a:	b288      	uxth	r0, r1
      if (  (huart->RxXferCount > 0U)
 800366c:	8de1      	ldrh	r1, [r4, #46]	; 0x2e
 800366e:	b289      	uxth	r1, r1
 8003670:	2900      	cmp	r1, #0
 8003672:	d0b6      	beq.n	80035e2 <HAL_UART_IRQHandler+0xda>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003674:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 8003676:	1a09      	subs	r1, r1, r0
 8003678:	b289      	uxth	r1, r1
          &&(nb_rx_data > 0U) )
 800367a:	2900      	cmp	r1, #0
 800367c:	d0b1      	beq.n	80035e2 <HAL_UART_IRQHandler+0xda>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800367e:	68d8      	ldr	r0, [r3, #12]
 8003680:	f420 7090 	bic.w	r0, r0, #288	; 0x120
 8003684:	60d8      	str	r0, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003686:	6958      	ldr	r0, [r3, #20]
 8003688:	f020 0001 	bic.w	r0, r0, #1
 800368c:	6158      	str	r0, [r3, #20]
        huart->RxState = HAL_UART_STATE_READY;
 800368e:	2020      	movs	r0, #32
 8003690:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003694:	6322      	str	r2, [r4, #48]	; 0x30
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003696:	68da      	ldr	r2, [r3, #12]
 8003698:	f022 0210 	bic.w	r2, r2, #16
 800369c:	60da      	str	r2, [r3, #12]
 800369e:	e7df      	b.n	8003660 <HAL_UART_IRQHandler+0x158>
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80036a0:	0610      	lsls	r0, r2, #24
 80036a2:	d526      	bpl.n	80036f2 <HAL_UART_IRQHandler+0x1ea>
 80036a4:	060d      	lsls	r5, r1, #24
 80036a6:	d524      	bpl.n	80036f2 <HAL_UART_IRQHandler+0x1ea>
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80036a8:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 80036ac:	2a21      	cmp	r2, #33	; 0x21
 80036ae:	d198      	bne.n	80035e2 <HAL_UART_IRQHandler+0xda>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80036b0:	68a1      	ldr	r1, [r4, #8]
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80036b2:	6a22      	ldr	r2, [r4, #32]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80036b4:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 80036b8:	d116      	bne.n	80036e8 <HAL_UART_IRQHandler+0x1e0>
 80036ba:	6921      	ldr	r1, [r4, #16]
 80036bc:	b9a1      	cbnz	r1, 80036e8 <HAL_UART_IRQHandler+0x1e0>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80036be:	f832 1b02 	ldrh.w	r1, [r2], #2
 80036c2:	f3c1 0108 	ubfx	r1, r1, #0, #9
 80036c6:	6059      	str	r1, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80036c8:	6222      	str	r2, [r4, #32]
    if (--huart->TxXferCount == 0U)
 80036ca:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 80036cc:	3a01      	subs	r2, #1
 80036ce:	b292      	uxth	r2, r2
 80036d0:	84e2      	strh	r2, [r4, #38]	; 0x26
 80036d2:	2a00      	cmp	r2, #0
 80036d4:	d185      	bne.n	80035e2 <HAL_UART_IRQHandler+0xda>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80036d6:	68da      	ldr	r2, [r3, #12]
 80036d8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80036dc:	60da      	str	r2, [r3, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80036de:	68da      	ldr	r2, [r3, #12]
 80036e0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80036e4:	60da      	str	r2, [r3, #12]
 80036e6:	e77c      	b.n	80035e2 <HAL_UART_IRQHandler+0xda>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80036e8:	1c51      	adds	r1, r2, #1
 80036ea:	6221      	str	r1, [r4, #32]
 80036ec:	7812      	ldrb	r2, [r2, #0]
 80036ee:	605a      	str	r2, [r3, #4]
 80036f0:	e7eb      	b.n	80036ca <HAL_UART_IRQHandler+0x1c2>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80036f2:	0650      	lsls	r0, r2, #25
 80036f4:	f57f af75 	bpl.w	80035e2 <HAL_UART_IRQHandler+0xda>
 80036f8:	064a      	lsls	r2, r1, #25
 80036fa:	f57f af72 	bpl.w	80035e2 <HAL_UART_IRQHandler+0xda>
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80036fe:	68da      	ldr	r2, [r3, #12]
  HAL_UART_TxCpltCallback(huart);
 8003700:	4620      	mov	r0, r4
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003702:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003706:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8003708:	2320      	movs	r3, #32
 800370a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  HAL_UART_TxCpltCallback(huart);
 800370e:	f7fd fdf9 	bl	8001304 <HAL_UART_TxCpltCallback>
  return HAL_OK;
 8003712:	e766      	b.n	80035e2 <HAL_UART_IRQHandler+0xda>
 8003714:	0800345f 	.word	0x0800345f

08003718 <UART_Start_Receive_IT>:
  huart->RxXferCount = Size;
 8003718:	85c2      	strh	r2, [r0, #46]	; 0x2e
  huart->RxXferSize = Size;
 800371a:	8582      	strh	r2, [r0, #44]	; 0x2c
  huart->pRxBuffPtr = pData;
 800371c:	6281      	str	r1, [r0, #40]	; 0x28
{
 800371e:	4603      	mov	r3, r0
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003720:	2222      	movs	r2, #34	; 0x22
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003722:	2000      	movs	r0, #0
 8003724:	6418      	str	r0, [r3, #64]	; 0x40
  __HAL_UNLOCK(huart);
 8003726:	f883 003c 	strb.w	r0, [r3, #60]	; 0x3c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800372a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	68da      	ldr	r2, [r3, #12]
 8003732:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003736:	60da      	str	r2, [r3, #12]
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003738:	695a      	ldr	r2, [r3, #20]
 800373a:	f042 0201 	orr.w	r2, r2, #1
 800373e:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003740:	68da      	ldr	r2, [r3, #12]
 8003742:	f042 0220 	orr.w	r2, r2, #32
 8003746:	60da      	str	r2, [r3, #12]
}
 8003748:	4770      	bx	lr

0800374a <HAL_UART_Receive_IT>:
{
 800374a:	b470      	push	{r4, r5, r6}
  if (huart->RxState == HAL_UART_STATE_READY)
 800374c:	f890 603e 	ldrb.w	r6, [r0, #62]	; 0x3e
 8003750:	2e20      	cmp	r6, #32
 8003752:	d110      	bne.n	8003776 <HAL_UART_Receive_IT+0x2c>
    if ((pData == NULL) || (Size == 0U))
 8003754:	b161      	cbz	r1, 8003770 <HAL_UART_Receive_IT+0x26>
 8003756:	b15a      	cbz	r2, 8003770 <HAL_UART_Receive_IT+0x26>
    __HAL_LOCK(huart);
 8003758:	f890 403c 	ldrb.w	r4, [r0, #60]	; 0x3c
 800375c:	2c01      	cmp	r4, #1
 800375e:	d00a      	beq.n	8003776 <HAL_UART_Receive_IT+0x2c>
 8003760:	2401      	movs	r4, #1
 8003762:	f880 403c 	strb.w	r4, [r0, #60]	; 0x3c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003766:	2400      	movs	r4, #0
 8003768:	6304      	str	r4, [r0, #48]	; 0x30
}
 800376a:	bc70      	pop	{r4, r5, r6}
    return(UART_Start_Receive_IT(huart, pData, Size));
 800376c:	f7ff bfd4 	b.w	8003718 <UART_Start_Receive_IT>
      return HAL_ERROR;
 8003770:	2001      	movs	r0, #1
}
 8003772:	bc70      	pop	{r4, r5, r6}
 8003774:	4770      	bx	lr
    return HAL_BUSY;
 8003776:	2002      	movs	r0, #2
 8003778:	e7fb      	b.n	8003772 <HAL_UART_Receive_IT+0x28>
	...

0800377c <__errno>:
 800377c:	4b01      	ldr	r3, [pc, #4]	; (8003784 <__errno+0x8>)
 800377e:	6818      	ldr	r0, [r3, #0]
 8003780:	4770      	bx	lr
 8003782:	bf00      	nop
 8003784:	20000014 	.word	0x20000014

08003788 <__libc_init_array>:
 8003788:	b570      	push	{r4, r5, r6, lr}
 800378a:	2600      	movs	r6, #0
 800378c:	4d0c      	ldr	r5, [pc, #48]	; (80037c0 <__libc_init_array+0x38>)
 800378e:	4c0d      	ldr	r4, [pc, #52]	; (80037c4 <__libc_init_array+0x3c>)
 8003790:	1b64      	subs	r4, r4, r5
 8003792:	10a4      	asrs	r4, r4, #2
 8003794:	42a6      	cmp	r6, r4
 8003796:	d109      	bne.n	80037ac <__libc_init_array+0x24>
 8003798:	f002 ff2a 	bl	80065f0 <_init>
 800379c:	2600      	movs	r6, #0
 800379e:	4d0a      	ldr	r5, [pc, #40]	; (80037c8 <__libc_init_array+0x40>)
 80037a0:	4c0a      	ldr	r4, [pc, #40]	; (80037cc <__libc_init_array+0x44>)
 80037a2:	1b64      	subs	r4, r4, r5
 80037a4:	10a4      	asrs	r4, r4, #2
 80037a6:	42a6      	cmp	r6, r4
 80037a8:	d105      	bne.n	80037b6 <__libc_init_array+0x2e>
 80037aa:	bd70      	pop	{r4, r5, r6, pc}
 80037ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80037b0:	4798      	blx	r3
 80037b2:	3601      	adds	r6, #1
 80037b4:	e7ee      	b.n	8003794 <__libc_init_array+0xc>
 80037b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80037ba:	4798      	blx	r3
 80037bc:	3601      	adds	r6, #1
 80037be:	e7f2      	b.n	80037a6 <__libc_init_array+0x1e>
 80037c0:	08006f54 	.word	0x08006f54
 80037c4:	08006f54 	.word	0x08006f54
 80037c8:	08006f54 	.word	0x08006f54
 80037cc:	08006f58 	.word	0x08006f58

080037d0 <memcpy>:
 80037d0:	440a      	add	r2, r1
 80037d2:	4291      	cmp	r1, r2
 80037d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80037d8:	d100      	bne.n	80037dc <memcpy+0xc>
 80037da:	4770      	bx	lr
 80037dc:	b510      	push	{r4, lr}
 80037de:	f811 4b01 	ldrb.w	r4, [r1], #1
 80037e2:	4291      	cmp	r1, r2
 80037e4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80037e8:	d1f9      	bne.n	80037de <memcpy+0xe>
 80037ea:	bd10      	pop	{r4, pc}

080037ec <memset>:
 80037ec:	4603      	mov	r3, r0
 80037ee:	4402      	add	r2, r0
 80037f0:	4293      	cmp	r3, r2
 80037f2:	d100      	bne.n	80037f6 <memset+0xa>
 80037f4:	4770      	bx	lr
 80037f6:	f803 1b01 	strb.w	r1, [r3], #1
 80037fa:	e7f9      	b.n	80037f0 <memset+0x4>

080037fc <__cvt>:
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003802:	461f      	mov	r7, r3
 8003804:	bfbb      	ittet	lt
 8003806:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800380a:	461f      	movlt	r7, r3
 800380c:	2300      	movge	r3, #0
 800380e:	232d      	movlt	r3, #45	; 0x2d
 8003810:	b088      	sub	sp, #32
 8003812:	4614      	mov	r4, r2
 8003814:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8003816:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8003818:	7013      	strb	r3, [r2, #0]
 800381a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800381c:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8003820:	f023 0820 	bic.w	r8, r3, #32
 8003824:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003828:	d005      	beq.n	8003836 <__cvt+0x3a>
 800382a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800382e:	d100      	bne.n	8003832 <__cvt+0x36>
 8003830:	3501      	adds	r5, #1
 8003832:	2302      	movs	r3, #2
 8003834:	e000      	b.n	8003838 <__cvt+0x3c>
 8003836:	2303      	movs	r3, #3
 8003838:	aa07      	add	r2, sp, #28
 800383a:	9204      	str	r2, [sp, #16]
 800383c:	aa06      	add	r2, sp, #24
 800383e:	e9cd a202 	strd	sl, r2, [sp, #8]
 8003842:	e9cd 3500 	strd	r3, r5, [sp]
 8003846:	4622      	mov	r2, r4
 8003848:	463b      	mov	r3, r7
 800384a:	f000 fd11 	bl	8004270 <_dtoa_r>
 800384e:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8003852:	4606      	mov	r6, r0
 8003854:	d102      	bne.n	800385c <__cvt+0x60>
 8003856:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003858:	07db      	lsls	r3, r3, #31
 800385a:	d522      	bpl.n	80038a2 <__cvt+0xa6>
 800385c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003860:	eb06 0905 	add.w	r9, r6, r5
 8003864:	d110      	bne.n	8003888 <__cvt+0x8c>
 8003866:	7833      	ldrb	r3, [r6, #0]
 8003868:	2b30      	cmp	r3, #48	; 0x30
 800386a:	d10a      	bne.n	8003882 <__cvt+0x86>
 800386c:	2200      	movs	r2, #0
 800386e:	2300      	movs	r3, #0
 8003870:	4620      	mov	r0, r4
 8003872:	4639      	mov	r1, r7
 8003874:	f7fd f898 	bl	80009a8 <__aeabi_dcmpeq>
 8003878:	b918      	cbnz	r0, 8003882 <__cvt+0x86>
 800387a:	f1c5 0501 	rsb	r5, r5, #1
 800387e:	f8ca 5000 	str.w	r5, [sl]
 8003882:	f8da 3000 	ldr.w	r3, [sl]
 8003886:	4499      	add	r9, r3
 8003888:	2200      	movs	r2, #0
 800388a:	2300      	movs	r3, #0
 800388c:	4620      	mov	r0, r4
 800388e:	4639      	mov	r1, r7
 8003890:	f7fd f88a 	bl	80009a8 <__aeabi_dcmpeq>
 8003894:	b108      	cbz	r0, 800389a <__cvt+0x9e>
 8003896:	f8cd 901c 	str.w	r9, [sp, #28]
 800389a:	2230      	movs	r2, #48	; 0x30
 800389c:	9b07      	ldr	r3, [sp, #28]
 800389e:	454b      	cmp	r3, r9
 80038a0:	d307      	bcc.n	80038b2 <__cvt+0xb6>
 80038a2:	4630      	mov	r0, r6
 80038a4:	9b07      	ldr	r3, [sp, #28]
 80038a6:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80038a8:	1b9b      	subs	r3, r3, r6
 80038aa:	6013      	str	r3, [r2, #0]
 80038ac:	b008      	add	sp, #32
 80038ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80038b2:	1c59      	adds	r1, r3, #1
 80038b4:	9107      	str	r1, [sp, #28]
 80038b6:	701a      	strb	r2, [r3, #0]
 80038b8:	e7f0      	b.n	800389c <__cvt+0xa0>

080038ba <__exponent>:
 80038ba:	4603      	mov	r3, r0
 80038bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80038be:	2900      	cmp	r1, #0
 80038c0:	f803 2b02 	strb.w	r2, [r3], #2
 80038c4:	bfb6      	itet	lt
 80038c6:	222d      	movlt	r2, #45	; 0x2d
 80038c8:	222b      	movge	r2, #43	; 0x2b
 80038ca:	4249      	neglt	r1, r1
 80038cc:	2909      	cmp	r1, #9
 80038ce:	7042      	strb	r2, [r0, #1]
 80038d0:	dd2b      	ble.n	800392a <__exponent+0x70>
 80038d2:	f10d 0407 	add.w	r4, sp, #7
 80038d6:	46a4      	mov	ip, r4
 80038d8:	270a      	movs	r7, #10
 80038da:	fb91 f6f7 	sdiv	r6, r1, r7
 80038de:	460a      	mov	r2, r1
 80038e0:	46a6      	mov	lr, r4
 80038e2:	fb07 1516 	mls	r5, r7, r6, r1
 80038e6:	2a63      	cmp	r2, #99	; 0x63
 80038e8:	f105 0530 	add.w	r5, r5, #48	; 0x30
 80038ec:	4631      	mov	r1, r6
 80038ee:	f104 34ff 	add.w	r4, r4, #4294967295
 80038f2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80038f6:	dcf0      	bgt.n	80038da <__exponent+0x20>
 80038f8:	3130      	adds	r1, #48	; 0x30
 80038fa:	f1ae 0502 	sub.w	r5, lr, #2
 80038fe:	f804 1c01 	strb.w	r1, [r4, #-1]
 8003902:	4629      	mov	r1, r5
 8003904:	1c44      	adds	r4, r0, #1
 8003906:	4561      	cmp	r1, ip
 8003908:	d30a      	bcc.n	8003920 <__exponent+0x66>
 800390a:	f10d 0209 	add.w	r2, sp, #9
 800390e:	eba2 020e 	sub.w	r2, r2, lr
 8003912:	4565      	cmp	r5, ip
 8003914:	bf88      	it	hi
 8003916:	2200      	movhi	r2, #0
 8003918:	4413      	add	r3, r2
 800391a:	1a18      	subs	r0, r3, r0
 800391c:	b003      	add	sp, #12
 800391e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003920:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003924:	f804 2f01 	strb.w	r2, [r4, #1]!
 8003928:	e7ed      	b.n	8003906 <__exponent+0x4c>
 800392a:	2330      	movs	r3, #48	; 0x30
 800392c:	3130      	adds	r1, #48	; 0x30
 800392e:	7083      	strb	r3, [r0, #2]
 8003930:	70c1      	strb	r1, [r0, #3]
 8003932:	1d03      	adds	r3, r0, #4
 8003934:	e7f1      	b.n	800391a <__exponent+0x60>
	...

08003938 <_printf_float>:
 8003938:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800393c:	b091      	sub	sp, #68	; 0x44
 800393e:	460c      	mov	r4, r1
 8003940:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8003944:	4616      	mov	r6, r2
 8003946:	461f      	mov	r7, r3
 8003948:	4605      	mov	r5, r0
 800394a:	f001 fb75 	bl	8005038 <_localeconv_r>
 800394e:	6803      	ldr	r3, [r0, #0]
 8003950:	4618      	mov	r0, r3
 8003952:	9309      	str	r3, [sp, #36]	; 0x24
 8003954:	f7fc fbfc 	bl	8000150 <strlen>
 8003958:	2300      	movs	r3, #0
 800395a:	930e      	str	r3, [sp, #56]	; 0x38
 800395c:	f8d8 3000 	ldr.w	r3, [r8]
 8003960:	900a      	str	r0, [sp, #40]	; 0x28
 8003962:	3307      	adds	r3, #7
 8003964:	f023 0307 	bic.w	r3, r3, #7
 8003968:	f103 0208 	add.w	r2, r3, #8
 800396c:	f894 9018 	ldrb.w	r9, [r4, #24]
 8003970:	f8d4 b000 	ldr.w	fp, [r4]
 8003974:	f8c8 2000 	str.w	r2, [r8]
 8003978:	e9d3 2300 	ldrd	r2, r3, [r3]
 800397c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8003980:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8003984:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8003988:	930b      	str	r3, [sp, #44]	; 0x2c
 800398a:	f04f 32ff 	mov.w	r2, #4294967295
 800398e:	4640      	mov	r0, r8
 8003990:	4b9c      	ldr	r3, [pc, #624]	; (8003c04 <_printf_float+0x2cc>)
 8003992:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003994:	f7fd f83a 	bl	8000a0c <__aeabi_dcmpun>
 8003998:	bb70      	cbnz	r0, 80039f8 <_printf_float+0xc0>
 800399a:	f04f 32ff 	mov.w	r2, #4294967295
 800399e:	4640      	mov	r0, r8
 80039a0:	4b98      	ldr	r3, [pc, #608]	; (8003c04 <_printf_float+0x2cc>)
 80039a2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80039a4:	f7fd f814 	bl	80009d0 <__aeabi_dcmple>
 80039a8:	bb30      	cbnz	r0, 80039f8 <_printf_float+0xc0>
 80039aa:	2200      	movs	r2, #0
 80039ac:	2300      	movs	r3, #0
 80039ae:	4640      	mov	r0, r8
 80039b0:	4651      	mov	r1, sl
 80039b2:	f7fd f803 	bl	80009bc <__aeabi_dcmplt>
 80039b6:	b110      	cbz	r0, 80039be <_printf_float+0x86>
 80039b8:	232d      	movs	r3, #45	; 0x2d
 80039ba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80039be:	4b92      	ldr	r3, [pc, #584]	; (8003c08 <_printf_float+0x2d0>)
 80039c0:	4892      	ldr	r0, [pc, #584]	; (8003c0c <_printf_float+0x2d4>)
 80039c2:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80039c6:	bf94      	ite	ls
 80039c8:	4698      	movls	r8, r3
 80039ca:	4680      	movhi	r8, r0
 80039cc:	2303      	movs	r3, #3
 80039ce:	f04f 0a00 	mov.w	sl, #0
 80039d2:	6123      	str	r3, [r4, #16]
 80039d4:	f02b 0304 	bic.w	r3, fp, #4
 80039d8:	6023      	str	r3, [r4, #0]
 80039da:	4633      	mov	r3, r6
 80039dc:	4621      	mov	r1, r4
 80039de:	4628      	mov	r0, r5
 80039e0:	9700      	str	r7, [sp, #0]
 80039e2:	aa0f      	add	r2, sp, #60	; 0x3c
 80039e4:	f000 f9d4 	bl	8003d90 <_printf_common>
 80039e8:	3001      	adds	r0, #1
 80039ea:	f040 8090 	bne.w	8003b0e <_printf_float+0x1d6>
 80039ee:	f04f 30ff 	mov.w	r0, #4294967295
 80039f2:	b011      	add	sp, #68	; 0x44
 80039f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80039f8:	4642      	mov	r2, r8
 80039fa:	4653      	mov	r3, sl
 80039fc:	4640      	mov	r0, r8
 80039fe:	4651      	mov	r1, sl
 8003a00:	f7fd f804 	bl	8000a0c <__aeabi_dcmpun>
 8003a04:	b148      	cbz	r0, 8003a1a <_printf_float+0xe2>
 8003a06:	f1ba 0f00 	cmp.w	sl, #0
 8003a0a:	bfb8      	it	lt
 8003a0c:	232d      	movlt	r3, #45	; 0x2d
 8003a0e:	4880      	ldr	r0, [pc, #512]	; (8003c10 <_printf_float+0x2d8>)
 8003a10:	bfb8      	it	lt
 8003a12:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8003a16:	4b7f      	ldr	r3, [pc, #508]	; (8003c14 <_printf_float+0x2dc>)
 8003a18:	e7d3      	b.n	80039c2 <_printf_float+0x8a>
 8003a1a:	6863      	ldr	r3, [r4, #4]
 8003a1c:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8003a20:	1c5a      	adds	r2, r3, #1
 8003a22:	d142      	bne.n	8003aaa <_printf_float+0x172>
 8003a24:	2306      	movs	r3, #6
 8003a26:	6063      	str	r3, [r4, #4]
 8003a28:	2200      	movs	r2, #0
 8003a2a:	9206      	str	r2, [sp, #24]
 8003a2c:	aa0e      	add	r2, sp, #56	; 0x38
 8003a2e:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8003a32:	aa0d      	add	r2, sp, #52	; 0x34
 8003a34:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8003a38:	9203      	str	r2, [sp, #12]
 8003a3a:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8003a3e:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8003a42:	6023      	str	r3, [r4, #0]
 8003a44:	6863      	ldr	r3, [r4, #4]
 8003a46:	4642      	mov	r2, r8
 8003a48:	9300      	str	r3, [sp, #0]
 8003a4a:	4628      	mov	r0, r5
 8003a4c:	4653      	mov	r3, sl
 8003a4e:	910b      	str	r1, [sp, #44]	; 0x2c
 8003a50:	f7ff fed4 	bl	80037fc <__cvt>
 8003a54:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003a56:	4680      	mov	r8, r0
 8003a58:	2947      	cmp	r1, #71	; 0x47
 8003a5a:	990d      	ldr	r1, [sp, #52]	; 0x34
 8003a5c:	d108      	bne.n	8003a70 <_printf_float+0x138>
 8003a5e:	1cc8      	adds	r0, r1, #3
 8003a60:	db02      	blt.n	8003a68 <_printf_float+0x130>
 8003a62:	6863      	ldr	r3, [r4, #4]
 8003a64:	4299      	cmp	r1, r3
 8003a66:	dd40      	ble.n	8003aea <_printf_float+0x1b2>
 8003a68:	f1a9 0902 	sub.w	r9, r9, #2
 8003a6c:	fa5f f989 	uxtb.w	r9, r9
 8003a70:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8003a74:	d81f      	bhi.n	8003ab6 <_printf_float+0x17e>
 8003a76:	464a      	mov	r2, r9
 8003a78:	3901      	subs	r1, #1
 8003a7a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8003a7e:	910d      	str	r1, [sp, #52]	; 0x34
 8003a80:	f7ff ff1b 	bl	80038ba <__exponent>
 8003a84:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003a86:	4682      	mov	sl, r0
 8003a88:	1813      	adds	r3, r2, r0
 8003a8a:	2a01      	cmp	r2, #1
 8003a8c:	6123      	str	r3, [r4, #16]
 8003a8e:	dc02      	bgt.n	8003a96 <_printf_float+0x15e>
 8003a90:	6822      	ldr	r2, [r4, #0]
 8003a92:	07d2      	lsls	r2, r2, #31
 8003a94:	d501      	bpl.n	8003a9a <_printf_float+0x162>
 8003a96:	3301      	adds	r3, #1
 8003a98:	6123      	str	r3, [r4, #16]
 8003a9a:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d09b      	beq.n	80039da <_printf_float+0xa2>
 8003aa2:	232d      	movs	r3, #45	; 0x2d
 8003aa4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003aa8:	e797      	b.n	80039da <_printf_float+0xa2>
 8003aaa:	2947      	cmp	r1, #71	; 0x47
 8003aac:	d1bc      	bne.n	8003a28 <_printf_float+0xf0>
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d1ba      	bne.n	8003a28 <_printf_float+0xf0>
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	e7b7      	b.n	8003a26 <_printf_float+0xee>
 8003ab6:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8003aba:	d118      	bne.n	8003aee <_printf_float+0x1b6>
 8003abc:	2900      	cmp	r1, #0
 8003abe:	6863      	ldr	r3, [r4, #4]
 8003ac0:	dd0b      	ble.n	8003ada <_printf_float+0x1a2>
 8003ac2:	6121      	str	r1, [r4, #16]
 8003ac4:	b913      	cbnz	r3, 8003acc <_printf_float+0x194>
 8003ac6:	6822      	ldr	r2, [r4, #0]
 8003ac8:	07d0      	lsls	r0, r2, #31
 8003aca:	d502      	bpl.n	8003ad2 <_printf_float+0x19a>
 8003acc:	3301      	adds	r3, #1
 8003ace:	440b      	add	r3, r1
 8003ad0:	6123      	str	r3, [r4, #16]
 8003ad2:	f04f 0a00 	mov.w	sl, #0
 8003ad6:	65a1      	str	r1, [r4, #88]	; 0x58
 8003ad8:	e7df      	b.n	8003a9a <_printf_float+0x162>
 8003ada:	b913      	cbnz	r3, 8003ae2 <_printf_float+0x1aa>
 8003adc:	6822      	ldr	r2, [r4, #0]
 8003ade:	07d2      	lsls	r2, r2, #31
 8003ae0:	d501      	bpl.n	8003ae6 <_printf_float+0x1ae>
 8003ae2:	3302      	adds	r3, #2
 8003ae4:	e7f4      	b.n	8003ad0 <_printf_float+0x198>
 8003ae6:	2301      	movs	r3, #1
 8003ae8:	e7f2      	b.n	8003ad0 <_printf_float+0x198>
 8003aea:	f04f 0967 	mov.w	r9, #103	; 0x67
 8003aee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003af0:	4299      	cmp	r1, r3
 8003af2:	db05      	blt.n	8003b00 <_printf_float+0x1c8>
 8003af4:	6823      	ldr	r3, [r4, #0]
 8003af6:	6121      	str	r1, [r4, #16]
 8003af8:	07d8      	lsls	r0, r3, #31
 8003afa:	d5ea      	bpl.n	8003ad2 <_printf_float+0x19a>
 8003afc:	1c4b      	adds	r3, r1, #1
 8003afe:	e7e7      	b.n	8003ad0 <_printf_float+0x198>
 8003b00:	2900      	cmp	r1, #0
 8003b02:	bfcc      	ite	gt
 8003b04:	2201      	movgt	r2, #1
 8003b06:	f1c1 0202 	rsble	r2, r1, #2
 8003b0a:	4413      	add	r3, r2
 8003b0c:	e7e0      	b.n	8003ad0 <_printf_float+0x198>
 8003b0e:	6823      	ldr	r3, [r4, #0]
 8003b10:	055a      	lsls	r2, r3, #21
 8003b12:	d407      	bmi.n	8003b24 <_printf_float+0x1ec>
 8003b14:	6923      	ldr	r3, [r4, #16]
 8003b16:	4642      	mov	r2, r8
 8003b18:	4631      	mov	r1, r6
 8003b1a:	4628      	mov	r0, r5
 8003b1c:	47b8      	blx	r7
 8003b1e:	3001      	adds	r0, #1
 8003b20:	d12b      	bne.n	8003b7a <_printf_float+0x242>
 8003b22:	e764      	b.n	80039ee <_printf_float+0xb6>
 8003b24:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8003b28:	f240 80dd 	bls.w	8003ce6 <_printf_float+0x3ae>
 8003b2c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003b30:	2200      	movs	r2, #0
 8003b32:	2300      	movs	r3, #0
 8003b34:	f7fc ff38 	bl	80009a8 <__aeabi_dcmpeq>
 8003b38:	2800      	cmp	r0, #0
 8003b3a:	d033      	beq.n	8003ba4 <_printf_float+0x26c>
 8003b3c:	2301      	movs	r3, #1
 8003b3e:	4631      	mov	r1, r6
 8003b40:	4628      	mov	r0, r5
 8003b42:	4a35      	ldr	r2, [pc, #212]	; (8003c18 <_printf_float+0x2e0>)
 8003b44:	47b8      	blx	r7
 8003b46:	3001      	adds	r0, #1
 8003b48:	f43f af51 	beq.w	80039ee <_printf_float+0xb6>
 8003b4c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003b50:	429a      	cmp	r2, r3
 8003b52:	db02      	blt.n	8003b5a <_printf_float+0x222>
 8003b54:	6823      	ldr	r3, [r4, #0]
 8003b56:	07d8      	lsls	r0, r3, #31
 8003b58:	d50f      	bpl.n	8003b7a <_printf_float+0x242>
 8003b5a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003b5e:	4631      	mov	r1, r6
 8003b60:	4628      	mov	r0, r5
 8003b62:	47b8      	blx	r7
 8003b64:	3001      	adds	r0, #1
 8003b66:	f43f af42 	beq.w	80039ee <_printf_float+0xb6>
 8003b6a:	f04f 0800 	mov.w	r8, #0
 8003b6e:	f104 091a 	add.w	r9, r4, #26
 8003b72:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003b74:	3b01      	subs	r3, #1
 8003b76:	4543      	cmp	r3, r8
 8003b78:	dc09      	bgt.n	8003b8e <_printf_float+0x256>
 8003b7a:	6823      	ldr	r3, [r4, #0]
 8003b7c:	079b      	lsls	r3, r3, #30
 8003b7e:	f100 8102 	bmi.w	8003d86 <_printf_float+0x44e>
 8003b82:	68e0      	ldr	r0, [r4, #12]
 8003b84:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003b86:	4298      	cmp	r0, r3
 8003b88:	bfb8      	it	lt
 8003b8a:	4618      	movlt	r0, r3
 8003b8c:	e731      	b.n	80039f2 <_printf_float+0xba>
 8003b8e:	2301      	movs	r3, #1
 8003b90:	464a      	mov	r2, r9
 8003b92:	4631      	mov	r1, r6
 8003b94:	4628      	mov	r0, r5
 8003b96:	47b8      	blx	r7
 8003b98:	3001      	adds	r0, #1
 8003b9a:	f43f af28 	beq.w	80039ee <_printf_float+0xb6>
 8003b9e:	f108 0801 	add.w	r8, r8, #1
 8003ba2:	e7e6      	b.n	8003b72 <_printf_float+0x23a>
 8003ba4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	dc38      	bgt.n	8003c1c <_printf_float+0x2e4>
 8003baa:	2301      	movs	r3, #1
 8003bac:	4631      	mov	r1, r6
 8003bae:	4628      	mov	r0, r5
 8003bb0:	4a19      	ldr	r2, [pc, #100]	; (8003c18 <_printf_float+0x2e0>)
 8003bb2:	47b8      	blx	r7
 8003bb4:	3001      	adds	r0, #1
 8003bb6:	f43f af1a 	beq.w	80039ee <_printf_float+0xb6>
 8003bba:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003bbe:	4313      	orrs	r3, r2
 8003bc0:	d102      	bne.n	8003bc8 <_printf_float+0x290>
 8003bc2:	6823      	ldr	r3, [r4, #0]
 8003bc4:	07d9      	lsls	r1, r3, #31
 8003bc6:	d5d8      	bpl.n	8003b7a <_printf_float+0x242>
 8003bc8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003bcc:	4631      	mov	r1, r6
 8003bce:	4628      	mov	r0, r5
 8003bd0:	47b8      	blx	r7
 8003bd2:	3001      	adds	r0, #1
 8003bd4:	f43f af0b 	beq.w	80039ee <_printf_float+0xb6>
 8003bd8:	f04f 0900 	mov.w	r9, #0
 8003bdc:	f104 0a1a 	add.w	sl, r4, #26
 8003be0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003be2:	425b      	negs	r3, r3
 8003be4:	454b      	cmp	r3, r9
 8003be6:	dc01      	bgt.n	8003bec <_printf_float+0x2b4>
 8003be8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003bea:	e794      	b.n	8003b16 <_printf_float+0x1de>
 8003bec:	2301      	movs	r3, #1
 8003bee:	4652      	mov	r2, sl
 8003bf0:	4631      	mov	r1, r6
 8003bf2:	4628      	mov	r0, r5
 8003bf4:	47b8      	blx	r7
 8003bf6:	3001      	adds	r0, #1
 8003bf8:	f43f aef9 	beq.w	80039ee <_printf_float+0xb6>
 8003bfc:	f109 0901 	add.w	r9, r9, #1
 8003c00:	e7ee      	b.n	8003be0 <_printf_float+0x2a8>
 8003c02:	bf00      	nop
 8003c04:	7fefffff 	.word	0x7fefffff
 8003c08:	08006b80 	.word	0x08006b80
 8003c0c:	08006b84 	.word	0x08006b84
 8003c10:	08006b8c 	.word	0x08006b8c
 8003c14:	08006b88 	.word	0x08006b88
 8003c18:	08006b90 	.word	0x08006b90
 8003c1c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003c1e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003c20:	429a      	cmp	r2, r3
 8003c22:	bfa8      	it	ge
 8003c24:	461a      	movge	r2, r3
 8003c26:	2a00      	cmp	r2, #0
 8003c28:	4691      	mov	r9, r2
 8003c2a:	dc37      	bgt.n	8003c9c <_printf_float+0x364>
 8003c2c:	f04f 0b00 	mov.w	fp, #0
 8003c30:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003c34:	f104 021a 	add.w	r2, r4, #26
 8003c38:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8003c3c:	ebaa 0309 	sub.w	r3, sl, r9
 8003c40:	455b      	cmp	r3, fp
 8003c42:	dc33      	bgt.n	8003cac <_printf_float+0x374>
 8003c44:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003c48:	429a      	cmp	r2, r3
 8003c4a:	db3b      	blt.n	8003cc4 <_printf_float+0x38c>
 8003c4c:	6823      	ldr	r3, [r4, #0]
 8003c4e:	07da      	lsls	r2, r3, #31
 8003c50:	d438      	bmi.n	8003cc4 <_printf_float+0x38c>
 8003c52:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003c54:	990d      	ldr	r1, [sp, #52]	; 0x34
 8003c56:	eba3 020a 	sub.w	r2, r3, sl
 8003c5a:	eba3 0901 	sub.w	r9, r3, r1
 8003c5e:	4591      	cmp	r9, r2
 8003c60:	bfa8      	it	ge
 8003c62:	4691      	movge	r9, r2
 8003c64:	f1b9 0f00 	cmp.w	r9, #0
 8003c68:	dc34      	bgt.n	8003cd4 <_printf_float+0x39c>
 8003c6a:	f04f 0800 	mov.w	r8, #0
 8003c6e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003c72:	f104 0a1a 	add.w	sl, r4, #26
 8003c76:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003c7a:	1a9b      	subs	r3, r3, r2
 8003c7c:	eba3 0309 	sub.w	r3, r3, r9
 8003c80:	4543      	cmp	r3, r8
 8003c82:	f77f af7a 	ble.w	8003b7a <_printf_float+0x242>
 8003c86:	2301      	movs	r3, #1
 8003c88:	4652      	mov	r2, sl
 8003c8a:	4631      	mov	r1, r6
 8003c8c:	4628      	mov	r0, r5
 8003c8e:	47b8      	blx	r7
 8003c90:	3001      	adds	r0, #1
 8003c92:	f43f aeac 	beq.w	80039ee <_printf_float+0xb6>
 8003c96:	f108 0801 	add.w	r8, r8, #1
 8003c9a:	e7ec      	b.n	8003c76 <_printf_float+0x33e>
 8003c9c:	4613      	mov	r3, r2
 8003c9e:	4631      	mov	r1, r6
 8003ca0:	4642      	mov	r2, r8
 8003ca2:	4628      	mov	r0, r5
 8003ca4:	47b8      	blx	r7
 8003ca6:	3001      	adds	r0, #1
 8003ca8:	d1c0      	bne.n	8003c2c <_printf_float+0x2f4>
 8003caa:	e6a0      	b.n	80039ee <_printf_float+0xb6>
 8003cac:	2301      	movs	r3, #1
 8003cae:	4631      	mov	r1, r6
 8003cb0:	4628      	mov	r0, r5
 8003cb2:	920b      	str	r2, [sp, #44]	; 0x2c
 8003cb4:	47b8      	blx	r7
 8003cb6:	3001      	adds	r0, #1
 8003cb8:	f43f ae99 	beq.w	80039ee <_printf_float+0xb6>
 8003cbc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8003cbe:	f10b 0b01 	add.w	fp, fp, #1
 8003cc2:	e7b9      	b.n	8003c38 <_printf_float+0x300>
 8003cc4:	4631      	mov	r1, r6
 8003cc6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003cca:	4628      	mov	r0, r5
 8003ccc:	47b8      	blx	r7
 8003cce:	3001      	adds	r0, #1
 8003cd0:	d1bf      	bne.n	8003c52 <_printf_float+0x31a>
 8003cd2:	e68c      	b.n	80039ee <_printf_float+0xb6>
 8003cd4:	464b      	mov	r3, r9
 8003cd6:	4631      	mov	r1, r6
 8003cd8:	4628      	mov	r0, r5
 8003cda:	eb08 020a 	add.w	r2, r8, sl
 8003cde:	47b8      	blx	r7
 8003ce0:	3001      	adds	r0, #1
 8003ce2:	d1c2      	bne.n	8003c6a <_printf_float+0x332>
 8003ce4:	e683      	b.n	80039ee <_printf_float+0xb6>
 8003ce6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003ce8:	2a01      	cmp	r2, #1
 8003cea:	dc01      	bgt.n	8003cf0 <_printf_float+0x3b8>
 8003cec:	07db      	lsls	r3, r3, #31
 8003cee:	d537      	bpl.n	8003d60 <_printf_float+0x428>
 8003cf0:	2301      	movs	r3, #1
 8003cf2:	4642      	mov	r2, r8
 8003cf4:	4631      	mov	r1, r6
 8003cf6:	4628      	mov	r0, r5
 8003cf8:	47b8      	blx	r7
 8003cfa:	3001      	adds	r0, #1
 8003cfc:	f43f ae77 	beq.w	80039ee <_printf_float+0xb6>
 8003d00:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003d04:	4631      	mov	r1, r6
 8003d06:	4628      	mov	r0, r5
 8003d08:	47b8      	blx	r7
 8003d0a:	3001      	adds	r0, #1
 8003d0c:	f43f ae6f 	beq.w	80039ee <_printf_float+0xb6>
 8003d10:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003d14:	2200      	movs	r2, #0
 8003d16:	2300      	movs	r3, #0
 8003d18:	f7fc fe46 	bl	80009a8 <__aeabi_dcmpeq>
 8003d1c:	b9d8      	cbnz	r0, 8003d56 <_printf_float+0x41e>
 8003d1e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003d20:	f108 0201 	add.w	r2, r8, #1
 8003d24:	3b01      	subs	r3, #1
 8003d26:	4631      	mov	r1, r6
 8003d28:	4628      	mov	r0, r5
 8003d2a:	47b8      	blx	r7
 8003d2c:	3001      	adds	r0, #1
 8003d2e:	d10e      	bne.n	8003d4e <_printf_float+0x416>
 8003d30:	e65d      	b.n	80039ee <_printf_float+0xb6>
 8003d32:	2301      	movs	r3, #1
 8003d34:	464a      	mov	r2, r9
 8003d36:	4631      	mov	r1, r6
 8003d38:	4628      	mov	r0, r5
 8003d3a:	47b8      	blx	r7
 8003d3c:	3001      	adds	r0, #1
 8003d3e:	f43f ae56 	beq.w	80039ee <_printf_float+0xb6>
 8003d42:	f108 0801 	add.w	r8, r8, #1
 8003d46:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003d48:	3b01      	subs	r3, #1
 8003d4a:	4543      	cmp	r3, r8
 8003d4c:	dcf1      	bgt.n	8003d32 <_printf_float+0x3fa>
 8003d4e:	4653      	mov	r3, sl
 8003d50:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8003d54:	e6e0      	b.n	8003b18 <_printf_float+0x1e0>
 8003d56:	f04f 0800 	mov.w	r8, #0
 8003d5a:	f104 091a 	add.w	r9, r4, #26
 8003d5e:	e7f2      	b.n	8003d46 <_printf_float+0x40e>
 8003d60:	2301      	movs	r3, #1
 8003d62:	4642      	mov	r2, r8
 8003d64:	e7df      	b.n	8003d26 <_printf_float+0x3ee>
 8003d66:	2301      	movs	r3, #1
 8003d68:	464a      	mov	r2, r9
 8003d6a:	4631      	mov	r1, r6
 8003d6c:	4628      	mov	r0, r5
 8003d6e:	47b8      	blx	r7
 8003d70:	3001      	adds	r0, #1
 8003d72:	f43f ae3c 	beq.w	80039ee <_printf_float+0xb6>
 8003d76:	f108 0801 	add.w	r8, r8, #1
 8003d7a:	68e3      	ldr	r3, [r4, #12]
 8003d7c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8003d7e:	1a5b      	subs	r3, r3, r1
 8003d80:	4543      	cmp	r3, r8
 8003d82:	dcf0      	bgt.n	8003d66 <_printf_float+0x42e>
 8003d84:	e6fd      	b.n	8003b82 <_printf_float+0x24a>
 8003d86:	f04f 0800 	mov.w	r8, #0
 8003d8a:	f104 0919 	add.w	r9, r4, #25
 8003d8e:	e7f4      	b.n	8003d7a <_printf_float+0x442>

08003d90 <_printf_common>:
 8003d90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003d94:	4616      	mov	r6, r2
 8003d96:	4699      	mov	r9, r3
 8003d98:	688a      	ldr	r2, [r1, #8]
 8003d9a:	690b      	ldr	r3, [r1, #16]
 8003d9c:	4607      	mov	r7, r0
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	bfb8      	it	lt
 8003da2:	4613      	movlt	r3, r2
 8003da4:	6033      	str	r3, [r6, #0]
 8003da6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003daa:	460c      	mov	r4, r1
 8003dac:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003db0:	b10a      	cbz	r2, 8003db6 <_printf_common+0x26>
 8003db2:	3301      	adds	r3, #1
 8003db4:	6033      	str	r3, [r6, #0]
 8003db6:	6823      	ldr	r3, [r4, #0]
 8003db8:	0699      	lsls	r1, r3, #26
 8003dba:	bf42      	ittt	mi
 8003dbc:	6833      	ldrmi	r3, [r6, #0]
 8003dbe:	3302      	addmi	r3, #2
 8003dc0:	6033      	strmi	r3, [r6, #0]
 8003dc2:	6825      	ldr	r5, [r4, #0]
 8003dc4:	f015 0506 	ands.w	r5, r5, #6
 8003dc8:	d106      	bne.n	8003dd8 <_printf_common+0x48>
 8003dca:	f104 0a19 	add.w	sl, r4, #25
 8003dce:	68e3      	ldr	r3, [r4, #12]
 8003dd0:	6832      	ldr	r2, [r6, #0]
 8003dd2:	1a9b      	subs	r3, r3, r2
 8003dd4:	42ab      	cmp	r3, r5
 8003dd6:	dc28      	bgt.n	8003e2a <_printf_common+0x9a>
 8003dd8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003ddc:	1e13      	subs	r3, r2, #0
 8003dde:	6822      	ldr	r2, [r4, #0]
 8003de0:	bf18      	it	ne
 8003de2:	2301      	movne	r3, #1
 8003de4:	0692      	lsls	r2, r2, #26
 8003de6:	d42d      	bmi.n	8003e44 <_printf_common+0xb4>
 8003de8:	4649      	mov	r1, r9
 8003dea:	4638      	mov	r0, r7
 8003dec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003df0:	47c0      	blx	r8
 8003df2:	3001      	adds	r0, #1
 8003df4:	d020      	beq.n	8003e38 <_printf_common+0xa8>
 8003df6:	6823      	ldr	r3, [r4, #0]
 8003df8:	68e5      	ldr	r5, [r4, #12]
 8003dfa:	f003 0306 	and.w	r3, r3, #6
 8003dfe:	2b04      	cmp	r3, #4
 8003e00:	bf18      	it	ne
 8003e02:	2500      	movne	r5, #0
 8003e04:	6832      	ldr	r2, [r6, #0]
 8003e06:	f04f 0600 	mov.w	r6, #0
 8003e0a:	68a3      	ldr	r3, [r4, #8]
 8003e0c:	bf08      	it	eq
 8003e0e:	1aad      	subeq	r5, r5, r2
 8003e10:	6922      	ldr	r2, [r4, #16]
 8003e12:	bf08      	it	eq
 8003e14:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003e18:	4293      	cmp	r3, r2
 8003e1a:	bfc4      	itt	gt
 8003e1c:	1a9b      	subgt	r3, r3, r2
 8003e1e:	18ed      	addgt	r5, r5, r3
 8003e20:	341a      	adds	r4, #26
 8003e22:	42b5      	cmp	r5, r6
 8003e24:	d11a      	bne.n	8003e5c <_printf_common+0xcc>
 8003e26:	2000      	movs	r0, #0
 8003e28:	e008      	b.n	8003e3c <_printf_common+0xac>
 8003e2a:	2301      	movs	r3, #1
 8003e2c:	4652      	mov	r2, sl
 8003e2e:	4649      	mov	r1, r9
 8003e30:	4638      	mov	r0, r7
 8003e32:	47c0      	blx	r8
 8003e34:	3001      	adds	r0, #1
 8003e36:	d103      	bne.n	8003e40 <_printf_common+0xb0>
 8003e38:	f04f 30ff 	mov.w	r0, #4294967295
 8003e3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e40:	3501      	adds	r5, #1
 8003e42:	e7c4      	b.n	8003dce <_printf_common+0x3e>
 8003e44:	2030      	movs	r0, #48	; 0x30
 8003e46:	18e1      	adds	r1, r4, r3
 8003e48:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003e4c:	1c5a      	adds	r2, r3, #1
 8003e4e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003e52:	4422      	add	r2, r4
 8003e54:	3302      	adds	r3, #2
 8003e56:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003e5a:	e7c5      	b.n	8003de8 <_printf_common+0x58>
 8003e5c:	2301      	movs	r3, #1
 8003e5e:	4622      	mov	r2, r4
 8003e60:	4649      	mov	r1, r9
 8003e62:	4638      	mov	r0, r7
 8003e64:	47c0      	blx	r8
 8003e66:	3001      	adds	r0, #1
 8003e68:	d0e6      	beq.n	8003e38 <_printf_common+0xa8>
 8003e6a:	3601      	adds	r6, #1
 8003e6c:	e7d9      	b.n	8003e22 <_printf_common+0x92>
	...

08003e70 <_printf_i>:
 8003e70:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003e74:	7e0f      	ldrb	r7, [r1, #24]
 8003e76:	4691      	mov	r9, r2
 8003e78:	2f78      	cmp	r7, #120	; 0x78
 8003e7a:	4680      	mov	r8, r0
 8003e7c:	460c      	mov	r4, r1
 8003e7e:	469a      	mov	sl, r3
 8003e80:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003e82:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003e86:	d807      	bhi.n	8003e98 <_printf_i+0x28>
 8003e88:	2f62      	cmp	r7, #98	; 0x62
 8003e8a:	d80a      	bhi.n	8003ea2 <_printf_i+0x32>
 8003e8c:	2f00      	cmp	r7, #0
 8003e8e:	f000 80d9 	beq.w	8004044 <_printf_i+0x1d4>
 8003e92:	2f58      	cmp	r7, #88	; 0x58
 8003e94:	f000 80a4 	beq.w	8003fe0 <_printf_i+0x170>
 8003e98:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003e9c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003ea0:	e03a      	b.n	8003f18 <_printf_i+0xa8>
 8003ea2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003ea6:	2b15      	cmp	r3, #21
 8003ea8:	d8f6      	bhi.n	8003e98 <_printf_i+0x28>
 8003eaa:	a101      	add	r1, pc, #4	; (adr r1, 8003eb0 <_printf_i+0x40>)
 8003eac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003eb0:	08003f09 	.word	0x08003f09
 8003eb4:	08003f1d 	.word	0x08003f1d
 8003eb8:	08003e99 	.word	0x08003e99
 8003ebc:	08003e99 	.word	0x08003e99
 8003ec0:	08003e99 	.word	0x08003e99
 8003ec4:	08003e99 	.word	0x08003e99
 8003ec8:	08003f1d 	.word	0x08003f1d
 8003ecc:	08003e99 	.word	0x08003e99
 8003ed0:	08003e99 	.word	0x08003e99
 8003ed4:	08003e99 	.word	0x08003e99
 8003ed8:	08003e99 	.word	0x08003e99
 8003edc:	0800402b 	.word	0x0800402b
 8003ee0:	08003f4d 	.word	0x08003f4d
 8003ee4:	0800400d 	.word	0x0800400d
 8003ee8:	08003e99 	.word	0x08003e99
 8003eec:	08003e99 	.word	0x08003e99
 8003ef0:	0800404d 	.word	0x0800404d
 8003ef4:	08003e99 	.word	0x08003e99
 8003ef8:	08003f4d 	.word	0x08003f4d
 8003efc:	08003e99 	.word	0x08003e99
 8003f00:	08003e99 	.word	0x08003e99
 8003f04:	08004015 	.word	0x08004015
 8003f08:	682b      	ldr	r3, [r5, #0]
 8003f0a:	1d1a      	adds	r2, r3, #4
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	602a      	str	r2, [r5, #0]
 8003f10:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003f14:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003f18:	2301      	movs	r3, #1
 8003f1a:	e0a4      	b.n	8004066 <_printf_i+0x1f6>
 8003f1c:	6820      	ldr	r0, [r4, #0]
 8003f1e:	6829      	ldr	r1, [r5, #0]
 8003f20:	0606      	lsls	r6, r0, #24
 8003f22:	f101 0304 	add.w	r3, r1, #4
 8003f26:	d50a      	bpl.n	8003f3e <_printf_i+0xce>
 8003f28:	680e      	ldr	r6, [r1, #0]
 8003f2a:	602b      	str	r3, [r5, #0]
 8003f2c:	2e00      	cmp	r6, #0
 8003f2e:	da03      	bge.n	8003f38 <_printf_i+0xc8>
 8003f30:	232d      	movs	r3, #45	; 0x2d
 8003f32:	4276      	negs	r6, r6
 8003f34:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003f38:	230a      	movs	r3, #10
 8003f3a:	485e      	ldr	r0, [pc, #376]	; (80040b4 <_printf_i+0x244>)
 8003f3c:	e019      	b.n	8003f72 <_printf_i+0x102>
 8003f3e:	680e      	ldr	r6, [r1, #0]
 8003f40:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003f44:	602b      	str	r3, [r5, #0]
 8003f46:	bf18      	it	ne
 8003f48:	b236      	sxthne	r6, r6
 8003f4a:	e7ef      	b.n	8003f2c <_printf_i+0xbc>
 8003f4c:	682b      	ldr	r3, [r5, #0]
 8003f4e:	6820      	ldr	r0, [r4, #0]
 8003f50:	1d19      	adds	r1, r3, #4
 8003f52:	6029      	str	r1, [r5, #0]
 8003f54:	0601      	lsls	r1, r0, #24
 8003f56:	d501      	bpl.n	8003f5c <_printf_i+0xec>
 8003f58:	681e      	ldr	r6, [r3, #0]
 8003f5a:	e002      	b.n	8003f62 <_printf_i+0xf2>
 8003f5c:	0646      	lsls	r6, r0, #25
 8003f5e:	d5fb      	bpl.n	8003f58 <_printf_i+0xe8>
 8003f60:	881e      	ldrh	r6, [r3, #0]
 8003f62:	2f6f      	cmp	r7, #111	; 0x6f
 8003f64:	bf0c      	ite	eq
 8003f66:	2308      	moveq	r3, #8
 8003f68:	230a      	movne	r3, #10
 8003f6a:	4852      	ldr	r0, [pc, #328]	; (80040b4 <_printf_i+0x244>)
 8003f6c:	2100      	movs	r1, #0
 8003f6e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003f72:	6865      	ldr	r5, [r4, #4]
 8003f74:	2d00      	cmp	r5, #0
 8003f76:	bfa8      	it	ge
 8003f78:	6821      	ldrge	r1, [r4, #0]
 8003f7a:	60a5      	str	r5, [r4, #8]
 8003f7c:	bfa4      	itt	ge
 8003f7e:	f021 0104 	bicge.w	r1, r1, #4
 8003f82:	6021      	strge	r1, [r4, #0]
 8003f84:	b90e      	cbnz	r6, 8003f8a <_printf_i+0x11a>
 8003f86:	2d00      	cmp	r5, #0
 8003f88:	d04d      	beq.n	8004026 <_printf_i+0x1b6>
 8003f8a:	4615      	mov	r5, r2
 8003f8c:	fbb6 f1f3 	udiv	r1, r6, r3
 8003f90:	fb03 6711 	mls	r7, r3, r1, r6
 8003f94:	5dc7      	ldrb	r7, [r0, r7]
 8003f96:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003f9a:	4637      	mov	r7, r6
 8003f9c:	42bb      	cmp	r3, r7
 8003f9e:	460e      	mov	r6, r1
 8003fa0:	d9f4      	bls.n	8003f8c <_printf_i+0x11c>
 8003fa2:	2b08      	cmp	r3, #8
 8003fa4:	d10b      	bne.n	8003fbe <_printf_i+0x14e>
 8003fa6:	6823      	ldr	r3, [r4, #0]
 8003fa8:	07de      	lsls	r6, r3, #31
 8003faa:	d508      	bpl.n	8003fbe <_printf_i+0x14e>
 8003fac:	6923      	ldr	r3, [r4, #16]
 8003fae:	6861      	ldr	r1, [r4, #4]
 8003fb0:	4299      	cmp	r1, r3
 8003fb2:	bfde      	ittt	le
 8003fb4:	2330      	movle	r3, #48	; 0x30
 8003fb6:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003fba:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003fbe:	1b52      	subs	r2, r2, r5
 8003fc0:	6122      	str	r2, [r4, #16]
 8003fc2:	464b      	mov	r3, r9
 8003fc4:	4621      	mov	r1, r4
 8003fc6:	4640      	mov	r0, r8
 8003fc8:	f8cd a000 	str.w	sl, [sp]
 8003fcc:	aa03      	add	r2, sp, #12
 8003fce:	f7ff fedf 	bl	8003d90 <_printf_common>
 8003fd2:	3001      	adds	r0, #1
 8003fd4:	d14c      	bne.n	8004070 <_printf_i+0x200>
 8003fd6:	f04f 30ff 	mov.w	r0, #4294967295
 8003fda:	b004      	add	sp, #16
 8003fdc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003fe0:	4834      	ldr	r0, [pc, #208]	; (80040b4 <_printf_i+0x244>)
 8003fe2:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003fe6:	6829      	ldr	r1, [r5, #0]
 8003fe8:	6823      	ldr	r3, [r4, #0]
 8003fea:	f851 6b04 	ldr.w	r6, [r1], #4
 8003fee:	6029      	str	r1, [r5, #0]
 8003ff0:	061d      	lsls	r5, r3, #24
 8003ff2:	d514      	bpl.n	800401e <_printf_i+0x1ae>
 8003ff4:	07df      	lsls	r7, r3, #31
 8003ff6:	bf44      	itt	mi
 8003ff8:	f043 0320 	orrmi.w	r3, r3, #32
 8003ffc:	6023      	strmi	r3, [r4, #0]
 8003ffe:	b91e      	cbnz	r6, 8004008 <_printf_i+0x198>
 8004000:	6823      	ldr	r3, [r4, #0]
 8004002:	f023 0320 	bic.w	r3, r3, #32
 8004006:	6023      	str	r3, [r4, #0]
 8004008:	2310      	movs	r3, #16
 800400a:	e7af      	b.n	8003f6c <_printf_i+0xfc>
 800400c:	6823      	ldr	r3, [r4, #0]
 800400e:	f043 0320 	orr.w	r3, r3, #32
 8004012:	6023      	str	r3, [r4, #0]
 8004014:	2378      	movs	r3, #120	; 0x78
 8004016:	4828      	ldr	r0, [pc, #160]	; (80040b8 <_printf_i+0x248>)
 8004018:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800401c:	e7e3      	b.n	8003fe6 <_printf_i+0x176>
 800401e:	0659      	lsls	r1, r3, #25
 8004020:	bf48      	it	mi
 8004022:	b2b6      	uxthmi	r6, r6
 8004024:	e7e6      	b.n	8003ff4 <_printf_i+0x184>
 8004026:	4615      	mov	r5, r2
 8004028:	e7bb      	b.n	8003fa2 <_printf_i+0x132>
 800402a:	682b      	ldr	r3, [r5, #0]
 800402c:	6826      	ldr	r6, [r4, #0]
 800402e:	1d18      	adds	r0, r3, #4
 8004030:	6961      	ldr	r1, [r4, #20]
 8004032:	6028      	str	r0, [r5, #0]
 8004034:	0635      	lsls	r5, r6, #24
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	d501      	bpl.n	800403e <_printf_i+0x1ce>
 800403a:	6019      	str	r1, [r3, #0]
 800403c:	e002      	b.n	8004044 <_printf_i+0x1d4>
 800403e:	0670      	lsls	r0, r6, #25
 8004040:	d5fb      	bpl.n	800403a <_printf_i+0x1ca>
 8004042:	8019      	strh	r1, [r3, #0]
 8004044:	2300      	movs	r3, #0
 8004046:	4615      	mov	r5, r2
 8004048:	6123      	str	r3, [r4, #16]
 800404a:	e7ba      	b.n	8003fc2 <_printf_i+0x152>
 800404c:	682b      	ldr	r3, [r5, #0]
 800404e:	2100      	movs	r1, #0
 8004050:	1d1a      	adds	r2, r3, #4
 8004052:	602a      	str	r2, [r5, #0]
 8004054:	681d      	ldr	r5, [r3, #0]
 8004056:	6862      	ldr	r2, [r4, #4]
 8004058:	4628      	mov	r0, r5
 800405a:	f000 fffd 	bl	8005058 <memchr>
 800405e:	b108      	cbz	r0, 8004064 <_printf_i+0x1f4>
 8004060:	1b40      	subs	r0, r0, r5
 8004062:	6060      	str	r0, [r4, #4]
 8004064:	6863      	ldr	r3, [r4, #4]
 8004066:	6123      	str	r3, [r4, #16]
 8004068:	2300      	movs	r3, #0
 800406a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800406e:	e7a8      	b.n	8003fc2 <_printf_i+0x152>
 8004070:	462a      	mov	r2, r5
 8004072:	4649      	mov	r1, r9
 8004074:	4640      	mov	r0, r8
 8004076:	6923      	ldr	r3, [r4, #16]
 8004078:	47d0      	blx	sl
 800407a:	3001      	adds	r0, #1
 800407c:	d0ab      	beq.n	8003fd6 <_printf_i+0x166>
 800407e:	6823      	ldr	r3, [r4, #0]
 8004080:	079b      	lsls	r3, r3, #30
 8004082:	d413      	bmi.n	80040ac <_printf_i+0x23c>
 8004084:	68e0      	ldr	r0, [r4, #12]
 8004086:	9b03      	ldr	r3, [sp, #12]
 8004088:	4298      	cmp	r0, r3
 800408a:	bfb8      	it	lt
 800408c:	4618      	movlt	r0, r3
 800408e:	e7a4      	b.n	8003fda <_printf_i+0x16a>
 8004090:	2301      	movs	r3, #1
 8004092:	4632      	mov	r2, r6
 8004094:	4649      	mov	r1, r9
 8004096:	4640      	mov	r0, r8
 8004098:	47d0      	blx	sl
 800409a:	3001      	adds	r0, #1
 800409c:	d09b      	beq.n	8003fd6 <_printf_i+0x166>
 800409e:	3501      	adds	r5, #1
 80040a0:	68e3      	ldr	r3, [r4, #12]
 80040a2:	9903      	ldr	r1, [sp, #12]
 80040a4:	1a5b      	subs	r3, r3, r1
 80040a6:	42ab      	cmp	r3, r5
 80040a8:	dcf2      	bgt.n	8004090 <_printf_i+0x220>
 80040aa:	e7eb      	b.n	8004084 <_printf_i+0x214>
 80040ac:	2500      	movs	r5, #0
 80040ae:	f104 0619 	add.w	r6, r4, #25
 80040b2:	e7f5      	b.n	80040a0 <_printf_i+0x230>
 80040b4:	08006b92 	.word	0x08006b92
 80040b8:	08006ba3 	.word	0x08006ba3

080040bc <iprintf>:
 80040bc:	b40f      	push	{r0, r1, r2, r3}
 80040be:	4b0a      	ldr	r3, [pc, #40]	; (80040e8 <iprintf+0x2c>)
 80040c0:	b513      	push	{r0, r1, r4, lr}
 80040c2:	681c      	ldr	r4, [r3, #0]
 80040c4:	b124      	cbz	r4, 80040d0 <iprintf+0x14>
 80040c6:	69a3      	ldr	r3, [r4, #24]
 80040c8:	b913      	cbnz	r3, 80040d0 <iprintf+0x14>
 80040ca:	4620      	mov	r0, r4
 80040cc:	f000 ff16 	bl	8004efc <__sinit>
 80040d0:	ab05      	add	r3, sp, #20
 80040d2:	4620      	mov	r0, r4
 80040d4:	9a04      	ldr	r2, [sp, #16]
 80040d6:	68a1      	ldr	r1, [r4, #8]
 80040d8:	9301      	str	r3, [sp, #4]
 80040da:	f001 fdc1 	bl	8005c60 <_vfiprintf_r>
 80040de:	b002      	add	sp, #8
 80040e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80040e4:	b004      	add	sp, #16
 80040e6:	4770      	bx	lr
 80040e8:	20000014 	.word	0x20000014

080040ec <siprintf>:
 80040ec:	b40e      	push	{r1, r2, r3}
 80040ee:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80040f2:	b500      	push	{lr}
 80040f4:	b09c      	sub	sp, #112	; 0x70
 80040f6:	ab1d      	add	r3, sp, #116	; 0x74
 80040f8:	9002      	str	r0, [sp, #8]
 80040fa:	9006      	str	r0, [sp, #24]
 80040fc:	9107      	str	r1, [sp, #28]
 80040fe:	9104      	str	r1, [sp, #16]
 8004100:	4808      	ldr	r0, [pc, #32]	; (8004124 <siprintf+0x38>)
 8004102:	4909      	ldr	r1, [pc, #36]	; (8004128 <siprintf+0x3c>)
 8004104:	f853 2b04 	ldr.w	r2, [r3], #4
 8004108:	9105      	str	r1, [sp, #20]
 800410a:	6800      	ldr	r0, [r0, #0]
 800410c:	a902      	add	r1, sp, #8
 800410e:	9301      	str	r3, [sp, #4]
 8004110:	f001 fc7e 	bl	8005a10 <_svfiprintf_r>
 8004114:	2200      	movs	r2, #0
 8004116:	9b02      	ldr	r3, [sp, #8]
 8004118:	701a      	strb	r2, [r3, #0]
 800411a:	b01c      	add	sp, #112	; 0x70
 800411c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004120:	b003      	add	sp, #12
 8004122:	4770      	bx	lr
 8004124:	20000014 	.word	0x20000014
 8004128:	ffff0208 	.word	0xffff0208

0800412c <strncpy>:
 800412c:	4603      	mov	r3, r0
 800412e:	b510      	push	{r4, lr}
 8004130:	3901      	subs	r1, #1
 8004132:	b132      	cbz	r2, 8004142 <strncpy+0x16>
 8004134:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8004138:	3a01      	subs	r2, #1
 800413a:	f803 4b01 	strb.w	r4, [r3], #1
 800413e:	2c00      	cmp	r4, #0
 8004140:	d1f7      	bne.n	8004132 <strncpy+0x6>
 8004142:	2100      	movs	r1, #0
 8004144:	441a      	add	r2, r3
 8004146:	4293      	cmp	r3, r2
 8004148:	d100      	bne.n	800414c <strncpy+0x20>
 800414a:	bd10      	pop	{r4, pc}
 800414c:	f803 1b01 	strb.w	r1, [r3], #1
 8004150:	e7f9      	b.n	8004146 <strncpy+0x1a>

08004152 <quorem>:
 8004152:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004156:	6903      	ldr	r3, [r0, #16]
 8004158:	690c      	ldr	r4, [r1, #16]
 800415a:	4607      	mov	r7, r0
 800415c:	42a3      	cmp	r3, r4
 800415e:	f2c0 8082 	blt.w	8004266 <quorem+0x114>
 8004162:	3c01      	subs	r4, #1
 8004164:	f100 0514 	add.w	r5, r0, #20
 8004168:	f101 0814 	add.w	r8, r1, #20
 800416c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004170:	9301      	str	r3, [sp, #4]
 8004172:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004176:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800417a:	3301      	adds	r3, #1
 800417c:	429a      	cmp	r2, r3
 800417e:	fbb2 f6f3 	udiv	r6, r2, r3
 8004182:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8004186:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800418a:	d331      	bcc.n	80041f0 <quorem+0x9e>
 800418c:	f04f 0e00 	mov.w	lr, #0
 8004190:	4640      	mov	r0, r8
 8004192:	46ac      	mov	ip, r5
 8004194:	46f2      	mov	sl, lr
 8004196:	f850 2b04 	ldr.w	r2, [r0], #4
 800419a:	b293      	uxth	r3, r2
 800419c:	fb06 e303 	mla	r3, r6, r3, lr
 80041a0:	0c12      	lsrs	r2, r2, #16
 80041a2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80041a6:	b29b      	uxth	r3, r3
 80041a8:	fb06 e202 	mla	r2, r6, r2, lr
 80041ac:	ebaa 0303 	sub.w	r3, sl, r3
 80041b0:	f8dc a000 	ldr.w	sl, [ip]
 80041b4:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80041b8:	fa1f fa8a 	uxth.w	sl, sl
 80041bc:	4453      	add	r3, sl
 80041be:	f8dc a000 	ldr.w	sl, [ip]
 80041c2:	b292      	uxth	r2, r2
 80041c4:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80041c8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80041cc:	b29b      	uxth	r3, r3
 80041ce:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80041d2:	4581      	cmp	r9, r0
 80041d4:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80041d8:	f84c 3b04 	str.w	r3, [ip], #4
 80041dc:	d2db      	bcs.n	8004196 <quorem+0x44>
 80041de:	f855 300b 	ldr.w	r3, [r5, fp]
 80041e2:	b92b      	cbnz	r3, 80041f0 <quorem+0x9e>
 80041e4:	9b01      	ldr	r3, [sp, #4]
 80041e6:	3b04      	subs	r3, #4
 80041e8:	429d      	cmp	r5, r3
 80041ea:	461a      	mov	r2, r3
 80041ec:	d32f      	bcc.n	800424e <quorem+0xfc>
 80041ee:	613c      	str	r4, [r7, #16]
 80041f0:	4638      	mov	r0, r7
 80041f2:	f001 f9bd 	bl	8005570 <__mcmp>
 80041f6:	2800      	cmp	r0, #0
 80041f8:	db25      	blt.n	8004246 <quorem+0xf4>
 80041fa:	4628      	mov	r0, r5
 80041fc:	f04f 0c00 	mov.w	ip, #0
 8004200:	3601      	adds	r6, #1
 8004202:	f858 1b04 	ldr.w	r1, [r8], #4
 8004206:	f8d0 e000 	ldr.w	lr, [r0]
 800420a:	b28b      	uxth	r3, r1
 800420c:	ebac 0303 	sub.w	r3, ip, r3
 8004210:	fa1f f28e 	uxth.w	r2, lr
 8004214:	4413      	add	r3, r2
 8004216:	0c0a      	lsrs	r2, r1, #16
 8004218:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800421c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004220:	b29b      	uxth	r3, r3
 8004222:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004226:	45c1      	cmp	r9, r8
 8004228:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800422c:	f840 3b04 	str.w	r3, [r0], #4
 8004230:	d2e7      	bcs.n	8004202 <quorem+0xb0>
 8004232:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004236:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800423a:	b922      	cbnz	r2, 8004246 <quorem+0xf4>
 800423c:	3b04      	subs	r3, #4
 800423e:	429d      	cmp	r5, r3
 8004240:	461a      	mov	r2, r3
 8004242:	d30a      	bcc.n	800425a <quorem+0x108>
 8004244:	613c      	str	r4, [r7, #16]
 8004246:	4630      	mov	r0, r6
 8004248:	b003      	add	sp, #12
 800424a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800424e:	6812      	ldr	r2, [r2, #0]
 8004250:	3b04      	subs	r3, #4
 8004252:	2a00      	cmp	r2, #0
 8004254:	d1cb      	bne.n	80041ee <quorem+0x9c>
 8004256:	3c01      	subs	r4, #1
 8004258:	e7c6      	b.n	80041e8 <quorem+0x96>
 800425a:	6812      	ldr	r2, [r2, #0]
 800425c:	3b04      	subs	r3, #4
 800425e:	2a00      	cmp	r2, #0
 8004260:	d1f0      	bne.n	8004244 <quorem+0xf2>
 8004262:	3c01      	subs	r4, #1
 8004264:	e7eb      	b.n	800423e <quorem+0xec>
 8004266:	2000      	movs	r0, #0
 8004268:	e7ee      	b.n	8004248 <quorem+0xf6>
 800426a:	0000      	movs	r0, r0
 800426c:	0000      	movs	r0, r0
	...

08004270 <_dtoa_r>:
 8004270:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004274:	4616      	mov	r6, r2
 8004276:	461f      	mov	r7, r3
 8004278:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800427a:	b099      	sub	sp, #100	; 0x64
 800427c:	4605      	mov	r5, r0
 800427e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8004282:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8004286:	b974      	cbnz	r4, 80042a6 <_dtoa_r+0x36>
 8004288:	2010      	movs	r0, #16
 800428a:	f000 fedd 	bl	8005048 <malloc>
 800428e:	4602      	mov	r2, r0
 8004290:	6268      	str	r0, [r5, #36]	; 0x24
 8004292:	b920      	cbnz	r0, 800429e <_dtoa_r+0x2e>
 8004294:	21ea      	movs	r1, #234	; 0xea
 8004296:	4ba8      	ldr	r3, [pc, #672]	; (8004538 <_dtoa_r+0x2c8>)
 8004298:	48a8      	ldr	r0, [pc, #672]	; (800453c <_dtoa_r+0x2cc>)
 800429a:	f001 ff37 	bl	800610c <__assert_func>
 800429e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80042a2:	6004      	str	r4, [r0, #0]
 80042a4:	60c4      	str	r4, [r0, #12]
 80042a6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80042a8:	6819      	ldr	r1, [r3, #0]
 80042aa:	b151      	cbz	r1, 80042c2 <_dtoa_r+0x52>
 80042ac:	685a      	ldr	r2, [r3, #4]
 80042ae:	2301      	movs	r3, #1
 80042b0:	4093      	lsls	r3, r2
 80042b2:	604a      	str	r2, [r1, #4]
 80042b4:	608b      	str	r3, [r1, #8]
 80042b6:	4628      	mov	r0, r5
 80042b8:	f000 ff1c 	bl	80050f4 <_Bfree>
 80042bc:	2200      	movs	r2, #0
 80042be:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80042c0:	601a      	str	r2, [r3, #0]
 80042c2:	1e3b      	subs	r3, r7, #0
 80042c4:	bfaf      	iteee	ge
 80042c6:	2300      	movge	r3, #0
 80042c8:	2201      	movlt	r2, #1
 80042ca:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80042ce:	9305      	strlt	r3, [sp, #20]
 80042d0:	bfa8      	it	ge
 80042d2:	f8c8 3000 	strge.w	r3, [r8]
 80042d6:	f8dd 9014 	ldr.w	r9, [sp, #20]
 80042da:	4b99      	ldr	r3, [pc, #612]	; (8004540 <_dtoa_r+0x2d0>)
 80042dc:	bfb8      	it	lt
 80042de:	f8c8 2000 	strlt.w	r2, [r8]
 80042e2:	ea33 0309 	bics.w	r3, r3, r9
 80042e6:	d119      	bne.n	800431c <_dtoa_r+0xac>
 80042e8:	f242 730f 	movw	r3, #9999	; 0x270f
 80042ec:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80042ee:	6013      	str	r3, [r2, #0]
 80042f0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80042f4:	4333      	orrs	r3, r6
 80042f6:	f000 857f 	beq.w	8004df8 <_dtoa_r+0xb88>
 80042fa:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80042fc:	b953      	cbnz	r3, 8004314 <_dtoa_r+0xa4>
 80042fe:	4b91      	ldr	r3, [pc, #580]	; (8004544 <_dtoa_r+0x2d4>)
 8004300:	e022      	b.n	8004348 <_dtoa_r+0xd8>
 8004302:	4b91      	ldr	r3, [pc, #580]	; (8004548 <_dtoa_r+0x2d8>)
 8004304:	9303      	str	r3, [sp, #12]
 8004306:	3308      	adds	r3, #8
 8004308:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800430a:	6013      	str	r3, [r2, #0]
 800430c:	9803      	ldr	r0, [sp, #12]
 800430e:	b019      	add	sp, #100	; 0x64
 8004310:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004314:	4b8b      	ldr	r3, [pc, #556]	; (8004544 <_dtoa_r+0x2d4>)
 8004316:	9303      	str	r3, [sp, #12]
 8004318:	3303      	adds	r3, #3
 800431a:	e7f5      	b.n	8004308 <_dtoa_r+0x98>
 800431c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8004320:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8004324:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004328:	2200      	movs	r2, #0
 800432a:	2300      	movs	r3, #0
 800432c:	f7fc fb3c 	bl	80009a8 <__aeabi_dcmpeq>
 8004330:	4680      	mov	r8, r0
 8004332:	b158      	cbz	r0, 800434c <_dtoa_r+0xdc>
 8004334:	2301      	movs	r3, #1
 8004336:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8004338:	6013      	str	r3, [r2, #0]
 800433a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800433c:	2b00      	cmp	r3, #0
 800433e:	f000 8558 	beq.w	8004df2 <_dtoa_r+0xb82>
 8004342:	4882      	ldr	r0, [pc, #520]	; (800454c <_dtoa_r+0x2dc>)
 8004344:	6018      	str	r0, [r3, #0]
 8004346:	1e43      	subs	r3, r0, #1
 8004348:	9303      	str	r3, [sp, #12]
 800434a:	e7df      	b.n	800430c <_dtoa_r+0x9c>
 800434c:	ab16      	add	r3, sp, #88	; 0x58
 800434e:	9301      	str	r3, [sp, #4]
 8004350:	ab17      	add	r3, sp, #92	; 0x5c
 8004352:	9300      	str	r3, [sp, #0]
 8004354:	4628      	mov	r0, r5
 8004356:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800435a:	f001 f9b1 	bl	80056c0 <__d2b>
 800435e:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8004362:	4683      	mov	fp, r0
 8004364:	2c00      	cmp	r4, #0
 8004366:	d07f      	beq.n	8004468 <_dtoa_r+0x1f8>
 8004368:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800436c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800436e:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8004372:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004376:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800437a:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800437e:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8004382:	2200      	movs	r2, #0
 8004384:	4b72      	ldr	r3, [pc, #456]	; (8004550 <_dtoa_r+0x2e0>)
 8004386:	f7fb feef 	bl	8000168 <__aeabi_dsub>
 800438a:	a365      	add	r3, pc, #404	; (adr r3, 8004520 <_dtoa_r+0x2b0>)
 800438c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004390:	f7fc f8a2 	bl	80004d8 <__aeabi_dmul>
 8004394:	a364      	add	r3, pc, #400	; (adr r3, 8004528 <_dtoa_r+0x2b8>)
 8004396:	e9d3 2300 	ldrd	r2, r3, [r3]
 800439a:	f7fb fee7 	bl	800016c <__adddf3>
 800439e:	4606      	mov	r6, r0
 80043a0:	4620      	mov	r0, r4
 80043a2:	460f      	mov	r7, r1
 80043a4:	f7fc f82e 	bl	8000404 <__aeabi_i2d>
 80043a8:	a361      	add	r3, pc, #388	; (adr r3, 8004530 <_dtoa_r+0x2c0>)
 80043aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043ae:	f7fc f893 	bl	80004d8 <__aeabi_dmul>
 80043b2:	4602      	mov	r2, r0
 80043b4:	460b      	mov	r3, r1
 80043b6:	4630      	mov	r0, r6
 80043b8:	4639      	mov	r1, r7
 80043ba:	f7fb fed7 	bl	800016c <__adddf3>
 80043be:	4606      	mov	r6, r0
 80043c0:	460f      	mov	r7, r1
 80043c2:	f7fc fb39 	bl	8000a38 <__aeabi_d2iz>
 80043c6:	2200      	movs	r2, #0
 80043c8:	4682      	mov	sl, r0
 80043ca:	2300      	movs	r3, #0
 80043cc:	4630      	mov	r0, r6
 80043ce:	4639      	mov	r1, r7
 80043d0:	f7fc faf4 	bl	80009bc <__aeabi_dcmplt>
 80043d4:	b148      	cbz	r0, 80043ea <_dtoa_r+0x17a>
 80043d6:	4650      	mov	r0, sl
 80043d8:	f7fc f814 	bl	8000404 <__aeabi_i2d>
 80043dc:	4632      	mov	r2, r6
 80043de:	463b      	mov	r3, r7
 80043e0:	f7fc fae2 	bl	80009a8 <__aeabi_dcmpeq>
 80043e4:	b908      	cbnz	r0, 80043ea <_dtoa_r+0x17a>
 80043e6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80043ea:	f1ba 0f16 	cmp.w	sl, #22
 80043ee:	d858      	bhi.n	80044a2 <_dtoa_r+0x232>
 80043f0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80043f4:	4b57      	ldr	r3, [pc, #348]	; (8004554 <_dtoa_r+0x2e4>)
 80043f6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80043fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043fe:	f7fc fadd 	bl	80009bc <__aeabi_dcmplt>
 8004402:	2800      	cmp	r0, #0
 8004404:	d04f      	beq.n	80044a6 <_dtoa_r+0x236>
 8004406:	2300      	movs	r3, #0
 8004408:	f10a 3aff 	add.w	sl, sl, #4294967295
 800440c:	930f      	str	r3, [sp, #60]	; 0x3c
 800440e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8004410:	1b1c      	subs	r4, r3, r4
 8004412:	1e63      	subs	r3, r4, #1
 8004414:	9309      	str	r3, [sp, #36]	; 0x24
 8004416:	bf49      	itett	mi
 8004418:	f1c4 0301 	rsbmi	r3, r4, #1
 800441c:	2300      	movpl	r3, #0
 800441e:	9306      	strmi	r3, [sp, #24]
 8004420:	2300      	movmi	r3, #0
 8004422:	bf54      	ite	pl
 8004424:	9306      	strpl	r3, [sp, #24]
 8004426:	9309      	strmi	r3, [sp, #36]	; 0x24
 8004428:	f1ba 0f00 	cmp.w	sl, #0
 800442c:	db3d      	blt.n	80044aa <_dtoa_r+0x23a>
 800442e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004430:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8004434:	4453      	add	r3, sl
 8004436:	9309      	str	r3, [sp, #36]	; 0x24
 8004438:	2300      	movs	r3, #0
 800443a:	930a      	str	r3, [sp, #40]	; 0x28
 800443c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800443e:	2b09      	cmp	r3, #9
 8004440:	f200 808c 	bhi.w	800455c <_dtoa_r+0x2ec>
 8004444:	2b05      	cmp	r3, #5
 8004446:	bfc4      	itt	gt
 8004448:	3b04      	subgt	r3, #4
 800444a:	9322      	strgt	r3, [sp, #136]	; 0x88
 800444c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800444e:	bfc8      	it	gt
 8004450:	2400      	movgt	r4, #0
 8004452:	f1a3 0302 	sub.w	r3, r3, #2
 8004456:	bfd8      	it	le
 8004458:	2401      	movle	r4, #1
 800445a:	2b03      	cmp	r3, #3
 800445c:	f200 808a 	bhi.w	8004574 <_dtoa_r+0x304>
 8004460:	e8df f003 	tbb	[pc, r3]
 8004464:	5b4d4f2d 	.word	0x5b4d4f2d
 8004468:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800446c:	441c      	add	r4, r3
 800446e:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8004472:	2b20      	cmp	r3, #32
 8004474:	bfc3      	ittte	gt
 8004476:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800447a:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 800447e:	fa09 f303 	lslgt.w	r3, r9, r3
 8004482:	f1c3 0320 	rsble	r3, r3, #32
 8004486:	bfc6      	itte	gt
 8004488:	fa26 f000 	lsrgt.w	r0, r6, r0
 800448c:	4318      	orrgt	r0, r3
 800448e:	fa06 f003 	lslle.w	r0, r6, r3
 8004492:	f7fb ffa7 	bl	80003e4 <__aeabi_ui2d>
 8004496:	2301      	movs	r3, #1
 8004498:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800449c:	3c01      	subs	r4, #1
 800449e:	9313      	str	r3, [sp, #76]	; 0x4c
 80044a0:	e76f      	b.n	8004382 <_dtoa_r+0x112>
 80044a2:	2301      	movs	r3, #1
 80044a4:	e7b2      	b.n	800440c <_dtoa_r+0x19c>
 80044a6:	900f      	str	r0, [sp, #60]	; 0x3c
 80044a8:	e7b1      	b.n	800440e <_dtoa_r+0x19e>
 80044aa:	9b06      	ldr	r3, [sp, #24]
 80044ac:	eba3 030a 	sub.w	r3, r3, sl
 80044b0:	9306      	str	r3, [sp, #24]
 80044b2:	f1ca 0300 	rsb	r3, sl, #0
 80044b6:	930a      	str	r3, [sp, #40]	; 0x28
 80044b8:	2300      	movs	r3, #0
 80044ba:	930e      	str	r3, [sp, #56]	; 0x38
 80044bc:	e7be      	b.n	800443c <_dtoa_r+0x1cc>
 80044be:	2300      	movs	r3, #0
 80044c0:	930b      	str	r3, [sp, #44]	; 0x2c
 80044c2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	dc58      	bgt.n	800457a <_dtoa_r+0x30a>
 80044c8:	f04f 0901 	mov.w	r9, #1
 80044cc:	464b      	mov	r3, r9
 80044ce:	f8cd 9020 	str.w	r9, [sp, #32]
 80044d2:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 80044d6:	2200      	movs	r2, #0
 80044d8:	6a68      	ldr	r0, [r5, #36]	; 0x24
 80044da:	6042      	str	r2, [r0, #4]
 80044dc:	2204      	movs	r2, #4
 80044de:	f102 0614 	add.w	r6, r2, #20
 80044e2:	429e      	cmp	r6, r3
 80044e4:	6841      	ldr	r1, [r0, #4]
 80044e6:	d94e      	bls.n	8004586 <_dtoa_r+0x316>
 80044e8:	4628      	mov	r0, r5
 80044ea:	f000 fdc3 	bl	8005074 <_Balloc>
 80044ee:	9003      	str	r0, [sp, #12]
 80044f0:	2800      	cmp	r0, #0
 80044f2:	d14c      	bne.n	800458e <_dtoa_r+0x31e>
 80044f4:	4602      	mov	r2, r0
 80044f6:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80044fa:	4b17      	ldr	r3, [pc, #92]	; (8004558 <_dtoa_r+0x2e8>)
 80044fc:	e6cc      	b.n	8004298 <_dtoa_r+0x28>
 80044fe:	2301      	movs	r3, #1
 8004500:	e7de      	b.n	80044c0 <_dtoa_r+0x250>
 8004502:	2300      	movs	r3, #0
 8004504:	930b      	str	r3, [sp, #44]	; 0x2c
 8004506:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004508:	eb0a 0903 	add.w	r9, sl, r3
 800450c:	f109 0301 	add.w	r3, r9, #1
 8004510:	2b01      	cmp	r3, #1
 8004512:	9308      	str	r3, [sp, #32]
 8004514:	bfb8      	it	lt
 8004516:	2301      	movlt	r3, #1
 8004518:	e7dd      	b.n	80044d6 <_dtoa_r+0x266>
 800451a:	2301      	movs	r3, #1
 800451c:	e7f2      	b.n	8004504 <_dtoa_r+0x294>
 800451e:	bf00      	nop
 8004520:	636f4361 	.word	0x636f4361
 8004524:	3fd287a7 	.word	0x3fd287a7
 8004528:	8b60c8b3 	.word	0x8b60c8b3
 800452c:	3fc68a28 	.word	0x3fc68a28
 8004530:	509f79fb 	.word	0x509f79fb
 8004534:	3fd34413 	.word	0x3fd34413
 8004538:	08006bc1 	.word	0x08006bc1
 800453c:	08006bd8 	.word	0x08006bd8
 8004540:	7ff00000 	.word	0x7ff00000
 8004544:	08006bbd 	.word	0x08006bbd
 8004548:	08006bb4 	.word	0x08006bb4
 800454c:	08006b91 	.word	0x08006b91
 8004550:	3ff80000 	.word	0x3ff80000
 8004554:	08006d28 	.word	0x08006d28
 8004558:	08006c33 	.word	0x08006c33
 800455c:	2401      	movs	r4, #1
 800455e:	2300      	movs	r3, #0
 8004560:	940b      	str	r4, [sp, #44]	; 0x2c
 8004562:	9322      	str	r3, [sp, #136]	; 0x88
 8004564:	f04f 39ff 	mov.w	r9, #4294967295
 8004568:	2200      	movs	r2, #0
 800456a:	2312      	movs	r3, #18
 800456c:	f8cd 9020 	str.w	r9, [sp, #32]
 8004570:	9223      	str	r2, [sp, #140]	; 0x8c
 8004572:	e7b0      	b.n	80044d6 <_dtoa_r+0x266>
 8004574:	2301      	movs	r3, #1
 8004576:	930b      	str	r3, [sp, #44]	; 0x2c
 8004578:	e7f4      	b.n	8004564 <_dtoa_r+0x2f4>
 800457a:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 800457e:	464b      	mov	r3, r9
 8004580:	f8cd 9020 	str.w	r9, [sp, #32]
 8004584:	e7a7      	b.n	80044d6 <_dtoa_r+0x266>
 8004586:	3101      	adds	r1, #1
 8004588:	6041      	str	r1, [r0, #4]
 800458a:	0052      	lsls	r2, r2, #1
 800458c:	e7a7      	b.n	80044de <_dtoa_r+0x26e>
 800458e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004590:	9a03      	ldr	r2, [sp, #12]
 8004592:	601a      	str	r2, [r3, #0]
 8004594:	9b08      	ldr	r3, [sp, #32]
 8004596:	2b0e      	cmp	r3, #14
 8004598:	f200 80a8 	bhi.w	80046ec <_dtoa_r+0x47c>
 800459c:	2c00      	cmp	r4, #0
 800459e:	f000 80a5 	beq.w	80046ec <_dtoa_r+0x47c>
 80045a2:	f1ba 0f00 	cmp.w	sl, #0
 80045a6:	dd34      	ble.n	8004612 <_dtoa_r+0x3a2>
 80045a8:	4a9a      	ldr	r2, [pc, #616]	; (8004814 <_dtoa_r+0x5a4>)
 80045aa:	f00a 030f 	and.w	r3, sl, #15
 80045ae:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80045b2:	f41a 7f80 	tst.w	sl, #256	; 0x100
 80045b6:	e9d3 3400 	ldrd	r3, r4, [r3]
 80045ba:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80045be:	ea4f 142a 	mov.w	r4, sl, asr #4
 80045c2:	d016      	beq.n	80045f2 <_dtoa_r+0x382>
 80045c4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80045c8:	4b93      	ldr	r3, [pc, #588]	; (8004818 <_dtoa_r+0x5a8>)
 80045ca:	2703      	movs	r7, #3
 80045cc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80045d0:	f7fc f8ac 	bl	800072c <__aeabi_ddiv>
 80045d4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80045d8:	f004 040f 	and.w	r4, r4, #15
 80045dc:	4e8e      	ldr	r6, [pc, #568]	; (8004818 <_dtoa_r+0x5a8>)
 80045de:	b954      	cbnz	r4, 80045f6 <_dtoa_r+0x386>
 80045e0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80045e4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80045e8:	f7fc f8a0 	bl	800072c <__aeabi_ddiv>
 80045ec:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80045f0:	e029      	b.n	8004646 <_dtoa_r+0x3d6>
 80045f2:	2702      	movs	r7, #2
 80045f4:	e7f2      	b.n	80045dc <_dtoa_r+0x36c>
 80045f6:	07e1      	lsls	r1, r4, #31
 80045f8:	d508      	bpl.n	800460c <_dtoa_r+0x39c>
 80045fa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80045fe:	e9d6 2300 	ldrd	r2, r3, [r6]
 8004602:	f7fb ff69 	bl	80004d8 <__aeabi_dmul>
 8004606:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800460a:	3701      	adds	r7, #1
 800460c:	1064      	asrs	r4, r4, #1
 800460e:	3608      	adds	r6, #8
 8004610:	e7e5      	b.n	80045de <_dtoa_r+0x36e>
 8004612:	f000 80a5 	beq.w	8004760 <_dtoa_r+0x4f0>
 8004616:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800461a:	f1ca 0400 	rsb	r4, sl, #0
 800461e:	4b7d      	ldr	r3, [pc, #500]	; (8004814 <_dtoa_r+0x5a4>)
 8004620:	f004 020f 	and.w	r2, r4, #15
 8004624:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004628:	e9d3 2300 	ldrd	r2, r3, [r3]
 800462c:	f7fb ff54 	bl	80004d8 <__aeabi_dmul>
 8004630:	2702      	movs	r7, #2
 8004632:	2300      	movs	r3, #0
 8004634:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004638:	4e77      	ldr	r6, [pc, #476]	; (8004818 <_dtoa_r+0x5a8>)
 800463a:	1124      	asrs	r4, r4, #4
 800463c:	2c00      	cmp	r4, #0
 800463e:	f040 8084 	bne.w	800474a <_dtoa_r+0x4da>
 8004642:	2b00      	cmp	r3, #0
 8004644:	d1d2      	bne.n	80045ec <_dtoa_r+0x37c>
 8004646:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004648:	2b00      	cmp	r3, #0
 800464a:	f000 808b 	beq.w	8004764 <_dtoa_r+0x4f4>
 800464e:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8004652:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8004656:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800465a:	2200      	movs	r2, #0
 800465c:	4b6f      	ldr	r3, [pc, #444]	; (800481c <_dtoa_r+0x5ac>)
 800465e:	f7fc f9ad 	bl	80009bc <__aeabi_dcmplt>
 8004662:	2800      	cmp	r0, #0
 8004664:	d07e      	beq.n	8004764 <_dtoa_r+0x4f4>
 8004666:	9b08      	ldr	r3, [sp, #32]
 8004668:	2b00      	cmp	r3, #0
 800466a:	d07b      	beq.n	8004764 <_dtoa_r+0x4f4>
 800466c:	f1b9 0f00 	cmp.w	r9, #0
 8004670:	dd38      	ble.n	80046e4 <_dtoa_r+0x474>
 8004672:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004676:	2200      	movs	r2, #0
 8004678:	4b69      	ldr	r3, [pc, #420]	; (8004820 <_dtoa_r+0x5b0>)
 800467a:	f7fb ff2d 	bl	80004d8 <__aeabi_dmul>
 800467e:	464c      	mov	r4, r9
 8004680:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004684:	f10a 38ff 	add.w	r8, sl, #4294967295
 8004688:	3701      	adds	r7, #1
 800468a:	4638      	mov	r0, r7
 800468c:	f7fb feba 	bl	8000404 <__aeabi_i2d>
 8004690:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004694:	f7fb ff20 	bl	80004d8 <__aeabi_dmul>
 8004698:	2200      	movs	r2, #0
 800469a:	4b62      	ldr	r3, [pc, #392]	; (8004824 <_dtoa_r+0x5b4>)
 800469c:	f7fb fd66 	bl	800016c <__adddf3>
 80046a0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80046a4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80046a8:	9611      	str	r6, [sp, #68]	; 0x44
 80046aa:	2c00      	cmp	r4, #0
 80046ac:	d15d      	bne.n	800476a <_dtoa_r+0x4fa>
 80046ae:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80046b2:	2200      	movs	r2, #0
 80046b4:	4b5c      	ldr	r3, [pc, #368]	; (8004828 <_dtoa_r+0x5b8>)
 80046b6:	f7fb fd57 	bl	8000168 <__aeabi_dsub>
 80046ba:	4602      	mov	r2, r0
 80046bc:	460b      	mov	r3, r1
 80046be:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80046c2:	4633      	mov	r3, r6
 80046c4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80046c6:	f7fc f997 	bl	80009f8 <__aeabi_dcmpgt>
 80046ca:	2800      	cmp	r0, #0
 80046cc:	f040 829c 	bne.w	8004c08 <_dtoa_r+0x998>
 80046d0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80046d4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80046d6:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80046da:	f7fc f96f 	bl	80009bc <__aeabi_dcmplt>
 80046de:	2800      	cmp	r0, #0
 80046e0:	f040 8290 	bne.w	8004c04 <_dtoa_r+0x994>
 80046e4:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 80046e8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80046ec:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	f2c0 8152 	blt.w	8004998 <_dtoa_r+0x728>
 80046f4:	f1ba 0f0e 	cmp.w	sl, #14
 80046f8:	f300 814e 	bgt.w	8004998 <_dtoa_r+0x728>
 80046fc:	4b45      	ldr	r3, [pc, #276]	; (8004814 <_dtoa_r+0x5a4>)
 80046fe:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8004702:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004706:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800470a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800470c:	2b00      	cmp	r3, #0
 800470e:	f280 80db 	bge.w	80048c8 <_dtoa_r+0x658>
 8004712:	9b08      	ldr	r3, [sp, #32]
 8004714:	2b00      	cmp	r3, #0
 8004716:	f300 80d7 	bgt.w	80048c8 <_dtoa_r+0x658>
 800471a:	f040 8272 	bne.w	8004c02 <_dtoa_r+0x992>
 800471e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004722:	2200      	movs	r2, #0
 8004724:	4b40      	ldr	r3, [pc, #256]	; (8004828 <_dtoa_r+0x5b8>)
 8004726:	f7fb fed7 	bl	80004d8 <__aeabi_dmul>
 800472a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800472e:	f7fc f959 	bl	80009e4 <__aeabi_dcmpge>
 8004732:	9c08      	ldr	r4, [sp, #32]
 8004734:	4626      	mov	r6, r4
 8004736:	2800      	cmp	r0, #0
 8004738:	f040 8248 	bne.w	8004bcc <_dtoa_r+0x95c>
 800473c:	2331      	movs	r3, #49	; 0x31
 800473e:	9f03      	ldr	r7, [sp, #12]
 8004740:	f10a 0a01 	add.w	sl, sl, #1
 8004744:	f807 3b01 	strb.w	r3, [r7], #1
 8004748:	e244      	b.n	8004bd4 <_dtoa_r+0x964>
 800474a:	07e2      	lsls	r2, r4, #31
 800474c:	d505      	bpl.n	800475a <_dtoa_r+0x4ea>
 800474e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8004752:	f7fb fec1 	bl	80004d8 <__aeabi_dmul>
 8004756:	2301      	movs	r3, #1
 8004758:	3701      	adds	r7, #1
 800475a:	1064      	asrs	r4, r4, #1
 800475c:	3608      	adds	r6, #8
 800475e:	e76d      	b.n	800463c <_dtoa_r+0x3cc>
 8004760:	2702      	movs	r7, #2
 8004762:	e770      	b.n	8004646 <_dtoa_r+0x3d6>
 8004764:	46d0      	mov	r8, sl
 8004766:	9c08      	ldr	r4, [sp, #32]
 8004768:	e78f      	b.n	800468a <_dtoa_r+0x41a>
 800476a:	9903      	ldr	r1, [sp, #12]
 800476c:	4b29      	ldr	r3, [pc, #164]	; (8004814 <_dtoa_r+0x5a4>)
 800476e:	4421      	add	r1, r4
 8004770:	9112      	str	r1, [sp, #72]	; 0x48
 8004772:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004774:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8004778:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800477c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8004780:	2900      	cmp	r1, #0
 8004782:	d055      	beq.n	8004830 <_dtoa_r+0x5c0>
 8004784:	2000      	movs	r0, #0
 8004786:	4929      	ldr	r1, [pc, #164]	; (800482c <_dtoa_r+0x5bc>)
 8004788:	f7fb ffd0 	bl	800072c <__aeabi_ddiv>
 800478c:	463b      	mov	r3, r7
 800478e:	4632      	mov	r2, r6
 8004790:	f7fb fcea 	bl	8000168 <__aeabi_dsub>
 8004794:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004798:	9f03      	ldr	r7, [sp, #12]
 800479a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800479e:	f7fc f94b 	bl	8000a38 <__aeabi_d2iz>
 80047a2:	4604      	mov	r4, r0
 80047a4:	f7fb fe2e 	bl	8000404 <__aeabi_i2d>
 80047a8:	4602      	mov	r2, r0
 80047aa:	460b      	mov	r3, r1
 80047ac:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80047b0:	f7fb fcda 	bl	8000168 <__aeabi_dsub>
 80047b4:	4602      	mov	r2, r0
 80047b6:	460b      	mov	r3, r1
 80047b8:	3430      	adds	r4, #48	; 0x30
 80047ba:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80047be:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80047c2:	f807 4b01 	strb.w	r4, [r7], #1
 80047c6:	f7fc f8f9 	bl	80009bc <__aeabi_dcmplt>
 80047ca:	2800      	cmp	r0, #0
 80047cc:	d174      	bne.n	80048b8 <_dtoa_r+0x648>
 80047ce:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80047d2:	2000      	movs	r0, #0
 80047d4:	4911      	ldr	r1, [pc, #68]	; (800481c <_dtoa_r+0x5ac>)
 80047d6:	f7fb fcc7 	bl	8000168 <__aeabi_dsub>
 80047da:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80047de:	f7fc f8ed 	bl	80009bc <__aeabi_dcmplt>
 80047e2:	2800      	cmp	r0, #0
 80047e4:	f040 80b7 	bne.w	8004956 <_dtoa_r+0x6e6>
 80047e8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80047ea:	429f      	cmp	r7, r3
 80047ec:	f43f af7a 	beq.w	80046e4 <_dtoa_r+0x474>
 80047f0:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80047f4:	2200      	movs	r2, #0
 80047f6:	4b0a      	ldr	r3, [pc, #40]	; (8004820 <_dtoa_r+0x5b0>)
 80047f8:	f7fb fe6e 	bl	80004d8 <__aeabi_dmul>
 80047fc:	2200      	movs	r2, #0
 80047fe:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004802:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004806:	4b06      	ldr	r3, [pc, #24]	; (8004820 <_dtoa_r+0x5b0>)
 8004808:	f7fb fe66 	bl	80004d8 <__aeabi_dmul>
 800480c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004810:	e7c3      	b.n	800479a <_dtoa_r+0x52a>
 8004812:	bf00      	nop
 8004814:	08006d28 	.word	0x08006d28
 8004818:	08006d00 	.word	0x08006d00
 800481c:	3ff00000 	.word	0x3ff00000
 8004820:	40240000 	.word	0x40240000
 8004824:	401c0000 	.word	0x401c0000
 8004828:	40140000 	.word	0x40140000
 800482c:	3fe00000 	.word	0x3fe00000
 8004830:	4630      	mov	r0, r6
 8004832:	4639      	mov	r1, r7
 8004834:	f7fb fe50 	bl	80004d8 <__aeabi_dmul>
 8004838:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800483a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800483e:	9c03      	ldr	r4, [sp, #12]
 8004840:	9314      	str	r3, [sp, #80]	; 0x50
 8004842:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004846:	f7fc f8f7 	bl	8000a38 <__aeabi_d2iz>
 800484a:	9015      	str	r0, [sp, #84]	; 0x54
 800484c:	f7fb fdda 	bl	8000404 <__aeabi_i2d>
 8004850:	4602      	mov	r2, r0
 8004852:	460b      	mov	r3, r1
 8004854:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004858:	f7fb fc86 	bl	8000168 <__aeabi_dsub>
 800485c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800485e:	4606      	mov	r6, r0
 8004860:	3330      	adds	r3, #48	; 0x30
 8004862:	f804 3b01 	strb.w	r3, [r4], #1
 8004866:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004868:	460f      	mov	r7, r1
 800486a:	429c      	cmp	r4, r3
 800486c:	f04f 0200 	mov.w	r2, #0
 8004870:	d124      	bne.n	80048bc <_dtoa_r+0x64c>
 8004872:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004876:	4bb0      	ldr	r3, [pc, #704]	; (8004b38 <_dtoa_r+0x8c8>)
 8004878:	f7fb fc78 	bl	800016c <__adddf3>
 800487c:	4602      	mov	r2, r0
 800487e:	460b      	mov	r3, r1
 8004880:	4630      	mov	r0, r6
 8004882:	4639      	mov	r1, r7
 8004884:	f7fc f8b8 	bl	80009f8 <__aeabi_dcmpgt>
 8004888:	2800      	cmp	r0, #0
 800488a:	d163      	bne.n	8004954 <_dtoa_r+0x6e4>
 800488c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004890:	2000      	movs	r0, #0
 8004892:	49a9      	ldr	r1, [pc, #676]	; (8004b38 <_dtoa_r+0x8c8>)
 8004894:	f7fb fc68 	bl	8000168 <__aeabi_dsub>
 8004898:	4602      	mov	r2, r0
 800489a:	460b      	mov	r3, r1
 800489c:	4630      	mov	r0, r6
 800489e:	4639      	mov	r1, r7
 80048a0:	f7fc f88c 	bl	80009bc <__aeabi_dcmplt>
 80048a4:	2800      	cmp	r0, #0
 80048a6:	f43f af1d 	beq.w	80046e4 <_dtoa_r+0x474>
 80048aa:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80048ac:	1e7b      	subs	r3, r7, #1
 80048ae:	9314      	str	r3, [sp, #80]	; 0x50
 80048b0:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 80048b4:	2b30      	cmp	r3, #48	; 0x30
 80048b6:	d0f8      	beq.n	80048aa <_dtoa_r+0x63a>
 80048b8:	46c2      	mov	sl, r8
 80048ba:	e03b      	b.n	8004934 <_dtoa_r+0x6c4>
 80048bc:	4b9f      	ldr	r3, [pc, #636]	; (8004b3c <_dtoa_r+0x8cc>)
 80048be:	f7fb fe0b 	bl	80004d8 <__aeabi_dmul>
 80048c2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80048c6:	e7bc      	b.n	8004842 <_dtoa_r+0x5d2>
 80048c8:	9f03      	ldr	r7, [sp, #12]
 80048ca:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80048ce:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80048d2:	4640      	mov	r0, r8
 80048d4:	4649      	mov	r1, r9
 80048d6:	f7fb ff29 	bl	800072c <__aeabi_ddiv>
 80048da:	f7fc f8ad 	bl	8000a38 <__aeabi_d2iz>
 80048de:	4604      	mov	r4, r0
 80048e0:	f7fb fd90 	bl	8000404 <__aeabi_i2d>
 80048e4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80048e8:	f7fb fdf6 	bl	80004d8 <__aeabi_dmul>
 80048ec:	4602      	mov	r2, r0
 80048ee:	460b      	mov	r3, r1
 80048f0:	4640      	mov	r0, r8
 80048f2:	4649      	mov	r1, r9
 80048f4:	f7fb fc38 	bl	8000168 <__aeabi_dsub>
 80048f8:	f104 0630 	add.w	r6, r4, #48	; 0x30
 80048fc:	f807 6b01 	strb.w	r6, [r7], #1
 8004900:	9e03      	ldr	r6, [sp, #12]
 8004902:	f8dd c020 	ldr.w	ip, [sp, #32]
 8004906:	1bbe      	subs	r6, r7, r6
 8004908:	45b4      	cmp	ip, r6
 800490a:	4602      	mov	r2, r0
 800490c:	460b      	mov	r3, r1
 800490e:	d136      	bne.n	800497e <_dtoa_r+0x70e>
 8004910:	f7fb fc2c 	bl	800016c <__adddf3>
 8004914:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004918:	4680      	mov	r8, r0
 800491a:	4689      	mov	r9, r1
 800491c:	f7fc f86c 	bl	80009f8 <__aeabi_dcmpgt>
 8004920:	bb58      	cbnz	r0, 800497a <_dtoa_r+0x70a>
 8004922:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004926:	4640      	mov	r0, r8
 8004928:	4649      	mov	r1, r9
 800492a:	f7fc f83d 	bl	80009a8 <__aeabi_dcmpeq>
 800492e:	b108      	cbz	r0, 8004934 <_dtoa_r+0x6c4>
 8004930:	07e1      	lsls	r1, r4, #31
 8004932:	d422      	bmi.n	800497a <_dtoa_r+0x70a>
 8004934:	4628      	mov	r0, r5
 8004936:	4659      	mov	r1, fp
 8004938:	f000 fbdc 	bl	80050f4 <_Bfree>
 800493c:	2300      	movs	r3, #0
 800493e:	703b      	strb	r3, [r7, #0]
 8004940:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8004942:	f10a 0001 	add.w	r0, sl, #1
 8004946:	6018      	str	r0, [r3, #0]
 8004948:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800494a:	2b00      	cmp	r3, #0
 800494c:	f43f acde 	beq.w	800430c <_dtoa_r+0x9c>
 8004950:	601f      	str	r7, [r3, #0]
 8004952:	e4db      	b.n	800430c <_dtoa_r+0x9c>
 8004954:	4627      	mov	r7, r4
 8004956:	463b      	mov	r3, r7
 8004958:	461f      	mov	r7, r3
 800495a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800495e:	2a39      	cmp	r2, #57	; 0x39
 8004960:	d107      	bne.n	8004972 <_dtoa_r+0x702>
 8004962:	9a03      	ldr	r2, [sp, #12]
 8004964:	429a      	cmp	r2, r3
 8004966:	d1f7      	bne.n	8004958 <_dtoa_r+0x6e8>
 8004968:	2230      	movs	r2, #48	; 0x30
 800496a:	9903      	ldr	r1, [sp, #12]
 800496c:	f108 0801 	add.w	r8, r8, #1
 8004970:	700a      	strb	r2, [r1, #0]
 8004972:	781a      	ldrb	r2, [r3, #0]
 8004974:	3201      	adds	r2, #1
 8004976:	701a      	strb	r2, [r3, #0]
 8004978:	e79e      	b.n	80048b8 <_dtoa_r+0x648>
 800497a:	46d0      	mov	r8, sl
 800497c:	e7eb      	b.n	8004956 <_dtoa_r+0x6e6>
 800497e:	2200      	movs	r2, #0
 8004980:	4b6e      	ldr	r3, [pc, #440]	; (8004b3c <_dtoa_r+0x8cc>)
 8004982:	f7fb fda9 	bl	80004d8 <__aeabi_dmul>
 8004986:	2200      	movs	r2, #0
 8004988:	2300      	movs	r3, #0
 800498a:	4680      	mov	r8, r0
 800498c:	4689      	mov	r9, r1
 800498e:	f7fc f80b 	bl	80009a8 <__aeabi_dcmpeq>
 8004992:	2800      	cmp	r0, #0
 8004994:	d09b      	beq.n	80048ce <_dtoa_r+0x65e>
 8004996:	e7cd      	b.n	8004934 <_dtoa_r+0x6c4>
 8004998:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800499a:	2a00      	cmp	r2, #0
 800499c:	f000 80d0 	beq.w	8004b40 <_dtoa_r+0x8d0>
 80049a0:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80049a2:	2a01      	cmp	r2, #1
 80049a4:	f300 80ae 	bgt.w	8004b04 <_dtoa_r+0x894>
 80049a8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80049aa:	2a00      	cmp	r2, #0
 80049ac:	f000 80a6 	beq.w	8004afc <_dtoa_r+0x88c>
 80049b0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80049b4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80049b6:	9f06      	ldr	r7, [sp, #24]
 80049b8:	9a06      	ldr	r2, [sp, #24]
 80049ba:	2101      	movs	r1, #1
 80049bc:	441a      	add	r2, r3
 80049be:	9206      	str	r2, [sp, #24]
 80049c0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80049c2:	4628      	mov	r0, r5
 80049c4:	441a      	add	r2, r3
 80049c6:	9209      	str	r2, [sp, #36]	; 0x24
 80049c8:	f000 fc4a 	bl	8005260 <__i2b>
 80049cc:	4606      	mov	r6, r0
 80049ce:	2f00      	cmp	r7, #0
 80049d0:	dd0c      	ble.n	80049ec <_dtoa_r+0x77c>
 80049d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	dd09      	ble.n	80049ec <_dtoa_r+0x77c>
 80049d8:	42bb      	cmp	r3, r7
 80049da:	bfa8      	it	ge
 80049dc:	463b      	movge	r3, r7
 80049de:	9a06      	ldr	r2, [sp, #24]
 80049e0:	1aff      	subs	r7, r7, r3
 80049e2:	1ad2      	subs	r2, r2, r3
 80049e4:	9206      	str	r2, [sp, #24]
 80049e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80049e8:	1ad3      	subs	r3, r2, r3
 80049ea:	9309      	str	r3, [sp, #36]	; 0x24
 80049ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80049ee:	b1f3      	cbz	r3, 8004a2e <_dtoa_r+0x7be>
 80049f0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	f000 80a8 	beq.w	8004b48 <_dtoa_r+0x8d8>
 80049f8:	2c00      	cmp	r4, #0
 80049fa:	dd10      	ble.n	8004a1e <_dtoa_r+0x7ae>
 80049fc:	4631      	mov	r1, r6
 80049fe:	4622      	mov	r2, r4
 8004a00:	4628      	mov	r0, r5
 8004a02:	f000 fceb 	bl	80053dc <__pow5mult>
 8004a06:	465a      	mov	r2, fp
 8004a08:	4601      	mov	r1, r0
 8004a0a:	4606      	mov	r6, r0
 8004a0c:	4628      	mov	r0, r5
 8004a0e:	f000 fc3d 	bl	800528c <__multiply>
 8004a12:	4680      	mov	r8, r0
 8004a14:	4659      	mov	r1, fp
 8004a16:	4628      	mov	r0, r5
 8004a18:	f000 fb6c 	bl	80050f4 <_Bfree>
 8004a1c:	46c3      	mov	fp, r8
 8004a1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004a20:	1b1a      	subs	r2, r3, r4
 8004a22:	d004      	beq.n	8004a2e <_dtoa_r+0x7be>
 8004a24:	4659      	mov	r1, fp
 8004a26:	4628      	mov	r0, r5
 8004a28:	f000 fcd8 	bl	80053dc <__pow5mult>
 8004a2c:	4683      	mov	fp, r0
 8004a2e:	2101      	movs	r1, #1
 8004a30:	4628      	mov	r0, r5
 8004a32:	f000 fc15 	bl	8005260 <__i2b>
 8004a36:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004a38:	4604      	mov	r4, r0
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	f340 8086 	ble.w	8004b4c <_dtoa_r+0x8dc>
 8004a40:	461a      	mov	r2, r3
 8004a42:	4601      	mov	r1, r0
 8004a44:	4628      	mov	r0, r5
 8004a46:	f000 fcc9 	bl	80053dc <__pow5mult>
 8004a4a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004a4c:	4604      	mov	r4, r0
 8004a4e:	2b01      	cmp	r3, #1
 8004a50:	dd7f      	ble.n	8004b52 <_dtoa_r+0x8e2>
 8004a52:	f04f 0800 	mov.w	r8, #0
 8004a56:	6923      	ldr	r3, [r4, #16]
 8004a58:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8004a5c:	6918      	ldr	r0, [r3, #16]
 8004a5e:	f000 fbb1 	bl	80051c4 <__hi0bits>
 8004a62:	f1c0 0020 	rsb	r0, r0, #32
 8004a66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004a68:	4418      	add	r0, r3
 8004a6a:	f010 001f 	ands.w	r0, r0, #31
 8004a6e:	f000 8092 	beq.w	8004b96 <_dtoa_r+0x926>
 8004a72:	f1c0 0320 	rsb	r3, r0, #32
 8004a76:	2b04      	cmp	r3, #4
 8004a78:	f340 808a 	ble.w	8004b90 <_dtoa_r+0x920>
 8004a7c:	f1c0 001c 	rsb	r0, r0, #28
 8004a80:	9b06      	ldr	r3, [sp, #24]
 8004a82:	4407      	add	r7, r0
 8004a84:	4403      	add	r3, r0
 8004a86:	9306      	str	r3, [sp, #24]
 8004a88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004a8a:	4403      	add	r3, r0
 8004a8c:	9309      	str	r3, [sp, #36]	; 0x24
 8004a8e:	9b06      	ldr	r3, [sp, #24]
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	dd05      	ble.n	8004aa0 <_dtoa_r+0x830>
 8004a94:	4659      	mov	r1, fp
 8004a96:	461a      	mov	r2, r3
 8004a98:	4628      	mov	r0, r5
 8004a9a:	f000 fcf9 	bl	8005490 <__lshift>
 8004a9e:	4683      	mov	fp, r0
 8004aa0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	dd05      	ble.n	8004ab2 <_dtoa_r+0x842>
 8004aa6:	4621      	mov	r1, r4
 8004aa8:	461a      	mov	r2, r3
 8004aaa:	4628      	mov	r0, r5
 8004aac:	f000 fcf0 	bl	8005490 <__lshift>
 8004ab0:	4604      	mov	r4, r0
 8004ab2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d070      	beq.n	8004b9a <_dtoa_r+0x92a>
 8004ab8:	4621      	mov	r1, r4
 8004aba:	4658      	mov	r0, fp
 8004abc:	f000 fd58 	bl	8005570 <__mcmp>
 8004ac0:	2800      	cmp	r0, #0
 8004ac2:	da6a      	bge.n	8004b9a <_dtoa_r+0x92a>
 8004ac4:	2300      	movs	r3, #0
 8004ac6:	4659      	mov	r1, fp
 8004ac8:	220a      	movs	r2, #10
 8004aca:	4628      	mov	r0, r5
 8004acc:	f000 fb34 	bl	8005138 <__multadd>
 8004ad0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004ad2:	4683      	mov	fp, r0
 8004ad4:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	f000 8194 	beq.w	8004e06 <_dtoa_r+0xb96>
 8004ade:	4631      	mov	r1, r6
 8004ae0:	2300      	movs	r3, #0
 8004ae2:	220a      	movs	r2, #10
 8004ae4:	4628      	mov	r0, r5
 8004ae6:	f000 fb27 	bl	8005138 <__multadd>
 8004aea:	f1b9 0f00 	cmp.w	r9, #0
 8004aee:	4606      	mov	r6, r0
 8004af0:	f300 8093 	bgt.w	8004c1a <_dtoa_r+0x9aa>
 8004af4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004af6:	2b02      	cmp	r3, #2
 8004af8:	dc57      	bgt.n	8004baa <_dtoa_r+0x93a>
 8004afa:	e08e      	b.n	8004c1a <_dtoa_r+0x9aa>
 8004afc:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8004afe:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8004b02:	e757      	b.n	80049b4 <_dtoa_r+0x744>
 8004b04:	9b08      	ldr	r3, [sp, #32]
 8004b06:	1e5c      	subs	r4, r3, #1
 8004b08:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004b0a:	42a3      	cmp	r3, r4
 8004b0c:	bfb7      	itett	lt
 8004b0e:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8004b10:	1b1c      	subge	r4, r3, r4
 8004b12:	1ae2      	sublt	r2, r4, r3
 8004b14:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8004b16:	bfbe      	ittt	lt
 8004b18:	940a      	strlt	r4, [sp, #40]	; 0x28
 8004b1a:	189b      	addlt	r3, r3, r2
 8004b1c:	930e      	strlt	r3, [sp, #56]	; 0x38
 8004b1e:	9b08      	ldr	r3, [sp, #32]
 8004b20:	bfb8      	it	lt
 8004b22:	2400      	movlt	r4, #0
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	bfbb      	ittet	lt
 8004b28:	9b06      	ldrlt	r3, [sp, #24]
 8004b2a:	9a08      	ldrlt	r2, [sp, #32]
 8004b2c:	9f06      	ldrge	r7, [sp, #24]
 8004b2e:	1a9f      	sublt	r7, r3, r2
 8004b30:	bfac      	ite	ge
 8004b32:	9b08      	ldrge	r3, [sp, #32]
 8004b34:	2300      	movlt	r3, #0
 8004b36:	e73f      	b.n	80049b8 <_dtoa_r+0x748>
 8004b38:	3fe00000 	.word	0x3fe00000
 8004b3c:	40240000 	.word	0x40240000
 8004b40:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8004b42:	9f06      	ldr	r7, [sp, #24]
 8004b44:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8004b46:	e742      	b.n	80049ce <_dtoa_r+0x75e>
 8004b48:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004b4a:	e76b      	b.n	8004a24 <_dtoa_r+0x7b4>
 8004b4c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004b4e:	2b01      	cmp	r3, #1
 8004b50:	dc19      	bgt.n	8004b86 <_dtoa_r+0x916>
 8004b52:	9b04      	ldr	r3, [sp, #16]
 8004b54:	b9bb      	cbnz	r3, 8004b86 <_dtoa_r+0x916>
 8004b56:	9b05      	ldr	r3, [sp, #20]
 8004b58:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004b5c:	b99b      	cbnz	r3, 8004b86 <_dtoa_r+0x916>
 8004b5e:	9b05      	ldr	r3, [sp, #20]
 8004b60:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004b64:	0d1b      	lsrs	r3, r3, #20
 8004b66:	051b      	lsls	r3, r3, #20
 8004b68:	b183      	cbz	r3, 8004b8c <_dtoa_r+0x91c>
 8004b6a:	f04f 0801 	mov.w	r8, #1
 8004b6e:	9b06      	ldr	r3, [sp, #24]
 8004b70:	3301      	adds	r3, #1
 8004b72:	9306      	str	r3, [sp, #24]
 8004b74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004b76:	3301      	adds	r3, #1
 8004b78:	9309      	str	r3, [sp, #36]	; 0x24
 8004b7a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	f47f af6a 	bne.w	8004a56 <_dtoa_r+0x7e6>
 8004b82:	2001      	movs	r0, #1
 8004b84:	e76f      	b.n	8004a66 <_dtoa_r+0x7f6>
 8004b86:	f04f 0800 	mov.w	r8, #0
 8004b8a:	e7f6      	b.n	8004b7a <_dtoa_r+0x90a>
 8004b8c:	4698      	mov	r8, r3
 8004b8e:	e7f4      	b.n	8004b7a <_dtoa_r+0x90a>
 8004b90:	f43f af7d 	beq.w	8004a8e <_dtoa_r+0x81e>
 8004b94:	4618      	mov	r0, r3
 8004b96:	301c      	adds	r0, #28
 8004b98:	e772      	b.n	8004a80 <_dtoa_r+0x810>
 8004b9a:	9b08      	ldr	r3, [sp, #32]
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	dc36      	bgt.n	8004c0e <_dtoa_r+0x99e>
 8004ba0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004ba2:	2b02      	cmp	r3, #2
 8004ba4:	dd33      	ble.n	8004c0e <_dtoa_r+0x99e>
 8004ba6:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004baa:	f1b9 0f00 	cmp.w	r9, #0
 8004bae:	d10d      	bne.n	8004bcc <_dtoa_r+0x95c>
 8004bb0:	4621      	mov	r1, r4
 8004bb2:	464b      	mov	r3, r9
 8004bb4:	2205      	movs	r2, #5
 8004bb6:	4628      	mov	r0, r5
 8004bb8:	f000 fabe 	bl	8005138 <__multadd>
 8004bbc:	4601      	mov	r1, r0
 8004bbe:	4604      	mov	r4, r0
 8004bc0:	4658      	mov	r0, fp
 8004bc2:	f000 fcd5 	bl	8005570 <__mcmp>
 8004bc6:	2800      	cmp	r0, #0
 8004bc8:	f73f adb8 	bgt.w	800473c <_dtoa_r+0x4cc>
 8004bcc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004bce:	9f03      	ldr	r7, [sp, #12]
 8004bd0:	ea6f 0a03 	mvn.w	sl, r3
 8004bd4:	f04f 0800 	mov.w	r8, #0
 8004bd8:	4621      	mov	r1, r4
 8004bda:	4628      	mov	r0, r5
 8004bdc:	f000 fa8a 	bl	80050f4 <_Bfree>
 8004be0:	2e00      	cmp	r6, #0
 8004be2:	f43f aea7 	beq.w	8004934 <_dtoa_r+0x6c4>
 8004be6:	f1b8 0f00 	cmp.w	r8, #0
 8004bea:	d005      	beq.n	8004bf8 <_dtoa_r+0x988>
 8004bec:	45b0      	cmp	r8, r6
 8004bee:	d003      	beq.n	8004bf8 <_dtoa_r+0x988>
 8004bf0:	4641      	mov	r1, r8
 8004bf2:	4628      	mov	r0, r5
 8004bf4:	f000 fa7e 	bl	80050f4 <_Bfree>
 8004bf8:	4631      	mov	r1, r6
 8004bfa:	4628      	mov	r0, r5
 8004bfc:	f000 fa7a 	bl	80050f4 <_Bfree>
 8004c00:	e698      	b.n	8004934 <_dtoa_r+0x6c4>
 8004c02:	2400      	movs	r4, #0
 8004c04:	4626      	mov	r6, r4
 8004c06:	e7e1      	b.n	8004bcc <_dtoa_r+0x95c>
 8004c08:	46c2      	mov	sl, r8
 8004c0a:	4626      	mov	r6, r4
 8004c0c:	e596      	b.n	800473c <_dtoa_r+0x4cc>
 8004c0e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004c10:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	f000 80fd 	beq.w	8004e14 <_dtoa_r+0xba4>
 8004c1a:	2f00      	cmp	r7, #0
 8004c1c:	dd05      	ble.n	8004c2a <_dtoa_r+0x9ba>
 8004c1e:	4631      	mov	r1, r6
 8004c20:	463a      	mov	r2, r7
 8004c22:	4628      	mov	r0, r5
 8004c24:	f000 fc34 	bl	8005490 <__lshift>
 8004c28:	4606      	mov	r6, r0
 8004c2a:	f1b8 0f00 	cmp.w	r8, #0
 8004c2e:	d05c      	beq.n	8004cea <_dtoa_r+0xa7a>
 8004c30:	4628      	mov	r0, r5
 8004c32:	6871      	ldr	r1, [r6, #4]
 8004c34:	f000 fa1e 	bl	8005074 <_Balloc>
 8004c38:	4607      	mov	r7, r0
 8004c3a:	b928      	cbnz	r0, 8004c48 <_dtoa_r+0x9d8>
 8004c3c:	4602      	mov	r2, r0
 8004c3e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8004c42:	4b7f      	ldr	r3, [pc, #508]	; (8004e40 <_dtoa_r+0xbd0>)
 8004c44:	f7ff bb28 	b.w	8004298 <_dtoa_r+0x28>
 8004c48:	6932      	ldr	r2, [r6, #16]
 8004c4a:	f106 010c 	add.w	r1, r6, #12
 8004c4e:	3202      	adds	r2, #2
 8004c50:	0092      	lsls	r2, r2, #2
 8004c52:	300c      	adds	r0, #12
 8004c54:	f7fe fdbc 	bl	80037d0 <memcpy>
 8004c58:	2201      	movs	r2, #1
 8004c5a:	4639      	mov	r1, r7
 8004c5c:	4628      	mov	r0, r5
 8004c5e:	f000 fc17 	bl	8005490 <__lshift>
 8004c62:	46b0      	mov	r8, r6
 8004c64:	4606      	mov	r6, r0
 8004c66:	9b03      	ldr	r3, [sp, #12]
 8004c68:	3301      	adds	r3, #1
 8004c6a:	9308      	str	r3, [sp, #32]
 8004c6c:	9b03      	ldr	r3, [sp, #12]
 8004c6e:	444b      	add	r3, r9
 8004c70:	930a      	str	r3, [sp, #40]	; 0x28
 8004c72:	9b04      	ldr	r3, [sp, #16]
 8004c74:	f003 0301 	and.w	r3, r3, #1
 8004c78:	9309      	str	r3, [sp, #36]	; 0x24
 8004c7a:	9b08      	ldr	r3, [sp, #32]
 8004c7c:	4621      	mov	r1, r4
 8004c7e:	3b01      	subs	r3, #1
 8004c80:	4658      	mov	r0, fp
 8004c82:	9304      	str	r3, [sp, #16]
 8004c84:	f7ff fa65 	bl	8004152 <quorem>
 8004c88:	4603      	mov	r3, r0
 8004c8a:	4641      	mov	r1, r8
 8004c8c:	3330      	adds	r3, #48	; 0x30
 8004c8e:	9006      	str	r0, [sp, #24]
 8004c90:	4658      	mov	r0, fp
 8004c92:	930b      	str	r3, [sp, #44]	; 0x2c
 8004c94:	f000 fc6c 	bl	8005570 <__mcmp>
 8004c98:	4632      	mov	r2, r6
 8004c9a:	4681      	mov	r9, r0
 8004c9c:	4621      	mov	r1, r4
 8004c9e:	4628      	mov	r0, r5
 8004ca0:	f000 fc82 	bl	80055a8 <__mdiff>
 8004ca4:	68c2      	ldr	r2, [r0, #12]
 8004ca6:	4607      	mov	r7, r0
 8004ca8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004caa:	bb02      	cbnz	r2, 8004cee <_dtoa_r+0xa7e>
 8004cac:	4601      	mov	r1, r0
 8004cae:	4658      	mov	r0, fp
 8004cb0:	f000 fc5e 	bl	8005570 <__mcmp>
 8004cb4:	4602      	mov	r2, r0
 8004cb6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004cb8:	4639      	mov	r1, r7
 8004cba:	4628      	mov	r0, r5
 8004cbc:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8004cc0:	f000 fa18 	bl	80050f4 <_Bfree>
 8004cc4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004cc6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004cc8:	9f08      	ldr	r7, [sp, #32]
 8004cca:	ea43 0102 	orr.w	r1, r3, r2
 8004cce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004cd0:	430b      	orrs	r3, r1
 8004cd2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004cd4:	d10d      	bne.n	8004cf2 <_dtoa_r+0xa82>
 8004cd6:	2b39      	cmp	r3, #57	; 0x39
 8004cd8:	d029      	beq.n	8004d2e <_dtoa_r+0xabe>
 8004cda:	f1b9 0f00 	cmp.w	r9, #0
 8004cde:	dd01      	ble.n	8004ce4 <_dtoa_r+0xa74>
 8004ce0:	9b06      	ldr	r3, [sp, #24]
 8004ce2:	3331      	adds	r3, #49	; 0x31
 8004ce4:	9a04      	ldr	r2, [sp, #16]
 8004ce6:	7013      	strb	r3, [r2, #0]
 8004ce8:	e776      	b.n	8004bd8 <_dtoa_r+0x968>
 8004cea:	4630      	mov	r0, r6
 8004cec:	e7b9      	b.n	8004c62 <_dtoa_r+0x9f2>
 8004cee:	2201      	movs	r2, #1
 8004cf0:	e7e2      	b.n	8004cb8 <_dtoa_r+0xa48>
 8004cf2:	f1b9 0f00 	cmp.w	r9, #0
 8004cf6:	db06      	blt.n	8004d06 <_dtoa_r+0xa96>
 8004cf8:	9922      	ldr	r1, [sp, #136]	; 0x88
 8004cfa:	ea41 0909 	orr.w	r9, r1, r9
 8004cfe:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004d00:	ea59 0101 	orrs.w	r1, r9, r1
 8004d04:	d120      	bne.n	8004d48 <_dtoa_r+0xad8>
 8004d06:	2a00      	cmp	r2, #0
 8004d08:	ddec      	ble.n	8004ce4 <_dtoa_r+0xa74>
 8004d0a:	4659      	mov	r1, fp
 8004d0c:	2201      	movs	r2, #1
 8004d0e:	4628      	mov	r0, r5
 8004d10:	9308      	str	r3, [sp, #32]
 8004d12:	f000 fbbd 	bl	8005490 <__lshift>
 8004d16:	4621      	mov	r1, r4
 8004d18:	4683      	mov	fp, r0
 8004d1a:	f000 fc29 	bl	8005570 <__mcmp>
 8004d1e:	2800      	cmp	r0, #0
 8004d20:	9b08      	ldr	r3, [sp, #32]
 8004d22:	dc02      	bgt.n	8004d2a <_dtoa_r+0xaba>
 8004d24:	d1de      	bne.n	8004ce4 <_dtoa_r+0xa74>
 8004d26:	07da      	lsls	r2, r3, #31
 8004d28:	d5dc      	bpl.n	8004ce4 <_dtoa_r+0xa74>
 8004d2a:	2b39      	cmp	r3, #57	; 0x39
 8004d2c:	d1d8      	bne.n	8004ce0 <_dtoa_r+0xa70>
 8004d2e:	2339      	movs	r3, #57	; 0x39
 8004d30:	9a04      	ldr	r2, [sp, #16]
 8004d32:	7013      	strb	r3, [r2, #0]
 8004d34:	463b      	mov	r3, r7
 8004d36:	461f      	mov	r7, r3
 8004d38:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8004d3c:	3b01      	subs	r3, #1
 8004d3e:	2a39      	cmp	r2, #57	; 0x39
 8004d40:	d050      	beq.n	8004de4 <_dtoa_r+0xb74>
 8004d42:	3201      	adds	r2, #1
 8004d44:	701a      	strb	r2, [r3, #0]
 8004d46:	e747      	b.n	8004bd8 <_dtoa_r+0x968>
 8004d48:	2a00      	cmp	r2, #0
 8004d4a:	dd03      	ble.n	8004d54 <_dtoa_r+0xae4>
 8004d4c:	2b39      	cmp	r3, #57	; 0x39
 8004d4e:	d0ee      	beq.n	8004d2e <_dtoa_r+0xabe>
 8004d50:	3301      	adds	r3, #1
 8004d52:	e7c7      	b.n	8004ce4 <_dtoa_r+0xa74>
 8004d54:	9a08      	ldr	r2, [sp, #32]
 8004d56:	990a      	ldr	r1, [sp, #40]	; 0x28
 8004d58:	f802 3c01 	strb.w	r3, [r2, #-1]
 8004d5c:	428a      	cmp	r2, r1
 8004d5e:	d02a      	beq.n	8004db6 <_dtoa_r+0xb46>
 8004d60:	4659      	mov	r1, fp
 8004d62:	2300      	movs	r3, #0
 8004d64:	220a      	movs	r2, #10
 8004d66:	4628      	mov	r0, r5
 8004d68:	f000 f9e6 	bl	8005138 <__multadd>
 8004d6c:	45b0      	cmp	r8, r6
 8004d6e:	4683      	mov	fp, r0
 8004d70:	f04f 0300 	mov.w	r3, #0
 8004d74:	f04f 020a 	mov.w	r2, #10
 8004d78:	4641      	mov	r1, r8
 8004d7a:	4628      	mov	r0, r5
 8004d7c:	d107      	bne.n	8004d8e <_dtoa_r+0xb1e>
 8004d7e:	f000 f9db 	bl	8005138 <__multadd>
 8004d82:	4680      	mov	r8, r0
 8004d84:	4606      	mov	r6, r0
 8004d86:	9b08      	ldr	r3, [sp, #32]
 8004d88:	3301      	adds	r3, #1
 8004d8a:	9308      	str	r3, [sp, #32]
 8004d8c:	e775      	b.n	8004c7a <_dtoa_r+0xa0a>
 8004d8e:	f000 f9d3 	bl	8005138 <__multadd>
 8004d92:	4631      	mov	r1, r6
 8004d94:	4680      	mov	r8, r0
 8004d96:	2300      	movs	r3, #0
 8004d98:	220a      	movs	r2, #10
 8004d9a:	4628      	mov	r0, r5
 8004d9c:	f000 f9cc 	bl	8005138 <__multadd>
 8004da0:	4606      	mov	r6, r0
 8004da2:	e7f0      	b.n	8004d86 <_dtoa_r+0xb16>
 8004da4:	f1b9 0f00 	cmp.w	r9, #0
 8004da8:	bfcc      	ite	gt
 8004daa:	464f      	movgt	r7, r9
 8004dac:	2701      	movle	r7, #1
 8004dae:	f04f 0800 	mov.w	r8, #0
 8004db2:	9a03      	ldr	r2, [sp, #12]
 8004db4:	4417      	add	r7, r2
 8004db6:	4659      	mov	r1, fp
 8004db8:	2201      	movs	r2, #1
 8004dba:	4628      	mov	r0, r5
 8004dbc:	9308      	str	r3, [sp, #32]
 8004dbe:	f000 fb67 	bl	8005490 <__lshift>
 8004dc2:	4621      	mov	r1, r4
 8004dc4:	4683      	mov	fp, r0
 8004dc6:	f000 fbd3 	bl	8005570 <__mcmp>
 8004dca:	2800      	cmp	r0, #0
 8004dcc:	dcb2      	bgt.n	8004d34 <_dtoa_r+0xac4>
 8004dce:	d102      	bne.n	8004dd6 <_dtoa_r+0xb66>
 8004dd0:	9b08      	ldr	r3, [sp, #32]
 8004dd2:	07db      	lsls	r3, r3, #31
 8004dd4:	d4ae      	bmi.n	8004d34 <_dtoa_r+0xac4>
 8004dd6:	463b      	mov	r3, r7
 8004dd8:	461f      	mov	r7, r3
 8004dda:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004dde:	2a30      	cmp	r2, #48	; 0x30
 8004de0:	d0fa      	beq.n	8004dd8 <_dtoa_r+0xb68>
 8004de2:	e6f9      	b.n	8004bd8 <_dtoa_r+0x968>
 8004de4:	9a03      	ldr	r2, [sp, #12]
 8004de6:	429a      	cmp	r2, r3
 8004de8:	d1a5      	bne.n	8004d36 <_dtoa_r+0xac6>
 8004dea:	2331      	movs	r3, #49	; 0x31
 8004dec:	f10a 0a01 	add.w	sl, sl, #1
 8004df0:	e779      	b.n	8004ce6 <_dtoa_r+0xa76>
 8004df2:	4b14      	ldr	r3, [pc, #80]	; (8004e44 <_dtoa_r+0xbd4>)
 8004df4:	f7ff baa8 	b.w	8004348 <_dtoa_r+0xd8>
 8004df8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	f47f aa81 	bne.w	8004302 <_dtoa_r+0x92>
 8004e00:	4b11      	ldr	r3, [pc, #68]	; (8004e48 <_dtoa_r+0xbd8>)
 8004e02:	f7ff baa1 	b.w	8004348 <_dtoa_r+0xd8>
 8004e06:	f1b9 0f00 	cmp.w	r9, #0
 8004e0a:	dc03      	bgt.n	8004e14 <_dtoa_r+0xba4>
 8004e0c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004e0e:	2b02      	cmp	r3, #2
 8004e10:	f73f aecb 	bgt.w	8004baa <_dtoa_r+0x93a>
 8004e14:	9f03      	ldr	r7, [sp, #12]
 8004e16:	4621      	mov	r1, r4
 8004e18:	4658      	mov	r0, fp
 8004e1a:	f7ff f99a 	bl	8004152 <quorem>
 8004e1e:	9a03      	ldr	r2, [sp, #12]
 8004e20:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8004e24:	f807 3b01 	strb.w	r3, [r7], #1
 8004e28:	1aba      	subs	r2, r7, r2
 8004e2a:	4591      	cmp	r9, r2
 8004e2c:	ddba      	ble.n	8004da4 <_dtoa_r+0xb34>
 8004e2e:	4659      	mov	r1, fp
 8004e30:	2300      	movs	r3, #0
 8004e32:	220a      	movs	r2, #10
 8004e34:	4628      	mov	r0, r5
 8004e36:	f000 f97f 	bl	8005138 <__multadd>
 8004e3a:	4683      	mov	fp, r0
 8004e3c:	e7eb      	b.n	8004e16 <_dtoa_r+0xba6>
 8004e3e:	bf00      	nop
 8004e40:	08006c33 	.word	0x08006c33
 8004e44:	08006b90 	.word	0x08006b90
 8004e48:	08006bb4 	.word	0x08006bb4

08004e4c <std>:
 8004e4c:	2300      	movs	r3, #0
 8004e4e:	b510      	push	{r4, lr}
 8004e50:	4604      	mov	r4, r0
 8004e52:	e9c0 3300 	strd	r3, r3, [r0]
 8004e56:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004e5a:	6083      	str	r3, [r0, #8]
 8004e5c:	8181      	strh	r1, [r0, #12]
 8004e5e:	6643      	str	r3, [r0, #100]	; 0x64
 8004e60:	81c2      	strh	r2, [r0, #14]
 8004e62:	6183      	str	r3, [r0, #24]
 8004e64:	4619      	mov	r1, r3
 8004e66:	2208      	movs	r2, #8
 8004e68:	305c      	adds	r0, #92	; 0x5c
 8004e6a:	f7fe fcbf 	bl	80037ec <memset>
 8004e6e:	4b05      	ldr	r3, [pc, #20]	; (8004e84 <std+0x38>)
 8004e70:	6224      	str	r4, [r4, #32]
 8004e72:	6263      	str	r3, [r4, #36]	; 0x24
 8004e74:	4b04      	ldr	r3, [pc, #16]	; (8004e88 <std+0x3c>)
 8004e76:	62a3      	str	r3, [r4, #40]	; 0x28
 8004e78:	4b04      	ldr	r3, [pc, #16]	; (8004e8c <std+0x40>)
 8004e7a:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004e7c:	4b04      	ldr	r3, [pc, #16]	; (8004e90 <std+0x44>)
 8004e7e:	6323      	str	r3, [r4, #48]	; 0x30
 8004e80:	bd10      	pop	{r4, pc}
 8004e82:	bf00      	nop
 8004e84:	08005ee1 	.word	0x08005ee1
 8004e88:	08005f03 	.word	0x08005f03
 8004e8c:	08005f3b 	.word	0x08005f3b
 8004e90:	08005f5f 	.word	0x08005f5f

08004e94 <_cleanup_r>:
 8004e94:	4901      	ldr	r1, [pc, #4]	; (8004e9c <_cleanup_r+0x8>)
 8004e96:	f000 b8af 	b.w	8004ff8 <_fwalk_reent>
 8004e9a:	bf00      	nop
 8004e9c:	0800626d 	.word	0x0800626d

08004ea0 <__sfmoreglue>:
 8004ea0:	2268      	movs	r2, #104	; 0x68
 8004ea2:	b570      	push	{r4, r5, r6, lr}
 8004ea4:	1e4d      	subs	r5, r1, #1
 8004ea6:	4355      	muls	r5, r2
 8004ea8:	460e      	mov	r6, r1
 8004eaa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004eae:	f000 fcdf 	bl	8005870 <_malloc_r>
 8004eb2:	4604      	mov	r4, r0
 8004eb4:	b140      	cbz	r0, 8004ec8 <__sfmoreglue+0x28>
 8004eb6:	2100      	movs	r1, #0
 8004eb8:	e9c0 1600 	strd	r1, r6, [r0]
 8004ebc:	300c      	adds	r0, #12
 8004ebe:	60a0      	str	r0, [r4, #8]
 8004ec0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004ec4:	f7fe fc92 	bl	80037ec <memset>
 8004ec8:	4620      	mov	r0, r4
 8004eca:	bd70      	pop	{r4, r5, r6, pc}

08004ecc <__sfp_lock_acquire>:
 8004ecc:	4801      	ldr	r0, [pc, #4]	; (8004ed4 <__sfp_lock_acquire+0x8>)
 8004ece:	f000 b8b8 	b.w	8005042 <__retarget_lock_acquire_recursive>
 8004ed2:	bf00      	nop
 8004ed4:	20000eb5 	.word	0x20000eb5

08004ed8 <__sfp_lock_release>:
 8004ed8:	4801      	ldr	r0, [pc, #4]	; (8004ee0 <__sfp_lock_release+0x8>)
 8004eda:	f000 b8b3 	b.w	8005044 <__retarget_lock_release_recursive>
 8004ede:	bf00      	nop
 8004ee0:	20000eb5 	.word	0x20000eb5

08004ee4 <__sinit_lock_acquire>:
 8004ee4:	4801      	ldr	r0, [pc, #4]	; (8004eec <__sinit_lock_acquire+0x8>)
 8004ee6:	f000 b8ac 	b.w	8005042 <__retarget_lock_acquire_recursive>
 8004eea:	bf00      	nop
 8004eec:	20000eb6 	.word	0x20000eb6

08004ef0 <__sinit_lock_release>:
 8004ef0:	4801      	ldr	r0, [pc, #4]	; (8004ef8 <__sinit_lock_release+0x8>)
 8004ef2:	f000 b8a7 	b.w	8005044 <__retarget_lock_release_recursive>
 8004ef6:	bf00      	nop
 8004ef8:	20000eb6 	.word	0x20000eb6

08004efc <__sinit>:
 8004efc:	b510      	push	{r4, lr}
 8004efe:	4604      	mov	r4, r0
 8004f00:	f7ff fff0 	bl	8004ee4 <__sinit_lock_acquire>
 8004f04:	69a3      	ldr	r3, [r4, #24]
 8004f06:	b11b      	cbz	r3, 8004f10 <__sinit+0x14>
 8004f08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004f0c:	f7ff bff0 	b.w	8004ef0 <__sinit_lock_release>
 8004f10:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004f14:	6523      	str	r3, [r4, #80]	; 0x50
 8004f16:	4b13      	ldr	r3, [pc, #76]	; (8004f64 <__sinit+0x68>)
 8004f18:	4a13      	ldr	r2, [pc, #76]	; (8004f68 <__sinit+0x6c>)
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	62a2      	str	r2, [r4, #40]	; 0x28
 8004f1e:	42a3      	cmp	r3, r4
 8004f20:	bf08      	it	eq
 8004f22:	2301      	moveq	r3, #1
 8004f24:	4620      	mov	r0, r4
 8004f26:	bf08      	it	eq
 8004f28:	61a3      	streq	r3, [r4, #24]
 8004f2a:	f000 f81f 	bl	8004f6c <__sfp>
 8004f2e:	6060      	str	r0, [r4, #4]
 8004f30:	4620      	mov	r0, r4
 8004f32:	f000 f81b 	bl	8004f6c <__sfp>
 8004f36:	60a0      	str	r0, [r4, #8]
 8004f38:	4620      	mov	r0, r4
 8004f3a:	f000 f817 	bl	8004f6c <__sfp>
 8004f3e:	2200      	movs	r2, #0
 8004f40:	2104      	movs	r1, #4
 8004f42:	60e0      	str	r0, [r4, #12]
 8004f44:	6860      	ldr	r0, [r4, #4]
 8004f46:	f7ff ff81 	bl	8004e4c <std>
 8004f4a:	2201      	movs	r2, #1
 8004f4c:	2109      	movs	r1, #9
 8004f4e:	68a0      	ldr	r0, [r4, #8]
 8004f50:	f7ff ff7c 	bl	8004e4c <std>
 8004f54:	2202      	movs	r2, #2
 8004f56:	2112      	movs	r1, #18
 8004f58:	68e0      	ldr	r0, [r4, #12]
 8004f5a:	f7ff ff77 	bl	8004e4c <std>
 8004f5e:	2301      	movs	r3, #1
 8004f60:	61a3      	str	r3, [r4, #24]
 8004f62:	e7d1      	b.n	8004f08 <__sinit+0xc>
 8004f64:	08006b7c 	.word	0x08006b7c
 8004f68:	08004e95 	.word	0x08004e95

08004f6c <__sfp>:
 8004f6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f6e:	4607      	mov	r7, r0
 8004f70:	f7ff ffac 	bl	8004ecc <__sfp_lock_acquire>
 8004f74:	4b1e      	ldr	r3, [pc, #120]	; (8004ff0 <__sfp+0x84>)
 8004f76:	681e      	ldr	r6, [r3, #0]
 8004f78:	69b3      	ldr	r3, [r6, #24]
 8004f7a:	b913      	cbnz	r3, 8004f82 <__sfp+0x16>
 8004f7c:	4630      	mov	r0, r6
 8004f7e:	f7ff ffbd 	bl	8004efc <__sinit>
 8004f82:	3648      	adds	r6, #72	; 0x48
 8004f84:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004f88:	3b01      	subs	r3, #1
 8004f8a:	d503      	bpl.n	8004f94 <__sfp+0x28>
 8004f8c:	6833      	ldr	r3, [r6, #0]
 8004f8e:	b30b      	cbz	r3, 8004fd4 <__sfp+0x68>
 8004f90:	6836      	ldr	r6, [r6, #0]
 8004f92:	e7f7      	b.n	8004f84 <__sfp+0x18>
 8004f94:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004f98:	b9d5      	cbnz	r5, 8004fd0 <__sfp+0x64>
 8004f9a:	4b16      	ldr	r3, [pc, #88]	; (8004ff4 <__sfp+0x88>)
 8004f9c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004fa0:	60e3      	str	r3, [r4, #12]
 8004fa2:	6665      	str	r5, [r4, #100]	; 0x64
 8004fa4:	f000 f84c 	bl	8005040 <__retarget_lock_init_recursive>
 8004fa8:	f7ff ff96 	bl	8004ed8 <__sfp_lock_release>
 8004fac:	2208      	movs	r2, #8
 8004fae:	4629      	mov	r1, r5
 8004fb0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004fb4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004fb8:	6025      	str	r5, [r4, #0]
 8004fba:	61a5      	str	r5, [r4, #24]
 8004fbc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004fc0:	f7fe fc14 	bl	80037ec <memset>
 8004fc4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004fc8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004fcc:	4620      	mov	r0, r4
 8004fce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004fd0:	3468      	adds	r4, #104	; 0x68
 8004fd2:	e7d9      	b.n	8004f88 <__sfp+0x1c>
 8004fd4:	2104      	movs	r1, #4
 8004fd6:	4638      	mov	r0, r7
 8004fd8:	f7ff ff62 	bl	8004ea0 <__sfmoreglue>
 8004fdc:	4604      	mov	r4, r0
 8004fde:	6030      	str	r0, [r6, #0]
 8004fe0:	2800      	cmp	r0, #0
 8004fe2:	d1d5      	bne.n	8004f90 <__sfp+0x24>
 8004fe4:	f7ff ff78 	bl	8004ed8 <__sfp_lock_release>
 8004fe8:	230c      	movs	r3, #12
 8004fea:	603b      	str	r3, [r7, #0]
 8004fec:	e7ee      	b.n	8004fcc <__sfp+0x60>
 8004fee:	bf00      	nop
 8004ff0:	08006b7c 	.word	0x08006b7c
 8004ff4:	ffff0001 	.word	0xffff0001

08004ff8 <_fwalk_reent>:
 8004ff8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004ffc:	4606      	mov	r6, r0
 8004ffe:	4688      	mov	r8, r1
 8005000:	2700      	movs	r7, #0
 8005002:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005006:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800500a:	f1b9 0901 	subs.w	r9, r9, #1
 800500e:	d505      	bpl.n	800501c <_fwalk_reent+0x24>
 8005010:	6824      	ldr	r4, [r4, #0]
 8005012:	2c00      	cmp	r4, #0
 8005014:	d1f7      	bne.n	8005006 <_fwalk_reent+0xe>
 8005016:	4638      	mov	r0, r7
 8005018:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800501c:	89ab      	ldrh	r3, [r5, #12]
 800501e:	2b01      	cmp	r3, #1
 8005020:	d907      	bls.n	8005032 <_fwalk_reent+0x3a>
 8005022:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005026:	3301      	adds	r3, #1
 8005028:	d003      	beq.n	8005032 <_fwalk_reent+0x3a>
 800502a:	4629      	mov	r1, r5
 800502c:	4630      	mov	r0, r6
 800502e:	47c0      	blx	r8
 8005030:	4307      	orrs	r7, r0
 8005032:	3568      	adds	r5, #104	; 0x68
 8005034:	e7e9      	b.n	800500a <_fwalk_reent+0x12>
	...

08005038 <_localeconv_r>:
 8005038:	4800      	ldr	r0, [pc, #0]	; (800503c <_localeconv_r+0x4>)
 800503a:	4770      	bx	lr
 800503c:	20000168 	.word	0x20000168

08005040 <__retarget_lock_init_recursive>:
 8005040:	4770      	bx	lr

08005042 <__retarget_lock_acquire_recursive>:
 8005042:	4770      	bx	lr

08005044 <__retarget_lock_release_recursive>:
 8005044:	4770      	bx	lr
	...

08005048 <malloc>:
 8005048:	4b02      	ldr	r3, [pc, #8]	; (8005054 <malloc+0xc>)
 800504a:	4601      	mov	r1, r0
 800504c:	6818      	ldr	r0, [r3, #0]
 800504e:	f000 bc0f 	b.w	8005870 <_malloc_r>
 8005052:	bf00      	nop
 8005054:	20000014 	.word	0x20000014

08005058 <memchr>:
 8005058:	4603      	mov	r3, r0
 800505a:	b510      	push	{r4, lr}
 800505c:	b2c9      	uxtb	r1, r1
 800505e:	4402      	add	r2, r0
 8005060:	4293      	cmp	r3, r2
 8005062:	4618      	mov	r0, r3
 8005064:	d101      	bne.n	800506a <memchr+0x12>
 8005066:	2000      	movs	r0, #0
 8005068:	e003      	b.n	8005072 <memchr+0x1a>
 800506a:	7804      	ldrb	r4, [r0, #0]
 800506c:	3301      	adds	r3, #1
 800506e:	428c      	cmp	r4, r1
 8005070:	d1f6      	bne.n	8005060 <memchr+0x8>
 8005072:	bd10      	pop	{r4, pc}

08005074 <_Balloc>:
 8005074:	b570      	push	{r4, r5, r6, lr}
 8005076:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005078:	4604      	mov	r4, r0
 800507a:	460d      	mov	r5, r1
 800507c:	b976      	cbnz	r6, 800509c <_Balloc+0x28>
 800507e:	2010      	movs	r0, #16
 8005080:	f7ff ffe2 	bl	8005048 <malloc>
 8005084:	4602      	mov	r2, r0
 8005086:	6260      	str	r0, [r4, #36]	; 0x24
 8005088:	b920      	cbnz	r0, 8005094 <_Balloc+0x20>
 800508a:	2166      	movs	r1, #102	; 0x66
 800508c:	4b17      	ldr	r3, [pc, #92]	; (80050ec <_Balloc+0x78>)
 800508e:	4818      	ldr	r0, [pc, #96]	; (80050f0 <_Balloc+0x7c>)
 8005090:	f001 f83c 	bl	800610c <__assert_func>
 8005094:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005098:	6006      	str	r6, [r0, #0]
 800509a:	60c6      	str	r6, [r0, #12]
 800509c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800509e:	68f3      	ldr	r3, [r6, #12]
 80050a0:	b183      	cbz	r3, 80050c4 <_Balloc+0x50>
 80050a2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80050a4:	68db      	ldr	r3, [r3, #12]
 80050a6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80050aa:	b9b8      	cbnz	r0, 80050dc <_Balloc+0x68>
 80050ac:	2101      	movs	r1, #1
 80050ae:	fa01 f605 	lsl.w	r6, r1, r5
 80050b2:	1d72      	adds	r2, r6, #5
 80050b4:	4620      	mov	r0, r4
 80050b6:	0092      	lsls	r2, r2, #2
 80050b8:	f000 fb5e 	bl	8005778 <_calloc_r>
 80050bc:	b160      	cbz	r0, 80050d8 <_Balloc+0x64>
 80050be:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80050c2:	e00e      	b.n	80050e2 <_Balloc+0x6e>
 80050c4:	2221      	movs	r2, #33	; 0x21
 80050c6:	2104      	movs	r1, #4
 80050c8:	4620      	mov	r0, r4
 80050ca:	f000 fb55 	bl	8005778 <_calloc_r>
 80050ce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80050d0:	60f0      	str	r0, [r6, #12]
 80050d2:	68db      	ldr	r3, [r3, #12]
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d1e4      	bne.n	80050a2 <_Balloc+0x2e>
 80050d8:	2000      	movs	r0, #0
 80050da:	bd70      	pop	{r4, r5, r6, pc}
 80050dc:	6802      	ldr	r2, [r0, #0]
 80050de:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80050e2:	2300      	movs	r3, #0
 80050e4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80050e8:	e7f7      	b.n	80050da <_Balloc+0x66>
 80050ea:	bf00      	nop
 80050ec:	08006bc1 	.word	0x08006bc1
 80050f0:	08006ca4 	.word	0x08006ca4

080050f4 <_Bfree>:
 80050f4:	b570      	push	{r4, r5, r6, lr}
 80050f6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80050f8:	4605      	mov	r5, r0
 80050fa:	460c      	mov	r4, r1
 80050fc:	b976      	cbnz	r6, 800511c <_Bfree+0x28>
 80050fe:	2010      	movs	r0, #16
 8005100:	f7ff ffa2 	bl	8005048 <malloc>
 8005104:	4602      	mov	r2, r0
 8005106:	6268      	str	r0, [r5, #36]	; 0x24
 8005108:	b920      	cbnz	r0, 8005114 <_Bfree+0x20>
 800510a:	218a      	movs	r1, #138	; 0x8a
 800510c:	4b08      	ldr	r3, [pc, #32]	; (8005130 <_Bfree+0x3c>)
 800510e:	4809      	ldr	r0, [pc, #36]	; (8005134 <_Bfree+0x40>)
 8005110:	f000 fffc 	bl	800610c <__assert_func>
 8005114:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005118:	6006      	str	r6, [r0, #0]
 800511a:	60c6      	str	r6, [r0, #12]
 800511c:	b13c      	cbz	r4, 800512e <_Bfree+0x3a>
 800511e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005120:	6862      	ldr	r2, [r4, #4]
 8005122:	68db      	ldr	r3, [r3, #12]
 8005124:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005128:	6021      	str	r1, [r4, #0]
 800512a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800512e:	bd70      	pop	{r4, r5, r6, pc}
 8005130:	08006bc1 	.word	0x08006bc1
 8005134:	08006ca4 	.word	0x08006ca4

08005138 <__multadd>:
 8005138:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800513c:	4607      	mov	r7, r0
 800513e:	460c      	mov	r4, r1
 8005140:	461e      	mov	r6, r3
 8005142:	2000      	movs	r0, #0
 8005144:	690d      	ldr	r5, [r1, #16]
 8005146:	f101 0c14 	add.w	ip, r1, #20
 800514a:	f8dc 3000 	ldr.w	r3, [ip]
 800514e:	3001      	adds	r0, #1
 8005150:	b299      	uxth	r1, r3
 8005152:	fb02 6101 	mla	r1, r2, r1, r6
 8005156:	0c1e      	lsrs	r6, r3, #16
 8005158:	0c0b      	lsrs	r3, r1, #16
 800515a:	fb02 3306 	mla	r3, r2, r6, r3
 800515e:	b289      	uxth	r1, r1
 8005160:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005164:	4285      	cmp	r5, r0
 8005166:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800516a:	f84c 1b04 	str.w	r1, [ip], #4
 800516e:	dcec      	bgt.n	800514a <__multadd+0x12>
 8005170:	b30e      	cbz	r6, 80051b6 <__multadd+0x7e>
 8005172:	68a3      	ldr	r3, [r4, #8]
 8005174:	42ab      	cmp	r3, r5
 8005176:	dc19      	bgt.n	80051ac <__multadd+0x74>
 8005178:	6861      	ldr	r1, [r4, #4]
 800517a:	4638      	mov	r0, r7
 800517c:	3101      	adds	r1, #1
 800517e:	f7ff ff79 	bl	8005074 <_Balloc>
 8005182:	4680      	mov	r8, r0
 8005184:	b928      	cbnz	r0, 8005192 <__multadd+0x5a>
 8005186:	4602      	mov	r2, r0
 8005188:	21b5      	movs	r1, #181	; 0xb5
 800518a:	4b0c      	ldr	r3, [pc, #48]	; (80051bc <__multadd+0x84>)
 800518c:	480c      	ldr	r0, [pc, #48]	; (80051c0 <__multadd+0x88>)
 800518e:	f000 ffbd 	bl	800610c <__assert_func>
 8005192:	6922      	ldr	r2, [r4, #16]
 8005194:	f104 010c 	add.w	r1, r4, #12
 8005198:	3202      	adds	r2, #2
 800519a:	0092      	lsls	r2, r2, #2
 800519c:	300c      	adds	r0, #12
 800519e:	f7fe fb17 	bl	80037d0 <memcpy>
 80051a2:	4621      	mov	r1, r4
 80051a4:	4638      	mov	r0, r7
 80051a6:	f7ff ffa5 	bl	80050f4 <_Bfree>
 80051aa:	4644      	mov	r4, r8
 80051ac:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80051b0:	3501      	adds	r5, #1
 80051b2:	615e      	str	r6, [r3, #20]
 80051b4:	6125      	str	r5, [r4, #16]
 80051b6:	4620      	mov	r0, r4
 80051b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80051bc:	08006c33 	.word	0x08006c33
 80051c0:	08006ca4 	.word	0x08006ca4

080051c4 <__hi0bits>:
 80051c4:	0c02      	lsrs	r2, r0, #16
 80051c6:	0412      	lsls	r2, r2, #16
 80051c8:	4603      	mov	r3, r0
 80051ca:	b9ca      	cbnz	r2, 8005200 <__hi0bits+0x3c>
 80051cc:	0403      	lsls	r3, r0, #16
 80051ce:	2010      	movs	r0, #16
 80051d0:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80051d4:	bf04      	itt	eq
 80051d6:	021b      	lsleq	r3, r3, #8
 80051d8:	3008      	addeq	r0, #8
 80051da:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80051de:	bf04      	itt	eq
 80051e0:	011b      	lsleq	r3, r3, #4
 80051e2:	3004      	addeq	r0, #4
 80051e4:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80051e8:	bf04      	itt	eq
 80051ea:	009b      	lsleq	r3, r3, #2
 80051ec:	3002      	addeq	r0, #2
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	db05      	blt.n	80051fe <__hi0bits+0x3a>
 80051f2:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 80051f6:	f100 0001 	add.w	r0, r0, #1
 80051fa:	bf08      	it	eq
 80051fc:	2020      	moveq	r0, #32
 80051fe:	4770      	bx	lr
 8005200:	2000      	movs	r0, #0
 8005202:	e7e5      	b.n	80051d0 <__hi0bits+0xc>

08005204 <__lo0bits>:
 8005204:	6803      	ldr	r3, [r0, #0]
 8005206:	4602      	mov	r2, r0
 8005208:	f013 0007 	ands.w	r0, r3, #7
 800520c:	d00b      	beq.n	8005226 <__lo0bits+0x22>
 800520e:	07d9      	lsls	r1, r3, #31
 8005210:	d421      	bmi.n	8005256 <__lo0bits+0x52>
 8005212:	0798      	lsls	r0, r3, #30
 8005214:	bf49      	itett	mi
 8005216:	085b      	lsrmi	r3, r3, #1
 8005218:	089b      	lsrpl	r3, r3, #2
 800521a:	2001      	movmi	r0, #1
 800521c:	6013      	strmi	r3, [r2, #0]
 800521e:	bf5c      	itt	pl
 8005220:	2002      	movpl	r0, #2
 8005222:	6013      	strpl	r3, [r2, #0]
 8005224:	4770      	bx	lr
 8005226:	b299      	uxth	r1, r3
 8005228:	b909      	cbnz	r1, 800522e <__lo0bits+0x2a>
 800522a:	2010      	movs	r0, #16
 800522c:	0c1b      	lsrs	r3, r3, #16
 800522e:	b2d9      	uxtb	r1, r3
 8005230:	b909      	cbnz	r1, 8005236 <__lo0bits+0x32>
 8005232:	3008      	adds	r0, #8
 8005234:	0a1b      	lsrs	r3, r3, #8
 8005236:	0719      	lsls	r1, r3, #28
 8005238:	bf04      	itt	eq
 800523a:	091b      	lsreq	r3, r3, #4
 800523c:	3004      	addeq	r0, #4
 800523e:	0799      	lsls	r1, r3, #30
 8005240:	bf04      	itt	eq
 8005242:	089b      	lsreq	r3, r3, #2
 8005244:	3002      	addeq	r0, #2
 8005246:	07d9      	lsls	r1, r3, #31
 8005248:	d403      	bmi.n	8005252 <__lo0bits+0x4e>
 800524a:	085b      	lsrs	r3, r3, #1
 800524c:	f100 0001 	add.w	r0, r0, #1
 8005250:	d003      	beq.n	800525a <__lo0bits+0x56>
 8005252:	6013      	str	r3, [r2, #0]
 8005254:	4770      	bx	lr
 8005256:	2000      	movs	r0, #0
 8005258:	4770      	bx	lr
 800525a:	2020      	movs	r0, #32
 800525c:	4770      	bx	lr
	...

08005260 <__i2b>:
 8005260:	b510      	push	{r4, lr}
 8005262:	460c      	mov	r4, r1
 8005264:	2101      	movs	r1, #1
 8005266:	f7ff ff05 	bl	8005074 <_Balloc>
 800526a:	4602      	mov	r2, r0
 800526c:	b928      	cbnz	r0, 800527a <__i2b+0x1a>
 800526e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8005272:	4b04      	ldr	r3, [pc, #16]	; (8005284 <__i2b+0x24>)
 8005274:	4804      	ldr	r0, [pc, #16]	; (8005288 <__i2b+0x28>)
 8005276:	f000 ff49 	bl	800610c <__assert_func>
 800527a:	2301      	movs	r3, #1
 800527c:	6144      	str	r4, [r0, #20]
 800527e:	6103      	str	r3, [r0, #16]
 8005280:	bd10      	pop	{r4, pc}
 8005282:	bf00      	nop
 8005284:	08006c33 	.word	0x08006c33
 8005288:	08006ca4 	.word	0x08006ca4

0800528c <__multiply>:
 800528c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005290:	4691      	mov	r9, r2
 8005292:	690a      	ldr	r2, [r1, #16]
 8005294:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8005298:	460c      	mov	r4, r1
 800529a:	429a      	cmp	r2, r3
 800529c:	bfbe      	ittt	lt
 800529e:	460b      	movlt	r3, r1
 80052a0:	464c      	movlt	r4, r9
 80052a2:	4699      	movlt	r9, r3
 80052a4:	6927      	ldr	r7, [r4, #16]
 80052a6:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80052aa:	68a3      	ldr	r3, [r4, #8]
 80052ac:	6861      	ldr	r1, [r4, #4]
 80052ae:	eb07 060a 	add.w	r6, r7, sl
 80052b2:	42b3      	cmp	r3, r6
 80052b4:	b085      	sub	sp, #20
 80052b6:	bfb8      	it	lt
 80052b8:	3101      	addlt	r1, #1
 80052ba:	f7ff fedb 	bl	8005074 <_Balloc>
 80052be:	b930      	cbnz	r0, 80052ce <__multiply+0x42>
 80052c0:	4602      	mov	r2, r0
 80052c2:	f240 115d 	movw	r1, #349	; 0x15d
 80052c6:	4b43      	ldr	r3, [pc, #268]	; (80053d4 <__multiply+0x148>)
 80052c8:	4843      	ldr	r0, [pc, #268]	; (80053d8 <__multiply+0x14c>)
 80052ca:	f000 ff1f 	bl	800610c <__assert_func>
 80052ce:	f100 0514 	add.w	r5, r0, #20
 80052d2:	462b      	mov	r3, r5
 80052d4:	2200      	movs	r2, #0
 80052d6:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80052da:	4543      	cmp	r3, r8
 80052dc:	d321      	bcc.n	8005322 <__multiply+0x96>
 80052de:	f104 0314 	add.w	r3, r4, #20
 80052e2:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80052e6:	f109 0314 	add.w	r3, r9, #20
 80052ea:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80052ee:	9202      	str	r2, [sp, #8]
 80052f0:	1b3a      	subs	r2, r7, r4
 80052f2:	3a15      	subs	r2, #21
 80052f4:	f022 0203 	bic.w	r2, r2, #3
 80052f8:	3204      	adds	r2, #4
 80052fa:	f104 0115 	add.w	r1, r4, #21
 80052fe:	428f      	cmp	r7, r1
 8005300:	bf38      	it	cc
 8005302:	2204      	movcc	r2, #4
 8005304:	9201      	str	r2, [sp, #4]
 8005306:	9a02      	ldr	r2, [sp, #8]
 8005308:	9303      	str	r3, [sp, #12]
 800530a:	429a      	cmp	r2, r3
 800530c:	d80c      	bhi.n	8005328 <__multiply+0x9c>
 800530e:	2e00      	cmp	r6, #0
 8005310:	dd03      	ble.n	800531a <__multiply+0x8e>
 8005312:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005316:	2b00      	cmp	r3, #0
 8005318:	d059      	beq.n	80053ce <__multiply+0x142>
 800531a:	6106      	str	r6, [r0, #16]
 800531c:	b005      	add	sp, #20
 800531e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005322:	f843 2b04 	str.w	r2, [r3], #4
 8005326:	e7d8      	b.n	80052da <__multiply+0x4e>
 8005328:	f8b3 a000 	ldrh.w	sl, [r3]
 800532c:	f1ba 0f00 	cmp.w	sl, #0
 8005330:	d023      	beq.n	800537a <__multiply+0xee>
 8005332:	46a9      	mov	r9, r5
 8005334:	f04f 0c00 	mov.w	ip, #0
 8005338:	f104 0e14 	add.w	lr, r4, #20
 800533c:	f85e 2b04 	ldr.w	r2, [lr], #4
 8005340:	f8d9 1000 	ldr.w	r1, [r9]
 8005344:	fa1f fb82 	uxth.w	fp, r2
 8005348:	b289      	uxth	r1, r1
 800534a:	fb0a 110b 	mla	r1, sl, fp, r1
 800534e:	4461      	add	r1, ip
 8005350:	f8d9 c000 	ldr.w	ip, [r9]
 8005354:	0c12      	lsrs	r2, r2, #16
 8005356:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800535a:	fb0a c202 	mla	r2, sl, r2, ip
 800535e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8005362:	b289      	uxth	r1, r1
 8005364:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8005368:	4577      	cmp	r7, lr
 800536a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800536e:	f849 1b04 	str.w	r1, [r9], #4
 8005372:	d8e3      	bhi.n	800533c <__multiply+0xb0>
 8005374:	9a01      	ldr	r2, [sp, #4]
 8005376:	f845 c002 	str.w	ip, [r5, r2]
 800537a:	9a03      	ldr	r2, [sp, #12]
 800537c:	3304      	adds	r3, #4
 800537e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8005382:	f1b9 0f00 	cmp.w	r9, #0
 8005386:	d020      	beq.n	80053ca <__multiply+0x13e>
 8005388:	46ae      	mov	lr, r5
 800538a:	f04f 0a00 	mov.w	sl, #0
 800538e:	6829      	ldr	r1, [r5, #0]
 8005390:	f104 0c14 	add.w	ip, r4, #20
 8005394:	f8bc b000 	ldrh.w	fp, [ip]
 8005398:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800539c:	b289      	uxth	r1, r1
 800539e:	fb09 220b 	mla	r2, r9, fp, r2
 80053a2:	4492      	add	sl, r2
 80053a4:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80053a8:	f84e 1b04 	str.w	r1, [lr], #4
 80053ac:	f85c 2b04 	ldr.w	r2, [ip], #4
 80053b0:	f8be 1000 	ldrh.w	r1, [lr]
 80053b4:	0c12      	lsrs	r2, r2, #16
 80053b6:	fb09 1102 	mla	r1, r9, r2, r1
 80053ba:	4567      	cmp	r7, ip
 80053bc:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80053c0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80053c4:	d8e6      	bhi.n	8005394 <__multiply+0x108>
 80053c6:	9a01      	ldr	r2, [sp, #4]
 80053c8:	50a9      	str	r1, [r5, r2]
 80053ca:	3504      	adds	r5, #4
 80053cc:	e79b      	b.n	8005306 <__multiply+0x7a>
 80053ce:	3e01      	subs	r6, #1
 80053d0:	e79d      	b.n	800530e <__multiply+0x82>
 80053d2:	bf00      	nop
 80053d4:	08006c33 	.word	0x08006c33
 80053d8:	08006ca4 	.word	0x08006ca4

080053dc <__pow5mult>:
 80053dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80053e0:	4615      	mov	r5, r2
 80053e2:	f012 0203 	ands.w	r2, r2, #3
 80053e6:	4606      	mov	r6, r0
 80053e8:	460f      	mov	r7, r1
 80053ea:	d007      	beq.n	80053fc <__pow5mult+0x20>
 80053ec:	4c25      	ldr	r4, [pc, #148]	; (8005484 <__pow5mult+0xa8>)
 80053ee:	3a01      	subs	r2, #1
 80053f0:	2300      	movs	r3, #0
 80053f2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80053f6:	f7ff fe9f 	bl	8005138 <__multadd>
 80053fa:	4607      	mov	r7, r0
 80053fc:	10ad      	asrs	r5, r5, #2
 80053fe:	d03d      	beq.n	800547c <__pow5mult+0xa0>
 8005400:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8005402:	b97c      	cbnz	r4, 8005424 <__pow5mult+0x48>
 8005404:	2010      	movs	r0, #16
 8005406:	f7ff fe1f 	bl	8005048 <malloc>
 800540a:	4602      	mov	r2, r0
 800540c:	6270      	str	r0, [r6, #36]	; 0x24
 800540e:	b928      	cbnz	r0, 800541c <__pow5mult+0x40>
 8005410:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8005414:	4b1c      	ldr	r3, [pc, #112]	; (8005488 <__pow5mult+0xac>)
 8005416:	481d      	ldr	r0, [pc, #116]	; (800548c <__pow5mult+0xb0>)
 8005418:	f000 fe78 	bl	800610c <__assert_func>
 800541c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005420:	6004      	str	r4, [r0, #0]
 8005422:	60c4      	str	r4, [r0, #12]
 8005424:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8005428:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800542c:	b94c      	cbnz	r4, 8005442 <__pow5mult+0x66>
 800542e:	f240 2171 	movw	r1, #625	; 0x271
 8005432:	4630      	mov	r0, r6
 8005434:	f7ff ff14 	bl	8005260 <__i2b>
 8005438:	2300      	movs	r3, #0
 800543a:	4604      	mov	r4, r0
 800543c:	f8c8 0008 	str.w	r0, [r8, #8]
 8005440:	6003      	str	r3, [r0, #0]
 8005442:	f04f 0900 	mov.w	r9, #0
 8005446:	07eb      	lsls	r3, r5, #31
 8005448:	d50a      	bpl.n	8005460 <__pow5mult+0x84>
 800544a:	4639      	mov	r1, r7
 800544c:	4622      	mov	r2, r4
 800544e:	4630      	mov	r0, r6
 8005450:	f7ff ff1c 	bl	800528c <__multiply>
 8005454:	4680      	mov	r8, r0
 8005456:	4639      	mov	r1, r7
 8005458:	4630      	mov	r0, r6
 800545a:	f7ff fe4b 	bl	80050f4 <_Bfree>
 800545e:	4647      	mov	r7, r8
 8005460:	106d      	asrs	r5, r5, #1
 8005462:	d00b      	beq.n	800547c <__pow5mult+0xa0>
 8005464:	6820      	ldr	r0, [r4, #0]
 8005466:	b938      	cbnz	r0, 8005478 <__pow5mult+0x9c>
 8005468:	4622      	mov	r2, r4
 800546a:	4621      	mov	r1, r4
 800546c:	4630      	mov	r0, r6
 800546e:	f7ff ff0d 	bl	800528c <__multiply>
 8005472:	6020      	str	r0, [r4, #0]
 8005474:	f8c0 9000 	str.w	r9, [r0]
 8005478:	4604      	mov	r4, r0
 800547a:	e7e4      	b.n	8005446 <__pow5mult+0x6a>
 800547c:	4638      	mov	r0, r7
 800547e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005482:	bf00      	nop
 8005484:	08006df0 	.word	0x08006df0
 8005488:	08006bc1 	.word	0x08006bc1
 800548c:	08006ca4 	.word	0x08006ca4

08005490 <__lshift>:
 8005490:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005494:	460c      	mov	r4, r1
 8005496:	4607      	mov	r7, r0
 8005498:	4691      	mov	r9, r2
 800549a:	6923      	ldr	r3, [r4, #16]
 800549c:	6849      	ldr	r1, [r1, #4]
 800549e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80054a2:	68a3      	ldr	r3, [r4, #8]
 80054a4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80054a8:	f108 0601 	add.w	r6, r8, #1
 80054ac:	42b3      	cmp	r3, r6
 80054ae:	db0b      	blt.n	80054c8 <__lshift+0x38>
 80054b0:	4638      	mov	r0, r7
 80054b2:	f7ff fddf 	bl	8005074 <_Balloc>
 80054b6:	4605      	mov	r5, r0
 80054b8:	b948      	cbnz	r0, 80054ce <__lshift+0x3e>
 80054ba:	4602      	mov	r2, r0
 80054bc:	f240 11d9 	movw	r1, #473	; 0x1d9
 80054c0:	4b29      	ldr	r3, [pc, #164]	; (8005568 <__lshift+0xd8>)
 80054c2:	482a      	ldr	r0, [pc, #168]	; (800556c <__lshift+0xdc>)
 80054c4:	f000 fe22 	bl	800610c <__assert_func>
 80054c8:	3101      	adds	r1, #1
 80054ca:	005b      	lsls	r3, r3, #1
 80054cc:	e7ee      	b.n	80054ac <__lshift+0x1c>
 80054ce:	2300      	movs	r3, #0
 80054d0:	f100 0114 	add.w	r1, r0, #20
 80054d4:	f100 0210 	add.w	r2, r0, #16
 80054d8:	4618      	mov	r0, r3
 80054da:	4553      	cmp	r3, sl
 80054dc:	db37      	blt.n	800554e <__lshift+0xbe>
 80054de:	6920      	ldr	r0, [r4, #16]
 80054e0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80054e4:	f104 0314 	add.w	r3, r4, #20
 80054e8:	f019 091f 	ands.w	r9, r9, #31
 80054ec:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80054f0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80054f4:	d02f      	beq.n	8005556 <__lshift+0xc6>
 80054f6:	468a      	mov	sl, r1
 80054f8:	f04f 0c00 	mov.w	ip, #0
 80054fc:	f1c9 0e20 	rsb	lr, r9, #32
 8005500:	681a      	ldr	r2, [r3, #0]
 8005502:	fa02 f209 	lsl.w	r2, r2, r9
 8005506:	ea42 020c 	orr.w	r2, r2, ip
 800550a:	f84a 2b04 	str.w	r2, [sl], #4
 800550e:	f853 2b04 	ldr.w	r2, [r3], #4
 8005512:	4298      	cmp	r0, r3
 8005514:	fa22 fc0e 	lsr.w	ip, r2, lr
 8005518:	d8f2      	bhi.n	8005500 <__lshift+0x70>
 800551a:	1b03      	subs	r3, r0, r4
 800551c:	3b15      	subs	r3, #21
 800551e:	f023 0303 	bic.w	r3, r3, #3
 8005522:	3304      	adds	r3, #4
 8005524:	f104 0215 	add.w	r2, r4, #21
 8005528:	4290      	cmp	r0, r2
 800552a:	bf38      	it	cc
 800552c:	2304      	movcc	r3, #4
 800552e:	f841 c003 	str.w	ip, [r1, r3]
 8005532:	f1bc 0f00 	cmp.w	ip, #0
 8005536:	d001      	beq.n	800553c <__lshift+0xac>
 8005538:	f108 0602 	add.w	r6, r8, #2
 800553c:	3e01      	subs	r6, #1
 800553e:	4638      	mov	r0, r7
 8005540:	4621      	mov	r1, r4
 8005542:	612e      	str	r6, [r5, #16]
 8005544:	f7ff fdd6 	bl	80050f4 <_Bfree>
 8005548:	4628      	mov	r0, r5
 800554a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800554e:	f842 0f04 	str.w	r0, [r2, #4]!
 8005552:	3301      	adds	r3, #1
 8005554:	e7c1      	b.n	80054da <__lshift+0x4a>
 8005556:	3904      	subs	r1, #4
 8005558:	f853 2b04 	ldr.w	r2, [r3], #4
 800555c:	4298      	cmp	r0, r3
 800555e:	f841 2f04 	str.w	r2, [r1, #4]!
 8005562:	d8f9      	bhi.n	8005558 <__lshift+0xc8>
 8005564:	e7ea      	b.n	800553c <__lshift+0xac>
 8005566:	bf00      	nop
 8005568:	08006c33 	.word	0x08006c33
 800556c:	08006ca4 	.word	0x08006ca4

08005570 <__mcmp>:
 8005570:	4603      	mov	r3, r0
 8005572:	690a      	ldr	r2, [r1, #16]
 8005574:	6900      	ldr	r0, [r0, #16]
 8005576:	b530      	push	{r4, r5, lr}
 8005578:	1a80      	subs	r0, r0, r2
 800557a:	d10d      	bne.n	8005598 <__mcmp+0x28>
 800557c:	3314      	adds	r3, #20
 800557e:	3114      	adds	r1, #20
 8005580:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8005584:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8005588:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800558c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8005590:	4295      	cmp	r5, r2
 8005592:	d002      	beq.n	800559a <__mcmp+0x2a>
 8005594:	d304      	bcc.n	80055a0 <__mcmp+0x30>
 8005596:	2001      	movs	r0, #1
 8005598:	bd30      	pop	{r4, r5, pc}
 800559a:	42a3      	cmp	r3, r4
 800559c:	d3f4      	bcc.n	8005588 <__mcmp+0x18>
 800559e:	e7fb      	b.n	8005598 <__mcmp+0x28>
 80055a0:	f04f 30ff 	mov.w	r0, #4294967295
 80055a4:	e7f8      	b.n	8005598 <__mcmp+0x28>
	...

080055a8 <__mdiff>:
 80055a8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055ac:	460d      	mov	r5, r1
 80055ae:	4607      	mov	r7, r0
 80055b0:	4611      	mov	r1, r2
 80055b2:	4628      	mov	r0, r5
 80055b4:	4614      	mov	r4, r2
 80055b6:	f7ff ffdb 	bl	8005570 <__mcmp>
 80055ba:	1e06      	subs	r6, r0, #0
 80055bc:	d111      	bne.n	80055e2 <__mdiff+0x3a>
 80055be:	4631      	mov	r1, r6
 80055c0:	4638      	mov	r0, r7
 80055c2:	f7ff fd57 	bl	8005074 <_Balloc>
 80055c6:	4602      	mov	r2, r0
 80055c8:	b928      	cbnz	r0, 80055d6 <__mdiff+0x2e>
 80055ca:	f240 2132 	movw	r1, #562	; 0x232
 80055ce:	4b3a      	ldr	r3, [pc, #232]	; (80056b8 <__mdiff+0x110>)
 80055d0:	483a      	ldr	r0, [pc, #232]	; (80056bc <__mdiff+0x114>)
 80055d2:	f000 fd9b 	bl	800610c <__assert_func>
 80055d6:	2301      	movs	r3, #1
 80055d8:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80055dc:	4610      	mov	r0, r2
 80055de:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80055e2:	bfa4      	itt	ge
 80055e4:	4623      	movge	r3, r4
 80055e6:	462c      	movge	r4, r5
 80055e8:	4638      	mov	r0, r7
 80055ea:	6861      	ldr	r1, [r4, #4]
 80055ec:	bfa6      	itte	ge
 80055ee:	461d      	movge	r5, r3
 80055f0:	2600      	movge	r6, #0
 80055f2:	2601      	movlt	r6, #1
 80055f4:	f7ff fd3e 	bl	8005074 <_Balloc>
 80055f8:	4602      	mov	r2, r0
 80055fa:	b918      	cbnz	r0, 8005604 <__mdiff+0x5c>
 80055fc:	f44f 7110 	mov.w	r1, #576	; 0x240
 8005600:	4b2d      	ldr	r3, [pc, #180]	; (80056b8 <__mdiff+0x110>)
 8005602:	e7e5      	b.n	80055d0 <__mdiff+0x28>
 8005604:	f102 0814 	add.w	r8, r2, #20
 8005608:	46c2      	mov	sl, r8
 800560a:	f04f 0c00 	mov.w	ip, #0
 800560e:	6927      	ldr	r7, [r4, #16]
 8005610:	60c6      	str	r6, [r0, #12]
 8005612:	692e      	ldr	r6, [r5, #16]
 8005614:	f104 0014 	add.w	r0, r4, #20
 8005618:	f105 0914 	add.w	r9, r5, #20
 800561c:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8005620:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8005624:	3410      	adds	r4, #16
 8005626:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800562a:	f859 3b04 	ldr.w	r3, [r9], #4
 800562e:	fa1f f18b 	uxth.w	r1, fp
 8005632:	448c      	add	ip, r1
 8005634:	b299      	uxth	r1, r3
 8005636:	0c1b      	lsrs	r3, r3, #16
 8005638:	ebac 0101 	sub.w	r1, ip, r1
 800563c:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8005640:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8005644:	b289      	uxth	r1, r1
 8005646:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800564a:	454e      	cmp	r6, r9
 800564c:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8005650:	f84a 3b04 	str.w	r3, [sl], #4
 8005654:	d8e7      	bhi.n	8005626 <__mdiff+0x7e>
 8005656:	1b73      	subs	r3, r6, r5
 8005658:	3b15      	subs	r3, #21
 800565a:	f023 0303 	bic.w	r3, r3, #3
 800565e:	3515      	adds	r5, #21
 8005660:	3304      	adds	r3, #4
 8005662:	42ae      	cmp	r6, r5
 8005664:	bf38      	it	cc
 8005666:	2304      	movcc	r3, #4
 8005668:	4418      	add	r0, r3
 800566a:	4443      	add	r3, r8
 800566c:	461e      	mov	r6, r3
 800566e:	4605      	mov	r5, r0
 8005670:	4575      	cmp	r5, lr
 8005672:	d30e      	bcc.n	8005692 <__mdiff+0xea>
 8005674:	f10e 0103 	add.w	r1, lr, #3
 8005678:	1a09      	subs	r1, r1, r0
 800567a:	f021 0103 	bic.w	r1, r1, #3
 800567e:	3803      	subs	r0, #3
 8005680:	4586      	cmp	lr, r0
 8005682:	bf38      	it	cc
 8005684:	2100      	movcc	r1, #0
 8005686:	4419      	add	r1, r3
 8005688:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800568c:	b18b      	cbz	r3, 80056b2 <__mdiff+0x10a>
 800568e:	6117      	str	r7, [r2, #16]
 8005690:	e7a4      	b.n	80055dc <__mdiff+0x34>
 8005692:	f855 8b04 	ldr.w	r8, [r5], #4
 8005696:	fa1f f188 	uxth.w	r1, r8
 800569a:	4461      	add	r1, ip
 800569c:	140c      	asrs	r4, r1, #16
 800569e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80056a2:	b289      	uxth	r1, r1
 80056a4:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80056a8:	ea4f 4c24 	mov.w	ip, r4, asr #16
 80056ac:	f846 1b04 	str.w	r1, [r6], #4
 80056b0:	e7de      	b.n	8005670 <__mdiff+0xc8>
 80056b2:	3f01      	subs	r7, #1
 80056b4:	e7e8      	b.n	8005688 <__mdiff+0xe0>
 80056b6:	bf00      	nop
 80056b8:	08006c33 	.word	0x08006c33
 80056bc:	08006ca4 	.word	0x08006ca4

080056c0 <__d2b>:
 80056c0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80056c4:	2101      	movs	r1, #1
 80056c6:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 80056ca:	4690      	mov	r8, r2
 80056cc:	461d      	mov	r5, r3
 80056ce:	f7ff fcd1 	bl	8005074 <_Balloc>
 80056d2:	4604      	mov	r4, r0
 80056d4:	b930      	cbnz	r0, 80056e4 <__d2b+0x24>
 80056d6:	4602      	mov	r2, r0
 80056d8:	f240 310a 	movw	r1, #778	; 0x30a
 80056dc:	4b24      	ldr	r3, [pc, #144]	; (8005770 <__d2b+0xb0>)
 80056de:	4825      	ldr	r0, [pc, #148]	; (8005774 <__d2b+0xb4>)
 80056e0:	f000 fd14 	bl	800610c <__assert_func>
 80056e4:	f3c5 0313 	ubfx	r3, r5, #0, #20
 80056e8:	f3c5 550a 	ubfx	r5, r5, #20, #11
 80056ec:	bb2d      	cbnz	r5, 800573a <__d2b+0x7a>
 80056ee:	9301      	str	r3, [sp, #4]
 80056f0:	f1b8 0300 	subs.w	r3, r8, #0
 80056f4:	d026      	beq.n	8005744 <__d2b+0x84>
 80056f6:	4668      	mov	r0, sp
 80056f8:	9300      	str	r3, [sp, #0]
 80056fa:	f7ff fd83 	bl	8005204 <__lo0bits>
 80056fe:	9900      	ldr	r1, [sp, #0]
 8005700:	b1f0      	cbz	r0, 8005740 <__d2b+0x80>
 8005702:	9a01      	ldr	r2, [sp, #4]
 8005704:	f1c0 0320 	rsb	r3, r0, #32
 8005708:	fa02 f303 	lsl.w	r3, r2, r3
 800570c:	430b      	orrs	r3, r1
 800570e:	40c2      	lsrs	r2, r0
 8005710:	6163      	str	r3, [r4, #20]
 8005712:	9201      	str	r2, [sp, #4]
 8005714:	9b01      	ldr	r3, [sp, #4]
 8005716:	2b00      	cmp	r3, #0
 8005718:	bf14      	ite	ne
 800571a:	2102      	movne	r1, #2
 800571c:	2101      	moveq	r1, #1
 800571e:	61a3      	str	r3, [r4, #24]
 8005720:	6121      	str	r1, [r4, #16]
 8005722:	b1c5      	cbz	r5, 8005756 <__d2b+0x96>
 8005724:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8005728:	4405      	add	r5, r0
 800572a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800572e:	603d      	str	r5, [r7, #0]
 8005730:	6030      	str	r0, [r6, #0]
 8005732:	4620      	mov	r0, r4
 8005734:	b002      	add	sp, #8
 8005736:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800573a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800573e:	e7d6      	b.n	80056ee <__d2b+0x2e>
 8005740:	6161      	str	r1, [r4, #20]
 8005742:	e7e7      	b.n	8005714 <__d2b+0x54>
 8005744:	a801      	add	r0, sp, #4
 8005746:	f7ff fd5d 	bl	8005204 <__lo0bits>
 800574a:	2101      	movs	r1, #1
 800574c:	9b01      	ldr	r3, [sp, #4]
 800574e:	6121      	str	r1, [r4, #16]
 8005750:	6163      	str	r3, [r4, #20]
 8005752:	3020      	adds	r0, #32
 8005754:	e7e5      	b.n	8005722 <__d2b+0x62>
 8005756:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800575a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800575e:	6038      	str	r0, [r7, #0]
 8005760:	6918      	ldr	r0, [r3, #16]
 8005762:	f7ff fd2f 	bl	80051c4 <__hi0bits>
 8005766:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800576a:	6031      	str	r1, [r6, #0]
 800576c:	e7e1      	b.n	8005732 <__d2b+0x72>
 800576e:	bf00      	nop
 8005770:	08006c33 	.word	0x08006c33
 8005774:	08006ca4 	.word	0x08006ca4

08005778 <_calloc_r>:
 8005778:	b570      	push	{r4, r5, r6, lr}
 800577a:	fba1 5402 	umull	r5, r4, r1, r2
 800577e:	b934      	cbnz	r4, 800578e <_calloc_r+0x16>
 8005780:	4629      	mov	r1, r5
 8005782:	f000 f875 	bl	8005870 <_malloc_r>
 8005786:	4606      	mov	r6, r0
 8005788:	b928      	cbnz	r0, 8005796 <_calloc_r+0x1e>
 800578a:	4630      	mov	r0, r6
 800578c:	bd70      	pop	{r4, r5, r6, pc}
 800578e:	220c      	movs	r2, #12
 8005790:	2600      	movs	r6, #0
 8005792:	6002      	str	r2, [r0, #0]
 8005794:	e7f9      	b.n	800578a <_calloc_r+0x12>
 8005796:	462a      	mov	r2, r5
 8005798:	4621      	mov	r1, r4
 800579a:	f7fe f827 	bl	80037ec <memset>
 800579e:	e7f4      	b.n	800578a <_calloc_r+0x12>

080057a0 <_free_r>:
 80057a0:	b538      	push	{r3, r4, r5, lr}
 80057a2:	4605      	mov	r5, r0
 80057a4:	2900      	cmp	r1, #0
 80057a6:	d040      	beq.n	800582a <_free_r+0x8a>
 80057a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80057ac:	1f0c      	subs	r4, r1, #4
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	bfb8      	it	lt
 80057b2:	18e4      	addlt	r4, r4, r3
 80057b4:	f000 fe4c 	bl	8006450 <__malloc_lock>
 80057b8:	4a1c      	ldr	r2, [pc, #112]	; (800582c <_free_r+0x8c>)
 80057ba:	6813      	ldr	r3, [r2, #0]
 80057bc:	b933      	cbnz	r3, 80057cc <_free_r+0x2c>
 80057be:	6063      	str	r3, [r4, #4]
 80057c0:	6014      	str	r4, [r2, #0]
 80057c2:	4628      	mov	r0, r5
 80057c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80057c8:	f000 be48 	b.w	800645c <__malloc_unlock>
 80057cc:	42a3      	cmp	r3, r4
 80057ce:	d908      	bls.n	80057e2 <_free_r+0x42>
 80057d0:	6820      	ldr	r0, [r4, #0]
 80057d2:	1821      	adds	r1, r4, r0
 80057d4:	428b      	cmp	r3, r1
 80057d6:	bf01      	itttt	eq
 80057d8:	6819      	ldreq	r1, [r3, #0]
 80057da:	685b      	ldreq	r3, [r3, #4]
 80057dc:	1809      	addeq	r1, r1, r0
 80057de:	6021      	streq	r1, [r4, #0]
 80057e0:	e7ed      	b.n	80057be <_free_r+0x1e>
 80057e2:	461a      	mov	r2, r3
 80057e4:	685b      	ldr	r3, [r3, #4]
 80057e6:	b10b      	cbz	r3, 80057ec <_free_r+0x4c>
 80057e8:	42a3      	cmp	r3, r4
 80057ea:	d9fa      	bls.n	80057e2 <_free_r+0x42>
 80057ec:	6811      	ldr	r1, [r2, #0]
 80057ee:	1850      	adds	r0, r2, r1
 80057f0:	42a0      	cmp	r0, r4
 80057f2:	d10b      	bne.n	800580c <_free_r+0x6c>
 80057f4:	6820      	ldr	r0, [r4, #0]
 80057f6:	4401      	add	r1, r0
 80057f8:	1850      	adds	r0, r2, r1
 80057fa:	4283      	cmp	r3, r0
 80057fc:	6011      	str	r1, [r2, #0]
 80057fe:	d1e0      	bne.n	80057c2 <_free_r+0x22>
 8005800:	6818      	ldr	r0, [r3, #0]
 8005802:	685b      	ldr	r3, [r3, #4]
 8005804:	4401      	add	r1, r0
 8005806:	6011      	str	r1, [r2, #0]
 8005808:	6053      	str	r3, [r2, #4]
 800580a:	e7da      	b.n	80057c2 <_free_r+0x22>
 800580c:	d902      	bls.n	8005814 <_free_r+0x74>
 800580e:	230c      	movs	r3, #12
 8005810:	602b      	str	r3, [r5, #0]
 8005812:	e7d6      	b.n	80057c2 <_free_r+0x22>
 8005814:	6820      	ldr	r0, [r4, #0]
 8005816:	1821      	adds	r1, r4, r0
 8005818:	428b      	cmp	r3, r1
 800581a:	bf01      	itttt	eq
 800581c:	6819      	ldreq	r1, [r3, #0]
 800581e:	685b      	ldreq	r3, [r3, #4]
 8005820:	1809      	addeq	r1, r1, r0
 8005822:	6021      	streq	r1, [r4, #0]
 8005824:	6063      	str	r3, [r4, #4]
 8005826:	6054      	str	r4, [r2, #4]
 8005828:	e7cb      	b.n	80057c2 <_free_r+0x22>
 800582a:	bd38      	pop	{r3, r4, r5, pc}
 800582c:	20000eb8 	.word	0x20000eb8

08005830 <sbrk_aligned>:
 8005830:	b570      	push	{r4, r5, r6, lr}
 8005832:	4e0e      	ldr	r6, [pc, #56]	; (800586c <sbrk_aligned+0x3c>)
 8005834:	460c      	mov	r4, r1
 8005836:	6831      	ldr	r1, [r6, #0]
 8005838:	4605      	mov	r5, r0
 800583a:	b911      	cbnz	r1, 8005842 <sbrk_aligned+0x12>
 800583c:	f000 fb40 	bl	8005ec0 <_sbrk_r>
 8005840:	6030      	str	r0, [r6, #0]
 8005842:	4621      	mov	r1, r4
 8005844:	4628      	mov	r0, r5
 8005846:	f000 fb3b 	bl	8005ec0 <_sbrk_r>
 800584a:	1c43      	adds	r3, r0, #1
 800584c:	d00a      	beq.n	8005864 <sbrk_aligned+0x34>
 800584e:	1cc4      	adds	r4, r0, #3
 8005850:	f024 0403 	bic.w	r4, r4, #3
 8005854:	42a0      	cmp	r0, r4
 8005856:	d007      	beq.n	8005868 <sbrk_aligned+0x38>
 8005858:	1a21      	subs	r1, r4, r0
 800585a:	4628      	mov	r0, r5
 800585c:	f000 fb30 	bl	8005ec0 <_sbrk_r>
 8005860:	3001      	adds	r0, #1
 8005862:	d101      	bne.n	8005868 <sbrk_aligned+0x38>
 8005864:	f04f 34ff 	mov.w	r4, #4294967295
 8005868:	4620      	mov	r0, r4
 800586a:	bd70      	pop	{r4, r5, r6, pc}
 800586c:	20000ebc 	.word	0x20000ebc

08005870 <_malloc_r>:
 8005870:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005874:	1ccd      	adds	r5, r1, #3
 8005876:	f025 0503 	bic.w	r5, r5, #3
 800587a:	3508      	adds	r5, #8
 800587c:	2d0c      	cmp	r5, #12
 800587e:	bf38      	it	cc
 8005880:	250c      	movcc	r5, #12
 8005882:	2d00      	cmp	r5, #0
 8005884:	4607      	mov	r7, r0
 8005886:	db01      	blt.n	800588c <_malloc_r+0x1c>
 8005888:	42a9      	cmp	r1, r5
 800588a:	d905      	bls.n	8005898 <_malloc_r+0x28>
 800588c:	230c      	movs	r3, #12
 800588e:	2600      	movs	r6, #0
 8005890:	603b      	str	r3, [r7, #0]
 8005892:	4630      	mov	r0, r6
 8005894:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005898:	4e2e      	ldr	r6, [pc, #184]	; (8005954 <_malloc_r+0xe4>)
 800589a:	f000 fdd9 	bl	8006450 <__malloc_lock>
 800589e:	6833      	ldr	r3, [r6, #0]
 80058a0:	461c      	mov	r4, r3
 80058a2:	bb34      	cbnz	r4, 80058f2 <_malloc_r+0x82>
 80058a4:	4629      	mov	r1, r5
 80058a6:	4638      	mov	r0, r7
 80058a8:	f7ff ffc2 	bl	8005830 <sbrk_aligned>
 80058ac:	1c43      	adds	r3, r0, #1
 80058ae:	4604      	mov	r4, r0
 80058b0:	d14d      	bne.n	800594e <_malloc_r+0xde>
 80058b2:	6834      	ldr	r4, [r6, #0]
 80058b4:	4626      	mov	r6, r4
 80058b6:	2e00      	cmp	r6, #0
 80058b8:	d140      	bne.n	800593c <_malloc_r+0xcc>
 80058ba:	6823      	ldr	r3, [r4, #0]
 80058bc:	4631      	mov	r1, r6
 80058be:	4638      	mov	r0, r7
 80058c0:	eb04 0803 	add.w	r8, r4, r3
 80058c4:	f000 fafc 	bl	8005ec0 <_sbrk_r>
 80058c8:	4580      	cmp	r8, r0
 80058ca:	d13a      	bne.n	8005942 <_malloc_r+0xd2>
 80058cc:	6821      	ldr	r1, [r4, #0]
 80058ce:	3503      	adds	r5, #3
 80058d0:	1a6d      	subs	r5, r5, r1
 80058d2:	f025 0503 	bic.w	r5, r5, #3
 80058d6:	3508      	adds	r5, #8
 80058d8:	2d0c      	cmp	r5, #12
 80058da:	bf38      	it	cc
 80058dc:	250c      	movcc	r5, #12
 80058de:	4638      	mov	r0, r7
 80058e0:	4629      	mov	r1, r5
 80058e2:	f7ff ffa5 	bl	8005830 <sbrk_aligned>
 80058e6:	3001      	adds	r0, #1
 80058e8:	d02b      	beq.n	8005942 <_malloc_r+0xd2>
 80058ea:	6823      	ldr	r3, [r4, #0]
 80058ec:	442b      	add	r3, r5
 80058ee:	6023      	str	r3, [r4, #0]
 80058f0:	e00e      	b.n	8005910 <_malloc_r+0xa0>
 80058f2:	6822      	ldr	r2, [r4, #0]
 80058f4:	1b52      	subs	r2, r2, r5
 80058f6:	d41e      	bmi.n	8005936 <_malloc_r+0xc6>
 80058f8:	2a0b      	cmp	r2, #11
 80058fa:	d916      	bls.n	800592a <_malloc_r+0xba>
 80058fc:	1961      	adds	r1, r4, r5
 80058fe:	42a3      	cmp	r3, r4
 8005900:	6025      	str	r5, [r4, #0]
 8005902:	bf18      	it	ne
 8005904:	6059      	strne	r1, [r3, #4]
 8005906:	6863      	ldr	r3, [r4, #4]
 8005908:	bf08      	it	eq
 800590a:	6031      	streq	r1, [r6, #0]
 800590c:	5162      	str	r2, [r4, r5]
 800590e:	604b      	str	r3, [r1, #4]
 8005910:	4638      	mov	r0, r7
 8005912:	f104 060b 	add.w	r6, r4, #11
 8005916:	f000 fda1 	bl	800645c <__malloc_unlock>
 800591a:	f026 0607 	bic.w	r6, r6, #7
 800591e:	1d23      	adds	r3, r4, #4
 8005920:	1af2      	subs	r2, r6, r3
 8005922:	d0b6      	beq.n	8005892 <_malloc_r+0x22>
 8005924:	1b9b      	subs	r3, r3, r6
 8005926:	50a3      	str	r3, [r4, r2]
 8005928:	e7b3      	b.n	8005892 <_malloc_r+0x22>
 800592a:	6862      	ldr	r2, [r4, #4]
 800592c:	42a3      	cmp	r3, r4
 800592e:	bf0c      	ite	eq
 8005930:	6032      	streq	r2, [r6, #0]
 8005932:	605a      	strne	r2, [r3, #4]
 8005934:	e7ec      	b.n	8005910 <_malloc_r+0xa0>
 8005936:	4623      	mov	r3, r4
 8005938:	6864      	ldr	r4, [r4, #4]
 800593a:	e7b2      	b.n	80058a2 <_malloc_r+0x32>
 800593c:	4634      	mov	r4, r6
 800593e:	6876      	ldr	r6, [r6, #4]
 8005940:	e7b9      	b.n	80058b6 <_malloc_r+0x46>
 8005942:	230c      	movs	r3, #12
 8005944:	4638      	mov	r0, r7
 8005946:	603b      	str	r3, [r7, #0]
 8005948:	f000 fd88 	bl	800645c <__malloc_unlock>
 800594c:	e7a1      	b.n	8005892 <_malloc_r+0x22>
 800594e:	6025      	str	r5, [r4, #0]
 8005950:	e7de      	b.n	8005910 <_malloc_r+0xa0>
 8005952:	bf00      	nop
 8005954:	20000eb8 	.word	0x20000eb8

08005958 <__ssputs_r>:
 8005958:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800595c:	688e      	ldr	r6, [r1, #8]
 800595e:	4682      	mov	sl, r0
 8005960:	429e      	cmp	r6, r3
 8005962:	460c      	mov	r4, r1
 8005964:	4690      	mov	r8, r2
 8005966:	461f      	mov	r7, r3
 8005968:	d838      	bhi.n	80059dc <__ssputs_r+0x84>
 800596a:	898a      	ldrh	r2, [r1, #12]
 800596c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005970:	d032      	beq.n	80059d8 <__ssputs_r+0x80>
 8005972:	6825      	ldr	r5, [r4, #0]
 8005974:	6909      	ldr	r1, [r1, #16]
 8005976:	3301      	adds	r3, #1
 8005978:	eba5 0901 	sub.w	r9, r5, r1
 800597c:	6965      	ldr	r5, [r4, #20]
 800597e:	444b      	add	r3, r9
 8005980:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005984:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005988:	106d      	asrs	r5, r5, #1
 800598a:	429d      	cmp	r5, r3
 800598c:	bf38      	it	cc
 800598e:	461d      	movcc	r5, r3
 8005990:	0553      	lsls	r3, r2, #21
 8005992:	d531      	bpl.n	80059f8 <__ssputs_r+0xa0>
 8005994:	4629      	mov	r1, r5
 8005996:	f7ff ff6b 	bl	8005870 <_malloc_r>
 800599a:	4606      	mov	r6, r0
 800599c:	b950      	cbnz	r0, 80059b4 <__ssputs_r+0x5c>
 800599e:	230c      	movs	r3, #12
 80059a0:	f04f 30ff 	mov.w	r0, #4294967295
 80059a4:	f8ca 3000 	str.w	r3, [sl]
 80059a8:	89a3      	ldrh	r3, [r4, #12]
 80059aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80059ae:	81a3      	strh	r3, [r4, #12]
 80059b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80059b4:	464a      	mov	r2, r9
 80059b6:	6921      	ldr	r1, [r4, #16]
 80059b8:	f7fd ff0a 	bl	80037d0 <memcpy>
 80059bc:	89a3      	ldrh	r3, [r4, #12]
 80059be:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80059c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80059c6:	81a3      	strh	r3, [r4, #12]
 80059c8:	6126      	str	r6, [r4, #16]
 80059ca:	444e      	add	r6, r9
 80059cc:	6026      	str	r6, [r4, #0]
 80059ce:	463e      	mov	r6, r7
 80059d0:	6165      	str	r5, [r4, #20]
 80059d2:	eba5 0509 	sub.w	r5, r5, r9
 80059d6:	60a5      	str	r5, [r4, #8]
 80059d8:	42be      	cmp	r6, r7
 80059da:	d900      	bls.n	80059de <__ssputs_r+0x86>
 80059dc:	463e      	mov	r6, r7
 80059de:	4632      	mov	r2, r6
 80059e0:	4641      	mov	r1, r8
 80059e2:	6820      	ldr	r0, [r4, #0]
 80059e4:	f000 fd1a 	bl	800641c <memmove>
 80059e8:	68a3      	ldr	r3, [r4, #8]
 80059ea:	2000      	movs	r0, #0
 80059ec:	1b9b      	subs	r3, r3, r6
 80059ee:	60a3      	str	r3, [r4, #8]
 80059f0:	6823      	ldr	r3, [r4, #0]
 80059f2:	4433      	add	r3, r6
 80059f4:	6023      	str	r3, [r4, #0]
 80059f6:	e7db      	b.n	80059b0 <__ssputs_r+0x58>
 80059f8:	462a      	mov	r2, r5
 80059fa:	f000 fd35 	bl	8006468 <_realloc_r>
 80059fe:	4606      	mov	r6, r0
 8005a00:	2800      	cmp	r0, #0
 8005a02:	d1e1      	bne.n	80059c8 <__ssputs_r+0x70>
 8005a04:	4650      	mov	r0, sl
 8005a06:	6921      	ldr	r1, [r4, #16]
 8005a08:	f7ff feca 	bl	80057a0 <_free_r>
 8005a0c:	e7c7      	b.n	800599e <__ssputs_r+0x46>
	...

08005a10 <_svfiprintf_r>:
 8005a10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a14:	4698      	mov	r8, r3
 8005a16:	898b      	ldrh	r3, [r1, #12]
 8005a18:	4607      	mov	r7, r0
 8005a1a:	061b      	lsls	r3, r3, #24
 8005a1c:	460d      	mov	r5, r1
 8005a1e:	4614      	mov	r4, r2
 8005a20:	b09d      	sub	sp, #116	; 0x74
 8005a22:	d50e      	bpl.n	8005a42 <_svfiprintf_r+0x32>
 8005a24:	690b      	ldr	r3, [r1, #16]
 8005a26:	b963      	cbnz	r3, 8005a42 <_svfiprintf_r+0x32>
 8005a28:	2140      	movs	r1, #64	; 0x40
 8005a2a:	f7ff ff21 	bl	8005870 <_malloc_r>
 8005a2e:	6028      	str	r0, [r5, #0]
 8005a30:	6128      	str	r0, [r5, #16]
 8005a32:	b920      	cbnz	r0, 8005a3e <_svfiprintf_r+0x2e>
 8005a34:	230c      	movs	r3, #12
 8005a36:	603b      	str	r3, [r7, #0]
 8005a38:	f04f 30ff 	mov.w	r0, #4294967295
 8005a3c:	e0d1      	b.n	8005be2 <_svfiprintf_r+0x1d2>
 8005a3e:	2340      	movs	r3, #64	; 0x40
 8005a40:	616b      	str	r3, [r5, #20]
 8005a42:	2300      	movs	r3, #0
 8005a44:	9309      	str	r3, [sp, #36]	; 0x24
 8005a46:	2320      	movs	r3, #32
 8005a48:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005a4c:	2330      	movs	r3, #48	; 0x30
 8005a4e:	f04f 0901 	mov.w	r9, #1
 8005a52:	f8cd 800c 	str.w	r8, [sp, #12]
 8005a56:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8005bfc <_svfiprintf_r+0x1ec>
 8005a5a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005a5e:	4623      	mov	r3, r4
 8005a60:	469a      	mov	sl, r3
 8005a62:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005a66:	b10a      	cbz	r2, 8005a6c <_svfiprintf_r+0x5c>
 8005a68:	2a25      	cmp	r2, #37	; 0x25
 8005a6a:	d1f9      	bne.n	8005a60 <_svfiprintf_r+0x50>
 8005a6c:	ebba 0b04 	subs.w	fp, sl, r4
 8005a70:	d00b      	beq.n	8005a8a <_svfiprintf_r+0x7a>
 8005a72:	465b      	mov	r3, fp
 8005a74:	4622      	mov	r2, r4
 8005a76:	4629      	mov	r1, r5
 8005a78:	4638      	mov	r0, r7
 8005a7a:	f7ff ff6d 	bl	8005958 <__ssputs_r>
 8005a7e:	3001      	adds	r0, #1
 8005a80:	f000 80aa 	beq.w	8005bd8 <_svfiprintf_r+0x1c8>
 8005a84:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005a86:	445a      	add	r2, fp
 8005a88:	9209      	str	r2, [sp, #36]	; 0x24
 8005a8a:	f89a 3000 	ldrb.w	r3, [sl]
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	f000 80a2 	beq.w	8005bd8 <_svfiprintf_r+0x1c8>
 8005a94:	2300      	movs	r3, #0
 8005a96:	f04f 32ff 	mov.w	r2, #4294967295
 8005a9a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005a9e:	f10a 0a01 	add.w	sl, sl, #1
 8005aa2:	9304      	str	r3, [sp, #16]
 8005aa4:	9307      	str	r3, [sp, #28]
 8005aa6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005aaa:	931a      	str	r3, [sp, #104]	; 0x68
 8005aac:	4654      	mov	r4, sl
 8005aae:	2205      	movs	r2, #5
 8005ab0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005ab4:	4851      	ldr	r0, [pc, #324]	; (8005bfc <_svfiprintf_r+0x1ec>)
 8005ab6:	f7ff facf 	bl	8005058 <memchr>
 8005aba:	9a04      	ldr	r2, [sp, #16]
 8005abc:	b9d8      	cbnz	r0, 8005af6 <_svfiprintf_r+0xe6>
 8005abe:	06d0      	lsls	r0, r2, #27
 8005ac0:	bf44      	itt	mi
 8005ac2:	2320      	movmi	r3, #32
 8005ac4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005ac8:	0711      	lsls	r1, r2, #28
 8005aca:	bf44      	itt	mi
 8005acc:	232b      	movmi	r3, #43	; 0x2b
 8005ace:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005ad2:	f89a 3000 	ldrb.w	r3, [sl]
 8005ad6:	2b2a      	cmp	r3, #42	; 0x2a
 8005ad8:	d015      	beq.n	8005b06 <_svfiprintf_r+0xf6>
 8005ada:	4654      	mov	r4, sl
 8005adc:	2000      	movs	r0, #0
 8005ade:	f04f 0c0a 	mov.w	ip, #10
 8005ae2:	9a07      	ldr	r2, [sp, #28]
 8005ae4:	4621      	mov	r1, r4
 8005ae6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005aea:	3b30      	subs	r3, #48	; 0x30
 8005aec:	2b09      	cmp	r3, #9
 8005aee:	d94e      	bls.n	8005b8e <_svfiprintf_r+0x17e>
 8005af0:	b1b0      	cbz	r0, 8005b20 <_svfiprintf_r+0x110>
 8005af2:	9207      	str	r2, [sp, #28]
 8005af4:	e014      	b.n	8005b20 <_svfiprintf_r+0x110>
 8005af6:	eba0 0308 	sub.w	r3, r0, r8
 8005afa:	fa09 f303 	lsl.w	r3, r9, r3
 8005afe:	4313      	orrs	r3, r2
 8005b00:	46a2      	mov	sl, r4
 8005b02:	9304      	str	r3, [sp, #16]
 8005b04:	e7d2      	b.n	8005aac <_svfiprintf_r+0x9c>
 8005b06:	9b03      	ldr	r3, [sp, #12]
 8005b08:	1d19      	adds	r1, r3, #4
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	9103      	str	r1, [sp, #12]
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	bfbb      	ittet	lt
 8005b12:	425b      	neglt	r3, r3
 8005b14:	f042 0202 	orrlt.w	r2, r2, #2
 8005b18:	9307      	strge	r3, [sp, #28]
 8005b1a:	9307      	strlt	r3, [sp, #28]
 8005b1c:	bfb8      	it	lt
 8005b1e:	9204      	strlt	r2, [sp, #16]
 8005b20:	7823      	ldrb	r3, [r4, #0]
 8005b22:	2b2e      	cmp	r3, #46	; 0x2e
 8005b24:	d10c      	bne.n	8005b40 <_svfiprintf_r+0x130>
 8005b26:	7863      	ldrb	r3, [r4, #1]
 8005b28:	2b2a      	cmp	r3, #42	; 0x2a
 8005b2a:	d135      	bne.n	8005b98 <_svfiprintf_r+0x188>
 8005b2c:	9b03      	ldr	r3, [sp, #12]
 8005b2e:	3402      	adds	r4, #2
 8005b30:	1d1a      	adds	r2, r3, #4
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	9203      	str	r2, [sp, #12]
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	bfb8      	it	lt
 8005b3a:	f04f 33ff 	movlt.w	r3, #4294967295
 8005b3e:	9305      	str	r3, [sp, #20]
 8005b40:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8005c00 <_svfiprintf_r+0x1f0>
 8005b44:	2203      	movs	r2, #3
 8005b46:	4650      	mov	r0, sl
 8005b48:	7821      	ldrb	r1, [r4, #0]
 8005b4a:	f7ff fa85 	bl	8005058 <memchr>
 8005b4e:	b140      	cbz	r0, 8005b62 <_svfiprintf_r+0x152>
 8005b50:	2340      	movs	r3, #64	; 0x40
 8005b52:	eba0 000a 	sub.w	r0, r0, sl
 8005b56:	fa03 f000 	lsl.w	r0, r3, r0
 8005b5a:	9b04      	ldr	r3, [sp, #16]
 8005b5c:	3401      	adds	r4, #1
 8005b5e:	4303      	orrs	r3, r0
 8005b60:	9304      	str	r3, [sp, #16]
 8005b62:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005b66:	2206      	movs	r2, #6
 8005b68:	4826      	ldr	r0, [pc, #152]	; (8005c04 <_svfiprintf_r+0x1f4>)
 8005b6a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005b6e:	f7ff fa73 	bl	8005058 <memchr>
 8005b72:	2800      	cmp	r0, #0
 8005b74:	d038      	beq.n	8005be8 <_svfiprintf_r+0x1d8>
 8005b76:	4b24      	ldr	r3, [pc, #144]	; (8005c08 <_svfiprintf_r+0x1f8>)
 8005b78:	bb1b      	cbnz	r3, 8005bc2 <_svfiprintf_r+0x1b2>
 8005b7a:	9b03      	ldr	r3, [sp, #12]
 8005b7c:	3307      	adds	r3, #7
 8005b7e:	f023 0307 	bic.w	r3, r3, #7
 8005b82:	3308      	adds	r3, #8
 8005b84:	9303      	str	r3, [sp, #12]
 8005b86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b88:	4433      	add	r3, r6
 8005b8a:	9309      	str	r3, [sp, #36]	; 0x24
 8005b8c:	e767      	b.n	8005a5e <_svfiprintf_r+0x4e>
 8005b8e:	460c      	mov	r4, r1
 8005b90:	2001      	movs	r0, #1
 8005b92:	fb0c 3202 	mla	r2, ip, r2, r3
 8005b96:	e7a5      	b.n	8005ae4 <_svfiprintf_r+0xd4>
 8005b98:	2300      	movs	r3, #0
 8005b9a:	f04f 0c0a 	mov.w	ip, #10
 8005b9e:	4619      	mov	r1, r3
 8005ba0:	3401      	adds	r4, #1
 8005ba2:	9305      	str	r3, [sp, #20]
 8005ba4:	4620      	mov	r0, r4
 8005ba6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005baa:	3a30      	subs	r2, #48	; 0x30
 8005bac:	2a09      	cmp	r2, #9
 8005bae:	d903      	bls.n	8005bb8 <_svfiprintf_r+0x1a8>
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d0c5      	beq.n	8005b40 <_svfiprintf_r+0x130>
 8005bb4:	9105      	str	r1, [sp, #20]
 8005bb6:	e7c3      	b.n	8005b40 <_svfiprintf_r+0x130>
 8005bb8:	4604      	mov	r4, r0
 8005bba:	2301      	movs	r3, #1
 8005bbc:	fb0c 2101 	mla	r1, ip, r1, r2
 8005bc0:	e7f0      	b.n	8005ba4 <_svfiprintf_r+0x194>
 8005bc2:	ab03      	add	r3, sp, #12
 8005bc4:	9300      	str	r3, [sp, #0]
 8005bc6:	462a      	mov	r2, r5
 8005bc8:	4638      	mov	r0, r7
 8005bca:	4b10      	ldr	r3, [pc, #64]	; (8005c0c <_svfiprintf_r+0x1fc>)
 8005bcc:	a904      	add	r1, sp, #16
 8005bce:	f7fd feb3 	bl	8003938 <_printf_float>
 8005bd2:	1c42      	adds	r2, r0, #1
 8005bd4:	4606      	mov	r6, r0
 8005bd6:	d1d6      	bne.n	8005b86 <_svfiprintf_r+0x176>
 8005bd8:	89ab      	ldrh	r3, [r5, #12]
 8005bda:	065b      	lsls	r3, r3, #25
 8005bdc:	f53f af2c 	bmi.w	8005a38 <_svfiprintf_r+0x28>
 8005be0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005be2:	b01d      	add	sp, #116	; 0x74
 8005be4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005be8:	ab03      	add	r3, sp, #12
 8005bea:	9300      	str	r3, [sp, #0]
 8005bec:	462a      	mov	r2, r5
 8005bee:	4638      	mov	r0, r7
 8005bf0:	4b06      	ldr	r3, [pc, #24]	; (8005c0c <_svfiprintf_r+0x1fc>)
 8005bf2:	a904      	add	r1, sp, #16
 8005bf4:	f7fe f93c 	bl	8003e70 <_printf_i>
 8005bf8:	e7eb      	b.n	8005bd2 <_svfiprintf_r+0x1c2>
 8005bfa:	bf00      	nop
 8005bfc:	08006dfc 	.word	0x08006dfc
 8005c00:	08006e02 	.word	0x08006e02
 8005c04:	08006e06 	.word	0x08006e06
 8005c08:	08003939 	.word	0x08003939
 8005c0c:	08005959 	.word	0x08005959

08005c10 <__sfputc_r>:
 8005c10:	6893      	ldr	r3, [r2, #8]
 8005c12:	b410      	push	{r4}
 8005c14:	3b01      	subs	r3, #1
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	6093      	str	r3, [r2, #8]
 8005c1a:	da07      	bge.n	8005c2c <__sfputc_r+0x1c>
 8005c1c:	6994      	ldr	r4, [r2, #24]
 8005c1e:	42a3      	cmp	r3, r4
 8005c20:	db01      	blt.n	8005c26 <__sfputc_r+0x16>
 8005c22:	290a      	cmp	r1, #10
 8005c24:	d102      	bne.n	8005c2c <__sfputc_r+0x1c>
 8005c26:	bc10      	pop	{r4}
 8005c28:	f000 b99e 	b.w	8005f68 <__swbuf_r>
 8005c2c:	6813      	ldr	r3, [r2, #0]
 8005c2e:	1c58      	adds	r0, r3, #1
 8005c30:	6010      	str	r0, [r2, #0]
 8005c32:	7019      	strb	r1, [r3, #0]
 8005c34:	4608      	mov	r0, r1
 8005c36:	bc10      	pop	{r4}
 8005c38:	4770      	bx	lr

08005c3a <__sfputs_r>:
 8005c3a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c3c:	4606      	mov	r6, r0
 8005c3e:	460f      	mov	r7, r1
 8005c40:	4614      	mov	r4, r2
 8005c42:	18d5      	adds	r5, r2, r3
 8005c44:	42ac      	cmp	r4, r5
 8005c46:	d101      	bne.n	8005c4c <__sfputs_r+0x12>
 8005c48:	2000      	movs	r0, #0
 8005c4a:	e007      	b.n	8005c5c <__sfputs_r+0x22>
 8005c4c:	463a      	mov	r2, r7
 8005c4e:	4630      	mov	r0, r6
 8005c50:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005c54:	f7ff ffdc 	bl	8005c10 <__sfputc_r>
 8005c58:	1c43      	adds	r3, r0, #1
 8005c5a:	d1f3      	bne.n	8005c44 <__sfputs_r+0xa>
 8005c5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005c60 <_vfiprintf_r>:
 8005c60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c64:	460d      	mov	r5, r1
 8005c66:	4614      	mov	r4, r2
 8005c68:	4698      	mov	r8, r3
 8005c6a:	4606      	mov	r6, r0
 8005c6c:	b09d      	sub	sp, #116	; 0x74
 8005c6e:	b118      	cbz	r0, 8005c78 <_vfiprintf_r+0x18>
 8005c70:	6983      	ldr	r3, [r0, #24]
 8005c72:	b90b      	cbnz	r3, 8005c78 <_vfiprintf_r+0x18>
 8005c74:	f7ff f942 	bl	8004efc <__sinit>
 8005c78:	4b89      	ldr	r3, [pc, #548]	; (8005ea0 <_vfiprintf_r+0x240>)
 8005c7a:	429d      	cmp	r5, r3
 8005c7c:	d11b      	bne.n	8005cb6 <_vfiprintf_r+0x56>
 8005c7e:	6875      	ldr	r5, [r6, #4]
 8005c80:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005c82:	07d9      	lsls	r1, r3, #31
 8005c84:	d405      	bmi.n	8005c92 <_vfiprintf_r+0x32>
 8005c86:	89ab      	ldrh	r3, [r5, #12]
 8005c88:	059a      	lsls	r2, r3, #22
 8005c8a:	d402      	bmi.n	8005c92 <_vfiprintf_r+0x32>
 8005c8c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005c8e:	f7ff f9d8 	bl	8005042 <__retarget_lock_acquire_recursive>
 8005c92:	89ab      	ldrh	r3, [r5, #12]
 8005c94:	071b      	lsls	r3, r3, #28
 8005c96:	d501      	bpl.n	8005c9c <_vfiprintf_r+0x3c>
 8005c98:	692b      	ldr	r3, [r5, #16]
 8005c9a:	b9eb      	cbnz	r3, 8005cd8 <_vfiprintf_r+0x78>
 8005c9c:	4629      	mov	r1, r5
 8005c9e:	4630      	mov	r0, r6
 8005ca0:	f000 f9c6 	bl	8006030 <__swsetup_r>
 8005ca4:	b1c0      	cbz	r0, 8005cd8 <_vfiprintf_r+0x78>
 8005ca6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005ca8:	07dc      	lsls	r4, r3, #31
 8005caa:	d50e      	bpl.n	8005cca <_vfiprintf_r+0x6a>
 8005cac:	f04f 30ff 	mov.w	r0, #4294967295
 8005cb0:	b01d      	add	sp, #116	; 0x74
 8005cb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005cb6:	4b7b      	ldr	r3, [pc, #492]	; (8005ea4 <_vfiprintf_r+0x244>)
 8005cb8:	429d      	cmp	r5, r3
 8005cba:	d101      	bne.n	8005cc0 <_vfiprintf_r+0x60>
 8005cbc:	68b5      	ldr	r5, [r6, #8]
 8005cbe:	e7df      	b.n	8005c80 <_vfiprintf_r+0x20>
 8005cc0:	4b79      	ldr	r3, [pc, #484]	; (8005ea8 <_vfiprintf_r+0x248>)
 8005cc2:	429d      	cmp	r5, r3
 8005cc4:	bf08      	it	eq
 8005cc6:	68f5      	ldreq	r5, [r6, #12]
 8005cc8:	e7da      	b.n	8005c80 <_vfiprintf_r+0x20>
 8005cca:	89ab      	ldrh	r3, [r5, #12]
 8005ccc:	0598      	lsls	r0, r3, #22
 8005cce:	d4ed      	bmi.n	8005cac <_vfiprintf_r+0x4c>
 8005cd0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005cd2:	f7ff f9b7 	bl	8005044 <__retarget_lock_release_recursive>
 8005cd6:	e7e9      	b.n	8005cac <_vfiprintf_r+0x4c>
 8005cd8:	2300      	movs	r3, #0
 8005cda:	9309      	str	r3, [sp, #36]	; 0x24
 8005cdc:	2320      	movs	r3, #32
 8005cde:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005ce2:	2330      	movs	r3, #48	; 0x30
 8005ce4:	f04f 0901 	mov.w	r9, #1
 8005ce8:	f8cd 800c 	str.w	r8, [sp, #12]
 8005cec:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8005eac <_vfiprintf_r+0x24c>
 8005cf0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005cf4:	4623      	mov	r3, r4
 8005cf6:	469a      	mov	sl, r3
 8005cf8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005cfc:	b10a      	cbz	r2, 8005d02 <_vfiprintf_r+0xa2>
 8005cfe:	2a25      	cmp	r2, #37	; 0x25
 8005d00:	d1f9      	bne.n	8005cf6 <_vfiprintf_r+0x96>
 8005d02:	ebba 0b04 	subs.w	fp, sl, r4
 8005d06:	d00b      	beq.n	8005d20 <_vfiprintf_r+0xc0>
 8005d08:	465b      	mov	r3, fp
 8005d0a:	4622      	mov	r2, r4
 8005d0c:	4629      	mov	r1, r5
 8005d0e:	4630      	mov	r0, r6
 8005d10:	f7ff ff93 	bl	8005c3a <__sfputs_r>
 8005d14:	3001      	adds	r0, #1
 8005d16:	f000 80aa 	beq.w	8005e6e <_vfiprintf_r+0x20e>
 8005d1a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005d1c:	445a      	add	r2, fp
 8005d1e:	9209      	str	r2, [sp, #36]	; 0x24
 8005d20:	f89a 3000 	ldrb.w	r3, [sl]
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	f000 80a2 	beq.w	8005e6e <_vfiprintf_r+0x20e>
 8005d2a:	2300      	movs	r3, #0
 8005d2c:	f04f 32ff 	mov.w	r2, #4294967295
 8005d30:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005d34:	f10a 0a01 	add.w	sl, sl, #1
 8005d38:	9304      	str	r3, [sp, #16]
 8005d3a:	9307      	str	r3, [sp, #28]
 8005d3c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005d40:	931a      	str	r3, [sp, #104]	; 0x68
 8005d42:	4654      	mov	r4, sl
 8005d44:	2205      	movs	r2, #5
 8005d46:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005d4a:	4858      	ldr	r0, [pc, #352]	; (8005eac <_vfiprintf_r+0x24c>)
 8005d4c:	f7ff f984 	bl	8005058 <memchr>
 8005d50:	9a04      	ldr	r2, [sp, #16]
 8005d52:	b9d8      	cbnz	r0, 8005d8c <_vfiprintf_r+0x12c>
 8005d54:	06d1      	lsls	r1, r2, #27
 8005d56:	bf44      	itt	mi
 8005d58:	2320      	movmi	r3, #32
 8005d5a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005d5e:	0713      	lsls	r3, r2, #28
 8005d60:	bf44      	itt	mi
 8005d62:	232b      	movmi	r3, #43	; 0x2b
 8005d64:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005d68:	f89a 3000 	ldrb.w	r3, [sl]
 8005d6c:	2b2a      	cmp	r3, #42	; 0x2a
 8005d6e:	d015      	beq.n	8005d9c <_vfiprintf_r+0x13c>
 8005d70:	4654      	mov	r4, sl
 8005d72:	2000      	movs	r0, #0
 8005d74:	f04f 0c0a 	mov.w	ip, #10
 8005d78:	9a07      	ldr	r2, [sp, #28]
 8005d7a:	4621      	mov	r1, r4
 8005d7c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005d80:	3b30      	subs	r3, #48	; 0x30
 8005d82:	2b09      	cmp	r3, #9
 8005d84:	d94e      	bls.n	8005e24 <_vfiprintf_r+0x1c4>
 8005d86:	b1b0      	cbz	r0, 8005db6 <_vfiprintf_r+0x156>
 8005d88:	9207      	str	r2, [sp, #28]
 8005d8a:	e014      	b.n	8005db6 <_vfiprintf_r+0x156>
 8005d8c:	eba0 0308 	sub.w	r3, r0, r8
 8005d90:	fa09 f303 	lsl.w	r3, r9, r3
 8005d94:	4313      	orrs	r3, r2
 8005d96:	46a2      	mov	sl, r4
 8005d98:	9304      	str	r3, [sp, #16]
 8005d9a:	e7d2      	b.n	8005d42 <_vfiprintf_r+0xe2>
 8005d9c:	9b03      	ldr	r3, [sp, #12]
 8005d9e:	1d19      	adds	r1, r3, #4
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	9103      	str	r1, [sp, #12]
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	bfbb      	ittet	lt
 8005da8:	425b      	neglt	r3, r3
 8005daa:	f042 0202 	orrlt.w	r2, r2, #2
 8005dae:	9307      	strge	r3, [sp, #28]
 8005db0:	9307      	strlt	r3, [sp, #28]
 8005db2:	bfb8      	it	lt
 8005db4:	9204      	strlt	r2, [sp, #16]
 8005db6:	7823      	ldrb	r3, [r4, #0]
 8005db8:	2b2e      	cmp	r3, #46	; 0x2e
 8005dba:	d10c      	bne.n	8005dd6 <_vfiprintf_r+0x176>
 8005dbc:	7863      	ldrb	r3, [r4, #1]
 8005dbe:	2b2a      	cmp	r3, #42	; 0x2a
 8005dc0:	d135      	bne.n	8005e2e <_vfiprintf_r+0x1ce>
 8005dc2:	9b03      	ldr	r3, [sp, #12]
 8005dc4:	3402      	adds	r4, #2
 8005dc6:	1d1a      	adds	r2, r3, #4
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	9203      	str	r2, [sp, #12]
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	bfb8      	it	lt
 8005dd0:	f04f 33ff 	movlt.w	r3, #4294967295
 8005dd4:	9305      	str	r3, [sp, #20]
 8005dd6:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8005eb0 <_vfiprintf_r+0x250>
 8005dda:	2203      	movs	r2, #3
 8005ddc:	4650      	mov	r0, sl
 8005dde:	7821      	ldrb	r1, [r4, #0]
 8005de0:	f7ff f93a 	bl	8005058 <memchr>
 8005de4:	b140      	cbz	r0, 8005df8 <_vfiprintf_r+0x198>
 8005de6:	2340      	movs	r3, #64	; 0x40
 8005de8:	eba0 000a 	sub.w	r0, r0, sl
 8005dec:	fa03 f000 	lsl.w	r0, r3, r0
 8005df0:	9b04      	ldr	r3, [sp, #16]
 8005df2:	3401      	adds	r4, #1
 8005df4:	4303      	orrs	r3, r0
 8005df6:	9304      	str	r3, [sp, #16]
 8005df8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005dfc:	2206      	movs	r2, #6
 8005dfe:	482d      	ldr	r0, [pc, #180]	; (8005eb4 <_vfiprintf_r+0x254>)
 8005e00:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005e04:	f7ff f928 	bl	8005058 <memchr>
 8005e08:	2800      	cmp	r0, #0
 8005e0a:	d03f      	beq.n	8005e8c <_vfiprintf_r+0x22c>
 8005e0c:	4b2a      	ldr	r3, [pc, #168]	; (8005eb8 <_vfiprintf_r+0x258>)
 8005e0e:	bb1b      	cbnz	r3, 8005e58 <_vfiprintf_r+0x1f8>
 8005e10:	9b03      	ldr	r3, [sp, #12]
 8005e12:	3307      	adds	r3, #7
 8005e14:	f023 0307 	bic.w	r3, r3, #7
 8005e18:	3308      	adds	r3, #8
 8005e1a:	9303      	str	r3, [sp, #12]
 8005e1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005e1e:	443b      	add	r3, r7
 8005e20:	9309      	str	r3, [sp, #36]	; 0x24
 8005e22:	e767      	b.n	8005cf4 <_vfiprintf_r+0x94>
 8005e24:	460c      	mov	r4, r1
 8005e26:	2001      	movs	r0, #1
 8005e28:	fb0c 3202 	mla	r2, ip, r2, r3
 8005e2c:	e7a5      	b.n	8005d7a <_vfiprintf_r+0x11a>
 8005e2e:	2300      	movs	r3, #0
 8005e30:	f04f 0c0a 	mov.w	ip, #10
 8005e34:	4619      	mov	r1, r3
 8005e36:	3401      	adds	r4, #1
 8005e38:	9305      	str	r3, [sp, #20]
 8005e3a:	4620      	mov	r0, r4
 8005e3c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005e40:	3a30      	subs	r2, #48	; 0x30
 8005e42:	2a09      	cmp	r2, #9
 8005e44:	d903      	bls.n	8005e4e <_vfiprintf_r+0x1ee>
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d0c5      	beq.n	8005dd6 <_vfiprintf_r+0x176>
 8005e4a:	9105      	str	r1, [sp, #20]
 8005e4c:	e7c3      	b.n	8005dd6 <_vfiprintf_r+0x176>
 8005e4e:	4604      	mov	r4, r0
 8005e50:	2301      	movs	r3, #1
 8005e52:	fb0c 2101 	mla	r1, ip, r1, r2
 8005e56:	e7f0      	b.n	8005e3a <_vfiprintf_r+0x1da>
 8005e58:	ab03      	add	r3, sp, #12
 8005e5a:	9300      	str	r3, [sp, #0]
 8005e5c:	462a      	mov	r2, r5
 8005e5e:	4630      	mov	r0, r6
 8005e60:	4b16      	ldr	r3, [pc, #88]	; (8005ebc <_vfiprintf_r+0x25c>)
 8005e62:	a904      	add	r1, sp, #16
 8005e64:	f7fd fd68 	bl	8003938 <_printf_float>
 8005e68:	4607      	mov	r7, r0
 8005e6a:	1c78      	adds	r0, r7, #1
 8005e6c:	d1d6      	bne.n	8005e1c <_vfiprintf_r+0x1bc>
 8005e6e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005e70:	07d9      	lsls	r1, r3, #31
 8005e72:	d405      	bmi.n	8005e80 <_vfiprintf_r+0x220>
 8005e74:	89ab      	ldrh	r3, [r5, #12]
 8005e76:	059a      	lsls	r2, r3, #22
 8005e78:	d402      	bmi.n	8005e80 <_vfiprintf_r+0x220>
 8005e7a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005e7c:	f7ff f8e2 	bl	8005044 <__retarget_lock_release_recursive>
 8005e80:	89ab      	ldrh	r3, [r5, #12]
 8005e82:	065b      	lsls	r3, r3, #25
 8005e84:	f53f af12 	bmi.w	8005cac <_vfiprintf_r+0x4c>
 8005e88:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005e8a:	e711      	b.n	8005cb0 <_vfiprintf_r+0x50>
 8005e8c:	ab03      	add	r3, sp, #12
 8005e8e:	9300      	str	r3, [sp, #0]
 8005e90:	462a      	mov	r2, r5
 8005e92:	4630      	mov	r0, r6
 8005e94:	4b09      	ldr	r3, [pc, #36]	; (8005ebc <_vfiprintf_r+0x25c>)
 8005e96:	a904      	add	r1, sp, #16
 8005e98:	f7fd ffea 	bl	8003e70 <_printf_i>
 8005e9c:	e7e4      	b.n	8005e68 <_vfiprintf_r+0x208>
 8005e9e:	bf00      	nop
 8005ea0:	08006c64 	.word	0x08006c64
 8005ea4:	08006c84 	.word	0x08006c84
 8005ea8:	08006c44 	.word	0x08006c44
 8005eac:	08006dfc 	.word	0x08006dfc
 8005eb0:	08006e02 	.word	0x08006e02
 8005eb4:	08006e06 	.word	0x08006e06
 8005eb8:	08003939 	.word	0x08003939
 8005ebc:	08005c3b 	.word	0x08005c3b

08005ec0 <_sbrk_r>:
 8005ec0:	b538      	push	{r3, r4, r5, lr}
 8005ec2:	2300      	movs	r3, #0
 8005ec4:	4d05      	ldr	r5, [pc, #20]	; (8005edc <_sbrk_r+0x1c>)
 8005ec6:	4604      	mov	r4, r0
 8005ec8:	4608      	mov	r0, r1
 8005eca:	602b      	str	r3, [r5, #0]
 8005ecc:	f7fb fc18 	bl	8001700 <_sbrk>
 8005ed0:	1c43      	adds	r3, r0, #1
 8005ed2:	d102      	bne.n	8005eda <_sbrk_r+0x1a>
 8005ed4:	682b      	ldr	r3, [r5, #0]
 8005ed6:	b103      	cbz	r3, 8005eda <_sbrk_r+0x1a>
 8005ed8:	6023      	str	r3, [r4, #0]
 8005eda:	bd38      	pop	{r3, r4, r5, pc}
 8005edc:	20000ec0 	.word	0x20000ec0

08005ee0 <__sread>:
 8005ee0:	b510      	push	{r4, lr}
 8005ee2:	460c      	mov	r4, r1
 8005ee4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ee8:	f000 faee 	bl	80064c8 <_read_r>
 8005eec:	2800      	cmp	r0, #0
 8005eee:	bfab      	itete	ge
 8005ef0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005ef2:	89a3      	ldrhlt	r3, [r4, #12]
 8005ef4:	181b      	addge	r3, r3, r0
 8005ef6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005efa:	bfac      	ite	ge
 8005efc:	6563      	strge	r3, [r4, #84]	; 0x54
 8005efe:	81a3      	strhlt	r3, [r4, #12]
 8005f00:	bd10      	pop	{r4, pc}

08005f02 <__swrite>:
 8005f02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f06:	461f      	mov	r7, r3
 8005f08:	898b      	ldrh	r3, [r1, #12]
 8005f0a:	4605      	mov	r5, r0
 8005f0c:	05db      	lsls	r3, r3, #23
 8005f0e:	460c      	mov	r4, r1
 8005f10:	4616      	mov	r6, r2
 8005f12:	d505      	bpl.n	8005f20 <__swrite+0x1e>
 8005f14:	2302      	movs	r3, #2
 8005f16:	2200      	movs	r2, #0
 8005f18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f1c:	f000 f9f4 	bl	8006308 <_lseek_r>
 8005f20:	89a3      	ldrh	r3, [r4, #12]
 8005f22:	4632      	mov	r2, r6
 8005f24:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005f28:	81a3      	strh	r3, [r4, #12]
 8005f2a:	4628      	mov	r0, r5
 8005f2c:	463b      	mov	r3, r7
 8005f2e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005f32:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005f36:	f000 b869 	b.w	800600c <_write_r>

08005f3a <__sseek>:
 8005f3a:	b510      	push	{r4, lr}
 8005f3c:	460c      	mov	r4, r1
 8005f3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f42:	f000 f9e1 	bl	8006308 <_lseek_r>
 8005f46:	1c43      	adds	r3, r0, #1
 8005f48:	89a3      	ldrh	r3, [r4, #12]
 8005f4a:	bf15      	itete	ne
 8005f4c:	6560      	strne	r0, [r4, #84]	; 0x54
 8005f4e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005f52:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005f56:	81a3      	strheq	r3, [r4, #12]
 8005f58:	bf18      	it	ne
 8005f5a:	81a3      	strhne	r3, [r4, #12]
 8005f5c:	bd10      	pop	{r4, pc}

08005f5e <__sclose>:
 8005f5e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f62:	f000 b8f1 	b.w	8006148 <_close_r>
	...

08005f68 <__swbuf_r>:
 8005f68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f6a:	460e      	mov	r6, r1
 8005f6c:	4614      	mov	r4, r2
 8005f6e:	4605      	mov	r5, r0
 8005f70:	b118      	cbz	r0, 8005f7a <__swbuf_r+0x12>
 8005f72:	6983      	ldr	r3, [r0, #24]
 8005f74:	b90b      	cbnz	r3, 8005f7a <__swbuf_r+0x12>
 8005f76:	f7fe ffc1 	bl	8004efc <__sinit>
 8005f7a:	4b21      	ldr	r3, [pc, #132]	; (8006000 <__swbuf_r+0x98>)
 8005f7c:	429c      	cmp	r4, r3
 8005f7e:	d12b      	bne.n	8005fd8 <__swbuf_r+0x70>
 8005f80:	686c      	ldr	r4, [r5, #4]
 8005f82:	69a3      	ldr	r3, [r4, #24]
 8005f84:	60a3      	str	r3, [r4, #8]
 8005f86:	89a3      	ldrh	r3, [r4, #12]
 8005f88:	071a      	lsls	r2, r3, #28
 8005f8a:	d52f      	bpl.n	8005fec <__swbuf_r+0x84>
 8005f8c:	6923      	ldr	r3, [r4, #16]
 8005f8e:	b36b      	cbz	r3, 8005fec <__swbuf_r+0x84>
 8005f90:	6923      	ldr	r3, [r4, #16]
 8005f92:	6820      	ldr	r0, [r4, #0]
 8005f94:	b2f6      	uxtb	r6, r6
 8005f96:	1ac0      	subs	r0, r0, r3
 8005f98:	6963      	ldr	r3, [r4, #20]
 8005f9a:	4637      	mov	r7, r6
 8005f9c:	4283      	cmp	r3, r0
 8005f9e:	dc04      	bgt.n	8005faa <__swbuf_r+0x42>
 8005fa0:	4621      	mov	r1, r4
 8005fa2:	4628      	mov	r0, r5
 8005fa4:	f000 f962 	bl	800626c <_fflush_r>
 8005fa8:	bb30      	cbnz	r0, 8005ff8 <__swbuf_r+0x90>
 8005faa:	68a3      	ldr	r3, [r4, #8]
 8005fac:	3001      	adds	r0, #1
 8005fae:	3b01      	subs	r3, #1
 8005fb0:	60a3      	str	r3, [r4, #8]
 8005fb2:	6823      	ldr	r3, [r4, #0]
 8005fb4:	1c5a      	adds	r2, r3, #1
 8005fb6:	6022      	str	r2, [r4, #0]
 8005fb8:	701e      	strb	r6, [r3, #0]
 8005fba:	6963      	ldr	r3, [r4, #20]
 8005fbc:	4283      	cmp	r3, r0
 8005fbe:	d004      	beq.n	8005fca <__swbuf_r+0x62>
 8005fc0:	89a3      	ldrh	r3, [r4, #12]
 8005fc2:	07db      	lsls	r3, r3, #31
 8005fc4:	d506      	bpl.n	8005fd4 <__swbuf_r+0x6c>
 8005fc6:	2e0a      	cmp	r6, #10
 8005fc8:	d104      	bne.n	8005fd4 <__swbuf_r+0x6c>
 8005fca:	4621      	mov	r1, r4
 8005fcc:	4628      	mov	r0, r5
 8005fce:	f000 f94d 	bl	800626c <_fflush_r>
 8005fd2:	b988      	cbnz	r0, 8005ff8 <__swbuf_r+0x90>
 8005fd4:	4638      	mov	r0, r7
 8005fd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005fd8:	4b0a      	ldr	r3, [pc, #40]	; (8006004 <__swbuf_r+0x9c>)
 8005fda:	429c      	cmp	r4, r3
 8005fdc:	d101      	bne.n	8005fe2 <__swbuf_r+0x7a>
 8005fde:	68ac      	ldr	r4, [r5, #8]
 8005fe0:	e7cf      	b.n	8005f82 <__swbuf_r+0x1a>
 8005fe2:	4b09      	ldr	r3, [pc, #36]	; (8006008 <__swbuf_r+0xa0>)
 8005fe4:	429c      	cmp	r4, r3
 8005fe6:	bf08      	it	eq
 8005fe8:	68ec      	ldreq	r4, [r5, #12]
 8005fea:	e7ca      	b.n	8005f82 <__swbuf_r+0x1a>
 8005fec:	4621      	mov	r1, r4
 8005fee:	4628      	mov	r0, r5
 8005ff0:	f000 f81e 	bl	8006030 <__swsetup_r>
 8005ff4:	2800      	cmp	r0, #0
 8005ff6:	d0cb      	beq.n	8005f90 <__swbuf_r+0x28>
 8005ff8:	f04f 37ff 	mov.w	r7, #4294967295
 8005ffc:	e7ea      	b.n	8005fd4 <__swbuf_r+0x6c>
 8005ffe:	bf00      	nop
 8006000:	08006c64 	.word	0x08006c64
 8006004:	08006c84 	.word	0x08006c84
 8006008:	08006c44 	.word	0x08006c44

0800600c <_write_r>:
 800600c:	b538      	push	{r3, r4, r5, lr}
 800600e:	4604      	mov	r4, r0
 8006010:	4608      	mov	r0, r1
 8006012:	4611      	mov	r1, r2
 8006014:	2200      	movs	r2, #0
 8006016:	4d05      	ldr	r5, [pc, #20]	; (800602c <_write_r+0x20>)
 8006018:	602a      	str	r2, [r5, #0]
 800601a:	461a      	mov	r2, r3
 800601c:	f7fa fe90 	bl	8000d40 <_write>
 8006020:	1c43      	adds	r3, r0, #1
 8006022:	d102      	bne.n	800602a <_write_r+0x1e>
 8006024:	682b      	ldr	r3, [r5, #0]
 8006026:	b103      	cbz	r3, 800602a <_write_r+0x1e>
 8006028:	6023      	str	r3, [r4, #0]
 800602a:	bd38      	pop	{r3, r4, r5, pc}
 800602c:	20000ec0 	.word	0x20000ec0

08006030 <__swsetup_r>:
 8006030:	4b32      	ldr	r3, [pc, #200]	; (80060fc <__swsetup_r+0xcc>)
 8006032:	b570      	push	{r4, r5, r6, lr}
 8006034:	681d      	ldr	r5, [r3, #0]
 8006036:	4606      	mov	r6, r0
 8006038:	460c      	mov	r4, r1
 800603a:	b125      	cbz	r5, 8006046 <__swsetup_r+0x16>
 800603c:	69ab      	ldr	r3, [r5, #24]
 800603e:	b913      	cbnz	r3, 8006046 <__swsetup_r+0x16>
 8006040:	4628      	mov	r0, r5
 8006042:	f7fe ff5b 	bl	8004efc <__sinit>
 8006046:	4b2e      	ldr	r3, [pc, #184]	; (8006100 <__swsetup_r+0xd0>)
 8006048:	429c      	cmp	r4, r3
 800604a:	d10f      	bne.n	800606c <__swsetup_r+0x3c>
 800604c:	686c      	ldr	r4, [r5, #4]
 800604e:	89a3      	ldrh	r3, [r4, #12]
 8006050:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006054:	0719      	lsls	r1, r3, #28
 8006056:	d42c      	bmi.n	80060b2 <__swsetup_r+0x82>
 8006058:	06dd      	lsls	r5, r3, #27
 800605a:	d411      	bmi.n	8006080 <__swsetup_r+0x50>
 800605c:	2309      	movs	r3, #9
 800605e:	6033      	str	r3, [r6, #0]
 8006060:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006064:	f04f 30ff 	mov.w	r0, #4294967295
 8006068:	81a3      	strh	r3, [r4, #12]
 800606a:	e03e      	b.n	80060ea <__swsetup_r+0xba>
 800606c:	4b25      	ldr	r3, [pc, #148]	; (8006104 <__swsetup_r+0xd4>)
 800606e:	429c      	cmp	r4, r3
 8006070:	d101      	bne.n	8006076 <__swsetup_r+0x46>
 8006072:	68ac      	ldr	r4, [r5, #8]
 8006074:	e7eb      	b.n	800604e <__swsetup_r+0x1e>
 8006076:	4b24      	ldr	r3, [pc, #144]	; (8006108 <__swsetup_r+0xd8>)
 8006078:	429c      	cmp	r4, r3
 800607a:	bf08      	it	eq
 800607c:	68ec      	ldreq	r4, [r5, #12]
 800607e:	e7e6      	b.n	800604e <__swsetup_r+0x1e>
 8006080:	0758      	lsls	r0, r3, #29
 8006082:	d512      	bpl.n	80060aa <__swsetup_r+0x7a>
 8006084:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006086:	b141      	cbz	r1, 800609a <__swsetup_r+0x6a>
 8006088:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800608c:	4299      	cmp	r1, r3
 800608e:	d002      	beq.n	8006096 <__swsetup_r+0x66>
 8006090:	4630      	mov	r0, r6
 8006092:	f7ff fb85 	bl	80057a0 <_free_r>
 8006096:	2300      	movs	r3, #0
 8006098:	6363      	str	r3, [r4, #52]	; 0x34
 800609a:	89a3      	ldrh	r3, [r4, #12]
 800609c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80060a0:	81a3      	strh	r3, [r4, #12]
 80060a2:	2300      	movs	r3, #0
 80060a4:	6063      	str	r3, [r4, #4]
 80060a6:	6923      	ldr	r3, [r4, #16]
 80060a8:	6023      	str	r3, [r4, #0]
 80060aa:	89a3      	ldrh	r3, [r4, #12]
 80060ac:	f043 0308 	orr.w	r3, r3, #8
 80060b0:	81a3      	strh	r3, [r4, #12]
 80060b2:	6923      	ldr	r3, [r4, #16]
 80060b4:	b94b      	cbnz	r3, 80060ca <__swsetup_r+0x9a>
 80060b6:	89a3      	ldrh	r3, [r4, #12]
 80060b8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80060bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80060c0:	d003      	beq.n	80060ca <__swsetup_r+0x9a>
 80060c2:	4621      	mov	r1, r4
 80060c4:	4630      	mov	r0, r6
 80060c6:	f000 f957 	bl	8006378 <__smakebuf_r>
 80060ca:	89a0      	ldrh	r0, [r4, #12]
 80060cc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80060d0:	f010 0301 	ands.w	r3, r0, #1
 80060d4:	d00a      	beq.n	80060ec <__swsetup_r+0xbc>
 80060d6:	2300      	movs	r3, #0
 80060d8:	60a3      	str	r3, [r4, #8]
 80060da:	6963      	ldr	r3, [r4, #20]
 80060dc:	425b      	negs	r3, r3
 80060de:	61a3      	str	r3, [r4, #24]
 80060e0:	6923      	ldr	r3, [r4, #16]
 80060e2:	b943      	cbnz	r3, 80060f6 <__swsetup_r+0xc6>
 80060e4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80060e8:	d1ba      	bne.n	8006060 <__swsetup_r+0x30>
 80060ea:	bd70      	pop	{r4, r5, r6, pc}
 80060ec:	0781      	lsls	r1, r0, #30
 80060ee:	bf58      	it	pl
 80060f0:	6963      	ldrpl	r3, [r4, #20]
 80060f2:	60a3      	str	r3, [r4, #8]
 80060f4:	e7f4      	b.n	80060e0 <__swsetup_r+0xb0>
 80060f6:	2000      	movs	r0, #0
 80060f8:	e7f7      	b.n	80060ea <__swsetup_r+0xba>
 80060fa:	bf00      	nop
 80060fc:	20000014 	.word	0x20000014
 8006100:	08006c64 	.word	0x08006c64
 8006104:	08006c84 	.word	0x08006c84
 8006108:	08006c44 	.word	0x08006c44

0800610c <__assert_func>:
 800610c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800610e:	4614      	mov	r4, r2
 8006110:	461a      	mov	r2, r3
 8006112:	4b09      	ldr	r3, [pc, #36]	; (8006138 <__assert_func+0x2c>)
 8006114:	4605      	mov	r5, r0
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	68d8      	ldr	r0, [r3, #12]
 800611a:	b14c      	cbz	r4, 8006130 <__assert_func+0x24>
 800611c:	4b07      	ldr	r3, [pc, #28]	; (800613c <__assert_func+0x30>)
 800611e:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006122:	9100      	str	r1, [sp, #0]
 8006124:	462b      	mov	r3, r5
 8006126:	4906      	ldr	r1, [pc, #24]	; (8006140 <__assert_func+0x34>)
 8006128:	f000 f8dc 	bl	80062e4 <fiprintf>
 800612c:	f000 f9eb 	bl	8006506 <abort>
 8006130:	4b04      	ldr	r3, [pc, #16]	; (8006144 <__assert_func+0x38>)
 8006132:	461c      	mov	r4, r3
 8006134:	e7f3      	b.n	800611e <__assert_func+0x12>
 8006136:	bf00      	nop
 8006138:	20000014 	.word	0x20000014
 800613c:	08006e0d 	.word	0x08006e0d
 8006140:	08006e1a 	.word	0x08006e1a
 8006144:	08006b52 	.word	0x08006b52

08006148 <_close_r>:
 8006148:	b538      	push	{r3, r4, r5, lr}
 800614a:	2300      	movs	r3, #0
 800614c:	4d05      	ldr	r5, [pc, #20]	; (8006164 <_close_r+0x1c>)
 800614e:	4604      	mov	r4, r0
 8006150:	4608      	mov	r0, r1
 8006152:	602b      	str	r3, [r5, #0]
 8006154:	f7fb fac8 	bl	80016e8 <_close>
 8006158:	1c43      	adds	r3, r0, #1
 800615a:	d102      	bne.n	8006162 <_close_r+0x1a>
 800615c:	682b      	ldr	r3, [r5, #0]
 800615e:	b103      	cbz	r3, 8006162 <_close_r+0x1a>
 8006160:	6023      	str	r3, [r4, #0]
 8006162:	bd38      	pop	{r3, r4, r5, pc}
 8006164:	20000ec0 	.word	0x20000ec0

08006168 <__sflush_r>:
 8006168:	898a      	ldrh	r2, [r1, #12]
 800616a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800616c:	4605      	mov	r5, r0
 800616e:	0710      	lsls	r0, r2, #28
 8006170:	460c      	mov	r4, r1
 8006172:	d457      	bmi.n	8006224 <__sflush_r+0xbc>
 8006174:	684b      	ldr	r3, [r1, #4]
 8006176:	2b00      	cmp	r3, #0
 8006178:	dc04      	bgt.n	8006184 <__sflush_r+0x1c>
 800617a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800617c:	2b00      	cmp	r3, #0
 800617e:	dc01      	bgt.n	8006184 <__sflush_r+0x1c>
 8006180:	2000      	movs	r0, #0
 8006182:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006184:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006186:	2e00      	cmp	r6, #0
 8006188:	d0fa      	beq.n	8006180 <__sflush_r+0x18>
 800618a:	2300      	movs	r3, #0
 800618c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006190:	682f      	ldr	r7, [r5, #0]
 8006192:	602b      	str	r3, [r5, #0]
 8006194:	d032      	beq.n	80061fc <__sflush_r+0x94>
 8006196:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006198:	89a3      	ldrh	r3, [r4, #12]
 800619a:	075a      	lsls	r2, r3, #29
 800619c:	d505      	bpl.n	80061aa <__sflush_r+0x42>
 800619e:	6863      	ldr	r3, [r4, #4]
 80061a0:	1ac0      	subs	r0, r0, r3
 80061a2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80061a4:	b10b      	cbz	r3, 80061aa <__sflush_r+0x42>
 80061a6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80061a8:	1ac0      	subs	r0, r0, r3
 80061aa:	2300      	movs	r3, #0
 80061ac:	4602      	mov	r2, r0
 80061ae:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80061b0:	4628      	mov	r0, r5
 80061b2:	6a21      	ldr	r1, [r4, #32]
 80061b4:	47b0      	blx	r6
 80061b6:	1c43      	adds	r3, r0, #1
 80061b8:	89a3      	ldrh	r3, [r4, #12]
 80061ba:	d106      	bne.n	80061ca <__sflush_r+0x62>
 80061bc:	6829      	ldr	r1, [r5, #0]
 80061be:	291d      	cmp	r1, #29
 80061c0:	d82c      	bhi.n	800621c <__sflush_r+0xb4>
 80061c2:	4a29      	ldr	r2, [pc, #164]	; (8006268 <__sflush_r+0x100>)
 80061c4:	40ca      	lsrs	r2, r1
 80061c6:	07d6      	lsls	r6, r2, #31
 80061c8:	d528      	bpl.n	800621c <__sflush_r+0xb4>
 80061ca:	2200      	movs	r2, #0
 80061cc:	6062      	str	r2, [r4, #4]
 80061ce:	6922      	ldr	r2, [r4, #16]
 80061d0:	04d9      	lsls	r1, r3, #19
 80061d2:	6022      	str	r2, [r4, #0]
 80061d4:	d504      	bpl.n	80061e0 <__sflush_r+0x78>
 80061d6:	1c42      	adds	r2, r0, #1
 80061d8:	d101      	bne.n	80061de <__sflush_r+0x76>
 80061da:	682b      	ldr	r3, [r5, #0]
 80061dc:	b903      	cbnz	r3, 80061e0 <__sflush_r+0x78>
 80061de:	6560      	str	r0, [r4, #84]	; 0x54
 80061e0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80061e2:	602f      	str	r7, [r5, #0]
 80061e4:	2900      	cmp	r1, #0
 80061e6:	d0cb      	beq.n	8006180 <__sflush_r+0x18>
 80061e8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80061ec:	4299      	cmp	r1, r3
 80061ee:	d002      	beq.n	80061f6 <__sflush_r+0x8e>
 80061f0:	4628      	mov	r0, r5
 80061f2:	f7ff fad5 	bl	80057a0 <_free_r>
 80061f6:	2000      	movs	r0, #0
 80061f8:	6360      	str	r0, [r4, #52]	; 0x34
 80061fa:	e7c2      	b.n	8006182 <__sflush_r+0x1a>
 80061fc:	6a21      	ldr	r1, [r4, #32]
 80061fe:	2301      	movs	r3, #1
 8006200:	4628      	mov	r0, r5
 8006202:	47b0      	blx	r6
 8006204:	1c41      	adds	r1, r0, #1
 8006206:	d1c7      	bne.n	8006198 <__sflush_r+0x30>
 8006208:	682b      	ldr	r3, [r5, #0]
 800620a:	2b00      	cmp	r3, #0
 800620c:	d0c4      	beq.n	8006198 <__sflush_r+0x30>
 800620e:	2b1d      	cmp	r3, #29
 8006210:	d001      	beq.n	8006216 <__sflush_r+0xae>
 8006212:	2b16      	cmp	r3, #22
 8006214:	d101      	bne.n	800621a <__sflush_r+0xb2>
 8006216:	602f      	str	r7, [r5, #0]
 8006218:	e7b2      	b.n	8006180 <__sflush_r+0x18>
 800621a:	89a3      	ldrh	r3, [r4, #12]
 800621c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006220:	81a3      	strh	r3, [r4, #12]
 8006222:	e7ae      	b.n	8006182 <__sflush_r+0x1a>
 8006224:	690f      	ldr	r7, [r1, #16]
 8006226:	2f00      	cmp	r7, #0
 8006228:	d0aa      	beq.n	8006180 <__sflush_r+0x18>
 800622a:	0793      	lsls	r3, r2, #30
 800622c:	bf18      	it	ne
 800622e:	2300      	movne	r3, #0
 8006230:	680e      	ldr	r6, [r1, #0]
 8006232:	bf08      	it	eq
 8006234:	694b      	ldreq	r3, [r1, #20]
 8006236:	1bf6      	subs	r6, r6, r7
 8006238:	600f      	str	r7, [r1, #0]
 800623a:	608b      	str	r3, [r1, #8]
 800623c:	2e00      	cmp	r6, #0
 800623e:	dd9f      	ble.n	8006180 <__sflush_r+0x18>
 8006240:	4633      	mov	r3, r6
 8006242:	463a      	mov	r2, r7
 8006244:	4628      	mov	r0, r5
 8006246:	6a21      	ldr	r1, [r4, #32]
 8006248:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800624c:	47e0      	blx	ip
 800624e:	2800      	cmp	r0, #0
 8006250:	dc06      	bgt.n	8006260 <__sflush_r+0xf8>
 8006252:	89a3      	ldrh	r3, [r4, #12]
 8006254:	f04f 30ff 	mov.w	r0, #4294967295
 8006258:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800625c:	81a3      	strh	r3, [r4, #12]
 800625e:	e790      	b.n	8006182 <__sflush_r+0x1a>
 8006260:	4407      	add	r7, r0
 8006262:	1a36      	subs	r6, r6, r0
 8006264:	e7ea      	b.n	800623c <__sflush_r+0xd4>
 8006266:	bf00      	nop
 8006268:	20400001 	.word	0x20400001

0800626c <_fflush_r>:
 800626c:	b538      	push	{r3, r4, r5, lr}
 800626e:	690b      	ldr	r3, [r1, #16]
 8006270:	4605      	mov	r5, r0
 8006272:	460c      	mov	r4, r1
 8006274:	b913      	cbnz	r3, 800627c <_fflush_r+0x10>
 8006276:	2500      	movs	r5, #0
 8006278:	4628      	mov	r0, r5
 800627a:	bd38      	pop	{r3, r4, r5, pc}
 800627c:	b118      	cbz	r0, 8006286 <_fflush_r+0x1a>
 800627e:	6983      	ldr	r3, [r0, #24]
 8006280:	b90b      	cbnz	r3, 8006286 <_fflush_r+0x1a>
 8006282:	f7fe fe3b 	bl	8004efc <__sinit>
 8006286:	4b14      	ldr	r3, [pc, #80]	; (80062d8 <_fflush_r+0x6c>)
 8006288:	429c      	cmp	r4, r3
 800628a:	d11b      	bne.n	80062c4 <_fflush_r+0x58>
 800628c:	686c      	ldr	r4, [r5, #4]
 800628e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006292:	2b00      	cmp	r3, #0
 8006294:	d0ef      	beq.n	8006276 <_fflush_r+0xa>
 8006296:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006298:	07d0      	lsls	r0, r2, #31
 800629a:	d404      	bmi.n	80062a6 <_fflush_r+0x3a>
 800629c:	0599      	lsls	r1, r3, #22
 800629e:	d402      	bmi.n	80062a6 <_fflush_r+0x3a>
 80062a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80062a2:	f7fe fece 	bl	8005042 <__retarget_lock_acquire_recursive>
 80062a6:	4628      	mov	r0, r5
 80062a8:	4621      	mov	r1, r4
 80062aa:	f7ff ff5d 	bl	8006168 <__sflush_r>
 80062ae:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80062b0:	4605      	mov	r5, r0
 80062b2:	07da      	lsls	r2, r3, #31
 80062b4:	d4e0      	bmi.n	8006278 <_fflush_r+0xc>
 80062b6:	89a3      	ldrh	r3, [r4, #12]
 80062b8:	059b      	lsls	r3, r3, #22
 80062ba:	d4dd      	bmi.n	8006278 <_fflush_r+0xc>
 80062bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80062be:	f7fe fec1 	bl	8005044 <__retarget_lock_release_recursive>
 80062c2:	e7d9      	b.n	8006278 <_fflush_r+0xc>
 80062c4:	4b05      	ldr	r3, [pc, #20]	; (80062dc <_fflush_r+0x70>)
 80062c6:	429c      	cmp	r4, r3
 80062c8:	d101      	bne.n	80062ce <_fflush_r+0x62>
 80062ca:	68ac      	ldr	r4, [r5, #8]
 80062cc:	e7df      	b.n	800628e <_fflush_r+0x22>
 80062ce:	4b04      	ldr	r3, [pc, #16]	; (80062e0 <_fflush_r+0x74>)
 80062d0:	429c      	cmp	r4, r3
 80062d2:	bf08      	it	eq
 80062d4:	68ec      	ldreq	r4, [r5, #12]
 80062d6:	e7da      	b.n	800628e <_fflush_r+0x22>
 80062d8:	08006c64 	.word	0x08006c64
 80062dc:	08006c84 	.word	0x08006c84
 80062e0:	08006c44 	.word	0x08006c44

080062e4 <fiprintf>:
 80062e4:	b40e      	push	{r1, r2, r3}
 80062e6:	b503      	push	{r0, r1, lr}
 80062e8:	4601      	mov	r1, r0
 80062ea:	ab03      	add	r3, sp, #12
 80062ec:	4805      	ldr	r0, [pc, #20]	; (8006304 <fiprintf+0x20>)
 80062ee:	f853 2b04 	ldr.w	r2, [r3], #4
 80062f2:	6800      	ldr	r0, [r0, #0]
 80062f4:	9301      	str	r3, [sp, #4]
 80062f6:	f7ff fcb3 	bl	8005c60 <_vfiprintf_r>
 80062fa:	b002      	add	sp, #8
 80062fc:	f85d eb04 	ldr.w	lr, [sp], #4
 8006300:	b003      	add	sp, #12
 8006302:	4770      	bx	lr
 8006304:	20000014 	.word	0x20000014

08006308 <_lseek_r>:
 8006308:	b538      	push	{r3, r4, r5, lr}
 800630a:	4604      	mov	r4, r0
 800630c:	4608      	mov	r0, r1
 800630e:	4611      	mov	r1, r2
 8006310:	2200      	movs	r2, #0
 8006312:	4d05      	ldr	r5, [pc, #20]	; (8006328 <_lseek_r+0x20>)
 8006314:	602a      	str	r2, [r5, #0]
 8006316:	461a      	mov	r2, r3
 8006318:	f7fb f9f0 	bl	80016fc <_lseek>
 800631c:	1c43      	adds	r3, r0, #1
 800631e:	d102      	bne.n	8006326 <_lseek_r+0x1e>
 8006320:	682b      	ldr	r3, [r5, #0]
 8006322:	b103      	cbz	r3, 8006326 <_lseek_r+0x1e>
 8006324:	6023      	str	r3, [r4, #0]
 8006326:	bd38      	pop	{r3, r4, r5, pc}
 8006328:	20000ec0 	.word	0x20000ec0

0800632c <__swhatbuf_r>:
 800632c:	b570      	push	{r4, r5, r6, lr}
 800632e:	460e      	mov	r6, r1
 8006330:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006334:	4614      	mov	r4, r2
 8006336:	2900      	cmp	r1, #0
 8006338:	461d      	mov	r5, r3
 800633a:	b096      	sub	sp, #88	; 0x58
 800633c:	da08      	bge.n	8006350 <__swhatbuf_r+0x24>
 800633e:	2200      	movs	r2, #0
 8006340:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8006344:	602a      	str	r2, [r5, #0]
 8006346:	061a      	lsls	r2, r3, #24
 8006348:	d410      	bmi.n	800636c <__swhatbuf_r+0x40>
 800634a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800634e:	e00e      	b.n	800636e <__swhatbuf_r+0x42>
 8006350:	466a      	mov	r2, sp
 8006352:	f000 f8df 	bl	8006514 <_fstat_r>
 8006356:	2800      	cmp	r0, #0
 8006358:	dbf1      	blt.n	800633e <__swhatbuf_r+0x12>
 800635a:	9a01      	ldr	r2, [sp, #4]
 800635c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006360:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006364:	425a      	negs	r2, r3
 8006366:	415a      	adcs	r2, r3
 8006368:	602a      	str	r2, [r5, #0]
 800636a:	e7ee      	b.n	800634a <__swhatbuf_r+0x1e>
 800636c:	2340      	movs	r3, #64	; 0x40
 800636e:	2000      	movs	r0, #0
 8006370:	6023      	str	r3, [r4, #0]
 8006372:	b016      	add	sp, #88	; 0x58
 8006374:	bd70      	pop	{r4, r5, r6, pc}
	...

08006378 <__smakebuf_r>:
 8006378:	898b      	ldrh	r3, [r1, #12]
 800637a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800637c:	079d      	lsls	r5, r3, #30
 800637e:	4606      	mov	r6, r0
 8006380:	460c      	mov	r4, r1
 8006382:	d507      	bpl.n	8006394 <__smakebuf_r+0x1c>
 8006384:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006388:	6023      	str	r3, [r4, #0]
 800638a:	6123      	str	r3, [r4, #16]
 800638c:	2301      	movs	r3, #1
 800638e:	6163      	str	r3, [r4, #20]
 8006390:	b002      	add	sp, #8
 8006392:	bd70      	pop	{r4, r5, r6, pc}
 8006394:	466a      	mov	r2, sp
 8006396:	ab01      	add	r3, sp, #4
 8006398:	f7ff ffc8 	bl	800632c <__swhatbuf_r>
 800639c:	9900      	ldr	r1, [sp, #0]
 800639e:	4605      	mov	r5, r0
 80063a0:	4630      	mov	r0, r6
 80063a2:	f7ff fa65 	bl	8005870 <_malloc_r>
 80063a6:	b948      	cbnz	r0, 80063bc <__smakebuf_r+0x44>
 80063a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80063ac:	059a      	lsls	r2, r3, #22
 80063ae:	d4ef      	bmi.n	8006390 <__smakebuf_r+0x18>
 80063b0:	f023 0303 	bic.w	r3, r3, #3
 80063b4:	f043 0302 	orr.w	r3, r3, #2
 80063b8:	81a3      	strh	r3, [r4, #12]
 80063ba:	e7e3      	b.n	8006384 <__smakebuf_r+0xc>
 80063bc:	4b0d      	ldr	r3, [pc, #52]	; (80063f4 <__smakebuf_r+0x7c>)
 80063be:	62b3      	str	r3, [r6, #40]	; 0x28
 80063c0:	89a3      	ldrh	r3, [r4, #12]
 80063c2:	6020      	str	r0, [r4, #0]
 80063c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80063c8:	81a3      	strh	r3, [r4, #12]
 80063ca:	9b00      	ldr	r3, [sp, #0]
 80063cc:	6120      	str	r0, [r4, #16]
 80063ce:	6163      	str	r3, [r4, #20]
 80063d0:	9b01      	ldr	r3, [sp, #4]
 80063d2:	b15b      	cbz	r3, 80063ec <__smakebuf_r+0x74>
 80063d4:	4630      	mov	r0, r6
 80063d6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80063da:	f000 f8ad 	bl	8006538 <_isatty_r>
 80063de:	b128      	cbz	r0, 80063ec <__smakebuf_r+0x74>
 80063e0:	89a3      	ldrh	r3, [r4, #12]
 80063e2:	f023 0303 	bic.w	r3, r3, #3
 80063e6:	f043 0301 	orr.w	r3, r3, #1
 80063ea:	81a3      	strh	r3, [r4, #12]
 80063ec:	89a0      	ldrh	r0, [r4, #12]
 80063ee:	4305      	orrs	r5, r0
 80063f0:	81a5      	strh	r5, [r4, #12]
 80063f2:	e7cd      	b.n	8006390 <__smakebuf_r+0x18>
 80063f4:	08004e95 	.word	0x08004e95

080063f8 <__ascii_mbtowc>:
 80063f8:	b082      	sub	sp, #8
 80063fa:	b901      	cbnz	r1, 80063fe <__ascii_mbtowc+0x6>
 80063fc:	a901      	add	r1, sp, #4
 80063fe:	b142      	cbz	r2, 8006412 <__ascii_mbtowc+0x1a>
 8006400:	b14b      	cbz	r3, 8006416 <__ascii_mbtowc+0x1e>
 8006402:	7813      	ldrb	r3, [r2, #0]
 8006404:	600b      	str	r3, [r1, #0]
 8006406:	7812      	ldrb	r2, [r2, #0]
 8006408:	1e10      	subs	r0, r2, #0
 800640a:	bf18      	it	ne
 800640c:	2001      	movne	r0, #1
 800640e:	b002      	add	sp, #8
 8006410:	4770      	bx	lr
 8006412:	4610      	mov	r0, r2
 8006414:	e7fb      	b.n	800640e <__ascii_mbtowc+0x16>
 8006416:	f06f 0001 	mvn.w	r0, #1
 800641a:	e7f8      	b.n	800640e <__ascii_mbtowc+0x16>

0800641c <memmove>:
 800641c:	4288      	cmp	r0, r1
 800641e:	b510      	push	{r4, lr}
 8006420:	eb01 0402 	add.w	r4, r1, r2
 8006424:	d902      	bls.n	800642c <memmove+0x10>
 8006426:	4284      	cmp	r4, r0
 8006428:	4623      	mov	r3, r4
 800642a:	d807      	bhi.n	800643c <memmove+0x20>
 800642c:	1e43      	subs	r3, r0, #1
 800642e:	42a1      	cmp	r1, r4
 8006430:	d008      	beq.n	8006444 <memmove+0x28>
 8006432:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006436:	f803 2f01 	strb.w	r2, [r3, #1]!
 800643a:	e7f8      	b.n	800642e <memmove+0x12>
 800643c:	4601      	mov	r1, r0
 800643e:	4402      	add	r2, r0
 8006440:	428a      	cmp	r2, r1
 8006442:	d100      	bne.n	8006446 <memmove+0x2a>
 8006444:	bd10      	pop	{r4, pc}
 8006446:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800644a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800644e:	e7f7      	b.n	8006440 <memmove+0x24>

08006450 <__malloc_lock>:
 8006450:	4801      	ldr	r0, [pc, #4]	; (8006458 <__malloc_lock+0x8>)
 8006452:	f7fe bdf6 	b.w	8005042 <__retarget_lock_acquire_recursive>
 8006456:	bf00      	nop
 8006458:	20000eb4 	.word	0x20000eb4

0800645c <__malloc_unlock>:
 800645c:	4801      	ldr	r0, [pc, #4]	; (8006464 <__malloc_unlock+0x8>)
 800645e:	f7fe bdf1 	b.w	8005044 <__retarget_lock_release_recursive>
 8006462:	bf00      	nop
 8006464:	20000eb4 	.word	0x20000eb4

08006468 <_realloc_r>:
 8006468:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800646c:	4680      	mov	r8, r0
 800646e:	4614      	mov	r4, r2
 8006470:	460e      	mov	r6, r1
 8006472:	b921      	cbnz	r1, 800647e <_realloc_r+0x16>
 8006474:	4611      	mov	r1, r2
 8006476:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800647a:	f7ff b9f9 	b.w	8005870 <_malloc_r>
 800647e:	b92a      	cbnz	r2, 800648c <_realloc_r+0x24>
 8006480:	f7ff f98e 	bl	80057a0 <_free_r>
 8006484:	4625      	mov	r5, r4
 8006486:	4628      	mov	r0, r5
 8006488:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800648c:	f000 f864 	bl	8006558 <_malloc_usable_size_r>
 8006490:	4284      	cmp	r4, r0
 8006492:	4607      	mov	r7, r0
 8006494:	d802      	bhi.n	800649c <_realloc_r+0x34>
 8006496:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800649a:	d812      	bhi.n	80064c2 <_realloc_r+0x5a>
 800649c:	4621      	mov	r1, r4
 800649e:	4640      	mov	r0, r8
 80064a0:	f7ff f9e6 	bl	8005870 <_malloc_r>
 80064a4:	4605      	mov	r5, r0
 80064a6:	2800      	cmp	r0, #0
 80064a8:	d0ed      	beq.n	8006486 <_realloc_r+0x1e>
 80064aa:	42bc      	cmp	r4, r7
 80064ac:	4622      	mov	r2, r4
 80064ae:	4631      	mov	r1, r6
 80064b0:	bf28      	it	cs
 80064b2:	463a      	movcs	r2, r7
 80064b4:	f7fd f98c 	bl	80037d0 <memcpy>
 80064b8:	4631      	mov	r1, r6
 80064ba:	4640      	mov	r0, r8
 80064bc:	f7ff f970 	bl	80057a0 <_free_r>
 80064c0:	e7e1      	b.n	8006486 <_realloc_r+0x1e>
 80064c2:	4635      	mov	r5, r6
 80064c4:	e7df      	b.n	8006486 <_realloc_r+0x1e>
	...

080064c8 <_read_r>:
 80064c8:	b538      	push	{r3, r4, r5, lr}
 80064ca:	4604      	mov	r4, r0
 80064cc:	4608      	mov	r0, r1
 80064ce:	4611      	mov	r1, r2
 80064d0:	2200      	movs	r2, #0
 80064d2:	4d05      	ldr	r5, [pc, #20]	; (80064e8 <_read_r+0x20>)
 80064d4:	602a      	str	r2, [r5, #0]
 80064d6:	461a      	mov	r2, r3
 80064d8:	f7fb f8f8 	bl	80016cc <_read>
 80064dc:	1c43      	adds	r3, r0, #1
 80064de:	d102      	bne.n	80064e6 <_read_r+0x1e>
 80064e0:	682b      	ldr	r3, [r5, #0]
 80064e2:	b103      	cbz	r3, 80064e6 <_read_r+0x1e>
 80064e4:	6023      	str	r3, [r4, #0]
 80064e6:	bd38      	pop	{r3, r4, r5, pc}
 80064e8:	20000ec0 	.word	0x20000ec0

080064ec <__ascii_wctomb>:
 80064ec:	4603      	mov	r3, r0
 80064ee:	4608      	mov	r0, r1
 80064f0:	b141      	cbz	r1, 8006504 <__ascii_wctomb+0x18>
 80064f2:	2aff      	cmp	r2, #255	; 0xff
 80064f4:	d904      	bls.n	8006500 <__ascii_wctomb+0x14>
 80064f6:	228a      	movs	r2, #138	; 0x8a
 80064f8:	f04f 30ff 	mov.w	r0, #4294967295
 80064fc:	601a      	str	r2, [r3, #0]
 80064fe:	4770      	bx	lr
 8006500:	2001      	movs	r0, #1
 8006502:	700a      	strb	r2, [r1, #0]
 8006504:	4770      	bx	lr

08006506 <abort>:
 8006506:	2006      	movs	r0, #6
 8006508:	b508      	push	{r3, lr}
 800650a:	f000 f855 	bl	80065b8 <raise>
 800650e:	2001      	movs	r0, #1
 8006510:	f7fb f8d6 	bl	80016c0 <_exit>

08006514 <_fstat_r>:
 8006514:	b538      	push	{r3, r4, r5, lr}
 8006516:	2300      	movs	r3, #0
 8006518:	4d06      	ldr	r5, [pc, #24]	; (8006534 <_fstat_r+0x20>)
 800651a:	4604      	mov	r4, r0
 800651c:	4608      	mov	r0, r1
 800651e:	4611      	mov	r1, r2
 8006520:	602b      	str	r3, [r5, #0]
 8006522:	f7fb f8e4 	bl	80016ee <_fstat>
 8006526:	1c43      	adds	r3, r0, #1
 8006528:	d102      	bne.n	8006530 <_fstat_r+0x1c>
 800652a:	682b      	ldr	r3, [r5, #0]
 800652c:	b103      	cbz	r3, 8006530 <_fstat_r+0x1c>
 800652e:	6023      	str	r3, [r4, #0]
 8006530:	bd38      	pop	{r3, r4, r5, pc}
 8006532:	bf00      	nop
 8006534:	20000ec0 	.word	0x20000ec0

08006538 <_isatty_r>:
 8006538:	b538      	push	{r3, r4, r5, lr}
 800653a:	2300      	movs	r3, #0
 800653c:	4d05      	ldr	r5, [pc, #20]	; (8006554 <_isatty_r+0x1c>)
 800653e:	4604      	mov	r4, r0
 8006540:	4608      	mov	r0, r1
 8006542:	602b      	str	r3, [r5, #0]
 8006544:	f7fb f8d8 	bl	80016f8 <_isatty>
 8006548:	1c43      	adds	r3, r0, #1
 800654a:	d102      	bne.n	8006552 <_isatty_r+0x1a>
 800654c:	682b      	ldr	r3, [r5, #0]
 800654e:	b103      	cbz	r3, 8006552 <_isatty_r+0x1a>
 8006550:	6023      	str	r3, [r4, #0]
 8006552:	bd38      	pop	{r3, r4, r5, pc}
 8006554:	20000ec0 	.word	0x20000ec0

08006558 <_malloc_usable_size_r>:
 8006558:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800655c:	1f18      	subs	r0, r3, #4
 800655e:	2b00      	cmp	r3, #0
 8006560:	bfbc      	itt	lt
 8006562:	580b      	ldrlt	r3, [r1, r0]
 8006564:	18c0      	addlt	r0, r0, r3
 8006566:	4770      	bx	lr

08006568 <_raise_r>:
 8006568:	291f      	cmp	r1, #31
 800656a:	b538      	push	{r3, r4, r5, lr}
 800656c:	4604      	mov	r4, r0
 800656e:	460d      	mov	r5, r1
 8006570:	d904      	bls.n	800657c <_raise_r+0x14>
 8006572:	2316      	movs	r3, #22
 8006574:	6003      	str	r3, [r0, #0]
 8006576:	f04f 30ff 	mov.w	r0, #4294967295
 800657a:	bd38      	pop	{r3, r4, r5, pc}
 800657c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800657e:	b112      	cbz	r2, 8006586 <_raise_r+0x1e>
 8006580:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006584:	b94b      	cbnz	r3, 800659a <_raise_r+0x32>
 8006586:	4620      	mov	r0, r4
 8006588:	f000 f830 	bl	80065ec <_getpid_r>
 800658c:	462a      	mov	r2, r5
 800658e:	4601      	mov	r1, r0
 8006590:	4620      	mov	r0, r4
 8006592:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006596:	f000 b817 	b.w	80065c8 <_kill_r>
 800659a:	2b01      	cmp	r3, #1
 800659c:	d00a      	beq.n	80065b4 <_raise_r+0x4c>
 800659e:	1c59      	adds	r1, r3, #1
 80065a0:	d103      	bne.n	80065aa <_raise_r+0x42>
 80065a2:	2316      	movs	r3, #22
 80065a4:	6003      	str	r3, [r0, #0]
 80065a6:	2001      	movs	r0, #1
 80065a8:	e7e7      	b.n	800657a <_raise_r+0x12>
 80065aa:	2400      	movs	r4, #0
 80065ac:	4628      	mov	r0, r5
 80065ae:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80065b2:	4798      	blx	r3
 80065b4:	2000      	movs	r0, #0
 80065b6:	e7e0      	b.n	800657a <_raise_r+0x12>

080065b8 <raise>:
 80065b8:	4b02      	ldr	r3, [pc, #8]	; (80065c4 <raise+0xc>)
 80065ba:	4601      	mov	r1, r0
 80065bc:	6818      	ldr	r0, [r3, #0]
 80065be:	f7ff bfd3 	b.w	8006568 <_raise_r>
 80065c2:	bf00      	nop
 80065c4:	20000014 	.word	0x20000014

080065c8 <_kill_r>:
 80065c8:	b538      	push	{r3, r4, r5, lr}
 80065ca:	2300      	movs	r3, #0
 80065cc:	4d06      	ldr	r5, [pc, #24]	; (80065e8 <_kill_r+0x20>)
 80065ce:	4604      	mov	r4, r0
 80065d0:	4608      	mov	r0, r1
 80065d2:	4611      	mov	r1, r2
 80065d4:	602b      	str	r3, [r5, #0]
 80065d6:	f7fb f86b 	bl	80016b0 <_kill>
 80065da:	1c43      	adds	r3, r0, #1
 80065dc:	d102      	bne.n	80065e4 <_kill_r+0x1c>
 80065de:	682b      	ldr	r3, [r5, #0]
 80065e0:	b103      	cbz	r3, 80065e4 <_kill_r+0x1c>
 80065e2:	6023      	str	r3, [r4, #0]
 80065e4:	bd38      	pop	{r3, r4, r5, pc}
 80065e6:	bf00      	nop
 80065e8:	20000ec0 	.word	0x20000ec0

080065ec <_getpid_r>:
 80065ec:	f7fb b85e 	b.w	80016ac <_getpid>

080065f0 <_init>:
 80065f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065f2:	bf00      	nop
 80065f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80065f6:	bc08      	pop	{r3}
 80065f8:	469e      	mov	lr, r3
 80065fa:	4770      	bx	lr

080065fc <_fini>:
 80065fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065fe:	bf00      	nop
 8006600:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006602:	bc08      	pop	{r3}
 8006604:	469e      	mov	lr, r3
 8006606:	4770      	bx	lr
