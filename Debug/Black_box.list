
Black_box.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006ac8  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000994  08006bd8  08006bd8  00016bd8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800756c  0800756c  000201ec  2**0
                  CONTENTS
  4 .ARM          00000000  0800756c  0800756c  000201ec  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800756c  0800756c  000201ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800756c  0800756c  0001756c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007570  08007570  00017570  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  08007574  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000f78  200001ec  08007760  000201ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001164  08007760  00021164  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   000176f2  00000000  00000000  00020215  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003826  00000000  00000000  00037907  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    00011ba3  00000000  00000000  0003b12d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ee0  00000000  00000000  0004ccd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000023d8  00000000  00000000  0004dbb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001a40e  00000000  00000000  0004ff88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001a9e7  00000000  00000000  0006a396  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000950e0  00000000  00000000  00084d7d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00119e5d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000043a8  00000000  00000000  00119eb0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001ec 	.word	0x200001ec
 800012c:	00000000 	.word	0x00000000
 8000130:	08006bc0 	.word	0x08006bc0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001f0 	.word	0x200001f0
 800014c:	08006bc0 	.word	0x08006bc0

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <RingBuf_DataWatch.part.0>:
 * @param[out] data Data from buffer
 * @param[in] len Length of data to be read [bytes]
 * @param[in] rb #RINGBUF_t structure instance
 * @return #RINGBUF_STATUS enum
 */
RINGBUF_STATUS RingBuf_DataWatch(void *data, u16_t len, RINGBUF_t *rb) {
 8000a88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000a8c:	460e      	mov	r6, r1
    if (len > rb->size)
        return RINGBUF_OVERFLOW;
    // OUTPUT data index start address
    u16_t s_addr = 0;
    // available space in the end of buffer
    u16_t space = rb->size - rb->tail;
 8000a8e:	68d1      	ldr	r1, [r2, #12]
 8000a90:	6857      	ldr	r7, [r2, #4]
 8000a92:	fa1f f981 	uxth.w	r9, r1
 8000a96:	b2bf      	uxth	r7, r7
 8000a98:	eba9 0507 	sub.w	r5, r9, r7
 8000a9c:	b2ad      	uxth	r5, r5
    u16_t loc_tail = rb->tail;
    if (len > space) { // if len > available space
 8000a9e:	42b5      	cmp	r5, r6
RINGBUF_STATUS RingBuf_DataWatch(void *data, u16_t len, RINGBUF_t *rb) {
 8000aa0:	4614      	mov	r4, r2
 8000aa2:	4680      	mov	r8, r0
    u16_t loc_tail = rb->tail;
 8000aa4:	6853      	ldr	r3, [r2, #4]
    if (len > space) { // if len > available space
 8000aa6:	d310      	bcc.n	8000aca <RingBuf_DataWatch.part.0+0x42>
 8000aa8:	2500      	movs	r5, #0
 8000aaa:	b29b      	uxth	r3, r3
        s_addr = space;
        // new length - len-space
        len -= space;
    }
    // copy all the data from the buf storage
    memcpy(&data[s_addr * rb->cell_size], &rb->buf[loc_tail * rb->cell_size], len * rb->cell_size);
 8000aac:	6920      	ldr	r0, [r4, #16]
 8000aae:	6822      	ldr	r2, [r4, #0]
 8000ab0:	6921      	ldr	r1, [r4, #16]
 8000ab2:	fb05 8000 	mla	r0, r5, r0, r8
 8000ab6:	fb03 2101 	mla	r1, r3, r1, r2
 8000aba:	6922      	ldr	r2, [r4, #16]
 8000abc:	fb06 f202 	mul.w	r2, r6, r2
 8000ac0:	f003 f96e 	bl	8003da0 <memcpy>
    return RINGBUF_OK;
}
 8000ac4:	2000      	movs	r0, #0
 8000ac6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        memcpy(&data[s_addr * rb->cell_size], &rb->buf[loc_tail * rb->cell_size], space * rb->cell_size);
 8000aca:	6922      	ldr	r2, [r4, #16]
 8000acc:	6921      	ldr	r1, [r4, #16]
 8000ace:	6822      	ldr	r2, [r4, #0]
 8000ad0:	b29b      	uxth	r3, r3
 8000ad2:	fb01 2103 	mla	r1, r1, r3, r2
 8000ad6:	6922      	ldr	r2, [r4, #16]
 8000ad8:	443e      	add	r6, r7
 8000ada:	fb05 f202 	mul.w	r2, r5, r2
        len -= space;
 8000ade:	eba6 0609 	sub.w	r6, r6, r9
        memcpy(&data[s_addr * rb->cell_size], &rb->buf[loc_tail * rb->cell_size], space * rb->cell_size);
 8000ae2:	f003 f95d 	bl	8003da0 <memcpy>
        len -= space;
 8000ae6:	b2b6      	uxth	r6, r6
 8000ae8:	2300      	movs	r3, #0
 8000aea:	e7df      	b.n	8000aac <RingBuf_DataWatch.part.0+0x24>

08000aec <RingBuf_Init>:
    rb->size = size; // size of array
 8000aec:	60d9      	str	r1, [r3, #12]
    rb->buf = buf;      // set pointer to buffer
 8000aee:	6018      	str	r0, [r3, #0]
    rb->cell_size = cellsize; // size of 1 cell of array
 8000af0:	611a      	str	r2, [r3, #16]
    if (rb->buf == NULL) return RINGBUF_PARAM_ERR;
 8000af2:	b120      	cbz	r0, 8000afe <RingBuf_Init+0x12>
    rb->head = rb->tail = 0;
 8000af4:	2200      	movs	r2, #0
 8000af6:	605a      	str	r2, [r3, #4]
    return rb->buf ? RINGBUF_OK : RINGBUF_PARAM_ERR;
 8000af8:	4610      	mov	r0, r2
    rb->head = rb->tail = 0;
 8000afa:	609a      	str	r2, [r3, #8]
    return rb->buf ? RINGBUF_OK : RINGBUF_PARAM_ERR;
 8000afc:	4770      	bx	lr
 8000afe:	2002      	movs	r0, #2
}
 8000b00:	4770      	bx	lr
 8000b02:	bf00      	nop

08000b04 <RingBuf_Available>:
    if (rb->buf == NULL) return RINGBUF_PARAM_ERR;
 8000b04:	680a      	ldr	r2, [r1, #0]
RINGBUF_STATUS RingBuf_Available(u16_t *len, RINGBUF_t *rb) {
 8000b06:	4603      	mov	r3, r0
    if (rb->buf == NULL) return RINGBUF_PARAM_ERR;
 8000b08:	b18a      	cbz	r2, 8000b2e <RingBuf_Available+0x2a>
    if (rb->head < rb->tail)
 8000b0a:	6888      	ldr	r0, [r1, #8]
 8000b0c:	684a      	ldr	r2, [r1, #4]
 8000b0e:	4290      	cmp	r0, r2
 8000b10:	d207      	bcs.n	8000b22 <RingBuf_Available+0x1e>
        *len = rb->size - rb->tail + rb->head;
 8000b12:	68ca      	ldr	r2, [r1, #12]
 8000b14:	6848      	ldr	r0, [r1, #4]
 8000b16:	6889      	ldr	r1, [r1, #8]
 8000b18:	440a      	add	r2, r1
 8000b1a:	1a12      	subs	r2, r2, r0
 8000b1c:	801a      	strh	r2, [r3, #0]
    return RINGBUF_OK;
 8000b1e:	2000      	movs	r0, #0
 8000b20:	4770      	bx	lr
        *len = rb->head - rb->tail;
 8000b22:	688a      	ldr	r2, [r1, #8]
 8000b24:	6849      	ldr	r1, [r1, #4]
    return RINGBUF_OK;
 8000b26:	2000      	movs	r0, #0
        *len = rb->head - rb->tail;
 8000b28:	1a52      	subs	r2, r2, r1
 8000b2a:	801a      	strh	r2, [r3, #0]
 8000b2c:	4770      	bx	lr
    if (rb->buf == NULL) return RINGBUF_PARAM_ERR;
 8000b2e:	2002      	movs	r0, #2
}
 8000b30:	4770      	bx	lr
 8000b32:	bf00      	nop

08000b34 <RingBuf_BytePut>:
    if (rb->buf == NULL) return RINGBUF_PARAM_ERR;
 8000b34:	680b      	ldr	r3, [r1, #0]
 8000b36:	b183      	cbz	r3, 8000b5a <RingBuf_BytePut+0x26>
    rb->buf[rb->head++] = data; // put byte in cell and increment data
 8000b38:	688a      	ldr	r2, [r1, #8]
RINGBUF_STATUS RingBuf_BytePut(const u8_t data, RINGBUF_t *rb) {
 8000b3a:	b410      	push	{r4}
    rb->buf[rb->head++] = data; // put byte in cell and increment data
 8000b3c:	1c54      	adds	r4, r2, #1
 8000b3e:	608c      	str	r4, [r1, #8]
 8000b40:	5498      	strb	r0, [r3, r2]
    if (rb->head >= rb->size) // if overflow
 8000b42:	688a      	ldr	r2, [r1, #8]
 8000b44:	68cb      	ldr	r3, [r1, #12]
 8000b46:	429a      	cmp	r2, r3
 8000b48:	d202      	bcs.n	8000b50 <RingBuf_BytePut+0x1c>
    return RINGBUF_OK;
 8000b4a:	2000      	movs	r0, #0
}
 8000b4c:	bc10      	pop	{r4}
 8000b4e:	4770      	bx	lr
        rb->head = 0;   // set to start
 8000b50:	2300      	movs	r3, #0
}
 8000b52:	bc10      	pop	{r4}
    return RINGBUF_OK;
 8000b54:	4618      	mov	r0, r3
        rb->head = 0;   // set to start
 8000b56:	608b      	str	r3, [r1, #8]
}
 8000b58:	4770      	bx	lr
    if (rb->buf == NULL) return RINGBUF_PARAM_ERR;
 8000b5a:	2002      	movs	r0, #2
}
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop

08000b60 <RingBuf_DataRead>:
RINGBUF_STATUS RingBuf_DataRead(void *data, u16_t len, RINGBUF_t *rb) {
 8000b60:	b570      	push	{r4, r5, r6, lr}
    if (rb->buf == NULL) return RINGBUF_PARAM_ERR;
 8000b62:	6816      	ldr	r6, [r2, #0]
 8000b64:	b18e      	cbz	r6, 8000b8a <RingBuf_DataRead+0x2a>
    if (data == NULL)
 8000b66:	b180      	cbz	r0, 8000b8a <RingBuf_DataRead+0x2a>
    if (len > rb->size)
 8000b68:	68d3      	ldr	r3, [r2, #12]
 8000b6a:	460d      	mov	r5, r1
 8000b6c:	4299      	cmp	r1, r3
 8000b6e:	4614      	mov	r4, r2
 8000b70:	d80d      	bhi.n	8000b8e <RingBuf_DataRead+0x2e>
 8000b72:	f7ff ff89 	bl	8000a88 <RingBuf_DataWatch.part.0>
    if (st != RINGBUF_OK)
 8000b76:	b938      	cbnz	r0, 8000b88 <RingBuf_DataRead+0x28>
    rb->tail += len;
 8000b78:	6861      	ldr	r1, [r4, #4]
 8000b7a:	440d      	add	r5, r1
 8000b7c:	6065      	str	r5, [r4, #4]
    if (rb->tail >= rb->size)
 8000b7e:	6862      	ldr	r2, [r4, #4]
 8000b80:	68e3      	ldr	r3, [r4, #12]
 8000b82:	429a      	cmp	r2, r3
 8000b84:	d300      	bcc.n	8000b88 <RingBuf_DataRead+0x28>
        rb->tail = 0;
 8000b86:	6060      	str	r0, [r4, #4]
}
 8000b88:	bd70      	pop	{r4, r5, r6, pc}
    if (rb->buf == NULL) return RINGBUF_PARAM_ERR;
 8000b8a:	2002      	movs	r0, #2
}
 8000b8c:	bd70      	pop	{r4, r5, r6, pc}
        return RINGBUF_OVERFLOW;
 8000b8e:	2003      	movs	r0, #3
}
 8000b90:	bd70      	pop	{r4, r5, r6, pc}
 8000b92:	bf00      	nop

08000b94 <lcd_bufupload>:
  HAL_SPI_Transmit(&hspi2, data, N, 10);
  DISP_INIT_SEND_DAT;
}

void lcd_bufupload(void)
{
 8000b94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b96:	24b0      	movs	r4, #176	; 0xb0
 8000b98:	4d14      	ldr	r5, [pc, #80]	; (8000bec <lcd_bufupload+0x58>)
  DISP_INIT_SEND_COM;
 8000b9a:	4f15      	ldr	r7, [pc, #84]	; (8000bf0 <lcd_bufupload+0x5c>)
  HAL_SPI_Transmit(&hspi2, data, N, 10);
 8000b9c:	4e15      	ldr	r6, [pc, #84]	; (8000bf4 <lcd_bufupload+0x60>)
{
 8000b9e:	b083      	sub	sp, #12
  for(uint8_t j = 0; j < 8; j++)
  {
	uint8_t tmp_arr[] = {(0xB0 + j), 0x10, 0x00};
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	2310      	movs	r3, #16
  DISP_INIT_SEND_COM;
 8000ba4:	2102      	movs	r1, #2
 8000ba6:	4638      	mov	r0, r7
	uint8_t tmp_arr[] = {(0xB0 + j), 0x10, 0x00};
 8000ba8:	f88d 4004 	strb.w	r4, [sp, #4]
 8000bac:	f88d 3005 	strb.w	r3, [sp, #5]
 8000bb0:	f88d 2006 	strb.w	r2, [sp, #6]
  DISP_INIT_SEND_COM;
 8000bb4:	f001 fcb0 	bl	8002518 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi2, data, N, 10);
 8000bb8:	230a      	movs	r3, #10
 8000bba:	2203      	movs	r2, #3
 8000bbc:	a901      	add	r1, sp, #4
 8000bbe:	4630      	mov	r0, r6
 8000bc0:	f002 fb76 	bl	80032b0 <HAL_SPI_Transmit>
  for(uint8_t j = 0; j < 8; j++)
 8000bc4:	3401      	adds	r4, #1
  DISP_INIT_SEND_DAT;
 8000bc6:	2201      	movs	r2, #1
 8000bc8:	2102      	movs	r1, #2
 8000bca:	4638      	mov	r0, r7
 8000bcc:	f001 fca4 	bl	8002518 <HAL_GPIO_WritePin>
  for(uint8_t j = 0; j < 8; j++)
 8000bd0:	b2e4      	uxtb	r4, r4
    lcd_sendcommands(tmp_arr, 3);
    HAL_SPI_Transmit(&hspi2, dispbuffer[j], 128, 10);
 8000bd2:	4629      	mov	r1, r5
 8000bd4:	230a      	movs	r3, #10
 8000bd6:	2280      	movs	r2, #128	; 0x80
 8000bd8:	4630      	mov	r0, r6
 8000bda:	f002 fb69 	bl	80032b0 <HAL_SPI_Transmit>
  for(uint8_t j = 0; j < 8; j++)
 8000bde:	2cb8      	cmp	r4, #184	; 0xb8
 8000be0:	f105 0580 	add.w	r5, r5, #128	; 0x80
 8000be4:	d1dc      	bne.n	8000ba0 <lcd_bufupload+0xc>
  }
}
 8000be6:	b003      	add	sp, #12
 8000be8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000bea:	bf00      	nop
 8000bec:	20000208 	.word	0x20000208
 8000bf0:	40010800 	.word	0x40010800
 8000bf4:	2000070c 	.word	0x2000070c

08000bf8 <lcd_init>:
{
 8000bf8:	b510      	push	{r4, lr}
  DISP_RESET_OFF;
 8000bfa:	4c1e      	ldr	r4, [pc, #120]	; (8000c74 <lcd_init+0x7c>)
{
 8000bfc:	b084      	sub	sp, #16
  DISP_RESET_OFF;
 8000bfe:	4620      	mov	r0, r4
 8000c00:	2201      	movs	r2, #1
 8000c02:	2104      	movs	r1, #4
 8000c04:	f001 fc88 	bl	8002518 <HAL_GPIO_WritePin>
  DISP_INIT_SEND_DAT;
 8000c08:	2201      	movs	r2, #1
 8000c0a:	2102      	movs	r1, #2
 8000c0c:	4620      	mov	r0, r4
 8000c0e:	f001 fc83 	bl	8002518 <HAL_GPIO_WritePin>
  HAL_Delay(2);
 8000c12:	2002      	movs	r0, #2
 8000c14:	f000 fefe 	bl	8001a14 <HAL_Delay>
  DISP_RESET_ON;
 8000c18:	2200      	movs	r2, #0
 8000c1a:	2104      	movs	r1, #4
 8000c1c:	4620      	mov	r0, r4
 8000c1e:	f001 fc7b 	bl	8002518 <HAL_GPIO_WritePin>
  HAL_Delay(2);
 8000c22:	2002      	movs	r0, #2
 8000c24:	f000 fef6 	bl	8001a14 <HAL_Delay>
  DISP_RESET_OFF;
 8000c28:	4620      	mov	r0, r4
 8000c2a:	2201      	movs	r2, #1
 8000c2c:	2104      	movs	r1, #4
 8000c2e:	f001 fc73 	bl	8002518 <HAL_GPIO_WritePin>
  DISP_INIT_SEND_COM;
 8000c32:	4620      	mov	r0, r4
 8000c34:	2200      	movs	r2, #0
 8000c36:	2102      	movs	r1, #2
 8000c38:	f001 fc6e 	bl	8002518 <HAL_GPIO_WritePin>
  uint8_t init_data_array[13] = {
 8000c3c:	46ec      	mov	ip, sp
 8000c3e:	4b0e      	ldr	r3, [pc, #56]	; (8000c78 <lcd_init+0x80>)
 8000c40:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000c42:	e8ac 0007 	stmia.w	ip!, {r0, r1, r2}
  HAL_SPI_Transmit(&hspi2, init_data_array, 13, 20);
 8000c46:	4669      	mov	r1, sp
  uint8_t init_data_array[13] = {
 8000c48:	f88c 3000 	strb.w	r3, [ip]
  HAL_SPI_Transmit(&hspi2, init_data_array, 13, 20);
 8000c4c:	220d      	movs	r2, #13
 8000c4e:	2314      	movs	r3, #20
 8000c50:	480a      	ldr	r0, [pc, #40]	; (8000c7c <lcd_init+0x84>)
 8000c52:	f002 fb2d 	bl	80032b0 <HAL_SPI_Transmit>
}

void lcd_buferase(void)
{
  for(uint8_t j = 0; j < 8; j++)
    for(uint8_t i = 0; i < 128; i++) dispbuffer[j][i] = 0;
 8000c56:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c5a:	2100      	movs	r1, #0
 8000c5c:	4808      	ldr	r0, [pc, #32]	; (8000c80 <lcd_init+0x88>)
 8000c5e:	f003 f8ad 	bl	8003dbc <memset>
  lcd_bufupload();
 8000c62:	f7ff ff97 	bl	8000b94 <lcd_bufupload>
  DISP_INIT_SEND_DAT;
 8000c66:	2201      	movs	r2, #1
 8000c68:	2102      	movs	r1, #2
 8000c6a:	4620      	mov	r0, r4
 8000c6c:	f001 fc54 	bl	8002518 <HAL_GPIO_WritePin>
}
 8000c70:	b004      	add	sp, #16
 8000c72:	bd10      	pop	{r4, pc}
 8000c74:	40010800 	.word	0x40010800
 8000c78:	08006bd8 	.word	0x08006bd8
 8000c7c:	2000070c 	.word	0x2000070c
 8000c80:	20000208 	.word	0x20000208

08000c84 <lcd_bufwstr8x5>:
{
 8000c84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if(str == NULL) str = str_null;
 8000c88:	4c1d      	ldr	r4, [pc, #116]	; (8000d00 <lcd_bufwstr8x5+0x7c>)
{
 8000c8a:	b083      	sub	sp, #12
  if(str == NULL) str = str_null;
 8000c8c:	2800      	cmp	r0, #0
 8000c8e:	bf14      	ite	ne
 8000c90:	4682      	movne	sl, r0
 8000c92:	46a2      	moveq	sl, r4
  while(str[i])
 8000c94:	f89a 6000 	ldrb.w	r6, [sl]
{
 8000c98:	9301      	str	r3, [sp, #4]
  while(str[i])
 8000c9a:	b366      	cbz	r6, 8000cf6 <lcd_bufwstr8x5+0x72>
  uint8_t i = 0;
 8000c9c:	2000      	movs	r0, #0
 8000c9e:	4c19      	ldr	r4, [pc, #100]	; (8000d04 <lcd_bufwstr8x5+0x80>)
	dispbuffer[pg][cl] = 0x00;
 8000ca0:	4683      	mov	fp, r0
 8000ca2:	4d19      	ldr	r5, [pc, #100]	; (8000d08 <lcd_bufwstr8x5+0x84>)
 8000ca4:	e002      	b.n	8000cac <lcd_bufwstr8x5+0x28>
  while(str[i])
 8000ca6:	f81a 6000 	ldrb.w	r6, [sl, r0]
 8000caa:	b32e      	cbz	r6, 8000cf8 <lcd_bufwstr8x5+0x74>
	    dispbuffer[pg][cl + i] = char_8x5[ch][i];
 8000cac:	eb06 0686 	add.w	r6, r6, r6, lsl #2
 8000cb0:	eb05 0c06 	add.w	ip, r5, r6
 8000cb4:	eb02 17c1 	add.w	r7, r2, r1, lsl #7
	cl = cl+5;
 8000cb8:	1d53      	adds	r3, r2, #5
    cl += 6;
 8000cba:	3206      	adds	r2, #6
	    dispbuffer[pg][cl + i] = char_8x5[ch][i];
 8000cbc:	f855 8006 	ldr.w	r8, [r5, r6]
 8000cc0:	f89c e004 	ldrb.w	lr, [ip, #4]
    cl += 6;
 8000cc4:	b2d2      	uxtb	r2, r2
	dispbuffer[pg][cl] = 0x00;
 8000cc6:	eb04 16c1 	add.w	r6, r4, r1, lsl #7
	    dispbuffer[pg][cl + i] = char_8x5[ch][i];
 8000cca:	eb04 0c07 	add.w	ip, r4, r7
	dispbuffer[pg][cl] = 0x00;
 8000cce:	b2db      	uxtb	r3, r3
    if(cl > 122)
 8000cd0:	2a7a      	cmp	r2, #122	; 0x7a
	    dispbuffer[pg][cl + i] = char_8x5[ch][i];
 8000cd2:	f844 8007 	str.w	r8, [r4, r7]
    i++;
 8000cd6:	f100 0901 	add.w	r9, r0, #1
	    dispbuffer[pg][cl + i] = char_8x5[ch][i];
 8000cda:	f88c e004 	strb.w	lr, [ip, #4]
	dispbuffer[pg][cl] = 0x00;
 8000cde:	f806 b003 	strb.w	fp, [r6, r3]
    if(cl > 122)
 8000ce2:	d904      	bls.n	8000cee <lcd_bufwstr8x5+0x6a>
      if(newline_fl)
 8000ce4:	9b01      	ldr	r3, [sp, #4]
 8000ce6:	b13b      	cbz	r3, 8000cf8 <lcd_bufwstr8x5+0x74>
        cl = 0;
 8000ce8:	2200      	movs	r2, #0
        pg++;
 8000cea:	3101      	adds	r1, #1
 8000cec:	b2c9      	uxtb	r1, r1
    if(pg > 7) return 0;
 8000cee:	2907      	cmp	r1, #7
    i++;
 8000cf0:	fa5f f089 	uxtb.w	r0, r9
    if(pg > 7) return 0;
 8000cf4:	d9d7      	bls.n	8000ca6 <lcd_bufwstr8x5+0x22>
  uint8_t i = 0;
 8000cf6:	2000      	movs	r0, #0
}
 8000cf8:	b003      	add	sp, #12
 8000cfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000cfe:	bf00      	nop
 8000d00:	20000000 	.word	0x20000000
 8000d04:	20000208 	.word	0x20000208
 8000d08:	08006be8 	.word	0x08006be8

08000d0c <lcd_buferase>:
    for(uint8_t i = 0; i < 128; i++) dispbuffer[j][i] = 0;
 8000d0c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000d10:	2100      	movs	r1, #0
 8000d12:	4801      	ldr	r0, [pc, #4]	; (8000d18 <lcd_buferase+0xc>)
 8000d14:	f003 b852 	b.w	8003dbc <memset>
 8000d18:	20000208 	.word	0x20000208

08000d1c <_write>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
  {
  	for (int i = 0; i < len; i++)
 8000d1c:	1e10      	subs	r0, r2, #0
 8000d1e:	dd29      	ble.n	8000d74 <_write+0x58>
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000d20:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000d24:	eb01 0c00 	add.w	ip, r1, r0
 8000d28:	f8d3 2e80 	ldr.w	r2, [r3, #3712]	; 0xe80
  	{
  		ITM_SendChar(*ptr++);
 8000d2c:	3101      	adds	r1, #1
 8000d2e:	07d2      	lsls	r2, r2, #31
 8000d30:	d51d      	bpl.n	8000d6e <_write+0x52>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000d32:	f8d3 2e00 	ldr.w	r2, [r3, #3584]	; 0xe00
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000d36:	07d2      	lsls	r2, r2, #31
 8000d38:	d519      	bpl.n	8000d6e <_write+0x52>
  {
 8000d3a:	b500      	push	{lr}
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000d3c:	681a      	ldr	r2, [r3, #0]
  		ITM_SendChar(*ptr++);
 8000d3e:	f811 ec01 	ldrb.w	lr, [r1, #-1]
 8000d42:	b91a      	cbnz	r2, 8000d4c <_write+0x30>
    {
      __NOP();
 8000d44:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000d46:	681a      	ldr	r2, [r3, #0]
 8000d48:	2a00      	cmp	r2, #0
 8000d4a:	d0fb      	beq.n	8000d44 <_write+0x28>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000d4c:	f883 e000 	strb.w	lr, [r3]
  	for (int i = 0; i < len; i++)
 8000d50:	4561      	cmp	r1, ip
 8000d52:	d00a      	beq.n	8000d6a <_write+0x4e>
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000d54:	f8d3 2e80 	ldr.w	r2, [r3, #3712]	; 0xe80
  		ITM_SendChar(*ptr++);
 8000d58:	3101      	adds	r1, #1
 8000d5a:	07d2      	lsls	r2, r2, #31
 8000d5c:	d5f8      	bpl.n	8000d50 <_write+0x34>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000d5e:	f8d3 2e00 	ldr.w	r2, [r3, #3584]	; 0xe00
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000d62:	07d2      	lsls	r2, r2, #31
 8000d64:	d4ea      	bmi.n	8000d3c <_write+0x20>
  	for (int i = 0; i < len; i++)
 8000d66:	4561      	cmp	r1, ip
 8000d68:	d1f4      	bne.n	8000d54 <_write+0x38>
  	}
  	return len;
  }
 8000d6a:	f85d fb04 	ldr.w	pc, [sp], #4
  	for (int i = 0; i < len; i++)
 8000d6e:	4561      	cmp	r1, ip
 8000d70:	d1da      	bne.n	8000d28 <_write+0xc>
 8000d72:	4770      	bx	lr
  }
 8000d74:	4770      	bx	lr
 8000d76:	bf00      	nop

08000d78 <SystemClock_Config>:
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000d78:	2201      	movs	r2, #1
{
 8000d7a:	b510      	push	{r4, lr}
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d7c:	f44f 3080 	mov.w	r0, #65536	; 0x10000
{
 8000d80:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d82:	2300      	movs	r3, #0
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8000d84:	2105      	movs	r1, #5
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d86:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d88:	e9cd 220d 	strd	r2, r2, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000d8c:	f44f 12e0 	mov.w	r2, #1835008	; 0x1c0000
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d90:	900b      	str	r0, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d92:	9012      	str	r0, [sp, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d94:	a80a      	add	r0, sp, #40	; 0x28
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d96:	e9cd 330f 	strd	r3, r3, [sp, #60]	; 0x3c
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d9a:	e9cd 3306 	strd	r3, r3, [sp, #24]
 8000d9e:	e9cd 3308 	strd	r3, r3, [sp, #32]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000da2:	e9cd 3302 	strd	r3, r3, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8000da6:	910a      	str	r1, [sp, #40]	; 0x28
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000da8:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000daa:	9305      	str	r3, [sp, #20]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000dac:	9301      	str	r3, [sp, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000dae:	9411      	str	r4, [sp, #68]	; 0x44
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000db0:	9304      	str	r3, [sp, #16]
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000db2:	9213      	str	r2, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000db4:	f001 fbba 	bl	800252c <HAL_RCC_OscConfig>
 8000db8:	b108      	cbz	r0, 8000dbe <SystemClock_Config+0x46>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000dba:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000dbc:	e7fe      	b.n	8000dbc <SystemClock_Config+0x44>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	220f      	movs	r2, #15
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000dc2:	9307      	str	r3, [sp, #28]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000dc4:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000dc6:	f44f 6380 	mov.w	r3, #1024	; 0x400
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000dca:	4621      	mov	r1, r4
 8000dcc:	a805      	add	r0, sp, #20
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000dce:	9406      	str	r4, [sp, #24]
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000dd0:	9205      	str	r2, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000dd2:	9308      	str	r3, [sp, #32]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000dd4:	f001 fdd6 	bl	8002984 <HAL_RCC_ClockConfig>
 8000dd8:	b108      	cbz	r0, 8000dde <SystemClock_Config+0x66>
 8000dda:	b672      	cpsid	i
  while (1)
 8000ddc:	e7fe      	b.n	8000ddc <SystemClock_Config+0x64>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_ADC;
 8000dde:	2103      	movs	r1, #3
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000de0:	f44f 7280 	mov.w	r2, #256	; 0x100
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000de4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000de8:	a801      	add	r0, sp, #4
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000dea:	e9cd 1201 	strd	r1, r2, [sp, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000dee:	9303      	str	r3, [sp, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000df0:	f001 fe88 	bl	8002b04 <HAL_RCCEx_PeriphCLKConfig>
 8000df4:	b108      	cbz	r0, 8000dfa <SystemClock_Config+0x82>
 8000df6:	b672      	cpsid	i
  while (1)
 8000df8:	e7fe      	b.n	8000df8 <SystemClock_Config+0x80>
}
 8000dfa:	b014      	add	sp, #80	; 0x50
 8000dfc:	bd10      	pop	{r4, pc}
 8000dfe:	bf00      	nop

08000e00 <main>:
{
 8000e00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e04:	2400      	movs	r4, #0
  GPIO_InitStruct.Pin = JOYSTICK_BTN_Pin;
 8000e06:	f04f 0808 	mov.w	r8, #8
{
 8000e0a:	b09b      	sub	sp, #108	; 0x6c
  HAL_Init();
 8000e0c:	f000 fdde 	bl	80019cc <HAL_Init>
  SystemClock_Config();
 8000e10:	f7ff ffb2 	bl	8000d78 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e14:	e9cd 4412 	strd	r4, r4, [sp, #72]	; 0x48
 8000e18:	e9cd 4414 	strd	r4, r4, [sp, #80]	; 0x50
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e1c:	4da7      	ldr	r5, [pc, #668]	; (80010bc <main+0x2bc>)
  HAL_GPIO_WritePin(SHUTDOWN_GPIO_Port, SHUTDOWN_Pin, GPIO_PIN_SET);
 8000e1e:	2201      	movs	r2, #1
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e20:	69ab      	ldr	r3, [r5, #24]
  HAL_GPIO_WritePin(SHUTDOWN_GPIO_Port, SHUTDOWN_Pin, GPIO_PIN_SET);
 8000e22:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e26:	f043 0310 	orr.w	r3, r3, #16
 8000e2a:	61ab      	str	r3, [r5, #24]
 8000e2c:	69ab      	ldr	r3, [r5, #24]
  HAL_GPIO_WritePin(SHUTDOWN_GPIO_Port, SHUTDOWN_Pin, GPIO_PIN_SET);
 8000e2e:	48a4      	ldr	r0, [pc, #656]	; (80010c0 <main+0x2c0>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e30:	f003 0310 	and.w	r3, r3, #16
 8000e34:	9305      	str	r3, [sp, #20]
 8000e36:	9b05      	ldr	r3, [sp, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e38:	69ab      	ldr	r3, [r5, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e3a:	4616      	mov	r6, r2
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e3c:	f043 0320 	orr.w	r3, r3, #32
 8000e40:	61ab      	str	r3, [r5, #24]
 8000e42:	69ab      	ldr	r3, [r5, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e44:	2702      	movs	r7, #2
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e46:	f003 0320 	and.w	r3, r3, #32
 8000e4a:	9306      	str	r3, [sp, #24]
 8000e4c:	9b06      	ldr	r3, [sp, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e4e:	69ab      	ldr	r3, [r5, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000e50:	f04f 0a11 	mov.w	sl, #17
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e54:	f043 0304 	orr.w	r3, r3, #4
 8000e58:	61ab      	str	r3, [r5, #24]
 8000e5a:	69ab      	ldr	r3, [r5, #24]
  hadc1.Init.NbrOfConversion = 5;
 8000e5c:	f04f 0905 	mov.w	r9, #5
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e60:	f003 0304 	and.w	r3, r3, #4
 8000e64:	9307      	str	r3, [sp, #28]
 8000e66:	9b07      	ldr	r3, [sp, #28]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e68:	69ab      	ldr	r3, [r5, #24]
 8000e6a:	ea43 0308 	orr.w	r3, r3, r8
 8000e6e:	61ab      	str	r3, [r5, #24]
 8000e70:	69ab      	ldr	r3, [r5, #24]
 8000e72:	ea03 0308 	and.w	r3, r3, r8
 8000e76:	9308      	str	r3, [sp, #32]
 8000e78:	9b08      	ldr	r3, [sp, #32]
  HAL_GPIO_WritePin(SHUTDOWN_GPIO_Port, SHUTDOWN_Pin, GPIO_PIN_SET);
 8000e7a:	f001 fb4d 	bl	8002518 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, DISP_RS_Pin|DISP_RSE_Pin, GPIO_PIN_RESET);
 8000e7e:	4622      	mov	r2, r4
 8000e80:	2106      	movs	r1, #6
 8000e82:	4890      	ldr	r0, [pc, #576]	; (80010c4 <main+0x2c4>)
 8000e84:	f001 fb48 	bl	8002518 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = SHUTDOWN_Pin;
 8000e88:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  HAL_GPIO_Init(SHUTDOWN_GPIO_Port, &GPIO_InitStruct);
 8000e8c:	488c      	ldr	r0, [pc, #560]	; (80010c0 <main+0x2c0>)
 8000e8e:	a912      	add	r1, sp, #72	; 0x48
  GPIO_InitStruct.Pin = SHUTDOWN_Pin;
 8000e90:	9312      	str	r3, [sp, #72]	; 0x48
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e92:	e9cd a413 	strd	sl, r4, [sp, #76]	; 0x4c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e96:	9715      	str	r7, [sp, #84]	; 0x54
  HAL_GPIO_Init(SHUTDOWN_GPIO_Port, &GPIO_InitStruct);
 8000e98:	f001 fa30 	bl	80022fc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = DISP_RS_Pin|DISP_RSE_Pin;
 8000e9c:	2306      	movs	r3, #6
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e9e:	4889      	ldr	r0, [pc, #548]	; (80010c4 <main+0x2c4>)
 8000ea0:	a912      	add	r1, sp, #72	; 0x48
  GPIO_InitStruct.Pin = DISP_RS_Pin|DISP_RSE_Pin;
 8000ea2:	9312      	str	r3, [sp, #72]	; 0x48
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea4:	e9cd 6413 	strd	r6, r4, [sp, #76]	; 0x4c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ea8:	9715      	str	r7, [sp, #84]	; 0x54
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eaa:	f001 fa27 	bl	80022fc <HAL_GPIO_Init>
  HAL_GPIO_Init(JOYSTICK_BTN_GPIO_Port, &GPIO_InitStruct);
 8000eae:	4885      	ldr	r0, [pc, #532]	; (80010c4 <main+0x2c4>)
 8000eb0:	a912      	add	r1, sp, #72	; 0x48
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000eb2:	e9cd 8412 	strd	r8, r4, [sp, #72]	; 0x48
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000eb6:	9614      	str	r6, [sp, #80]	; 0x50
  HAL_GPIO_Init(JOYSTICK_BTN_GPIO_Port, &GPIO_InitStruct);
 8000eb8:	f001 fa20 	bl	80022fc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = BTN_1_Pin|BTN_2_Pin|BTN_3_Pin|BTN_4_Pin;
 8000ebc:	23f0      	movs	r3, #240	; 0xf0
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ebe:	4882      	ldr	r0, [pc, #520]	; (80010c8 <main+0x2c8>)
 8000ec0:	a912      	add	r1, sp, #72	; 0x48
  GPIO_InitStruct.Pin = BTN_1_Pin|BTN_2_Pin|BTN_3_Pin|BTN_4_Pin;
 8000ec2:	9312      	str	r3, [sp, #72]	; 0x48
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ec4:	e9cd 4613 	strd	r4, r6, [sp, #76]	; 0x4c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ec8:	f001 fa18 	bl	80022fc <HAL_GPIO_Init>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000ecc:	696b      	ldr	r3, [r5, #20]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000ece:	4622      	mov	r2, r4
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000ed0:	4333      	orrs	r3, r6
 8000ed2:	616b      	str	r3, [r5, #20]
 8000ed4:	696b      	ldr	r3, [r5, #20]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000ed6:	4621      	mov	r1, r4
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000ed8:	4033      	ands	r3, r6
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000eda:	200b      	movs	r0, #11
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000edc:	9304      	str	r3, [sp, #16]
 8000ede:	9b04      	ldr	r3, [sp, #16]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000ee0:	f001 f82e 	bl	8001f40 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000ee4:	200b      	movs	r0, #11
 8000ee6:	f001 f869 	bl	8001fbc <HAL_NVIC_EnableIRQ>
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000eea:	f44f 2360 	mov.w	r3, #917504	; 0xe0000
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000eee:	f44f 7280 	mov.w	r2, #256	; 0x100
  hadc1.Instance = ADC1;
 8000ef2:	4d76      	ldr	r5, [pc, #472]	; (80010cc <main+0x2cc>)
  ADC_ChannelConfTypeDef sConfig = {0};
 8000ef4:	e9cd 4412 	strd	r4, r4, [sp, #72]	; 0x48
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ef8:	61eb      	str	r3, [r5, #28]
  hadc1.Instance = ADC1;
 8000efa:	4b75      	ldr	r3, [pc, #468]	; (80010d0 <main+0x2d0>)
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000efc:	4628      	mov	r0, r5
  ADC_ChannelConfTypeDef sConfig = {0};
 8000efe:	9414      	str	r4, [sp, #80]	; 0x50
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000f00:	732c      	strb	r4, [r5, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f02:	752c      	strb	r4, [r5, #20]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f04:	606c      	str	r4, [r5, #4]
  hadc1.Init.NbrOfConversion = 5;
 8000f06:	f8c5 9010 	str.w	r9, [r5, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000f0a:	60aa      	str	r2, [r5, #8]
  hadc1.Instance = ADC1;
 8000f0c:	602b      	str	r3, [r5, #0]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f0e:	f000 ff65 	bl	8001ddc <HAL_ADC_Init>
 8000f12:	b108      	cbz	r0, 8000f18 <main+0x118>
 8000f14:	b672      	cpsid	i
  while (1)
 8000f16:	e7fe      	b.n	8000f16 <main+0x116>
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8000f18:	2307      	movs	r3, #7
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000f1a:	e9cd 0612 	strd	r0, r6, [sp, #72]	; 0x48
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f1e:	a912      	add	r1, sp, #72	; 0x48
 8000f20:	4628      	mov	r0, r5
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8000f22:	9314      	str	r3, [sp, #80]	; 0x50
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f24:	f000 fdc8 	bl	8001ab8 <HAL_ADC_ConfigChannel>
 8000f28:	b108      	cbz	r0, 8000f2e <main+0x12e>
 8000f2a:	b672      	cpsid	i
  while (1)
 8000f2c:	e7fe      	b.n	8000f2c <main+0x12c>
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f2e:	4628      	mov	r0, r5
 8000f30:	a912      	add	r1, sp, #72	; 0x48
  sConfig.Channel = ADC_CHANNEL_8;
 8000f32:	e9cd 8712 	strd	r8, r7, [sp, #72]	; 0x48
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f36:	f000 fdbf 	bl	8001ab8 <HAL_ADC_ConfigChannel>
 8000f3a:	b108      	cbz	r0, 8000f40 <main+0x140>
 8000f3c:	b672      	cpsid	i
  while (1)
 8000f3e:	e7fe      	b.n	8000f3e <main+0x13e>
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000f40:	2409      	movs	r4, #9
 8000f42:	2303      	movs	r3, #3
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f44:	4628      	mov	r0, r5
 8000f46:	a912      	add	r1, sp, #72	; 0x48
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000f48:	e9cd 4312 	strd	r4, r3, [sp, #72]	; 0x48
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f4c:	f000 fdb4 	bl	8001ab8 <HAL_ADC_ConfigChannel>
 8000f50:	b108      	cbz	r0, 8000f56 <main+0x156>
 8000f52:	b672      	cpsid	i
  while (1)
 8000f54:	e7fe      	b.n	8000f54 <main+0x154>
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000f56:	2010      	movs	r0, #16
 8000f58:	2304      	movs	r3, #4
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f5a:	a912      	add	r1, sp, #72	; 0x48
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000f5c:	e9cd 0312 	strd	r0, r3, [sp, #72]	; 0x48
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f60:	4628      	mov	r0, r5
 8000f62:	f000 fda9 	bl	8001ab8 <HAL_ADC_ConfigChannel>
 8000f66:	b108      	cbz	r0, 8000f6c <main+0x16c>
 8000f68:	b672      	cpsid	i
  while (1)
 8000f6a:	e7fe      	b.n	8000f6a <main+0x16a>
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f6c:	4628      	mov	r0, r5
 8000f6e:	a912      	add	r1, sp, #72	; 0x48
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8000f70:	f8cd a048 	str.w	sl, [sp, #72]	; 0x48
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8000f74:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f78:	f000 fd9e 	bl	8001ab8 <HAL_ADC_ConfigChannel>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	b108      	cbz	r0, 8000f84 <main+0x184>
 8000f80:	b672      	cpsid	i
  while (1)
 8000f82:	e7fe      	b.n	8000f82 <main+0x182>
  hspi2.Instance = SPI2;
 8000f84:	4853      	ldr	r0, [pc, #332]	; (80010d4 <main+0x2d4>)
 8000f86:	4a54      	ldr	r2, [pc, #336]	; (80010d8 <main+0x2d8>)
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000f88:	f44f 7182 	mov.w	r1, #260	; 0x104
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000f8c:	e9c0 3303 	strd	r3, r3, [r0, #12]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f90:	e9c0 3308 	strd	r3, r3, [r0, #32]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000f94:	6083      	str	r3, [r0, #8]
  hspi2.Instance = SPI2;
 8000f96:	6002      	str	r2, [r0, #0]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000f98:	6143      	str	r3, [r0, #20]
  hspi2.Init.CRCPolynomial = 10;
 8000f9a:	220a      	movs	r2, #10
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f9c:	6283      	str	r3, [r0, #40]	; 0x28
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000f9e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000fa2:	f8c0 801c 	str.w	r8, [r0, #28]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000fa6:	6041      	str	r1, [r0, #4]
  hspi2.Init.CRCPolynomial = 10;
 8000fa8:	62c2      	str	r2, [r0, #44]	; 0x2c
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000faa:	6183      	str	r3, [r0, #24]
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000fac:	f002 f922 	bl	80031f4 <HAL_SPI_Init>
 8000fb0:	4604      	mov	r4, r0
 8000fb2:	b108      	cbz	r0, 8000fb8 <main+0x1b8>
 8000fb4:	b672      	cpsid	i
  while (1)
 8000fb6:	e7fe      	b.n	8000fb6 <main+0x1b6>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000fb8:	2220      	movs	r2, #32
 8000fba:	4601      	mov	r1, r0
 8000fbc:	a812      	add	r0, sp, #72	; 0x48
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fbe:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000fc2:	e9cd 440c 	strd	r4, r4, [sp, #48]	; 0x30
 8000fc6:	e9cd 440e 	strd	r4, r4, [sp, #56]	; 0x38
 8000fca:	e9cd 4410 	strd	r4, r4, [sp, #64]	; 0x40
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fce:	9409      	str	r4, [sp, #36]	; 0x24
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000fd0:	f002 fef4 	bl	8003dbc <memset>
  htim1.Init.Period = 65535;
 8000fd4:	f64f 73ff 	movw	r3, #65535	; 0xffff
  htim1.Instance = TIM1;
 8000fd8:	4d40      	ldr	r5, [pc, #256]	; (80010dc <main+0x2dc>)
 8000fda:	4a41      	ldr	r2, [pc, #260]	; (80010e0 <main+0x2e0>)
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000fdc:	4628      	mov	r0, r5
  htim1.Instance = TIM1;
 8000fde:	e9c5 2400 	strd	r2, r4, [r5]
  htim1.Init.RepetitionCounter = 0;
 8000fe2:	e9c5 4404 	strd	r4, r4, [r5, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fe6:	60ac      	str	r4, [r5, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fe8:	61ac      	str	r4, [r5, #24]
  htim1.Init.Period = 65535;
 8000fea:	60eb      	str	r3, [r5, #12]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000fec:	f002 fb50 	bl	8003690 <HAL_TIM_PWM_Init>
 8000ff0:	b108      	cbz	r0, 8000ff6 <main+0x1f6>
 8000ff2:	b672      	cpsid	i
  while (1)
 8000ff4:	e7fe      	b.n	8000ff4 <main+0x1f4>
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ff6:	e9cd 0009 	strd	r0, r0, [sp, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000ffa:	a909      	add	r1, sp, #36	; 0x24
 8000ffc:	4628      	mov	r0, r5
 8000ffe:	f002 fc11 	bl	8003824 <HAL_TIMEx_MasterConfigSynchronization>
 8001002:	4602      	mov	r2, r0
 8001004:	b108      	cbz	r0, 800100a <main+0x20a>
 8001006:	b672      	cpsid	i
  while (1)
 8001008:	e7fe      	b.n	8001008 <main+0x208>
  sConfigOC.Pulse = 50000;
 800100a:	f24c 3150 	movw	r1, #50000	; 0xc350
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800100e:	2360      	movs	r3, #96	; 0x60
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001010:	e9cd 000d 	strd	r0, r0, [sp, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001014:	e9cd 000f 	strd	r0, r0, [sp, #60]	; 0x3c
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001018:	e9cd 310b 	strd	r3, r1, [sp, #44]	; 0x2c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800101c:	9011      	str	r0, [sp, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800101e:	a90b      	add	r1, sp, #44	; 0x2c
 8001020:	4628      	mov	r0, r5
 8001022:	f002 fb91 	bl	8003748 <HAL_TIM_PWM_ConfigChannel>
 8001026:	b108      	cbz	r0, 800102c <main+0x22c>
 8001028:	b672      	cpsid	i
  while (1)
 800102a:	e7fe      	b.n	800102a <main+0x22a>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800102c:	2300      	movs	r3, #0
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800102e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001032:	482a      	ldr	r0, [pc, #168]	; (80010dc <main+0x2dc>)
 8001034:	a912      	add	r1, sp, #72	; 0x48
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001036:	e9cd 3312 	strd	r3, r3, [sp, #72]	; 0x48
  sBreakDeadTimeConfig.DeadTime = 0;
 800103a:	e9cd 3314 	strd	r3, r3, [sp, #80]	; 0x50
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800103e:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001042:	9319      	str	r3, [sp, #100]	; 0x64
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001044:	f002 fc20 	bl	8003888 <HAL_TIMEx_ConfigBreakDeadTime>
 8001048:	4604      	mov	r4, r0
 800104a:	b108      	cbz	r0, 8001050 <main+0x250>
 800104c:	b672      	cpsid	i
  while (1)
 800104e:	e7fe      	b.n	800104e <main+0x24e>
  HAL_TIM_MspPostInit(&htim1);
 8001050:	4822      	ldr	r0, [pc, #136]	; (80010dc <main+0x2dc>)
 8001052:	f000 fb53 	bl	80016fc <HAL_TIM_MspPostInit>
  hrtc.Instance = RTC;
 8001056:	f04f 31ff 	mov.w	r1, #4294967295
 800105a:	4f22      	ldr	r7, [pc, #136]	; (80010e4 <main+0x2e4>)
 800105c:	4b22      	ldr	r3, [pc, #136]	; (80010e8 <main+0x2e8>)
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800105e:	4638      	mov	r0, r7
  hrtc.Instance = RTC;
 8001060:	e9c7 3100 	strd	r3, r1, [r7]
  RTC_TimeTypeDef sTime = {0};
 8001064:	f8ad 402c 	strh.w	r4, [sp, #44]	; 0x2c
 8001068:	f88d 402e 	strb.w	r4, [sp, #46]	; 0x2e
  RTC_DateTypeDef DateToUpdate = {0};
 800106c:	9412      	str	r4, [sp, #72]	; 0x48
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_NONE;
 800106e:	60bc      	str	r4, [r7, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001070:	f001 feb4 	bl	8002ddc <HAL_RTC_Init>
 8001074:	b108      	cbz	r0, 800107a <main+0x27a>
 8001076:	b672      	cpsid	i
  while (1)
 8001078:	e7fe      	b.n	8001078 <main+0x278>
  sTime.Hours = 0x0;
 800107a:	f88d 002c 	strb.w	r0, [sp, #44]	; 0x2c
  sTime.Minutes = 0x0;
 800107e:	f88d 002d 	strb.w	r0, [sp, #45]	; 0x2d
  sTime.Seconds = 0x0;
 8001082:	f88d 002e 	strb.w	r0, [sp, #46]	; 0x2e
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001086:	2201      	movs	r2, #1
 8001088:	4638      	mov	r0, r7
 800108a:	a90b      	add	r1, sp, #44	; 0x2c
 800108c:	f001 ff22 	bl	8002ed4 <HAL_RTC_SetTime>
 8001090:	4603      	mov	r3, r0
 8001092:	b108      	cbz	r0, 8001098 <main+0x298>
 8001094:	b672      	cpsid	i
  while (1)
 8001096:	e7fe      	b.n	8001096 <main+0x296>
  DateToUpdate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001098:	2601      	movs	r6, #1
  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BCD) != HAL_OK)
 800109a:	4638      	mov	r0, r7
 800109c:	4632      	mov	r2, r6
 800109e:	a912      	add	r1, sp, #72	; 0x48
  DateToUpdate.Year = 0x0;
 80010a0:	f88d 304b 	strb.w	r3, [sp, #75]	; 0x4b
  DateToUpdate.WeekDay = RTC_WEEKDAY_MONDAY;
 80010a4:	f88d 6048 	strb.w	r6, [sp, #72]	; 0x48
  DateToUpdate.Month = RTC_MONTH_JANUARY;
 80010a8:	f88d 6049 	strb.w	r6, [sp, #73]	; 0x49
  DateToUpdate.Date = 0x1;
 80010ac:	f88d 604a 	strb.w	r6, [sp, #74]	; 0x4a
  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BCD) != HAL_OK)
 80010b0:	f001 ff9c 	bl	8002fec <HAL_RTC_SetDate>
 80010b4:	4603      	mov	r3, r0
 80010b6:	b1c8      	cbz	r0, 80010ec <main+0x2ec>
 80010b8:	b672      	cpsid	i
  while (1)
 80010ba:	e7fe      	b.n	80010ba <main+0x2ba>
 80010bc:	40021000 	.word	0x40021000
 80010c0:	40011000 	.word	0x40011000
 80010c4:	40010800 	.word	0x40010800
 80010c8:	40010c00 	.word	0x40010c00
 80010cc:	2000062c 	.word	0x2000062c
 80010d0:	40012400 	.word	0x40012400
 80010d4:	2000070c 	.word	0x2000070c
 80010d8:	40003800 	.word	0x40003800
 80010dc:	20000764 	.word	0x20000764
 80010e0:	40012c00 	.word	0x40012c00
 80010e4:	200006a0 	.word	0x200006a0
 80010e8:	40002800 	.word	0x40002800
  hspi1.Instance = SPI1;
 80010ec:	48ad      	ldr	r0, [pc, #692]	; (80013a4 <main+0x5a4>)
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80010ee:	f44f 7282 	mov.w	r2, #260	; 0x104
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80010f2:	e9c0 3302 	strd	r3, r3, [r0, #8]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80010f6:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80010fa:	e9c0 3308 	strd	r3, r3, [r0, #32]
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80010fe:	6283      	str	r3, [r0, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001100:	230a      	movs	r3, #10
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001102:	6042      	str	r2, [r0, #4]
  hspi1.Init.CRCPolynomial = 10;
 8001104:	62c3      	str	r3, [r0, #44]	; 0x2c
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001106:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800110a:	2308      	movs	r3, #8
 800110c:	e9c0 2306 	strd	r2, r3, [r0, #24]
  hspi1.Instance = SPI1;
 8001110:	4ba5      	ldr	r3, [pc, #660]	; (80013a8 <main+0x5a8>)
 8001112:	6003      	str	r3, [r0, #0]
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001114:	f002 f86e 	bl	80031f4 <HAL_SPI_Init>
 8001118:	4603      	mov	r3, r0
 800111a:	b108      	cbz	r0, 8001120 <main+0x320>
 800111c:	b672      	cpsid	i
  while (1)
 800111e:	e7fe      	b.n	800111e <main+0x31e>
  huart1.Init.BaudRate = 9600;
 8001120:	f44f 5816 	mov.w	r8, #9600	; 0x2580
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001124:	270c      	movs	r7, #12
  huart1.Instance = USART1;
 8001126:	48a1      	ldr	r0, [pc, #644]	; (80013ac <main+0x5ac>)
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001128:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800112c:	e9c0 3306 	strd	r3, r3, [r0, #24]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001130:	6103      	str	r3, [r0, #16]
  huart1.Instance = USART1;
 8001132:	4b9f      	ldr	r3, [pc, #636]	; (80013b0 <main+0x5b0>)
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001134:	6147      	str	r7, [r0, #20]
  huart1.Init.BaudRate = 9600;
 8001136:	e9c0 3800 	strd	r3, r8, [r0]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800113a:	f002 fc11 	bl	8003960 <HAL_UART_Init>
 800113e:	b108      	cbz	r0, 8001144 <main+0x344>
 8001140:	b672      	cpsid	i
  while (1)
 8001142:	e7fe      	b.n	8001142 <main+0x342>
  huart3.Instance = USART3;
 8001144:	4c9b      	ldr	r4, [pc, #620]	; (80013b4 <main+0x5b4>)
 8001146:	4b9c      	ldr	r3, [pc, #624]	; (80013b8 <main+0x5b8>)
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001148:	e9c4 0002 	strd	r0, r0, [r4, #8]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800114c:	e9c4 0006 	strd	r0, r0, [r4, #24]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001150:	6120      	str	r0, [r4, #16]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001152:	4620      	mov	r0, r4
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001154:	6167      	str	r7, [r4, #20]
  huart3.Init.BaudRate = 9600;
 8001156:	f8c4 8004 	str.w	r8, [r4, #4]
  huart3.Instance = USART3;
 800115a:	6023      	str	r3, [r4, #0]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800115c:	f002 fc00 	bl	8003960 <HAL_UART_Init>
 8001160:	4607      	mov	r7, r0
 8001162:	b108      	cbz	r0, 8001168 <main+0x368>
 8001164:	b672      	cpsid	i
  while (1)
 8001166:	e7fe      	b.n	8001166 <main+0x366>
  lcd_init();
 8001168:	f7ff fd46 	bl	8000bf8 <lcd_init>
  RingBuf_Init(rx_buf, 1024, 1, &ringbuf);
 800116c:	4632      	mov	r2, r6
 800116e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001172:	4b92      	ldr	r3, [pc, #584]	; (80013bc <main+0x5bc>)
 8001174:	4892      	ldr	r0, [pc, #584]	; (80013c0 <main+0x5c0>)
 8001176:	f7ff fcb9 	bl	8000aec <RingBuf_Init>
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, dutyCycle);
 800117a:	f44f 4230 	mov.w	r2, #45056	; 0xb000
 800117e:	682b      	ldr	r3, [r5, #0]
  uint16_t buf_len_prev = 0;
 8001180:	463d      	mov	r5, r7
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, dutyCycle);
 8001182:	635a      	str	r2, [r3, #52]	; 0x34
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001184:	4639      	mov	r1, r7
 8001186:	488f      	ldr	r0, [pc, #572]	; (80013c4 <main+0x5c4>)
 8001188:	f002 fa34 	bl	80035f4 <HAL_TIM_PWM_Start>
  adc_complete = 0;
 800118c:	f8df 9238 	ldr.w	r9, [pc, #568]	; 80013c8 <main+0x5c8>
  HAL_UART_Receive_IT(&huart3, &temp_byte, 1);
 8001190:	4632      	mov	r2, r6
 8001192:	4620      	mov	r0, r4
 8001194:	498d      	ldr	r1, [pc, #564]	; (80013cc <main+0x5cc>)
 8001196:	f002 fc13 	bl	80039c0 <HAL_UART_Receive_IT>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)ADC_data.array, 5);
 800119a:	2205      	movs	r2, #5
 800119c:	498c      	ldr	r1, [pc, #560]	; (80013d0 <main+0x5d0>)
 800119e:	488d      	ldr	r0, [pc, #564]	; (80013d4 <main+0x5d4>)
 80011a0:	f000 fd68 	bl	8001c74 <HAL_ADC_Start_DMA>
  adc_complete = 0;
 80011a4:	f8c9 7000 	str.w	r7, [r9]
  uint16_t buf_len = 0;
 80011a8:	f8ad 7048 	strh.w	r7, [sp, #72]	; 0x48
  lcd_buferase();
 80011ac:	f7ff fdae 	bl	8000d0c <lcd_buferase>
      lcd_bufwstr8x5(temp_str[2], 1, 0, 0);
 80011b0:	4b89      	ldr	r3, [pc, #548]	; (80013d8 <main+0x5d8>)
  uint32_t temp_tick[3] = {0};
 80011b2:	e9cd 7701 	strd	r7, r7, [sp, #4]
 80011b6:	4c89      	ldr	r4, [pc, #548]	; (80013dc <main+0x5dc>)
      RingBuf_Available(&buf_len, &ringbuf);
 80011b8:	f8df a200 	ldr.w	sl, [pc, #512]	; 80013bc <main+0x5bc>
      lcd_bufwstr8x5(temp_str[2], 1, 0, 0);
 80011bc:	f503 7b80 	add.w	fp, r3, #256	; 0x100
 80011c0:	9703      	str	r7, [sp, #12]
    if((HAL_GetTick() - temp_tick[0]) > period[0])
 80011c2:	f000 fc21 	bl	8001a08 <HAL_GetTick>
 80011c6:	9b01      	ldr	r3, [sp, #4]
 80011c8:	1ac3      	subs	r3, r0, r3
 80011ca:	2b05      	cmp	r3, #5
 80011cc:	d81e      	bhi.n	800120c <main+0x40c>
    if((HAL_GetTick() - temp_tick[1]) > period[1])
 80011ce:	f000 fc1b 	bl	8001a08 <HAL_GetTick>
 80011d2:	9b02      	ldr	r3, [sp, #8]
 80011d4:	1ac3      	subs	r3, r0, r3
 80011d6:	2b05      	cmp	r3, #5
 80011d8:	d80c      	bhi.n	80011f4 <main+0x3f4>
    if(adc_complete)
 80011da:	f8d9 3000 	ldr.w	r3, [r9]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d0ef      	beq.n	80011c2 <main+0x3c2>
      HAL_ADC_Start_DMA(&hadc1, (uint32_t*)ADC_data.array, 5);
 80011e2:	2205      	movs	r2, #5
 80011e4:	497a      	ldr	r1, [pc, #488]	; (80013d0 <main+0x5d0>)
 80011e6:	487b      	ldr	r0, [pc, #492]	; (80013d4 <main+0x5d4>)
 80011e8:	f000 fd44 	bl	8001c74 <HAL_ADC_Start_DMA>
      adc_complete = 0;
 80011ec:	2300      	movs	r3, #0
 80011ee:	f8c9 3000 	str.w	r3, [r9]
 80011f2:	e7e6      	b.n	80011c2 <main+0x3c2>
      temp_tick[1] = HAL_GetTick();
 80011f4:	f000 fc08 	bl	8001a08 <HAL_GetTick>
 80011f8:	9002      	str	r0, [sp, #8]
      lcd_bufupload();
 80011fa:	f7ff fccb 	bl	8000b94 <lcd_bufupload>
      printf("jox - %d, joy - %d\r\n", ADC_data.jox, ADC_data.joy);
 80011fe:	4b74      	ldr	r3, [pc, #464]	; (80013d0 <main+0x5d0>)
 8001200:	4877      	ldr	r0, [pc, #476]	; (80013e0 <main+0x5e0>)
 8001202:	889a      	ldrh	r2, [r3, #4]
 8001204:	8859      	ldrh	r1, [r3, #2]
 8001206:	f003 fa41 	bl	800468c <iprintf>
 800120a:	e7e6      	b.n	80011da <main+0x3da>
      temp_tick[0] = HAL_GetTick();
 800120c:	f000 fbfc 	bl	8001a08 <HAL_GetTick>
 8001210:	9001      	str	r0, [sp, #4]
      lcd_buferase();
 8001212:	f7ff fd7b 	bl	8000d0c <lcd_buferase>
      RingBuf_Available(&buf_len, &ringbuf);
 8001216:	4651      	mov	r1, sl
 8001218:	a812      	add	r0, sp, #72	; 0x48
 800121a:	f7ff fc73 	bl	8000b04 <RingBuf_Available>
      if(buf_len)
 800121e:	f8bd 8048 	ldrh.w	r8, [sp, #72]	; 0x48
 8001222:	f1b8 0f00 	cmp.w	r8, #0
 8001226:	d04a      	beq.n	80012be <main+0x4be>
        if(buf_len_prev != buf_len)
 8001228:	45a8      	cmp	r8, r5
 800122a:	d002      	beq.n	8001232 <main+0x432>
          temp_tick[2] = HAL_GetTick();
 800122c:	f000 fbec 	bl	8001a08 <HAL_GetTick>
 8001230:	9003      	str	r0, [sp, #12]
        if((HAL_GetTick() - temp_tick[2]) > period[2])
 8001232:	f000 fbe9 	bl	8001a08 <HAL_GetTick>
 8001236:	9b03      	ldr	r3, [sp, #12]
 8001238:	1ac3      	subs	r3, r0, r3
 800123a:	2b05      	cmp	r3, #5
 800123c:	f200 80a1 	bhi.w	8001382 <main+0x582>
      if(adc_avercomplete)
 8001240:	4b68      	ldr	r3, [pc, #416]	; (80013e4 <main+0x5e4>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	2b00      	cmp	r3, #0
 8001246:	d142      	bne.n	80012ce <main+0x4ce>
      lcd_bufwstr8x5(temp_str[2], 1, 0, 0);
 8001248:	2300      	movs	r3, #0
 800124a:	2101      	movs	r1, #1
 800124c:	461a      	mov	r2, r3
 800124e:	4658      	mov	r0, fp
 8001250:	f7ff fd18 	bl	8000c84 <lcd_bufwstr8x5>
      lcd_bufwstr8x5(temp_str[3], 2, 0, 0);
 8001254:	2300      	movs	r3, #0
 8001256:	2102      	movs	r1, #2
 8001258:	461a      	mov	r2, r3
 800125a:	4863      	ldr	r0, [pc, #396]	; (80013e8 <main+0x5e8>)
 800125c:	f7ff fd12 	bl	8000c84 <lcd_bufwstr8x5>
      lcd_bufwstr8x5(temp_str[4], 3, 0, 0);
 8001260:	2300      	movs	r3, #0
 8001262:	2103      	movs	r1, #3
 8001264:	461a      	mov	r2, r3
 8001266:	4861      	ldr	r0, [pc, #388]	; (80013ec <main+0x5ec>)
 8001268:	f7ff fd0c 	bl	8000c84 <lcd_bufwstr8x5>
      lcd_bufwstr8x5(temp_str[5], 4, 0, 0);
 800126c:	2300      	movs	r3, #0
 800126e:	2104      	movs	r1, #4
 8001270:	461a      	mov	r2, r3
 8001272:	485f      	ldr	r0, [pc, #380]	; (80013f0 <main+0x5f0>)
 8001274:	f7ff fd06 	bl	8000c84 <lcd_bufwstr8x5>
      lcd_bufwstr8x5(temp_str[6], 5, 0, 0);
 8001278:	2300      	movs	r3, #0
 800127a:	2105      	movs	r1, #5
 800127c:	461a      	mov	r2, r3
 800127e:	485d      	ldr	r0, [pc, #372]	; (80013f4 <main+0x5f4>)
 8001280:	f7ff fd00 	bl	8000c84 <lcd_bufwstr8x5>
      sprintf((char*)temp_str[0], "%ld.%ld sec from start", HAL_GetTick()/1000, (HAL_GetTick()%1000)/100);
 8001284:	f000 fbc0 	bl	8001a08 <HAL_GetTick>
      lcd_bufwstr8x5(temp_str[0], 7, 0, 0);
 8001288:	4645      	mov	r5, r8
      sprintf((char*)temp_str[0], "%ld.%ld sec from start", HAL_GetTick()/1000, (HAL_GetTick()%1000)/100);
 800128a:	4680      	mov	r8, r0
 800128c:	f000 fbbc 	bl	8001a08 <HAL_GetTick>
 8001290:	f44f 777a 	mov.w	r7, #1000	; 0x3e8
 8001294:	4606      	mov	r6, r0
 8001296:	fbb6 fcf7 	udiv	ip, r6, r7
 800129a:	2364      	movs	r3, #100	; 0x64
 800129c:	fb0c 6617 	mls	r6, ip, r7, r6
 80012a0:	fbb8 f2f7 	udiv	r2, r8, r7
 80012a4:	fbb6 f3f3 	udiv	r3, r6, r3
 80012a8:	4953      	ldr	r1, [pc, #332]	; (80013f8 <main+0x5f8>)
 80012aa:	484b      	ldr	r0, [pc, #300]	; (80013d8 <main+0x5d8>)
 80012ac:	f003 fa06 	bl	80046bc <siprintf>
      lcd_bufwstr8x5(temp_str[0], 7, 0, 0);
 80012b0:	2300      	movs	r3, #0
 80012b2:	2107      	movs	r1, #7
 80012b4:	461a      	mov	r2, r3
 80012b6:	4848      	ldr	r0, [pc, #288]	; (80013d8 <main+0x5d8>)
 80012b8:	f7ff fce4 	bl	8000c84 <lcd_bufwstr8x5>
 80012bc:	e787      	b.n	80011ce <main+0x3ce>
        lcd_bufwstr8x5(temp_str[1], 0, 0, 0);
 80012be:	4643      	mov	r3, r8
 80012c0:	4642      	mov	r2, r8
 80012c2:	4641      	mov	r1, r8
 80012c4:	484d      	ldr	r0, [pc, #308]	; (80013fc <main+0x5fc>)
 80012c6:	46a8      	mov	r8, r5
 80012c8:	f7ff fcdc 	bl	8000c84 <lcd_bufwstr8x5>
 80012cc:	e7b8      	b.n	8001240 <main+0x440>
        ADC_averdata.batlvl = ADC_averdata.batlvl / AVER_PERIOD;
 80012ce:	f44f 75fa 	mov.w	r5, #500	; 0x1f4
        ADC_averdata.jox /= AVER_PERIOD;
 80012d2:	6863      	ldr	r3, [r4, #4]
        sprintf((char*)temp_str[2], "jox - %lu mV", (ADC_averdata.jox * 1157) / ADC_averdata.vref);
 80012d4:	f240 4685 	movw	r6, #1157	; 0x485
        ADC_averdata.jox /= AVER_PERIOD;
 80012d8:	fbb3 f3f5 	udiv	r3, r3, r5
        ADC_averdata.joy /= AVER_PERIOD;
 80012dc:	f8d4 c008 	ldr.w	ip, [r4, #8]
        ADC_averdata.vref /= AVER_PERIOD;
 80012e0:	6922      	ldr	r2, [r4, #16]
        ADC_averdata.joy /= AVER_PERIOD;
 80012e2:	fbbc fef5 	udiv	lr, ip, r5
        ADC_averdata.batlvl = ADC_averdata.batlvl / AVER_PERIOD;
 80012e6:	6827      	ldr	r7, [r4, #0]
        ADC_averdata.tmpr /= AVER_PERIOD;
 80012e8:	f8d4 c00c 	ldr.w	ip, [r4, #12]
        ADC_averdata.vref /= AVER_PERIOD;
 80012ec:	fbb2 f2f5 	udiv	r2, r2, r5
        ADC_averdata.tmpr /= AVER_PERIOD;
 80012f0:	fbbc fcf5 	udiv	ip, ip, r5
        ADC_averdata.batlvl = ADC_averdata.batlvl / AVER_PERIOD;
 80012f4:	fbb7 f7f5 	udiv	r7, r7, r5
        ADC_averdata.jox /= AVER_PERIOD;
 80012f8:	6063      	str	r3, [r4, #4]
        sprintf((char*)temp_str[2], "jox - %lu mV", (ADC_averdata.jox * 1157) / ADC_averdata.vref);
 80012fa:	fb06 f303 	mul.w	r3, r6, r3
 80012fe:	4940      	ldr	r1, [pc, #256]	; (8001400 <main+0x600>)
        ADC_averdata.vref /= AVER_PERIOD;
 8001300:	6122      	str	r2, [r4, #16]
        sprintf((char*)temp_str[2], "jox - %lu mV", (ADC_averdata.jox * 1157) / ADC_averdata.vref);
 8001302:	4658      	mov	r0, fp
 8001304:	fbb3 f2f2 	udiv	r2, r3, r2
        ADC_averdata.tmpr /= AVER_PERIOD;
 8001308:	e9c4 ec02 	strd	lr, ip, [r4, #8]
        ADC_averdata.batlvl = ADC_averdata.batlvl / AVER_PERIOD;
 800130c:	6027      	str	r7, [r4, #0]
        sprintf((char*)temp_str[2], "jox - %lu mV", (ADC_averdata.jox * 1157) / ADC_averdata.vref);
 800130e:	f003 f9d5 	bl	80046bc <siprintf>
        sprintf((char*)temp_str[3], "joy - %lu mV", (ADC_averdata.joy * 1157) / ADC_averdata.vref);
 8001312:	68a3      	ldr	r3, [r4, #8]
 8001314:	6922      	ldr	r2, [r4, #16]
 8001316:	fb06 f303 	mul.w	r3, r6, r3
 800131a:	493a      	ldr	r1, [pc, #232]	; (8001404 <main+0x604>)
 800131c:	fbb3 f2f2 	udiv	r2, r3, r2
 8001320:	4831      	ldr	r0, [pc, #196]	; (80013e8 <main+0x5e8>)
 8001322:	f003 f9cb 	bl	80046bc <siprintf>
        sprintf((char*)temp_str[4], "Vbt - %lu mV", (ADC_averdata.batlvl * 1539) / ADC_averdata.vref);
 8001326:	f240 6203 	movw	r2, #1539	; 0x603
 800132a:	6823      	ldr	r3, [r4, #0]
 800132c:	4936      	ldr	r1, [pc, #216]	; (8001408 <main+0x608>)
 800132e:	fb02 f303 	mul.w	r3, r2, r3
 8001332:	6922      	ldr	r2, [r4, #16]
 8001334:	482d      	ldr	r0, [pc, #180]	; (80013ec <main+0x5ec>)
 8001336:	fbb3 f2f2 	udiv	r2, r3, r2
 800133a:	f003 f9bf 	bl	80046bc <siprintf>
        sprintf((char*)temp_str[5], "Vdd - %lu mV", (4095 * 1157) / ADC_averdata.vref);
 800133e:	4b33      	ldr	r3, [pc, #204]	; (800140c <main+0x60c>)
 8001340:	6922      	ldr	r2, [r4, #16]
 8001342:	4933      	ldr	r1, [pc, #204]	; (8001410 <main+0x610>)
 8001344:	fbb3 f2f2 	udiv	r2, r3, r2
 8001348:	4829      	ldr	r0, [pc, #164]	; (80013f0 <main+0x5f0>)
 800134a:	f003 f9b7 	bl	80046bc <siprintf>
        sprintf((char*)temp_str[6], "tmp - %d%cC",(358 - ((int)ADC_averdata.tmpr * 279) / (int)ADC_averdata.vref), 176);
 800134e:	f240 1217 	movw	r2, #279	; 0x117
 8001352:	68e3      	ldr	r3, [r4, #12]
 8001354:	492f      	ldr	r1, [pc, #188]	; (8001414 <main+0x614>)
 8001356:	fb02 f303 	mul.w	r3, r2, r3
 800135a:	6922      	ldr	r2, [r4, #16]
 800135c:	4825      	ldr	r0, [pc, #148]	; (80013f4 <main+0x5f4>)
 800135e:	fb93 f2f2 	sdiv	r2, r3, r2
 8001362:	23b0      	movs	r3, #176	; 0xb0
 8001364:	f5c2 72b3 	rsb	r2, r2, #358	; 0x166
 8001368:	f003 f9a8 	bl	80046bc <siprintf>
        aver_counter = AVER_PERIOD;
 800136c:	4b2a      	ldr	r3, [pc, #168]	; (8001418 <main+0x618>)
        adc_avercomplete = 0;
 800136e:	4a1d      	ldr	r2, [pc, #116]	; (80013e4 <main+0x5e4>)
        aver_counter = AVER_PERIOD;
 8001370:	601d      	str	r5, [r3, #0]
        ADC_averdata.batlvl = 0;
 8001372:	2300      	movs	r3, #0
        ADC_averdata.jox = 0;
 8001374:	e9c4 3300 	strd	r3, r3, [r4]
        ADC_averdata.tmpr = 0;
 8001378:	e9c4 3302 	strd	r3, r3, [r4, #8]
        ADC_averdata.vref = 0;
 800137c:	6123      	str	r3, [r4, #16]
        adc_avercomplete = 0;
 800137e:	6013      	str	r3, [r2, #0]
        aver_counter = AVER_PERIOD;
 8001380:	e762      	b.n	8001248 <main+0x448>
          RingBuf_DataRead(temp_str[0], buf_len, &ringbuf);
 8001382:	4652      	mov	r2, sl
 8001384:	f8bd 1048 	ldrh.w	r1, [sp, #72]	; 0x48
 8001388:	4813      	ldr	r0, [pc, #76]	; (80013d8 <main+0x5d8>)
 800138a:	f7ff fbe9 	bl	8000b60 <RingBuf_DataRead>
          temp_str[0][buf_len] = '\0';
 800138e:	2200      	movs	r2, #0
          strncpy((char*)temp_str[1], (char*)temp_str[0], 128);
 8001390:	4911      	ldr	r1, [pc, #68]	; (80013d8 <main+0x5d8>)
          temp_str[0][buf_len] = '\0';
 8001392:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8001396:	54ca      	strb	r2, [r1, r3]
          strncpy((char*)temp_str[1], (char*)temp_str[0], 128);
 8001398:	2280      	movs	r2, #128	; 0x80
 800139a:	1888      	adds	r0, r1, r2
 800139c:	f003 f9ae 	bl	80046fc <strncpy>
 80013a0:	e74e      	b.n	8001240 <main+0x440>
 80013a2:	bf00      	nop
 80013a4:	200006b4 	.word	0x200006b4
 80013a8:	40013000 	.word	0x40013000
 80013ac:	200007ac 	.word	0x200007ac
 80013b0:	40013800 	.word	0x40013800
 80013b4:	200007f0 	.word	0x200007f0
 80013b8:	40004800 	.word	0x40004800
 80013bc:	20000834 	.word	0x20000834
 80013c0:	20000848 	.word	0x20000848
 80013c4:	20000764 	.word	0x20000764
 80013c8:	20000008 	.word	0x20000008
 80013cc:	20000c48 	.word	0x20000c48
 80013d0:	2000061c 	.word	0x2000061c
 80013d4:	2000062c 	.word	0x2000062c
 80013d8:	20000c4c 	.word	0x20000c4c
 80013dc:	20000608 	.word	0x20000608
 80013e0:	0800714c 	.word	0x0800714c
 80013e4:	20000628 	.word	0x20000628
 80013e8:	20000dcc 	.word	0x20000dcc
 80013ec:	20000e4c 	.word	0x20000e4c
 80013f0:	20000ecc 	.word	0x20000ecc
 80013f4:	20000f4c 	.word	0x20000f4c
 80013f8:	08007134 	.word	0x08007134
 80013fc:	20000ccc 	.word	0x20000ccc
 8001400:	080070e8 	.word	0x080070e8
 8001404:	080070f8 	.word	0x080070f8
 8001408:	08007108 	.word	0x08007108
 800140c:	00484b7b 	.word	0x00484b7b
 8001410:	08007118 	.word	0x08007118
 8001414:	08007128 	.word	0x08007128
 8001418:	2000000c 	.word	0x2000000c

0800141c <HAL_UART_RxCpltCallback>:
{
 800141c:	b538      	push	{r3, r4, r5, lr}
  if(huart == &huart3)
 800141e:	4b08      	ldr	r3, [pc, #32]	; (8001440 <HAL_UART_RxCpltCallback+0x24>)
 8001420:	4298      	cmp	r0, r3
 8001422:	d000      	beq.n	8001426 <HAL_UART_RxCpltCallback+0xa>
}
 8001424:	bd38      	pop	{r3, r4, r5, pc}
    RingBuf_BytePut(temp_byte, &ringbuf);
 8001426:	4604      	mov	r4, r0
 8001428:	4d06      	ldr	r5, [pc, #24]	; (8001444 <HAL_UART_RxCpltCallback+0x28>)
 800142a:	4907      	ldr	r1, [pc, #28]	; (8001448 <HAL_UART_RxCpltCallback+0x2c>)
 800142c:	7828      	ldrb	r0, [r5, #0]
 800142e:	f7ff fb81 	bl	8000b34 <RingBuf_BytePut>
    HAL_UART_Receive_IT (&huart3, &temp_byte, 1);
 8001432:	4629      	mov	r1, r5
 8001434:	4620      	mov	r0, r4
}
 8001436:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    HAL_UART_Receive_IT (&huart3, &temp_byte, 1);
 800143a:	2201      	movs	r2, #1
 800143c:	f002 bac0 	b.w	80039c0 <HAL_UART_Receive_IT>
 8001440:	200007f0 	.word	0x200007f0
 8001444:	20000c48 	.word	0x20000c48
 8001448:	20000834 	.word	0x20000834

0800144c <HAL_UART_TxCpltCallback>:
}
 800144c:	4770      	bx	lr
 800144e:	bf00      	nop

08001450 <HAL_ADC_ConvCpltCallback>:
  if(hadc->Instance == ADC1)
 8001450:	4b17      	ldr	r3, [pc, #92]	; (80014b0 <HAL_ADC_ConvCpltCallback+0x60>)
 8001452:	6802      	ldr	r2, [r0, #0]
 8001454:	429a      	cmp	r2, r3
 8001456:	d000      	beq.n	800145a <HAL_ADC_ConvCpltCallback+0xa>
 8001458:	4770      	bx	lr
    if(aver_counter)
 800145a:	4816      	ldr	r0, [pc, #88]	; (80014b4 <HAL_ADC_ConvCpltCallback+0x64>)
 800145c:	6802      	ldr	r2, [r0, #0]
 800145e:	b1fa      	cbz	r2, 80014a0 <HAL_ADC_ConvCpltCallback+0x50>
      ADC_averdata.batlvl += (uint32_t) ADC_data.batlvl;
 8001460:	4915      	ldr	r1, [pc, #84]	; (80014b8 <HAL_ADC_ConvCpltCallback+0x68>)
{
 8001462:	b410      	push	{r4}
      ADC_averdata.batlvl += (uint32_t) ADC_data.batlvl;
 8001464:	4b15      	ldr	r3, [pc, #84]	; (80014bc <HAL_ADC_ConvCpltCallback+0x6c>)
 8001466:	880c      	ldrh	r4, [r1, #0]
      ADC_averdata.jox += (uint32_t) ADC_data.jox;
 8001468:	f8b1 c002 	ldrh.w	ip, [r1, #2]
      aver_counter--;
 800146c:	3a01      	subs	r2, #1
 800146e:	6002      	str	r2, [r0, #0]
      ADC_averdata.jox += (uint32_t) ADC_data.jox;
 8001470:	e9d3 0200 	ldrd	r0, r2, [r3]
 8001474:	4462      	add	r2, ip
      ADC_averdata.batlvl += (uint32_t) ADC_data.batlvl;
 8001476:	4420      	add	r0, r4
      ADC_averdata.joy += (uint32_t) ADC_data.joy;
 8001478:	f8d3 c008 	ldr.w	ip, [r3, #8]
 800147c:	888c      	ldrh	r4, [r1, #4]
      ADC_averdata.jox += (uint32_t) ADC_data.jox;
 800147e:	e9c3 0200 	strd	r0, r2, [r3]
      ADC_averdata.vref += (uint32_t) ADC_data.vref;
 8001482:	e9d3 0203 	ldrd	r0, r2, [r3, #12]
      ADC_averdata.joy += (uint32_t) ADC_data.joy;
 8001486:	4464      	add	r4, ip
 8001488:	609c      	str	r4, [r3, #8]
      ADC_averdata.tmpr += (uint32_t) ADC_data.tmpr;
 800148a:	88cc      	ldrh	r4, [r1, #6]
      ADC_averdata.vref += (uint32_t) ADC_data.vref;
 800148c:	8909      	ldrh	r1, [r1, #8]
      ADC_averdata.tmpr += (uint32_t) ADC_data.tmpr;
 800148e:	4420      	add	r0, r4
      ADC_averdata.vref += (uint32_t) ADC_data.vref;
 8001490:	440a      	add	r2, r1
 8001492:	e9c3 0203 	strd	r0, r2, [r3, #12]
    adc_complete = 1;
 8001496:	2201      	movs	r2, #1
 8001498:	4b09      	ldr	r3, [pc, #36]	; (80014c0 <HAL_ADC_ConvCpltCallback+0x70>)
}
 800149a:	bc10      	pop	{r4}
    adc_complete = 1;
 800149c:	601a      	str	r2, [r3, #0]
}
 800149e:	4770      	bx	lr
    else adc_avercomplete = 1;
 80014a0:	2201      	movs	r2, #1
 80014a2:	4b08      	ldr	r3, [pc, #32]	; (80014c4 <HAL_ADC_ConvCpltCallback+0x74>)
 80014a4:	601a      	str	r2, [r3, #0]
    adc_complete = 1;
 80014a6:	2201      	movs	r2, #1
 80014a8:	4b05      	ldr	r3, [pc, #20]	; (80014c0 <HAL_ADC_ConvCpltCallback+0x70>)
 80014aa:	601a      	str	r2, [r3, #0]
 80014ac:	4770      	bx	lr
 80014ae:	bf00      	nop
 80014b0:	40012400 	.word	0x40012400
 80014b4:	2000000c 	.word	0x2000000c
 80014b8:	2000061c 	.word	0x2000061c
 80014bc:	20000608 	.word	0x20000608
 80014c0:	20000008 	.word	0x20000008
 80014c4:	20000628 	.word	0x20000628

080014c8 <Error_Handler>:
 80014c8:	b672      	cpsid	i
  while (1)
 80014ca:	e7fe      	b.n	80014ca <Error_Handler+0x2>

080014cc <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80014cc:	4b0e      	ldr	r3, [pc, #56]	; (8001508 <HAL_MspInit+0x3c>)
{
 80014ce:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 80014d0:	699a      	ldr	r2, [r3, #24]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80014d2:	490e      	ldr	r1, [pc, #56]	; (800150c <HAL_MspInit+0x40>)
  __HAL_RCC_AFIO_CLK_ENABLE();
 80014d4:	f042 0201 	orr.w	r2, r2, #1
 80014d8:	619a      	str	r2, [r3, #24]
 80014da:	699a      	ldr	r2, [r3, #24]
 80014dc:	f002 0201 	and.w	r2, r2, #1
 80014e0:	9200      	str	r2, [sp, #0]
 80014e2:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014e4:	69da      	ldr	r2, [r3, #28]
 80014e6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80014ea:	61da      	str	r2, [r3, #28]
 80014ec:	69db      	ldr	r3, [r3, #28]
 80014ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014f2:	9301      	str	r3, [sp, #4]
 80014f4:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80014f6:	684b      	ldr	r3, [r1, #4]
 80014f8:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80014fc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001500:	604b      	str	r3, [r1, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001502:	b002      	add	sp, #8
 8001504:	4770      	bx	lr
 8001506:	bf00      	nop
 8001508:	40021000 	.word	0x40021000
 800150c:	40010000 	.word	0x40010000

08001510 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001510:	b5f0      	push	{r4, r5, r6, r7, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001512:	2400      	movs	r4, #0
  if(hadc->Instance==ADC1)
 8001514:	4b28      	ldr	r3, [pc, #160]	; (80015b8 <HAL_ADC_MspInit+0xa8>)
 8001516:	6802      	ldr	r2, [r0, #0]
{
 8001518:	b089      	sub	sp, #36	; 0x24
  if(hadc->Instance==ADC1)
 800151a:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800151c:	e9cd 4404 	strd	r4, r4, [sp, #16]
 8001520:	e9cd 4406 	strd	r4, r4, [sp, #24]
  if(hadc->Instance==ADC1)
 8001524:	d001      	beq.n	800152a <HAL_ADC_MspInit+0x1a>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001526:	b009      	add	sp, #36	; 0x24
 8001528:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_ADC1_CLK_ENABLE();
 800152a:	f503 436c 	add.w	r3, r3, #60416	; 0xec00
 800152e:	699a      	ldr	r2, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001530:	2703      	movs	r7, #3
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001532:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001536:	619a      	str	r2, [r3, #24]
 8001538:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(BAT_LVL_CTRL_GPIO_Port, &GPIO_InitStruct);
 800153a:	a904      	add	r1, sp, #16
    __HAL_RCC_ADC1_CLK_ENABLE();
 800153c:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8001540:	9201      	str	r2, [sp, #4]
 8001542:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001544:	699a      	ldr	r2, [r3, #24]
 8001546:	4605      	mov	r5, r0
 8001548:	f042 0204 	orr.w	r2, r2, #4
 800154c:	619a      	str	r2, [r3, #24]
 800154e:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(BAT_LVL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8001550:	481a      	ldr	r0, [pc, #104]	; (80015bc <HAL_ADC_MspInit+0xac>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001552:	f002 0204 	and.w	r2, r2, #4
 8001556:	9202      	str	r2, [sp, #8]
 8001558:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800155a:	699a      	ldr	r2, [r3, #24]
    hdma_adc1.Instance = DMA1_Channel1;
 800155c:	4e18      	ldr	r6, [pc, #96]	; (80015c0 <HAL_ADC_MspInit+0xb0>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800155e:	f042 0208 	orr.w	r2, r2, #8
 8001562:	619a      	str	r2, [r3, #24]
 8001564:	699b      	ldr	r3, [r3, #24]
 8001566:	f003 0308 	and.w	r3, r3, #8
 800156a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pin = BAT_LVL_CTRL_Pin;
 800156c:	2301      	movs	r3, #1
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800156e:	9a03      	ldr	r2, [sp, #12]
    GPIO_InitStruct.Pin = BAT_LVL_CTRL_Pin;
 8001570:	e9cd 3704 	strd	r3, r7, [sp, #16]
    HAL_GPIO_Init(BAT_LVL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8001574:	f000 fec2 	bl	80022fc <HAL_GPIO_Init>
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001578:	4812      	ldr	r0, [pc, #72]	; (80015c4 <HAL_ADC_MspInit+0xb4>)
 800157a:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800157c:	e9cd 7704 	strd	r7, r7, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001580:	f000 febc 	bl	80022fc <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA1_Channel1;
 8001584:	4910      	ldr	r1, [pc, #64]	; (80015c8 <HAL_ADC_MspInit+0xb8>)
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001586:	2280      	movs	r2, #128	; 0x80
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001588:	f44f 7380 	mov.w	r3, #256	; 0x100
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800158c:	e9c6 1400 	strd	r1, r4, [r6]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001590:	f44f 6180 	mov.w	r1, #1024	; 0x400
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001594:	4630      	mov	r0, r6
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001596:	e9c6 4406 	strd	r4, r4, [r6, #24]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800159a:	e9c6 2303 	strd	r2, r3, [r6, #12]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800159e:	60b4      	str	r4, [r6, #8]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80015a0:	6171      	str	r1, [r6, #20]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80015a2:	f000 fd31 	bl	8002008 <HAL_DMA_Init>
 80015a6:	b918      	cbnz	r0, 80015b0 <HAL_ADC_MspInit+0xa0>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80015a8:	622e      	str	r6, [r5, #32]
 80015aa:	6275      	str	r5, [r6, #36]	; 0x24
}
 80015ac:	b009      	add	sp, #36	; 0x24
 80015ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
      Error_Handler();
 80015b0:	f7ff ff8a 	bl	80014c8 <Error_Handler>
 80015b4:	e7f8      	b.n	80015a8 <HAL_ADC_MspInit+0x98>
 80015b6:	bf00      	nop
 80015b8:	40012400 	.word	0x40012400
 80015bc:	40010800 	.word	0x40010800
 80015c0:	2000065c 	.word	0x2000065c
 80015c4:	40010c00 	.word	0x40010c00
 80015c8:	40020008 	.word	0x40020008

080015cc <HAL_RTC_MspInit>:
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
  if(hrtc->Instance==RTC)
 80015cc:	4b0c      	ldr	r3, [pc, #48]	; (8001600 <HAL_RTC_MspInit+0x34>)
 80015ce:	6802      	ldr	r2, [r0, #0]
 80015d0:	429a      	cmp	r2, r3
 80015d2:	d000      	beq.n	80015d6 <HAL_RTC_MspInit+0xa>
 80015d4:	4770      	bx	lr
{
 80015d6:	b500      	push	{lr}
 80015d8:	b083      	sub	sp, #12
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 80015da:	f000 ffa1 	bl	8002520 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80015de:	2001      	movs	r0, #1
    __HAL_RCC_BKP_CLK_ENABLE();
 80015e0:	4b08      	ldr	r3, [pc, #32]	; (8001604 <HAL_RTC_MspInit+0x38>)
    __HAL_RCC_RTC_ENABLE();
 80015e2:	4909      	ldr	r1, [pc, #36]	; (8001608 <HAL_RTC_MspInit+0x3c>)
    __HAL_RCC_BKP_CLK_ENABLE();
 80015e4:	69da      	ldr	r2, [r3, #28]
 80015e6:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 80015ea:	61da      	str	r2, [r3, #28]
 80015ec:	69db      	ldr	r3, [r3, #28]
 80015ee:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80015f2:	9301      	str	r3, [sp, #4]
 80015f4:	9b01      	ldr	r3, [sp, #4]
    __HAL_RCC_RTC_ENABLE();
 80015f6:	f8c1 043c 	str.w	r0, [r1, #1084]	; 0x43c
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80015fa:	b003      	add	sp, #12
 80015fc:	f85d fb04 	ldr.w	pc, [sp], #4
 8001600:	40002800 	.word	0x40002800
 8001604:	40021000 	.word	0x40021000
 8001608:	42420000 	.word	0x42420000

0800160c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800160c:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800160e:	2400      	movs	r4, #0
  if(hspi->Instance==SPI1)
 8001610:	4a2a      	ldr	r2, [pc, #168]	; (80016bc <HAL_SPI_MspInit+0xb0>)
 8001612:	6803      	ldr	r3, [r0, #0]
{
 8001614:	b088      	sub	sp, #32
  if(hspi->Instance==SPI1)
 8001616:	4293      	cmp	r3, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001618:	e9cd 4404 	strd	r4, r4, [sp, #16]
 800161c:	e9cd 4406 	strd	r4, r4, [sp, #24]
  if(hspi->Instance==SPI1)
 8001620:	d004      	beq.n	800162c <HAL_SPI_MspInit+0x20>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
  else if(hspi->Instance==SPI2)
 8001622:	4a27      	ldr	r2, [pc, #156]	; (80016c0 <HAL_SPI_MspInit+0xb4>)
 8001624:	4293      	cmp	r3, r2
 8001626:	d028      	beq.n	800167a <HAL_SPI_MspInit+0x6e>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001628:	b008      	add	sp, #32
 800162a:	bd70      	pop	{r4, r5, r6, pc}
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800162c:	2003      	movs	r0, #3
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
 800162e:	26b0      	movs	r6, #176	; 0xb0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001630:	2502      	movs	r5, #2
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001632:	4b24      	ldr	r3, [pc, #144]	; (80016c4 <HAL_SPI_MspInit+0xb8>)
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001634:	a904      	add	r1, sp, #16
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001636:	699a      	ldr	r2, [r3, #24]
 8001638:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800163c:	619a      	str	r2, [r3, #24]
 800163e:	699a      	ldr	r2, [r3, #24]
 8001640:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001644:	9200      	str	r2, [sp, #0]
 8001646:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001648:	699a      	ldr	r2, [r3, #24]
 800164a:	f042 0204 	orr.w	r2, r2, #4
 800164e:	619a      	str	r2, [r3, #24]
 8001650:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001652:	9007      	str	r0, [sp, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001654:	f003 0304 	and.w	r3, r3, #4
 8001658:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800165a:	481b      	ldr	r0, [pc, #108]	; (80016c8 <HAL_SPI_MspInit+0xbc>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800165c:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800165e:	e9cd 6504 	strd	r6, r5, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001662:	f000 fe4b 	bl	80022fc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001666:	2340      	movs	r3, #64	; 0x40
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001668:	4817      	ldr	r0, [pc, #92]	; (80016c8 <HAL_SPI_MspInit+0xbc>)
 800166a:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800166c:	e9cd 4405 	strd	r4, r4, [sp, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001670:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001672:	f000 fe43 	bl	80022fc <HAL_GPIO_Init>
}
 8001676:	b008      	add	sp, #32
 8001678:	bd70      	pop	{r4, r5, r6, pc}
    GPIO_InitStruct.Pin = DISP_SPI_CS_Pin|DISP_SPI_SCK_Pin|GPIO_PIN_15;
 800167a:	f44f 4030 	mov.w	r0, #45056	; 0xb000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800167e:	2502      	movs	r5, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001680:	2403      	movs	r4, #3
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001682:	4b10      	ldr	r3, [pc, #64]	; (80016c4 <HAL_SPI_MspInit+0xb8>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001684:	a904      	add	r1, sp, #16
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001686:	69da      	ldr	r2, [r3, #28]
 8001688:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800168c:	61da      	str	r2, [r3, #28]
 800168e:	69da      	ldr	r2, [r3, #28]
 8001690:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8001694:	9202      	str	r2, [sp, #8]
 8001696:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001698:	699a      	ldr	r2, [r3, #24]
 800169a:	f042 0208 	orr.w	r2, r2, #8
 800169e:	619a      	str	r2, [r3, #24]
 80016a0:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Pin = DISP_SPI_CS_Pin|DISP_SPI_SCK_Pin|GPIO_PIN_15;
 80016a2:	9004      	str	r0, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016a4:	f003 0308 	and.w	r3, r3, #8
 80016a8:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016aa:	4808      	ldr	r0, [pc, #32]	; (80016cc <HAL_SPI_MspInit+0xc0>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016ac:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016ae:	9505      	str	r5, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80016b0:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016b2:	f000 fe23 	bl	80022fc <HAL_GPIO_Init>
}
 80016b6:	b008      	add	sp, #32
 80016b8:	bd70      	pop	{r4, r5, r6, pc}
 80016ba:	bf00      	nop
 80016bc:	40013000 	.word	0x40013000
 80016c0:	40003800 	.word	0x40003800
 80016c4:	40021000 	.word	0x40021000
 80016c8:	40010800 	.word	0x40010800
 80016cc:	40010c00 	.word	0x40010c00

080016d0 <HAL_TIM_PWM_MspInit>:
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
  if(htim_pwm->Instance==TIM1)
 80016d0:	4b09      	ldr	r3, [pc, #36]	; (80016f8 <HAL_TIM_PWM_MspInit+0x28>)
 80016d2:	6802      	ldr	r2, [r0, #0]
 80016d4:	429a      	cmp	r2, r3
 80016d6:	d000      	beq.n	80016da <HAL_TIM_PWM_MspInit+0xa>
 80016d8:	4770      	bx	lr
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80016da:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 80016de:	699a      	ldr	r2, [r3, #24]
{
 80016e0:	b082      	sub	sp, #8
    __HAL_RCC_TIM1_CLK_ENABLE();
 80016e2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80016e6:	619a      	str	r2, [r3, #24]
 80016e8:	699b      	ldr	r3, [r3, #24]
 80016ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80016ee:	9301      	str	r3, [sp, #4]
 80016f0:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80016f2:	b002      	add	sp, #8
 80016f4:	4770      	bx	lr
 80016f6:	bf00      	nop
 80016f8:	40012c00 	.word	0x40012c00

080016fc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016fc:	2300      	movs	r3, #0
{
 80016fe:	b530      	push	{r4, r5, lr}
  if(htim->Instance==TIM1)
 8001700:	4a11      	ldr	r2, [pc, #68]	; (8001748 <HAL_TIM_MspPostInit+0x4c>)
 8001702:	6801      	ldr	r1, [r0, #0]
{
 8001704:	b087      	sub	sp, #28
  if(htim->Instance==TIM1)
 8001706:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001708:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800170c:	e9cd 3304 	strd	r3, r3, [sp, #16]
  if(htim->Instance==TIM1)
 8001710:	d001      	beq.n	8001716 <HAL_TIM_MspPostInit+0x1a>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001712:	b007      	add	sp, #28
 8001714:	bd30      	pop	{r4, r5, pc}
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001716:	2402      	movs	r4, #2
    GPIO_InitStruct.Pin = DISP_BRIGHT_PWM_Pin;
 8001718:	f44f 7580 	mov.w	r5, #256	; 0x100
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800171c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001720:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8001724:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(DISP_BRIGHT_PWM_GPIO_Port, &GPIO_InitStruct);
 8001726:	4809      	ldr	r0, [pc, #36]	; (800174c <HAL_TIM_MspPostInit+0x50>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001728:	f042 0204 	orr.w	r2, r2, #4
 800172c:	619a      	str	r2, [r3, #24]
 800172e:	699b      	ldr	r3, [r3, #24]
    HAL_GPIO_Init(DISP_BRIGHT_PWM_GPIO_Port, &GPIO_InitStruct);
 8001730:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001732:	f003 0304 	and.w	r3, r3, #4
 8001736:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = DISP_BRIGHT_PWM_Pin;
 8001738:	e9cd 5402 	strd	r5, r4, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800173c:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800173e:	9405      	str	r4, [sp, #20]
    HAL_GPIO_Init(DISP_BRIGHT_PWM_GPIO_Port, &GPIO_InitStruct);
 8001740:	f000 fddc 	bl	80022fc <HAL_GPIO_Init>
}
 8001744:	b007      	add	sp, #28
 8001746:	bd30      	pop	{r4, r5, pc}
 8001748:	40012c00 	.word	0x40012c00
 800174c:	40010800 	.word	0x40010800

08001750 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001750:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001752:	2400      	movs	r4, #0
  if(huart->Instance==USART1)
 8001754:	4a37      	ldr	r2, [pc, #220]	; (8001834 <HAL_UART_MspInit+0xe4>)
 8001756:	6803      	ldr	r3, [r0, #0]
{
 8001758:	b088      	sub	sp, #32
  if(huart->Instance==USART1)
 800175a:	4293      	cmp	r3, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800175c:	e9cd 4404 	strd	r4, r4, [sp, #16]
 8001760:	e9cd 4406 	strd	r4, r4, [sp, #24]
  if(huart->Instance==USART1)
 8001764:	d004      	beq.n	8001770 <HAL_UART_MspInit+0x20>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
  else if(huart->Instance==USART3)
 8001766:	4a34      	ldr	r2, [pc, #208]	; (8001838 <HAL_UART_MspInit+0xe8>)
 8001768:	4293      	cmp	r3, r2
 800176a:	d032      	beq.n	80017d2 <HAL_UART_MspInit+0x82>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800176c:	b008      	add	sp, #32
 800176e:	bd70      	pop	{r4, r5, r6, pc}
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001770:	2003      	movs	r0, #3
    GPIO_InitStruct.Pin = ESP_UART_TX_Pin;
 8001772:	f44f 7600 	mov.w	r6, #512	; 0x200
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001776:	2502      	movs	r5, #2
    __HAL_RCC_USART1_CLK_ENABLE();
 8001778:	4b30      	ldr	r3, [pc, #192]	; (800183c <HAL_UART_MspInit+0xec>)
    HAL_GPIO_Init(ESP_UART_TX_GPIO_Port, &GPIO_InitStruct);
 800177a:	a904      	add	r1, sp, #16
    __HAL_RCC_USART1_CLK_ENABLE();
 800177c:	699a      	ldr	r2, [r3, #24]
 800177e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001782:	619a      	str	r2, [r3, #24]
 8001784:	699a      	ldr	r2, [r3, #24]
 8001786:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 800178a:	9200      	str	r2, [sp, #0]
 800178c:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800178e:	699a      	ldr	r2, [r3, #24]
 8001790:	f042 0204 	orr.w	r2, r2, #4
 8001794:	619a      	str	r2, [r3, #24]
 8001796:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001798:	9007      	str	r0, [sp, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800179a:	f003 0304 	and.w	r3, r3, #4
 800179e:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(ESP_UART_TX_GPIO_Port, &GPIO_InitStruct);
 80017a0:	4827      	ldr	r0, [pc, #156]	; (8001840 <HAL_UART_MspInit+0xf0>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017a2:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017a4:	e9cd 6504 	strd	r6, r5, [sp, #16]
    HAL_GPIO_Init(ESP_UART_TX_GPIO_Port, &GPIO_InitStruct);
 80017a8:	f000 fda8 	bl	80022fc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ESP_UART_RX_Pin;
 80017ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
    HAL_GPIO_Init(ESP_UART_RX_GPIO_Port, &GPIO_InitStruct);
 80017b0:	a904      	add	r1, sp, #16
 80017b2:	4823      	ldr	r0, [pc, #140]	; (8001840 <HAL_UART_MspInit+0xf0>)
    GPIO_InitStruct.Pin = ESP_UART_RX_Pin;
 80017b4:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b6:	e9cd 4405 	strd	r4, r4, [sp, #20]
    HAL_GPIO_Init(ESP_UART_RX_GPIO_Port, &GPIO_InitStruct);
 80017ba:	f000 fd9f 	bl	80022fc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80017be:	4622      	mov	r2, r4
 80017c0:	4621      	mov	r1, r4
 80017c2:	2025      	movs	r0, #37	; 0x25
 80017c4:	f000 fbbc 	bl	8001f40 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80017c8:	2025      	movs	r0, #37	; 0x25
 80017ca:	f000 fbf7 	bl	8001fbc <HAL_NVIC_EnableIRQ>
}
 80017ce:	b008      	add	sp, #32
 80017d0:	bd70      	pop	{r4, r5, r6, pc}
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80017d2:	2003      	movs	r0, #3
    GPIO_InitStruct.Pin = EXT_TX_Pin;
 80017d4:	f44f 6680 	mov.w	r6, #1024	; 0x400
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017d8:	2502      	movs	r5, #2
    __HAL_RCC_USART3_CLK_ENABLE();
 80017da:	4b18      	ldr	r3, [pc, #96]	; (800183c <HAL_UART_MspInit+0xec>)
    HAL_GPIO_Init(EXT_TX_GPIO_Port, &GPIO_InitStruct);
 80017dc:	a904      	add	r1, sp, #16
    __HAL_RCC_USART3_CLK_ENABLE();
 80017de:	69da      	ldr	r2, [r3, #28]
 80017e0:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80017e4:	61da      	str	r2, [r3, #28]
 80017e6:	69da      	ldr	r2, [r3, #28]
 80017e8:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 80017ec:	9202      	str	r2, [sp, #8]
 80017ee:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017f0:	699a      	ldr	r2, [r3, #24]
 80017f2:	f042 0208 	orr.w	r2, r2, #8
 80017f6:	619a      	str	r2, [r3, #24]
 80017f8:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80017fa:	9007      	str	r0, [sp, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017fc:	f003 0308 	and.w	r3, r3, #8
 8001800:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(EXT_TX_GPIO_Port, &GPIO_InitStruct);
 8001802:	4810      	ldr	r0, [pc, #64]	; (8001844 <HAL_UART_MspInit+0xf4>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001804:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001806:	e9cd 6504 	strd	r6, r5, [sp, #16]
    HAL_GPIO_Init(EXT_TX_GPIO_Port, &GPIO_InitStruct);
 800180a:	f000 fd77 	bl	80022fc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = EXT_RX_Pin;
 800180e:	f44f 6300 	mov.w	r3, #2048	; 0x800
    HAL_GPIO_Init(EXT_RX_GPIO_Port, &GPIO_InitStruct);
 8001812:	a904      	add	r1, sp, #16
 8001814:	480b      	ldr	r0, [pc, #44]	; (8001844 <HAL_UART_MspInit+0xf4>)
    GPIO_InitStruct.Pin = EXT_RX_Pin;
 8001816:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001818:	e9cd 4405 	strd	r4, r4, [sp, #20]
    HAL_GPIO_Init(EXT_RX_GPIO_Port, &GPIO_InitStruct);
 800181c:	f000 fd6e 	bl	80022fc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001820:	4622      	mov	r2, r4
 8001822:	4621      	mov	r1, r4
 8001824:	2027      	movs	r0, #39	; 0x27
 8001826:	f000 fb8b 	bl	8001f40 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800182a:	2027      	movs	r0, #39	; 0x27
 800182c:	f000 fbc6 	bl	8001fbc <HAL_NVIC_EnableIRQ>
}
 8001830:	b008      	add	sp, #32
 8001832:	bd70      	pop	{r4, r5, r6, pc}
 8001834:	40013800 	.word	0x40013800
 8001838:	40004800 	.word	0x40004800
 800183c:	40021000 	.word	0x40021000
 8001840:	40010800 	.word	0x40010800
 8001844:	40010c00 	.word	0x40010c00

08001848 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001848:	e7fe      	b.n	8001848 <NMI_Handler>
 800184a:	bf00      	nop

0800184c <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800184c:	e7fe      	b.n	800184c <HardFault_Handler>
 800184e:	bf00      	nop

08001850 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001850:	e7fe      	b.n	8001850 <MemManage_Handler>
 8001852:	bf00      	nop

08001854 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001854:	e7fe      	b.n	8001854 <BusFault_Handler>
 8001856:	bf00      	nop

08001858 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001858:	e7fe      	b.n	8001858 <UsageFault_Handler>
 800185a:	bf00      	nop

0800185c <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800185c:	4770      	bx	lr
 800185e:	bf00      	nop

08001860 <DebugMon_Handler>:
 8001860:	4770      	bx	lr
 8001862:	bf00      	nop

08001864 <PendSV_Handler>:
 8001864:	4770      	bx	lr
 8001866:	bf00      	nop

08001868 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001868:	f000 b8c2 	b.w	80019f0 <HAL_IncTick>

0800186c <DMA1_Channel1_IRQHandler>:
void DMA1_Channel1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800186c:	4801      	ldr	r0, [pc, #4]	; (8001874 <DMA1_Channel1_IRQHandler+0x8>)
 800186e:	f000 bcb1 	b.w	80021d4 <HAL_DMA_IRQHandler>
 8001872:	bf00      	nop
 8001874:	2000065c 	.word	0x2000065c

08001878 <USART1_IRQHandler>:
void USART1_IRQHandler(void)
{
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001878:	4801      	ldr	r0, [pc, #4]	; (8001880 <USART1_IRQHandler+0x8>)
 800187a:	f002 b933 	b.w	8003ae4 <HAL_UART_IRQHandler>
 800187e:	bf00      	nop
 8001880:	200007ac 	.word	0x200007ac

08001884 <USART3_IRQHandler>:
void USART3_IRQHandler(void)
{
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001884:	4801      	ldr	r0, [pc, #4]	; (800188c <USART3_IRQHandler+0x8>)
 8001886:	f002 b92d 	b.w	8003ae4 <HAL_UART_IRQHandler>
 800188a:	bf00      	nop
 800188c:	200007f0 	.word	0x200007f0

08001890 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8001890:	2001      	movs	r0, #1
 8001892:	4770      	bx	lr

08001894 <_kill>:

int _kill(int pid, int sig)
{
 8001894:	b508      	push	{r3, lr}
	errno = EINVAL;
 8001896:	f002 fa59 	bl	8003d4c <__errno>
 800189a:	2216      	movs	r2, #22
 800189c:	4603      	mov	r3, r0
	return -1;
}
 800189e:	f04f 30ff 	mov.w	r0, #4294967295
	errno = EINVAL;
 80018a2:	601a      	str	r2, [r3, #0]
}
 80018a4:	bd08      	pop	{r3, pc}
 80018a6:	bf00      	nop

080018a8 <_exit>:

void _exit (int status)
{
 80018a8:	b508      	push	{r3, lr}
	errno = EINVAL;
 80018aa:	f002 fa4f 	bl	8003d4c <__errno>
 80018ae:	2316      	movs	r3, #22
 80018b0:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 80018b2:	e7fe      	b.n	80018b2 <_exit+0xa>

080018b4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80018b4:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018b6:	1e16      	subs	r6, r2, #0
 80018b8:	dd07      	ble.n	80018ca <_read+0x16>
 80018ba:	460c      	mov	r4, r1
 80018bc:	198d      	adds	r5, r1, r6
	{
		*ptr++ = __io_getchar();
 80018be:	f3af 8000 	nop.w
 80018c2:	f804 0b01 	strb.w	r0, [r4], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018c6:	42a5      	cmp	r5, r4
 80018c8:	d1f9      	bne.n	80018be <_read+0xa>
	}

return len;
}
 80018ca:	4630      	mov	r0, r6
 80018cc:	bd70      	pop	{r4, r5, r6, pc}
 80018ce:	bf00      	nop

080018d0 <_close>:
}

int _close(int file)
{
	return -1;
}
 80018d0:	f04f 30ff 	mov.w	r0, #4294967295
 80018d4:	4770      	bx	lr
 80018d6:	bf00      	nop

080018d8 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 80018d8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
 80018dc:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 80018de:	604b      	str	r3, [r1, #4]
}
 80018e0:	4770      	bx	lr
 80018e2:	bf00      	nop

080018e4 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 80018e4:	2001      	movs	r0, #1
 80018e6:	4770      	bx	lr

080018e8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 80018e8:	2000      	movs	r0, #0
 80018ea:	4770      	bx	lr

080018ec <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80018ec:	490d      	ldr	r1, [pc, #52]	; (8001924 <_sbrk+0x38>)
{
 80018ee:	4603      	mov	r3, r0
 80018f0:	b510      	push	{r4, lr}
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80018f2:	4a0d      	ldr	r2, [pc, #52]	; (8001928 <_sbrk+0x3c>)
 80018f4:	4c0d      	ldr	r4, [pc, #52]	; (800192c <_sbrk+0x40>)
  if (NULL == __sbrk_heap_end)
 80018f6:	6808      	ldr	r0, [r1, #0]
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80018f8:	1b12      	subs	r2, r2, r4
  if (NULL == __sbrk_heap_end)
 80018fa:	b120      	cbz	r0, 8001906 <_sbrk+0x1a>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80018fc:	4403      	add	r3, r0
 80018fe:	4293      	cmp	r3, r2
 8001900:	d807      	bhi.n	8001912 <_sbrk+0x26>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8001902:	600b      	str	r3, [r1, #0]

  return (void *)prev_heap_end;
}
 8001904:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8001906:	4c0a      	ldr	r4, [pc, #40]	; (8001930 <_sbrk+0x44>)
 8001908:	4620      	mov	r0, r4
  if (__sbrk_heap_end + incr > max_heap)
 800190a:	4403      	add	r3, r0
 800190c:	4293      	cmp	r3, r2
    __sbrk_heap_end = &_end;
 800190e:	600c      	str	r4, [r1, #0]
  if (__sbrk_heap_end + incr > max_heap)
 8001910:	d9f7      	bls.n	8001902 <_sbrk+0x16>
    errno = ENOMEM;
 8001912:	f002 fa1b 	bl	8003d4c <__errno>
 8001916:	220c      	movs	r2, #12
 8001918:	4603      	mov	r3, r0
    return (void *)-1;
 800191a:	f04f 30ff 	mov.w	r0, #4294967295
    errno = ENOMEM;
 800191e:	601a      	str	r2, [r3, #0]
}
 8001920:	bd10      	pop	{r4, pc}
 8001922:	bf00      	nop
 8001924:	2000114c 	.word	0x2000114c
 8001928:	20005000 	.word	0x20005000
 800192c:	00000400 	.word	0x00000400
 8001930:	20001168 	.word	0x20001168

08001934 <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001934:	4770      	bx	lr
 8001936:	bf00      	nop

08001938 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001938:	480c      	ldr	r0, [pc, #48]	; (800196c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800193a:	490d      	ldr	r1, [pc, #52]	; (8001970 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800193c:	4a0d      	ldr	r2, [pc, #52]	; (8001974 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800193e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001940:	e002      	b.n	8001948 <LoopCopyDataInit>

08001942 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001942:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001944:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001946:	3304      	adds	r3, #4

08001948 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001948:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800194a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800194c:	d3f9      	bcc.n	8001942 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800194e:	4a0a      	ldr	r2, [pc, #40]	; (8001978 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001950:	4c0a      	ldr	r4, [pc, #40]	; (800197c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001952:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001954:	e001      	b.n	800195a <LoopFillZerobss>

08001956 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001956:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001958:	3204      	adds	r2, #4

0800195a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800195a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800195c:	d3fb      	bcc.n	8001956 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800195e:	f7ff ffe9 	bl	8001934 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001962:	f002 f9f9 	bl	8003d58 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001966:	f7ff fa4b 	bl	8000e00 <main>
  bx lr
 800196a:	4770      	bx	lr
  ldr r0, =_sdata
 800196c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001970:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 8001974:	08007574 	.word	0x08007574
  ldr r2, =_sbss
 8001978:	200001ec 	.word	0x200001ec
  ldr r4, =_ebss
 800197c:	20001164 	.word	0x20001164

08001980 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001980:	e7fe      	b.n	8001980 <ADC1_2_IRQHandler>
	...

08001984 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001984:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001986:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800198a:	4a0d      	ldr	r2, [pc, #52]	; (80019c0 <HAL_InitTick+0x3c>)
{
 800198c:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800198e:	7811      	ldrb	r1, [r2, #0]
 8001990:	4a0c      	ldr	r2, [pc, #48]	; (80019c4 <HAL_InitTick+0x40>)
 8001992:	fbb3 f3f1 	udiv	r3, r3, r1
 8001996:	6812      	ldr	r2, [r2, #0]
 8001998:	fbb2 f0f3 	udiv	r0, r2, r3
 800199c:	f000 fb1c 	bl	8001fd8 <HAL_SYSTICK_Config>
 80019a0:	b908      	cbnz	r0, 80019a6 <HAL_InitTick+0x22>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019a2:	2d0f      	cmp	r5, #15
 80019a4:	d901      	bls.n	80019aa <HAL_InitTick+0x26>
    return HAL_ERROR;
 80019a6:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80019a8:	bd38      	pop	{r3, r4, r5, pc}
 80019aa:	4604      	mov	r4, r0
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019ac:	4602      	mov	r2, r0
 80019ae:	4629      	mov	r1, r5
 80019b0:	f04f 30ff 	mov.w	r0, #4294967295
 80019b4:	f000 fac4 	bl	8001f40 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80019b8:	4b03      	ldr	r3, [pc, #12]	; (80019c8 <HAL_InitTick+0x44>)
 80019ba:	4620      	mov	r0, r4
 80019bc:	601d      	str	r5, [r3, #0]
}
 80019be:	bd38      	pop	{r3, r4, r5, pc}
 80019c0:	20000014 	.word	0x20000014
 80019c4:	20000010 	.word	0x20000010
 80019c8:	20000018 	.word	0x20000018

080019cc <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80019cc:	4a07      	ldr	r2, [pc, #28]	; (80019ec <HAL_Init+0x20>)
{
 80019ce:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80019d0:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019d2:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80019d4:	f043 0310 	orr.w	r3, r3, #16
 80019d8:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019da:	f000 fa9f 	bl	8001f1c <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80019de:	200f      	movs	r0, #15
 80019e0:	f7ff ffd0 	bl	8001984 <HAL_InitTick>
  HAL_MspInit();
 80019e4:	f7ff fd72 	bl	80014cc <HAL_MspInit>
}
 80019e8:	2000      	movs	r0, #0
 80019ea:	bd08      	pop	{r3, pc}
 80019ec:	40022000 	.word	0x40022000

080019f0 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80019f0:	4a03      	ldr	r2, [pc, #12]	; (8001a00 <HAL_IncTick+0x10>)
 80019f2:	4b04      	ldr	r3, [pc, #16]	; (8001a04 <HAL_IncTick+0x14>)
 80019f4:	6811      	ldr	r1, [r2, #0]
 80019f6:	781b      	ldrb	r3, [r3, #0]
 80019f8:	440b      	add	r3, r1
 80019fa:	6013      	str	r3, [r2, #0]
}
 80019fc:	4770      	bx	lr
 80019fe:	bf00      	nop
 8001a00:	20001150 	.word	0x20001150
 8001a04:	20000014 	.word	0x20000014

08001a08 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001a08:	4b01      	ldr	r3, [pc, #4]	; (8001a10 <HAL_GetTick+0x8>)
 8001a0a:	6818      	ldr	r0, [r3, #0]
}
 8001a0c:	4770      	bx	lr
 8001a0e:	bf00      	nop
 8001a10:	20001150 	.word	0x20001150

08001a14 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a14:	b538      	push	{r3, r4, r5, lr}
 8001a16:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001a18:	f7ff fff6 	bl	8001a08 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a1c:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 8001a1e:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 8001a20:	d002      	beq.n	8001a28 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a22:	4b04      	ldr	r3, [pc, #16]	; (8001a34 <HAL_Delay+0x20>)
 8001a24:	781b      	ldrb	r3, [r3, #0]
 8001a26:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001a28:	f7ff ffee 	bl	8001a08 <HAL_GetTick>
 8001a2c:	1b40      	subs	r0, r0, r5
 8001a2e:	42a0      	cmp	r0, r4
 8001a30:	d3fa      	bcc.n	8001a28 <HAL_Delay+0x14>
  {
  }
}
 8001a32:	bd38      	pop	{r3, r4, r5, pc}
 8001a34:	20000014 	.word	0x20000014

08001a38 <ADC_DMAConvCplt>:
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001a38:	6a43      	ldr	r3, [r0, #36]	; 0x24
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001a3a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001a3c:	f012 0f50 	tst.w	r2, #80	; 0x50
 8001a40:	d10f      	bne.n	8001a62 <ADC_DMAConvCplt+0x2a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001a42:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001a44:	6819      	ldr	r1, [r3, #0]
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001a46:	f442 7200 	orr.w	r2, r2, #512	; 0x200
{
 8001a4a:	b510      	push	{r4, lr}
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001a4c:	629a      	str	r2, [r3, #40]	; 0x28
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001a4e:	688a      	ldr	r2, [r1, #8]
 8001a50:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 8001a54:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
 8001a58:	d006      	beq.n	8001a68 <ADC_DMAConvCplt+0x30>
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	f7ff fcf8 	bl	8001450 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8001a60:	bd10      	pop	{r4, pc}
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8001a62:	6a1b      	ldr	r3, [r3, #32]
 8001a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a66:	4718      	bx	r3
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001a68:	7b1a      	ldrb	r2, [r3, #12]
 8001a6a:	2a00      	cmp	r2, #0
 8001a6c:	d1f5      	bne.n	8001a5a <ADC_DMAConvCplt+0x22>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001a6e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001a70:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001a74:	629a      	str	r2, [r3, #40]	; 0x28
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001a76:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001a78:	04d2      	lsls	r2, r2, #19
 8001a7a:	d4ee      	bmi.n	8001a5a <ADC_DMAConvCplt+0x22>
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001a7c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001a7e:	f042 0201 	orr.w	r2, r2, #1
 8001a82:	629a      	str	r2, [r3, #40]	; 0x28
 8001a84:	e7e9      	b.n	8001a5a <ADC_DMAConvCplt+0x22>
 8001a86:	bf00      	nop

08001a88 <HAL_ADC_ConvHalfCpltCallback>:
 8001a88:	4770      	bx	lr
 8001a8a:	bf00      	nop

08001a8c <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001a8c:	b508      	push	{r3, lr}
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001a8e:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8001a90:	f7ff fffa 	bl	8001a88 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001a94:	bd08      	pop	{r3, pc}
 8001a96:	bf00      	nop

08001a98 <HAL_ADC_ErrorCallback>:
 8001a98:	4770      	bx	lr
 8001a9a:	bf00      	nop

08001a9c <ADC_DMAError>:
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001a9c:	6a40      	ldr	r0, [r0, #36]	; 0x24
{
 8001a9e:	b508      	push	{r3, lr}
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001aa0:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8001aa2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001aa6:	6283      	str	r3, [r0, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001aa8:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8001aaa:	f043 0304 	orr.w	r3, r3, #4
 8001aae:	62c3      	str	r3, [r0, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001ab0:	f7ff fff2 	bl	8001a98 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001ab4:	bd08      	pop	{r3, pc}
 8001ab6:	bf00      	nop

08001ab8 <HAL_ADC_ConfigChannel>:
  __IO uint32_t wait_loop_index = 0U;
 8001ab8:	2300      	movs	r3, #0
{ 
 8001aba:	b530      	push	{r4, r5, lr}
 8001abc:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0U;
 8001abe:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8001ac0:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8001ac4:	2b01      	cmp	r3, #1
 8001ac6:	d074      	beq.n	8001bb2 <HAL_ADC_ConfigChannel+0xfa>
 8001ac8:	2301      	movs	r3, #1
 8001aca:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  if (sConfig->Rank < 7U)
 8001ace:	684b      	ldr	r3, [r1, #4]
 8001ad0:	4602      	mov	r2, r0
 8001ad2:	2b06      	cmp	r3, #6
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001ad4:	6804      	ldr	r4, [r0, #0]
  if (sConfig->Rank < 7U)
 8001ad6:	d932      	bls.n	8001b3e <HAL_ADC_ConfigChannel+0x86>
  else if (sConfig->Rank < 13U)
 8001ad8:	2b0c      	cmp	r3, #12
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001ada:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  else if (sConfig->Rank < 13U)
 8001ade:	d84e      	bhi.n	8001b7e <HAL_ADC_ConfigChannel+0xc6>
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001ae0:	f04f 0c1f 	mov.w	ip, #31
 8001ae4:	6808      	ldr	r0, [r1, #0]
 8001ae6:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8001ae8:	3b23      	subs	r3, #35	; 0x23
 8001aea:	fa00 fe03 	lsl.w	lr, r0, r3
 8001aee:	fa0c f303 	lsl.w	r3, ip, r3
 8001af2:	ea25 0303 	bic.w	r3, r5, r3
 8001af6:	ea43 030e 	orr.w	r3, r3, lr
 8001afa:	6323      	str	r3, [r4, #48]	; 0x30
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001afc:	2809      	cmp	r0, #9
 8001afe:	d930      	bls.n	8001b62 <HAL_ADC_ConfigChannel+0xaa>
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001b00:	f04f 0c07 	mov.w	ip, #7
 8001b04:	688d      	ldr	r5, [r1, #8]
 8001b06:	eb00 0140 	add.w	r1, r0, r0, lsl #1
 8001b0a:	68e3      	ldr	r3, [r4, #12]
 8001b0c:	391e      	subs	r1, #30
 8001b0e:	408d      	lsls	r5, r1
 8001b10:	fa0c f101 	lsl.w	r1, ip, r1
 8001b14:	ea23 0301 	bic.w	r3, r3, r1
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001b18:	f1a0 0110 	sub.w	r1, r0, #16
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001b1c:	432b      	orrs	r3, r5
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001b1e:	2901      	cmp	r1, #1
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001b20:	60e3      	str	r3, [r4, #12]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001b22:	d844      	bhi.n	8001bae <HAL_ADC_ConfigChannel+0xf6>
    if (hadc->Instance == ADC1)
 8001b24:	4b2e      	ldr	r3, [pc, #184]	; (8001be0 <HAL_ADC_ConfigChannel+0x128>)
 8001b26:	429c      	cmp	r4, r3
 8001b28:	d038      	beq.n	8001b9c <HAL_ADC_ConfigChannel+0xe4>
      tmp_hal_status = HAL_ERROR;
 8001b2a:	2001      	movs	r0, #1
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001b2c:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8001b2e:	f043 0320 	orr.w	r3, r3, #32
 8001b32:	6293      	str	r3, [r2, #40]	; 0x28
  __HAL_UNLOCK(hadc);
 8001b34:	2300      	movs	r3, #0
 8001b36:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
}
 8001b3a:	b003      	add	sp, #12
 8001b3c:	bd30      	pop	{r4, r5, pc}
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001b3e:	f04f 0c1f 	mov.w	ip, #31
 8001b42:	6808      	ldr	r0, [r1, #0]
 8001b44:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001b48:	6b65      	ldr	r5, [r4, #52]	; 0x34
 8001b4a:	3b05      	subs	r3, #5
 8001b4c:	fa00 fe03 	lsl.w	lr, r0, r3
 8001b50:	fa0c f303 	lsl.w	r3, ip, r3
 8001b54:	ea25 0303 	bic.w	r3, r5, r3
 8001b58:	ea43 030e 	orr.w	r3, r3, lr
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001b5c:	2809      	cmp	r0, #9
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001b5e:	6363      	str	r3, [r4, #52]	; 0x34
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001b60:	d8ce      	bhi.n	8001b00 <HAL_ADC_ConfigChannel+0x48>
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001b62:	2507      	movs	r5, #7
 8001b64:	6889      	ldr	r1, [r1, #8]
 8001b66:	6923      	ldr	r3, [r4, #16]
 8001b68:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8001b6c:	4081      	lsls	r1, r0
 8001b6e:	fa05 f000 	lsl.w	r0, r5, r0
 8001b72:	ea23 0300 	bic.w	r3, r3, r0
 8001b76:	430b      	orrs	r3, r1
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b78:	2000      	movs	r0, #0
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001b7a:	6123      	str	r3, [r4, #16]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001b7c:	e7da      	b.n	8001b34 <HAL_ADC_ConfigChannel+0x7c>
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001b7e:	f04f 0c1f 	mov.w	ip, #31
 8001b82:	6808      	ldr	r0, [r1, #0]
 8001b84:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
 8001b86:	3b41      	subs	r3, #65	; 0x41
 8001b88:	fa00 fe03 	lsl.w	lr, r0, r3
 8001b8c:	fa0c f303 	lsl.w	r3, ip, r3
 8001b90:	ea25 0303 	bic.w	r3, r5, r3
 8001b94:	ea43 030e 	orr.w	r3, r3, lr
 8001b98:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001b9a:	e7af      	b.n	8001afc <HAL_ADC_ConfigChannel+0x44>
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001b9c:	68a3      	ldr	r3, [r4, #8]
 8001b9e:	021b      	lsls	r3, r3, #8
 8001ba0:	d405      	bmi.n	8001bae <HAL_ADC_ConfigChannel+0xf6>
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001ba2:	68a3      	ldr	r3, [r4, #8]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001ba4:	2810      	cmp	r0, #16
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001ba6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001baa:	60a3      	str	r3, [r4, #8]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001bac:	d004      	beq.n	8001bb8 <HAL_ADC_ConfigChannel+0x100>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001bae:	2000      	movs	r0, #0
 8001bb0:	e7c0      	b.n	8001b34 <HAL_ADC_ConfigChannel+0x7c>
  __HAL_LOCK(hadc);
 8001bb2:	2002      	movs	r0, #2
}
 8001bb4:	b003      	add	sp, #12
 8001bb6:	bd30      	pop	{r4, r5, pc}
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001bb8:	4b0a      	ldr	r3, [pc, #40]	; (8001be4 <HAL_ADC_ConfigChannel+0x12c>)
 8001bba:	490b      	ldr	r1, [pc, #44]	; (8001be8 <HAL_ADC_ConfigChannel+0x130>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	fba1 1303 	umull	r1, r3, r1, r3
 8001bc2:	0c9b      	lsrs	r3, r3, #18
 8001bc4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001bc8:	005b      	lsls	r3, r3, #1
 8001bca:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 8001bcc:	9b01      	ldr	r3, [sp, #4]
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d0ed      	beq.n	8001bae <HAL_ADC_ConfigChannel+0xf6>
            wait_loop_index--;
 8001bd2:	9b01      	ldr	r3, [sp, #4]
 8001bd4:	3b01      	subs	r3, #1
 8001bd6:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 8001bd8:	9b01      	ldr	r3, [sp, #4]
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d1f9      	bne.n	8001bd2 <HAL_ADC_ConfigChannel+0x11a>
 8001bde:	e7e6      	b.n	8001bae <HAL_ADC_ConfigChannel+0xf6>
 8001be0:	40012400 	.word	0x40012400
 8001be4:	20000010 	.word	0x20000010
 8001be8:	431bde83 	.word	0x431bde83

08001bec <ADC_Enable>:
  __IO uint32_t wait_loop_index = 0U;
 8001bec:	2300      	movs	r3, #0
{
 8001bee:	b530      	push	{r4, r5, lr}
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001bf0:	6802      	ldr	r2, [r0, #0]
{
 8001bf2:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0U;
 8001bf4:	9301      	str	r3, [sp, #4]
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001bf6:	6893      	ldr	r3, [r2, #8]
 8001bf8:	07d9      	lsls	r1, r3, #31
 8001bfa:	d427      	bmi.n	8001c4c <ADC_Enable+0x60>
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001bfc:	4b1b      	ldr	r3, [pc, #108]	; (8001c6c <ADC_Enable+0x80>)
 8001bfe:	4604      	mov	r4, r0
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	481b      	ldr	r0, [pc, #108]	; (8001c70 <ADC_Enable+0x84>)
    __HAL_ADC_ENABLE(hadc);
 8001c04:	6891      	ldr	r1, [r2, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001c06:	fba0 0303 	umull	r0, r3, r0, r3
    __HAL_ADC_ENABLE(hadc);
 8001c0a:	f041 0101 	orr.w	r1, r1, #1
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001c0e:	0c9b      	lsrs	r3, r3, #18
    __HAL_ADC_ENABLE(hadc);
 8001c10:	6091      	str	r1, [r2, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001c12:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 8001c14:	9b01      	ldr	r3, [sp, #4]
 8001c16:	b12b      	cbz	r3, 8001c24 <ADC_Enable+0x38>
      wait_loop_index--;
 8001c18:	9b01      	ldr	r3, [sp, #4]
 8001c1a:	3b01      	subs	r3, #1
 8001c1c:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 8001c1e:	9b01      	ldr	r3, [sp, #4]
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d1f9      	bne.n	8001c18 <ADC_Enable+0x2c>
    tickstart = HAL_GetTick();
 8001c24:	f7ff fef0 	bl	8001a08 <HAL_GetTick>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001c28:	6823      	ldr	r3, [r4, #0]
    tickstart = HAL_GetTick();
 8001c2a:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001c2c:	689b      	ldr	r3, [r3, #8]
 8001c2e:	07da      	lsls	r2, r3, #31
 8001c30:	d40c      	bmi.n	8001c4c <ADC_Enable+0x60>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001c32:	f7ff fee9 	bl	8001a08 <HAL_GetTick>
 8001c36:	1b43      	subs	r3, r0, r5
 8001c38:	2b02      	cmp	r3, #2
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001c3a:	6823      	ldr	r3, [r4, #0]
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001c3c:	d903      	bls.n	8001c46 <ADC_Enable+0x5a>
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001c3e:	689a      	ldr	r2, [r3, #8]
 8001c40:	f012 0201 	ands.w	r2, r2, #1
 8001c44:	d005      	beq.n	8001c52 <ADC_Enable+0x66>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001c46:	689b      	ldr	r3, [r3, #8]
 8001c48:	07db      	lsls	r3, r3, #31
 8001c4a:	d5f2      	bpl.n	8001c32 <ADC_Enable+0x46>
  return HAL_OK;
 8001c4c:	2000      	movs	r0, #0
}
 8001c4e:	b003      	add	sp, #12
 8001c50:	bd30      	pop	{r4, r5, pc}
          return HAL_ERROR;
 8001c52:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c54:	6aa3      	ldr	r3, [r4, #40]	; 0x28
          __HAL_UNLOCK(hadc);
 8001c56:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c5a:	f043 0310 	orr.w	r3, r3, #16
 8001c5e:	62a3      	str	r3, [r4, #40]	; 0x28
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c60:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001c62:	4303      	orrs	r3, r0
 8001c64:	62e3      	str	r3, [r4, #44]	; 0x2c
}
 8001c66:	b003      	add	sp, #12
 8001c68:	bd30      	pop	{r4, r5, pc}
 8001c6a:	bf00      	nop
 8001c6c:	20000010 	.word	0x20000010
 8001c70:	431bde83 	.word	0x431bde83

08001c74 <HAL_ADC_Start_DMA>:
{
 8001c74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c76:	4604      	mov	r4, r0
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8001c78:	4d3e      	ldr	r5, [pc, #248]	; (8001d74 <HAL_ADC_Start_DMA+0x100>)
 8001c7a:	6800      	ldr	r0, [r0, #0]
{
 8001c7c:	460f      	mov	r7, r1
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8001c7e:	42a8      	cmp	r0, r5
{
 8001c80:	4616      	mov	r6, r2
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8001c82:	d059      	beq.n	8001d38 <HAL_ADC_Start_DMA+0xc4>
 8001c84:	4b3c      	ldr	r3, [pc, #240]	; (8001d78 <HAL_ADC_Start_DMA+0x104>)
 8001c86:	4298      	cmp	r0, r3
 8001c88:	d056      	beq.n	8001d38 <HAL_ADC_Start_DMA+0xc4>
    __HAL_LOCK(hadc);
 8001c8a:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8001c8e:	2b01      	cmp	r3, #1
 8001c90:	d05f      	beq.n	8001d52 <HAL_ADC_Start_DMA+0xde>
 8001c92:	2301      	movs	r3, #1
    tmp_hal_status = ADC_Enable(hadc);
 8001c94:	4620      	mov	r0, r4
    __HAL_LOCK(hadc);
 8001c96:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
    tmp_hal_status = ADC_Enable(hadc);
 8001c9a:	f7ff ffa7 	bl	8001bec <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8001c9e:	4605      	mov	r5, r0
 8001ca0:	2800      	cmp	r0, #0
 8001ca2:	d151      	bne.n	8001d48 <HAL_ADC_Start_DMA+0xd4>
      ADC_STATE_CLR_SET(hadc->State,
 8001ca4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001ca6:	6821      	ldr	r1, [r4, #0]
 8001ca8:	4b33      	ldr	r3, [pc, #204]	; (8001d78 <HAL_ADC_Start_DMA+0x104>)
      ADC_STATE_CLR_SET(hadc->State,
 8001caa:	f420 6070 	bic.w	r0, r0, #3840	; 0xf00
 8001cae:	f020 0001 	bic.w	r0, r0, #1
 8001cb2:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001cb6:	4299      	cmp	r1, r3
      ADC_STATE_CLR_SET(hadc->State,
 8001cb8:	62a0      	str	r0, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001cba:	d04d      	beq.n	8001d58 <HAL_ADC_Start_DMA+0xe4>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001cbc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001cbe:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001cc2:	62a3      	str	r3, [r4, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001cc4:	684b      	ldr	r3, [r1, #4]
 8001cc6:	055a      	lsls	r2, r3, #21
 8001cc8:	d505      	bpl.n	8001cd6 <HAL_ADC_Start_DMA+0x62>
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001cca:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001ccc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001cd0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001cd4:	62a3      	str	r3, [r4, #40]	; 0x28
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001cd6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
      __HAL_UNLOCK(hadc);
 8001cd8:	2000      	movs	r0, #0
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001cda:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001cde:	bf18      	it	ne
 8001ce0:	6ae3      	ldrne	r3, [r4, #44]	; 0x2c
      __HAL_UNLOCK(hadc);
 8001ce2:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001ce6:	bf18      	it	ne
 8001ce8:	f023 0306 	bicne.w	r3, r3, #6
        ADC_CLEAR_ERRORCODE(hadc);
 8001cec:	62e3      	str	r3, [r4, #44]	; 0x2c
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001cee:	4633      	mov	r3, r6
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001cf0:	f06f 0602 	mvn.w	r6, #2
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001cf4:	6a20      	ldr	r0, [r4, #32]
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001cf6:	463a      	mov	r2, r7
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001cf8:	4f20      	ldr	r7, [pc, #128]	; (8001d7c <HAL_ADC_Start_DMA+0x108>)
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001cfa:	314c      	adds	r1, #76	; 0x4c
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001cfc:	6287      	str	r7, [r0, #40]	; 0x28
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001cfe:	4f20      	ldr	r7, [pc, #128]	; (8001d80 <HAL_ADC_Start_DMA+0x10c>)
 8001d00:	62c7      	str	r7, [r0, #44]	; 0x2c
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001d02:	4f20      	ldr	r7, [pc, #128]	; (8001d84 <HAL_ADC_Start_DMA+0x110>)
 8001d04:	6307      	str	r7, [r0, #48]	; 0x30
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001d06:	f841 6c4c 	str.w	r6, [r1, #-76]
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001d0a:	f851 6c44 	ldr.w	r6, [r1, #-68]
 8001d0e:	f446 7680 	orr.w	r6, r6, #256	; 0x100
 8001d12:	f841 6c44 	str.w	r6, [r1, #-68]
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001d16:	f000 f9a9 	bl	800206c <HAL_DMA_Start_IT>
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8001d1a:	6823      	ldr	r3, [r4, #0]
}
 8001d1c:	4628      	mov	r0, r5
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8001d1e:	689a      	ldr	r2, [r3, #8]
 8001d20:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 8001d24:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001d28:	689a      	ldr	r2, [r3, #8]
 8001d2a:	bf0c      	ite	eq
 8001d2c:	f442 02a0 	orreq.w	r2, r2, #5242880	; 0x500000
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001d30:	f442 1280 	orrne.w	r2, r2, #1048576	; 0x100000
 8001d34:	609a      	str	r2, [r3, #8]
}
 8001d36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8001d38:	4b0e      	ldr	r3, [pc, #56]	; (8001d74 <HAL_ADC_Start_DMA+0x100>)
 8001d3a:	685b      	ldr	r3, [r3, #4]
 8001d3c:	f413 2f70 	tst.w	r3, #983040	; 0xf0000
 8001d40:	d0a3      	beq.n	8001c8a <HAL_ADC_Start_DMA+0x16>
    tmp_hal_status = HAL_ERROR;
 8001d42:	2501      	movs	r5, #1
}
 8001d44:	4628      	mov	r0, r5
 8001d46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_UNLOCK(hadc);
 8001d48:	2300      	movs	r3, #0
 8001d4a:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
}
 8001d4e:	4628      	mov	r0, r5
 8001d50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_LOCK(hadc);
 8001d52:	2502      	movs	r5, #2
}
 8001d54:	4628      	mov	r0, r5
 8001d56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001d58:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8001d5c:	685a      	ldr	r2, [r3, #4]
 8001d5e:	f412 2f70 	tst.w	r2, #983040	; 0xf0000
 8001d62:	d0ab      	beq.n	8001cbc <HAL_ADC_Start_DMA+0x48>
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001d64:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001d66:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001d6a:	62a2      	str	r2, [r4, #40]	; 0x28
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001d6c:	685b      	ldr	r3, [r3, #4]
 8001d6e:	055b      	lsls	r3, r3, #21
 8001d70:	d5b1      	bpl.n	8001cd6 <HAL_ADC_Start_DMA+0x62>
 8001d72:	e7aa      	b.n	8001cca <HAL_ADC_Start_DMA+0x56>
 8001d74:	40012400 	.word	0x40012400
 8001d78:	40012800 	.word	0x40012800
 8001d7c:	08001a39 	.word	0x08001a39
 8001d80:	08001a8d 	.word	0x08001a8d
 8001d84:	08001a9d 	.word	0x08001a9d

08001d88 <ADC_ConversionStop_Disable>:
{
 8001d88:	b538      	push	{r3, r4, r5, lr}
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001d8a:	6803      	ldr	r3, [r0, #0]
 8001d8c:	689a      	ldr	r2, [r3, #8]
 8001d8e:	07d4      	lsls	r4, r2, #31
 8001d90:	d401      	bmi.n	8001d96 <ADC_ConversionStop_Disable+0xe>
  return HAL_OK;
 8001d92:	2000      	movs	r0, #0
}
 8001d94:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_ADC_DISABLE(hadc);
 8001d96:	4604      	mov	r4, r0
 8001d98:	689a      	ldr	r2, [r3, #8]
 8001d9a:	f022 0201 	bic.w	r2, r2, #1
 8001d9e:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8001da0:	f7ff fe32 	bl	8001a08 <HAL_GetTick>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001da4:	6823      	ldr	r3, [r4, #0]
    tickstart = HAL_GetTick();
 8001da6:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001da8:	689b      	ldr	r3, [r3, #8]
 8001daa:	07d9      	lsls	r1, r3, #31
 8001dac:	d5f1      	bpl.n	8001d92 <ADC_ConversionStop_Disable+0xa>
 8001dae:	e002      	b.n	8001db6 <ADC_ConversionStop_Disable+0x2e>
 8001db0:	689b      	ldr	r3, [r3, #8]
 8001db2:	07db      	lsls	r3, r3, #31
 8001db4:	d5ed      	bpl.n	8001d92 <ADC_ConversionStop_Disable+0xa>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001db6:	f7ff fe27 	bl	8001a08 <HAL_GetTick>
 8001dba:	1b43      	subs	r3, r0, r5
 8001dbc:	2b02      	cmp	r3, #2
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001dbe:	6823      	ldr	r3, [r4, #0]
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001dc0:	d9f6      	bls.n	8001db0 <ADC_ConversionStop_Disable+0x28>
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001dc2:	689a      	ldr	r2, [r3, #8]
 8001dc4:	07d2      	lsls	r2, r2, #31
 8001dc6:	d5f3      	bpl.n	8001db0 <ADC_ConversionStop_Disable+0x28>
          return HAL_ERROR;
 8001dc8:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001dca:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001dcc:	f043 0310 	orr.w	r3, r3, #16
 8001dd0:	62a3      	str	r3, [r4, #40]	; 0x28
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001dd2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001dd4:	4303      	orrs	r3, r0
 8001dd6:	62e3      	str	r3, [r4, #44]	; 0x2c
}
 8001dd8:	bd38      	pop	{r3, r4, r5, pc}
 8001dda:	bf00      	nop

08001ddc <HAL_ADC_Init>:
  if(hadc == NULL)
 8001ddc:	2800      	cmp	r0, #0
 8001dde:	d06b      	beq.n	8001eb8 <HAL_ADC_Init+0xdc>
{
 8001de0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001de2:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8001de4:	4604      	mov	r4, r0
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d04d      	beq.n	8001e86 <HAL_ADC_Init+0xaa>
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001dea:	4620      	mov	r0, r4
 8001dec:	f7ff ffcc 	bl	8001d88 <ADC_ConversionStop_Disable>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001df0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001df2:	f013 0310 	ands.w	r3, r3, #16
 8001df6:	d140      	bne.n	8001e7a <HAL_ADC_Init+0x9e>
 8001df8:	2800      	cmp	r0, #0
 8001dfa:	d13e      	bne.n	8001e7a <HAL_ADC_Init+0x9e>
    ADC_STATE_CLR_SET(hadc->State,
 8001dfc:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001dfe:	6861      	ldr	r1, [r4, #4]
    ADC_STATE_CLR_SET(hadc->State,
 8001e00:	f422 5288 	bic.w	r2, r2, #4352	; 0x1100
 8001e04:	f022 0202 	bic.w	r2, r2, #2
 8001e08:	f042 0202 	orr.w	r2, r2, #2
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001e0c:	68a5      	ldr	r5, [r4, #8]
    ADC_STATE_CLR_SET(hadc->State,
 8001e0e:	62a2      	str	r2, [r4, #40]	; 0x28
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001e10:	69e2      	ldr	r2, [r4, #28]
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001e12:	7b26      	ldrb	r6, [r4, #12]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001e14:	4311      	orrs	r1, r2
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001e16:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001e1a:	ea41 0146 	orr.w	r1, r1, r6, lsl #1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001e1e:	d038      	beq.n	8001e92 <HAL_ADC_Init+0xb6>
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001e20:	7d22      	ldrb	r2, [r4, #20]
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001e22:	2d01      	cmp	r5, #1
 8001e24:	bf0c      	ite	eq
 8001e26:	f44f 7c80 	moveq.w	ip, #256	; 0x100
 8001e2a:	f04f 0c00 	movne.w	ip, #0
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001e2e:	2a01      	cmp	r2, #1
 8001e30:	d04e      	beq.n	8001ed0 <HAL_ADC_Init+0xf4>
      MODIFY_REG(hadc->Instance->CR1,
 8001e32:	6822      	ldr	r2, [r4, #0]
      MODIFY_REG(hadc->Instance->CR2,
 8001e34:	4e37      	ldr	r6, [pc, #220]	; (8001f14 <HAL_ADC_Init+0x138>)
      MODIFY_REG(hadc->Instance->CR1,
 8001e36:	6857      	ldr	r7, [r2, #4]
 8001e38:	f427 4769 	bic.w	r7, r7, #59648	; 0xe900
 8001e3c:	ea47 070c 	orr.w	r7, r7, ip
 8001e40:	6057      	str	r7, [r2, #4]
      MODIFY_REG(hadc->Instance->CR2,
 8001e42:	6897      	ldr	r7, [r2, #8]
 8001e44:	403e      	ands	r6, r7
 8001e46:	430e      	orrs	r6, r1
 8001e48:	6096      	str	r6, [r2, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001e4a:	2d01      	cmp	r5, #1
 8001e4c:	d030      	beq.n	8001eb0 <HAL_ADC_Init+0xd4>
    MODIFY_REG(hadc->Instance->SQR1,
 8001e4e:	6ad5      	ldr	r5, [r2, #44]	; 0x2c
 8001e50:	f425 0c70 	bic.w	ip, r5, #15728640	; 0xf00000
 8001e54:	ea4c 0303 	orr.w	r3, ip, r3
 8001e58:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001e5a:	6892      	ldr	r2, [r2, #8]
 8001e5c:	4b2e      	ldr	r3, [pc, #184]	; (8001f18 <HAL_ADC_Init+0x13c>)
 8001e5e:	4013      	ands	r3, r2
 8001e60:	4299      	cmp	r1, r3
 8001e62:	d02b      	beq.n	8001ebc <HAL_ADC_Init+0xe0>
      tmp_hal_status = HAL_ERROR;
 8001e64:	2001      	movs	r0, #1
      ADC_STATE_CLR_SET(hadc->State,
 8001e66:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001e68:	f023 0312 	bic.w	r3, r3, #18
 8001e6c:	f043 0310 	orr.w	r3, r3, #16
 8001e70:	62a3      	str	r3, [r4, #40]	; 0x28
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e72:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001e74:	4303      	orrs	r3, r0
 8001e76:	62e3      	str	r3, [r4, #44]	; 0x2c
}
 8001e78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e7a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    tmp_hal_status = HAL_ERROR;
 8001e7c:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e7e:	f043 0310 	orr.w	r3, r3, #16
 8001e82:	62a3      	str	r3, [r4, #40]	; 0x28
}
 8001e84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ADC_CLEAR_ERRORCODE(hadc);
 8001e86:	62c3      	str	r3, [r0, #44]	; 0x2c
    hadc->Lock = HAL_UNLOCKED;
 8001e88:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    HAL_ADC_MspInit(hadc);
 8001e8c:	f7ff fb40 	bl	8001510 <HAL_ADC_MspInit>
 8001e90:	e7ab      	b.n	8001dea <HAL_ADC_Init+0xe>
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001e92:	7d22      	ldrb	r2, [r4, #20]
 8001e94:	2a01      	cmp	r2, #1
 8001e96:	d01a      	beq.n	8001ece <HAL_ADC_Init+0xf2>
      MODIFY_REG(hadc->Instance->CR1,
 8001e98:	6822      	ldr	r2, [r4, #0]
 8001e9a:	6853      	ldr	r3, [r2, #4]
 8001e9c:	f423 4369 	bic.w	r3, r3, #59648	; 0xe900
 8001ea0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ea4:	6053      	str	r3, [r2, #4]
      MODIFY_REG(hadc->Instance->CR2,
 8001ea6:	6895      	ldr	r5, [r2, #8]
 8001ea8:	4b1a      	ldr	r3, [pc, #104]	; (8001f14 <HAL_ADC_Init+0x138>)
 8001eaa:	402b      	ands	r3, r5
 8001eac:	430b      	orrs	r3, r1
 8001eae:	6093      	str	r3, [r2, #8]
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001eb0:	6923      	ldr	r3, [r4, #16]
 8001eb2:	3b01      	subs	r3, #1
 8001eb4:	051b      	lsls	r3, r3, #20
 8001eb6:	e7ca      	b.n	8001e4e <HAL_ADC_Init+0x72>
    return HAL_ERROR;
 8001eb8:	2001      	movs	r0, #1
}
 8001eba:	4770      	bx	lr
      ADC_CLEAR_ERRORCODE(hadc);
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	62e3      	str	r3, [r4, #44]	; 0x2c
      ADC_STATE_CLR_SET(hadc->State,
 8001ec0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001ec2:	f023 0303 	bic.w	r3, r3, #3
 8001ec6:	f043 0301 	orr.w	r3, r3, #1
 8001eca:	62a3      	str	r3, [r4, #40]	; 0x28
}
 8001ecc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001ece:	46ac      	mov	ip, r5
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001ed0:	b1ce      	cbz	r6, 8001f06 <HAL_ADC_Init+0x12a>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ed2:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001ed4:	f042 0220 	orr.w	r2, r2, #32
 8001ed8:	62a2      	str	r2, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001eda:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001edc:	f042 0201 	orr.w	r2, r2, #1
 8001ee0:	62e2      	str	r2, [r4, #44]	; 0x2c
      MODIFY_REG(hadc->Instance->CR1,
 8001ee2:	6822      	ldr	r2, [r4, #0]
      MODIFY_REG(hadc->Instance->CR2,
 8001ee4:	4e0b      	ldr	r6, [pc, #44]	; (8001f14 <HAL_ADC_Init+0x138>)
      MODIFY_REG(hadc->Instance->CR1,
 8001ee6:	6857      	ldr	r7, [r2, #4]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001ee8:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
      MODIFY_REG(hadc->Instance->CR1,
 8001eec:	f427 4769 	bic.w	r7, r7, #59648	; 0xe900
 8001ef0:	ea47 070c 	orr.w	r7, r7, ip
 8001ef4:	6057      	str	r7, [r2, #4]
      MODIFY_REG(hadc->Instance->CR2,
 8001ef6:	6897      	ldr	r7, [r2, #8]
 8001ef8:	ea06 0607 	and.w	r6, r6, r7
 8001efc:	ea46 0601 	orr.w	r6, r6, r1
 8001f00:	6096      	str	r6, [r2, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001f02:	d1a2      	bne.n	8001e4a <HAL_ADC_Init+0x6e>
 8001f04:	e7d4      	b.n	8001eb0 <HAL_ADC_Init+0xd4>
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001f06:	69a2      	ldr	r2, [r4, #24]
 8001f08:	1e57      	subs	r7, r2, #1
 8001f0a:	ea4c 3747 	orr.w	r7, ip, r7, lsl #13
 8001f0e:	f447 6c00 	orr.w	ip, r7, #2048	; 0x800
 8001f12:	e7e6      	b.n	8001ee2 <HAL_ADC_Init+0x106>
 8001f14:	ffe1f7fd 	.word	0xffe1f7fd
 8001f18:	ff1f0efe 	.word	0xff1f0efe

08001f1c <HAL_NVIC_SetPriorityGrouping>:
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f1c:	f64f 0cff 	movw	ip, #63743	; 0xf8ff
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f20:	4906      	ldr	r1, [pc, #24]	; (8001f3c <HAL_NVIC_SetPriorityGrouping+0x20>)
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001f22:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f24:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001f26:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f2a:	ea02 020c 	and.w	r2, r2, ip
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f2e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f30:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8001f38:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8001f3a:	4770      	bx	lr
 8001f3c:	e000ed00 	.word	0xe000ed00

08001f40 <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f40:	4b1c      	ldr	r3, [pc, #112]	; (8001fb4 <HAL_NVIC_SetPriority+0x74>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f42:	b500      	push	{lr}
 8001f44:	68db      	ldr	r3, [r3, #12]
 8001f46:	f3c3 2302 	ubfx	r3, r3, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f4a:	f1c3 0e07 	rsb	lr, r3, #7
 8001f4e:	f1be 0f04 	cmp.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f52:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f56:	bf28      	it	cs
 8001f58:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f5c:	f1bc 0f06 	cmp.w	ip, #6
 8001f60:	d91b      	bls.n	8001f9a <HAL_NVIC_SetPriority+0x5a>
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f62:	f04f 3cff 	mov.w	ip, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f66:	3b03      	subs	r3, #3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f68:	fa0c fc03 	lsl.w	ip, ip, r3
 8001f6c:	ea22 020c 	bic.w	r2, r2, ip
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f70:	f04f 3cff 	mov.w	ip, #4294967295
 8001f74:	fa0c fc0e 	lsl.w	ip, ip, lr
 8001f78:	ea21 010c 	bic.w	r1, r1, ip
 8001f7c:	4099      	lsls	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8001f7e:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f80:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 8001f84:	db0c      	blt.n	8001fa0 <HAL_NVIC_SetPriority+0x60>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f86:	0109      	lsls	r1, r1, #4
 8001f88:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8001f8c:	b2c9      	uxtb	r1, r1
 8001f8e:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8001f92:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001f96:	f85d fb04 	ldr.w	pc, [sp], #4
 8001f9a:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f9c:	4613      	mov	r3, r2
 8001f9e:	e7e7      	b.n	8001f70 <HAL_NVIC_SetPriority+0x30>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fa0:	4b05      	ldr	r3, [pc, #20]	; (8001fb8 <HAL_NVIC_SetPriority+0x78>)
 8001fa2:	f000 000f 	and.w	r0, r0, #15
 8001fa6:	0109      	lsls	r1, r1, #4
 8001fa8:	b2c9      	uxtb	r1, r1
 8001faa:	4403      	add	r3, r0
 8001fac:	7619      	strb	r1, [r3, #24]
 8001fae:	f85d fb04 	ldr.w	pc, [sp], #4
 8001fb2:	bf00      	nop
 8001fb4:	e000ed00 	.word	0xe000ed00
 8001fb8:	e000ecfc 	.word	0xe000ecfc

08001fbc <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001fbc:	2800      	cmp	r0, #0
 8001fbe:	db07      	blt.n	8001fd0 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	f000 011f 	and.w	r1, r0, #31
 8001fc6:	4a03      	ldr	r2, [pc, #12]	; (8001fd4 <HAL_NVIC_EnableIRQ+0x18>)
 8001fc8:	0940      	lsrs	r0, r0, #5
 8001fca:	408b      	lsls	r3, r1
 8001fcc:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001fd0:	4770      	bx	lr
 8001fd2:	bf00      	nop
 8001fd4:	e000e100 	.word	0xe000e100

08001fd8 <HAL_SYSTICK_Config>:
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001fd8:	3801      	subs	r0, #1
 8001fda:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8001fde:	d20f      	bcs.n	8002000 <HAL_SYSTICK_Config+0x28>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001fe0:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fe4:	f04f 0cf0 	mov.w	ip, #240	; 0xf0
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001fe8:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001fea:	2107      	movs	r1, #7
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001fec:	b410      	push	{r4}
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fee:	4c05      	ldr	r4, [pc, #20]	; (8002004 <HAL_SYSTICK_Config+0x2c>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ff0:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ff2:	f884 c023 	strb.w	ip, [r4, #35]	; 0x23
  return (0UL);                                                     /* Function successful */
 8001ff6:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ff8:	619a      	str	r2, [r3, #24]
   return SysTick_Config(TicksNumb);
}
 8001ffa:	bc10      	pop	{r4}
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ffc:	6119      	str	r1, [r3, #16]
 8001ffe:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8002000:	2001      	movs	r0, #1
 8002002:	4770      	bx	lr
 8002004:	e000ed00 	.word	0xe000ed00

08002008 <HAL_DMA_Init>:
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
  uint32_t tmp = 0U;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002008:	b340      	cbz	r0, 800205c <HAL_DMA_Init+0x54>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800200a:	4603      	mov	r3, r0
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800200c:	c805      	ldmia	r0, {r0, r2}
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800200e:	f44f 7c80 	mov.w	ip, #256	; 0x100
{
 8002012:	b430      	push	{r4, r5}
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002014:	2400      	movs	r4, #0
  tmp |=  hdma->Init.Direction        |
 8002016:	6899      	ldr	r1, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002018:	68dd      	ldr	r5, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800201a:	430a      	orrs	r2, r1
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800201c:	4910      	ldr	r1, [pc, #64]	; (8002060 <HAL_DMA_Init+0x58>)
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800201e:	432a      	orrs	r2, r5
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002020:	4d10      	ldr	r5, [pc, #64]	; (8002064 <HAL_DMA_Init+0x5c>)
 8002022:	4401      	add	r1, r0
 8002024:	fba5 5101 	umull	r5, r1, r5, r1
 8002028:	0909      	lsrs	r1, r1, #4
 800202a:	0089      	lsls	r1, r1, #2
 800202c:	6419      	str	r1, [r3, #64]	; 0x40
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800202e:	6919      	ldr	r1, [r3, #16]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002030:	699d      	ldr	r5, [r3, #24]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002032:	430a      	orrs	r2, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002034:	6959      	ldr	r1, [r3, #20]
 8002036:	430a      	orrs	r2, r1
  tmp = hdma->Instance->CCR;
 8002038:	6801      	ldr	r1, [r0, #0]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800203a:	432a      	orrs	r2, r5
          hdma->Init.Mode                | hdma->Init.Priority;
 800203c:	69dd      	ldr	r5, [r3, #28]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800203e:	f421 517f 	bic.w	r1, r1, #16320	; 0x3fc0
 8002042:	f021 0130 	bic.w	r1, r1, #48	; 0x30
          hdma->Init.Mode                | hdma->Init.Priority;
 8002046:	432a      	orrs	r2, r5
  tmp |=  hdma->Init.Direction        |
 8002048:	430a      	orrs	r2, r1
  hdma->DmaBaseAddress = DMA1;
 800204a:	4907      	ldr	r1, [pc, #28]	; (8002068 <HAL_DMA_Init+0x60>)
 800204c:	63d9      	str	r1, [r3, #60]	; 0x3c
  hdma->Instance->CCR = tmp;
 800204e:	6002      	str	r2, [r0, #0]
  hdma->Lock = HAL_UNLOCKED;
 8002050:	f8a3 c020 	strh.w	ip, [r3, #32]

  return HAL_OK;
 8002054:	4620      	mov	r0, r4
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002056:	639c      	str	r4, [r3, #56]	; 0x38
}
 8002058:	bc30      	pop	{r4, r5}
 800205a:	4770      	bx	lr
    return HAL_ERROR;
 800205c:	2001      	movs	r0, #1
}
 800205e:	4770      	bx	lr
 8002060:	bffdfff8 	.word	0xbffdfff8
 8002064:	cccccccd 	.word	0xcccccccd
 8002068:	40020000 	.word	0x40020000

0800206c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800206c:	4684      	mov	ip, r0

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800206e:	f890 0020 	ldrb.w	r0, [r0, #32]
 8002072:	2801      	cmp	r0, #1
 8002074:	d03f      	beq.n	80020f6 <HAL_DMA_Start_IT+0x8a>
{
 8002076:	b430      	push	{r4, r5}
  __HAL_LOCK(hdma);
 8002078:	2401      	movs	r4, #1
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800207a:	f89c 0021 	ldrb.w	r0, [ip, #33]	; 0x21
  __HAL_LOCK(hdma);
 800207e:	f88c 4020 	strb.w	r4, [ip, #32]
  if(HAL_DMA_STATE_READY == hdma->State)
 8002082:	42a0      	cmp	r0, r4
 8002084:	d005      	beq.n	8002092 <HAL_DMA_Start_IT+0x26>
    __HAL_DMA_ENABLE(hdma);
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002086:	2300      	movs	r3, #0
 8002088:	f88c 3020 	strb.w	r3, [ip, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 800208c:	2002      	movs	r0, #2
  }    
  return status;
}
 800208e:	bc30      	pop	{r4, r5}
 8002090:	4770      	bx	lr
    hdma->State = HAL_DMA_STATE_BUSY;
 8002092:	2402      	movs	r4, #2
 8002094:	f88c 4021 	strb.w	r4, [ip, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002098:	2400      	movs	r4, #0
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800209a:	f8dc 5040 	ldr.w	r5, [ip, #64]	; 0x40
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800209e:	f8cc 4038 	str.w	r4, [ip, #56]	; 0x38
    __HAL_DMA_DISABLE(hdma);
 80020a2:	f8dc 4000 	ldr.w	r4, [ip]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80020a6:	40a8      	lsls	r0, r5
    __HAL_DMA_DISABLE(hdma);
 80020a8:	6825      	ldr	r5, [r4, #0]
 80020aa:	f025 0501 	bic.w	r5, r5, #1
 80020ae:	6025      	str	r5, [r4, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80020b0:	f8dc 503c 	ldr.w	r5, [ip, #60]	; 0x3c
 80020b4:	6068      	str	r0, [r5, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80020b6:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80020b8:	f8dc 3004 	ldr.w	r3, [ip, #4]
 80020bc:	2b10      	cmp	r3, #16
    if(NULL != hdma->XferHalfCpltCallback)
 80020be:	f8dc 302c 	ldr.w	r3, [ip, #44]	; 0x2c
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80020c2:	bf0b      	itete	eq
 80020c4:	60a2      	streq	r2, [r4, #8]
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 80020c6:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 80020c8:	60e1      	streq	r1, [r4, #12]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 80020ca:	60e2      	strne	r2, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback)
 80020cc:	b153      	cbz	r3, 80020e4 <HAL_DMA_Start_IT+0x78>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80020ce:	6823      	ldr	r3, [r4, #0]
 80020d0:	f043 030e 	orr.w	r3, r3, #14
 80020d4:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 80020d6:	6823      	ldr	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80020d8:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 80020da:	f043 0301 	orr.w	r3, r3, #1
 80020de:	6023      	str	r3, [r4, #0]
}
 80020e0:	bc30      	pop	{r4, r5}
 80020e2:	4770      	bx	lr
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80020e4:	6823      	ldr	r3, [r4, #0]
 80020e6:	f023 0304 	bic.w	r3, r3, #4
 80020ea:	6023      	str	r3, [r4, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80020ec:	6823      	ldr	r3, [r4, #0]
 80020ee:	f043 030a 	orr.w	r3, r3, #10
 80020f2:	6023      	str	r3, [r4, #0]
 80020f4:	e7ef      	b.n	80020d6 <HAL_DMA_Start_IT+0x6a>
  __HAL_LOCK(hdma);
 80020f6:	2002      	movs	r0, #2
}
 80020f8:	4770      	bx	lr
 80020fa:	bf00      	nop

080020fc <HAL_DMA_Abort>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80020fc:	f890 2021 	ldrb.w	r2, [r0, #33]	; 0x21
{
 8002100:	4603      	mov	r3, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002102:	2a02      	cmp	r2, #2
 8002104:	d006      	beq.n	8002114 <HAL_DMA_Abort+0x18>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002106:	2104      	movs	r1, #4
    __HAL_UNLOCK(hdma);
 8002108:	2200      	movs	r2, #0
    return HAL_ERROR;
 800210a:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800210c:	6399      	str	r1, [r3, #56]	; 0x38
    __HAL_UNLOCK(hdma);
 800210e:	f883 2020 	strb.w	r2, [r3, #32]
}
 8002112:	4770      	bx	lr
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002114:	2101      	movs	r1, #1
  __HAL_UNLOCK(hdma);      
 8002116:	f44f 7c80 	mov.w	ip, #256	; 0x100
{
 800211a:	b410      	push	{r4}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800211c:	681a      	ldr	r2, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800211e:	6c1c      	ldr	r4, [r3, #64]	; 0x40
  return status; 
 8002120:	2000      	movs	r0, #0
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002122:	40a1      	lsls	r1, r4
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002124:	6814      	ldr	r4, [r2, #0]
 8002126:	f024 040e 	bic.w	r4, r4, #14
 800212a:	6014      	str	r4, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 800212c:	6814      	ldr	r4, [r2, #0]
 800212e:	f024 0401 	bic.w	r4, r4, #1
 8002132:	6014      	str	r4, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002134:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002136:	6051      	str	r1, [r2, #4]
  __HAL_UNLOCK(hdma);      
 8002138:	f8a3 c020 	strh.w	ip, [r3, #32]
}
 800213c:	bc10      	pop	{r4}
 800213e:	4770      	bx	lr

08002140 <HAL_DMA_Abort_IT>:
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002140:	f890 2021 	ldrb.w	r2, [r0, #33]	; 0x21
{  
 8002144:	4603      	mov	r3, r0
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002146:	2a02      	cmp	r2, #2
 8002148:	d003      	beq.n	8002152 <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800214a:	2204      	movs	r2, #4
    status = HAL_ERROR;
 800214c:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800214e:	639a      	str	r2, [r3, #56]	; 0x38
}
 8002150:	4770      	bx	lr
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002152:	6802      	ldr	r2, [r0, #0]
{  
 8002154:	b510      	push	{r4, lr}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002156:	6811      	ldr	r1, [r2, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002158:	481b      	ldr	r0, [pc, #108]	; (80021c8 <HAL_DMA_Abort_IT+0x88>)
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800215a:	f021 010e 	bic.w	r1, r1, #14
 800215e:	6011      	str	r1, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8002160:	6811      	ldr	r1, [r2, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002162:	4282      	cmp	r2, r0
    __HAL_DMA_DISABLE(hdma);
 8002164:	f021 0101 	bic.w	r1, r1, #1
 8002168:	6011      	str	r1, [r2, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800216a:	d021      	beq.n	80021b0 <HAL_DMA_Abort_IT+0x70>
 800216c:	4917      	ldr	r1, [pc, #92]	; (80021cc <HAL_DMA_Abort_IT+0x8c>)
 800216e:	428a      	cmp	r2, r1
 8002170:	d01a      	beq.n	80021a8 <HAL_DMA_Abort_IT+0x68>
 8002172:	3114      	adds	r1, #20
 8002174:	428a      	cmp	r2, r1
 8002176:	d01d      	beq.n	80021b4 <HAL_DMA_Abort_IT+0x74>
 8002178:	3114      	adds	r1, #20
 800217a:	428a      	cmp	r2, r1
 800217c:	d01d      	beq.n	80021ba <HAL_DMA_Abort_IT+0x7a>
 800217e:	3114      	adds	r1, #20
 8002180:	428a      	cmp	r2, r1
 8002182:	d01d      	beq.n	80021c0 <HAL_DMA_Abort_IT+0x80>
 8002184:	3114      	adds	r1, #20
 8002186:	428a      	cmp	r2, r1
 8002188:	bf0c      	ite	eq
 800218a:	f44f 1280 	moveq.w	r2, #1048576	; 0x100000
 800218e:	f04f 7280 	movne.w	r2, #16777216	; 0x1000000
    __HAL_UNLOCK(hdma);
 8002192:	f44f 7080 	mov.w	r0, #256	; 0x100
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002196:	4c0e      	ldr	r4, [pc, #56]	; (80021d0 <HAL_DMA_Abort_IT+0x90>)
    if(hdma->XferAbortCallback != NULL)
 8002198:	6b59      	ldr	r1, [r3, #52]	; 0x34
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800219a:	6062      	str	r2, [r4, #4]
    __HAL_UNLOCK(hdma);
 800219c:	8418      	strh	r0, [r3, #32]
    if(hdma->XferAbortCallback != NULL)
 800219e:	b129      	cbz	r1, 80021ac <HAL_DMA_Abort_IT+0x6c>
      hdma->XferAbortCallback(hdma);
 80021a0:	4618      	mov	r0, r3
 80021a2:	4788      	blx	r1
  HAL_StatusTypeDef status = HAL_OK;
 80021a4:	2000      	movs	r0, #0
}
 80021a6:	bd10      	pop	{r4, pc}
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80021a8:	2210      	movs	r2, #16
 80021aa:	e7f2      	b.n	8002192 <HAL_DMA_Abort_IT+0x52>
  HAL_StatusTypeDef status = HAL_OK;
 80021ac:	4608      	mov	r0, r1
}
 80021ae:	bd10      	pop	{r4, pc}
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80021b0:	2201      	movs	r2, #1
 80021b2:	e7ee      	b.n	8002192 <HAL_DMA_Abort_IT+0x52>
 80021b4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80021b8:	e7eb      	b.n	8002192 <HAL_DMA_Abort_IT+0x52>
 80021ba:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80021be:	e7e8      	b.n	8002192 <HAL_DMA_Abort_IT+0x52>
 80021c0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80021c4:	e7e5      	b.n	8002192 <HAL_DMA_Abort_IT+0x52>
 80021c6:	bf00      	nop
 80021c8:	40020008 	.word	0x40020008
 80021cc:	4002001c 	.word	0x4002001c
 80021d0:	40020000 	.word	0x40020000

080021d4 <HAL_DMA_IRQHandler>:
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80021d4:	2204      	movs	r2, #4
{
 80021d6:	b470      	push	{r4, r5, r6}
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80021d8:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80021da:	6c01      	ldr	r1, [r0, #64]	; 0x40
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80021dc:	6834      	ldr	r4, [r6, #0]
  uint32_t source_it = hdma->Instance->CCR;
 80021de:	6803      	ldr	r3, [r0, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80021e0:	408a      	lsls	r2, r1
 80021e2:	4222      	tst	r2, r4
  uint32_t source_it = hdma->Instance->CCR;
 80021e4:	681d      	ldr	r5, [r3, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80021e6:	d01f      	beq.n	8002228 <HAL_DMA_IRQHandler+0x54>
 80021e8:	076a      	lsls	r2, r5, #29
 80021ea:	d51d      	bpl.n	8002228 <HAL_DMA_IRQHandler+0x54>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80021ec:	681a      	ldr	r2, [r3, #0]
 80021ee:	0691      	lsls	r1, r2, #26
 80021f0:	d403      	bmi.n	80021fa <HAL_DMA_IRQHandler+0x26>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80021f2:	681a      	ldr	r2, [r3, #0]
 80021f4:	f022 0204 	bic.w	r2, r2, #4
 80021f8:	601a      	str	r2, [r3, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80021fa:	4a3e      	ldr	r2, [pc, #248]	; (80022f4 <HAL_DMA_IRQHandler+0x120>)
 80021fc:	4293      	cmp	r3, r2
 80021fe:	d050      	beq.n	80022a2 <HAL_DMA_IRQHandler+0xce>
 8002200:	3214      	adds	r2, #20
 8002202:	4293      	cmp	r3, r2
 8002204:	d060      	beq.n	80022c8 <HAL_DMA_IRQHandler+0xf4>
 8002206:	3214      	adds	r2, #20
 8002208:	4293      	cmp	r3, r2
 800220a:	d067      	beq.n	80022dc <HAL_DMA_IRQHandler+0x108>
 800220c:	3214      	adds	r2, #20
 800220e:	4293      	cmp	r3, r2
 8002210:	d06a      	beq.n	80022e8 <HAL_DMA_IRQHandler+0x114>
 8002212:	3214      	adds	r2, #20
 8002214:	4293      	cmp	r3, r2
 8002216:	d05c      	beq.n	80022d2 <HAL_DMA_IRQHandler+0xfe>
 8002218:	3214      	adds	r2, #20
 800221a:	4293      	cmp	r3, r2
 800221c:	bf0c      	ite	eq
 800221e:	f44f 0380 	moveq.w	r3, #4194304	; 0x400000
 8002222:	f04f 6380 	movne.w	r3, #67108864	; 0x4000000
 8002226:	e03d      	b.n	80022a4 <HAL_DMA_IRQHandler+0xd0>
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002228:	2202      	movs	r2, #2
 800222a:	408a      	lsls	r2, r1
 800222c:	4222      	tst	r2, r4
 800222e:	d022      	beq.n	8002276 <HAL_DMA_IRQHandler+0xa2>
 8002230:	07aa      	lsls	r2, r5, #30
 8002232:	d520      	bpl.n	8002276 <HAL_DMA_IRQHandler+0xa2>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002234:	681a      	ldr	r2, [r3, #0]
 8002236:	0691      	lsls	r1, r2, #26
 8002238:	d406      	bmi.n	8002248 <HAL_DMA_IRQHandler+0x74>
      hdma->State = HAL_DMA_STATE_READY;
 800223a:	2101      	movs	r1, #1
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 800223c:	681a      	ldr	r2, [r3, #0]
 800223e:	f022 020a 	bic.w	r2, r2, #10
 8002242:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8002244:	f880 1021 	strb.w	r1, [r0, #33]	; 0x21
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002248:	4a2a      	ldr	r2, [pc, #168]	; (80022f4 <HAL_DMA_IRQHandler+0x120>)
 800224a:	4293      	cmp	r3, r2
 800224c:	d031      	beq.n	80022b2 <HAL_DMA_IRQHandler+0xde>
 800224e:	3214      	adds	r2, #20
 8002250:	4293      	cmp	r3, r2
 8002252:	d041      	beq.n	80022d8 <HAL_DMA_IRQHandler+0x104>
 8002254:	3214      	adds	r2, #20
 8002256:	4293      	cmp	r3, r2
 8002258:	d043      	beq.n	80022e2 <HAL_DMA_IRQHandler+0x10e>
 800225a:	3214      	adds	r2, #20
 800225c:	4293      	cmp	r3, r2
 800225e:	d035      	beq.n	80022cc <HAL_DMA_IRQHandler+0xf8>
 8002260:	3214      	adds	r2, #20
 8002262:	4293      	cmp	r3, r2
 8002264:	d043      	beq.n	80022ee <HAL_DMA_IRQHandler+0x11a>
 8002266:	3214      	adds	r2, #20
 8002268:	4293      	cmp	r3, r2
 800226a:	bf0c      	ite	eq
 800226c:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
 8002270:	f04f 7300 	movne.w	r3, #33554432	; 0x2000000
 8002274:	e01e      	b.n	80022b4 <HAL_DMA_IRQHandler+0xe0>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002276:	2208      	movs	r2, #8
 8002278:	408a      	lsls	r2, r1
 800227a:	4222      	tst	r2, r4
 800227c:	d017      	beq.n	80022ae <HAL_DMA_IRQHandler+0xda>
 800227e:	072a      	lsls	r2, r5, #28
 8002280:	d515      	bpl.n	80022ae <HAL_DMA_IRQHandler+0xda>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002282:	681a      	ldr	r2, [r3, #0]
    __HAL_UNLOCK(hdma);
 8002284:	f44f 7480 	mov.w	r4, #256	; 0x100
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002288:	f022 020e 	bic.w	r2, r2, #14
 800228c:	601a      	str	r2, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800228e:	2301      	movs	r3, #1
    if (hdma->XferErrorCallback != NULL)
 8002290:	6b02      	ldr	r2, [r0, #48]	; 0x30
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002292:	fa03 f101 	lsl.w	r1, r3, r1
 8002296:	6071      	str	r1, [r6, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002298:	6383      	str	r3, [r0, #56]	; 0x38
    __HAL_UNLOCK(hdma);
 800229a:	8404      	strh	r4, [r0, #32]
    if (hdma->XferErrorCallback != NULL)
 800229c:	b13a      	cbz	r2, 80022ae <HAL_DMA_IRQHandler+0xda>
}
 800229e:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 80022a0:	4710      	bx	r2
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80022a2:	2304      	movs	r3, #4
 80022a4:	4914      	ldr	r1, [pc, #80]	; (80022f8 <HAL_DMA_IRQHandler+0x124>)
    if(hdma->XferHalfCpltCallback != NULL)
 80022a6:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80022a8:	604b      	str	r3, [r1, #4]
    if(hdma->XferHalfCpltCallback != NULL)
 80022aa:	2a00      	cmp	r2, #0
 80022ac:	d1f7      	bne.n	800229e <HAL_DMA_IRQHandler+0xca>
}
 80022ae:	bc70      	pop	{r4, r5, r6}
 80022b0:	4770      	bx	lr
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80022b2:	2302      	movs	r3, #2
    __HAL_UNLOCK(hdma);
 80022b4:	2100      	movs	r1, #0
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80022b6:	4c10      	ldr	r4, [pc, #64]	; (80022f8 <HAL_DMA_IRQHandler+0x124>)
    if(hdma->XferCpltCallback != NULL)
 80022b8:	6a82      	ldr	r2, [r0, #40]	; 0x28
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80022ba:	6063      	str	r3, [r4, #4]
    __HAL_UNLOCK(hdma);
 80022bc:	f880 1020 	strb.w	r1, [r0, #32]
    if(hdma->XferCpltCallback != NULL)
 80022c0:	2a00      	cmp	r2, #0
 80022c2:	d0f4      	beq.n	80022ae <HAL_DMA_IRQHandler+0xda>
}
 80022c4:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 80022c6:	4710      	bx	r2
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80022c8:	2340      	movs	r3, #64	; 0x40
 80022ca:	e7eb      	b.n	80022a4 <HAL_DMA_IRQHandler+0xd0>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80022cc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80022d0:	e7f0      	b.n	80022b4 <HAL_DMA_IRQHandler+0xe0>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80022d2:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80022d6:	e7e5      	b.n	80022a4 <HAL_DMA_IRQHandler+0xd0>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80022d8:	2320      	movs	r3, #32
 80022da:	e7eb      	b.n	80022b4 <HAL_DMA_IRQHandler+0xe0>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80022dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80022e0:	e7e0      	b.n	80022a4 <HAL_DMA_IRQHandler+0xd0>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80022e2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80022e6:	e7e5      	b.n	80022b4 <HAL_DMA_IRQHandler+0xe0>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80022e8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80022ec:	e7da      	b.n	80022a4 <HAL_DMA_IRQHandler+0xd0>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80022ee:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80022f2:	e7df      	b.n	80022b4 <HAL_DMA_IRQHandler+0xe0>
 80022f4:	40020008 	.word	0x40020008
 80022f8:	40020000 	.word	0x40020000

080022fc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002300:	680e      	ldr	r6, [r1, #0]
{
 8002302:	b083      	sub	sp, #12
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002304:	2e00      	cmp	r6, #0
 8002306:	f000 80b5 	beq.w	8002474 <HAL_GPIO_Init+0x178>
 800230a:	2200      	movs	r2, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800230c:	4f7a      	ldr	r7, [pc, #488]	; (80024f8 <HAL_GPIO_Init+0x1fc>)
  uint32_t config = 0x00u;
 800230e:	4692      	mov	sl, r2
  uint32_t position = 0x00u;
 8002310:	4613      	mov	r3, r2
        {
          SET_BIT(EXTI->FTSR, iocurrent);
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002312:	4d7a      	ldr	r5, [pc, #488]	; (80024fc <HAL_GPIO_Init+0x200>)
      switch (GPIO_Init->Mode)
 8002314:	f8df 81e8 	ldr.w	r8, [pc, #488]	; 8002500 <HAL_GPIO_Init+0x204>
 8002318:	e006      	b.n	8002328 <HAL_GPIO_Init+0x2c>
        }
      }
    }

	position++;
 800231a:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800231c:	fa36 f403 	lsrs.w	r4, r6, r3
 8002320:	f102 0204 	add.w	r2, r2, #4
 8002324:	f000 80a6 	beq.w	8002474 <HAL_GPIO_Init+0x178>
    ioposition = (0x01uL << position);
 8002328:	2401      	movs	r4, #1
 800232a:	409c      	lsls	r4, r3
    if (iocurrent == ioposition)
 800232c:	ea34 0e06 	bics.w	lr, r4, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002330:	ea04 0c06 	and.w	ip, r4, r6
    if (iocurrent == ioposition)
 8002334:	d1f1      	bne.n	800231a <HAL_GPIO_Init+0x1e>
      switch (GPIO_Init->Mode)
 8002336:	684e      	ldr	r6, [r1, #4]
 8002338:	2e12      	cmp	r6, #18
 800233a:	f200 809e 	bhi.w	800247a <HAL_GPIO_Init+0x17e>
 800233e:	2e12      	cmp	r6, #18
 8002340:	d81a      	bhi.n	8002378 <HAL_GPIO_Init+0x7c>
 8002342:	e8df f006 	tbb	[pc, r6]
 8002346:	b9a7      	.short	0xb9a7
 8002348:	1919ceb5 	.word	0x1919ceb5
 800234c:	19191919 	.word	0x19191919
 8002350:	19191919 	.word	0x19191919
 8002354:	b1191919 	.word	0xb1191919
 8002358:	bc          	.byte	0xbc
 8002359:	00          	.byte	0x00
 800235a:	f8df e1a8 	ldr.w	lr, [pc, #424]	; 8002504 <HAL_GPIO_Init+0x208>
 800235e:	4576      	cmp	r6, lr
 8002360:	f000 8098 	beq.w	8002494 <HAL_GPIO_Init+0x198>
 8002364:	f50e 2e70 	add.w	lr, lr, #983040	; 0xf0000
 8002368:	4576      	cmp	r6, lr
 800236a:	f000 8093 	beq.w	8002494 <HAL_GPIO_Init+0x198>
 800236e:	f5ae 1e80 	sub.w	lr, lr, #1048576	; 0x100000
 8002372:	4576      	cmp	r6, lr
 8002374:	f000 808e 	beq.w	8002494 <HAL_GPIO_Init+0x198>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002378:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 800237c:	bf9c      	itt	ls
 800237e:	4686      	movls	lr, r0
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002380:	4693      	movls	fp, r2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002382:	f04f 060f 	mov.w	r6, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002386:	bf84      	itt	hi
 8002388:	f100 0e04 	addhi.w	lr, r0, #4
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800238c:	f1a2 0b20 	subhi.w	fp, r2, #32
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002390:	f8de 4000 	ldr.w	r4, [lr]
 8002394:	fa0a f90b 	lsl.w	r9, sl, fp
 8002398:	fa06 fb0b 	lsl.w	fp, r6, fp
 800239c:	ea24 040b 	bic.w	r4, r4, fp
 80023a0:	ea44 0409 	orr.w	r4, r4, r9
 80023a4:	f8ce 4000 	str.w	r4, [lr]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80023a8:	684c      	ldr	r4, [r1, #4]
 80023aa:	f014 5f80 	tst.w	r4, #268435456	; 0x10000000
 80023ae:	d079      	beq.n	80024a4 <HAL_GPIO_Init+0x1a8>
        __HAL_RCC_AFIO_CLK_ENABLE();
 80023b0:	f8d7 e018 	ldr.w	lr, [r7, #24]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80023b4:	f003 0903 	and.w	r9, r3, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 80023b8:	f04e 0e01 	orr.w	lr, lr, #1
 80023bc:	f8c7 e018 	str.w	lr, [r7, #24]
 80023c0:	f8d7 e018 	ldr.w	lr, [r7, #24]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80023c4:	ea4f 0989 	mov.w	r9, r9, lsl #2
        __HAL_RCC_AFIO_CLK_ENABLE();
 80023c8:	f00e 0e01 	and.w	lr, lr, #1
 80023cc:	f8cd e004 	str.w	lr, [sp, #4]
 80023d0:	f8dd e004 	ldr.w	lr, [sp, #4]
        temp = AFIO->EXTICR[position >> 2u];
 80023d4:	f023 0e03 	bic.w	lr, r3, #3
 80023d8:	f10e 4e80 	add.w	lr, lr, #1073741824	; 0x40000000
 80023dc:	f50e 3e80 	add.w	lr, lr, #65536	; 0x10000
 80023e0:	f8de b008 	ldr.w	fp, [lr, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80023e4:	fa06 f609 	lsl.w	r6, r6, r9
 80023e8:	ea2b 0606 	bic.w	r6, fp, r6
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80023ec:	f8df b118 	ldr.w	fp, [pc, #280]	; 8002508 <HAL_GPIO_Init+0x20c>
 80023f0:	4558      	cmp	r0, fp
 80023f2:	d013      	beq.n	800241c <HAL_GPIO_Init+0x120>
 80023f4:	f50b 6b80 	add.w	fp, fp, #1024	; 0x400
 80023f8:	4558      	cmp	r0, fp
 80023fa:	d06b      	beq.n	80024d4 <HAL_GPIO_Init+0x1d8>
 80023fc:	f8df b10c 	ldr.w	fp, [pc, #268]	; 800250c <HAL_GPIO_Init+0x210>
 8002400:	4558      	cmp	r0, fp
 8002402:	d060      	beq.n	80024c6 <HAL_GPIO_Init+0x1ca>
 8002404:	f8df b108 	ldr.w	fp, [pc, #264]	; 8002510 <HAL_GPIO_Init+0x214>
 8002408:	4558      	cmp	r0, fp
 800240a:	bf0c      	ite	eq
 800240c:	f04f 0b03 	moveq.w	fp, #3
 8002410:	f04f 0b04 	movne.w	fp, #4
 8002414:	fa0b f909 	lsl.w	r9, fp, r9
 8002418:	ea46 0609 	orr.w	r6, r6, r9
        AFIO->EXTICR[position >> 2u] = temp;
 800241c:	f8ce 6008 	str.w	r6, [lr, #8]
          SET_BIT(EXTI->IMR, iocurrent);
 8002420:	682e      	ldr	r6, [r5, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002422:	f414 3f80 	tst.w	r4, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 8002426:	bf14      	ite	ne
 8002428:	ea46 060c 	orrne.w	r6, r6, ip
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800242c:	ea26 060c 	biceq.w	r6, r6, ip
 8002430:	602e      	str	r6, [r5, #0]
          SET_BIT(EXTI->EMR, iocurrent);
 8002432:	686e      	ldr	r6, [r5, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002434:	f414 3f00 	tst.w	r4, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 8002438:	bf14      	ite	ne
 800243a:	ea46 060c 	orrne.w	r6, r6, ip
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800243e:	ea26 060c 	biceq.w	r6, r6, ip
 8002442:	606e      	str	r6, [r5, #4]
          SET_BIT(EXTI->RTSR, iocurrent);
 8002444:	68ae      	ldr	r6, [r5, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002446:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 800244a:	bf14      	ite	ne
 800244c:	ea46 060c 	orrne.w	r6, r6, ip
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002450:	ea26 060c 	biceq.w	r6, r6, ip
 8002454:	60ae      	str	r6, [r5, #8]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002456:	f414 1f00 	tst.w	r4, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 800245a:	68ec      	ldr	r4, [r5, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800245c:	d01f      	beq.n	800249e <HAL_GPIO_Init+0x1a2>
          SET_BIT(EXTI->FTSR, iocurrent);
 800245e:	ea44 040c 	orr.w	r4, r4, ip
 8002462:	60ec      	str	r4, [r5, #12]
 8002464:	680e      	ldr	r6, [r1, #0]
	position++;
 8002466:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002468:	fa36 f403 	lsrs.w	r4, r6, r3
 800246c:	f102 0204 	add.w	r2, r2, #4
 8002470:	f47f af5a 	bne.w	8002328 <HAL_GPIO_Init+0x2c>
  }
}
 8002474:	b003      	add	sp, #12
 8002476:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      switch (GPIO_Init->Mode)
 800247a:	4546      	cmp	r6, r8
 800247c:	d00a      	beq.n	8002494 <HAL_GPIO_Init+0x198>
 800247e:	f67f af6c 	bls.w	800235a <HAL_GPIO_Init+0x5e>
 8002482:	f8df e090 	ldr.w	lr, [pc, #144]	; 8002514 <HAL_GPIO_Init+0x218>
 8002486:	4576      	cmp	r6, lr
 8002488:	d004      	beq.n	8002494 <HAL_GPIO_Init+0x198>
 800248a:	f50e 3e80 	add.w	lr, lr, #65536	; 0x10000
 800248e:	4576      	cmp	r6, lr
 8002490:	f47f af72 	bne.w	8002378 <HAL_GPIO_Init+0x7c>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002494:	688e      	ldr	r6, [r1, #8]
 8002496:	bb3e      	cbnz	r6, 80024e8 <HAL_GPIO_Init+0x1ec>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002498:	f04f 0a04 	mov.w	sl, #4
 800249c:	e76c      	b.n	8002378 <HAL_GPIO_Init+0x7c>
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800249e:	ea24 040c 	bic.w	r4, r4, ip
 80024a2:	60ec      	str	r4, [r5, #12]
 80024a4:	680e      	ldr	r6, [r1, #0]
 80024a6:	e738      	b.n	800231a <HAL_GPIO_Init+0x1e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80024a8:	68cc      	ldr	r4, [r1, #12]
 80024aa:	f104 0a04 	add.w	sl, r4, #4
          break;
 80024ae:	e763      	b.n	8002378 <HAL_GPIO_Init+0x7c>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80024b0:	68cc      	ldr	r4, [r1, #12]
 80024b2:	f104 0a08 	add.w	sl, r4, #8
          break;
 80024b6:	e75f      	b.n	8002378 <HAL_GPIO_Init+0x7c>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80024b8:	f8d1 a00c 	ldr.w	sl, [r1, #12]
          break;
 80024bc:	e75c      	b.n	8002378 <HAL_GPIO_Init+0x7c>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80024be:	68cc      	ldr	r4, [r1, #12]
 80024c0:	f104 0a0c 	add.w	sl, r4, #12
          break;
 80024c4:	e758      	b.n	8002378 <HAL_GPIO_Init+0x7c>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80024c6:	f04f 0b02 	mov.w	fp, #2
 80024ca:	fa0b f909 	lsl.w	r9, fp, r9
 80024ce:	ea46 0609 	orr.w	r6, r6, r9
 80024d2:	e7a3      	b.n	800241c <HAL_GPIO_Init+0x120>
 80024d4:	f04f 0b01 	mov.w	fp, #1
 80024d8:	fa0b f909 	lsl.w	r9, fp, r9
 80024dc:	ea46 0609 	orr.w	r6, r6, r9
 80024e0:	e79c      	b.n	800241c <HAL_GPIO_Init+0x120>
      switch (GPIO_Init->Mode)
 80024e2:	f04f 0a00 	mov.w	sl, #0
 80024e6:	e747      	b.n	8002378 <HAL_GPIO_Init+0x7c>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80024e8:	2e01      	cmp	r6, #1
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80024ea:	f04f 0a08 	mov.w	sl, #8
            GPIOx->BSRR = ioposition;
 80024ee:	bf0c      	ite	eq
 80024f0:	6104      	streq	r4, [r0, #16]
            GPIOx->BRR = ioposition;
 80024f2:	6144      	strne	r4, [r0, #20]
 80024f4:	e740      	b.n	8002378 <HAL_GPIO_Init+0x7c>
 80024f6:	bf00      	nop
 80024f8:	40021000 	.word	0x40021000
 80024fc:	40010400 	.word	0x40010400
 8002500:	10220000 	.word	0x10220000
 8002504:	10120000 	.word	0x10120000
 8002508:	40010800 	.word	0x40010800
 800250c:	40011000 	.word	0x40011000
 8002510:	40011400 	.word	0x40011400
 8002514:	10310000 	.word	0x10310000

08002518 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002518:	b902      	cbnz	r2, 800251c <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800251a:	0409      	lsls	r1, r1, #16
 800251c:	6101      	str	r1, [r0, #16]
  }
}
 800251e:	4770      	bx	lr

08002520 <HAL_PWR_EnableBkUpAccess>:
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8002520:	2201      	movs	r2, #1
 8002522:	4b01      	ldr	r3, [pc, #4]	; (8002528 <HAL_PWR_EnableBkUpAccess+0x8>)
 8002524:	621a      	str	r2, [r3, #32]
}
 8002526:	4770      	bx	lr
 8002528:	420e0000 	.word	0x420e0000

0800252c <HAL_RCC_OscConfig>:
{
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800252c:	2800      	cmp	r0, #0
 800252e:	f000 81b6 	beq.w	800289e <HAL_RCC_OscConfig+0x372>
{
 8002532:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002536:	6803      	ldr	r3, [r0, #0]
 8002538:	4604      	mov	r4, r0
 800253a:	07dd      	lsls	r5, r3, #31
{
 800253c:	b082      	sub	sp, #8
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800253e:	d535      	bpl.n	80025ac <HAL_RCC_OscConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002540:	499a      	ldr	r1, [pc, #616]	; (80027ac <HAL_RCC_OscConfig+0x280>)
 8002542:	684a      	ldr	r2, [r1, #4]
 8002544:	f002 020c 	and.w	r2, r2, #12
 8002548:	2a04      	cmp	r2, #4
 800254a:	f000 80ef 	beq.w	800272c <HAL_RCC_OscConfig+0x200>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800254e:	684a      	ldr	r2, [r1, #4]
 8002550:	f002 020c 	and.w	r2, r2, #12
 8002554:	2a08      	cmp	r2, #8
 8002556:	f000 80e5 	beq.w	8002724 <HAL_RCC_OscConfig+0x1f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800255a:	6863      	ldr	r3, [r4, #4]
 800255c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002560:	d010      	beq.n	8002584 <HAL_RCC_OscConfig+0x58>
 8002562:	2b00      	cmp	r3, #0
 8002564:	f000 810c 	beq.w	8002780 <HAL_RCC_OscConfig+0x254>
 8002568:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800256c:	f000 8182 	beq.w	8002874 <HAL_RCC_OscConfig+0x348>
 8002570:	4b8e      	ldr	r3, [pc, #568]	; (80027ac <HAL_RCC_OscConfig+0x280>)
 8002572:	681a      	ldr	r2, [r3, #0]
 8002574:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002578:	601a      	str	r2, [r3, #0]
 800257a:	681a      	ldr	r2, [r3, #0]
 800257c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002580:	601a      	str	r2, [r3, #0]
 8002582:	e004      	b.n	800258e <HAL_RCC_OscConfig+0x62>
 8002584:	4a89      	ldr	r2, [pc, #548]	; (80027ac <HAL_RCC_OscConfig+0x280>)
 8002586:	6813      	ldr	r3, [r2, #0]
 8002588:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800258c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800258e:	f7ff fa3b 	bl	8001a08 <HAL_GetTick>

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002592:	4e86      	ldr	r6, [pc, #536]	; (80027ac <HAL_RCC_OscConfig+0x280>)
        tickstart = HAL_GetTick();
 8002594:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002596:	e005      	b.n	80025a4 <HAL_RCC_OscConfig+0x78>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002598:	f7ff fa36 	bl	8001a08 <HAL_GetTick>
 800259c:	1b40      	subs	r0, r0, r5
 800259e:	2864      	cmp	r0, #100	; 0x64
 80025a0:	f200 80ea 	bhi.w	8002778 <HAL_RCC_OscConfig+0x24c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025a4:	6833      	ldr	r3, [r6, #0]
 80025a6:	039a      	lsls	r2, r3, #14
 80025a8:	d5f6      	bpl.n	8002598 <HAL_RCC_OscConfig+0x6c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025aa:	6823      	ldr	r3, [r4, #0]
 80025ac:	079f      	lsls	r7, r3, #30
 80025ae:	d528      	bpl.n	8002602 <HAL_RCC_OscConfig+0xd6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80025b0:	4a7e      	ldr	r2, [pc, #504]	; (80027ac <HAL_RCC_OscConfig+0x280>)
 80025b2:	6851      	ldr	r1, [r2, #4]
 80025b4:	f011 0f0c 	tst.w	r1, #12
 80025b8:	f000 808d 	beq.w	80026d6 <HAL_RCC_OscConfig+0x1aa>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80025bc:	6851      	ldr	r1, [r2, #4]
 80025be:	f001 010c 	and.w	r1, r1, #12
 80025c2:	2908      	cmp	r1, #8
 80025c4:	f000 8083 	beq.w	80026ce <HAL_RCC_OscConfig+0x1a2>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80025c8:	6923      	ldr	r3, [r4, #16]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	f000 8118 	beq.w	8002800 <HAL_RCC_OscConfig+0x2d4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80025d0:	2201      	movs	r2, #1
 80025d2:	4b77      	ldr	r3, [pc, #476]	; (80027b0 <HAL_RCC_OscConfig+0x284>)

        /* Get Start Tick */
        tickstart = HAL_GetTick();

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025d4:	4e75      	ldr	r6, [pc, #468]	; (80027ac <HAL_RCC_OscConfig+0x280>)
        __HAL_RCC_HSI_ENABLE();
 80025d6:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80025d8:	f7ff fa16 	bl	8001a08 <HAL_GetTick>
 80025dc:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025de:	e005      	b.n	80025ec <HAL_RCC_OscConfig+0xc0>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025e0:	f7ff fa12 	bl	8001a08 <HAL_GetTick>
 80025e4:	1b40      	subs	r0, r0, r5
 80025e6:	2802      	cmp	r0, #2
 80025e8:	f200 80c6 	bhi.w	8002778 <HAL_RCC_OscConfig+0x24c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025ec:	6833      	ldr	r3, [r6, #0]
 80025ee:	0798      	lsls	r0, r3, #30
 80025f0:	d5f6      	bpl.n	80025e0 <HAL_RCC_OscConfig+0xb4>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025f2:	6833      	ldr	r3, [r6, #0]
 80025f4:	6962      	ldr	r2, [r4, #20]
 80025f6:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80025fa:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80025fe:	6033      	str	r3, [r6, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002600:	6823      	ldr	r3, [r4, #0]
 8002602:	071a      	lsls	r2, r3, #28
 8002604:	d41f      	bmi.n	8002646 <HAL_RCC_OscConfig+0x11a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002606:	075d      	lsls	r5, r3, #29
 8002608:	d542      	bpl.n	8002690 <HAL_RCC_OscConfig+0x164>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800260a:	4b68      	ldr	r3, [pc, #416]	; (80027ac <HAL_RCC_OscConfig+0x280>)
 800260c:	69da      	ldr	r2, [r3, #28]
 800260e:	00d0      	lsls	r0, r2, #3
 8002610:	d57d      	bpl.n	800270e <HAL_RCC_OscConfig+0x1e2>
    FlagStatus       pwrclkchanged = RESET;
 8002612:	2500      	movs	r5, #0
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002614:	4e67      	ldr	r6, [pc, #412]	; (80027b4 <HAL_RCC_OscConfig+0x288>)
 8002616:	6833      	ldr	r3, [r6, #0]
 8002618:	05d9      	lsls	r1, r3, #23
 800261a:	f140 809d 	bpl.w	8002758 <HAL_RCC_OscConfig+0x22c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800261e:	68e3      	ldr	r3, [r4, #12]
 8002620:	2b01      	cmp	r3, #1
 8002622:	f000 80fe 	beq.w	8002822 <HAL_RCC_OscConfig+0x2f6>
 8002626:	2b00      	cmp	r3, #0
 8002628:	f000 80ca 	beq.w	80027c0 <HAL_RCC_OscConfig+0x294>
 800262c:	2b05      	cmp	r3, #5
 800262e:	4b5f      	ldr	r3, [pc, #380]	; (80027ac <HAL_RCC_OscConfig+0x280>)
 8002630:	6a1a      	ldr	r2, [r3, #32]
 8002632:	f000 812c 	beq.w	800288e <HAL_RCC_OscConfig+0x362>
 8002636:	f022 0201 	bic.w	r2, r2, #1
 800263a:	621a      	str	r2, [r3, #32]
 800263c:	6a1a      	ldr	r2, [r3, #32]
 800263e:	f022 0204 	bic.w	r2, r2, #4
 8002642:	621a      	str	r2, [r3, #32]
 8002644:	e0f2      	b.n	800282c <HAL_RCC_OscConfig+0x300>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002646:	69a3      	ldr	r3, [r4, #24]
 8002648:	2b00      	cmp	r3, #0
 800264a:	d04f      	beq.n	80026ec <HAL_RCC_OscConfig+0x1c0>
      __HAL_RCC_LSI_ENABLE();
 800264c:	2201      	movs	r2, #1
 800264e:	4b58      	ldr	r3, [pc, #352]	; (80027b0 <HAL_RCC_OscConfig+0x284>)
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002650:	4e56      	ldr	r6, [pc, #344]	; (80027ac <HAL_RCC_OscConfig+0x280>)
      __HAL_RCC_LSI_ENABLE();
 8002652:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
      tickstart = HAL_GetTick();
 8002656:	f7ff f9d7 	bl	8001a08 <HAL_GetTick>
 800265a:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800265c:	e005      	b.n	800266a <HAL_RCC_OscConfig+0x13e>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800265e:	f7ff f9d3 	bl	8001a08 <HAL_GetTick>
 8002662:	1b40      	subs	r0, r0, r5
 8002664:	2802      	cmp	r0, #2
 8002666:	f200 8087 	bhi.w	8002778 <HAL_RCC_OscConfig+0x24c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800266a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800266c:	079b      	lsls	r3, r3, #30
 800266e:	d5f6      	bpl.n	800265e <HAL_RCC_OscConfig+0x132>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002670:	4b51      	ldr	r3, [pc, #324]	; (80027b8 <HAL_RCC_OscConfig+0x28c>)
 8002672:	4a52      	ldr	r2, [pc, #328]	; (80027bc <HAL_RCC_OscConfig+0x290>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	fba2 2303 	umull	r2, r3, r2, r3
 800267a:	0a5b      	lsrs	r3, r3, #9
 800267c:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 800267e:	bf00      	nop
  }
  while (Delay --);
 8002680:	9b01      	ldr	r3, [sp, #4]
 8002682:	1e5a      	subs	r2, r3, #1
 8002684:	9201      	str	r2, [sp, #4]
 8002686:	2b00      	cmp	r3, #0
 8002688:	d1f9      	bne.n	800267e <HAL_RCC_OscConfig+0x152>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800268a:	6823      	ldr	r3, [r4, #0]
 800268c:	075d      	lsls	r5, r3, #29
 800268e:	d4bc      	bmi.n	800260a <HAL_RCC_OscConfig+0xde>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002690:	69e0      	ldr	r0, [r4, #28]
 8002692:	b1c0      	cbz	r0, 80026c6 <HAL_RCC_OscConfig+0x19a>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002694:	4d45      	ldr	r5, [pc, #276]	; (80027ac <HAL_RCC_OscConfig+0x280>)
 8002696:	686b      	ldr	r3, [r5, #4]
 8002698:	f003 030c 	and.w	r3, r3, #12
 800269c:	2b08      	cmp	r3, #8
 800269e:	f000 80d8 	beq.w	8002852 <HAL_RCC_OscConfig+0x326>
        __HAL_RCC_PLL_DISABLE();
 80026a2:	2200      	movs	r2, #0
 80026a4:	4b42      	ldr	r3, [pc, #264]	; (80027b0 <HAL_RCC_OscConfig+0x284>)
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80026a6:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 80026a8:	661a      	str	r2, [r3, #96]	; 0x60
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80026aa:	f000 80fa 	beq.w	80028a2 <HAL_RCC_OscConfig+0x376>
        tickstart = HAL_GetTick();
 80026ae:	f7ff f9ab 	bl	8001a08 <HAL_GetTick>
 80026b2:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026b4:	e004      	b.n	80026c0 <HAL_RCC_OscConfig+0x194>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026b6:	f7ff f9a7 	bl	8001a08 <HAL_GetTick>
 80026ba:	1b00      	subs	r0, r0, r4
 80026bc:	2802      	cmp	r0, #2
 80026be:	d85b      	bhi.n	8002778 <HAL_RCC_OscConfig+0x24c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026c0:	682b      	ldr	r3, [r5, #0]
 80026c2:	019b      	lsls	r3, r3, #6
 80026c4:	d4f7      	bmi.n	80026b6 <HAL_RCC_OscConfig+0x18a>
  return HAL_OK;
 80026c6:	2000      	movs	r0, #0
}
 80026c8:	b002      	add	sp, #8
 80026ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80026ce:	6852      	ldr	r2, [r2, #4]
 80026d0:	03d6      	lsls	r6, r2, #15
 80026d2:	f53f af79 	bmi.w	80025c8 <HAL_RCC_OscConfig+0x9c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026d6:	4a35      	ldr	r2, [pc, #212]	; (80027ac <HAL_RCC_OscConfig+0x280>)
 80026d8:	6812      	ldr	r2, [r2, #0]
 80026da:	0795      	lsls	r5, r2, #30
 80026dc:	d530      	bpl.n	8002740 <HAL_RCC_OscConfig+0x214>
 80026de:	6922      	ldr	r2, [r4, #16]
 80026e0:	2a01      	cmp	r2, #1
 80026e2:	d02d      	beq.n	8002740 <HAL_RCC_OscConfig+0x214>
        return HAL_ERROR;
 80026e4:	2001      	movs	r0, #1
}
 80026e6:	b002      	add	sp, #8
 80026e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_LSI_DISABLE();
 80026ec:	4a30      	ldr	r2, [pc, #192]	; (80027b0 <HAL_RCC_OscConfig+0x284>)
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026ee:	4e2f      	ldr	r6, [pc, #188]	; (80027ac <HAL_RCC_OscConfig+0x280>)
      __HAL_RCC_LSI_DISABLE();
 80026f0:	f8c2 3480 	str.w	r3, [r2, #1152]	; 0x480
      tickstart = HAL_GetTick();
 80026f4:	f7ff f988 	bl	8001a08 <HAL_GetTick>
 80026f8:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026fa:	e004      	b.n	8002706 <HAL_RCC_OscConfig+0x1da>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026fc:	f7ff f984 	bl	8001a08 <HAL_GetTick>
 8002700:	1b40      	subs	r0, r0, r5
 8002702:	2802      	cmp	r0, #2
 8002704:	d838      	bhi.n	8002778 <HAL_RCC_OscConfig+0x24c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002706:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8002708:	079f      	lsls	r7, r3, #30
 800270a:	d4f7      	bmi.n	80026fc <HAL_RCC_OscConfig+0x1d0>
 800270c:	e7bd      	b.n	800268a <HAL_RCC_OscConfig+0x15e>
      __HAL_RCC_PWR_CLK_ENABLE();
 800270e:	69da      	ldr	r2, [r3, #28]
      pwrclkchanged = SET;
 8002710:	2501      	movs	r5, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8002712:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002716:	61da      	str	r2, [r3, #28]
 8002718:	69db      	ldr	r3, [r3, #28]
 800271a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800271e:	9300      	str	r3, [sp, #0]
 8002720:	9b00      	ldr	r3, [sp, #0]
      pwrclkchanged = SET;
 8002722:	e777      	b.n	8002614 <HAL_RCC_OscConfig+0xe8>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002724:	684a      	ldr	r2, [r1, #4]
 8002726:	03d0      	lsls	r0, r2, #15
 8002728:	f57f af17 	bpl.w	800255a <HAL_RCC_OscConfig+0x2e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800272c:	4a1f      	ldr	r2, [pc, #124]	; (80027ac <HAL_RCC_OscConfig+0x280>)
 800272e:	6812      	ldr	r2, [r2, #0]
 8002730:	0391      	lsls	r1, r2, #14
 8002732:	f57f af3b 	bpl.w	80025ac <HAL_RCC_OscConfig+0x80>
 8002736:	6862      	ldr	r2, [r4, #4]
 8002738:	2a00      	cmp	r2, #0
 800273a:	f47f af37 	bne.w	80025ac <HAL_RCC_OscConfig+0x80>
 800273e:	e7d1      	b.n	80026e4 <HAL_RCC_OscConfig+0x1b8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002740:	491a      	ldr	r1, [pc, #104]	; (80027ac <HAL_RCC_OscConfig+0x280>)
 8002742:	6960      	ldr	r0, [r4, #20]
 8002744:	680a      	ldr	r2, [r1, #0]
 8002746:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 800274a:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
 800274e:	600a      	str	r2, [r1, #0]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002750:	071a      	lsls	r2, r3, #28
 8002752:	f57f af58 	bpl.w	8002606 <HAL_RCC_OscConfig+0xda>
 8002756:	e776      	b.n	8002646 <HAL_RCC_OscConfig+0x11a>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002758:	6833      	ldr	r3, [r6, #0]
 800275a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800275e:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8002760:	f7ff f952 	bl	8001a08 <HAL_GetTick>
 8002764:	4607      	mov	r7, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002766:	6833      	ldr	r3, [r6, #0]
 8002768:	05da      	lsls	r2, r3, #23
 800276a:	f53f af58 	bmi.w	800261e <HAL_RCC_OscConfig+0xf2>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800276e:	f7ff f94b 	bl	8001a08 <HAL_GetTick>
 8002772:	1bc0      	subs	r0, r0, r7
 8002774:	2864      	cmp	r0, #100	; 0x64
 8002776:	d9f6      	bls.n	8002766 <HAL_RCC_OscConfig+0x23a>
            return HAL_TIMEOUT;
 8002778:	2003      	movs	r0, #3
}
 800277a:	b002      	add	sp, #8
 800277c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002780:	4d0a      	ldr	r5, [pc, #40]	; (80027ac <HAL_RCC_OscConfig+0x280>)
 8002782:	682b      	ldr	r3, [r5, #0]
 8002784:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002788:	602b      	str	r3, [r5, #0]
 800278a:	682b      	ldr	r3, [r5, #0]
 800278c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002790:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8002792:	f7ff f939 	bl	8001a08 <HAL_GetTick>
 8002796:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002798:	e004      	b.n	80027a4 <HAL_RCC_OscConfig+0x278>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800279a:	f7ff f935 	bl	8001a08 <HAL_GetTick>
 800279e:	1b80      	subs	r0, r0, r6
 80027a0:	2864      	cmp	r0, #100	; 0x64
 80027a2:	d8e9      	bhi.n	8002778 <HAL_RCC_OscConfig+0x24c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027a4:	682b      	ldr	r3, [r5, #0]
 80027a6:	039b      	lsls	r3, r3, #14
 80027a8:	d4f7      	bmi.n	800279a <HAL_RCC_OscConfig+0x26e>
 80027aa:	e6fe      	b.n	80025aa <HAL_RCC_OscConfig+0x7e>
 80027ac:	40021000 	.word	0x40021000
 80027b0:	42420000 	.word	0x42420000
 80027b4:	40007000 	.word	0x40007000
 80027b8:	20000010 	.word	0x20000010
 80027bc:	10624dd3 	.word	0x10624dd3
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027c0:	4e50      	ldr	r6, [pc, #320]	; (8002904 <HAL_RCC_OscConfig+0x3d8>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027c2:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027c6:	6a33      	ldr	r3, [r6, #32]
 80027c8:	f023 0301 	bic.w	r3, r3, #1
 80027cc:	6233      	str	r3, [r6, #32]
 80027ce:	6a33      	ldr	r3, [r6, #32]
 80027d0:	f023 0304 	bic.w	r3, r3, #4
 80027d4:	6233      	str	r3, [r6, #32]
      tickstart = HAL_GetTick();
 80027d6:	f7ff f917 	bl	8001a08 <HAL_GetTick>
 80027da:	4607      	mov	r7, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027dc:	e004      	b.n	80027e8 <HAL_RCC_OscConfig+0x2bc>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027de:	f7ff f913 	bl	8001a08 <HAL_GetTick>
 80027e2:	1bc0      	subs	r0, r0, r7
 80027e4:	4540      	cmp	r0, r8
 80027e6:	d8c7      	bhi.n	8002778 <HAL_RCC_OscConfig+0x24c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027e8:	6a33      	ldr	r3, [r6, #32]
 80027ea:	0798      	lsls	r0, r3, #30
 80027ec:	d4f7      	bmi.n	80027de <HAL_RCC_OscConfig+0x2b2>
    if (pwrclkchanged == SET)
 80027ee:	2d00      	cmp	r5, #0
 80027f0:	f43f af4e 	beq.w	8002690 <HAL_RCC_OscConfig+0x164>
      __HAL_RCC_PWR_CLK_DISABLE();
 80027f4:	4a43      	ldr	r2, [pc, #268]	; (8002904 <HAL_RCC_OscConfig+0x3d8>)
 80027f6:	69d3      	ldr	r3, [r2, #28]
 80027f8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80027fc:	61d3      	str	r3, [r2, #28]
 80027fe:	e747      	b.n	8002690 <HAL_RCC_OscConfig+0x164>
        __HAL_RCC_HSI_DISABLE();
 8002800:	4a41      	ldr	r2, [pc, #260]	; (8002908 <HAL_RCC_OscConfig+0x3dc>)
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002802:	4e40      	ldr	r6, [pc, #256]	; (8002904 <HAL_RCC_OscConfig+0x3d8>)
        __HAL_RCC_HSI_DISABLE();
 8002804:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8002806:	f7ff f8ff 	bl	8001a08 <HAL_GetTick>
 800280a:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800280c:	e004      	b.n	8002818 <HAL_RCC_OscConfig+0x2ec>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800280e:	f7ff f8fb 	bl	8001a08 <HAL_GetTick>
 8002812:	1b40      	subs	r0, r0, r5
 8002814:	2802      	cmp	r0, #2
 8002816:	d8af      	bhi.n	8002778 <HAL_RCC_OscConfig+0x24c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002818:	6833      	ldr	r3, [r6, #0]
 800281a:	0799      	lsls	r1, r3, #30
 800281c:	d4f7      	bmi.n	800280e <HAL_RCC_OscConfig+0x2e2>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800281e:	6823      	ldr	r3, [r4, #0]
 8002820:	e6ef      	b.n	8002602 <HAL_RCC_OscConfig+0xd6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002822:	4a38      	ldr	r2, [pc, #224]	; (8002904 <HAL_RCC_OscConfig+0x3d8>)
 8002824:	6a13      	ldr	r3, [r2, #32]
 8002826:	f043 0301 	orr.w	r3, r3, #1
 800282a:	6213      	str	r3, [r2, #32]
      tickstart = HAL_GetTick();
 800282c:	f7ff f8ec 	bl	8001a08 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002830:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8002834:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002836:	4f33      	ldr	r7, [pc, #204]	; (8002904 <HAL_RCC_OscConfig+0x3d8>)
 8002838:	e004      	b.n	8002844 <HAL_RCC_OscConfig+0x318>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800283a:	f7ff f8e5 	bl	8001a08 <HAL_GetTick>
 800283e:	1b80      	subs	r0, r0, r6
 8002840:	4540      	cmp	r0, r8
 8002842:	d899      	bhi.n	8002778 <HAL_RCC_OscConfig+0x24c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002844:	6a3b      	ldr	r3, [r7, #32]
 8002846:	079b      	lsls	r3, r3, #30
 8002848:	d5f7      	bpl.n	800283a <HAL_RCC_OscConfig+0x30e>
    if (pwrclkchanged == SET)
 800284a:	2d00      	cmp	r5, #0
 800284c:	f43f af20 	beq.w	8002690 <HAL_RCC_OscConfig+0x164>
 8002850:	e7d0      	b.n	80027f4 <HAL_RCC_OscConfig+0x2c8>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002852:	2801      	cmp	r0, #1
 8002854:	f43f af38 	beq.w	80026c8 <HAL_RCC_OscConfig+0x19c>
        pll_config = RCC->CFGR;
 8002858:	686b      	ldr	r3, [r5, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800285a:	6a22      	ldr	r2, [r4, #32]
 800285c:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 8002860:	4291      	cmp	r1, r2
 8002862:	f47f af3f 	bne.w	80026e4 <HAL_RCC_OscConfig+0x1b8>
 8002866:	6a60      	ldr	r0, [r4, #36]	; 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002868:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
  return HAL_OK;
 800286c:	1a18      	subs	r0, r3, r0
 800286e:	bf18      	it	ne
 8002870:	2001      	movne	r0, #1
 8002872:	e729      	b.n	80026c8 <HAL_RCC_OscConfig+0x19c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002874:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002878:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 800287c:	681a      	ldr	r2, [r3, #0]
 800287e:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8002882:	601a      	str	r2, [r3, #0]
 8002884:	681a      	ldr	r2, [r3, #0]
 8002886:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800288a:	601a      	str	r2, [r3, #0]
 800288c:	e67f      	b.n	800258e <HAL_RCC_OscConfig+0x62>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800288e:	f042 0204 	orr.w	r2, r2, #4
 8002892:	621a      	str	r2, [r3, #32]
 8002894:	6a1a      	ldr	r2, [r3, #32]
 8002896:	f042 0201 	orr.w	r2, r2, #1
 800289a:	621a      	str	r2, [r3, #32]
 800289c:	e7c6      	b.n	800282c <HAL_RCC_OscConfig+0x300>
    return HAL_ERROR;
 800289e:	2001      	movs	r0, #1
}
 80028a0:	4770      	bx	lr
        tickstart = HAL_GetTick();
 80028a2:	f7ff f8b1 	bl	8001a08 <HAL_GetTick>
 80028a6:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028a8:	e005      	b.n	80028b6 <HAL_RCC_OscConfig+0x38a>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028aa:	f7ff f8ad 	bl	8001a08 <HAL_GetTick>
 80028ae:	1b80      	subs	r0, r0, r6
 80028b0:	2802      	cmp	r0, #2
 80028b2:	f63f af61 	bhi.w	8002778 <HAL_RCC_OscConfig+0x24c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028b6:	682b      	ldr	r3, [r5, #0]
 80028b8:	0199      	lsls	r1, r3, #6
 80028ba:	d4f6      	bmi.n	80028aa <HAL_RCC_OscConfig+0x37e>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80028bc:	6a23      	ldr	r3, [r4, #32]
 80028be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028c2:	d105      	bne.n	80028d0 <HAL_RCC_OscConfig+0x3a4>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80028c4:	686a      	ldr	r2, [r5, #4]
 80028c6:	68a1      	ldr	r1, [r4, #8]
 80028c8:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80028cc:	430a      	orrs	r2, r1
 80028ce:	606a      	str	r2, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 80028d0:	2001      	movs	r0, #1
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80028d2:	4d0c      	ldr	r5, [pc, #48]	; (8002904 <HAL_RCC_OscConfig+0x3d8>)
 80028d4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80028d6:	686a      	ldr	r2, [r5, #4]
 80028d8:	430b      	orrs	r3, r1
 80028da:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
        __HAL_RCC_PLL_ENABLE();
 80028de:	490a      	ldr	r1, [pc, #40]	; (8002908 <HAL_RCC_OscConfig+0x3dc>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80028e0:	4313      	orrs	r3, r2
 80028e2:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 80028e4:	6608      	str	r0, [r1, #96]	; 0x60
        tickstart = HAL_GetTick();
 80028e6:	f7ff f88f 	bl	8001a08 <HAL_GetTick>
 80028ea:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80028ec:	e005      	b.n	80028fa <HAL_RCC_OscConfig+0x3ce>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028ee:	f7ff f88b 	bl	8001a08 <HAL_GetTick>
 80028f2:	1b00      	subs	r0, r0, r4
 80028f4:	2802      	cmp	r0, #2
 80028f6:	f63f af3f 	bhi.w	8002778 <HAL_RCC_OscConfig+0x24c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80028fa:	682b      	ldr	r3, [r5, #0]
 80028fc:	019a      	lsls	r2, r3, #6
 80028fe:	d5f6      	bpl.n	80028ee <HAL_RCC_OscConfig+0x3c2>
 8002900:	e6e1      	b.n	80026c6 <HAL_RCC_OscConfig+0x19a>
 8002902:	bf00      	nop
 8002904:	40021000 	.word	0x40021000
 8002908:	42420000 	.word	0x42420000

0800290c <HAL_RCC_GetSysClockFreq>:
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800290c:	f240 2c01 	movw	ip, #513	; 0x201
{
 8002910:	b500      	push	{lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002912:	4b18      	ldr	r3, [pc, #96]	; (8002974 <HAL_RCC_GetSysClockFreq+0x68>)
{
 8002914:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002916:	f10d 0e18 	add.w	lr, sp, #24
 800291a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800291c:	e90e 000f 	stmdb	lr, {r0, r1, r2, r3}
  tmpreg = RCC->CFGR;
 8002920:	4a15      	ldr	r2, [pc, #84]	; (8002978 <HAL_RCC_GetSysClockFreq+0x6c>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002922:	f8ad c004 	strh.w	ip, [sp, #4]
  tmpreg = RCC->CFGR;
 8002926:	6853      	ldr	r3, [r2, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8002928:	f003 010c 	and.w	r1, r3, #12
 800292c:	2908      	cmp	r1, #8
 800292e:	d003      	beq.n	8002938 <HAL_RCC_GetSysClockFreq+0x2c>
      sysclockfreq = HSE_VALUE;
 8002930:	4812      	ldr	r0, [pc, #72]	; (800297c <HAL_RCC_GetSysClockFreq+0x70>)
}
 8002932:	b007      	add	sp, #28
 8002934:	f85d fb04 	ldr.w	pc, [sp], #4
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002938:	f3c3 4183 	ubfx	r1, r3, #18, #4
 800293c:	3118      	adds	r1, #24
 800293e:	4469      	add	r1, sp
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002940:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002942:	f811 0c10 	ldrb.w	r0, [r1, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002946:	d50e      	bpl.n	8002966 <HAL_RCC_GetSysClockFreq+0x5a>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002948:	6853      	ldr	r3, [r2, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800294a:	4a0c      	ldr	r2, [pc, #48]	; (800297c <HAL_RCC_GetSysClockFreq+0x70>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800294c:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002950:	fb02 f000 	mul.w	r0, r2, r0
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002954:	3318      	adds	r3, #24
 8002956:	446b      	add	r3, sp
 8002958:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800295c:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8002960:	b007      	add	sp, #28
 8002962:	f85d fb04 	ldr.w	pc, [sp], #4
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002966:	4b06      	ldr	r3, [pc, #24]	; (8002980 <HAL_RCC_GetSysClockFreq+0x74>)
 8002968:	fb03 f000 	mul.w	r0, r3, r0
}
 800296c:	b007      	add	sp, #28
 800296e:	f85d fb04 	ldr.w	pc, [sp], #4
 8002972:	bf00      	nop
 8002974:	0800717c 	.word	0x0800717c
 8002978:	40021000 	.word	0x40021000
 800297c:	007a1200 	.word	0x007a1200
 8002980:	003d0900 	.word	0x003d0900

08002984 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8002984:	2800      	cmp	r0, #0
 8002986:	f000 808c 	beq.w	8002aa2 <HAL_RCC_ClockConfig+0x11e>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800298a:	4a49      	ldr	r2, [pc, #292]	; (8002ab0 <HAL_RCC_ClockConfig+0x12c>)
{
 800298c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002990:	6813      	ldr	r3, [r2, #0]
 8002992:	4604      	mov	r4, r0
 8002994:	f003 0307 	and.w	r3, r3, #7
 8002998:	428b      	cmp	r3, r1
 800299a:	460d      	mov	r5, r1
 800299c:	d20c      	bcs.n	80029b8 <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800299e:	6813      	ldr	r3, [r2, #0]
 80029a0:	f023 0307 	bic.w	r3, r3, #7
 80029a4:	430b      	orrs	r3, r1
 80029a6:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80029a8:	6813      	ldr	r3, [r2, #0]
 80029aa:	f003 0307 	and.w	r3, r3, #7
 80029ae:	428b      	cmp	r3, r1
 80029b0:	d002      	beq.n	80029b8 <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 80029b2:	2001      	movs	r0, #1
}
 80029b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029b8:	6823      	ldr	r3, [r4, #0]
 80029ba:	0798      	lsls	r0, r3, #30
 80029bc:	d514      	bpl.n	80029e8 <HAL_RCC_ClockConfig+0x64>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029be:	0759      	lsls	r1, r3, #29
 80029c0:	d504      	bpl.n	80029cc <HAL_RCC_ClockConfig+0x48>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80029c2:	493c      	ldr	r1, [pc, #240]	; (8002ab4 <HAL_RCC_ClockConfig+0x130>)
 80029c4:	684a      	ldr	r2, [r1, #4]
 80029c6:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 80029ca:	604a      	str	r2, [r1, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029cc:	071a      	lsls	r2, r3, #28
 80029ce:	d504      	bpl.n	80029da <HAL_RCC_ClockConfig+0x56>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80029d0:	4938      	ldr	r1, [pc, #224]	; (8002ab4 <HAL_RCC_ClockConfig+0x130>)
 80029d2:	684a      	ldr	r2, [r1, #4]
 80029d4:	f442 5260 	orr.w	r2, r2, #14336	; 0x3800
 80029d8:	604a      	str	r2, [r1, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029da:	4936      	ldr	r1, [pc, #216]	; (8002ab4 <HAL_RCC_ClockConfig+0x130>)
 80029dc:	68a0      	ldr	r0, [r4, #8]
 80029de:	684a      	ldr	r2, [r1, #4]
 80029e0:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80029e4:	4302      	orrs	r2, r0
 80029e6:	604a      	str	r2, [r1, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80029e8:	07df      	lsls	r7, r3, #31
 80029ea:	d520      	bpl.n	8002a2e <HAL_RCC_ClockConfig+0xaa>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029ec:	6862      	ldr	r2, [r4, #4]
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029ee:	4b31      	ldr	r3, [pc, #196]	; (8002ab4 <HAL_RCC_ClockConfig+0x130>)
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029f0:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029f2:	681b      	ldr	r3, [r3, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029f4:	d057      	beq.n	8002aa6 <HAL_RCC_ClockConfig+0x122>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80029f6:	2a02      	cmp	r2, #2
 80029f8:	d050      	beq.n	8002a9c <HAL_RCC_ClockConfig+0x118>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029fa:	0799      	lsls	r1, r3, #30
 80029fc:	d5d9      	bpl.n	80029b2 <HAL_RCC_ClockConfig+0x2e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80029fe:	4e2d      	ldr	r6, [pc, #180]	; (8002ab4 <HAL_RCC_ClockConfig+0x130>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a00:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a04:	6873      	ldr	r3, [r6, #4]
 8002a06:	f023 0303 	bic.w	r3, r3, #3
 8002a0a:	4313      	orrs	r3, r2
 8002a0c:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8002a0e:	f7fe fffb 	bl	8001a08 <HAL_GetTick>
 8002a12:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a14:	e004      	b.n	8002a20 <HAL_RCC_ClockConfig+0x9c>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a16:	f7fe fff7 	bl	8001a08 <HAL_GetTick>
 8002a1a:	1bc0      	subs	r0, r0, r7
 8002a1c:	4540      	cmp	r0, r8
 8002a1e:	d845      	bhi.n	8002aac <HAL_RCC_ClockConfig+0x128>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a20:	6873      	ldr	r3, [r6, #4]
 8002a22:	6862      	ldr	r2, [r4, #4]
 8002a24:	f003 030c 	and.w	r3, r3, #12
 8002a28:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8002a2c:	d1f3      	bne.n	8002a16 <HAL_RCC_ClockConfig+0x92>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002a2e:	4a20      	ldr	r2, [pc, #128]	; (8002ab0 <HAL_RCC_ClockConfig+0x12c>)
 8002a30:	6813      	ldr	r3, [r2, #0]
 8002a32:	f003 0307 	and.w	r3, r3, #7
 8002a36:	42ab      	cmp	r3, r5
 8002a38:	d909      	bls.n	8002a4e <HAL_RCC_ClockConfig+0xca>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a3a:	6813      	ldr	r3, [r2, #0]
 8002a3c:	f023 0307 	bic.w	r3, r3, #7
 8002a40:	432b      	orrs	r3, r5
 8002a42:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a44:	6813      	ldr	r3, [r2, #0]
 8002a46:	f003 0307 	and.w	r3, r3, #7
 8002a4a:	42ab      	cmp	r3, r5
 8002a4c:	d1b1      	bne.n	80029b2 <HAL_RCC_ClockConfig+0x2e>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a4e:	6823      	ldr	r3, [r4, #0]
 8002a50:	075a      	lsls	r2, r3, #29
 8002a52:	d506      	bpl.n	8002a62 <HAL_RCC_ClockConfig+0xde>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a54:	4917      	ldr	r1, [pc, #92]	; (8002ab4 <HAL_RCC_ClockConfig+0x130>)
 8002a56:	68e0      	ldr	r0, [r4, #12]
 8002a58:	684a      	ldr	r2, [r1, #4]
 8002a5a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002a5e:	4302      	orrs	r2, r0
 8002a60:	604a      	str	r2, [r1, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a62:	071b      	lsls	r3, r3, #28
 8002a64:	d507      	bpl.n	8002a76 <HAL_RCC_ClockConfig+0xf2>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002a66:	4a13      	ldr	r2, [pc, #76]	; (8002ab4 <HAL_RCC_ClockConfig+0x130>)
 8002a68:	6921      	ldr	r1, [r4, #16]
 8002a6a:	6853      	ldr	r3, [r2, #4]
 8002a6c:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8002a70:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002a74:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002a76:	f7ff ff49 	bl	800290c <HAL_RCC_GetSysClockFreq>
 8002a7a:	4603      	mov	r3, r0
 8002a7c:	4a0d      	ldr	r2, [pc, #52]	; (8002ab4 <HAL_RCC_ClockConfig+0x130>)
 8002a7e:	490e      	ldr	r1, [pc, #56]	; (8002ab8 <HAL_RCC_ClockConfig+0x134>)
 8002a80:	6852      	ldr	r2, [r2, #4]
  HAL_InitTick(uwTickPrio);
 8002a82:	480e      	ldr	r0, [pc, #56]	; (8002abc <HAL_RCC_ClockConfig+0x138>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002a84:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8002a88:	5c89      	ldrb	r1, [r1, r2]
 8002a8a:	4a0d      	ldr	r2, [pc, #52]	; (8002ac0 <HAL_RCC_ClockConfig+0x13c>)
 8002a8c:	40cb      	lsrs	r3, r1
  HAL_InitTick(uwTickPrio);
 8002a8e:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002a90:	6013      	str	r3, [r2, #0]
  HAL_InitTick(uwTickPrio);
 8002a92:	f7fe ff77 	bl	8001984 <HAL_InitTick>
  return HAL_OK;
 8002a96:	2000      	movs	r0, #0
}
 8002a98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a9c:	0198      	lsls	r0, r3, #6
 8002a9e:	d4ae      	bmi.n	80029fe <HAL_RCC_ClockConfig+0x7a>
 8002aa0:	e787      	b.n	80029b2 <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 8002aa2:	2001      	movs	r0, #1
}
 8002aa4:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002aa6:	039e      	lsls	r6, r3, #14
 8002aa8:	d4a9      	bmi.n	80029fe <HAL_RCC_ClockConfig+0x7a>
 8002aaa:	e782      	b.n	80029b2 <HAL_RCC_ClockConfig+0x2e>
        return HAL_TIMEOUT;
 8002aac:	2003      	movs	r0, #3
 8002aae:	e781      	b.n	80029b4 <HAL_RCC_ClockConfig+0x30>
 8002ab0:	40022000 	.word	0x40022000
 8002ab4:	40021000 	.word	0x40021000
 8002ab8:	08007164 	.word	0x08007164
 8002abc:	20000018 	.word	0x20000018
 8002ac0:	20000010 	.word	0x20000010

08002ac4 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002ac4:	4b04      	ldr	r3, [pc, #16]	; (8002ad8 <HAL_RCC_GetPCLK1Freq+0x14>)
  return SystemCoreClock;
 8002ac6:	4a05      	ldr	r2, [pc, #20]	; (8002adc <HAL_RCC_GetPCLK1Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002ac8:	685b      	ldr	r3, [r3, #4]
 8002aca:	4905      	ldr	r1, [pc, #20]	; (8002ae0 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8002acc:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8002ad0:	5ccb      	ldrb	r3, [r1, r3]
 8002ad2:	6810      	ldr	r0, [r2, #0]
}
 8002ad4:	40d8      	lsrs	r0, r3
 8002ad6:	4770      	bx	lr
 8002ad8:	40021000 	.word	0x40021000
 8002adc:	20000010 	.word	0x20000010
 8002ae0:	08007174 	.word	0x08007174

08002ae4 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002ae4:	4b04      	ldr	r3, [pc, #16]	; (8002af8 <HAL_RCC_GetPCLK2Freq+0x14>)
  return SystemCoreClock;
 8002ae6:	4a05      	ldr	r2, [pc, #20]	; (8002afc <HAL_RCC_GetPCLK2Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002ae8:	685b      	ldr	r3, [r3, #4]
 8002aea:	4905      	ldr	r1, [pc, #20]	; (8002b00 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8002aec:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8002af0:	5ccb      	ldrb	r3, [r1, r3]
 8002af2:	6810      	ldr	r0, [r2, #0]
}
 8002af4:	40d8      	lsrs	r0, r3
 8002af6:	4770      	bx	lr
 8002af8:	40021000 	.word	0x40021000
 8002afc:	20000010 	.word	0x20000010
 8002b00:	08007174 	.word	0x08007174

08002b04 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002b04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002b08:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002b0a:	6800      	ldr	r0, [r0, #0]
{
 8002b0c:	b082      	sub	sp, #8
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002b0e:	07c1      	lsls	r1, r0, #31
 8002b10:	d52c      	bpl.n	8002b6c <HAL_RCCEx_PeriphCLKConfig+0x68>
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b12:	4b3a      	ldr	r3, [pc, #232]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 8002b14:	69da      	ldr	r2, [r3, #28]
 8002b16:	00d2      	lsls	r2, r2, #3
 8002b18:	d53f      	bpl.n	8002b9a <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b1a:	4d39      	ldr	r5, [pc, #228]	; (8002c00 <HAL_RCCEx_PeriphCLKConfig+0xfc>)
    FlagStatus pwrclkchanged = RESET;
 8002b1c:	2600      	movs	r6, #0
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b1e:	682b      	ldr	r3, [r5, #0]
 8002b20:	05df      	lsls	r7, r3, #23
 8002b22:	d548      	bpl.n	8002bb6 <HAL_RCCEx_PeriphCLKConfig+0xb2>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002b24:	4d35      	ldr	r5, [pc, #212]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 8002b26:	6a2b      	ldr	r3, [r5, #32]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002b28:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8002b2c:	d011      	beq.n	8002b52 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8002b2e:	6861      	ldr	r1, [r4, #4]
 8002b30:	f401 7240 	and.w	r2, r1, #768	; 0x300
 8002b34:	429a      	cmp	r2, r3
 8002b36:	d00d      	beq.n	8002b54 <HAL_RCCEx_PeriphCLKConfig+0x50>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002b38:	2701      	movs	r7, #1
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002b3a:	2000      	movs	r0, #0
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002b3c:	6a2b      	ldr	r3, [r5, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 8002b3e:	4a31      	ldr	r2, [pc, #196]	; (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x100>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002b40:	f423 7140 	bic.w	r1, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 8002b44:	f8c2 7440 	str.w	r7, [r2, #1088]	; 0x440
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002b48:	f8c2 0440 	str.w	r0, [r2, #1088]	; 0x440
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002b4c:	6229      	str	r1, [r5, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002b4e:	07d9      	lsls	r1, r3, #31
 8002b50:	d444      	bmi.n	8002bdc <HAL_RCCEx_PeriphCLKConfig+0xd8>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002b52:	6861      	ldr	r1, [r4, #4]
 8002b54:	4a29      	ldr	r2, [pc, #164]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 8002b56:	6a13      	ldr	r3, [r2, #32]
 8002b58:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b5c:	430b      	orrs	r3, r1
 8002b5e:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002b60:	b11e      	cbz	r6, 8002b6a <HAL_RCCEx_PeriphCLKConfig+0x66>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b62:	69d3      	ldr	r3, [r2, #28]
 8002b64:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b68:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002b6a:	6820      	ldr	r0, [r4, #0]
 8002b6c:	0783      	lsls	r3, r0, #30
 8002b6e:	d506      	bpl.n	8002b7e <HAL_RCCEx_PeriphCLKConfig+0x7a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002b70:	4922      	ldr	r1, [pc, #136]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 8002b72:	68a3      	ldr	r3, [r4, #8]
 8002b74:	684a      	ldr	r2, [r1, #4]
 8002b76:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8002b7a:	431a      	orrs	r2, r3
 8002b7c:	604a      	str	r2, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002b7e:	f010 0010 	ands.w	r0, r0, #16
 8002b82:	d007      	beq.n	8002b94 <HAL_RCCEx_PeriphCLKConfig+0x90>
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002b84:	2000      	movs	r0, #0
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002b86:	4a1d      	ldr	r2, [pc, #116]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 8002b88:	68e1      	ldr	r1, [r4, #12]
 8002b8a:	6853      	ldr	r3, [r2, #4]
 8002b8c:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002b90:	430b      	orrs	r3, r1
 8002b92:	6053      	str	r3, [r2, #4]
}
 8002b94:	b002      	add	sp, #8
 8002b96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b9a:	69da      	ldr	r2, [r3, #28]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b9c:	4d18      	ldr	r5, [pc, #96]	; (8002c00 <HAL_RCCEx_PeriphCLKConfig+0xfc>)
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b9e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002ba2:	61da      	str	r2, [r3, #28]
 8002ba4:	69db      	ldr	r3, [r3, #28]
      pwrclkchanged = SET;
 8002ba6:	2601      	movs	r6, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ba8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bac:	9301      	str	r3, [sp, #4]
 8002bae:	9b01      	ldr	r3, [sp, #4]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bb0:	682b      	ldr	r3, [r5, #0]
 8002bb2:	05df      	lsls	r7, r3, #23
 8002bb4:	d4b6      	bmi.n	8002b24 <HAL_RCCEx_PeriphCLKConfig+0x20>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002bb6:	682b      	ldr	r3, [r5, #0]
 8002bb8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bbc:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8002bbe:	f7fe ff23 	bl	8001a08 <HAL_GetTick>
 8002bc2:	4607      	mov	r7, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bc4:	682b      	ldr	r3, [r5, #0]
 8002bc6:	05d8      	lsls	r0, r3, #23
 8002bc8:	d4ac      	bmi.n	8002b24 <HAL_RCCEx_PeriphCLKConfig+0x20>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bca:	f7fe ff1d 	bl	8001a08 <HAL_GetTick>
 8002bce:	1bc3      	subs	r3, r0, r7
 8002bd0:	2b64      	cmp	r3, #100	; 0x64
 8002bd2:	d9f7      	bls.n	8002bc4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
          return HAL_TIMEOUT;
 8002bd4:	2003      	movs	r0, #3
}
 8002bd6:	b002      	add	sp, #8
 8002bd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        tickstart = HAL_GetTick();
 8002bdc:	f7fe ff14 	bl	8001a08 <HAL_GetTick>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002be0:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8002be4:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002be6:	e004      	b.n	8002bf2 <HAL_RCCEx_PeriphCLKConfig+0xee>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002be8:	f7fe ff0e 	bl	8001a08 <HAL_GetTick>
 8002bec:	1bc0      	subs	r0, r0, r7
 8002bee:	4540      	cmp	r0, r8
 8002bf0:	d8f0      	bhi.n	8002bd4 <HAL_RCCEx_PeriphCLKConfig+0xd0>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bf2:	6a2b      	ldr	r3, [r5, #32]
 8002bf4:	079a      	lsls	r2, r3, #30
 8002bf6:	d5f7      	bpl.n	8002be8 <HAL_RCCEx_PeriphCLKConfig+0xe4>
 8002bf8:	e7ab      	b.n	8002b52 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8002bfa:	bf00      	nop
 8002bfc:	40021000 	.word	0x40021000
 8002c00:	40007000 	.word	0x40007000
 8002c04:	42420000 	.word	0x42420000

08002c08 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8002c08:	4684      	mov	ip, r0
 8002c0a:	b500      	push	{lr}
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002c0c:	4b36      	ldr	r3, [pc, #216]	; (8002ce8 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>)
{
 8002c0e:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002c10:	f10d 0e18 	add.w	lr, sp, #24
 8002c14:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002c16:	e90e 000f 	stmdb	lr, {r0, r1, r2, r3}
{
 8002c1a:	4660      	mov	r0, ip
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002c1c:	f240 2301 	movw	r3, #513	; 0x201
  uint32_t temp_reg = 0U, frequency = 0U;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8002c20:	2802      	cmp	r0, #2
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002c22:	f8ad 3004 	strh.w	r3, [sp, #4]
  switch (PeriphClk)
 8002c26:	d007      	beq.n	8002c38 <HAL_RCCEx_GetPeriphCLKFreq+0x30>
 8002c28:	2810      	cmp	r0, #16
 8002c2a:	d02a      	beq.n	8002c82 <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
 8002c2c:	2801      	cmp	r0, #1
 8002c2e:	d010      	beq.n	8002c52 <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
  uint32_t temp_reg = 0U, frequency = 0U;
 8002c30:	2000      	movs	r0, #0
    {
      break;
    }
  }
  return (frequency);
}
 8002c32:	b007      	add	sp, #28
 8002c34:	f85d fb04 	ldr.w	pc, [sp], #4
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8002c38:	f7ff ff54 	bl	8002ae4 <HAL_RCC_GetPCLK2Freq>
 8002c3c:	4b2b      	ldr	r3, [pc, #172]	; (8002cec <HAL_RCCEx_GetPeriphCLKFreq+0xe4>)
 8002c3e:	685b      	ldr	r3, [r3, #4]
 8002c40:	f3c3 3381 	ubfx	r3, r3, #14, #2
 8002c44:	3301      	adds	r3, #1
 8002c46:	005b      	lsls	r3, r3, #1
 8002c48:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8002c4c:	b007      	add	sp, #28
 8002c4e:	f85d fb04 	ldr.w	pc, [sp], #4
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8002c52:	f240 3202 	movw	r2, #770	; 0x302
      temp_reg = RCC->BDCR;
 8002c56:	4925      	ldr	r1, [pc, #148]	; (8002cec <HAL_RCCEx_GetPeriphCLKFreq+0xe4>)
 8002c58:	6a0b      	ldr	r3, [r1, #32]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8002c5a:	401a      	ands	r2, r3
 8002c5c:	f5b2 7f81 	cmp.w	r2, #258	; 0x102
 8002c60:	d033      	beq.n	8002cca <HAL_RCCEx_GetPeriphCLKFreq+0xc2>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8002c62:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c66:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c6a:	d031      	beq.n	8002cd0 <HAL_RCCEx_GetPeriphCLKFreq+0xc8>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8002c6c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002c70:	d1de      	bne.n	8002c30 <HAL_RCCEx_GetPeriphCLKFreq+0x28>
        frequency = HSE_VALUE / 128U;
 8002c72:	f24f 4324 	movw	r3, #62500	; 0xf424
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8002c76:	6808      	ldr	r0, [r1, #0]
        frequency = HSE_VALUE / 128U;
 8002c78:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
 8002c7c:	bf18      	it	ne
 8002c7e:	4618      	movne	r0, r3
 8002c80:	e7d7      	b.n	8002c32 <HAL_RCCEx_GetPeriphCLKFreq+0x2a>
      temp_reg = RCC->CFGR;
 8002c82:	4b1a      	ldr	r3, [pc, #104]	; (8002cec <HAL_RCCEx_GetPeriphCLKFreq+0xe4>)
 8002c84:	685a      	ldr	r2, [r3, #4]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8002c86:	6818      	ldr	r0, [r3, #0]
 8002c88:	f010 7080 	ands.w	r0, r0, #16777216	; 0x1000000
 8002c8c:	d0d1      	beq.n	8002c32 <HAL_RCCEx_GetPeriphCLKFreq+0x2a>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002c8e:	f3c2 4183 	ubfx	r1, r2, #18, #4
 8002c92:	3118      	adds	r1, #24
 8002c94:	4469      	add	r1, sp
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002c96:	03d2      	lsls	r2, r2, #15
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002c98:	f811 0c10 	ldrb.w	r0, [r1, #-16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002c9c:	d520      	bpl.n	8002ce0 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002c9e:	685b      	ldr	r3, [r3, #4]
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8002ca0:	4a13      	ldr	r2, [pc, #76]	; (8002cf0 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>)
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002ca2:	f3c3 4340 	ubfx	r3, r3, #17, #1
 8002ca6:	3318      	adds	r3, #24
 8002ca8:	446b      	add	r3, sp
 8002caa:	f813 3c14 	ldrb.w	r3, [r3, #-20]
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8002cae:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cb2:	fb03 f000 	mul.w	r0, r3, r0
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8002cb6:	4b0d      	ldr	r3, [pc, #52]	; (8002cec <HAL_RCCEx_GetPeriphCLKFreq+0xe4>)
 8002cb8:	685b      	ldr	r3, [r3, #4]
 8002cba:	025b      	lsls	r3, r3, #9
 8002cbc:	d4b9      	bmi.n	8002c32 <HAL_RCCEx_GetPeriphCLKFreq+0x2a>
          frequency = (pllclk * 2) / 3;
 8002cbe:	4b0d      	ldr	r3, [pc, #52]	; (8002cf4 <HAL_RCCEx_GetPeriphCLKFreq+0xec>)
 8002cc0:	0040      	lsls	r0, r0, #1
 8002cc2:	fba3 3000 	umull	r3, r0, r3, r0
 8002cc6:	0840      	lsrs	r0, r0, #1
 8002cc8:	e7b3      	b.n	8002c32 <HAL_RCCEx_GetPeriphCLKFreq+0x2a>
        frequency = LSE_VALUE;
 8002cca:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8002cce:	e7b0      	b.n	8002c32 <HAL_RCCEx_GetPeriphCLKFreq+0x2a>
        frequency = LSI_VALUE;
 8002cd0:	f649 4340 	movw	r3, #40000	; 0x9c40
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8002cd4:	6a48      	ldr	r0, [r1, #36]	; 0x24
        frequency = LSI_VALUE;
 8002cd6:	f010 0002 	ands.w	r0, r0, #2
 8002cda:	bf18      	it	ne
 8002cdc:	4618      	movne	r0, r3
 8002cde:	e7a8      	b.n	8002c32 <HAL_RCCEx_GetPeriphCLKFreq+0x2a>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002ce0:	4b05      	ldr	r3, [pc, #20]	; (8002cf8 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>)
 8002ce2:	fb03 f000 	mul.w	r0, r3, r0
 8002ce6:	e7e6      	b.n	8002cb6 <HAL_RCCEx_GetPeriphCLKFreq+0xae>
 8002ce8:	0800717c 	.word	0x0800717c
 8002cec:	40021000 	.word	0x40021000
 8002cf0:	007a1200 	.word	0x007a1200
 8002cf4:	aaaaaaab 	.word	0xaaaaaaab
 8002cf8:	003d0900 	.word	0x003d0900

08002cfc <RTC_WeekDayNum>:
{
  uint32_t year = 0U, weekday = 0U;

  year = 2000U + nYear;

  if (nMonth < 3U)
 8002cfc:	2902      	cmp	r1, #2
{
 8002cfe:	b410      	push	{r4}
  year = 2000U + nYear;
 8002d00:	f500 63fa 	add.w	r3, r0, #2000	; 0x7d0
  if (nMonth < 3U)
 8002d04:	d822      	bhi.n	8002d4c <RTC_WeekDayNum+0x50>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 8002d06:	eb01 0441 	add.w	r4, r1, r1, lsl #1
 8002d0a:	ebc1 01c4 	rsb	r1, r1, r4, lsl #3
 8002d0e:	4c18      	ldr	r4, [pc, #96]	; (8002d70 <RTC_WeekDayNum+0x74>)
 8002d10:	f200 70cf 	addw	r0, r0, #1999	; 0x7cf
 8002d14:	fba4 4101 	umull	r4, r1, r4, r1
 8002d18:	4c16      	ldr	r4, [pc, #88]	; (8002d74 <RTC_WeekDayNum+0x78>)
 8002d1a:	3204      	adds	r2, #4
 8002d1c:	fba4 4c00 	umull	r4, ip, r4, r0
 8002d20:	441a      	add	r2, r3
 8002d22:	eb02 0151 	add.w	r1, r2, r1, lsr #1
 8002d26:	eb01 0190 	add.w	r1, r1, r0, lsr #2
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 8002d2a:	4813      	ldr	r0, [pc, #76]	; (8002d78 <RTC_WeekDayNum+0x7c>)
 8002d2c:	eb01 11dc 	add.w	r1, r1, ip, lsr #7
 8002d30:	eba1 115c 	sub.w	r1, r1, ip, lsr #5
 8002d34:	fba0 3001 	umull	r3, r0, r0, r1
 8002d38:	1a0b      	subs	r3, r1, r0
 8002d3a:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8002d3e:	0880      	lsrs	r0, r0, #2
 8002d40:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 8002d44:	1a08      	subs	r0, r1, r0
  }

  return (uint8_t)weekday;
}
 8002d46:	b2c0      	uxtb	r0, r0
 8002d48:	bc10      	pop	{r4}
 8002d4a:	4770      	bx	lr
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 8002d4c:	4808      	ldr	r0, [pc, #32]	; (8002d70 <RTC_WeekDayNum+0x74>)
 8002d4e:	eb01 0441 	add.w	r4, r1, r1, lsl #1
 8002d52:	ebc1 01c4 	rsb	r1, r1, r4, lsl #3
 8002d56:	fba0 0101 	umull	r0, r1, r0, r1
 8002d5a:	3202      	adds	r2, #2
 8002d5c:	4805      	ldr	r0, [pc, #20]	; (8002d74 <RTC_WeekDayNum+0x78>)
 8002d5e:	441a      	add	r2, r3
 8002d60:	eb02 0151 	add.w	r1, r2, r1, lsr #1
 8002d64:	fba0 0c03 	umull	r0, ip, r0, r3
 8002d68:	eb01 0193 	add.w	r1, r1, r3, lsr #2
 8002d6c:	e7dd      	b.n	8002d2a <RTC_WeekDayNum+0x2e>
 8002d6e:	bf00      	nop
 8002d70:	38e38e39 	.word	0x38e38e39
 8002d74:	51eb851f 	.word	0x51eb851f
 8002d78:	24924925 	.word	0x24924925

08002d7c <RTC_WriteAlarmCounter>:
{
 8002d7c:	b570      	push	{r4, r5, r6, lr}
 8002d7e:	4604      	mov	r4, r0
 8002d80:	460e      	mov	r6, r1
  tickstart = HAL_GetTick();
 8002d82:	f7fe fe41 	bl	8001a08 <HAL_GetTick>
 8002d86:	4605      	mov	r5, r0
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8002d88:	e005      	b.n	8002d96 <RTC_WriteAlarmCounter+0x1a>
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8002d8a:	f7fe fe3d 	bl	8001a08 <HAL_GetTick>
 8002d8e:	1b40      	subs	r0, r0, r5
 8002d90:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8002d94:	d81f      	bhi.n	8002dd6 <RTC_WriteAlarmCounter+0x5a>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8002d96:	6823      	ldr	r3, [r4, #0]
 8002d98:	685a      	ldr	r2, [r3, #4]
 8002d9a:	0692      	lsls	r2, r2, #26
 8002d9c:	d5f5      	bpl.n	8002d8a <RTC_WriteAlarmCounter+0xe>
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002d9e:	685a      	ldr	r2, [r3, #4]
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 8002da0:	0c31      	lsrs	r1, r6, #16
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002da2:	f042 0210 	orr.w	r2, r2, #16
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 8002da6:	b2b6      	uxth	r6, r6
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002da8:	605a      	str	r2, [r3, #4]
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 8002daa:	6219      	str	r1, [r3, #32]
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 8002dac:	625e      	str	r6, [r3, #36]	; 0x24
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002dae:	685a      	ldr	r2, [r3, #4]
 8002db0:	f022 0210 	bic.w	r2, r2, #16
 8002db4:	605a      	str	r2, [r3, #4]
  tickstart = HAL_GetTick();
 8002db6:	f7fe fe27 	bl	8001a08 <HAL_GetTick>
 8002dba:	4605      	mov	r5, r0
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8002dbc:	e005      	b.n	8002dca <RTC_WriteAlarmCounter+0x4e>
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8002dbe:	f7fe fe23 	bl	8001a08 <HAL_GetTick>
 8002dc2:	1b40      	subs	r0, r0, r5
 8002dc4:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8002dc8:	d805      	bhi.n	8002dd6 <RTC_WriteAlarmCounter+0x5a>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8002dca:	6823      	ldr	r3, [r4, #0]
 8002dcc:	685b      	ldr	r3, [r3, #4]
 8002dce:	069b      	lsls	r3, r3, #26
 8002dd0:	d5f5      	bpl.n	8002dbe <RTC_WriteAlarmCounter+0x42>
  HAL_StatusTypeDef status = HAL_OK;
 8002dd2:	2000      	movs	r0, #0
}
 8002dd4:	bd70      	pop	{r4, r5, r6, pc}
    status = HAL_ERROR;
 8002dd6:	2001      	movs	r0, #1
}
 8002dd8:	bd70      	pop	{r4, r5, r6, pc}
 8002dda:	bf00      	nop

08002ddc <HAL_RTC_Init>:
  if (hrtc == NULL)
 8002ddc:	2800      	cmp	r0, #0
 8002dde:	d075      	beq.n	8002ecc <HAL_RTC_Init+0xf0>
{
 8002de0:	b538      	push	{r3, r4, r5, lr}
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8002de2:	7c43      	ldrb	r3, [r0, #17]
 8002de4:	4604      	mov	r4, r0
 8002de6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d062      	beq.n	8002eb4 <HAL_RTC_Init+0xd8>
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002dee:	2302      	movs	r3, #2
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 8002df0:	6822      	ldr	r2, [r4, #0]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002df2:	7463      	strb	r3, [r4, #17]
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 8002df4:	6853      	ldr	r3, [r2, #4]
 8002df6:	f023 0308 	bic.w	r3, r3, #8
 8002dfa:	6053      	str	r3, [r2, #4]
  tickstart = HAL_GetTick();
 8002dfc:	f7fe fe04 	bl	8001a08 <HAL_GetTick>
 8002e00:	4605      	mov	r5, r0
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8002e02:	e005      	b.n	8002e10 <HAL_RTC_Init+0x34>
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8002e04:	f7fe fe00 	bl	8001a08 <HAL_GetTick>
 8002e08:	1b40      	subs	r0, r0, r5
 8002e0a:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8002e0e:	d84d      	bhi.n	8002eac <HAL_RTC_Init+0xd0>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8002e10:	6823      	ldr	r3, [r4, #0]
 8002e12:	685b      	ldr	r3, [r3, #4]
 8002e14:	0718      	lsls	r0, r3, #28
 8002e16:	d5f5      	bpl.n	8002e04 <HAL_RTC_Init+0x28>
  tickstart = HAL_GetTick();
 8002e18:	f7fe fdf6 	bl	8001a08 <HAL_GetTick>
 8002e1c:	4605      	mov	r5, r0
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8002e1e:	e005      	b.n	8002e2c <HAL_RTC_Init+0x50>
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8002e20:	f7fe fdf2 	bl	8001a08 <HAL_GetTick>
 8002e24:	1b40      	subs	r0, r0, r5
 8002e26:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8002e2a:	d83f      	bhi.n	8002eac <HAL_RTC_Init+0xd0>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8002e2c:	6823      	ldr	r3, [r4, #0]
 8002e2e:	685a      	ldr	r2, [r3, #4]
 8002e30:	0691      	lsls	r1, r2, #26
 8002e32:	d5f5      	bpl.n	8002e20 <HAL_RTC_Init+0x44>
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002e34:	6859      	ldr	r1, [r3, #4]
    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8002e36:	68a0      	ldr	r0, [r4, #8]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002e38:	f041 0110 	orr.w	r1, r1, #16
 8002e3c:	6059      	str	r1, [r3, #4]
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 8002e3e:	6859      	ldr	r1, [r3, #4]
 8002e40:	f021 0107 	bic.w	r1, r1, #7
 8002e44:	6059      	str	r1, [r3, #4]
    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8002e46:	b120      	cbz	r0, 8002e52 <HAL_RTC_Init+0x76>
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 8002e48:	4921      	ldr	r1, [pc, #132]	; (8002ed0 <HAL_RTC_Init+0xf4>)
 8002e4a:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8002e4c:	f022 0201 	bic.w	r2, r2, #1
 8002e50:	630a      	str	r2, [r1, #48]	; 0x30
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 8002e52:	491f      	ldr	r1, [pc, #124]	; (8002ed0 <HAL_RTC_Init+0xf4>)
 8002e54:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8002e56:	f422 7260 	bic.w	r2, r2, #896	; 0x380
 8002e5a:	4302      	orrs	r2, r0
 8002e5c:	62ca      	str	r2, [r1, #44]	; 0x2c
    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 8002e5e:	6861      	ldr	r1, [r4, #4]
 8002e60:	1c4a      	adds	r2, r1, #1
 8002e62:	d02b      	beq.n	8002ebc <HAL_RTC_Init+0xe0>
    MODIFY_REG(hrtc->Instance->PRLH, RTC_PRLH_PRL, (prescaler >> 16U));
 8002e64:	6898      	ldr	r0, [r3, #8]
    MODIFY_REG(hrtc->Instance->PRLL, RTC_PRLL_PRL, (prescaler & RTC_PRLL_PRL));
 8002e66:	b28d      	uxth	r5, r1
    MODIFY_REG(hrtc->Instance->PRLH, RTC_PRLH_PRL, (prescaler >> 16U));
 8002e68:	f020 000f 	bic.w	r0, r0, #15
 8002e6c:	ea40 4111 	orr.w	r1, r0, r1, lsr #16
 8002e70:	6099      	str	r1, [r3, #8]
    MODIFY_REG(hrtc->Instance->PRLL, RTC_PRLL_PRL, (prescaler & RTC_PRLL_PRL));
 8002e72:	68da      	ldr	r2, [r3, #12]
 8002e74:	0c12      	lsrs	r2, r2, #16
 8002e76:	0412      	lsls	r2, r2, #16
 8002e78:	432a      	orrs	r2, r5
 8002e7a:	60da      	str	r2, [r3, #12]
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002e7c:	685a      	ldr	r2, [r3, #4]
 8002e7e:	f022 0210 	bic.w	r2, r2, #16
 8002e82:	605a      	str	r2, [r3, #4]
  tickstart = HAL_GetTick();
 8002e84:	f7fe fdc0 	bl	8001a08 <HAL_GetTick>
 8002e88:	4605      	mov	r5, r0
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8002e8a:	e005      	b.n	8002e98 <HAL_RTC_Init+0xbc>
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8002e8c:	f7fe fdbc 	bl	8001a08 <HAL_GetTick>
 8002e90:	1b40      	subs	r0, r0, r5
 8002e92:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8002e96:	d809      	bhi.n	8002eac <HAL_RTC_Init+0xd0>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8002e98:	6823      	ldr	r3, [r4, #0]
 8002e9a:	685b      	ldr	r3, [r3, #4]
 8002e9c:	069b      	lsls	r3, r3, #26
 8002e9e:	d5f5      	bpl.n	8002e8c <HAL_RTC_Init+0xb0>
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 8002ea0:	2301      	movs	r3, #1
 8002ea2:	7363      	strb	r3, [r4, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 8002ea4:	81e3      	strh	r3, [r4, #14]
    hrtc->State = HAL_RTC_STATE_READY;
 8002ea6:	7463      	strb	r3, [r4, #17]
    return HAL_OK;
 8002ea8:	2000      	movs	r0, #0
}
 8002eaa:	bd38      	pop	{r3, r4, r5, pc}
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002eac:	2304      	movs	r3, #4
 8002eae:	7463      	strb	r3, [r4, #17]
    return HAL_ERROR;
 8002eb0:	2001      	movs	r0, #1
}
 8002eb2:	bd38      	pop	{r3, r4, r5, pc}
    hrtc->Lock = HAL_UNLOCKED;
 8002eb4:	7402      	strb	r2, [r0, #16]
    HAL_RTC_MspInit(hrtc);
 8002eb6:	f7fe fb89 	bl	80015cc <HAL_RTC_MspInit>
 8002eba:	e798      	b.n	8002dee <HAL_RTC_Init+0x12>
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 8002ebc:	2001      	movs	r0, #1
 8002ebe:	f7ff fea3 	bl	8002c08 <HAL_RCCEx_GetPeriphCLKFreq>
      if (prescaler == 0U)
 8002ec2:	2800      	cmp	r0, #0
 8002ec4:	d0f2      	beq.n	8002eac <HAL_RTC_Init+0xd0>
    MODIFY_REG(hrtc->Instance->PRLH, RTC_PRLH_PRL, (prescaler >> 16U));
 8002ec6:	6823      	ldr	r3, [r4, #0]
        prescaler = prescaler - 1U;
 8002ec8:	1e41      	subs	r1, r0, #1
 8002eca:	e7cb      	b.n	8002e64 <HAL_RTC_Init+0x88>
    return HAL_ERROR;
 8002ecc:	2001      	movs	r0, #1
}
 8002ece:	4770      	bx	lr
 8002ed0:	40006c00 	.word	0x40006c00

08002ed4 <HAL_RTC_SetTime>:
  if ((hrtc == NULL) || (sTime == NULL))
 8002ed4:	2800      	cmp	r0, #0
 8002ed6:	f000 8085 	beq.w	8002fe4 <HAL_RTC_SetTime+0x110>
 8002eda:	2900      	cmp	r1, #0
 8002edc:	f000 8082 	beq.w	8002fe4 <HAL_RTC_SetTime+0x110>
{
 8002ee0:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hrtc);
 8002ee2:	7c03      	ldrb	r3, [r0, #16]
 8002ee4:	4604      	mov	r4, r0
 8002ee6:	2b01      	cmp	r3, #1
 8002ee8:	d07e      	beq.n	8002fe8 <HAL_RTC_SetTime+0x114>
 8002eea:	2001      	movs	r0, #1
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002eec:	2302      	movs	r3, #2
  __HAL_LOCK(hrtc);
 8002eee:	7420      	strb	r0, [r4, #16]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002ef0:	7463      	strb	r3, [r4, #17]
  if (Format == RTC_FORMAT_BIN)
 8002ef2:	2a00      	cmp	r2, #0
 8002ef4:	d05b      	beq.n	8002fae <HAL_RTC_SetTime+0xda>
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8002ef6:	f44f 6661 	mov.w	r6, #3600	; 0xe10
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 8002efa:	784a      	ldrb	r2, [r1, #1]
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8002efc:	7808      	ldrb	r0, [r1, #0]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 8002efe:	0913      	lsrs	r3, r2, #4
 8002f00:	eb03 0583 	add.w	r5, r3, r3, lsl #2
  return (tmp + (Value & (uint8_t)0x0F));
 8002f04:	f002 030f 	and.w	r3, r2, #15
 8002f08:	eb03 0345 	add.w	r3, r3, r5, lsl #1
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 8002f0c:	b2db      	uxtb	r3, r3
 8002f0e:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
 8002f12:	009d      	lsls	r5, r3, #2
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 8002f14:	0903      	lsrs	r3, r0, #4
 8002f16:	eb03 0283 	add.w	r2, r3, r3, lsl #2
  return (tmp + (Value & (uint8_t)0x0F));
 8002f1a:	f000 030f 	and.w	r3, r0, #15
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 8002f1e:	7889      	ldrb	r1, [r1, #2]
  return (tmp + (Value & (uint8_t)0x0F));
 8002f20:	eb03 0342 	add.w	r3, r3, r2, lsl #1
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8002f24:	b2db      	uxtb	r3, r3
 8002f26:	fb06 5503 	mla	r5, r6, r3, r5
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 8002f2a:	090b      	lsrs	r3, r1, #4
 8002f2c:	eb03 0283 	add.w	r2, r3, r3, lsl #2
  return (tmp + (Value & (uint8_t)0x0F));
 8002f30:	f001 030f 	and.w	r3, r1, #15
 8002f34:	eb03 0342 	add.w	r3, r3, r2, lsl #1
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 8002f38:	b2db      	uxtb	r3, r3
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8002f3a:	441d      	add	r5, r3
  tickstart = HAL_GetTick();
 8002f3c:	f7fe fd64 	bl	8001a08 <HAL_GetTick>
 8002f40:	4606      	mov	r6, r0
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8002f42:	e005      	b.n	8002f50 <HAL_RTC_SetTime+0x7c>
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8002f44:	f7fe fd60 	bl	8001a08 <HAL_GetTick>
 8002f48:	1b83      	subs	r3, r0, r6
 8002f4a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002f4e:	d843      	bhi.n	8002fd8 <HAL_RTC_SetTime+0x104>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8002f50:	6823      	ldr	r3, [r4, #0]
 8002f52:	685a      	ldr	r2, [r3, #4]
 8002f54:	0691      	lsls	r1, r2, #26
 8002f56:	d5f5      	bpl.n	8002f44 <HAL_RTC_SetTime+0x70>
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002f58:	6859      	ldr	r1, [r3, #4]
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 8002f5a:	0c2a      	lsrs	r2, r5, #16
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002f5c:	f041 0110 	orr.w	r1, r1, #16
 8002f60:	6059      	str	r1, [r3, #4]
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 8002f62:	619a      	str	r2, [r3, #24]
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 8002f64:	b2aa      	uxth	r2, r5
 8002f66:	61da      	str	r2, [r3, #28]
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002f68:	685a      	ldr	r2, [r3, #4]
 8002f6a:	f022 0210 	bic.w	r2, r2, #16
 8002f6e:	605a      	str	r2, [r3, #4]
  tickstart = HAL_GetTick();
 8002f70:	f7fe fd4a 	bl	8001a08 <HAL_GetTick>
 8002f74:	4606      	mov	r6, r0
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8002f76:	e005      	b.n	8002f84 <HAL_RTC_SetTime+0xb0>
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8002f78:	f7fe fd46 	bl	8001a08 <HAL_GetTick>
 8002f7c:	1b80      	subs	r0, r0, r6
 8002f7e:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8002f82:	d829      	bhi.n	8002fd8 <HAL_RTC_SetTime+0x104>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8002f84:	6823      	ldr	r3, [r4, #0]
 8002f86:	685a      	ldr	r2, [r3, #4]
 8002f88:	0692      	lsls	r2, r2, #26
 8002f8a:	d5f5      	bpl.n	8002f78 <HAL_RTC_SetTime+0xa4>
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 8002f8c:	685a      	ldr	r2, [r3, #4]
 8002f8e:	f022 0205 	bic.w	r2, r2, #5
 8002f92:	605a      	str	r2, [r3, #4]
  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 8002f94:	6a1a      	ldr	r2, [r3, #32]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 8002f96:	6a59      	ldr	r1, [r3, #36]	; 0x24
  return (((uint32_t) high1 << 16U) | low);
 8002f98:	b289      	uxth	r1, r1
 8002f9a:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
      if (counter_alarm < counter_time)
 8002f9e:	428d      	cmp	r5, r1
 8002fa0:	d811      	bhi.n	8002fc6 <HAL_RTC_SetTime+0xf2>
    __HAL_UNLOCK(hrtc);
 8002fa2:	2300      	movs	r3, #0
    hrtc->State = HAL_RTC_STATE_READY;
 8002fa4:	2201      	movs	r2, #1
    __HAL_UNLOCK(hrtc);
 8002fa6:	7423      	strb	r3, [r4, #16]
    hrtc->State = HAL_RTC_STATE_READY;
 8002fa8:	7462      	strb	r2, [r4, #17]
    return HAL_OK;
 8002faa:	4618      	mov	r0, r3
}
 8002fac:	bd70      	pop	{r4, r5, r6, pc}
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8002fae:	f44f 6061 	mov.w	r0, #3600	; 0xe10
                              ((uint32_t)sTime->Minutes * 60U) + \
 8002fb2:	784b      	ldrb	r3, [r1, #1]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8002fb4:	780a      	ldrb	r2, [r1, #0]
                              ((uint32_t)sTime->Minutes * 60U) + \
 8002fb6:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
 8002fba:	009d      	lsls	r5, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8002fbc:	fb00 5502 	mla	r5, r0, r2, r5
                              ((uint32_t)sTime->Seconds));
 8002fc0:	788b      	ldrb	r3, [r1, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8002fc2:	441d      	add	r5, r3
 8002fc4:	e7ba      	b.n	8002f3c <HAL_RTC_SetTime+0x68>
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8002fc6:	f501 31a8 	add.w	r1, r1, #86016	; 0x15000
 8002fca:	4620      	mov	r0, r4
 8002fcc:	f501 71c0 	add.w	r1, r1, #384	; 0x180
 8002fd0:	f7ff fed4 	bl	8002d7c <RTC_WriteAlarmCounter>
 8002fd4:	2800      	cmp	r0, #0
 8002fd6:	d0e4      	beq.n	8002fa2 <HAL_RTC_SetTime+0xce>
          hrtc->State = HAL_RTC_STATE_ERROR;
 8002fd8:	2204      	movs	r2, #4
          __HAL_UNLOCK(hrtc);
 8002fda:	2300      	movs	r3, #0
          hrtc->State = HAL_RTC_STATE_ERROR;
 8002fdc:	7462      	strb	r2, [r4, #17]
          __HAL_UNLOCK(hrtc);
 8002fde:	7423      	strb	r3, [r4, #16]
          return HAL_ERROR;
 8002fe0:	2001      	movs	r0, #1
}
 8002fe2:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8002fe4:	2001      	movs	r0, #1
}
 8002fe6:	4770      	bx	lr
  __HAL_LOCK(hrtc);
 8002fe8:	2002      	movs	r0, #2
}
 8002fea:	bd70      	pop	{r4, r5, r6, pc}

08002fec <HAL_RTC_SetDate>:
  if ((hrtc == NULL) || (sDate == NULL))
 8002fec:	2800      	cmp	r0, #0
 8002fee:	f000 8099 	beq.w	8003124 <HAL_RTC_SetDate+0x138>
{
 8002ff2:	b570      	push	{r4, r5, r6, lr}
 8002ff4:	460d      	mov	r5, r1
  if ((hrtc == NULL) || (sDate == NULL))
 8002ff6:	2900      	cmp	r1, #0
 8002ff8:	f000 8096 	beq.w	8003128 <HAL_RTC_SetDate+0x13c>
  __HAL_LOCK(hrtc);
 8002ffc:	7c03      	ldrb	r3, [r0, #16]
 8002ffe:	4604      	mov	r4, r0
 8003000:	2b01      	cmp	r3, #1
 8003002:	f000 8093 	beq.w	800312c <HAL_RTC_SetDate+0x140>
 8003006:	2101      	movs	r1, #1
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003008:	2302      	movs	r3, #2
  __HAL_LOCK(hrtc);
 800300a:	7401      	strb	r1, [r0, #16]
  hrtc->State = HAL_RTC_STATE_BUSY;
 800300c:	7443      	strb	r3, [r0, #17]
  if (Format == RTC_FORMAT_BIN)
 800300e:	2a00      	cmp	r2, #0
 8003010:	d036      	beq.n	8003080 <HAL_RTC_SetDate+0x94>
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 8003012:	78eb      	ldrb	r3, [r5, #3]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 8003014:	0918      	lsrs	r0, r3, #4
 8003016:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  return (tmp + (Value & (uint8_t)0x0F));
 800301a:	f003 030f 	and.w	r3, r3, #15
 800301e:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8003022:	b2c0      	uxtb	r0, r0
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 8003024:	73e0      	strb	r0, [r4, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 8003026:	786b      	ldrb	r3, [r5, #1]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 8003028:	0919      	lsrs	r1, r3, #4
 800302a:	eb01 0281 	add.w	r2, r1, r1, lsl #2
  return (tmp + (Value & (uint8_t)0x0F));
 800302e:	f003 010f 	and.w	r1, r3, #15
 8003032:	eb01 0142 	add.w	r1, r1, r2, lsl #1
 8003036:	b2c9      	uxtb	r1, r1
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 8003038:	7361      	strb	r1, [r4, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 800303a:	78ab      	ldrb	r3, [r5, #2]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 800303c:	091a      	lsrs	r2, r3, #4
 800303e:	eb02 0682 	add.w	r6, r2, r2, lsl #2
  return (tmp + (Value & (uint8_t)0x0F));
 8003042:	f003 020f 	and.w	r2, r3, #15
 8003046:	eb02 0246 	add.w	r2, r2, r6, lsl #1
 800304a:	b2d2      	uxtb	r2, r2
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 800304c:	73a2      	strb	r2, [r4, #14]
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 800304e:	f7ff fe55 	bl	8002cfc <RTC_WeekDayNum>
 8003052:	7320      	strb	r0, [r4, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 8003054:	7028      	strb	r0, [r5, #0]
  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8003056:	6823      	ldr	r3, [r4, #0]
 8003058:	6999      	ldr	r1, [r3, #24]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 800305a:	69dd      	ldr	r5, [r3, #28]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 800305c:	699a      	ldr	r2, [r3, #24]
  if (high1 != high2)
 800305e:	b28e      	uxth	r6, r1
 8003060:	b290      	uxth	r0, r2
 8003062:	4286      	cmp	r6, r0
 8003064:	d013      	beq.n	800308e <HAL_RTC_SetDate+0xa2>
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 8003066:	69dd      	ldr	r5, [r3, #28]
  if (hours > 24U)
 8003068:	4b31      	ldr	r3, [pc, #196]	; (8003130 <HAL_RTC_SetDate+0x144>)
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 800306a:	b2ad      	uxth	r5, r5
 800306c:	ea45 4502 	orr.w	r5, r5, r2, lsl #16
  if (hours > 24U)
 8003070:	429d      	cmp	r5, r3
 8003072:	d812      	bhi.n	800309a <HAL_RTC_SetDate+0xae>
  __HAL_UNLOCK(hrtc);
 8003074:	2300      	movs	r3, #0
  hrtc->State = HAL_RTC_STATE_READY ;
 8003076:	2201      	movs	r2, #1
  __HAL_UNLOCK(hrtc);
 8003078:	7423      	strb	r3, [r4, #16]
  hrtc->State = HAL_RTC_STATE_READY ;
 800307a:	7462      	strb	r2, [r4, #17]
  return HAL_OK;
 800307c:	4618      	mov	r0, r3
}
 800307e:	bd70      	pop	{r4, r5, r6, pc}
    hrtc->DateToUpdate.Year  = sDate->Year;
 8003080:	78e8      	ldrb	r0, [r5, #3]
 8003082:	73e0      	strb	r0, [r4, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 8003084:	7869      	ldrb	r1, [r5, #1]
 8003086:	7361      	strb	r1, [r4, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 8003088:	78aa      	ldrb	r2, [r5, #2]
 800308a:	73a2      	strb	r2, [r4, #14]
 800308c:	e7df      	b.n	800304e <HAL_RTC_SetDate+0x62>
  if (hours > 24U)
 800308e:	4b28      	ldr	r3, [pc, #160]	; (8003130 <HAL_RTC_SetDate+0x144>)
    timecounter = (((uint32_t) high1 << 16U) | low);
 8003090:	b2ad      	uxth	r5, r5
 8003092:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
  if (hours > 24U)
 8003096:	429d      	cmp	r5, r3
 8003098:	d9ec      	bls.n	8003074 <HAL_RTC_SetDate+0x88>
  tickstart = HAL_GetTick();
 800309a:	f7fe fcb5 	bl	8001a08 <HAL_GetTick>
 800309e:	4606      	mov	r6, r0
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80030a0:	e005      	b.n	80030ae <HAL_RTC_SetDate+0xc2>
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80030a2:	f7fe fcb1 	bl	8001a08 <HAL_GetTick>
 80030a6:	1b80      	subs	r0, r0, r6
 80030a8:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80030ac:	d834      	bhi.n	8003118 <HAL_RTC_SetDate+0x12c>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80030ae:	6823      	ldr	r3, [r4, #0]
 80030b0:	685a      	ldr	r2, [r3, #4]
 80030b2:	0691      	lsls	r1, r2, #26
 80030b4:	d5f5      	bpl.n	80030a2 <HAL_RTC_SetDate+0xb6>
 80030b6:	4e1f      	ldr	r6, [pc, #124]	; (8003134 <HAL_RTC_SetDate+0x148>)
 80030b8:	4a1f      	ldr	r2, [pc, #124]	; (8003138 <HAL_RTC_SetDate+0x14c>)
 80030ba:	fba6 1605 	umull	r1, r6, r6, r5
 80030be:	0c36      	lsrs	r6, r6, #16
 80030c0:	fb02 5616 	mls	r6, r2, r6, r5
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80030c4:	685a      	ldr	r2, [r3, #4]
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 80030c6:	0c31      	lsrs	r1, r6, #16
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80030c8:	f042 0210 	orr.w	r2, r2, #16
 80030cc:	605a      	str	r2, [r3, #4]
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 80030ce:	b2b2      	uxth	r2, r6
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 80030d0:	6199      	str	r1, [r3, #24]
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 80030d2:	61da      	str	r2, [r3, #28]
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80030d4:	685a      	ldr	r2, [r3, #4]
 80030d6:	f022 0210 	bic.w	r2, r2, #16
 80030da:	605a      	str	r2, [r3, #4]
  tickstart = HAL_GetTick();
 80030dc:	f7fe fc94 	bl	8001a08 <HAL_GetTick>
 80030e0:	4605      	mov	r5, r0
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80030e2:	e005      	b.n	80030f0 <HAL_RTC_SetDate+0x104>
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80030e4:	f7fe fc90 	bl	8001a08 <HAL_GetTick>
 80030e8:	1b40      	subs	r0, r0, r5
 80030ea:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80030ee:	d813      	bhi.n	8003118 <HAL_RTC_SetDate+0x12c>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80030f0:	6823      	ldr	r3, [r4, #0]
 80030f2:	685a      	ldr	r2, [r3, #4]
 80030f4:	0692      	lsls	r2, r2, #26
 80030f6:	d5f5      	bpl.n	80030e4 <HAL_RTC_SetDate+0xf8>
  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 80030f8:	6a1a      	ldr	r2, [r3, #32]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 80030fa:	6a59      	ldr	r1, [r3, #36]	; 0x24
  return (((uint32_t) high1 << 16U) | low);
 80030fc:	b289      	uxth	r1, r1
 80030fe:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
      if (counter_alarm < counter_time)
 8003102:	428e      	cmp	r6, r1
 8003104:	d9b6      	bls.n	8003074 <HAL_RTC_SetDate+0x88>
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8003106:	f501 31a8 	add.w	r1, r1, #86016	; 0x15000
 800310a:	4620      	mov	r0, r4
 800310c:	f501 71c0 	add.w	r1, r1, #384	; 0x180
 8003110:	f7ff fe34 	bl	8002d7c <RTC_WriteAlarmCounter>
 8003114:	2800      	cmp	r0, #0
 8003116:	d0ad      	beq.n	8003074 <HAL_RTC_SetDate+0x88>
          hrtc->State = HAL_RTC_STATE_ERROR;
 8003118:	2204      	movs	r2, #4
          __HAL_UNLOCK(hrtc);
 800311a:	2300      	movs	r3, #0
          hrtc->State = HAL_RTC_STATE_ERROR;
 800311c:	7462      	strb	r2, [r4, #17]
          __HAL_UNLOCK(hrtc);
 800311e:	7423      	strb	r3, [r4, #16]
          return HAL_ERROR;
 8003120:	2001      	movs	r0, #1
}
 8003122:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8003124:	2001      	movs	r0, #1
}
 8003126:	4770      	bx	lr
    return HAL_ERROR;
 8003128:	2001      	movs	r0, #1
}
 800312a:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hrtc);
 800312c:	2002      	movs	r0, #2
}
 800312e:	bd70      	pop	{r4, r5, r6, pc}
 8003130:	00015f8f 	.word	0x00015f8f
 8003134:	c22e4507 	.word	0xc22e4507
 8003138:	00015180 	.word	0x00015180

0800313c <SPI_WaitFlagStateUntilTimeout.constprop.0>:
  * @param  State flag state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 800313c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003140:	461e      	mov	r6, r3
 8003142:	4614      	mov	r4, r2
 8003144:	b082      	sub	sp, #8
 8003146:	460d      	mov	r5, r1
 8003148:	4607      	mov	r7, r0
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800314a:	f7fe fc5d 	bl	8001a08 <HAL_GetTick>
 800314e:	4426      	add	r6, r4
 8003150:	1a36      	subs	r6, r6, r0
  tmp_tickstart = HAL_GetTick();
 8003152:	f7fe fc59 	bl	8001a08 <HAL_GetTick>
 8003156:	4680      	mov	r8, r0

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003158:	4b25      	ldr	r3, [pc, #148]	; (80031f0 <SPI_WaitFlagStateUntilTimeout.constprop.0+0xb4>)
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f3c3 33cb 	ubfx	r3, r3, #15, #12
 8003160:	fb06 f303 	mul.w	r3, r6, r3
 8003164:	9301      	str	r3, [sp, #4]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003166:	683a      	ldr	r2, [r7, #0]
 8003168:	e001      	b.n	800316e <SPI_WaitFlagStateUntilTimeout.constprop.0+0x32>
  {
    if (Timeout != HAL_MAX_DELAY)
 800316a:	1c63      	adds	r3, r4, #1
 800316c:	d107      	bne.n	800317e <SPI_WaitFlagStateUntilTimeout.constprop.0+0x42>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800316e:	6893      	ldr	r3, [r2, #8]
 8003170:	ea35 0303 	bics.w	r3, r5, r3
 8003174:	d0f9      	beq.n	800316a <SPI_WaitFlagStateUntilTimeout.constprop.0+0x2e>
      }
      count--;
    }
  }

  return HAL_OK;
 8003176:	2000      	movs	r0, #0
}
 8003178:	b002      	add	sp, #8
 800317a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800317e:	f7fe fc43 	bl	8001a08 <HAL_GetTick>
 8003182:	eba0 0308 	sub.w	r3, r0, r8
 8003186:	42b3      	cmp	r3, r6
 8003188:	d207      	bcs.n	800319a <SPI_WaitFlagStateUntilTimeout.constprop.0+0x5e>
      if(count == 0U)
 800318a:	9b01      	ldr	r3, [sp, #4]
        tmp_timeout = 0U;
 800318c:	2b00      	cmp	r3, #0
      count--;
 800318e:	9b01      	ldr	r3, [sp, #4]
        tmp_timeout = 0U;
 8003190:	bf08      	it	eq
 8003192:	2600      	moveq	r6, #0
      count--;
 8003194:	3b01      	subs	r3, #1
 8003196:	9301      	str	r3, [sp, #4]
 8003198:	e7e5      	b.n	8003166 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x2a>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800319a:	e9d7 3100 	ldrd	r3, r1, [r7]
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800319e:	685a      	ldr	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80031a0:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80031a4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80031a8:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80031aa:	d014      	beq.n	80031d6 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x9a>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80031ac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80031ae:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 80031b2:	d007      	beq.n	80031c4 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x88>
        hspi->State = HAL_SPI_STATE_READY;
 80031b4:	2201      	movs	r2, #1
        __HAL_UNLOCK(hspi);
 80031b6:	2300      	movs	r3, #0
        return HAL_TIMEOUT;
 80031b8:	2003      	movs	r0, #3
        hspi->State = HAL_SPI_STATE_READY;
 80031ba:	f887 2051 	strb.w	r2, [r7, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 80031be:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
        return HAL_TIMEOUT;
 80031c2:	e7d9      	b.n	8003178 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x3c>
          SPI_RESET_CRC(hspi);
 80031c4:	681a      	ldr	r2, [r3, #0]
 80031c6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80031ca:	601a      	str	r2, [r3, #0]
 80031cc:	681a      	ldr	r2, [r3, #0]
 80031ce:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80031d2:	601a      	str	r2, [r3, #0]
 80031d4:	e7ee      	b.n	80031b4 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x78>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80031d6:	68ba      	ldr	r2, [r7, #8]
 80031d8:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 80031dc:	d002      	beq.n	80031e4 <SPI_WaitFlagStateUntilTimeout.constprop.0+0xa8>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80031de:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 80031e2:	d1e3      	bne.n	80031ac <SPI_WaitFlagStateUntilTimeout.constprop.0+0x70>
          __HAL_SPI_DISABLE(hspi);
 80031e4:	681a      	ldr	r2, [r3, #0]
 80031e6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80031ea:	601a      	str	r2, [r3, #0]
 80031ec:	e7de      	b.n	80031ac <SPI_WaitFlagStateUntilTimeout.constprop.0+0x70>
 80031ee:	bf00      	nop
 80031f0:	20000010 	.word	0x20000010

080031f4 <HAL_SPI_Init>:
  if (hspi == NULL)
 80031f4:	2800      	cmp	r0, #0
 80031f6:	d058      	beq.n	80032aa <HAL_SPI_Init+0xb6>
{
 80031f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80031fa:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80031fc:	4604      	mov	r4, r0
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d044      	beq.n	800328c <HAL_SPI_Init+0x98>
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003202:	2300      	movs	r3, #0
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003204:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003208:	2300      	movs	r3, #0
  if (hspi->State == HAL_SPI_STATE_RESET)
 800320a:	f894 2051 	ldrb.w	r2, [r4, #81]	; 0x51
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800320e:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8003210:	f002 01ff 	and.w	r1, r2, #255	; 0xff
 8003214:	2a00      	cmp	r2, #0
 8003216:	d03f      	beq.n	8003298 <HAL_SPI_Init+0xa4>
 8003218:	469c      	mov	ip, r3
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800321a:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
  hspi->State = HAL_SPI_STATE_BUSY;
 800321e:	2602      	movs	r6, #2
  hspi->State     = HAL_SPI_STATE_READY;
 8003220:	f04f 0e01 	mov.w	lr, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003224:	2500      	movs	r5, #0
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003226:	f402 4204 	and.w	r2, r2, #33792	; 0x8400
 800322a:	f403 7382 	and.w	r3, r3, #260	; 0x104
 800322e:	4313      	orrs	r3, r2
 8003230:	68e2      	ldr	r2, [r4, #12]
 8003232:	69a0      	ldr	r0, [r4, #24]
 8003234:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8003238:	4313      	orrs	r3, r2
 800323a:	6922      	ldr	r2, [r4, #16]
  hspi->State = HAL_SPI_STATE_BUSY;
 800323c:	f884 6051 	strb.w	r6, [r4, #81]	; 0x51
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003240:	4032      	ands	r2, r6
 8003242:	4313      	orrs	r3, r2
 8003244:	6962      	ldr	r2, [r4, #20]
  __HAL_SPI_DISABLE(hspi);
 8003246:	6821      	ldr	r1, [r4, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003248:	ea02 020e 	and.w	r2, r2, lr
 800324c:	431a      	orrs	r2, r3
 800324e:	69e3      	ldr	r3, [r4, #28]
 8003250:	6a26      	ldr	r6, [r4, #32]
 8003252:	f003 0738 	and.w	r7, r3, #56	; 0x38
 8003256:	f400 7300 	and.w	r3, r0, #512	; 0x200
 800325a:	4313      	orrs	r3, r2
 800325c:	f006 0680 	and.w	r6, r6, #128	; 0x80
  __HAL_SPI_DISABLE(hspi);
 8003260:	680a      	ldr	r2, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003262:	433b      	orrs	r3, r7
 8003264:	4333      	orrs	r3, r6
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8003266:	0c00      	lsrs	r0, r0, #16
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003268:	ea43 030c 	orr.w	r3, r3, ip
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800326c:	f000 0004 	and.w	r0, r0, #4
  __HAL_SPI_DISABLE(hspi);
 8003270:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003274:	600a      	str	r2, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003276:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8003278:	6048      	str	r0, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800327a:	69cb      	ldr	r3, [r1, #28]
  return HAL_OK;
 800327c:	4628      	mov	r0, r5
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800327e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003282:	61cb      	str	r3, [r1, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003284:	6565      	str	r5, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003286:	f884 e051 	strb.w	lr, [r4, #81]	; 0x51
}
 800328a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800328c:	6842      	ldr	r2, [r0, #4]
 800328e:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8003292:	d0b9      	beq.n	8003208 <HAL_SPI_Init+0x14>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003294:	61c3      	str	r3, [r0, #28]
 8003296:	e7b7      	b.n	8003208 <HAL_SPI_Init+0x14>
    HAL_SPI_MspInit(hspi);
 8003298:	4620      	mov	r0, r4
    hspi->Lock = HAL_UNLOCKED;
 800329a:	f884 1050 	strb.w	r1, [r4, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 800329e:	f7fe f9b5 	bl	800160c <HAL_SPI_MspInit>
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80032a2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80032a4:	f403 5c00 	and.w	ip, r3, #8192	; 0x2000
 80032a8:	e7b7      	b.n	800321a <HAL_SPI_Init+0x26>
    return HAL_ERROR;
 80032aa:	2001      	movs	r0, #1
}
 80032ac:	4770      	bx	lr
 80032ae:	bf00      	nop

080032b0 <HAL_SPI_Transmit>:
{
 80032b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80032b4:	461d      	mov	r5, r3
  __HAL_LOCK(hspi);
 80032b6:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
{
 80032ba:	b082      	sub	sp, #8
  __HAL_LOCK(hspi);
 80032bc:	2b01      	cmp	r3, #1
 80032be:	d05e      	beq.n	800337e <HAL_SPI_Transmit+0xce>
 80032c0:	2301      	movs	r3, #1
 80032c2:	4604      	mov	r4, r0
 80032c4:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
 80032c8:	4688      	mov	r8, r1
 80032ca:	4617      	mov	r7, r2
  tickstart = HAL_GetTick();
 80032cc:	f7fe fb9c 	bl	8001a08 <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 80032d0:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
  tickstart = HAL_GetTick();
 80032d4:	4606      	mov	r6, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 80032d6:	2b01      	cmp	r3, #1
 80032d8:	b2d8      	uxtb	r0, r3
 80032da:	d009      	beq.n	80032f0 <HAL_SPI_Transmit+0x40>
    errorcode = HAL_BUSY;
 80032dc:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 80032de:	2201      	movs	r2, #1
  __HAL_UNLOCK(hspi);
 80032e0:	2300      	movs	r3, #0
  hspi->State = HAL_SPI_STATE_READY;
 80032e2:	f884 2051 	strb.w	r2, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80032e6:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 80032ea:	b002      	add	sp, #8
 80032ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if ((pData == NULL) || (Size == 0U))
 80032f0:	f1b8 0f00 	cmp.w	r8, #0
 80032f4:	d0f3      	beq.n	80032de <HAL_SPI_Transmit+0x2e>
 80032f6:	2f00      	cmp	r7, #0
 80032f8:	d0f1      	beq.n	80032de <HAL_SPI_Transmit+0x2e>
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80032fa:	2300      	movs	r3, #0
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80032fc:	2203      	movs	r2, #3
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80032fe:	63a3      	str	r3, [r4, #56]	; 0x38
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003300:	f884 2051 	strb.w	r2, [r4, #81]	; 0x51
  hspi->RxXferSize  = 0U;
 8003304:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003306:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->TxISR       = NULL;
 8003308:	6463      	str	r3, [r4, #68]	; 0x44
  hspi->TxXferCount = Size;
 800330a:	86e7      	strh	r7, [r4, #54]	; 0x36
  hspi->RxISR       = NULL;
 800330c:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->RxXferCount = 0U;
 800330e:	87e3      	strh	r3, [r4, #62]	; 0x3e
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003310:	68a3      	ldr	r3, [r4, #8]
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003312:	f8c4 8030 	str.w	r8, [r4, #48]	; 0x30
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003316:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
  hspi->TxXferSize  = Size;
 800331a:	86a7      	strh	r7, [r4, #52]	; 0x34
    __HAL_SPI_DISABLE(hspi);
 800331c:	6823      	ldr	r3, [r4, #0]
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800331e:	d059      	beq.n	80033d4 <HAL_SPI_Transmit+0x124>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003320:	681a      	ldr	r2, [r3, #0]
 8003322:	0652      	lsls	r2, r2, #25
 8003324:	d403      	bmi.n	800332e <HAL_SPI_Transmit+0x7e>
    __HAL_SPI_ENABLE(hspi);
 8003326:	681a      	ldr	r2, [r3, #0]
 8003328:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800332c:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800332e:	68e2      	ldr	r2, [r4, #12]
 8003330:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003334:	6862      	ldr	r2, [r4, #4]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003336:	d026      	beq.n	8003386 <HAL_SPI_Transmit+0xd6>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003338:	2a00      	cmp	r2, #0
 800333a:	d054      	beq.n	80033e6 <HAL_SPI_Transmit+0x136>
 800333c:	2f01      	cmp	r7, #1
 800333e:	d052      	beq.n	80033e6 <HAL_SPI_Transmit+0x136>
    while (hspi->TxXferCount > 0U)
 8003340:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8003342:	b29b      	uxth	r3, r3
 8003344:	b973      	cbnz	r3, 8003364 <HAL_SPI_Transmit+0xb4>
 8003346:	e05c      	b.n	8003402 <HAL_SPI_Transmit+0x152>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003348:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800334a:	7812      	ldrb	r2, [r2, #0]
 800334c:	731a      	strb	r2, [r3, #12]
        hspi->TxXferCount--;
 800334e:	8ee1      	ldrh	r1, [r4, #54]	; 0x36
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003350:	6b23      	ldr	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8003352:	3901      	subs	r1, #1
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003354:	3301      	adds	r3, #1
        hspi->TxXferCount--;
 8003356:	b289      	uxth	r1, r1
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003358:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 800335a:	86e1      	strh	r1, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 800335c:	8ee1      	ldrh	r1, [r4, #54]	; 0x36
 800335e:	b289      	uxth	r1, r1
 8003360:	2900      	cmp	r1, #0
 8003362:	d04e      	beq.n	8003402 <HAL_SPI_Transmit+0x152>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003364:	6823      	ldr	r3, [r4, #0]
 8003366:	689a      	ldr	r2, [r3, #8]
 8003368:	0792      	lsls	r2, r2, #30
 800336a:	d4ed      	bmi.n	8003348 <HAL_SPI_Transmit+0x98>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800336c:	f7fe fb4c 	bl	8001a08 <HAL_GetTick>
 8003370:	1b80      	subs	r0, r0, r6
 8003372:	42a8      	cmp	r0, r5
 8003374:	d342      	bcc.n	80033fc <HAL_SPI_Transmit+0x14c>
 8003376:	1c6b      	adds	r3, r5, #1
 8003378:	d0f0      	beq.n	800335c <HAL_SPI_Transmit+0xac>
          errorcode = HAL_TIMEOUT;
 800337a:	2003      	movs	r0, #3
 800337c:	e7af      	b.n	80032de <HAL_SPI_Transmit+0x2e>
  __HAL_LOCK(hspi);
 800337e:	2002      	movs	r0, #2
}
 8003380:	b002      	add	sp, #8
 8003382:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003386:	2a00      	cmp	r2, #0
 8003388:	d155      	bne.n	8003436 <HAL_SPI_Transmit+0x186>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800338a:	4641      	mov	r1, r8
 800338c:	f831 2b02 	ldrh.w	r2, [r1], #2
 8003390:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 8003392:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003394:	6321      	str	r1, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8003396:	3a01      	subs	r2, #1
 8003398:	b292      	uxth	r2, r2
 800339a:	86e2      	strh	r2, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 800339c:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 800339e:	b292      	uxth	r2, r2
 80033a0:	b96a      	cbnz	r2, 80033be <HAL_SPI_Transmit+0x10e>
 80033a2:	e02e      	b.n	8003402 <HAL_SPI_Transmit+0x152>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80033a4:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80033a6:	f832 1b02 	ldrh.w	r1, [r2], #2
 80033aa:	60d9      	str	r1, [r3, #12]
        hspi->TxXferCount--;
 80033ac:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80033ae:	6322      	str	r2, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 80033b0:	3b01      	subs	r3, #1
 80033b2:	b29b      	uxth	r3, r3
 80033b4:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 80033b6:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80033b8:	b29b      	uxth	r3, r3
 80033ba:	b313      	cbz	r3, 8003402 <HAL_SPI_Transmit+0x152>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80033bc:	6823      	ldr	r3, [r4, #0]
 80033be:	689a      	ldr	r2, [r3, #8]
 80033c0:	0790      	lsls	r0, r2, #30
 80033c2:	d4ef      	bmi.n	80033a4 <HAL_SPI_Transmit+0xf4>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80033c4:	f7fe fb20 	bl	8001a08 <HAL_GetTick>
 80033c8:	1b80      	subs	r0, r0, r6
 80033ca:	42a8      	cmp	r0, r5
 80033cc:	d336      	bcc.n	800343c <HAL_SPI_Transmit+0x18c>
 80033ce:	1c69      	adds	r1, r5, #1
 80033d0:	d0f1      	beq.n	80033b6 <HAL_SPI_Transmit+0x106>
 80033d2:	e7d2      	b.n	800337a <HAL_SPI_Transmit+0xca>
    __HAL_SPI_DISABLE(hspi);
 80033d4:	681a      	ldr	r2, [r3, #0]
 80033d6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80033da:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80033dc:	681a      	ldr	r2, [r3, #0]
 80033de:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80033e2:	601a      	str	r2, [r3, #0]
 80033e4:	e79c      	b.n	8003320 <HAL_SPI_Transmit+0x70>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80033e6:	f898 2000 	ldrb.w	r2, [r8]
 80033ea:	731a      	strb	r2, [r3, #12]
      hspi->TxXferCount--;
 80033ec:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80033ee:	6b22      	ldr	r2, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 80033f0:	3b01      	subs	r3, #1
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80033f2:	3201      	adds	r2, #1
      hspi->TxXferCount--;
 80033f4:	b29b      	uxth	r3, r3
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80033f6:	6322      	str	r2, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 80033f8:	86e3      	strh	r3, [r4, #54]	; 0x36
 80033fa:	e7a1      	b.n	8003340 <HAL_SPI_Transmit+0x90>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80033fc:	2d00      	cmp	r5, #0
 80033fe:	d1ad      	bne.n	800335c <HAL_SPI_Transmit+0xac>
 8003400:	e7bb      	b.n	800337a <HAL_SPI_Transmit+0xca>
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003402:	4633      	mov	r3, r6
 8003404:	462a      	mov	r2, r5
 8003406:	2180      	movs	r1, #128	; 0x80
 8003408:	4620      	mov	r0, r4
 800340a:	f7ff fe97 	bl	800313c <SPI_WaitFlagStateUntilTimeout.constprop.0>
 800340e:	b120      	cbz	r0, 800341a <HAL_SPI_Transmit+0x16a>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003410:	2220      	movs	r2, #32
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003412:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003414:	4313      	orrs	r3, r2
 8003416:	6563      	str	r3, [r4, #84]	; 0x54
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003418:	6562      	str	r2, [r4, #84]	; 0x54
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800341a:	68a3      	ldr	r3, [r4, #8]
 800341c:	b933      	cbnz	r3, 800342c <HAL_SPI_Transmit+0x17c>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800341e:	6822      	ldr	r2, [r4, #0]
 8003420:	9301      	str	r3, [sp, #4]
 8003422:	68d3      	ldr	r3, [r2, #12]
 8003424:	9301      	str	r3, [sp, #4]
 8003426:	6893      	ldr	r3, [r2, #8]
 8003428:	9301      	str	r3, [sp, #4]
 800342a:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800342c:	6d60      	ldr	r0, [r4, #84]	; 0x54
    errorcode = HAL_BUSY;
 800342e:	3800      	subs	r0, #0
 8003430:	bf18      	it	ne
 8003432:	2001      	movne	r0, #1
error:
 8003434:	e753      	b.n	80032de <HAL_SPI_Transmit+0x2e>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003436:	2f01      	cmp	r7, #1
 8003438:	d1b0      	bne.n	800339c <HAL_SPI_Transmit+0xec>
 800343a:	e7a6      	b.n	800338a <HAL_SPI_Transmit+0xda>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800343c:	2d00      	cmp	r5, #0
 800343e:	d1ba      	bne.n	80033b6 <HAL_SPI_Transmit+0x106>
 8003440:	e79b      	b.n	800337a <HAL_SPI_Transmit+0xca>
 8003442:	bf00      	nop

08003444 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003444:	6a03      	ldr	r3, [r0, #32]
{
 8003446:	b470      	push	{r4, r5, r6}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003448:	f023 0301 	bic.w	r3, r3, #1
 800344c:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800344e:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003450:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003452:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003454:	680e      	ldr	r6, [r1, #0]
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003456:	4d0f      	ldr	r5, [pc, #60]	; (8003494 <TIM_OC1_SetConfig+0x50>)
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003458:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 800345c:	4332      	orrs	r2, r6
  tmpccer |= OC_Config->OCPolarity;
 800345e:	688e      	ldr	r6, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 8003460:	f023 0302 	bic.w	r3, r3, #2
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003464:	42a8      	cmp	r0, r5
  tmpccer |= OC_Config->OCPolarity;
 8003466:	ea43 0306 	orr.w	r3, r3, r6
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800346a:	d006      	beq.n	800347a <TIM_OC1_SetConfig+0x36>

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800346c:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 800346e:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8003470:	6182      	str	r2, [r0, #24]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 8003472:	bc70      	pop	{r4, r5, r6}
  TIMx->CCR1 = OC_Config->Pulse;
 8003474:	6341      	str	r1, [r0, #52]	; 0x34
  TIMx->CCER = tmpccer;
 8003476:	6203      	str	r3, [r0, #32]
}
 8003478:	4770      	bx	lr
    tmpccer |= OC_Config->OCNPolarity;
 800347a:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 800347c:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8003480:	432b      	orrs	r3, r5
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003482:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 8003486:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
 800348a:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 800348c:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 8003490:	432c      	orrs	r4, r5
 8003492:	e7eb      	b.n	800346c <TIM_OC1_SetConfig+0x28>
 8003494:	40012c00 	.word	0x40012c00

08003498 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003498:	6a03      	ldr	r3, [r0, #32]
{
 800349a:	b470      	push	{r4, r5, r6}
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800349c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80034a0:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80034a2:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80034a4:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80034a6:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80034a8:	680e      	ldr	r6, [r1, #0]
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80034aa:	4d10      	ldr	r5, [pc, #64]	; (80034ec <TIM_OC3_SetConfig+0x54>)
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80034ac:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 80034b0:	4332      	orrs	r2, r6
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80034b2:	688e      	ldr	r6, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 80034b4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80034b8:	42a8      	cmp	r0, r5
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80034ba:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80034be:	d006      	beq.n	80034ce <TIM_OC3_SetConfig+0x36>

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80034c0:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 80034c2:	6044      	str	r4, [r0, #4]
  TIMx->CCMR2 = tmpccmrx;
 80034c4:	61c2      	str	r2, [r0, #28]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 80034c6:	bc70      	pop	{r4, r5, r6}
  TIMx->CCR3 = OC_Config->Pulse;
 80034c8:	63c1      	str	r1, [r0, #60]	; 0x3c
  TIMx->CCER = tmpccer;
 80034ca:	6203      	str	r3, [r0, #32]
}
 80034cc:	4770      	bx	lr
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80034ce:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 80034d0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80034d4:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80034d8:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80034dc:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
 80034e0:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC3NE;
 80034e2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80034e6:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
 80034ea:	e7e9      	b.n	80034c0 <TIM_OC3_SetConfig+0x28>
 80034ec:	40012c00 	.word	0x40012c00

080034f0 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80034f0:	6a03      	ldr	r3, [r0, #32]
{
 80034f2:	b430      	push	{r4, r5}
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80034f4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80034f8:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80034fa:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80034fc:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80034fe:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003500:	f8d1 c000 	ldr.w	ip, [r1]
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003504:	4d0c      	ldr	r5, [pc, #48]	; (8003538 <TIM_OC4_SetConfig+0x48>)
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003506:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800350a:	ea42 220c 	orr.w	r2, r2, ip, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800350e:	f8d1 c008 	ldr.w	ip, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 8003512:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003516:	42a8      	cmp	r0, r5
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003518:	ea43 330c 	orr.w	r3, r3, ip, lsl #12
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800351c:	d006      	beq.n	800352c <TIM_OC4_SetConfig+0x3c>

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800351e:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8003520:	6044      	str	r4, [r0, #4]
  TIMx->CCMR2 = tmpccmrx;
 8003522:	61c2      	str	r2, [r0, #28]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 8003524:	bc30      	pop	{r4, r5}
  TIMx->CCR4 = OC_Config->Pulse;
 8003526:	6401      	str	r1, [r0, #64]	; 0x40
  TIMx->CCER = tmpccer;
 8003528:	6203      	str	r3, [r0, #32]
}
 800352a:	4770      	bx	lr
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800352c:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 800352e:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003532:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
 8003536:	e7f2      	b.n	800351e <TIM_OC4_SetConfig+0x2e>
 8003538:	40012c00 	.word	0x40012c00

0800353c <HAL_TIM_OC_Start>:
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800353c:	bb41      	cbnz	r1, 8003590 <HAL_TIM_OC_Start+0x54>
 800353e:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8003542:	2b01      	cmp	r3, #1
 8003544:	d12c      	bne.n	80035a0 <HAL_TIM_OC_Start+0x64>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003546:	2302      	movs	r3, #2
 8003548:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800354c:	2201      	movs	r2, #1
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800354e:	6803      	ldr	r3, [r0, #0]
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003550:	f001 011f 	and.w	r1, r1, #31

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003554:	6a18      	ldr	r0, [r3, #32]
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003556:	fa02 f101 	lsl.w	r1, r2, r1
  TIMx->CCER &= ~tmp;
 800355a:	ea20 0001 	bic.w	r0, r0, r1
{
 800355e:	b410      	push	{r4}
  TIMx->CCER &= ~tmp;
 8003560:	6218      	str	r0, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003562:	6a1a      	ldr	r2, [r3, #32]
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003564:	4c21      	ldr	r4, [pc, #132]	; (80035ec <HAL_TIM_OC_Start+0xb0>)
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003566:	4311      	orrs	r1, r2
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003568:	42a3      	cmp	r3, r4
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800356a:	6219      	str	r1, [r3, #32]
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800356c:	d01a      	beq.n	80035a4 <HAL_TIM_OC_Start+0x68>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800356e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003572:	d01b      	beq.n	80035ac <HAL_TIM_OC_Start+0x70>
 8003574:	4a1e      	ldr	r2, [pc, #120]	; (80035f0 <HAL_TIM_OC_Start+0xb4>)
 8003576:	4293      	cmp	r3, r2
 8003578:	d018      	beq.n	80035ac <HAL_TIM_OC_Start+0x70>
 800357a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800357e:	4293      	cmp	r3, r2
 8003580:	d014      	beq.n	80035ac <HAL_TIM_OC_Start+0x70>
    __HAL_TIM_ENABLE(htim);
 8003582:	681a      	ldr	r2, [r3, #0]
  return HAL_OK;
 8003584:	2000      	movs	r0, #0
    __HAL_TIM_ENABLE(htim);
 8003586:	f042 0201 	orr.w	r2, r2, #1
}
 800358a:	bc10      	pop	{r4}
    __HAL_TIM_ENABLE(htim);
 800358c:	601a      	str	r2, [r3, #0]
}
 800358e:	4770      	bx	lr
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003590:	2904      	cmp	r1, #4
 8003592:	d023      	beq.n	80035dc <HAL_TIM_OC_Start+0xa0>
 8003594:	2908      	cmp	r1, #8
 8003596:	d019      	beq.n	80035cc <HAL_TIM_OC_Start+0x90>
 8003598:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800359c:	2b01      	cmp	r3, #1
 800359e:	d00d      	beq.n	80035bc <HAL_TIM_OC_Start+0x80>
    return HAL_ERROR;
 80035a0:	2001      	movs	r0, #1
}
 80035a2:	4770      	bx	lr
    __HAL_TIM_MOE_ENABLE(htim);
 80035a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80035a6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80035aa:	645a      	str	r2, [r3, #68]	; 0x44
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80035ac:	689a      	ldr	r2, [r3, #8]
 80035ae:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035b2:	2a06      	cmp	r2, #6
 80035b4:	d1e5      	bne.n	8003582 <HAL_TIM_OC_Start+0x46>
  return HAL_OK;
 80035b6:	2000      	movs	r0, #0
}
 80035b8:	bc10      	pop	{r4}
 80035ba:	4770      	bx	lr
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80035bc:	2904      	cmp	r1, #4
 80035be:	d011      	beq.n	80035e4 <HAL_TIM_OC_Start+0xa8>
 80035c0:	2908      	cmp	r1, #8
 80035c2:	d007      	beq.n	80035d4 <HAL_TIM_OC_Start+0x98>
 80035c4:	2302      	movs	r3, #2
 80035c6:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
 80035ca:	e7bf      	b.n	800354c <HAL_TIM_OC_Start+0x10>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80035cc:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80035d0:	2b01      	cmp	r3, #1
 80035d2:	d1e5      	bne.n	80035a0 <HAL_TIM_OC_Start+0x64>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80035d4:	2302      	movs	r3, #2
 80035d6:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 80035da:	e7b7      	b.n	800354c <HAL_TIM_OC_Start+0x10>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80035dc:	f890 303f 	ldrb.w	r3, [r0, #63]	; 0x3f
 80035e0:	2b01      	cmp	r3, #1
 80035e2:	d1dd      	bne.n	80035a0 <HAL_TIM_OC_Start+0x64>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80035e4:	2302      	movs	r3, #2
 80035e6:	f880 303f 	strb.w	r3, [r0, #63]	; 0x3f
 80035ea:	e7af      	b.n	800354c <HAL_TIM_OC_Start+0x10>
 80035ec:	40012c00 	.word	0x40012c00
 80035f0:	40000400 	.word	0x40000400

080035f4 <HAL_TIM_PWM_Start>:
 80035f4:	f7ff bfa2 	b.w	800353c <HAL_TIM_OC_Start>

080035f8 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80035f8:	4a24      	ldr	r2, [pc, #144]	; (800368c <TIM_Base_SetConfig+0x94>)
{
 80035fa:	b430      	push	{r4, r5}
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80035fc:	4290      	cmp	r0, r2
  tmpcr1 = TIMx->CR1;
 80035fe:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003600:	d02c      	beq.n	800365c <TIM_Base_SetConfig+0x64>
 8003602:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8003606:	d014      	beq.n	8003632 <TIM_Base_SetConfig+0x3a>
 8003608:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800360c:	4290      	cmp	r0, r2
 800360e:	d010      	beq.n	8003632 <TIM_Base_SetConfig+0x3a>
 8003610:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003614:	4290      	cmp	r0, r2
 8003616:	d00c      	beq.n	8003632 <TIM_Base_SetConfig+0x3a>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003618:	694d      	ldr	r5, [r1, #20]
 800361a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800361e:	432b      	orrs	r3, r5
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003620:	688c      	ldr	r4, [r1, #8]
  TIMx->PSC = Structure->Prescaler;
 8003622:	680a      	ldr	r2, [r1, #0]
  TIMx->CR1 = tmpcr1;
 8003624:	6003      	str	r3, [r0, #0]
  TIMx->EGR = TIM_EGR_UG;
 8003626:	2301      	movs	r3, #1
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003628:	62c4      	str	r4, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800362a:	6282      	str	r2, [r0, #40]	; 0x28
}
 800362c:	bc30      	pop	{r4, r5}
  TIMx->EGR = TIM_EGR_UG;
 800362e:	6143      	str	r3, [r0, #20]
}
 8003630:	4770      	bx	lr
    tmpcr1 |= Structure->CounterMode;
 8003632:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003634:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003638:	68cc      	ldr	r4, [r1, #12]
    tmpcr1 |= Structure->CounterMode;
 800363a:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 800363c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003640:	694a      	ldr	r2, [r1, #20]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003642:	4323      	orrs	r3, r4
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003644:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003648:	4313      	orrs	r3, r2
  TIMx->ARR = (uint32_t)Structure->Period ;
 800364a:	688c      	ldr	r4, [r1, #8]
  TIMx->PSC = Structure->Prescaler;
 800364c:	680a      	ldr	r2, [r1, #0]
  TIMx->CR1 = tmpcr1;
 800364e:	6003      	str	r3, [r0, #0]
  TIMx->EGR = TIM_EGR_UG;
 8003650:	2301      	movs	r3, #1
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003652:	62c4      	str	r4, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003654:	6282      	str	r2, [r0, #40]	; 0x28
}
 8003656:	bc30      	pop	{r4, r5}
  TIMx->EGR = TIM_EGR_UG;
 8003658:	6143      	str	r3, [r0, #20]
}
 800365a:	4770      	bx	lr
    tmpcr1 |= Structure->CounterMode;
 800365c:	684c      	ldr	r4, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800365e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003662:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 |= Structure->CounterMode;
 8003664:	4323      	orrs	r3, r4
    tmpcr1 &= ~TIM_CR1_CKD;
 8003666:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800366a:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800366c:	694a      	ldr	r2, [r1, #20]
 800366e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003672:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8003674:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003676:	688b      	ldr	r3, [r1, #8]
}
 8003678:	bc30      	pop	{r4, r5}
  TIMx->ARR = (uint32_t)Structure->Period ;
 800367a:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800367c:	680b      	ldr	r3, [r1, #0]
 800367e:	6283      	str	r3, [r0, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8003680:	690b      	ldr	r3, [r1, #16]
 8003682:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8003684:	2301      	movs	r3, #1
 8003686:	6143      	str	r3, [r0, #20]
}
 8003688:	4770      	bx	lr
 800368a:	bf00      	nop
 800368c:	40012c00 	.word	0x40012c00

08003690 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 8003690:	b350      	cbz	r0, 80036e8 <HAL_TIM_PWM_Init+0x58>
{
 8003692:	b510      	push	{r4, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 8003694:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003698:	4604      	mov	r4, r0
 800369a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800369e:	b1f3      	cbz	r3, 80036de <HAL_TIM_PWM_Init+0x4e>
  htim->State = HAL_TIM_STATE_BUSY;
 80036a0:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80036a2:	4621      	mov	r1, r4
  htim->State = HAL_TIM_STATE_BUSY;
 80036a4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80036a8:	f851 0b04 	ldr.w	r0, [r1], #4
 80036ac:	f7ff ffa4 	bl	80035f8 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80036b0:	2301      	movs	r3, #1
 80036b2:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036b6:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 80036ba:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 80036be:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80036c2:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036c6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80036ca:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80036ce:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80036d2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 80036d6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80036da:	2000      	movs	r0, #0
}
 80036dc:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 80036de:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 80036e2:	f7fd fff5 	bl	80016d0 <HAL_TIM_PWM_MspInit>
 80036e6:	e7db      	b.n	80036a0 <HAL_TIM_PWM_Init+0x10>
    return HAL_ERROR;
 80036e8:	2001      	movs	r0, #1
}
 80036ea:	4770      	bx	lr

080036ec <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80036ec:	6a03      	ldr	r3, [r0, #32]
{
 80036ee:	b470      	push	{r4, r5, r6}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80036f0:	f023 0310 	bic.w	r3, r3, #16
 80036f4:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 80036f6:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 80036f8:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 80036fa:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80036fc:	680e      	ldr	r6, [r1, #0]
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80036fe:	4d11      	ldr	r5, [pc, #68]	; (8003744 <TIM_OC2_SetConfig+0x58>)
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003700:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003704:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003708:	688e      	ldr	r6, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 800370a:	f023 0320 	bic.w	r3, r3, #32
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800370e:	42a8      	cmp	r0, r5
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003710:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003714:	d006      	beq.n	8003724 <TIM_OC2_SetConfig+0x38>
  TIMx->CCR2 = OC_Config->Pulse;
 8003716:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8003718:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 800371a:	6182      	str	r2, [r0, #24]
}
 800371c:	bc70      	pop	{r4, r5, r6}
  TIMx->CCR2 = OC_Config->Pulse;
 800371e:	6381      	str	r1, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8003720:	6203      	str	r3, [r0, #32]
}
 8003722:	4770      	bx	lr
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003724:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8003726:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800372a:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800372e:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003732:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
 8003736:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC2NE;
 8003738:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800373c:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
 8003740:	e7e9      	b.n	8003716 <TIM_OC2_SetConfig+0x2a>
 8003742:	bf00      	nop
 8003744:	40012c00 	.word	0x40012c00

08003748 <HAL_TIM_PWM_ConfigChannel>:
{
 8003748:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 800374a:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800374e:	2b01      	cmp	r3, #1
 8003750:	d065      	beq.n	800381e <HAL_TIM_PWM_ConfigChannel+0xd6>
 8003752:	2301      	movs	r3, #1
 8003754:	4604      	mov	r4, r0
 8003756:	460d      	mov	r5, r1
 8003758:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  switch (Channel)
 800375c:	2a0c      	cmp	r2, #12
 800375e:	d818      	bhi.n	8003792 <HAL_TIM_PWM_ConfigChannel+0x4a>
 8003760:	e8df f002 	tbb	[pc, r2]
 8003764:	17171707 	.word	0x17171707
 8003768:	17171732 	.word	0x17171732
 800376c:	17171748 	.word	0x17171748
 8003770:	1c          	.byte	0x1c
 8003771:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003772:	6800      	ldr	r0, [r0, #0]
 8003774:	f7ff fe66 	bl	8003444 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003778:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800377a:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800377c:	6999      	ldr	r1, [r3, #24]
 800377e:	f041 0108 	orr.w	r1, r1, #8
 8003782:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003784:	6999      	ldr	r1, [r3, #24]
 8003786:	f021 0104 	bic.w	r1, r1, #4
 800378a:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800378c:	699a      	ldr	r2, [r3, #24]
 800378e:	4302      	orrs	r2, r0
 8003790:	619a      	str	r2, [r3, #24]
  __HAL_UNLOCK(htim);
 8003792:	2300      	movs	r3, #0
  return HAL_OK;
 8003794:	4618      	mov	r0, r3
  __HAL_UNLOCK(htim);
 8003796:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 800379a:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800379c:	6800      	ldr	r0, [r0, #0]
 800379e:	f7ff fea7 	bl	80034f0 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80037a2:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80037a4:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80037a6:	69d9      	ldr	r1, [r3, #28]
 80037a8:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 80037ac:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80037ae:	69d9      	ldr	r1, [r3, #28]
 80037b0:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 80037b4:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80037b6:	69da      	ldr	r2, [r3, #28]
 80037b8:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 80037bc:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(htim);
 80037be:	2300      	movs	r3, #0
  return HAL_OK;
 80037c0:	4618      	mov	r0, r3
  __HAL_UNLOCK(htim);
 80037c2:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  return HAL_OK;
 80037c6:	e7e8      	b.n	800379a <HAL_TIM_PWM_ConfigChannel+0x52>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80037c8:	6800      	ldr	r0, [r0, #0]
 80037ca:	f7ff ff8f 	bl	80036ec <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80037ce:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80037d0:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80037d2:	6999      	ldr	r1, [r3, #24]
 80037d4:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 80037d8:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80037da:	6999      	ldr	r1, [r3, #24]
 80037dc:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 80037e0:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80037e2:	699a      	ldr	r2, [r3, #24]
 80037e4:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 80037e8:	619a      	str	r2, [r3, #24]
  __HAL_UNLOCK(htim);
 80037ea:	2300      	movs	r3, #0
  return HAL_OK;
 80037ec:	4618      	mov	r0, r3
  __HAL_UNLOCK(htim);
 80037ee:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  return HAL_OK;
 80037f2:	e7d2      	b.n	800379a <HAL_TIM_PWM_ConfigChannel+0x52>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80037f4:	6800      	ldr	r0, [r0, #0]
 80037f6:	f7ff fe4f 	bl	8003498 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80037fa:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80037fc:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80037fe:	69d9      	ldr	r1, [r3, #28]
 8003800:	f041 0108 	orr.w	r1, r1, #8
 8003804:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003806:	69d9      	ldr	r1, [r3, #28]
 8003808:	f021 0104 	bic.w	r1, r1, #4
 800380c:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800380e:	69da      	ldr	r2, [r3, #28]
 8003810:	4302      	orrs	r2, r0
 8003812:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(htim);
 8003814:	2300      	movs	r3, #0
  return HAL_OK;
 8003816:	4618      	mov	r0, r3
  __HAL_UNLOCK(htim);
 8003818:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  return HAL_OK;
 800381c:	e7bd      	b.n	800379a <HAL_TIM_PWM_ConfigChannel+0x52>
  __HAL_LOCK(htim);
 800381e:	2002      	movs	r0, #2
}
 8003820:	bd38      	pop	{r3, r4, r5, pc}
 8003822:	bf00      	nop

08003824 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003824:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
 8003828:	2a01      	cmp	r2, #1
 800382a:	d027      	beq.n	800387c <HAL_TIMEx_MasterConfigSynchronization+0x58>
 800382c:	4603      	mov	r3, r0

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800382e:	2002      	movs	r0, #2

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003830:	681a      	ldr	r2, [r3, #0]
{
 8003832:	b430      	push	{r4, r5}
  htim->State = HAL_TIM_STATE_BUSY;
 8003834:	f883 003d 	strb.w	r0, [r3, #61]	; 0x3d
  tmpcr2 = htim->Instance->CR2;
 8003838:	6850      	ldr	r0, [r2, #4]
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800383a:	680c      	ldr	r4, [r1, #0]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800383c:	4d10      	ldr	r5, [pc, #64]	; (8003880 <HAL_TIMEx_MasterConfigSynchronization+0x5c>)
  tmpcr2 &= ~TIM_CR2_MMS;
 800383e:	f020 0070 	bic.w	r0, r0, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003842:	4320      	orrs	r0, r4
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003844:	42aa      	cmp	r2, r5
  tmpsmcr = htim->Instance->SMCR;
 8003846:	6894      	ldr	r4, [r2, #8]
  htim->Instance->CR2 = tmpcr2;
 8003848:	6050      	str	r0, [r2, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800384a:	d009      	beq.n	8003860 <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 800384c:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8003850:	d006      	beq.n	8003860 <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 8003852:	480c      	ldr	r0, [pc, #48]	; (8003884 <HAL_TIMEx_MasterConfigSynchronization+0x60>)
 8003854:	4282      	cmp	r2, r0
 8003856:	d003      	beq.n	8003860 <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 8003858:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 800385c:	4282      	cmp	r2, r0
 800385e:	d104      	bne.n	800386a <HAL_TIMEx_MasterConfigSynchronization+0x46>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003860:	6849      	ldr	r1, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003862:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003866:	430c      	orrs	r4, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003868:	6094      	str	r4, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 800386a:	2200      	movs	r2, #0
  htim->State = HAL_TIM_STATE_READY;
 800386c:	2101      	movs	r1, #1
  __HAL_UNLOCK(htim);
 800386e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_READY;
 8003872:	f883 103d 	strb.w	r1, [r3, #61]	; 0x3d

  return HAL_OK;
 8003876:	4610      	mov	r0, r2
}
 8003878:	bc30      	pop	{r4, r5}
 800387a:	4770      	bx	lr
  __HAL_LOCK(htim);
 800387c:	2002      	movs	r0, #2
}
 800387e:	4770      	bx	lr
 8003880:	40012c00 	.word	0x40012c00
 8003884:	40000400 	.word	0x40000400

08003888 <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003888:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800388c:	2b01      	cmp	r3, #1
 800388e:	d023      	beq.n	80038d8 <HAL_TIMEx_ConfigBreakDeadTime+0x50>
 8003890:	4602      	mov	r2, r0
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003892:	e9d1 0302 	ldrd	r0, r3, [r1, #8]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;

  __HAL_UNLOCK(htim);
 8003896:	f04f 0c00 	mov.w	ip, #0
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800389a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800389e:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80038a0:	6848      	ldr	r0, [r1, #4]
 80038a2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80038a6:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80038a8:	6808      	ldr	r0, [r1, #0]
 80038aa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80038ae:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80038b0:	6908      	ldr	r0, [r1, #16]
 80038b2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
{
 80038b6:	b410      	push	{r4}
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80038b8:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80038ba:	694c      	ldr	r4, [r1, #20]
 80038bc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80038c0:	69c8      	ldr	r0, [r1, #28]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80038c2:	4323      	orrs	r3, r4
  htim->Instance->BDTR = tmpbdtr;
 80038c4:	6811      	ldr	r1, [r2, #0]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80038c6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80038ca:	4303      	orrs	r3, r0
  htim->Instance->BDTR = tmpbdtr;
 80038cc:	644b      	str	r3, [r1, #68]	; 0x44
  __HAL_UNLOCK(htim);
 80038ce:	f882 c03c 	strb.w	ip, [r2, #60]	; 0x3c

  return HAL_OK;
 80038d2:	4660      	mov	r0, ip
}
 80038d4:	bc10      	pop	{r4}
 80038d6:	4770      	bx	lr
  __HAL_LOCK(htim);
 80038d8:	2002      	movs	r0, #2
}
 80038da:	4770      	bx	lr

080038dc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80038dc:	b538      	push	{r3, r4, r5, lr}
 80038de:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80038e0:	6803      	ldr	r3, [r0, #0]
 80038e2:	68c1      	ldr	r1, [r0, #12]
 80038e4:	691a      	ldr	r2, [r3, #16]
  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);


  if(huart->Instance == USART1)
 80038e6:	4d1c      	ldr	r5, [pc, #112]	; (8003958 <UART_SetConfig+0x7c>)
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80038e8:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80038ec:	430a      	orrs	r2, r1
 80038ee:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80038f0:	6882      	ldr	r2, [r0, #8]
 80038f2:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1,
 80038f4:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80038f6:	4302      	orrs	r2, r0
 80038f8:	6960      	ldr	r0, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 80038fa:	f421 51b0 	bic.w	r1, r1, #5632	; 0x1600
 80038fe:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003902:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 8003904:	430a      	orrs	r2, r1
 8003906:	60da      	str	r2, [r3, #12]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003908:	695a      	ldr	r2, [r3, #20]
 800390a:	69a1      	ldr	r1, [r4, #24]
 800390c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003910:	430a      	orrs	r2, r1
  if(huart->Instance == USART1)
 8003912:	42ab      	cmp	r3, r5
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003914:	615a      	str	r2, [r3, #20]
  if(huart->Instance == USART1)
 8003916:	d01b      	beq.n	8003950 <UART_SetConfig+0x74>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003918:	f7ff f8d4 	bl	8002ac4 <HAL_RCC_GetPCLK1Freq>
 800391c:	4603      	mov	r3, r0
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800391e:	6862      	ldr	r2, [r4, #4]
 8003920:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003924:	0092      	lsls	r2, r2, #2
 8003926:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800392a:	fbb3 f3f2 	udiv	r3, r3, r2
 800392e:	2564      	movs	r5, #100	; 0x64
 8003930:	490a      	ldr	r1, [pc, #40]	; (800395c <UART_SetConfig+0x80>)
 8003932:	6820      	ldr	r0, [r4, #0]
 8003934:	fba1 4203 	umull	r4, r2, r1, r3
 8003938:	0952      	lsrs	r2, r2, #5
 800393a:	fb05 3312 	mls	r3, r5, r2, r3
 800393e:	011b      	lsls	r3, r3, #4
 8003940:	3332      	adds	r3, #50	; 0x32
 8003942:	fba1 1303 	umull	r1, r3, r1, r3
 8003946:	0112      	lsls	r2, r2, #4
 8003948:	eb02 1353 	add.w	r3, r2, r3, lsr #5
 800394c:	6083      	str	r3, [r0, #8]
#endif /* USART_CR1_OVER8 */
}
 800394e:	bd38      	pop	{r3, r4, r5, pc}
    pclk = HAL_RCC_GetPCLK2Freq();
 8003950:	f7ff f8c8 	bl	8002ae4 <HAL_RCC_GetPCLK2Freq>
 8003954:	4603      	mov	r3, r0
 8003956:	e7e2      	b.n	800391e <UART_SetConfig+0x42>
 8003958:	40013800 	.word	0x40013800
 800395c:	51eb851f 	.word	0x51eb851f

08003960 <HAL_UART_Init>:
  if (huart == NULL)
 8003960:	b360      	cbz	r0, 80039bc <HAL_UART_Init+0x5c>
{
 8003962:	b538      	push	{r3, r4, r5, lr}
  if (huart->gState == HAL_UART_STATE_RESET)
 8003964:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003968:	4604      	mov	r4, r0
 800396a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800396e:	b303      	cbz	r3, 80039b2 <HAL_UART_Init+0x52>
  huart->gState = HAL_UART_STATE_BUSY;
 8003970:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8003972:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8003974:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UART_DISABLE(huart);
 8003978:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 800397a:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 800397c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003980:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8003982:	f7ff ffab 	bl	80038dc <UART_SetConfig>
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003986:	2500      	movs	r5, #0
  huart->gState = HAL_UART_STATE_READY;
 8003988:	2120      	movs	r1, #32
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800398a:	6823      	ldr	r3, [r4, #0]
  return HAL_OK;
 800398c:	4628      	mov	r0, r5
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800398e:	691a      	ldr	r2, [r3, #16]
 8003990:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003994:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003996:	695a      	ldr	r2, [r3, #20]
 8003998:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800399c:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 800399e:	68da      	ldr	r2, [r3, #12]
 80039a0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80039a4:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039a6:	6425      	str	r5, [r4, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80039a8:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80039ac:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e
}
 80039b0:	bd38      	pop	{r3, r4, r5, pc}
    huart->Lock = HAL_UNLOCKED;
 80039b2:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_UART_MspInit(huart);
 80039b6:	f7fd fecb 	bl	8001750 <HAL_UART_MspInit>
 80039ba:	e7d9      	b.n	8003970 <HAL_UART_Init+0x10>
    return HAL_ERROR;
 80039bc:	2001      	movs	r0, #1
}
 80039be:	4770      	bx	lr

080039c0 <HAL_UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_READY)
 80039c0:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 80039c4:	2b20      	cmp	r3, #32
 80039c6:	d122      	bne.n	8003a0e <HAL_UART_Receive_IT+0x4e>
    if ((pData == NULL) || (Size == 0U))
 80039c8:	b1f9      	cbz	r1, 8003a0a <HAL_UART_Receive_IT+0x4a>
 80039ca:	b1f2      	cbz	r2, 8003a0a <HAL_UART_Receive_IT+0x4a>
    __HAL_LOCK(huart);
 80039cc:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80039d0:	2b01      	cmp	r3, #1
 80039d2:	d01c      	beq.n	8003a0e <HAL_UART_Receive_IT+0x4e>
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039d4:	2300      	movs	r3, #0
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80039d6:	f04f 0c22 	mov.w	ip, #34	; 0x22
  huart->pRxBuffPtr = pData;
 80039da:	6281      	str	r1, [r0, #40]	; 0x28
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80039dc:	6801      	ldr	r1, [r0, #0]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039de:	6303      	str	r3, [r0, #48]	; 0x30
  __HAL_UNLOCK(huart);
 80039e0:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  huart->RxXferCount = Size;
 80039e4:	85c2      	strh	r2, [r0, #46]	; 0x2e
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039e6:	6403      	str	r3, [r0, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80039e8:	f880 c03e 	strb.w	ip, [r0, #62]	; 0x3e
  huart->RxXferSize = Size;
 80039ec:	8582      	strh	r2, [r0, #44]	; 0x2c
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80039ee:	68ca      	ldr	r2, [r1, #12]
    return(UART_Start_Receive_IT(huart, pData, Size));
 80039f0:	4618      	mov	r0, r3
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80039f2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80039f6:	60ca      	str	r2, [r1, #12]
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80039f8:	694b      	ldr	r3, [r1, #20]
 80039fa:	f043 0301 	orr.w	r3, r3, #1
 80039fe:	614b      	str	r3, [r1, #20]
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003a00:	68cb      	ldr	r3, [r1, #12]
 8003a02:	f043 0320 	orr.w	r3, r3, #32
 8003a06:	60cb      	str	r3, [r1, #12]
    return(UART_Start_Receive_IT(huart, pData, Size));
 8003a08:	4770      	bx	lr
      return HAL_ERROR;
 8003a0a:	2001      	movs	r0, #1
 8003a0c:	4770      	bx	lr
    return HAL_BUSY;
 8003a0e:	2002      	movs	r0, #2
}
 8003a10:	4770      	bx	lr
 8003a12:	bf00      	nop

08003a14 <HAL_UART_ErrorCallback>:
 8003a14:	4770      	bx	lr
 8003a16:	bf00      	nop

08003a18 <UART_DMAAbortOnError>:
{
 8003a18:	b508      	push	{r3, lr}
  huart->RxXferCount = 0x00U;
 8003a1a:	2300      	movs	r3, #0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003a1c:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0x00U;
 8003a1e:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003a20:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 8003a22:	f7ff fff7 	bl	8003a14 <HAL_UART_ErrorCallback>
}
 8003a26:	bd08      	pop	{r3, pc}

08003a28 <HAL_UARTEx_RxEventCallback>:
}
 8003a28:	4770      	bx	lr
 8003a2a:	bf00      	nop

08003a2c <UART_Receive_IT.part.0.isra.0>:
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a2c:	6883      	ldr	r3, [r0, #8]
 8003a2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a32:	d03b      	beq.n	8003aac <UART_Receive_IT.part.0.isra.0+0x80>
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003a34:	6a82      	ldr	r2, [r0, #40]	; 0x28
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d030      	beq.n	8003a9c <UART_Receive_IT.part.0.isra.0+0x70>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003a3a:	6803      	ldr	r3, [r0, #0]
 8003a3c:	685b      	ldr	r3, [r3, #4]
 8003a3e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003a42:	7013      	strb	r3, [r2, #0]
      huart->pRxBuffPtr += 1U;
 8003a44:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8003a46:	3301      	adds	r3, #1
 8003a48:	6283      	str	r3, [r0, #40]	; 0x28
    if (--huart->RxXferCount == 0U)
 8003a4a:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 8003a4c:	3b01      	subs	r3, #1
 8003a4e:	b29b      	uxth	r3, r3
 8003a50:	85c3      	strh	r3, [r0, #46]	; 0x2e
 8003a52:	bb53      	cbnz	r3, 8003aaa <UART_Receive_IT.part.0.isra.0+0x7e>
      huart->RxState = HAL_UART_STATE_READY;
 8003a54:	f04f 0c20 	mov.w	ip, #32
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003a58:	6802      	ldr	r2, [r0, #0]
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
 8003a5a:	b500      	push	{lr}
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003a5c:	68d1      	ldr	r1, [r2, #12]
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
 8003a5e:	b083      	sub	sp, #12
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003a60:	f021 0120 	bic.w	r1, r1, #32
 8003a64:	60d1      	str	r1, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003a66:	68d1      	ldr	r1, [r2, #12]
 8003a68:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8003a6c:	60d1      	str	r1, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003a6e:	6951      	ldr	r1, [r2, #20]
 8003a70:	f021 0101 	bic.w	r1, r1, #1
 8003a74:	6151      	str	r1, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8003a76:	f880 c03e 	strb.w	ip, [r0, #62]	; 0x3e
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a7a:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8003a7c:	2901      	cmp	r1, #1
 8003a7e:	d120      	bne.n	8003ac2 <UART_Receive_IT.part.0.isra.0+0x96>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a80:	6303      	str	r3, [r0, #48]	; 0x30
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a82:	68d1      	ldr	r1, [r2, #12]
 8003a84:	f021 0110 	bic.w	r1, r1, #16
 8003a88:	60d1      	str	r1, [r2, #12]
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003a8a:	6811      	ldr	r1, [r2, #0]
 8003a8c:	06c9      	lsls	r1, r1, #27
 8003a8e:	d422      	bmi.n	8003ad6 <UART_Receive_IT.part.0.isra.0+0xaa>
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003a90:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8003a92:	f7ff ffc9 	bl	8003a28 <HAL_UARTEx_RxEventCallback>
}
 8003a96:	b003      	add	sp, #12
 8003a98:	f85d fb04 	ldr.w	pc, [sp], #4
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003a9c:	6903      	ldr	r3, [r0, #16]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d1cb      	bne.n	8003a3a <UART_Receive_IT.part.0.isra.0+0xe>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003aa2:	6803      	ldr	r3, [r0, #0]
 8003aa4:	685b      	ldr	r3, [r3, #4]
 8003aa6:	7013      	strb	r3, [r2, #0]
 8003aa8:	e7cc      	b.n	8003a44 <UART_Receive_IT.part.0.isra.0+0x18>
 8003aaa:	4770      	bx	lr
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003aac:	6903      	ldr	r3, [r0, #16]
 8003aae:	b96b      	cbnz	r3, 8003acc <UART_Receive_IT.part.0.isra.0+0xa0>
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003ab0:	6802      	ldr	r2, [r0, #0]
 8003ab2:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8003ab4:	6852      	ldr	r2, [r2, #4]
 8003ab6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003aba:	f823 2b02 	strh.w	r2, [r3], #2
      huart->pRxBuffPtr += 2U;
 8003abe:	6283      	str	r3, [r0, #40]	; 0x28
 8003ac0:	e7c3      	b.n	8003a4a <UART_Receive_IT.part.0.isra.0+0x1e>
       HAL_UART_RxCpltCallback(huart);
 8003ac2:	f7fd fcab 	bl	800141c <HAL_UART_RxCpltCallback>
}
 8003ac6:	b003      	add	sp, #12
 8003ac8:	f85d fb04 	ldr.w	pc, [sp], #4
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003acc:	6803      	ldr	r3, [r0, #0]
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003ace:	6a82      	ldr	r2, [r0, #40]	; 0x28
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003ad0:	685b      	ldr	r3, [r3, #4]
 8003ad2:	7013      	strb	r3, [r2, #0]
 8003ad4:	e7b6      	b.n	8003a44 <UART_Receive_IT.part.0.isra.0+0x18>
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003ad6:	9301      	str	r3, [sp, #4]
 8003ad8:	6813      	ldr	r3, [r2, #0]
 8003ada:	9301      	str	r3, [sp, #4]
 8003adc:	6853      	ldr	r3, [r2, #4]
 8003ade:	9301      	str	r3, [sp, #4]
 8003ae0:	9b01      	ldr	r3, [sp, #4]
 8003ae2:	e7d5      	b.n	8003a90 <UART_Receive_IT.part.0.isra.0+0x64>

08003ae4 <HAL_UART_IRQHandler>:
{
 8003ae4:	b530      	push	{r4, r5, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003ae6:	6803      	ldr	r3, [r0, #0]
{
 8003ae8:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003aea:	681a      	ldr	r2, [r3, #0]
{
 8003aec:	b083      	sub	sp, #12
  if (errorflags == RESET)
 8003aee:	f012 0f0f 	tst.w	r2, #15
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003af2:	68d9      	ldr	r1, [r3, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003af4:	695d      	ldr	r5, [r3, #20]
  if (errorflags == RESET)
 8003af6:	d14e      	bne.n	8003b96 <HAL_UART_IRQHandler+0xb2>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003af8:	0695      	lsls	r5, r2, #26
 8003afa:	d502      	bpl.n	8003b02 <HAL_UART_IRQHandler+0x1e>
 8003afc:	068d      	lsls	r5, r1, #26
 8003afe:	f100 80b3 	bmi.w	8003c68 <HAL_UART_IRQHandler+0x184>
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b02:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8003b04:	2801      	cmp	r0, #1
 8003b06:	d00b      	beq.n	8003b20 <HAL_UART_IRQHandler+0x3c>
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003b08:	0610      	lsls	r0, r2, #24
 8003b0a:	d502      	bpl.n	8003b12 <HAL_UART_IRQHandler+0x2e>
 8003b0c:	060d      	lsls	r5, r1, #24
 8003b0e:	f100 8081 	bmi.w	8003c14 <HAL_UART_IRQHandler+0x130>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003b12:	0650      	lsls	r0, r2, #25
 8003b14:	d502      	bpl.n	8003b1c <HAL_UART_IRQHandler+0x38>
 8003b16:	064a      	lsls	r2, r1, #25
 8003b18:	f100 809b 	bmi.w	8003c52 <HAL_UART_IRQHandler+0x16e>
}
 8003b1c:	b003      	add	sp, #12
 8003b1e:	bd30      	pop	{r4, r5, pc}
      &&((isrflags & USART_SR_IDLE) != 0U)
 8003b20:	06d0      	lsls	r0, r2, #27
 8003b22:	d5f1      	bpl.n	8003b08 <HAL_UART_IRQHandler+0x24>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8003b24:	06cd      	lsls	r5, r1, #27
 8003b26:	d5ef      	bpl.n	8003b08 <HAL_UART_IRQHandler+0x24>
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003b28:	2100      	movs	r1, #0
 8003b2a:	9101      	str	r1, [sp, #4]
 8003b2c:	681a      	ldr	r2, [r3, #0]
 8003b2e:	9201      	str	r2, [sp, #4]
 8003b30:	685a      	ldr	r2, [r3, #4]
 8003b32:	9201      	str	r2, [sp, #4]
 8003b34:	9a01      	ldr	r2, [sp, #4]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b36:	695a      	ldr	r2, [r3, #20]
 8003b38:	f012 0240 	ands.w	r2, r2, #64	; 0x40
 8003b3c:	f000 80cc 	beq.w	8003cd8 <HAL_UART_IRQHandler+0x1f4>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003b40:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8003b42:	6802      	ldr	r2, [r0, #0]
 8003b44:	6852      	ldr	r2, [r2, #4]
 8003b46:	b292      	uxth	r2, r2
      if (  (nb_remaining_rx_data > 0U)
 8003b48:	2a00      	cmp	r2, #0
 8003b4a:	d0e7      	beq.n	8003b1c <HAL_UART_IRQHandler+0x38>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8003b4c:	8da5      	ldrh	r5, [r4, #44]	; 0x2c
 8003b4e:	4295      	cmp	r5, r2
 8003b50:	d9e4      	bls.n	8003b1c <HAL_UART_IRQHandler+0x38>
        huart->RxXferCount = nb_remaining_rx_data;
 8003b52:	85e2      	strh	r2, [r4, #46]	; 0x2e
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003b54:	6982      	ldr	r2, [r0, #24]
 8003b56:	2a20      	cmp	r2, #32
 8003b58:	d016      	beq.n	8003b88 <HAL_UART_IRQHandler+0xa4>
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003b5a:	68da      	ldr	r2, [r3, #12]
 8003b5c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003b60:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b62:	695a      	ldr	r2, [r3, #20]
 8003b64:	f022 0201 	bic.w	r2, r2, #1
 8003b68:	615a      	str	r2, [r3, #20]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003b6a:	695a      	ldr	r2, [r3, #20]
 8003b6c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b70:	615a      	str	r2, [r3, #20]
          huart->RxState = HAL_UART_STATE_READY;
 8003b72:	2220      	movs	r2, #32
 8003b74:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b78:	6321      	str	r1, [r4, #48]	; 0x30
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b7a:	68da      	ldr	r2, [r3, #12]
 8003b7c:	f022 0210 	bic.w	r2, r2, #16
 8003b80:	60da      	str	r2, [r3, #12]
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003b82:	f7fe fabb 	bl	80020fc <HAL_DMA_Abort>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003b86:	8da5      	ldrh	r5, [r4, #44]	; 0x2c
 8003b88:	8de1      	ldrh	r1, [r4, #46]	; 0x2e
 8003b8a:	4620      	mov	r0, r4
 8003b8c:	1a69      	subs	r1, r5, r1
 8003b8e:	b289      	uxth	r1, r1
 8003b90:	f7ff ff4a 	bl	8003a28 <HAL_UARTEx_RxEventCallback>
 8003b94:	e7c2      	b.n	8003b1c <HAL_UART_IRQHandler+0x38>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003b96:	f005 0501 	and.w	r5, r5, #1
 8003b9a:	f401 7090 	and.w	r0, r1, #288	; 0x120
 8003b9e:	4328      	orrs	r0, r5
 8003ba0:	d0af      	beq.n	8003b02 <HAL_UART_IRQHandler+0x1e>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003ba2:	07d0      	lsls	r0, r2, #31
 8003ba4:	d505      	bpl.n	8003bb2 <HAL_UART_IRQHandler+0xce>
 8003ba6:	05c8      	lsls	r0, r1, #23
 8003ba8:	d503      	bpl.n	8003bb2 <HAL_UART_IRQHandler+0xce>
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003baa:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8003bac:	f040 0001 	orr.w	r0, r0, #1
 8003bb0:	6420      	str	r0, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003bb2:	0750      	lsls	r0, r2, #29
 8003bb4:	d529      	bpl.n	8003c0a <HAL_UART_IRQHandler+0x126>
 8003bb6:	b14d      	cbz	r5, 8003bcc <HAL_UART_IRQHandler+0xe8>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003bb8:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8003bba:	f040 0002 	orr.w	r0, r0, #2
 8003bbe:	6420      	str	r0, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003bc0:	0790      	lsls	r0, r2, #30
 8003bc2:	d503      	bpl.n	8003bcc <HAL_UART_IRQHandler+0xe8>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003bc4:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8003bc6:	f040 0004 	orr.w	r0, r0, #4
 8003bca:	6420      	str	r0, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003bcc:	0710      	lsls	r0, r2, #28
 8003bce:	d507      	bpl.n	8003be0 <HAL_UART_IRQHandler+0xfc>
 8003bd0:	f001 0020 	and.w	r0, r1, #32
 8003bd4:	4328      	orrs	r0, r5
 8003bd6:	d003      	beq.n	8003be0 <HAL_UART_IRQHandler+0xfc>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003bd8:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8003bda:	f040 0008 	orr.w	r0, r0, #8
 8003bde:	6420      	str	r0, [r4, #64]	; 0x40
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003be0:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8003be2:	2800      	cmp	r0, #0
 8003be4:	d09a      	beq.n	8003b1c <HAL_UART_IRQHandler+0x38>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003be6:	0690      	lsls	r0, r2, #26
 8003be8:	d502      	bpl.n	8003bf0 <HAL_UART_IRQHandler+0x10c>
 8003bea:	068a      	lsls	r2, r1, #26
 8003bec:	f100 8095 	bmi.w	8003d1a <HAL_UART_IRQHandler+0x236>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003bf0:	695a      	ldr	r2, [r3, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003bf2:	6c25      	ldr	r5, [r4, #64]	; 0x40
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003bf4:	f002 0240 	and.w	r2, r2, #64	; 0x40
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003bf8:	f005 0508 	and.w	r5, r5, #8
 8003bfc:	4315      	orrs	r5, r2
 8003bfe:	d13d      	bne.n	8003c7c <HAL_UART_IRQHandler+0x198>
        HAL_UART_ErrorCallback(huart);
 8003c00:	4620      	mov	r0, r4
 8003c02:	f7ff ff07 	bl	8003a14 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c06:	6425      	str	r5, [r4, #64]	; 0x40
 8003c08:	e788      	b.n	8003b1c <HAL_UART_IRQHandler+0x38>
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003c0a:	0790      	lsls	r0, r2, #30
 8003c0c:	d5de      	bpl.n	8003bcc <HAL_UART_IRQHandler+0xe8>
 8003c0e:	2d00      	cmp	r5, #0
 8003c10:	d0dc      	beq.n	8003bcc <HAL_UART_IRQHandler+0xe8>
 8003c12:	e7d7      	b.n	8003bc4 <HAL_UART_IRQHandler+0xe0>
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003c14:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 8003c18:	2a21      	cmp	r2, #33	; 0x21
 8003c1a:	f47f af7f 	bne.w	8003b1c <HAL_UART_IRQHandler+0x38>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c1e:	68a2      	ldr	r2, [r4, #8]
 8003c20:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8003c24:	f000 8083 	beq.w	8003d2e <HAL_UART_IRQHandler+0x24a>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003c28:	6a22      	ldr	r2, [r4, #32]
 8003c2a:	1c51      	adds	r1, r2, #1
 8003c2c:	6221      	str	r1, [r4, #32]
 8003c2e:	7812      	ldrb	r2, [r2, #0]
 8003c30:	605a      	str	r2, [r3, #4]
    if (--huart->TxXferCount == 0U)
 8003c32:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 8003c34:	3a01      	subs	r2, #1
 8003c36:	b292      	uxth	r2, r2
 8003c38:	84e2      	strh	r2, [r4, #38]	; 0x26
 8003c3a:	2a00      	cmp	r2, #0
 8003c3c:	f47f af6e 	bne.w	8003b1c <HAL_UART_IRQHandler+0x38>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003c40:	68da      	ldr	r2, [r3, #12]
 8003c42:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003c46:	60da      	str	r2, [r3, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003c48:	68da      	ldr	r2, [r3, #12]
 8003c4a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003c4e:	60da      	str	r2, [r3, #12]
 8003c50:	e764      	b.n	8003b1c <HAL_UART_IRQHandler+0x38>
  huart->gState = HAL_UART_STATE_READY;
 8003c52:	2120      	movs	r1, #32
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003c54:	68da      	ldr	r2, [r3, #12]
  HAL_UART_TxCpltCallback(huart);
 8003c56:	4620      	mov	r0, r4
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003c58:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c5c:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8003c5e:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
  HAL_UART_TxCpltCallback(huart);
 8003c62:	f7fd fbf3 	bl	800144c <HAL_UART_TxCpltCallback>
  return HAL_OK;
 8003c66:	e759      	b.n	8003b1c <HAL_UART_IRQHandler+0x38>
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003c68:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8003c6c:	2b22      	cmp	r3, #34	; 0x22
 8003c6e:	f47f af55 	bne.w	8003b1c <HAL_UART_IRQHandler+0x38>
}
 8003c72:	b003      	add	sp, #12
 8003c74:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003c78:	f7ff bed8 	b.w	8003a2c <UART_Receive_IT.part.0.isra.0>
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003c7c:	68da      	ldr	r2, [r3, #12]
 8003c7e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003c82:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c84:	695a      	ldr	r2, [r3, #20]
 8003c86:	f022 0201 	bic.w	r2, r2, #1
 8003c8a:	615a      	str	r2, [r3, #20]
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c8c:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8003c8e:	2a01      	cmp	r2, #1
 8003c90:	d103      	bne.n	8003c9a <HAL_UART_IRQHandler+0x1b6>
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c92:	68da      	ldr	r2, [r3, #12]
 8003c94:	f022 0210 	bic.w	r2, r2, #16
 8003c98:	60da      	str	r2, [r3, #12]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c9a:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 8003c9c:	2120      	movs	r1, #32
 8003c9e:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ca2:	6322      	str	r2, [r4, #48]	; 0x30
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ca4:	695a      	ldr	r2, [r3, #20]
 8003ca6:	0655      	lsls	r5, r2, #25
 8003ca8:	d512      	bpl.n	8003cd0 <HAL_UART_IRQHandler+0x1ec>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003caa:	695a      	ldr	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 8003cac:	6ba0      	ldr	r0, [r4, #56]	; 0x38
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003cae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003cb2:	615a      	str	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 8003cb4:	b160      	cbz	r0, 8003cd0 <HAL_UART_IRQHandler+0x1ec>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003cb6:	4b24      	ldr	r3, [pc, #144]	; (8003d48 <HAL_UART_IRQHandler+0x264>)
 8003cb8:	6343      	str	r3, [r0, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003cba:	f7fe fa41 	bl	8002140 <HAL_DMA_Abort_IT>
 8003cbe:	2800      	cmp	r0, #0
 8003cc0:	f43f af2c 	beq.w	8003b1c <HAL_UART_IRQHandler+0x38>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003cc4:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8003cc6:	6b43      	ldr	r3, [r0, #52]	; 0x34
}
 8003cc8:	b003      	add	sp, #12
 8003cca:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003cce:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 8003cd0:	4620      	mov	r0, r4
 8003cd2:	f7ff fe9f 	bl	8003a14 <HAL_UART_ErrorCallback>
 8003cd6:	e721      	b.n	8003b1c <HAL_UART_IRQHandler+0x38>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003cd8:	8de0      	ldrh	r0, [r4, #46]	; 0x2e
      if (  (huart->RxXferCount > 0U)
 8003cda:	8de1      	ldrh	r1, [r4, #46]	; 0x2e
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003cdc:	b280      	uxth	r0, r0
      if (  (huart->RxXferCount > 0U)
 8003cde:	b289      	uxth	r1, r1
 8003ce0:	2900      	cmp	r1, #0
 8003ce2:	f43f af1b 	beq.w	8003b1c <HAL_UART_IRQHandler+0x38>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003ce6:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 8003ce8:	1a08      	subs	r0, r1, r0
 8003cea:	b281      	uxth	r1, r0
          &&(nb_rx_data > 0U) )
 8003cec:	2900      	cmp	r1, #0
 8003cee:	f43f af15 	beq.w	8003b1c <HAL_UART_IRQHandler+0x38>
        huart->RxState = HAL_UART_STATE_READY;
 8003cf2:	2520      	movs	r5, #32
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003cf4:	68d8      	ldr	r0, [r3, #12]
 8003cf6:	f420 7090 	bic.w	r0, r0, #288	; 0x120
 8003cfa:	60d8      	str	r0, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003cfc:	6958      	ldr	r0, [r3, #20]
 8003cfe:	f020 0001 	bic.w	r0, r0, #1
 8003d02:	6158      	str	r0, [r3, #20]
        huart->RxState = HAL_UART_STATE_READY;
 8003d04:	f884 503e 	strb.w	r5, [r4, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d08:	6322      	str	r2, [r4, #48]	; 0x30
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d0a:	68da      	ldr	r2, [r3, #12]
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003d0c:	4620      	mov	r0, r4
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d0e:	f022 0210 	bic.w	r2, r2, #16
 8003d12:	60da      	str	r2, [r3, #12]
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003d14:	f7ff fe88 	bl	8003a28 <HAL_UARTEx_RxEventCallback>
 8003d18:	e700      	b.n	8003b1c <HAL_UART_IRQHandler+0x38>
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003d1a:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
 8003d1e:	2a22      	cmp	r2, #34	; 0x22
 8003d20:	f47f af66 	bne.w	8003bf0 <HAL_UART_IRQHandler+0x10c>
 8003d24:	4620      	mov	r0, r4
 8003d26:	f7ff fe81 	bl	8003a2c <UART_Receive_IT.part.0.isra.0>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003d2a:	6823      	ldr	r3, [r4, #0]
 8003d2c:	e760      	b.n	8003bf0 <HAL_UART_IRQHandler+0x10c>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d2e:	6922      	ldr	r2, [r4, #16]
 8003d30:	2a00      	cmp	r2, #0
 8003d32:	f47f af79 	bne.w	8003c28 <HAL_UART_IRQHandler+0x144>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003d36:	6a22      	ldr	r2, [r4, #32]
 8003d38:	f832 1b02 	ldrh.w	r1, [r2], #2
 8003d3c:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8003d40:	6059      	str	r1, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003d42:	6222      	str	r2, [r4, #32]
 8003d44:	e775      	b.n	8003c32 <HAL_UART_IRQHandler+0x14e>
 8003d46:	bf00      	nop
 8003d48:	08003a19 	.word	0x08003a19

08003d4c <__errno>:
 8003d4c:	4b01      	ldr	r3, [pc, #4]	; (8003d54 <__errno+0x8>)
 8003d4e:	6818      	ldr	r0, [r3, #0]
 8003d50:	4770      	bx	lr
 8003d52:	bf00      	nop
 8003d54:	2000001c 	.word	0x2000001c

08003d58 <__libc_init_array>:
 8003d58:	b570      	push	{r4, r5, r6, lr}
 8003d5a:	2600      	movs	r6, #0
 8003d5c:	4d0c      	ldr	r5, [pc, #48]	; (8003d90 <__libc_init_array+0x38>)
 8003d5e:	4c0d      	ldr	r4, [pc, #52]	; (8003d94 <__libc_init_array+0x3c>)
 8003d60:	1b64      	subs	r4, r4, r5
 8003d62:	10a4      	asrs	r4, r4, #2
 8003d64:	42a6      	cmp	r6, r4
 8003d66:	d109      	bne.n	8003d7c <__libc_init_array+0x24>
 8003d68:	f002 ff2a 	bl	8006bc0 <_init>
 8003d6c:	2600      	movs	r6, #0
 8003d6e:	4d0a      	ldr	r5, [pc, #40]	; (8003d98 <__libc_init_array+0x40>)
 8003d70:	4c0a      	ldr	r4, [pc, #40]	; (8003d9c <__libc_init_array+0x44>)
 8003d72:	1b64      	subs	r4, r4, r5
 8003d74:	10a4      	asrs	r4, r4, #2
 8003d76:	42a6      	cmp	r6, r4
 8003d78:	d105      	bne.n	8003d86 <__libc_init_array+0x2e>
 8003d7a:	bd70      	pop	{r4, r5, r6, pc}
 8003d7c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d80:	4798      	blx	r3
 8003d82:	3601      	adds	r6, #1
 8003d84:	e7ee      	b.n	8003d64 <__libc_init_array+0xc>
 8003d86:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d8a:	4798      	blx	r3
 8003d8c:	3601      	adds	r6, #1
 8003d8e:	e7f2      	b.n	8003d76 <__libc_init_array+0x1e>
 8003d90:	0800756c 	.word	0x0800756c
 8003d94:	0800756c 	.word	0x0800756c
 8003d98:	0800756c 	.word	0x0800756c
 8003d9c:	08007570 	.word	0x08007570

08003da0 <memcpy>:
 8003da0:	440a      	add	r2, r1
 8003da2:	4291      	cmp	r1, r2
 8003da4:	f100 33ff 	add.w	r3, r0, #4294967295
 8003da8:	d100      	bne.n	8003dac <memcpy+0xc>
 8003daa:	4770      	bx	lr
 8003dac:	b510      	push	{r4, lr}
 8003dae:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003db2:	4291      	cmp	r1, r2
 8003db4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003db8:	d1f9      	bne.n	8003dae <memcpy+0xe>
 8003dba:	bd10      	pop	{r4, pc}

08003dbc <memset>:
 8003dbc:	4603      	mov	r3, r0
 8003dbe:	4402      	add	r2, r0
 8003dc0:	4293      	cmp	r3, r2
 8003dc2:	d100      	bne.n	8003dc6 <memset+0xa>
 8003dc4:	4770      	bx	lr
 8003dc6:	f803 1b01 	strb.w	r1, [r3], #1
 8003dca:	e7f9      	b.n	8003dc0 <memset+0x4>

08003dcc <__cvt>:
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003dd2:	461f      	mov	r7, r3
 8003dd4:	bfbb      	ittet	lt
 8003dd6:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8003dda:	461f      	movlt	r7, r3
 8003ddc:	2300      	movge	r3, #0
 8003dde:	232d      	movlt	r3, #45	; 0x2d
 8003de0:	b088      	sub	sp, #32
 8003de2:	4614      	mov	r4, r2
 8003de4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8003de6:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8003de8:	7013      	strb	r3, [r2, #0]
 8003dea:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8003dec:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8003df0:	f023 0820 	bic.w	r8, r3, #32
 8003df4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003df8:	d005      	beq.n	8003e06 <__cvt+0x3a>
 8003dfa:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8003dfe:	d100      	bne.n	8003e02 <__cvt+0x36>
 8003e00:	3501      	adds	r5, #1
 8003e02:	2302      	movs	r3, #2
 8003e04:	e000      	b.n	8003e08 <__cvt+0x3c>
 8003e06:	2303      	movs	r3, #3
 8003e08:	aa07      	add	r2, sp, #28
 8003e0a:	9204      	str	r2, [sp, #16]
 8003e0c:	aa06      	add	r2, sp, #24
 8003e0e:	e9cd a202 	strd	sl, r2, [sp, #8]
 8003e12:	e9cd 3500 	strd	r3, r5, [sp]
 8003e16:	4622      	mov	r2, r4
 8003e18:	463b      	mov	r3, r7
 8003e1a:	f000 fd11 	bl	8004840 <_dtoa_r>
 8003e1e:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8003e22:	4606      	mov	r6, r0
 8003e24:	d102      	bne.n	8003e2c <__cvt+0x60>
 8003e26:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003e28:	07db      	lsls	r3, r3, #31
 8003e2a:	d522      	bpl.n	8003e72 <__cvt+0xa6>
 8003e2c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003e30:	eb06 0905 	add.w	r9, r6, r5
 8003e34:	d110      	bne.n	8003e58 <__cvt+0x8c>
 8003e36:	7833      	ldrb	r3, [r6, #0]
 8003e38:	2b30      	cmp	r3, #48	; 0x30
 8003e3a:	d10a      	bne.n	8003e52 <__cvt+0x86>
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	2300      	movs	r3, #0
 8003e40:	4620      	mov	r0, r4
 8003e42:	4639      	mov	r1, r7
 8003e44:	f7fc fdb0 	bl	80009a8 <__aeabi_dcmpeq>
 8003e48:	b918      	cbnz	r0, 8003e52 <__cvt+0x86>
 8003e4a:	f1c5 0501 	rsb	r5, r5, #1
 8003e4e:	f8ca 5000 	str.w	r5, [sl]
 8003e52:	f8da 3000 	ldr.w	r3, [sl]
 8003e56:	4499      	add	r9, r3
 8003e58:	2200      	movs	r2, #0
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	4620      	mov	r0, r4
 8003e5e:	4639      	mov	r1, r7
 8003e60:	f7fc fda2 	bl	80009a8 <__aeabi_dcmpeq>
 8003e64:	b108      	cbz	r0, 8003e6a <__cvt+0x9e>
 8003e66:	f8cd 901c 	str.w	r9, [sp, #28]
 8003e6a:	2230      	movs	r2, #48	; 0x30
 8003e6c:	9b07      	ldr	r3, [sp, #28]
 8003e6e:	454b      	cmp	r3, r9
 8003e70:	d307      	bcc.n	8003e82 <__cvt+0xb6>
 8003e72:	4630      	mov	r0, r6
 8003e74:	9b07      	ldr	r3, [sp, #28]
 8003e76:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8003e78:	1b9b      	subs	r3, r3, r6
 8003e7a:	6013      	str	r3, [r2, #0]
 8003e7c:	b008      	add	sp, #32
 8003e7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e82:	1c59      	adds	r1, r3, #1
 8003e84:	9107      	str	r1, [sp, #28]
 8003e86:	701a      	strb	r2, [r3, #0]
 8003e88:	e7f0      	b.n	8003e6c <__cvt+0xa0>

08003e8a <__exponent>:
 8003e8a:	4603      	mov	r3, r0
 8003e8c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003e8e:	2900      	cmp	r1, #0
 8003e90:	f803 2b02 	strb.w	r2, [r3], #2
 8003e94:	bfb6      	itet	lt
 8003e96:	222d      	movlt	r2, #45	; 0x2d
 8003e98:	222b      	movge	r2, #43	; 0x2b
 8003e9a:	4249      	neglt	r1, r1
 8003e9c:	2909      	cmp	r1, #9
 8003e9e:	7042      	strb	r2, [r0, #1]
 8003ea0:	dd2b      	ble.n	8003efa <__exponent+0x70>
 8003ea2:	f10d 0407 	add.w	r4, sp, #7
 8003ea6:	46a4      	mov	ip, r4
 8003ea8:	270a      	movs	r7, #10
 8003eaa:	fb91 f6f7 	sdiv	r6, r1, r7
 8003eae:	460a      	mov	r2, r1
 8003eb0:	46a6      	mov	lr, r4
 8003eb2:	fb07 1516 	mls	r5, r7, r6, r1
 8003eb6:	2a63      	cmp	r2, #99	; 0x63
 8003eb8:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8003ebc:	4631      	mov	r1, r6
 8003ebe:	f104 34ff 	add.w	r4, r4, #4294967295
 8003ec2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8003ec6:	dcf0      	bgt.n	8003eaa <__exponent+0x20>
 8003ec8:	3130      	adds	r1, #48	; 0x30
 8003eca:	f1ae 0502 	sub.w	r5, lr, #2
 8003ece:	f804 1c01 	strb.w	r1, [r4, #-1]
 8003ed2:	4629      	mov	r1, r5
 8003ed4:	1c44      	adds	r4, r0, #1
 8003ed6:	4561      	cmp	r1, ip
 8003ed8:	d30a      	bcc.n	8003ef0 <__exponent+0x66>
 8003eda:	f10d 0209 	add.w	r2, sp, #9
 8003ede:	eba2 020e 	sub.w	r2, r2, lr
 8003ee2:	4565      	cmp	r5, ip
 8003ee4:	bf88      	it	hi
 8003ee6:	2200      	movhi	r2, #0
 8003ee8:	4413      	add	r3, r2
 8003eea:	1a18      	subs	r0, r3, r0
 8003eec:	b003      	add	sp, #12
 8003eee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003ef0:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003ef4:	f804 2f01 	strb.w	r2, [r4, #1]!
 8003ef8:	e7ed      	b.n	8003ed6 <__exponent+0x4c>
 8003efa:	2330      	movs	r3, #48	; 0x30
 8003efc:	3130      	adds	r1, #48	; 0x30
 8003efe:	7083      	strb	r3, [r0, #2]
 8003f00:	70c1      	strb	r1, [r0, #3]
 8003f02:	1d03      	adds	r3, r0, #4
 8003f04:	e7f1      	b.n	8003eea <__exponent+0x60>
	...

08003f08 <_printf_float>:
 8003f08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f0c:	b091      	sub	sp, #68	; 0x44
 8003f0e:	460c      	mov	r4, r1
 8003f10:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8003f14:	4616      	mov	r6, r2
 8003f16:	461f      	mov	r7, r3
 8003f18:	4605      	mov	r5, r0
 8003f1a:	f001 fb75 	bl	8005608 <_localeconv_r>
 8003f1e:	6803      	ldr	r3, [r0, #0]
 8003f20:	4618      	mov	r0, r3
 8003f22:	9309      	str	r3, [sp, #36]	; 0x24
 8003f24:	f7fc f914 	bl	8000150 <strlen>
 8003f28:	2300      	movs	r3, #0
 8003f2a:	930e      	str	r3, [sp, #56]	; 0x38
 8003f2c:	f8d8 3000 	ldr.w	r3, [r8]
 8003f30:	900a      	str	r0, [sp, #40]	; 0x28
 8003f32:	3307      	adds	r3, #7
 8003f34:	f023 0307 	bic.w	r3, r3, #7
 8003f38:	f103 0208 	add.w	r2, r3, #8
 8003f3c:	f894 9018 	ldrb.w	r9, [r4, #24]
 8003f40:	f8d4 b000 	ldr.w	fp, [r4]
 8003f44:	f8c8 2000 	str.w	r2, [r8]
 8003f48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f4c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8003f50:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8003f54:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8003f58:	930b      	str	r3, [sp, #44]	; 0x2c
 8003f5a:	f04f 32ff 	mov.w	r2, #4294967295
 8003f5e:	4640      	mov	r0, r8
 8003f60:	4b9c      	ldr	r3, [pc, #624]	; (80041d4 <_printf_float+0x2cc>)
 8003f62:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003f64:	f7fc fd52 	bl	8000a0c <__aeabi_dcmpun>
 8003f68:	bb70      	cbnz	r0, 8003fc8 <_printf_float+0xc0>
 8003f6a:	f04f 32ff 	mov.w	r2, #4294967295
 8003f6e:	4640      	mov	r0, r8
 8003f70:	4b98      	ldr	r3, [pc, #608]	; (80041d4 <_printf_float+0x2cc>)
 8003f72:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003f74:	f7fc fd2c 	bl	80009d0 <__aeabi_dcmple>
 8003f78:	bb30      	cbnz	r0, 8003fc8 <_printf_float+0xc0>
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	2300      	movs	r3, #0
 8003f7e:	4640      	mov	r0, r8
 8003f80:	4651      	mov	r1, sl
 8003f82:	f7fc fd1b 	bl	80009bc <__aeabi_dcmplt>
 8003f86:	b110      	cbz	r0, 8003f8e <_printf_float+0x86>
 8003f88:	232d      	movs	r3, #45	; 0x2d
 8003f8a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003f8e:	4b92      	ldr	r3, [pc, #584]	; (80041d8 <_printf_float+0x2d0>)
 8003f90:	4892      	ldr	r0, [pc, #584]	; (80041dc <_printf_float+0x2d4>)
 8003f92:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8003f96:	bf94      	ite	ls
 8003f98:	4698      	movls	r8, r3
 8003f9a:	4680      	movhi	r8, r0
 8003f9c:	2303      	movs	r3, #3
 8003f9e:	f04f 0a00 	mov.w	sl, #0
 8003fa2:	6123      	str	r3, [r4, #16]
 8003fa4:	f02b 0304 	bic.w	r3, fp, #4
 8003fa8:	6023      	str	r3, [r4, #0]
 8003faa:	4633      	mov	r3, r6
 8003fac:	4621      	mov	r1, r4
 8003fae:	4628      	mov	r0, r5
 8003fb0:	9700      	str	r7, [sp, #0]
 8003fb2:	aa0f      	add	r2, sp, #60	; 0x3c
 8003fb4:	f000 f9d4 	bl	8004360 <_printf_common>
 8003fb8:	3001      	adds	r0, #1
 8003fba:	f040 8090 	bne.w	80040de <_printf_float+0x1d6>
 8003fbe:	f04f 30ff 	mov.w	r0, #4294967295
 8003fc2:	b011      	add	sp, #68	; 0x44
 8003fc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003fc8:	4642      	mov	r2, r8
 8003fca:	4653      	mov	r3, sl
 8003fcc:	4640      	mov	r0, r8
 8003fce:	4651      	mov	r1, sl
 8003fd0:	f7fc fd1c 	bl	8000a0c <__aeabi_dcmpun>
 8003fd4:	b148      	cbz	r0, 8003fea <_printf_float+0xe2>
 8003fd6:	f1ba 0f00 	cmp.w	sl, #0
 8003fda:	bfb8      	it	lt
 8003fdc:	232d      	movlt	r3, #45	; 0x2d
 8003fde:	4880      	ldr	r0, [pc, #512]	; (80041e0 <_printf_float+0x2d8>)
 8003fe0:	bfb8      	it	lt
 8003fe2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8003fe6:	4b7f      	ldr	r3, [pc, #508]	; (80041e4 <_printf_float+0x2dc>)
 8003fe8:	e7d3      	b.n	8003f92 <_printf_float+0x8a>
 8003fea:	6863      	ldr	r3, [r4, #4]
 8003fec:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8003ff0:	1c5a      	adds	r2, r3, #1
 8003ff2:	d142      	bne.n	800407a <_printf_float+0x172>
 8003ff4:	2306      	movs	r3, #6
 8003ff6:	6063      	str	r3, [r4, #4]
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	9206      	str	r2, [sp, #24]
 8003ffc:	aa0e      	add	r2, sp, #56	; 0x38
 8003ffe:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8004002:	aa0d      	add	r2, sp, #52	; 0x34
 8004004:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8004008:	9203      	str	r2, [sp, #12]
 800400a:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800400e:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8004012:	6023      	str	r3, [r4, #0]
 8004014:	6863      	ldr	r3, [r4, #4]
 8004016:	4642      	mov	r2, r8
 8004018:	9300      	str	r3, [sp, #0]
 800401a:	4628      	mov	r0, r5
 800401c:	4653      	mov	r3, sl
 800401e:	910b      	str	r1, [sp, #44]	; 0x2c
 8004020:	f7ff fed4 	bl	8003dcc <__cvt>
 8004024:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004026:	4680      	mov	r8, r0
 8004028:	2947      	cmp	r1, #71	; 0x47
 800402a:	990d      	ldr	r1, [sp, #52]	; 0x34
 800402c:	d108      	bne.n	8004040 <_printf_float+0x138>
 800402e:	1cc8      	adds	r0, r1, #3
 8004030:	db02      	blt.n	8004038 <_printf_float+0x130>
 8004032:	6863      	ldr	r3, [r4, #4]
 8004034:	4299      	cmp	r1, r3
 8004036:	dd40      	ble.n	80040ba <_printf_float+0x1b2>
 8004038:	f1a9 0902 	sub.w	r9, r9, #2
 800403c:	fa5f f989 	uxtb.w	r9, r9
 8004040:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004044:	d81f      	bhi.n	8004086 <_printf_float+0x17e>
 8004046:	464a      	mov	r2, r9
 8004048:	3901      	subs	r1, #1
 800404a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800404e:	910d      	str	r1, [sp, #52]	; 0x34
 8004050:	f7ff ff1b 	bl	8003e8a <__exponent>
 8004054:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004056:	4682      	mov	sl, r0
 8004058:	1813      	adds	r3, r2, r0
 800405a:	2a01      	cmp	r2, #1
 800405c:	6123      	str	r3, [r4, #16]
 800405e:	dc02      	bgt.n	8004066 <_printf_float+0x15e>
 8004060:	6822      	ldr	r2, [r4, #0]
 8004062:	07d2      	lsls	r2, r2, #31
 8004064:	d501      	bpl.n	800406a <_printf_float+0x162>
 8004066:	3301      	adds	r3, #1
 8004068:	6123      	str	r3, [r4, #16]
 800406a:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800406e:	2b00      	cmp	r3, #0
 8004070:	d09b      	beq.n	8003faa <_printf_float+0xa2>
 8004072:	232d      	movs	r3, #45	; 0x2d
 8004074:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004078:	e797      	b.n	8003faa <_printf_float+0xa2>
 800407a:	2947      	cmp	r1, #71	; 0x47
 800407c:	d1bc      	bne.n	8003ff8 <_printf_float+0xf0>
 800407e:	2b00      	cmp	r3, #0
 8004080:	d1ba      	bne.n	8003ff8 <_printf_float+0xf0>
 8004082:	2301      	movs	r3, #1
 8004084:	e7b7      	b.n	8003ff6 <_printf_float+0xee>
 8004086:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800408a:	d118      	bne.n	80040be <_printf_float+0x1b6>
 800408c:	2900      	cmp	r1, #0
 800408e:	6863      	ldr	r3, [r4, #4]
 8004090:	dd0b      	ble.n	80040aa <_printf_float+0x1a2>
 8004092:	6121      	str	r1, [r4, #16]
 8004094:	b913      	cbnz	r3, 800409c <_printf_float+0x194>
 8004096:	6822      	ldr	r2, [r4, #0]
 8004098:	07d0      	lsls	r0, r2, #31
 800409a:	d502      	bpl.n	80040a2 <_printf_float+0x19a>
 800409c:	3301      	adds	r3, #1
 800409e:	440b      	add	r3, r1
 80040a0:	6123      	str	r3, [r4, #16]
 80040a2:	f04f 0a00 	mov.w	sl, #0
 80040a6:	65a1      	str	r1, [r4, #88]	; 0x58
 80040a8:	e7df      	b.n	800406a <_printf_float+0x162>
 80040aa:	b913      	cbnz	r3, 80040b2 <_printf_float+0x1aa>
 80040ac:	6822      	ldr	r2, [r4, #0]
 80040ae:	07d2      	lsls	r2, r2, #31
 80040b0:	d501      	bpl.n	80040b6 <_printf_float+0x1ae>
 80040b2:	3302      	adds	r3, #2
 80040b4:	e7f4      	b.n	80040a0 <_printf_float+0x198>
 80040b6:	2301      	movs	r3, #1
 80040b8:	e7f2      	b.n	80040a0 <_printf_float+0x198>
 80040ba:	f04f 0967 	mov.w	r9, #103	; 0x67
 80040be:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80040c0:	4299      	cmp	r1, r3
 80040c2:	db05      	blt.n	80040d0 <_printf_float+0x1c8>
 80040c4:	6823      	ldr	r3, [r4, #0]
 80040c6:	6121      	str	r1, [r4, #16]
 80040c8:	07d8      	lsls	r0, r3, #31
 80040ca:	d5ea      	bpl.n	80040a2 <_printf_float+0x19a>
 80040cc:	1c4b      	adds	r3, r1, #1
 80040ce:	e7e7      	b.n	80040a0 <_printf_float+0x198>
 80040d0:	2900      	cmp	r1, #0
 80040d2:	bfcc      	ite	gt
 80040d4:	2201      	movgt	r2, #1
 80040d6:	f1c1 0202 	rsble	r2, r1, #2
 80040da:	4413      	add	r3, r2
 80040dc:	e7e0      	b.n	80040a0 <_printf_float+0x198>
 80040de:	6823      	ldr	r3, [r4, #0]
 80040e0:	055a      	lsls	r2, r3, #21
 80040e2:	d407      	bmi.n	80040f4 <_printf_float+0x1ec>
 80040e4:	6923      	ldr	r3, [r4, #16]
 80040e6:	4642      	mov	r2, r8
 80040e8:	4631      	mov	r1, r6
 80040ea:	4628      	mov	r0, r5
 80040ec:	47b8      	blx	r7
 80040ee:	3001      	adds	r0, #1
 80040f0:	d12b      	bne.n	800414a <_printf_float+0x242>
 80040f2:	e764      	b.n	8003fbe <_printf_float+0xb6>
 80040f4:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80040f8:	f240 80dd 	bls.w	80042b6 <_printf_float+0x3ae>
 80040fc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004100:	2200      	movs	r2, #0
 8004102:	2300      	movs	r3, #0
 8004104:	f7fc fc50 	bl	80009a8 <__aeabi_dcmpeq>
 8004108:	2800      	cmp	r0, #0
 800410a:	d033      	beq.n	8004174 <_printf_float+0x26c>
 800410c:	2301      	movs	r3, #1
 800410e:	4631      	mov	r1, r6
 8004110:	4628      	mov	r0, r5
 8004112:	4a35      	ldr	r2, [pc, #212]	; (80041e8 <_printf_float+0x2e0>)
 8004114:	47b8      	blx	r7
 8004116:	3001      	adds	r0, #1
 8004118:	f43f af51 	beq.w	8003fbe <_printf_float+0xb6>
 800411c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004120:	429a      	cmp	r2, r3
 8004122:	db02      	blt.n	800412a <_printf_float+0x222>
 8004124:	6823      	ldr	r3, [r4, #0]
 8004126:	07d8      	lsls	r0, r3, #31
 8004128:	d50f      	bpl.n	800414a <_printf_float+0x242>
 800412a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800412e:	4631      	mov	r1, r6
 8004130:	4628      	mov	r0, r5
 8004132:	47b8      	blx	r7
 8004134:	3001      	adds	r0, #1
 8004136:	f43f af42 	beq.w	8003fbe <_printf_float+0xb6>
 800413a:	f04f 0800 	mov.w	r8, #0
 800413e:	f104 091a 	add.w	r9, r4, #26
 8004142:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004144:	3b01      	subs	r3, #1
 8004146:	4543      	cmp	r3, r8
 8004148:	dc09      	bgt.n	800415e <_printf_float+0x256>
 800414a:	6823      	ldr	r3, [r4, #0]
 800414c:	079b      	lsls	r3, r3, #30
 800414e:	f100 8102 	bmi.w	8004356 <_printf_float+0x44e>
 8004152:	68e0      	ldr	r0, [r4, #12]
 8004154:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004156:	4298      	cmp	r0, r3
 8004158:	bfb8      	it	lt
 800415a:	4618      	movlt	r0, r3
 800415c:	e731      	b.n	8003fc2 <_printf_float+0xba>
 800415e:	2301      	movs	r3, #1
 8004160:	464a      	mov	r2, r9
 8004162:	4631      	mov	r1, r6
 8004164:	4628      	mov	r0, r5
 8004166:	47b8      	blx	r7
 8004168:	3001      	adds	r0, #1
 800416a:	f43f af28 	beq.w	8003fbe <_printf_float+0xb6>
 800416e:	f108 0801 	add.w	r8, r8, #1
 8004172:	e7e6      	b.n	8004142 <_printf_float+0x23a>
 8004174:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004176:	2b00      	cmp	r3, #0
 8004178:	dc38      	bgt.n	80041ec <_printf_float+0x2e4>
 800417a:	2301      	movs	r3, #1
 800417c:	4631      	mov	r1, r6
 800417e:	4628      	mov	r0, r5
 8004180:	4a19      	ldr	r2, [pc, #100]	; (80041e8 <_printf_float+0x2e0>)
 8004182:	47b8      	blx	r7
 8004184:	3001      	adds	r0, #1
 8004186:	f43f af1a 	beq.w	8003fbe <_printf_float+0xb6>
 800418a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800418e:	4313      	orrs	r3, r2
 8004190:	d102      	bne.n	8004198 <_printf_float+0x290>
 8004192:	6823      	ldr	r3, [r4, #0]
 8004194:	07d9      	lsls	r1, r3, #31
 8004196:	d5d8      	bpl.n	800414a <_printf_float+0x242>
 8004198:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800419c:	4631      	mov	r1, r6
 800419e:	4628      	mov	r0, r5
 80041a0:	47b8      	blx	r7
 80041a2:	3001      	adds	r0, #1
 80041a4:	f43f af0b 	beq.w	8003fbe <_printf_float+0xb6>
 80041a8:	f04f 0900 	mov.w	r9, #0
 80041ac:	f104 0a1a 	add.w	sl, r4, #26
 80041b0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80041b2:	425b      	negs	r3, r3
 80041b4:	454b      	cmp	r3, r9
 80041b6:	dc01      	bgt.n	80041bc <_printf_float+0x2b4>
 80041b8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80041ba:	e794      	b.n	80040e6 <_printf_float+0x1de>
 80041bc:	2301      	movs	r3, #1
 80041be:	4652      	mov	r2, sl
 80041c0:	4631      	mov	r1, r6
 80041c2:	4628      	mov	r0, r5
 80041c4:	47b8      	blx	r7
 80041c6:	3001      	adds	r0, #1
 80041c8:	f43f aef9 	beq.w	8003fbe <_printf_float+0xb6>
 80041cc:	f109 0901 	add.w	r9, r9, #1
 80041d0:	e7ee      	b.n	80041b0 <_printf_float+0x2a8>
 80041d2:	bf00      	nop
 80041d4:	7fefffff 	.word	0x7fefffff
 80041d8:	08007194 	.word	0x08007194
 80041dc:	08007198 	.word	0x08007198
 80041e0:	080071a0 	.word	0x080071a0
 80041e4:	0800719c 	.word	0x0800719c
 80041e8:	080071a4 	.word	0x080071a4
 80041ec:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80041ee:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80041f0:	429a      	cmp	r2, r3
 80041f2:	bfa8      	it	ge
 80041f4:	461a      	movge	r2, r3
 80041f6:	2a00      	cmp	r2, #0
 80041f8:	4691      	mov	r9, r2
 80041fa:	dc37      	bgt.n	800426c <_printf_float+0x364>
 80041fc:	f04f 0b00 	mov.w	fp, #0
 8004200:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004204:	f104 021a 	add.w	r2, r4, #26
 8004208:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800420c:	ebaa 0309 	sub.w	r3, sl, r9
 8004210:	455b      	cmp	r3, fp
 8004212:	dc33      	bgt.n	800427c <_printf_float+0x374>
 8004214:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004218:	429a      	cmp	r2, r3
 800421a:	db3b      	blt.n	8004294 <_printf_float+0x38c>
 800421c:	6823      	ldr	r3, [r4, #0]
 800421e:	07da      	lsls	r2, r3, #31
 8004220:	d438      	bmi.n	8004294 <_printf_float+0x38c>
 8004222:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004224:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004226:	eba3 020a 	sub.w	r2, r3, sl
 800422a:	eba3 0901 	sub.w	r9, r3, r1
 800422e:	4591      	cmp	r9, r2
 8004230:	bfa8      	it	ge
 8004232:	4691      	movge	r9, r2
 8004234:	f1b9 0f00 	cmp.w	r9, #0
 8004238:	dc34      	bgt.n	80042a4 <_printf_float+0x39c>
 800423a:	f04f 0800 	mov.w	r8, #0
 800423e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004242:	f104 0a1a 	add.w	sl, r4, #26
 8004246:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800424a:	1a9b      	subs	r3, r3, r2
 800424c:	eba3 0309 	sub.w	r3, r3, r9
 8004250:	4543      	cmp	r3, r8
 8004252:	f77f af7a 	ble.w	800414a <_printf_float+0x242>
 8004256:	2301      	movs	r3, #1
 8004258:	4652      	mov	r2, sl
 800425a:	4631      	mov	r1, r6
 800425c:	4628      	mov	r0, r5
 800425e:	47b8      	blx	r7
 8004260:	3001      	adds	r0, #1
 8004262:	f43f aeac 	beq.w	8003fbe <_printf_float+0xb6>
 8004266:	f108 0801 	add.w	r8, r8, #1
 800426a:	e7ec      	b.n	8004246 <_printf_float+0x33e>
 800426c:	4613      	mov	r3, r2
 800426e:	4631      	mov	r1, r6
 8004270:	4642      	mov	r2, r8
 8004272:	4628      	mov	r0, r5
 8004274:	47b8      	blx	r7
 8004276:	3001      	adds	r0, #1
 8004278:	d1c0      	bne.n	80041fc <_printf_float+0x2f4>
 800427a:	e6a0      	b.n	8003fbe <_printf_float+0xb6>
 800427c:	2301      	movs	r3, #1
 800427e:	4631      	mov	r1, r6
 8004280:	4628      	mov	r0, r5
 8004282:	920b      	str	r2, [sp, #44]	; 0x2c
 8004284:	47b8      	blx	r7
 8004286:	3001      	adds	r0, #1
 8004288:	f43f ae99 	beq.w	8003fbe <_printf_float+0xb6>
 800428c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800428e:	f10b 0b01 	add.w	fp, fp, #1
 8004292:	e7b9      	b.n	8004208 <_printf_float+0x300>
 8004294:	4631      	mov	r1, r6
 8004296:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800429a:	4628      	mov	r0, r5
 800429c:	47b8      	blx	r7
 800429e:	3001      	adds	r0, #1
 80042a0:	d1bf      	bne.n	8004222 <_printf_float+0x31a>
 80042a2:	e68c      	b.n	8003fbe <_printf_float+0xb6>
 80042a4:	464b      	mov	r3, r9
 80042a6:	4631      	mov	r1, r6
 80042a8:	4628      	mov	r0, r5
 80042aa:	eb08 020a 	add.w	r2, r8, sl
 80042ae:	47b8      	blx	r7
 80042b0:	3001      	adds	r0, #1
 80042b2:	d1c2      	bne.n	800423a <_printf_float+0x332>
 80042b4:	e683      	b.n	8003fbe <_printf_float+0xb6>
 80042b6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80042b8:	2a01      	cmp	r2, #1
 80042ba:	dc01      	bgt.n	80042c0 <_printf_float+0x3b8>
 80042bc:	07db      	lsls	r3, r3, #31
 80042be:	d537      	bpl.n	8004330 <_printf_float+0x428>
 80042c0:	2301      	movs	r3, #1
 80042c2:	4642      	mov	r2, r8
 80042c4:	4631      	mov	r1, r6
 80042c6:	4628      	mov	r0, r5
 80042c8:	47b8      	blx	r7
 80042ca:	3001      	adds	r0, #1
 80042cc:	f43f ae77 	beq.w	8003fbe <_printf_float+0xb6>
 80042d0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80042d4:	4631      	mov	r1, r6
 80042d6:	4628      	mov	r0, r5
 80042d8:	47b8      	blx	r7
 80042da:	3001      	adds	r0, #1
 80042dc:	f43f ae6f 	beq.w	8003fbe <_printf_float+0xb6>
 80042e0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80042e4:	2200      	movs	r2, #0
 80042e6:	2300      	movs	r3, #0
 80042e8:	f7fc fb5e 	bl	80009a8 <__aeabi_dcmpeq>
 80042ec:	b9d8      	cbnz	r0, 8004326 <_printf_float+0x41e>
 80042ee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80042f0:	f108 0201 	add.w	r2, r8, #1
 80042f4:	3b01      	subs	r3, #1
 80042f6:	4631      	mov	r1, r6
 80042f8:	4628      	mov	r0, r5
 80042fa:	47b8      	blx	r7
 80042fc:	3001      	adds	r0, #1
 80042fe:	d10e      	bne.n	800431e <_printf_float+0x416>
 8004300:	e65d      	b.n	8003fbe <_printf_float+0xb6>
 8004302:	2301      	movs	r3, #1
 8004304:	464a      	mov	r2, r9
 8004306:	4631      	mov	r1, r6
 8004308:	4628      	mov	r0, r5
 800430a:	47b8      	blx	r7
 800430c:	3001      	adds	r0, #1
 800430e:	f43f ae56 	beq.w	8003fbe <_printf_float+0xb6>
 8004312:	f108 0801 	add.w	r8, r8, #1
 8004316:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004318:	3b01      	subs	r3, #1
 800431a:	4543      	cmp	r3, r8
 800431c:	dcf1      	bgt.n	8004302 <_printf_float+0x3fa>
 800431e:	4653      	mov	r3, sl
 8004320:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004324:	e6e0      	b.n	80040e8 <_printf_float+0x1e0>
 8004326:	f04f 0800 	mov.w	r8, #0
 800432a:	f104 091a 	add.w	r9, r4, #26
 800432e:	e7f2      	b.n	8004316 <_printf_float+0x40e>
 8004330:	2301      	movs	r3, #1
 8004332:	4642      	mov	r2, r8
 8004334:	e7df      	b.n	80042f6 <_printf_float+0x3ee>
 8004336:	2301      	movs	r3, #1
 8004338:	464a      	mov	r2, r9
 800433a:	4631      	mov	r1, r6
 800433c:	4628      	mov	r0, r5
 800433e:	47b8      	blx	r7
 8004340:	3001      	adds	r0, #1
 8004342:	f43f ae3c 	beq.w	8003fbe <_printf_float+0xb6>
 8004346:	f108 0801 	add.w	r8, r8, #1
 800434a:	68e3      	ldr	r3, [r4, #12]
 800434c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800434e:	1a5b      	subs	r3, r3, r1
 8004350:	4543      	cmp	r3, r8
 8004352:	dcf0      	bgt.n	8004336 <_printf_float+0x42e>
 8004354:	e6fd      	b.n	8004152 <_printf_float+0x24a>
 8004356:	f04f 0800 	mov.w	r8, #0
 800435a:	f104 0919 	add.w	r9, r4, #25
 800435e:	e7f4      	b.n	800434a <_printf_float+0x442>

08004360 <_printf_common>:
 8004360:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004364:	4616      	mov	r6, r2
 8004366:	4699      	mov	r9, r3
 8004368:	688a      	ldr	r2, [r1, #8]
 800436a:	690b      	ldr	r3, [r1, #16]
 800436c:	4607      	mov	r7, r0
 800436e:	4293      	cmp	r3, r2
 8004370:	bfb8      	it	lt
 8004372:	4613      	movlt	r3, r2
 8004374:	6033      	str	r3, [r6, #0]
 8004376:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800437a:	460c      	mov	r4, r1
 800437c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004380:	b10a      	cbz	r2, 8004386 <_printf_common+0x26>
 8004382:	3301      	adds	r3, #1
 8004384:	6033      	str	r3, [r6, #0]
 8004386:	6823      	ldr	r3, [r4, #0]
 8004388:	0699      	lsls	r1, r3, #26
 800438a:	bf42      	ittt	mi
 800438c:	6833      	ldrmi	r3, [r6, #0]
 800438e:	3302      	addmi	r3, #2
 8004390:	6033      	strmi	r3, [r6, #0]
 8004392:	6825      	ldr	r5, [r4, #0]
 8004394:	f015 0506 	ands.w	r5, r5, #6
 8004398:	d106      	bne.n	80043a8 <_printf_common+0x48>
 800439a:	f104 0a19 	add.w	sl, r4, #25
 800439e:	68e3      	ldr	r3, [r4, #12]
 80043a0:	6832      	ldr	r2, [r6, #0]
 80043a2:	1a9b      	subs	r3, r3, r2
 80043a4:	42ab      	cmp	r3, r5
 80043a6:	dc28      	bgt.n	80043fa <_printf_common+0x9a>
 80043a8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80043ac:	1e13      	subs	r3, r2, #0
 80043ae:	6822      	ldr	r2, [r4, #0]
 80043b0:	bf18      	it	ne
 80043b2:	2301      	movne	r3, #1
 80043b4:	0692      	lsls	r2, r2, #26
 80043b6:	d42d      	bmi.n	8004414 <_printf_common+0xb4>
 80043b8:	4649      	mov	r1, r9
 80043ba:	4638      	mov	r0, r7
 80043bc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80043c0:	47c0      	blx	r8
 80043c2:	3001      	adds	r0, #1
 80043c4:	d020      	beq.n	8004408 <_printf_common+0xa8>
 80043c6:	6823      	ldr	r3, [r4, #0]
 80043c8:	68e5      	ldr	r5, [r4, #12]
 80043ca:	f003 0306 	and.w	r3, r3, #6
 80043ce:	2b04      	cmp	r3, #4
 80043d0:	bf18      	it	ne
 80043d2:	2500      	movne	r5, #0
 80043d4:	6832      	ldr	r2, [r6, #0]
 80043d6:	f04f 0600 	mov.w	r6, #0
 80043da:	68a3      	ldr	r3, [r4, #8]
 80043dc:	bf08      	it	eq
 80043de:	1aad      	subeq	r5, r5, r2
 80043e0:	6922      	ldr	r2, [r4, #16]
 80043e2:	bf08      	it	eq
 80043e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80043e8:	4293      	cmp	r3, r2
 80043ea:	bfc4      	itt	gt
 80043ec:	1a9b      	subgt	r3, r3, r2
 80043ee:	18ed      	addgt	r5, r5, r3
 80043f0:	341a      	adds	r4, #26
 80043f2:	42b5      	cmp	r5, r6
 80043f4:	d11a      	bne.n	800442c <_printf_common+0xcc>
 80043f6:	2000      	movs	r0, #0
 80043f8:	e008      	b.n	800440c <_printf_common+0xac>
 80043fa:	2301      	movs	r3, #1
 80043fc:	4652      	mov	r2, sl
 80043fe:	4649      	mov	r1, r9
 8004400:	4638      	mov	r0, r7
 8004402:	47c0      	blx	r8
 8004404:	3001      	adds	r0, #1
 8004406:	d103      	bne.n	8004410 <_printf_common+0xb0>
 8004408:	f04f 30ff 	mov.w	r0, #4294967295
 800440c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004410:	3501      	adds	r5, #1
 8004412:	e7c4      	b.n	800439e <_printf_common+0x3e>
 8004414:	2030      	movs	r0, #48	; 0x30
 8004416:	18e1      	adds	r1, r4, r3
 8004418:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800441c:	1c5a      	adds	r2, r3, #1
 800441e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004422:	4422      	add	r2, r4
 8004424:	3302      	adds	r3, #2
 8004426:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800442a:	e7c5      	b.n	80043b8 <_printf_common+0x58>
 800442c:	2301      	movs	r3, #1
 800442e:	4622      	mov	r2, r4
 8004430:	4649      	mov	r1, r9
 8004432:	4638      	mov	r0, r7
 8004434:	47c0      	blx	r8
 8004436:	3001      	adds	r0, #1
 8004438:	d0e6      	beq.n	8004408 <_printf_common+0xa8>
 800443a:	3601      	adds	r6, #1
 800443c:	e7d9      	b.n	80043f2 <_printf_common+0x92>
	...

08004440 <_printf_i>:
 8004440:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004444:	7e0f      	ldrb	r7, [r1, #24]
 8004446:	4691      	mov	r9, r2
 8004448:	2f78      	cmp	r7, #120	; 0x78
 800444a:	4680      	mov	r8, r0
 800444c:	460c      	mov	r4, r1
 800444e:	469a      	mov	sl, r3
 8004450:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004452:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004456:	d807      	bhi.n	8004468 <_printf_i+0x28>
 8004458:	2f62      	cmp	r7, #98	; 0x62
 800445a:	d80a      	bhi.n	8004472 <_printf_i+0x32>
 800445c:	2f00      	cmp	r7, #0
 800445e:	f000 80d9 	beq.w	8004614 <_printf_i+0x1d4>
 8004462:	2f58      	cmp	r7, #88	; 0x58
 8004464:	f000 80a4 	beq.w	80045b0 <_printf_i+0x170>
 8004468:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800446c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004470:	e03a      	b.n	80044e8 <_printf_i+0xa8>
 8004472:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004476:	2b15      	cmp	r3, #21
 8004478:	d8f6      	bhi.n	8004468 <_printf_i+0x28>
 800447a:	a101      	add	r1, pc, #4	; (adr r1, 8004480 <_printf_i+0x40>)
 800447c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004480:	080044d9 	.word	0x080044d9
 8004484:	080044ed 	.word	0x080044ed
 8004488:	08004469 	.word	0x08004469
 800448c:	08004469 	.word	0x08004469
 8004490:	08004469 	.word	0x08004469
 8004494:	08004469 	.word	0x08004469
 8004498:	080044ed 	.word	0x080044ed
 800449c:	08004469 	.word	0x08004469
 80044a0:	08004469 	.word	0x08004469
 80044a4:	08004469 	.word	0x08004469
 80044a8:	08004469 	.word	0x08004469
 80044ac:	080045fb 	.word	0x080045fb
 80044b0:	0800451d 	.word	0x0800451d
 80044b4:	080045dd 	.word	0x080045dd
 80044b8:	08004469 	.word	0x08004469
 80044bc:	08004469 	.word	0x08004469
 80044c0:	0800461d 	.word	0x0800461d
 80044c4:	08004469 	.word	0x08004469
 80044c8:	0800451d 	.word	0x0800451d
 80044cc:	08004469 	.word	0x08004469
 80044d0:	08004469 	.word	0x08004469
 80044d4:	080045e5 	.word	0x080045e5
 80044d8:	682b      	ldr	r3, [r5, #0]
 80044da:	1d1a      	adds	r2, r3, #4
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	602a      	str	r2, [r5, #0]
 80044e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80044e4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80044e8:	2301      	movs	r3, #1
 80044ea:	e0a4      	b.n	8004636 <_printf_i+0x1f6>
 80044ec:	6820      	ldr	r0, [r4, #0]
 80044ee:	6829      	ldr	r1, [r5, #0]
 80044f0:	0606      	lsls	r6, r0, #24
 80044f2:	f101 0304 	add.w	r3, r1, #4
 80044f6:	d50a      	bpl.n	800450e <_printf_i+0xce>
 80044f8:	680e      	ldr	r6, [r1, #0]
 80044fa:	602b      	str	r3, [r5, #0]
 80044fc:	2e00      	cmp	r6, #0
 80044fe:	da03      	bge.n	8004508 <_printf_i+0xc8>
 8004500:	232d      	movs	r3, #45	; 0x2d
 8004502:	4276      	negs	r6, r6
 8004504:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004508:	230a      	movs	r3, #10
 800450a:	485e      	ldr	r0, [pc, #376]	; (8004684 <_printf_i+0x244>)
 800450c:	e019      	b.n	8004542 <_printf_i+0x102>
 800450e:	680e      	ldr	r6, [r1, #0]
 8004510:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004514:	602b      	str	r3, [r5, #0]
 8004516:	bf18      	it	ne
 8004518:	b236      	sxthne	r6, r6
 800451a:	e7ef      	b.n	80044fc <_printf_i+0xbc>
 800451c:	682b      	ldr	r3, [r5, #0]
 800451e:	6820      	ldr	r0, [r4, #0]
 8004520:	1d19      	adds	r1, r3, #4
 8004522:	6029      	str	r1, [r5, #0]
 8004524:	0601      	lsls	r1, r0, #24
 8004526:	d501      	bpl.n	800452c <_printf_i+0xec>
 8004528:	681e      	ldr	r6, [r3, #0]
 800452a:	e002      	b.n	8004532 <_printf_i+0xf2>
 800452c:	0646      	lsls	r6, r0, #25
 800452e:	d5fb      	bpl.n	8004528 <_printf_i+0xe8>
 8004530:	881e      	ldrh	r6, [r3, #0]
 8004532:	2f6f      	cmp	r7, #111	; 0x6f
 8004534:	bf0c      	ite	eq
 8004536:	2308      	moveq	r3, #8
 8004538:	230a      	movne	r3, #10
 800453a:	4852      	ldr	r0, [pc, #328]	; (8004684 <_printf_i+0x244>)
 800453c:	2100      	movs	r1, #0
 800453e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004542:	6865      	ldr	r5, [r4, #4]
 8004544:	2d00      	cmp	r5, #0
 8004546:	bfa8      	it	ge
 8004548:	6821      	ldrge	r1, [r4, #0]
 800454a:	60a5      	str	r5, [r4, #8]
 800454c:	bfa4      	itt	ge
 800454e:	f021 0104 	bicge.w	r1, r1, #4
 8004552:	6021      	strge	r1, [r4, #0]
 8004554:	b90e      	cbnz	r6, 800455a <_printf_i+0x11a>
 8004556:	2d00      	cmp	r5, #0
 8004558:	d04d      	beq.n	80045f6 <_printf_i+0x1b6>
 800455a:	4615      	mov	r5, r2
 800455c:	fbb6 f1f3 	udiv	r1, r6, r3
 8004560:	fb03 6711 	mls	r7, r3, r1, r6
 8004564:	5dc7      	ldrb	r7, [r0, r7]
 8004566:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800456a:	4637      	mov	r7, r6
 800456c:	42bb      	cmp	r3, r7
 800456e:	460e      	mov	r6, r1
 8004570:	d9f4      	bls.n	800455c <_printf_i+0x11c>
 8004572:	2b08      	cmp	r3, #8
 8004574:	d10b      	bne.n	800458e <_printf_i+0x14e>
 8004576:	6823      	ldr	r3, [r4, #0]
 8004578:	07de      	lsls	r6, r3, #31
 800457a:	d508      	bpl.n	800458e <_printf_i+0x14e>
 800457c:	6923      	ldr	r3, [r4, #16]
 800457e:	6861      	ldr	r1, [r4, #4]
 8004580:	4299      	cmp	r1, r3
 8004582:	bfde      	ittt	le
 8004584:	2330      	movle	r3, #48	; 0x30
 8004586:	f805 3c01 	strble.w	r3, [r5, #-1]
 800458a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800458e:	1b52      	subs	r2, r2, r5
 8004590:	6122      	str	r2, [r4, #16]
 8004592:	464b      	mov	r3, r9
 8004594:	4621      	mov	r1, r4
 8004596:	4640      	mov	r0, r8
 8004598:	f8cd a000 	str.w	sl, [sp]
 800459c:	aa03      	add	r2, sp, #12
 800459e:	f7ff fedf 	bl	8004360 <_printf_common>
 80045a2:	3001      	adds	r0, #1
 80045a4:	d14c      	bne.n	8004640 <_printf_i+0x200>
 80045a6:	f04f 30ff 	mov.w	r0, #4294967295
 80045aa:	b004      	add	sp, #16
 80045ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80045b0:	4834      	ldr	r0, [pc, #208]	; (8004684 <_printf_i+0x244>)
 80045b2:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80045b6:	6829      	ldr	r1, [r5, #0]
 80045b8:	6823      	ldr	r3, [r4, #0]
 80045ba:	f851 6b04 	ldr.w	r6, [r1], #4
 80045be:	6029      	str	r1, [r5, #0]
 80045c0:	061d      	lsls	r5, r3, #24
 80045c2:	d514      	bpl.n	80045ee <_printf_i+0x1ae>
 80045c4:	07df      	lsls	r7, r3, #31
 80045c6:	bf44      	itt	mi
 80045c8:	f043 0320 	orrmi.w	r3, r3, #32
 80045cc:	6023      	strmi	r3, [r4, #0]
 80045ce:	b91e      	cbnz	r6, 80045d8 <_printf_i+0x198>
 80045d0:	6823      	ldr	r3, [r4, #0]
 80045d2:	f023 0320 	bic.w	r3, r3, #32
 80045d6:	6023      	str	r3, [r4, #0]
 80045d8:	2310      	movs	r3, #16
 80045da:	e7af      	b.n	800453c <_printf_i+0xfc>
 80045dc:	6823      	ldr	r3, [r4, #0]
 80045de:	f043 0320 	orr.w	r3, r3, #32
 80045e2:	6023      	str	r3, [r4, #0]
 80045e4:	2378      	movs	r3, #120	; 0x78
 80045e6:	4828      	ldr	r0, [pc, #160]	; (8004688 <_printf_i+0x248>)
 80045e8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80045ec:	e7e3      	b.n	80045b6 <_printf_i+0x176>
 80045ee:	0659      	lsls	r1, r3, #25
 80045f0:	bf48      	it	mi
 80045f2:	b2b6      	uxthmi	r6, r6
 80045f4:	e7e6      	b.n	80045c4 <_printf_i+0x184>
 80045f6:	4615      	mov	r5, r2
 80045f8:	e7bb      	b.n	8004572 <_printf_i+0x132>
 80045fa:	682b      	ldr	r3, [r5, #0]
 80045fc:	6826      	ldr	r6, [r4, #0]
 80045fe:	1d18      	adds	r0, r3, #4
 8004600:	6961      	ldr	r1, [r4, #20]
 8004602:	6028      	str	r0, [r5, #0]
 8004604:	0635      	lsls	r5, r6, #24
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	d501      	bpl.n	800460e <_printf_i+0x1ce>
 800460a:	6019      	str	r1, [r3, #0]
 800460c:	e002      	b.n	8004614 <_printf_i+0x1d4>
 800460e:	0670      	lsls	r0, r6, #25
 8004610:	d5fb      	bpl.n	800460a <_printf_i+0x1ca>
 8004612:	8019      	strh	r1, [r3, #0]
 8004614:	2300      	movs	r3, #0
 8004616:	4615      	mov	r5, r2
 8004618:	6123      	str	r3, [r4, #16]
 800461a:	e7ba      	b.n	8004592 <_printf_i+0x152>
 800461c:	682b      	ldr	r3, [r5, #0]
 800461e:	2100      	movs	r1, #0
 8004620:	1d1a      	adds	r2, r3, #4
 8004622:	602a      	str	r2, [r5, #0]
 8004624:	681d      	ldr	r5, [r3, #0]
 8004626:	6862      	ldr	r2, [r4, #4]
 8004628:	4628      	mov	r0, r5
 800462a:	f000 fffd 	bl	8005628 <memchr>
 800462e:	b108      	cbz	r0, 8004634 <_printf_i+0x1f4>
 8004630:	1b40      	subs	r0, r0, r5
 8004632:	6060      	str	r0, [r4, #4]
 8004634:	6863      	ldr	r3, [r4, #4]
 8004636:	6123      	str	r3, [r4, #16]
 8004638:	2300      	movs	r3, #0
 800463a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800463e:	e7a8      	b.n	8004592 <_printf_i+0x152>
 8004640:	462a      	mov	r2, r5
 8004642:	4649      	mov	r1, r9
 8004644:	4640      	mov	r0, r8
 8004646:	6923      	ldr	r3, [r4, #16]
 8004648:	47d0      	blx	sl
 800464a:	3001      	adds	r0, #1
 800464c:	d0ab      	beq.n	80045a6 <_printf_i+0x166>
 800464e:	6823      	ldr	r3, [r4, #0]
 8004650:	079b      	lsls	r3, r3, #30
 8004652:	d413      	bmi.n	800467c <_printf_i+0x23c>
 8004654:	68e0      	ldr	r0, [r4, #12]
 8004656:	9b03      	ldr	r3, [sp, #12]
 8004658:	4298      	cmp	r0, r3
 800465a:	bfb8      	it	lt
 800465c:	4618      	movlt	r0, r3
 800465e:	e7a4      	b.n	80045aa <_printf_i+0x16a>
 8004660:	2301      	movs	r3, #1
 8004662:	4632      	mov	r2, r6
 8004664:	4649      	mov	r1, r9
 8004666:	4640      	mov	r0, r8
 8004668:	47d0      	blx	sl
 800466a:	3001      	adds	r0, #1
 800466c:	d09b      	beq.n	80045a6 <_printf_i+0x166>
 800466e:	3501      	adds	r5, #1
 8004670:	68e3      	ldr	r3, [r4, #12]
 8004672:	9903      	ldr	r1, [sp, #12]
 8004674:	1a5b      	subs	r3, r3, r1
 8004676:	42ab      	cmp	r3, r5
 8004678:	dcf2      	bgt.n	8004660 <_printf_i+0x220>
 800467a:	e7eb      	b.n	8004654 <_printf_i+0x214>
 800467c:	2500      	movs	r5, #0
 800467e:	f104 0619 	add.w	r6, r4, #25
 8004682:	e7f5      	b.n	8004670 <_printf_i+0x230>
 8004684:	080071a6 	.word	0x080071a6
 8004688:	080071b7 	.word	0x080071b7

0800468c <iprintf>:
 800468c:	b40f      	push	{r0, r1, r2, r3}
 800468e:	4b0a      	ldr	r3, [pc, #40]	; (80046b8 <iprintf+0x2c>)
 8004690:	b513      	push	{r0, r1, r4, lr}
 8004692:	681c      	ldr	r4, [r3, #0]
 8004694:	b124      	cbz	r4, 80046a0 <iprintf+0x14>
 8004696:	69a3      	ldr	r3, [r4, #24]
 8004698:	b913      	cbnz	r3, 80046a0 <iprintf+0x14>
 800469a:	4620      	mov	r0, r4
 800469c:	f000 ff16 	bl	80054cc <__sinit>
 80046a0:	ab05      	add	r3, sp, #20
 80046a2:	4620      	mov	r0, r4
 80046a4:	9a04      	ldr	r2, [sp, #16]
 80046a6:	68a1      	ldr	r1, [r4, #8]
 80046a8:	9301      	str	r3, [sp, #4]
 80046aa:	f001 fdc1 	bl	8006230 <_vfiprintf_r>
 80046ae:	b002      	add	sp, #8
 80046b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80046b4:	b004      	add	sp, #16
 80046b6:	4770      	bx	lr
 80046b8:	2000001c 	.word	0x2000001c

080046bc <siprintf>:
 80046bc:	b40e      	push	{r1, r2, r3}
 80046be:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80046c2:	b500      	push	{lr}
 80046c4:	b09c      	sub	sp, #112	; 0x70
 80046c6:	ab1d      	add	r3, sp, #116	; 0x74
 80046c8:	9002      	str	r0, [sp, #8]
 80046ca:	9006      	str	r0, [sp, #24]
 80046cc:	9107      	str	r1, [sp, #28]
 80046ce:	9104      	str	r1, [sp, #16]
 80046d0:	4808      	ldr	r0, [pc, #32]	; (80046f4 <siprintf+0x38>)
 80046d2:	4909      	ldr	r1, [pc, #36]	; (80046f8 <siprintf+0x3c>)
 80046d4:	f853 2b04 	ldr.w	r2, [r3], #4
 80046d8:	9105      	str	r1, [sp, #20]
 80046da:	6800      	ldr	r0, [r0, #0]
 80046dc:	a902      	add	r1, sp, #8
 80046de:	9301      	str	r3, [sp, #4]
 80046e0:	f001 fc7e 	bl	8005fe0 <_svfiprintf_r>
 80046e4:	2200      	movs	r2, #0
 80046e6:	9b02      	ldr	r3, [sp, #8]
 80046e8:	701a      	strb	r2, [r3, #0]
 80046ea:	b01c      	add	sp, #112	; 0x70
 80046ec:	f85d eb04 	ldr.w	lr, [sp], #4
 80046f0:	b003      	add	sp, #12
 80046f2:	4770      	bx	lr
 80046f4:	2000001c 	.word	0x2000001c
 80046f8:	ffff0208 	.word	0xffff0208

080046fc <strncpy>:
 80046fc:	4603      	mov	r3, r0
 80046fe:	b510      	push	{r4, lr}
 8004700:	3901      	subs	r1, #1
 8004702:	b132      	cbz	r2, 8004712 <strncpy+0x16>
 8004704:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8004708:	3a01      	subs	r2, #1
 800470a:	f803 4b01 	strb.w	r4, [r3], #1
 800470e:	2c00      	cmp	r4, #0
 8004710:	d1f7      	bne.n	8004702 <strncpy+0x6>
 8004712:	2100      	movs	r1, #0
 8004714:	441a      	add	r2, r3
 8004716:	4293      	cmp	r3, r2
 8004718:	d100      	bne.n	800471c <strncpy+0x20>
 800471a:	bd10      	pop	{r4, pc}
 800471c:	f803 1b01 	strb.w	r1, [r3], #1
 8004720:	e7f9      	b.n	8004716 <strncpy+0x1a>

08004722 <quorem>:
 8004722:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004726:	6903      	ldr	r3, [r0, #16]
 8004728:	690c      	ldr	r4, [r1, #16]
 800472a:	4607      	mov	r7, r0
 800472c:	42a3      	cmp	r3, r4
 800472e:	f2c0 8082 	blt.w	8004836 <quorem+0x114>
 8004732:	3c01      	subs	r4, #1
 8004734:	f100 0514 	add.w	r5, r0, #20
 8004738:	f101 0814 	add.w	r8, r1, #20
 800473c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004740:	9301      	str	r3, [sp, #4]
 8004742:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004746:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800474a:	3301      	adds	r3, #1
 800474c:	429a      	cmp	r2, r3
 800474e:	fbb2 f6f3 	udiv	r6, r2, r3
 8004752:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8004756:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800475a:	d331      	bcc.n	80047c0 <quorem+0x9e>
 800475c:	f04f 0e00 	mov.w	lr, #0
 8004760:	4640      	mov	r0, r8
 8004762:	46ac      	mov	ip, r5
 8004764:	46f2      	mov	sl, lr
 8004766:	f850 2b04 	ldr.w	r2, [r0], #4
 800476a:	b293      	uxth	r3, r2
 800476c:	fb06 e303 	mla	r3, r6, r3, lr
 8004770:	0c12      	lsrs	r2, r2, #16
 8004772:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8004776:	b29b      	uxth	r3, r3
 8004778:	fb06 e202 	mla	r2, r6, r2, lr
 800477c:	ebaa 0303 	sub.w	r3, sl, r3
 8004780:	f8dc a000 	ldr.w	sl, [ip]
 8004784:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8004788:	fa1f fa8a 	uxth.w	sl, sl
 800478c:	4453      	add	r3, sl
 800478e:	f8dc a000 	ldr.w	sl, [ip]
 8004792:	b292      	uxth	r2, r2
 8004794:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8004798:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800479c:	b29b      	uxth	r3, r3
 800479e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80047a2:	4581      	cmp	r9, r0
 80047a4:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80047a8:	f84c 3b04 	str.w	r3, [ip], #4
 80047ac:	d2db      	bcs.n	8004766 <quorem+0x44>
 80047ae:	f855 300b 	ldr.w	r3, [r5, fp]
 80047b2:	b92b      	cbnz	r3, 80047c0 <quorem+0x9e>
 80047b4:	9b01      	ldr	r3, [sp, #4]
 80047b6:	3b04      	subs	r3, #4
 80047b8:	429d      	cmp	r5, r3
 80047ba:	461a      	mov	r2, r3
 80047bc:	d32f      	bcc.n	800481e <quorem+0xfc>
 80047be:	613c      	str	r4, [r7, #16]
 80047c0:	4638      	mov	r0, r7
 80047c2:	f001 f9bd 	bl	8005b40 <__mcmp>
 80047c6:	2800      	cmp	r0, #0
 80047c8:	db25      	blt.n	8004816 <quorem+0xf4>
 80047ca:	4628      	mov	r0, r5
 80047cc:	f04f 0c00 	mov.w	ip, #0
 80047d0:	3601      	adds	r6, #1
 80047d2:	f858 1b04 	ldr.w	r1, [r8], #4
 80047d6:	f8d0 e000 	ldr.w	lr, [r0]
 80047da:	b28b      	uxth	r3, r1
 80047dc:	ebac 0303 	sub.w	r3, ip, r3
 80047e0:	fa1f f28e 	uxth.w	r2, lr
 80047e4:	4413      	add	r3, r2
 80047e6:	0c0a      	lsrs	r2, r1, #16
 80047e8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80047ec:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80047f0:	b29b      	uxth	r3, r3
 80047f2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80047f6:	45c1      	cmp	r9, r8
 80047f8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80047fc:	f840 3b04 	str.w	r3, [r0], #4
 8004800:	d2e7      	bcs.n	80047d2 <quorem+0xb0>
 8004802:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004806:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800480a:	b922      	cbnz	r2, 8004816 <quorem+0xf4>
 800480c:	3b04      	subs	r3, #4
 800480e:	429d      	cmp	r5, r3
 8004810:	461a      	mov	r2, r3
 8004812:	d30a      	bcc.n	800482a <quorem+0x108>
 8004814:	613c      	str	r4, [r7, #16]
 8004816:	4630      	mov	r0, r6
 8004818:	b003      	add	sp, #12
 800481a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800481e:	6812      	ldr	r2, [r2, #0]
 8004820:	3b04      	subs	r3, #4
 8004822:	2a00      	cmp	r2, #0
 8004824:	d1cb      	bne.n	80047be <quorem+0x9c>
 8004826:	3c01      	subs	r4, #1
 8004828:	e7c6      	b.n	80047b8 <quorem+0x96>
 800482a:	6812      	ldr	r2, [r2, #0]
 800482c:	3b04      	subs	r3, #4
 800482e:	2a00      	cmp	r2, #0
 8004830:	d1f0      	bne.n	8004814 <quorem+0xf2>
 8004832:	3c01      	subs	r4, #1
 8004834:	e7eb      	b.n	800480e <quorem+0xec>
 8004836:	2000      	movs	r0, #0
 8004838:	e7ee      	b.n	8004818 <quorem+0xf6>
 800483a:	0000      	movs	r0, r0
 800483c:	0000      	movs	r0, r0
	...

08004840 <_dtoa_r>:
 8004840:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004844:	4616      	mov	r6, r2
 8004846:	461f      	mov	r7, r3
 8004848:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800484a:	b099      	sub	sp, #100	; 0x64
 800484c:	4605      	mov	r5, r0
 800484e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8004852:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8004856:	b974      	cbnz	r4, 8004876 <_dtoa_r+0x36>
 8004858:	2010      	movs	r0, #16
 800485a:	f000 fedd 	bl	8005618 <malloc>
 800485e:	4602      	mov	r2, r0
 8004860:	6268      	str	r0, [r5, #36]	; 0x24
 8004862:	b920      	cbnz	r0, 800486e <_dtoa_r+0x2e>
 8004864:	21ea      	movs	r1, #234	; 0xea
 8004866:	4ba8      	ldr	r3, [pc, #672]	; (8004b08 <_dtoa_r+0x2c8>)
 8004868:	48a8      	ldr	r0, [pc, #672]	; (8004b0c <_dtoa_r+0x2cc>)
 800486a:	f001 ff37 	bl	80066dc <__assert_func>
 800486e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8004872:	6004      	str	r4, [r0, #0]
 8004874:	60c4      	str	r4, [r0, #12]
 8004876:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004878:	6819      	ldr	r1, [r3, #0]
 800487a:	b151      	cbz	r1, 8004892 <_dtoa_r+0x52>
 800487c:	685a      	ldr	r2, [r3, #4]
 800487e:	2301      	movs	r3, #1
 8004880:	4093      	lsls	r3, r2
 8004882:	604a      	str	r2, [r1, #4]
 8004884:	608b      	str	r3, [r1, #8]
 8004886:	4628      	mov	r0, r5
 8004888:	f000 ff1c 	bl	80056c4 <_Bfree>
 800488c:	2200      	movs	r2, #0
 800488e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004890:	601a      	str	r2, [r3, #0]
 8004892:	1e3b      	subs	r3, r7, #0
 8004894:	bfaf      	iteee	ge
 8004896:	2300      	movge	r3, #0
 8004898:	2201      	movlt	r2, #1
 800489a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800489e:	9305      	strlt	r3, [sp, #20]
 80048a0:	bfa8      	it	ge
 80048a2:	f8c8 3000 	strge.w	r3, [r8]
 80048a6:	f8dd 9014 	ldr.w	r9, [sp, #20]
 80048aa:	4b99      	ldr	r3, [pc, #612]	; (8004b10 <_dtoa_r+0x2d0>)
 80048ac:	bfb8      	it	lt
 80048ae:	f8c8 2000 	strlt.w	r2, [r8]
 80048b2:	ea33 0309 	bics.w	r3, r3, r9
 80048b6:	d119      	bne.n	80048ec <_dtoa_r+0xac>
 80048b8:	f242 730f 	movw	r3, #9999	; 0x270f
 80048bc:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80048be:	6013      	str	r3, [r2, #0]
 80048c0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80048c4:	4333      	orrs	r3, r6
 80048c6:	f000 857f 	beq.w	80053c8 <_dtoa_r+0xb88>
 80048ca:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80048cc:	b953      	cbnz	r3, 80048e4 <_dtoa_r+0xa4>
 80048ce:	4b91      	ldr	r3, [pc, #580]	; (8004b14 <_dtoa_r+0x2d4>)
 80048d0:	e022      	b.n	8004918 <_dtoa_r+0xd8>
 80048d2:	4b91      	ldr	r3, [pc, #580]	; (8004b18 <_dtoa_r+0x2d8>)
 80048d4:	9303      	str	r3, [sp, #12]
 80048d6:	3308      	adds	r3, #8
 80048d8:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80048da:	6013      	str	r3, [r2, #0]
 80048dc:	9803      	ldr	r0, [sp, #12]
 80048de:	b019      	add	sp, #100	; 0x64
 80048e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80048e4:	4b8b      	ldr	r3, [pc, #556]	; (8004b14 <_dtoa_r+0x2d4>)
 80048e6:	9303      	str	r3, [sp, #12]
 80048e8:	3303      	adds	r3, #3
 80048ea:	e7f5      	b.n	80048d8 <_dtoa_r+0x98>
 80048ec:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80048f0:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 80048f4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80048f8:	2200      	movs	r2, #0
 80048fa:	2300      	movs	r3, #0
 80048fc:	f7fc f854 	bl	80009a8 <__aeabi_dcmpeq>
 8004900:	4680      	mov	r8, r0
 8004902:	b158      	cbz	r0, 800491c <_dtoa_r+0xdc>
 8004904:	2301      	movs	r3, #1
 8004906:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8004908:	6013      	str	r3, [r2, #0]
 800490a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800490c:	2b00      	cmp	r3, #0
 800490e:	f000 8558 	beq.w	80053c2 <_dtoa_r+0xb82>
 8004912:	4882      	ldr	r0, [pc, #520]	; (8004b1c <_dtoa_r+0x2dc>)
 8004914:	6018      	str	r0, [r3, #0]
 8004916:	1e43      	subs	r3, r0, #1
 8004918:	9303      	str	r3, [sp, #12]
 800491a:	e7df      	b.n	80048dc <_dtoa_r+0x9c>
 800491c:	ab16      	add	r3, sp, #88	; 0x58
 800491e:	9301      	str	r3, [sp, #4]
 8004920:	ab17      	add	r3, sp, #92	; 0x5c
 8004922:	9300      	str	r3, [sp, #0]
 8004924:	4628      	mov	r0, r5
 8004926:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800492a:	f001 f9b1 	bl	8005c90 <__d2b>
 800492e:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8004932:	4683      	mov	fp, r0
 8004934:	2c00      	cmp	r4, #0
 8004936:	d07f      	beq.n	8004a38 <_dtoa_r+0x1f8>
 8004938:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800493c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800493e:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8004942:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004946:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800494a:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800494e:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8004952:	2200      	movs	r2, #0
 8004954:	4b72      	ldr	r3, [pc, #456]	; (8004b20 <_dtoa_r+0x2e0>)
 8004956:	f7fb fc07 	bl	8000168 <__aeabi_dsub>
 800495a:	a365      	add	r3, pc, #404	; (adr r3, 8004af0 <_dtoa_r+0x2b0>)
 800495c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004960:	f7fb fdba 	bl	80004d8 <__aeabi_dmul>
 8004964:	a364      	add	r3, pc, #400	; (adr r3, 8004af8 <_dtoa_r+0x2b8>)
 8004966:	e9d3 2300 	ldrd	r2, r3, [r3]
 800496a:	f7fb fbff 	bl	800016c <__adddf3>
 800496e:	4606      	mov	r6, r0
 8004970:	4620      	mov	r0, r4
 8004972:	460f      	mov	r7, r1
 8004974:	f7fb fd46 	bl	8000404 <__aeabi_i2d>
 8004978:	a361      	add	r3, pc, #388	; (adr r3, 8004b00 <_dtoa_r+0x2c0>)
 800497a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800497e:	f7fb fdab 	bl	80004d8 <__aeabi_dmul>
 8004982:	4602      	mov	r2, r0
 8004984:	460b      	mov	r3, r1
 8004986:	4630      	mov	r0, r6
 8004988:	4639      	mov	r1, r7
 800498a:	f7fb fbef 	bl	800016c <__adddf3>
 800498e:	4606      	mov	r6, r0
 8004990:	460f      	mov	r7, r1
 8004992:	f7fc f851 	bl	8000a38 <__aeabi_d2iz>
 8004996:	2200      	movs	r2, #0
 8004998:	4682      	mov	sl, r0
 800499a:	2300      	movs	r3, #0
 800499c:	4630      	mov	r0, r6
 800499e:	4639      	mov	r1, r7
 80049a0:	f7fc f80c 	bl	80009bc <__aeabi_dcmplt>
 80049a4:	b148      	cbz	r0, 80049ba <_dtoa_r+0x17a>
 80049a6:	4650      	mov	r0, sl
 80049a8:	f7fb fd2c 	bl	8000404 <__aeabi_i2d>
 80049ac:	4632      	mov	r2, r6
 80049ae:	463b      	mov	r3, r7
 80049b0:	f7fb fffa 	bl	80009a8 <__aeabi_dcmpeq>
 80049b4:	b908      	cbnz	r0, 80049ba <_dtoa_r+0x17a>
 80049b6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80049ba:	f1ba 0f16 	cmp.w	sl, #22
 80049be:	d858      	bhi.n	8004a72 <_dtoa_r+0x232>
 80049c0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80049c4:	4b57      	ldr	r3, [pc, #348]	; (8004b24 <_dtoa_r+0x2e4>)
 80049c6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80049ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049ce:	f7fb fff5 	bl	80009bc <__aeabi_dcmplt>
 80049d2:	2800      	cmp	r0, #0
 80049d4:	d04f      	beq.n	8004a76 <_dtoa_r+0x236>
 80049d6:	2300      	movs	r3, #0
 80049d8:	f10a 3aff 	add.w	sl, sl, #4294967295
 80049dc:	930f      	str	r3, [sp, #60]	; 0x3c
 80049de:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80049e0:	1b1c      	subs	r4, r3, r4
 80049e2:	1e63      	subs	r3, r4, #1
 80049e4:	9309      	str	r3, [sp, #36]	; 0x24
 80049e6:	bf49      	itett	mi
 80049e8:	f1c4 0301 	rsbmi	r3, r4, #1
 80049ec:	2300      	movpl	r3, #0
 80049ee:	9306      	strmi	r3, [sp, #24]
 80049f0:	2300      	movmi	r3, #0
 80049f2:	bf54      	ite	pl
 80049f4:	9306      	strpl	r3, [sp, #24]
 80049f6:	9309      	strmi	r3, [sp, #36]	; 0x24
 80049f8:	f1ba 0f00 	cmp.w	sl, #0
 80049fc:	db3d      	blt.n	8004a7a <_dtoa_r+0x23a>
 80049fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004a00:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8004a04:	4453      	add	r3, sl
 8004a06:	9309      	str	r3, [sp, #36]	; 0x24
 8004a08:	2300      	movs	r3, #0
 8004a0a:	930a      	str	r3, [sp, #40]	; 0x28
 8004a0c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004a0e:	2b09      	cmp	r3, #9
 8004a10:	f200 808c 	bhi.w	8004b2c <_dtoa_r+0x2ec>
 8004a14:	2b05      	cmp	r3, #5
 8004a16:	bfc4      	itt	gt
 8004a18:	3b04      	subgt	r3, #4
 8004a1a:	9322      	strgt	r3, [sp, #136]	; 0x88
 8004a1c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004a1e:	bfc8      	it	gt
 8004a20:	2400      	movgt	r4, #0
 8004a22:	f1a3 0302 	sub.w	r3, r3, #2
 8004a26:	bfd8      	it	le
 8004a28:	2401      	movle	r4, #1
 8004a2a:	2b03      	cmp	r3, #3
 8004a2c:	f200 808a 	bhi.w	8004b44 <_dtoa_r+0x304>
 8004a30:	e8df f003 	tbb	[pc, r3]
 8004a34:	5b4d4f2d 	.word	0x5b4d4f2d
 8004a38:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8004a3c:	441c      	add	r4, r3
 8004a3e:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8004a42:	2b20      	cmp	r3, #32
 8004a44:	bfc3      	ittte	gt
 8004a46:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8004a4a:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8004a4e:	fa09 f303 	lslgt.w	r3, r9, r3
 8004a52:	f1c3 0320 	rsble	r3, r3, #32
 8004a56:	bfc6      	itte	gt
 8004a58:	fa26 f000 	lsrgt.w	r0, r6, r0
 8004a5c:	4318      	orrgt	r0, r3
 8004a5e:	fa06 f003 	lslle.w	r0, r6, r3
 8004a62:	f7fb fcbf 	bl	80003e4 <__aeabi_ui2d>
 8004a66:	2301      	movs	r3, #1
 8004a68:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8004a6c:	3c01      	subs	r4, #1
 8004a6e:	9313      	str	r3, [sp, #76]	; 0x4c
 8004a70:	e76f      	b.n	8004952 <_dtoa_r+0x112>
 8004a72:	2301      	movs	r3, #1
 8004a74:	e7b2      	b.n	80049dc <_dtoa_r+0x19c>
 8004a76:	900f      	str	r0, [sp, #60]	; 0x3c
 8004a78:	e7b1      	b.n	80049de <_dtoa_r+0x19e>
 8004a7a:	9b06      	ldr	r3, [sp, #24]
 8004a7c:	eba3 030a 	sub.w	r3, r3, sl
 8004a80:	9306      	str	r3, [sp, #24]
 8004a82:	f1ca 0300 	rsb	r3, sl, #0
 8004a86:	930a      	str	r3, [sp, #40]	; 0x28
 8004a88:	2300      	movs	r3, #0
 8004a8a:	930e      	str	r3, [sp, #56]	; 0x38
 8004a8c:	e7be      	b.n	8004a0c <_dtoa_r+0x1cc>
 8004a8e:	2300      	movs	r3, #0
 8004a90:	930b      	str	r3, [sp, #44]	; 0x2c
 8004a92:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	dc58      	bgt.n	8004b4a <_dtoa_r+0x30a>
 8004a98:	f04f 0901 	mov.w	r9, #1
 8004a9c:	464b      	mov	r3, r9
 8004a9e:	f8cd 9020 	str.w	r9, [sp, #32]
 8004aa2:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8004aaa:	6042      	str	r2, [r0, #4]
 8004aac:	2204      	movs	r2, #4
 8004aae:	f102 0614 	add.w	r6, r2, #20
 8004ab2:	429e      	cmp	r6, r3
 8004ab4:	6841      	ldr	r1, [r0, #4]
 8004ab6:	d94e      	bls.n	8004b56 <_dtoa_r+0x316>
 8004ab8:	4628      	mov	r0, r5
 8004aba:	f000 fdc3 	bl	8005644 <_Balloc>
 8004abe:	9003      	str	r0, [sp, #12]
 8004ac0:	2800      	cmp	r0, #0
 8004ac2:	d14c      	bne.n	8004b5e <_dtoa_r+0x31e>
 8004ac4:	4602      	mov	r2, r0
 8004ac6:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8004aca:	4b17      	ldr	r3, [pc, #92]	; (8004b28 <_dtoa_r+0x2e8>)
 8004acc:	e6cc      	b.n	8004868 <_dtoa_r+0x28>
 8004ace:	2301      	movs	r3, #1
 8004ad0:	e7de      	b.n	8004a90 <_dtoa_r+0x250>
 8004ad2:	2300      	movs	r3, #0
 8004ad4:	930b      	str	r3, [sp, #44]	; 0x2c
 8004ad6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004ad8:	eb0a 0903 	add.w	r9, sl, r3
 8004adc:	f109 0301 	add.w	r3, r9, #1
 8004ae0:	2b01      	cmp	r3, #1
 8004ae2:	9308      	str	r3, [sp, #32]
 8004ae4:	bfb8      	it	lt
 8004ae6:	2301      	movlt	r3, #1
 8004ae8:	e7dd      	b.n	8004aa6 <_dtoa_r+0x266>
 8004aea:	2301      	movs	r3, #1
 8004aec:	e7f2      	b.n	8004ad4 <_dtoa_r+0x294>
 8004aee:	bf00      	nop
 8004af0:	636f4361 	.word	0x636f4361
 8004af4:	3fd287a7 	.word	0x3fd287a7
 8004af8:	8b60c8b3 	.word	0x8b60c8b3
 8004afc:	3fc68a28 	.word	0x3fc68a28
 8004b00:	509f79fb 	.word	0x509f79fb
 8004b04:	3fd34413 	.word	0x3fd34413
 8004b08:	080071d5 	.word	0x080071d5
 8004b0c:	080071ec 	.word	0x080071ec
 8004b10:	7ff00000 	.word	0x7ff00000
 8004b14:	080071d1 	.word	0x080071d1
 8004b18:	080071c8 	.word	0x080071c8
 8004b1c:	080071a5 	.word	0x080071a5
 8004b20:	3ff80000 	.word	0x3ff80000
 8004b24:	08007340 	.word	0x08007340
 8004b28:	08007247 	.word	0x08007247
 8004b2c:	2401      	movs	r4, #1
 8004b2e:	2300      	movs	r3, #0
 8004b30:	940b      	str	r4, [sp, #44]	; 0x2c
 8004b32:	9322      	str	r3, [sp, #136]	; 0x88
 8004b34:	f04f 39ff 	mov.w	r9, #4294967295
 8004b38:	2200      	movs	r2, #0
 8004b3a:	2312      	movs	r3, #18
 8004b3c:	f8cd 9020 	str.w	r9, [sp, #32]
 8004b40:	9223      	str	r2, [sp, #140]	; 0x8c
 8004b42:	e7b0      	b.n	8004aa6 <_dtoa_r+0x266>
 8004b44:	2301      	movs	r3, #1
 8004b46:	930b      	str	r3, [sp, #44]	; 0x2c
 8004b48:	e7f4      	b.n	8004b34 <_dtoa_r+0x2f4>
 8004b4a:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 8004b4e:	464b      	mov	r3, r9
 8004b50:	f8cd 9020 	str.w	r9, [sp, #32]
 8004b54:	e7a7      	b.n	8004aa6 <_dtoa_r+0x266>
 8004b56:	3101      	adds	r1, #1
 8004b58:	6041      	str	r1, [r0, #4]
 8004b5a:	0052      	lsls	r2, r2, #1
 8004b5c:	e7a7      	b.n	8004aae <_dtoa_r+0x26e>
 8004b5e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004b60:	9a03      	ldr	r2, [sp, #12]
 8004b62:	601a      	str	r2, [r3, #0]
 8004b64:	9b08      	ldr	r3, [sp, #32]
 8004b66:	2b0e      	cmp	r3, #14
 8004b68:	f200 80a8 	bhi.w	8004cbc <_dtoa_r+0x47c>
 8004b6c:	2c00      	cmp	r4, #0
 8004b6e:	f000 80a5 	beq.w	8004cbc <_dtoa_r+0x47c>
 8004b72:	f1ba 0f00 	cmp.w	sl, #0
 8004b76:	dd34      	ble.n	8004be2 <_dtoa_r+0x3a2>
 8004b78:	4a9a      	ldr	r2, [pc, #616]	; (8004de4 <_dtoa_r+0x5a4>)
 8004b7a:	f00a 030f 	and.w	r3, sl, #15
 8004b7e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8004b82:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8004b86:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004b8a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8004b8e:	ea4f 142a 	mov.w	r4, sl, asr #4
 8004b92:	d016      	beq.n	8004bc2 <_dtoa_r+0x382>
 8004b94:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004b98:	4b93      	ldr	r3, [pc, #588]	; (8004de8 <_dtoa_r+0x5a8>)
 8004b9a:	2703      	movs	r7, #3
 8004b9c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004ba0:	f7fb fdc4 	bl	800072c <__aeabi_ddiv>
 8004ba4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004ba8:	f004 040f 	and.w	r4, r4, #15
 8004bac:	4e8e      	ldr	r6, [pc, #568]	; (8004de8 <_dtoa_r+0x5a8>)
 8004bae:	b954      	cbnz	r4, 8004bc6 <_dtoa_r+0x386>
 8004bb0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004bb4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004bb8:	f7fb fdb8 	bl	800072c <__aeabi_ddiv>
 8004bbc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004bc0:	e029      	b.n	8004c16 <_dtoa_r+0x3d6>
 8004bc2:	2702      	movs	r7, #2
 8004bc4:	e7f2      	b.n	8004bac <_dtoa_r+0x36c>
 8004bc6:	07e1      	lsls	r1, r4, #31
 8004bc8:	d508      	bpl.n	8004bdc <_dtoa_r+0x39c>
 8004bca:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004bce:	e9d6 2300 	ldrd	r2, r3, [r6]
 8004bd2:	f7fb fc81 	bl	80004d8 <__aeabi_dmul>
 8004bd6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004bda:	3701      	adds	r7, #1
 8004bdc:	1064      	asrs	r4, r4, #1
 8004bde:	3608      	adds	r6, #8
 8004be0:	e7e5      	b.n	8004bae <_dtoa_r+0x36e>
 8004be2:	f000 80a5 	beq.w	8004d30 <_dtoa_r+0x4f0>
 8004be6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004bea:	f1ca 0400 	rsb	r4, sl, #0
 8004bee:	4b7d      	ldr	r3, [pc, #500]	; (8004de4 <_dtoa_r+0x5a4>)
 8004bf0:	f004 020f 	and.w	r2, r4, #15
 8004bf4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004bf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bfc:	f7fb fc6c 	bl	80004d8 <__aeabi_dmul>
 8004c00:	2702      	movs	r7, #2
 8004c02:	2300      	movs	r3, #0
 8004c04:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004c08:	4e77      	ldr	r6, [pc, #476]	; (8004de8 <_dtoa_r+0x5a8>)
 8004c0a:	1124      	asrs	r4, r4, #4
 8004c0c:	2c00      	cmp	r4, #0
 8004c0e:	f040 8084 	bne.w	8004d1a <_dtoa_r+0x4da>
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d1d2      	bne.n	8004bbc <_dtoa_r+0x37c>
 8004c16:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	f000 808b 	beq.w	8004d34 <_dtoa_r+0x4f4>
 8004c1e:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8004c22:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8004c26:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004c2a:	2200      	movs	r2, #0
 8004c2c:	4b6f      	ldr	r3, [pc, #444]	; (8004dec <_dtoa_r+0x5ac>)
 8004c2e:	f7fb fec5 	bl	80009bc <__aeabi_dcmplt>
 8004c32:	2800      	cmp	r0, #0
 8004c34:	d07e      	beq.n	8004d34 <_dtoa_r+0x4f4>
 8004c36:	9b08      	ldr	r3, [sp, #32]
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d07b      	beq.n	8004d34 <_dtoa_r+0x4f4>
 8004c3c:	f1b9 0f00 	cmp.w	r9, #0
 8004c40:	dd38      	ble.n	8004cb4 <_dtoa_r+0x474>
 8004c42:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004c46:	2200      	movs	r2, #0
 8004c48:	4b69      	ldr	r3, [pc, #420]	; (8004df0 <_dtoa_r+0x5b0>)
 8004c4a:	f7fb fc45 	bl	80004d8 <__aeabi_dmul>
 8004c4e:	464c      	mov	r4, r9
 8004c50:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004c54:	f10a 38ff 	add.w	r8, sl, #4294967295
 8004c58:	3701      	adds	r7, #1
 8004c5a:	4638      	mov	r0, r7
 8004c5c:	f7fb fbd2 	bl	8000404 <__aeabi_i2d>
 8004c60:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004c64:	f7fb fc38 	bl	80004d8 <__aeabi_dmul>
 8004c68:	2200      	movs	r2, #0
 8004c6a:	4b62      	ldr	r3, [pc, #392]	; (8004df4 <_dtoa_r+0x5b4>)
 8004c6c:	f7fb fa7e 	bl	800016c <__adddf3>
 8004c70:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8004c74:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004c78:	9611      	str	r6, [sp, #68]	; 0x44
 8004c7a:	2c00      	cmp	r4, #0
 8004c7c:	d15d      	bne.n	8004d3a <_dtoa_r+0x4fa>
 8004c7e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004c82:	2200      	movs	r2, #0
 8004c84:	4b5c      	ldr	r3, [pc, #368]	; (8004df8 <_dtoa_r+0x5b8>)
 8004c86:	f7fb fa6f 	bl	8000168 <__aeabi_dsub>
 8004c8a:	4602      	mov	r2, r0
 8004c8c:	460b      	mov	r3, r1
 8004c8e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004c92:	4633      	mov	r3, r6
 8004c94:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004c96:	f7fb feaf 	bl	80009f8 <__aeabi_dcmpgt>
 8004c9a:	2800      	cmp	r0, #0
 8004c9c:	f040 829c 	bne.w	80051d8 <_dtoa_r+0x998>
 8004ca0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004ca4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004ca6:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8004caa:	f7fb fe87 	bl	80009bc <__aeabi_dcmplt>
 8004cae:	2800      	cmp	r0, #0
 8004cb0:	f040 8290 	bne.w	80051d4 <_dtoa_r+0x994>
 8004cb4:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8004cb8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8004cbc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	f2c0 8152 	blt.w	8004f68 <_dtoa_r+0x728>
 8004cc4:	f1ba 0f0e 	cmp.w	sl, #14
 8004cc8:	f300 814e 	bgt.w	8004f68 <_dtoa_r+0x728>
 8004ccc:	4b45      	ldr	r3, [pc, #276]	; (8004de4 <_dtoa_r+0x5a4>)
 8004cce:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8004cd2:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004cd6:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8004cda:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	f280 80db 	bge.w	8004e98 <_dtoa_r+0x658>
 8004ce2:	9b08      	ldr	r3, [sp, #32]
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	f300 80d7 	bgt.w	8004e98 <_dtoa_r+0x658>
 8004cea:	f040 8272 	bne.w	80051d2 <_dtoa_r+0x992>
 8004cee:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004cf2:	2200      	movs	r2, #0
 8004cf4:	4b40      	ldr	r3, [pc, #256]	; (8004df8 <_dtoa_r+0x5b8>)
 8004cf6:	f7fb fbef 	bl	80004d8 <__aeabi_dmul>
 8004cfa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004cfe:	f7fb fe71 	bl	80009e4 <__aeabi_dcmpge>
 8004d02:	9c08      	ldr	r4, [sp, #32]
 8004d04:	4626      	mov	r6, r4
 8004d06:	2800      	cmp	r0, #0
 8004d08:	f040 8248 	bne.w	800519c <_dtoa_r+0x95c>
 8004d0c:	2331      	movs	r3, #49	; 0x31
 8004d0e:	9f03      	ldr	r7, [sp, #12]
 8004d10:	f10a 0a01 	add.w	sl, sl, #1
 8004d14:	f807 3b01 	strb.w	r3, [r7], #1
 8004d18:	e244      	b.n	80051a4 <_dtoa_r+0x964>
 8004d1a:	07e2      	lsls	r2, r4, #31
 8004d1c:	d505      	bpl.n	8004d2a <_dtoa_r+0x4ea>
 8004d1e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8004d22:	f7fb fbd9 	bl	80004d8 <__aeabi_dmul>
 8004d26:	2301      	movs	r3, #1
 8004d28:	3701      	adds	r7, #1
 8004d2a:	1064      	asrs	r4, r4, #1
 8004d2c:	3608      	adds	r6, #8
 8004d2e:	e76d      	b.n	8004c0c <_dtoa_r+0x3cc>
 8004d30:	2702      	movs	r7, #2
 8004d32:	e770      	b.n	8004c16 <_dtoa_r+0x3d6>
 8004d34:	46d0      	mov	r8, sl
 8004d36:	9c08      	ldr	r4, [sp, #32]
 8004d38:	e78f      	b.n	8004c5a <_dtoa_r+0x41a>
 8004d3a:	9903      	ldr	r1, [sp, #12]
 8004d3c:	4b29      	ldr	r3, [pc, #164]	; (8004de4 <_dtoa_r+0x5a4>)
 8004d3e:	4421      	add	r1, r4
 8004d40:	9112      	str	r1, [sp, #72]	; 0x48
 8004d42:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004d44:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8004d48:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8004d4c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8004d50:	2900      	cmp	r1, #0
 8004d52:	d055      	beq.n	8004e00 <_dtoa_r+0x5c0>
 8004d54:	2000      	movs	r0, #0
 8004d56:	4929      	ldr	r1, [pc, #164]	; (8004dfc <_dtoa_r+0x5bc>)
 8004d58:	f7fb fce8 	bl	800072c <__aeabi_ddiv>
 8004d5c:	463b      	mov	r3, r7
 8004d5e:	4632      	mov	r2, r6
 8004d60:	f7fb fa02 	bl	8000168 <__aeabi_dsub>
 8004d64:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004d68:	9f03      	ldr	r7, [sp, #12]
 8004d6a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004d6e:	f7fb fe63 	bl	8000a38 <__aeabi_d2iz>
 8004d72:	4604      	mov	r4, r0
 8004d74:	f7fb fb46 	bl	8000404 <__aeabi_i2d>
 8004d78:	4602      	mov	r2, r0
 8004d7a:	460b      	mov	r3, r1
 8004d7c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004d80:	f7fb f9f2 	bl	8000168 <__aeabi_dsub>
 8004d84:	4602      	mov	r2, r0
 8004d86:	460b      	mov	r3, r1
 8004d88:	3430      	adds	r4, #48	; 0x30
 8004d8a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004d8e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004d92:	f807 4b01 	strb.w	r4, [r7], #1
 8004d96:	f7fb fe11 	bl	80009bc <__aeabi_dcmplt>
 8004d9a:	2800      	cmp	r0, #0
 8004d9c:	d174      	bne.n	8004e88 <_dtoa_r+0x648>
 8004d9e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004da2:	2000      	movs	r0, #0
 8004da4:	4911      	ldr	r1, [pc, #68]	; (8004dec <_dtoa_r+0x5ac>)
 8004da6:	f7fb f9df 	bl	8000168 <__aeabi_dsub>
 8004daa:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004dae:	f7fb fe05 	bl	80009bc <__aeabi_dcmplt>
 8004db2:	2800      	cmp	r0, #0
 8004db4:	f040 80b7 	bne.w	8004f26 <_dtoa_r+0x6e6>
 8004db8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004dba:	429f      	cmp	r7, r3
 8004dbc:	f43f af7a 	beq.w	8004cb4 <_dtoa_r+0x474>
 8004dc0:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004dc4:	2200      	movs	r2, #0
 8004dc6:	4b0a      	ldr	r3, [pc, #40]	; (8004df0 <_dtoa_r+0x5b0>)
 8004dc8:	f7fb fb86 	bl	80004d8 <__aeabi_dmul>
 8004dcc:	2200      	movs	r2, #0
 8004dce:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004dd2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004dd6:	4b06      	ldr	r3, [pc, #24]	; (8004df0 <_dtoa_r+0x5b0>)
 8004dd8:	f7fb fb7e 	bl	80004d8 <__aeabi_dmul>
 8004ddc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004de0:	e7c3      	b.n	8004d6a <_dtoa_r+0x52a>
 8004de2:	bf00      	nop
 8004de4:	08007340 	.word	0x08007340
 8004de8:	08007318 	.word	0x08007318
 8004dec:	3ff00000 	.word	0x3ff00000
 8004df0:	40240000 	.word	0x40240000
 8004df4:	401c0000 	.word	0x401c0000
 8004df8:	40140000 	.word	0x40140000
 8004dfc:	3fe00000 	.word	0x3fe00000
 8004e00:	4630      	mov	r0, r6
 8004e02:	4639      	mov	r1, r7
 8004e04:	f7fb fb68 	bl	80004d8 <__aeabi_dmul>
 8004e08:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004e0a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004e0e:	9c03      	ldr	r4, [sp, #12]
 8004e10:	9314      	str	r3, [sp, #80]	; 0x50
 8004e12:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004e16:	f7fb fe0f 	bl	8000a38 <__aeabi_d2iz>
 8004e1a:	9015      	str	r0, [sp, #84]	; 0x54
 8004e1c:	f7fb faf2 	bl	8000404 <__aeabi_i2d>
 8004e20:	4602      	mov	r2, r0
 8004e22:	460b      	mov	r3, r1
 8004e24:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004e28:	f7fb f99e 	bl	8000168 <__aeabi_dsub>
 8004e2c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004e2e:	4606      	mov	r6, r0
 8004e30:	3330      	adds	r3, #48	; 0x30
 8004e32:	f804 3b01 	strb.w	r3, [r4], #1
 8004e36:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004e38:	460f      	mov	r7, r1
 8004e3a:	429c      	cmp	r4, r3
 8004e3c:	f04f 0200 	mov.w	r2, #0
 8004e40:	d124      	bne.n	8004e8c <_dtoa_r+0x64c>
 8004e42:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004e46:	4bb0      	ldr	r3, [pc, #704]	; (8005108 <_dtoa_r+0x8c8>)
 8004e48:	f7fb f990 	bl	800016c <__adddf3>
 8004e4c:	4602      	mov	r2, r0
 8004e4e:	460b      	mov	r3, r1
 8004e50:	4630      	mov	r0, r6
 8004e52:	4639      	mov	r1, r7
 8004e54:	f7fb fdd0 	bl	80009f8 <__aeabi_dcmpgt>
 8004e58:	2800      	cmp	r0, #0
 8004e5a:	d163      	bne.n	8004f24 <_dtoa_r+0x6e4>
 8004e5c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004e60:	2000      	movs	r0, #0
 8004e62:	49a9      	ldr	r1, [pc, #676]	; (8005108 <_dtoa_r+0x8c8>)
 8004e64:	f7fb f980 	bl	8000168 <__aeabi_dsub>
 8004e68:	4602      	mov	r2, r0
 8004e6a:	460b      	mov	r3, r1
 8004e6c:	4630      	mov	r0, r6
 8004e6e:	4639      	mov	r1, r7
 8004e70:	f7fb fda4 	bl	80009bc <__aeabi_dcmplt>
 8004e74:	2800      	cmp	r0, #0
 8004e76:	f43f af1d 	beq.w	8004cb4 <_dtoa_r+0x474>
 8004e7a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8004e7c:	1e7b      	subs	r3, r7, #1
 8004e7e:	9314      	str	r3, [sp, #80]	; 0x50
 8004e80:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8004e84:	2b30      	cmp	r3, #48	; 0x30
 8004e86:	d0f8      	beq.n	8004e7a <_dtoa_r+0x63a>
 8004e88:	46c2      	mov	sl, r8
 8004e8a:	e03b      	b.n	8004f04 <_dtoa_r+0x6c4>
 8004e8c:	4b9f      	ldr	r3, [pc, #636]	; (800510c <_dtoa_r+0x8cc>)
 8004e8e:	f7fb fb23 	bl	80004d8 <__aeabi_dmul>
 8004e92:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004e96:	e7bc      	b.n	8004e12 <_dtoa_r+0x5d2>
 8004e98:	9f03      	ldr	r7, [sp, #12]
 8004e9a:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8004e9e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004ea2:	4640      	mov	r0, r8
 8004ea4:	4649      	mov	r1, r9
 8004ea6:	f7fb fc41 	bl	800072c <__aeabi_ddiv>
 8004eaa:	f7fb fdc5 	bl	8000a38 <__aeabi_d2iz>
 8004eae:	4604      	mov	r4, r0
 8004eb0:	f7fb faa8 	bl	8000404 <__aeabi_i2d>
 8004eb4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004eb8:	f7fb fb0e 	bl	80004d8 <__aeabi_dmul>
 8004ebc:	4602      	mov	r2, r0
 8004ebe:	460b      	mov	r3, r1
 8004ec0:	4640      	mov	r0, r8
 8004ec2:	4649      	mov	r1, r9
 8004ec4:	f7fb f950 	bl	8000168 <__aeabi_dsub>
 8004ec8:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8004ecc:	f807 6b01 	strb.w	r6, [r7], #1
 8004ed0:	9e03      	ldr	r6, [sp, #12]
 8004ed2:	f8dd c020 	ldr.w	ip, [sp, #32]
 8004ed6:	1bbe      	subs	r6, r7, r6
 8004ed8:	45b4      	cmp	ip, r6
 8004eda:	4602      	mov	r2, r0
 8004edc:	460b      	mov	r3, r1
 8004ede:	d136      	bne.n	8004f4e <_dtoa_r+0x70e>
 8004ee0:	f7fb f944 	bl	800016c <__adddf3>
 8004ee4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004ee8:	4680      	mov	r8, r0
 8004eea:	4689      	mov	r9, r1
 8004eec:	f7fb fd84 	bl	80009f8 <__aeabi_dcmpgt>
 8004ef0:	bb58      	cbnz	r0, 8004f4a <_dtoa_r+0x70a>
 8004ef2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004ef6:	4640      	mov	r0, r8
 8004ef8:	4649      	mov	r1, r9
 8004efa:	f7fb fd55 	bl	80009a8 <__aeabi_dcmpeq>
 8004efe:	b108      	cbz	r0, 8004f04 <_dtoa_r+0x6c4>
 8004f00:	07e1      	lsls	r1, r4, #31
 8004f02:	d422      	bmi.n	8004f4a <_dtoa_r+0x70a>
 8004f04:	4628      	mov	r0, r5
 8004f06:	4659      	mov	r1, fp
 8004f08:	f000 fbdc 	bl	80056c4 <_Bfree>
 8004f0c:	2300      	movs	r3, #0
 8004f0e:	703b      	strb	r3, [r7, #0]
 8004f10:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8004f12:	f10a 0001 	add.w	r0, sl, #1
 8004f16:	6018      	str	r0, [r3, #0]
 8004f18:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	f43f acde 	beq.w	80048dc <_dtoa_r+0x9c>
 8004f20:	601f      	str	r7, [r3, #0]
 8004f22:	e4db      	b.n	80048dc <_dtoa_r+0x9c>
 8004f24:	4627      	mov	r7, r4
 8004f26:	463b      	mov	r3, r7
 8004f28:	461f      	mov	r7, r3
 8004f2a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004f2e:	2a39      	cmp	r2, #57	; 0x39
 8004f30:	d107      	bne.n	8004f42 <_dtoa_r+0x702>
 8004f32:	9a03      	ldr	r2, [sp, #12]
 8004f34:	429a      	cmp	r2, r3
 8004f36:	d1f7      	bne.n	8004f28 <_dtoa_r+0x6e8>
 8004f38:	2230      	movs	r2, #48	; 0x30
 8004f3a:	9903      	ldr	r1, [sp, #12]
 8004f3c:	f108 0801 	add.w	r8, r8, #1
 8004f40:	700a      	strb	r2, [r1, #0]
 8004f42:	781a      	ldrb	r2, [r3, #0]
 8004f44:	3201      	adds	r2, #1
 8004f46:	701a      	strb	r2, [r3, #0]
 8004f48:	e79e      	b.n	8004e88 <_dtoa_r+0x648>
 8004f4a:	46d0      	mov	r8, sl
 8004f4c:	e7eb      	b.n	8004f26 <_dtoa_r+0x6e6>
 8004f4e:	2200      	movs	r2, #0
 8004f50:	4b6e      	ldr	r3, [pc, #440]	; (800510c <_dtoa_r+0x8cc>)
 8004f52:	f7fb fac1 	bl	80004d8 <__aeabi_dmul>
 8004f56:	2200      	movs	r2, #0
 8004f58:	2300      	movs	r3, #0
 8004f5a:	4680      	mov	r8, r0
 8004f5c:	4689      	mov	r9, r1
 8004f5e:	f7fb fd23 	bl	80009a8 <__aeabi_dcmpeq>
 8004f62:	2800      	cmp	r0, #0
 8004f64:	d09b      	beq.n	8004e9e <_dtoa_r+0x65e>
 8004f66:	e7cd      	b.n	8004f04 <_dtoa_r+0x6c4>
 8004f68:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004f6a:	2a00      	cmp	r2, #0
 8004f6c:	f000 80d0 	beq.w	8005110 <_dtoa_r+0x8d0>
 8004f70:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8004f72:	2a01      	cmp	r2, #1
 8004f74:	f300 80ae 	bgt.w	80050d4 <_dtoa_r+0x894>
 8004f78:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8004f7a:	2a00      	cmp	r2, #0
 8004f7c:	f000 80a6 	beq.w	80050cc <_dtoa_r+0x88c>
 8004f80:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8004f84:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8004f86:	9f06      	ldr	r7, [sp, #24]
 8004f88:	9a06      	ldr	r2, [sp, #24]
 8004f8a:	2101      	movs	r1, #1
 8004f8c:	441a      	add	r2, r3
 8004f8e:	9206      	str	r2, [sp, #24]
 8004f90:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004f92:	4628      	mov	r0, r5
 8004f94:	441a      	add	r2, r3
 8004f96:	9209      	str	r2, [sp, #36]	; 0x24
 8004f98:	f000 fc4a 	bl	8005830 <__i2b>
 8004f9c:	4606      	mov	r6, r0
 8004f9e:	2f00      	cmp	r7, #0
 8004fa0:	dd0c      	ble.n	8004fbc <_dtoa_r+0x77c>
 8004fa2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	dd09      	ble.n	8004fbc <_dtoa_r+0x77c>
 8004fa8:	42bb      	cmp	r3, r7
 8004faa:	bfa8      	it	ge
 8004fac:	463b      	movge	r3, r7
 8004fae:	9a06      	ldr	r2, [sp, #24]
 8004fb0:	1aff      	subs	r7, r7, r3
 8004fb2:	1ad2      	subs	r2, r2, r3
 8004fb4:	9206      	str	r2, [sp, #24]
 8004fb6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004fb8:	1ad3      	subs	r3, r2, r3
 8004fba:	9309      	str	r3, [sp, #36]	; 0x24
 8004fbc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004fbe:	b1f3      	cbz	r3, 8004ffe <_dtoa_r+0x7be>
 8004fc0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	f000 80a8 	beq.w	8005118 <_dtoa_r+0x8d8>
 8004fc8:	2c00      	cmp	r4, #0
 8004fca:	dd10      	ble.n	8004fee <_dtoa_r+0x7ae>
 8004fcc:	4631      	mov	r1, r6
 8004fce:	4622      	mov	r2, r4
 8004fd0:	4628      	mov	r0, r5
 8004fd2:	f000 fceb 	bl	80059ac <__pow5mult>
 8004fd6:	465a      	mov	r2, fp
 8004fd8:	4601      	mov	r1, r0
 8004fda:	4606      	mov	r6, r0
 8004fdc:	4628      	mov	r0, r5
 8004fde:	f000 fc3d 	bl	800585c <__multiply>
 8004fe2:	4680      	mov	r8, r0
 8004fe4:	4659      	mov	r1, fp
 8004fe6:	4628      	mov	r0, r5
 8004fe8:	f000 fb6c 	bl	80056c4 <_Bfree>
 8004fec:	46c3      	mov	fp, r8
 8004fee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004ff0:	1b1a      	subs	r2, r3, r4
 8004ff2:	d004      	beq.n	8004ffe <_dtoa_r+0x7be>
 8004ff4:	4659      	mov	r1, fp
 8004ff6:	4628      	mov	r0, r5
 8004ff8:	f000 fcd8 	bl	80059ac <__pow5mult>
 8004ffc:	4683      	mov	fp, r0
 8004ffe:	2101      	movs	r1, #1
 8005000:	4628      	mov	r0, r5
 8005002:	f000 fc15 	bl	8005830 <__i2b>
 8005006:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005008:	4604      	mov	r4, r0
 800500a:	2b00      	cmp	r3, #0
 800500c:	f340 8086 	ble.w	800511c <_dtoa_r+0x8dc>
 8005010:	461a      	mov	r2, r3
 8005012:	4601      	mov	r1, r0
 8005014:	4628      	mov	r0, r5
 8005016:	f000 fcc9 	bl	80059ac <__pow5mult>
 800501a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800501c:	4604      	mov	r4, r0
 800501e:	2b01      	cmp	r3, #1
 8005020:	dd7f      	ble.n	8005122 <_dtoa_r+0x8e2>
 8005022:	f04f 0800 	mov.w	r8, #0
 8005026:	6923      	ldr	r3, [r4, #16]
 8005028:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800502c:	6918      	ldr	r0, [r3, #16]
 800502e:	f000 fbb1 	bl	8005794 <__hi0bits>
 8005032:	f1c0 0020 	rsb	r0, r0, #32
 8005036:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005038:	4418      	add	r0, r3
 800503a:	f010 001f 	ands.w	r0, r0, #31
 800503e:	f000 8092 	beq.w	8005166 <_dtoa_r+0x926>
 8005042:	f1c0 0320 	rsb	r3, r0, #32
 8005046:	2b04      	cmp	r3, #4
 8005048:	f340 808a 	ble.w	8005160 <_dtoa_r+0x920>
 800504c:	f1c0 001c 	rsb	r0, r0, #28
 8005050:	9b06      	ldr	r3, [sp, #24]
 8005052:	4407      	add	r7, r0
 8005054:	4403      	add	r3, r0
 8005056:	9306      	str	r3, [sp, #24]
 8005058:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800505a:	4403      	add	r3, r0
 800505c:	9309      	str	r3, [sp, #36]	; 0x24
 800505e:	9b06      	ldr	r3, [sp, #24]
 8005060:	2b00      	cmp	r3, #0
 8005062:	dd05      	ble.n	8005070 <_dtoa_r+0x830>
 8005064:	4659      	mov	r1, fp
 8005066:	461a      	mov	r2, r3
 8005068:	4628      	mov	r0, r5
 800506a:	f000 fcf9 	bl	8005a60 <__lshift>
 800506e:	4683      	mov	fp, r0
 8005070:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005072:	2b00      	cmp	r3, #0
 8005074:	dd05      	ble.n	8005082 <_dtoa_r+0x842>
 8005076:	4621      	mov	r1, r4
 8005078:	461a      	mov	r2, r3
 800507a:	4628      	mov	r0, r5
 800507c:	f000 fcf0 	bl	8005a60 <__lshift>
 8005080:	4604      	mov	r4, r0
 8005082:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005084:	2b00      	cmp	r3, #0
 8005086:	d070      	beq.n	800516a <_dtoa_r+0x92a>
 8005088:	4621      	mov	r1, r4
 800508a:	4658      	mov	r0, fp
 800508c:	f000 fd58 	bl	8005b40 <__mcmp>
 8005090:	2800      	cmp	r0, #0
 8005092:	da6a      	bge.n	800516a <_dtoa_r+0x92a>
 8005094:	2300      	movs	r3, #0
 8005096:	4659      	mov	r1, fp
 8005098:	220a      	movs	r2, #10
 800509a:	4628      	mov	r0, r5
 800509c:	f000 fb34 	bl	8005708 <__multadd>
 80050a0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80050a2:	4683      	mov	fp, r0
 80050a4:	f10a 3aff 	add.w	sl, sl, #4294967295
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	f000 8194 	beq.w	80053d6 <_dtoa_r+0xb96>
 80050ae:	4631      	mov	r1, r6
 80050b0:	2300      	movs	r3, #0
 80050b2:	220a      	movs	r2, #10
 80050b4:	4628      	mov	r0, r5
 80050b6:	f000 fb27 	bl	8005708 <__multadd>
 80050ba:	f1b9 0f00 	cmp.w	r9, #0
 80050be:	4606      	mov	r6, r0
 80050c0:	f300 8093 	bgt.w	80051ea <_dtoa_r+0x9aa>
 80050c4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80050c6:	2b02      	cmp	r3, #2
 80050c8:	dc57      	bgt.n	800517a <_dtoa_r+0x93a>
 80050ca:	e08e      	b.n	80051ea <_dtoa_r+0x9aa>
 80050cc:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80050ce:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80050d2:	e757      	b.n	8004f84 <_dtoa_r+0x744>
 80050d4:	9b08      	ldr	r3, [sp, #32]
 80050d6:	1e5c      	subs	r4, r3, #1
 80050d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80050da:	42a3      	cmp	r3, r4
 80050dc:	bfb7      	itett	lt
 80050de:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80050e0:	1b1c      	subge	r4, r3, r4
 80050e2:	1ae2      	sublt	r2, r4, r3
 80050e4:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80050e6:	bfbe      	ittt	lt
 80050e8:	940a      	strlt	r4, [sp, #40]	; 0x28
 80050ea:	189b      	addlt	r3, r3, r2
 80050ec:	930e      	strlt	r3, [sp, #56]	; 0x38
 80050ee:	9b08      	ldr	r3, [sp, #32]
 80050f0:	bfb8      	it	lt
 80050f2:	2400      	movlt	r4, #0
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	bfbb      	ittet	lt
 80050f8:	9b06      	ldrlt	r3, [sp, #24]
 80050fa:	9a08      	ldrlt	r2, [sp, #32]
 80050fc:	9f06      	ldrge	r7, [sp, #24]
 80050fe:	1a9f      	sublt	r7, r3, r2
 8005100:	bfac      	ite	ge
 8005102:	9b08      	ldrge	r3, [sp, #32]
 8005104:	2300      	movlt	r3, #0
 8005106:	e73f      	b.n	8004f88 <_dtoa_r+0x748>
 8005108:	3fe00000 	.word	0x3fe00000
 800510c:	40240000 	.word	0x40240000
 8005110:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8005112:	9f06      	ldr	r7, [sp, #24]
 8005114:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8005116:	e742      	b.n	8004f9e <_dtoa_r+0x75e>
 8005118:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800511a:	e76b      	b.n	8004ff4 <_dtoa_r+0x7b4>
 800511c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800511e:	2b01      	cmp	r3, #1
 8005120:	dc19      	bgt.n	8005156 <_dtoa_r+0x916>
 8005122:	9b04      	ldr	r3, [sp, #16]
 8005124:	b9bb      	cbnz	r3, 8005156 <_dtoa_r+0x916>
 8005126:	9b05      	ldr	r3, [sp, #20]
 8005128:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800512c:	b99b      	cbnz	r3, 8005156 <_dtoa_r+0x916>
 800512e:	9b05      	ldr	r3, [sp, #20]
 8005130:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005134:	0d1b      	lsrs	r3, r3, #20
 8005136:	051b      	lsls	r3, r3, #20
 8005138:	b183      	cbz	r3, 800515c <_dtoa_r+0x91c>
 800513a:	f04f 0801 	mov.w	r8, #1
 800513e:	9b06      	ldr	r3, [sp, #24]
 8005140:	3301      	adds	r3, #1
 8005142:	9306      	str	r3, [sp, #24]
 8005144:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005146:	3301      	adds	r3, #1
 8005148:	9309      	str	r3, [sp, #36]	; 0x24
 800514a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800514c:	2b00      	cmp	r3, #0
 800514e:	f47f af6a 	bne.w	8005026 <_dtoa_r+0x7e6>
 8005152:	2001      	movs	r0, #1
 8005154:	e76f      	b.n	8005036 <_dtoa_r+0x7f6>
 8005156:	f04f 0800 	mov.w	r8, #0
 800515a:	e7f6      	b.n	800514a <_dtoa_r+0x90a>
 800515c:	4698      	mov	r8, r3
 800515e:	e7f4      	b.n	800514a <_dtoa_r+0x90a>
 8005160:	f43f af7d 	beq.w	800505e <_dtoa_r+0x81e>
 8005164:	4618      	mov	r0, r3
 8005166:	301c      	adds	r0, #28
 8005168:	e772      	b.n	8005050 <_dtoa_r+0x810>
 800516a:	9b08      	ldr	r3, [sp, #32]
 800516c:	2b00      	cmp	r3, #0
 800516e:	dc36      	bgt.n	80051de <_dtoa_r+0x99e>
 8005170:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005172:	2b02      	cmp	r3, #2
 8005174:	dd33      	ble.n	80051de <_dtoa_r+0x99e>
 8005176:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800517a:	f1b9 0f00 	cmp.w	r9, #0
 800517e:	d10d      	bne.n	800519c <_dtoa_r+0x95c>
 8005180:	4621      	mov	r1, r4
 8005182:	464b      	mov	r3, r9
 8005184:	2205      	movs	r2, #5
 8005186:	4628      	mov	r0, r5
 8005188:	f000 fabe 	bl	8005708 <__multadd>
 800518c:	4601      	mov	r1, r0
 800518e:	4604      	mov	r4, r0
 8005190:	4658      	mov	r0, fp
 8005192:	f000 fcd5 	bl	8005b40 <__mcmp>
 8005196:	2800      	cmp	r0, #0
 8005198:	f73f adb8 	bgt.w	8004d0c <_dtoa_r+0x4cc>
 800519c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800519e:	9f03      	ldr	r7, [sp, #12]
 80051a0:	ea6f 0a03 	mvn.w	sl, r3
 80051a4:	f04f 0800 	mov.w	r8, #0
 80051a8:	4621      	mov	r1, r4
 80051aa:	4628      	mov	r0, r5
 80051ac:	f000 fa8a 	bl	80056c4 <_Bfree>
 80051b0:	2e00      	cmp	r6, #0
 80051b2:	f43f aea7 	beq.w	8004f04 <_dtoa_r+0x6c4>
 80051b6:	f1b8 0f00 	cmp.w	r8, #0
 80051ba:	d005      	beq.n	80051c8 <_dtoa_r+0x988>
 80051bc:	45b0      	cmp	r8, r6
 80051be:	d003      	beq.n	80051c8 <_dtoa_r+0x988>
 80051c0:	4641      	mov	r1, r8
 80051c2:	4628      	mov	r0, r5
 80051c4:	f000 fa7e 	bl	80056c4 <_Bfree>
 80051c8:	4631      	mov	r1, r6
 80051ca:	4628      	mov	r0, r5
 80051cc:	f000 fa7a 	bl	80056c4 <_Bfree>
 80051d0:	e698      	b.n	8004f04 <_dtoa_r+0x6c4>
 80051d2:	2400      	movs	r4, #0
 80051d4:	4626      	mov	r6, r4
 80051d6:	e7e1      	b.n	800519c <_dtoa_r+0x95c>
 80051d8:	46c2      	mov	sl, r8
 80051da:	4626      	mov	r6, r4
 80051dc:	e596      	b.n	8004d0c <_dtoa_r+0x4cc>
 80051de:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80051e0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	f000 80fd 	beq.w	80053e4 <_dtoa_r+0xba4>
 80051ea:	2f00      	cmp	r7, #0
 80051ec:	dd05      	ble.n	80051fa <_dtoa_r+0x9ba>
 80051ee:	4631      	mov	r1, r6
 80051f0:	463a      	mov	r2, r7
 80051f2:	4628      	mov	r0, r5
 80051f4:	f000 fc34 	bl	8005a60 <__lshift>
 80051f8:	4606      	mov	r6, r0
 80051fa:	f1b8 0f00 	cmp.w	r8, #0
 80051fe:	d05c      	beq.n	80052ba <_dtoa_r+0xa7a>
 8005200:	4628      	mov	r0, r5
 8005202:	6871      	ldr	r1, [r6, #4]
 8005204:	f000 fa1e 	bl	8005644 <_Balloc>
 8005208:	4607      	mov	r7, r0
 800520a:	b928      	cbnz	r0, 8005218 <_dtoa_r+0x9d8>
 800520c:	4602      	mov	r2, r0
 800520e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8005212:	4b7f      	ldr	r3, [pc, #508]	; (8005410 <_dtoa_r+0xbd0>)
 8005214:	f7ff bb28 	b.w	8004868 <_dtoa_r+0x28>
 8005218:	6932      	ldr	r2, [r6, #16]
 800521a:	f106 010c 	add.w	r1, r6, #12
 800521e:	3202      	adds	r2, #2
 8005220:	0092      	lsls	r2, r2, #2
 8005222:	300c      	adds	r0, #12
 8005224:	f7fe fdbc 	bl	8003da0 <memcpy>
 8005228:	2201      	movs	r2, #1
 800522a:	4639      	mov	r1, r7
 800522c:	4628      	mov	r0, r5
 800522e:	f000 fc17 	bl	8005a60 <__lshift>
 8005232:	46b0      	mov	r8, r6
 8005234:	4606      	mov	r6, r0
 8005236:	9b03      	ldr	r3, [sp, #12]
 8005238:	3301      	adds	r3, #1
 800523a:	9308      	str	r3, [sp, #32]
 800523c:	9b03      	ldr	r3, [sp, #12]
 800523e:	444b      	add	r3, r9
 8005240:	930a      	str	r3, [sp, #40]	; 0x28
 8005242:	9b04      	ldr	r3, [sp, #16]
 8005244:	f003 0301 	and.w	r3, r3, #1
 8005248:	9309      	str	r3, [sp, #36]	; 0x24
 800524a:	9b08      	ldr	r3, [sp, #32]
 800524c:	4621      	mov	r1, r4
 800524e:	3b01      	subs	r3, #1
 8005250:	4658      	mov	r0, fp
 8005252:	9304      	str	r3, [sp, #16]
 8005254:	f7ff fa65 	bl	8004722 <quorem>
 8005258:	4603      	mov	r3, r0
 800525a:	4641      	mov	r1, r8
 800525c:	3330      	adds	r3, #48	; 0x30
 800525e:	9006      	str	r0, [sp, #24]
 8005260:	4658      	mov	r0, fp
 8005262:	930b      	str	r3, [sp, #44]	; 0x2c
 8005264:	f000 fc6c 	bl	8005b40 <__mcmp>
 8005268:	4632      	mov	r2, r6
 800526a:	4681      	mov	r9, r0
 800526c:	4621      	mov	r1, r4
 800526e:	4628      	mov	r0, r5
 8005270:	f000 fc82 	bl	8005b78 <__mdiff>
 8005274:	68c2      	ldr	r2, [r0, #12]
 8005276:	4607      	mov	r7, r0
 8005278:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800527a:	bb02      	cbnz	r2, 80052be <_dtoa_r+0xa7e>
 800527c:	4601      	mov	r1, r0
 800527e:	4658      	mov	r0, fp
 8005280:	f000 fc5e 	bl	8005b40 <__mcmp>
 8005284:	4602      	mov	r2, r0
 8005286:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005288:	4639      	mov	r1, r7
 800528a:	4628      	mov	r0, r5
 800528c:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8005290:	f000 fa18 	bl	80056c4 <_Bfree>
 8005294:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005296:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005298:	9f08      	ldr	r7, [sp, #32]
 800529a:	ea43 0102 	orr.w	r1, r3, r2
 800529e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80052a0:	430b      	orrs	r3, r1
 80052a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80052a4:	d10d      	bne.n	80052c2 <_dtoa_r+0xa82>
 80052a6:	2b39      	cmp	r3, #57	; 0x39
 80052a8:	d029      	beq.n	80052fe <_dtoa_r+0xabe>
 80052aa:	f1b9 0f00 	cmp.w	r9, #0
 80052ae:	dd01      	ble.n	80052b4 <_dtoa_r+0xa74>
 80052b0:	9b06      	ldr	r3, [sp, #24]
 80052b2:	3331      	adds	r3, #49	; 0x31
 80052b4:	9a04      	ldr	r2, [sp, #16]
 80052b6:	7013      	strb	r3, [r2, #0]
 80052b8:	e776      	b.n	80051a8 <_dtoa_r+0x968>
 80052ba:	4630      	mov	r0, r6
 80052bc:	e7b9      	b.n	8005232 <_dtoa_r+0x9f2>
 80052be:	2201      	movs	r2, #1
 80052c0:	e7e2      	b.n	8005288 <_dtoa_r+0xa48>
 80052c2:	f1b9 0f00 	cmp.w	r9, #0
 80052c6:	db06      	blt.n	80052d6 <_dtoa_r+0xa96>
 80052c8:	9922      	ldr	r1, [sp, #136]	; 0x88
 80052ca:	ea41 0909 	orr.w	r9, r1, r9
 80052ce:	9909      	ldr	r1, [sp, #36]	; 0x24
 80052d0:	ea59 0101 	orrs.w	r1, r9, r1
 80052d4:	d120      	bne.n	8005318 <_dtoa_r+0xad8>
 80052d6:	2a00      	cmp	r2, #0
 80052d8:	ddec      	ble.n	80052b4 <_dtoa_r+0xa74>
 80052da:	4659      	mov	r1, fp
 80052dc:	2201      	movs	r2, #1
 80052de:	4628      	mov	r0, r5
 80052e0:	9308      	str	r3, [sp, #32]
 80052e2:	f000 fbbd 	bl	8005a60 <__lshift>
 80052e6:	4621      	mov	r1, r4
 80052e8:	4683      	mov	fp, r0
 80052ea:	f000 fc29 	bl	8005b40 <__mcmp>
 80052ee:	2800      	cmp	r0, #0
 80052f0:	9b08      	ldr	r3, [sp, #32]
 80052f2:	dc02      	bgt.n	80052fa <_dtoa_r+0xaba>
 80052f4:	d1de      	bne.n	80052b4 <_dtoa_r+0xa74>
 80052f6:	07da      	lsls	r2, r3, #31
 80052f8:	d5dc      	bpl.n	80052b4 <_dtoa_r+0xa74>
 80052fa:	2b39      	cmp	r3, #57	; 0x39
 80052fc:	d1d8      	bne.n	80052b0 <_dtoa_r+0xa70>
 80052fe:	2339      	movs	r3, #57	; 0x39
 8005300:	9a04      	ldr	r2, [sp, #16]
 8005302:	7013      	strb	r3, [r2, #0]
 8005304:	463b      	mov	r3, r7
 8005306:	461f      	mov	r7, r3
 8005308:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800530c:	3b01      	subs	r3, #1
 800530e:	2a39      	cmp	r2, #57	; 0x39
 8005310:	d050      	beq.n	80053b4 <_dtoa_r+0xb74>
 8005312:	3201      	adds	r2, #1
 8005314:	701a      	strb	r2, [r3, #0]
 8005316:	e747      	b.n	80051a8 <_dtoa_r+0x968>
 8005318:	2a00      	cmp	r2, #0
 800531a:	dd03      	ble.n	8005324 <_dtoa_r+0xae4>
 800531c:	2b39      	cmp	r3, #57	; 0x39
 800531e:	d0ee      	beq.n	80052fe <_dtoa_r+0xabe>
 8005320:	3301      	adds	r3, #1
 8005322:	e7c7      	b.n	80052b4 <_dtoa_r+0xa74>
 8005324:	9a08      	ldr	r2, [sp, #32]
 8005326:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005328:	f802 3c01 	strb.w	r3, [r2, #-1]
 800532c:	428a      	cmp	r2, r1
 800532e:	d02a      	beq.n	8005386 <_dtoa_r+0xb46>
 8005330:	4659      	mov	r1, fp
 8005332:	2300      	movs	r3, #0
 8005334:	220a      	movs	r2, #10
 8005336:	4628      	mov	r0, r5
 8005338:	f000 f9e6 	bl	8005708 <__multadd>
 800533c:	45b0      	cmp	r8, r6
 800533e:	4683      	mov	fp, r0
 8005340:	f04f 0300 	mov.w	r3, #0
 8005344:	f04f 020a 	mov.w	r2, #10
 8005348:	4641      	mov	r1, r8
 800534a:	4628      	mov	r0, r5
 800534c:	d107      	bne.n	800535e <_dtoa_r+0xb1e>
 800534e:	f000 f9db 	bl	8005708 <__multadd>
 8005352:	4680      	mov	r8, r0
 8005354:	4606      	mov	r6, r0
 8005356:	9b08      	ldr	r3, [sp, #32]
 8005358:	3301      	adds	r3, #1
 800535a:	9308      	str	r3, [sp, #32]
 800535c:	e775      	b.n	800524a <_dtoa_r+0xa0a>
 800535e:	f000 f9d3 	bl	8005708 <__multadd>
 8005362:	4631      	mov	r1, r6
 8005364:	4680      	mov	r8, r0
 8005366:	2300      	movs	r3, #0
 8005368:	220a      	movs	r2, #10
 800536a:	4628      	mov	r0, r5
 800536c:	f000 f9cc 	bl	8005708 <__multadd>
 8005370:	4606      	mov	r6, r0
 8005372:	e7f0      	b.n	8005356 <_dtoa_r+0xb16>
 8005374:	f1b9 0f00 	cmp.w	r9, #0
 8005378:	bfcc      	ite	gt
 800537a:	464f      	movgt	r7, r9
 800537c:	2701      	movle	r7, #1
 800537e:	f04f 0800 	mov.w	r8, #0
 8005382:	9a03      	ldr	r2, [sp, #12]
 8005384:	4417      	add	r7, r2
 8005386:	4659      	mov	r1, fp
 8005388:	2201      	movs	r2, #1
 800538a:	4628      	mov	r0, r5
 800538c:	9308      	str	r3, [sp, #32]
 800538e:	f000 fb67 	bl	8005a60 <__lshift>
 8005392:	4621      	mov	r1, r4
 8005394:	4683      	mov	fp, r0
 8005396:	f000 fbd3 	bl	8005b40 <__mcmp>
 800539a:	2800      	cmp	r0, #0
 800539c:	dcb2      	bgt.n	8005304 <_dtoa_r+0xac4>
 800539e:	d102      	bne.n	80053a6 <_dtoa_r+0xb66>
 80053a0:	9b08      	ldr	r3, [sp, #32]
 80053a2:	07db      	lsls	r3, r3, #31
 80053a4:	d4ae      	bmi.n	8005304 <_dtoa_r+0xac4>
 80053a6:	463b      	mov	r3, r7
 80053a8:	461f      	mov	r7, r3
 80053aa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80053ae:	2a30      	cmp	r2, #48	; 0x30
 80053b0:	d0fa      	beq.n	80053a8 <_dtoa_r+0xb68>
 80053b2:	e6f9      	b.n	80051a8 <_dtoa_r+0x968>
 80053b4:	9a03      	ldr	r2, [sp, #12]
 80053b6:	429a      	cmp	r2, r3
 80053b8:	d1a5      	bne.n	8005306 <_dtoa_r+0xac6>
 80053ba:	2331      	movs	r3, #49	; 0x31
 80053bc:	f10a 0a01 	add.w	sl, sl, #1
 80053c0:	e779      	b.n	80052b6 <_dtoa_r+0xa76>
 80053c2:	4b14      	ldr	r3, [pc, #80]	; (8005414 <_dtoa_r+0xbd4>)
 80053c4:	f7ff baa8 	b.w	8004918 <_dtoa_r+0xd8>
 80053c8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	f47f aa81 	bne.w	80048d2 <_dtoa_r+0x92>
 80053d0:	4b11      	ldr	r3, [pc, #68]	; (8005418 <_dtoa_r+0xbd8>)
 80053d2:	f7ff baa1 	b.w	8004918 <_dtoa_r+0xd8>
 80053d6:	f1b9 0f00 	cmp.w	r9, #0
 80053da:	dc03      	bgt.n	80053e4 <_dtoa_r+0xba4>
 80053dc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80053de:	2b02      	cmp	r3, #2
 80053e0:	f73f aecb 	bgt.w	800517a <_dtoa_r+0x93a>
 80053e4:	9f03      	ldr	r7, [sp, #12]
 80053e6:	4621      	mov	r1, r4
 80053e8:	4658      	mov	r0, fp
 80053ea:	f7ff f99a 	bl	8004722 <quorem>
 80053ee:	9a03      	ldr	r2, [sp, #12]
 80053f0:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80053f4:	f807 3b01 	strb.w	r3, [r7], #1
 80053f8:	1aba      	subs	r2, r7, r2
 80053fa:	4591      	cmp	r9, r2
 80053fc:	ddba      	ble.n	8005374 <_dtoa_r+0xb34>
 80053fe:	4659      	mov	r1, fp
 8005400:	2300      	movs	r3, #0
 8005402:	220a      	movs	r2, #10
 8005404:	4628      	mov	r0, r5
 8005406:	f000 f97f 	bl	8005708 <__multadd>
 800540a:	4683      	mov	fp, r0
 800540c:	e7eb      	b.n	80053e6 <_dtoa_r+0xba6>
 800540e:	bf00      	nop
 8005410:	08007247 	.word	0x08007247
 8005414:	080071a4 	.word	0x080071a4
 8005418:	080071c8 	.word	0x080071c8

0800541c <std>:
 800541c:	2300      	movs	r3, #0
 800541e:	b510      	push	{r4, lr}
 8005420:	4604      	mov	r4, r0
 8005422:	e9c0 3300 	strd	r3, r3, [r0]
 8005426:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800542a:	6083      	str	r3, [r0, #8]
 800542c:	8181      	strh	r1, [r0, #12]
 800542e:	6643      	str	r3, [r0, #100]	; 0x64
 8005430:	81c2      	strh	r2, [r0, #14]
 8005432:	6183      	str	r3, [r0, #24]
 8005434:	4619      	mov	r1, r3
 8005436:	2208      	movs	r2, #8
 8005438:	305c      	adds	r0, #92	; 0x5c
 800543a:	f7fe fcbf 	bl	8003dbc <memset>
 800543e:	4b05      	ldr	r3, [pc, #20]	; (8005454 <std+0x38>)
 8005440:	6224      	str	r4, [r4, #32]
 8005442:	6263      	str	r3, [r4, #36]	; 0x24
 8005444:	4b04      	ldr	r3, [pc, #16]	; (8005458 <std+0x3c>)
 8005446:	62a3      	str	r3, [r4, #40]	; 0x28
 8005448:	4b04      	ldr	r3, [pc, #16]	; (800545c <std+0x40>)
 800544a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800544c:	4b04      	ldr	r3, [pc, #16]	; (8005460 <std+0x44>)
 800544e:	6323      	str	r3, [r4, #48]	; 0x30
 8005450:	bd10      	pop	{r4, pc}
 8005452:	bf00      	nop
 8005454:	080064b1 	.word	0x080064b1
 8005458:	080064d3 	.word	0x080064d3
 800545c:	0800650b 	.word	0x0800650b
 8005460:	0800652f 	.word	0x0800652f

08005464 <_cleanup_r>:
 8005464:	4901      	ldr	r1, [pc, #4]	; (800546c <_cleanup_r+0x8>)
 8005466:	f000 b8af 	b.w	80055c8 <_fwalk_reent>
 800546a:	bf00      	nop
 800546c:	0800683d 	.word	0x0800683d

08005470 <__sfmoreglue>:
 8005470:	2268      	movs	r2, #104	; 0x68
 8005472:	b570      	push	{r4, r5, r6, lr}
 8005474:	1e4d      	subs	r5, r1, #1
 8005476:	4355      	muls	r5, r2
 8005478:	460e      	mov	r6, r1
 800547a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800547e:	f000 fcdf 	bl	8005e40 <_malloc_r>
 8005482:	4604      	mov	r4, r0
 8005484:	b140      	cbz	r0, 8005498 <__sfmoreglue+0x28>
 8005486:	2100      	movs	r1, #0
 8005488:	e9c0 1600 	strd	r1, r6, [r0]
 800548c:	300c      	adds	r0, #12
 800548e:	60a0      	str	r0, [r4, #8]
 8005490:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005494:	f7fe fc92 	bl	8003dbc <memset>
 8005498:	4620      	mov	r0, r4
 800549a:	bd70      	pop	{r4, r5, r6, pc}

0800549c <__sfp_lock_acquire>:
 800549c:	4801      	ldr	r0, [pc, #4]	; (80054a4 <__sfp_lock_acquire+0x8>)
 800549e:	f000 b8b8 	b.w	8005612 <__retarget_lock_acquire_recursive>
 80054a2:	bf00      	nop
 80054a4:	20001155 	.word	0x20001155

080054a8 <__sfp_lock_release>:
 80054a8:	4801      	ldr	r0, [pc, #4]	; (80054b0 <__sfp_lock_release+0x8>)
 80054aa:	f000 b8b3 	b.w	8005614 <__retarget_lock_release_recursive>
 80054ae:	bf00      	nop
 80054b0:	20001155 	.word	0x20001155

080054b4 <__sinit_lock_acquire>:
 80054b4:	4801      	ldr	r0, [pc, #4]	; (80054bc <__sinit_lock_acquire+0x8>)
 80054b6:	f000 b8ac 	b.w	8005612 <__retarget_lock_acquire_recursive>
 80054ba:	bf00      	nop
 80054bc:	20001156 	.word	0x20001156

080054c0 <__sinit_lock_release>:
 80054c0:	4801      	ldr	r0, [pc, #4]	; (80054c8 <__sinit_lock_release+0x8>)
 80054c2:	f000 b8a7 	b.w	8005614 <__retarget_lock_release_recursive>
 80054c6:	bf00      	nop
 80054c8:	20001156 	.word	0x20001156

080054cc <__sinit>:
 80054cc:	b510      	push	{r4, lr}
 80054ce:	4604      	mov	r4, r0
 80054d0:	f7ff fff0 	bl	80054b4 <__sinit_lock_acquire>
 80054d4:	69a3      	ldr	r3, [r4, #24]
 80054d6:	b11b      	cbz	r3, 80054e0 <__sinit+0x14>
 80054d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80054dc:	f7ff bff0 	b.w	80054c0 <__sinit_lock_release>
 80054e0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80054e4:	6523      	str	r3, [r4, #80]	; 0x50
 80054e6:	4b13      	ldr	r3, [pc, #76]	; (8005534 <__sinit+0x68>)
 80054e8:	4a13      	ldr	r2, [pc, #76]	; (8005538 <__sinit+0x6c>)
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	62a2      	str	r2, [r4, #40]	; 0x28
 80054ee:	42a3      	cmp	r3, r4
 80054f0:	bf08      	it	eq
 80054f2:	2301      	moveq	r3, #1
 80054f4:	4620      	mov	r0, r4
 80054f6:	bf08      	it	eq
 80054f8:	61a3      	streq	r3, [r4, #24]
 80054fa:	f000 f81f 	bl	800553c <__sfp>
 80054fe:	6060      	str	r0, [r4, #4]
 8005500:	4620      	mov	r0, r4
 8005502:	f000 f81b 	bl	800553c <__sfp>
 8005506:	60a0      	str	r0, [r4, #8]
 8005508:	4620      	mov	r0, r4
 800550a:	f000 f817 	bl	800553c <__sfp>
 800550e:	2200      	movs	r2, #0
 8005510:	2104      	movs	r1, #4
 8005512:	60e0      	str	r0, [r4, #12]
 8005514:	6860      	ldr	r0, [r4, #4]
 8005516:	f7ff ff81 	bl	800541c <std>
 800551a:	2201      	movs	r2, #1
 800551c:	2109      	movs	r1, #9
 800551e:	68a0      	ldr	r0, [r4, #8]
 8005520:	f7ff ff7c 	bl	800541c <std>
 8005524:	2202      	movs	r2, #2
 8005526:	2112      	movs	r1, #18
 8005528:	68e0      	ldr	r0, [r4, #12]
 800552a:	f7ff ff77 	bl	800541c <std>
 800552e:	2301      	movs	r3, #1
 8005530:	61a3      	str	r3, [r4, #24]
 8005532:	e7d1      	b.n	80054d8 <__sinit+0xc>
 8005534:	08007190 	.word	0x08007190
 8005538:	08005465 	.word	0x08005465

0800553c <__sfp>:
 800553c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800553e:	4607      	mov	r7, r0
 8005540:	f7ff ffac 	bl	800549c <__sfp_lock_acquire>
 8005544:	4b1e      	ldr	r3, [pc, #120]	; (80055c0 <__sfp+0x84>)
 8005546:	681e      	ldr	r6, [r3, #0]
 8005548:	69b3      	ldr	r3, [r6, #24]
 800554a:	b913      	cbnz	r3, 8005552 <__sfp+0x16>
 800554c:	4630      	mov	r0, r6
 800554e:	f7ff ffbd 	bl	80054cc <__sinit>
 8005552:	3648      	adds	r6, #72	; 0x48
 8005554:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005558:	3b01      	subs	r3, #1
 800555a:	d503      	bpl.n	8005564 <__sfp+0x28>
 800555c:	6833      	ldr	r3, [r6, #0]
 800555e:	b30b      	cbz	r3, 80055a4 <__sfp+0x68>
 8005560:	6836      	ldr	r6, [r6, #0]
 8005562:	e7f7      	b.n	8005554 <__sfp+0x18>
 8005564:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005568:	b9d5      	cbnz	r5, 80055a0 <__sfp+0x64>
 800556a:	4b16      	ldr	r3, [pc, #88]	; (80055c4 <__sfp+0x88>)
 800556c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005570:	60e3      	str	r3, [r4, #12]
 8005572:	6665      	str	r5, [r4, #100]	; 0x64
 8005574:	f000 f84c 	bl	8005610 <__retarget_lock_init_recursive>
 8005578:	f7ff ff96 	bl	80054a8 <__sfp_lock_release>
 800557c:	2208      	movs	r2, #8
 800557e:	4629      	mov	r1, r5
 8005580:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005584:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005588:	6025      	str	r5, [r4, #0]
 800558a:	61a5      	str	r5, [r4, #24]
 800558c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005590:	f7fe fc14 	bl	8003dbc <memset>
 8005594:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005598:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800559c:	4620      	mov	r0, r4
 800559e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80055a0:	3468      	adds	r4, #104	; 0x68
 80055a2:	e7d9      	b.n	8005558 <__sfp+0x1c>
 80055a4:	2104      	movs	r1, #4
 80055a6:	4638      	mov	r0, r7
 80055a8:	f7ff ff62 	bl	8005470 <__sfmoreglue>
 80055ac:	4604      	mov	r4, r0
 80055ae:	6030      	str	r0, [r6, #0]
 80055b0:	2800      	cmp	r0, #0
 80055b2:	d1d5      	bne.n	8005560 <__sfp+0x24>
 80055b4:	f7ff ff78 	bl	80054a8 <__sfp_lock_release>
 80055b8:	230c      	movs	r3, #12
 80055ba:	603b      	str	r3, [r7, #0]
 80055bc:	e7ee      	b.n	800559c <__sfp+0x60>
 80055be:	bf00      	nop
 80055c0:	08007190 	.word	0x08007190
 80055c4:	ffff0001 	.word	0xffff0001

080055c8 <_fwalk_reent>:
 80055c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80055cc:	4606      	mov	r6, r0
 80055ce:	4688      	mov	r8, r1
 80055d0:	2700      	movs	r7, #0
 80055d2:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80055d6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80055da:	f1b9 0901 	subs.w	r9, r9, #1
 80055de:	d505      	bpl.n	80055ec <_fwalk_reent+0x24>
 80055e0:	6824      	ldr	r4, [r4, #0]
 80055e2:	2c00      	cmp	r4, #0
 80055e4:	d1f7      	bne.n	80055d6 <_fwalk_reent+0xe>
 80055e6:	4638      	mov	r0, r7
 80055e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80055ec:	89ab      	ldrh	r3, [r5, #12]
 80055ee:	2b01      	cmp	r3, #1
 80055f0:	d907      	bls.n	8005602 <_fwalk_reent+0x3a>
 80055f2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80055f6:	3301      	adds	r3, #1
 80055f8:	d003      	beq.n	8005602 <_fwalk_reent+0x3a>
 80055fa:	4629      	mov	r1, r5
 80055fc:	4630      	mov	r0, r6
 80055fe:	47c0      	blx	r8
 8005600:	4307      	orrs	r7, r0
 8005602:	3568      	adds	r5, #104	; 0x68
 8005604:	e7e9      	b.n	80055da <_fwalk_reent+0x12>
	...

08005608 <_localeconv_r>:
 8005608:	4800      	ldr	r0, [pc, #0]	; (800560c <_localeconv_r+0x4>)
 800560a:	4770      	bx	lr
 800560c:	20000170 	.word	0x20000170

08005610 <__retarget_lock_init_recursive>:
 8005610:	4770      	bx	lr

08005612 <__retarget_lock_acquire_recursive>:
 8005612:	4770      	bx	lr

08005614 <__retarget_lock_release_recursive>:
 8005614:	4770      	bx	lr
	...

08005618 <malloc>:
 8005618:	4b02      	ldr	r3, [pc, #8]	; (8005624 <malloc+0xc>)
 800561a:	4601      	mov	r1, r0
 800561c:	6818      	ldr	r0, [r3, #0]
 800561e:	f000 bc0f 	b.w	8005e40 <_malloc_r>
 8005622:	bf00      	nop
 8005624:	2000001c 	.word	0x2000001c

08005628 <memchr>:
 8005628:	4603      	mov	r3, r0
 800562a:	b510      	push	{r4, lr}
 800562c:	b2c9      	uxtb	r1, r1
 800562e:	4402      	add	r2, r0
 8005630:	4293      	cmp	r3, r2
 8005632:	4618      	mov	r0, r3
 8005634:	d101      	bne.n	800563a <memchr+0x12>
 8005636:	2000      	movs	r0, #0
 8005638:	e003      	b.n	8005642 <memchr+0x1a>
 800563a:	7804      	ldrb	r4, [r0, #0]
 800563c:	3301      	adds	r3, #1
 800563e:	428c      	cmp	r4, r1
 8005640:	d1f6      	bne.n	8005630 <memchr+0x8>
 8005642:	bd10      	pop	{r4, pc}

08005644 <_Balloc>:
 8005644:	b570      	push	{r4, r5, r6, lr}
 8005646:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005648:	4604      	mov	r4, r0
 800564a:	460d      	mov	r5, r1
 800564c:	b976      	cbnz	r6, 800566c <_Balloc+0x28>
 800564e:	2010      	movs	r0, #16
 8005650:	f7ff ffe2 	bl	8005618 <malloc>
 8005654:	4602      	mov	r2, r0
 8005656:	6260      	str	r0, [r4, #36]	; 0x24
 8005658:	b920      	cbnz	r0, 8005664 <_Balloc+0x20>
 800565a:	2166      	movs	r1, #102	; 0x66
 800565c:	4b17      	ldr	r3, [pc, #92]	; (80056bc <_Balloc+0x78>)
 800565e:	4818      	ldr	r0, [pc, #96]	; (80056c0 <_Balloc+0x7c>)
 8005660:	f001 f83c 	bl	80066dc <__assert_func>
 8005664:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005668:	6006      	str	r6, [r0, #0]
 800566a:	60c6      	str	r6, [r0, #12]
 800566c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800566e:	68f3      	ldr	r3, [r6, #12]
 8005670:	b183      	cbz	r3, 8005694 <_Balloc+0x50>
 8005672:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005674:	68db      	ldr	r3, [r3, #12]
 8005676:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800567a:	b9b8      	cbnz	r0, 80056ac <_Balloc+0x68>
 800567c:	2101      	movs	r1, #1
 800567e:	fa01 f605 	lsl.w	r6, r1, r5
 8005682:	1d72      	adds	r2, r6, #5
 8005684:	4620      	mov	r0, r4
 8005686:	0092      	lsls	r2, r2, #2
 8005688:	f000 fb5e 	bl	8005d48 <_calloc_r>
 800568c:	b160      	cbz	r0, 80056a8 <_Balloc+0x64>
 800568e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005692:	e00e      	b.n	80056b2 <_Balloc+0x6e>
 8005694:	2221      	movs	r2, #33	; 0x21
 8005696:	2104      	movs	r1, #4
 8005698:	4620      	mov	r0, r4
 800569a:	f000 fb55 	bl	8005d48 <_calloc_r>
 800569e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80056a0:	60f0      	str	r0, [r6, #12]
 80056a2:	68db      	ldr	r3, [r3, #12]
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d1e4      	bne.n	8005672 <_Balloc+0x2e>
 80056a8:	2000      	movs	r0, #0
 80056aa:	bd70      	pop	{r4, r5, r6, pc}
 80056ac:	6802      	ldr	r2, [r0, #0]
 80056ae:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80056b2:	2300      	movs	r3, #0
 80056b4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80056b8:	e7f7      	b.n	80056aa <_Balloc+0x66>
 80056ba:	bf00      	nop
 80056bc:	080071d5 	.word	0x080071d5
 80056c0:	080072b8 	.word	0x080072b8

080056c4 <_Bfree>:
 80056c4:	b570      	push	{r4, r5, r6, lr}
 80056c6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80056c8:	4605      	mov	r5, r0
 80056ca:	460c      	mov	r4, r1
 80056cc:	b976      	cbnz	r6, 80056ec <_Bfree+0x28>
 80056ce:	2010      	movs	r0, #16
 80056d0:	f7ff ffa2 	bl	8005618 <malloc>
 80056d4:	4602      	mov	r2, r0
 80056d6:	6268      	str	r0, [r5, #36]	; 0x24
 80056d8:	b920      	cbnz	r0, 80056e4 <_Bfree+0x20>
 80056da:	218a      	movs	r1, #138	; 0x8a
 80056dc:	4b08      	ldr	r3, [pc, #32]	; (8005700 <_Bfree+0x3c>)
 80056de:	4809      	ldr	r0, [pc, #36]	; (8005704 <_Bfree+0x40>)
 80056e0:	f000 fffc 	bl	80066dc <__assert_func>
 80056e4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80056e8:	6006      	str	r6, [r0, #0]
 80056ea:	60c6      	str	r6, [r0, #12]
 80056ec:	b13c      	cbz	r4, 80056fe <_Bfree+0x3a>
 80056ee:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80056f0:	6862      	ldr	r2, [r4, #4]
 80056f2:	68db      	ldr	r3, [r3, #12]
 80056f4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80056f8:	6021      	str	r1, [r4, #0]
 80056fa:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80056fe:	bd70      	pop	{r4, r5, r6, pc}
 8005700:	080071d5 	.word	0x080071d5
 8005704:	080072b8 	.word	0x080072b8

08005708 <__multadd>:
 8005708:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800570c:	4607      	mov	r7, r0
 800570e:	460c      	mov	r4, r1
 8005710:	461e      	mov	r6, r3
 8005712:	2000      	movs	r0, #0
 8005714:	690d      	ldr	r5, [r1, #16]
 8005716:	f101 0c14 	add.w	ip, r1, #20
 800571a:	f8dc 3000 	ldr.w	r3, [ip]
 800571e:	3001      	adds	r0, #1
 8005720:	b299      	uxth	r1, r3
 8005722:	fb02 6101 	mla	r1, r2, r1, r6
 8005726:	0c1e      	lsrs	r6, r3, #16
 8005728:	0c0b      	lsrs	r3, r1, #16
 800572a:	fb02 3306 	mla	r3, r2, r6, r3
 800572e:	b289      	uxth	r1, r1
 8005730:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005734:	4285      	cmp	r5, r0
 8005736:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800573a:	f84c 1b04 	str.w	r1, [ip], #4
 800573e:	dcec      	bgt.n	800571a <__multadd+0x12>
 8005740:	b30e      	cbz	r6, 8005786 <__multadd+0x7e>
 8005742:	68a3      	ldr	r3, [r4, #8]
 8005744:	42ab      	cmp	r3, r5
 8005746:	dc19      	bgt.n	800577c <__multadd+0x74>
 8005748:	6861      	ldr	r1, [r4, #4]
 800574a:	4638      	mov	r0, r7
 800574c:	3101      	adds	r1, #1
 800574e:	f7ff ff79 	bl	8005644 <_Balloc>
 8005752:	4680      	mov	r8, r0
 8005754:	b928      	cbnz	r0, 8005762 <__multadd+0x5a>
 8005756:	4602      	mov	r2, r0
 8005758:	21b5      	movs	r1, #181	; 0xb5
 800575a:	4b0c      	ldr	r3, [pc, #48]	; (800578c <__multadd+0x84>)
 800575c:	480c      	ldr	r0, [pc, #48]	; (8005790 <__multadd+0x88>)
 800575e:	f000 ffbd 	bl	80066dc <__assert_func>
 8005762:	6922      	ldr	r2, [r4, #16]
 8005764:	f104 010c 	add.w	r1, r4, #12
 8005768:	3202      	adds	r2, #2
 800576a:	0092      	lsls	r2, r2, #2
 800576c:	300c      	adds	r0, #12
 800576e:	f7fe fb17 	bl	8003da0 <memcpy>
 8005772:	4621      	mov	r1, r4
 8005774:	4638      	mov	r0, r7
 8005776:	f7ff ffa5 	bl	80056c4 <_Bfree>
 800577a:	4644      	mov	r4, r8
 800577c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005780:	3501      	adds	r5, #1
 8005782:	615e      	str	r6, [r3, #20]
 8005784:	6125      	str	r5, [r4, #16]
 8005786:	4620      	mov	r0, r4
 8005788:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800578c:	08007247 	.word	0x08007247
 8005790:	080072b8 	.word	0x080072b8

08005794 <__hi0bits>:
 8005794:	0c02      	lsrs	r2, r0, #16
 8005796:	0412      	lsls	r2, r2, #16
 8005798:	4603      	mov	r3, r0
 800579a:	b9ca      	cbnz	r2, 80057d0 <__hi0bits+0x3c>
 800579c:	0403      	lsls	r3, r0, #16
 800579e:	2010      	movs	r0, #16
 80057a0:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80057a4:	bf04      	itt	eq
 80057a6:	021b      	lsleq	r3, r3, #8
 80057a8:	3008      	addeq	r0, #8
 80057aa:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80057ae:	bf04      	itt	eq
 80057b0:	011b      	lsleq	r3, r3, #4
 80057b2:	3004      	addeq	r0, #4
 80057b4:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80057b8:	bf04      	itt	eq
 80057ba:	009b      	lsleq	r3, r3, #2
 80057bc:	3002      	addeq	r0, #2
 80057be:	2b00      	cmp	r3, #0
 80057c0:	db05      	blt.n	80057ce <__hi0bits+0x3a>
 80057c2:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 80057c6:	f100 0001 	add.w	r0, r0, #1
 80057ca:	bf08      	it	eq
 80057cc:	2020      	moveq	r0, #32
 80057ce:	4770      	bx	lr
 80057d0:	2000      	movs	r0, #0
 80057d2:	e7e5      	b.n	80057a0 <__hi0bits+0xc>

080057d4 <__lo0bits>:
 80057d4:	6803      	ldr	r3, [r0, #0]
 80057d6:	4602      	mov	r2, r0
 80057d8:	f013 0007 	ands.w	r0, r3, #7
 80057dc:	d00b      	beq.n	80057f6 <__lo0bits+0x22>
 80057de:	07d9      	lsls	r1, r3, #31
 80057e0:	d421      	bmi.n	8005826 <__lo0bits+0x52>
 80057e2:	0798      	lsls	r0, r3, #30
 80057e4:	bf49      	itett	mi
 80057e6:	085b      	lsrmi	r3, r3, #1
 80057e8:	089b      	lsrpl	r3, r3, #2
 80057ea:	2001      	movmi	r0, #1
 80057ec:	6013      	strmi	r3, [r2, #0]
 80057ee:	bf5c      	itt	pl
 80057f0:	2002      	movpl	r0, #2
 80057f2:	6013      	strpl	r3, [r2, #0]
 80057f4:	4770      	bx	lr
 80057f6:	b299      	uxth	r1, r3
 80057f8:	b909      	cbnz	r1, 80057fe <__lo0bits+0x2a>
 80057fa:	2010      	movs	r0, #16
 80057fc:	0c1b      	lsrs	r3, r3, #16
 80057fe:	b2d9      	uxtb	r1, r3
 8005800:	b909      	cbnz	r1, 8005806 <__lo0bits+0x32>
 8005802:	3008      	adds	r0, #8
 8005804:	0a1b      	lsrs	r3, r3, #8
 8005806:	0719      	lsls	r1, r3, #28
 8005808:	bf04      	itt	eq
 800580a:	091b      	lsreq	r3, r3, #4
 800580c:	3004      	addeq	r0, #4
 800580e:	0799      	lsls	r1, r3, #30
 8005810:	bf04      	itt	eq
 8005812:	089b      	lsreq	r3, r3, #2
 8005814:	3002      	addeq	r0, #2
 8005816:	07d9      	lsls	r1, r3, #31
 8005818:	d403      	bmi.n	8005822 <__lo0bits+0x4e>
 800581a:	085b      	lsrs	r3, r3, #1
 800581c:	f100 0001 	add.w	r0, r0, #1
 8005820:	d003      	beq.n	800582a <__lo0bits+0x56>
 8005822:	6013      	str	r3, [r2, #0]
 8005824:	4770      	bx	lr
 8005826:	2000      	movs	r0, #0
 8005828:	4770      	bx	lr
 800582a:	2020      	movs	r0, #32
 800582c:	4770      	bx	lr
	...

08005830 <__i2b>:
 8005830:	b510      	push	{r4, lr}
 8005832:	460c      	mov	r4, r1
 8005834:	2101      	movs	r1, #1
 8005836:	f7ff ff05 	bl	8005644 <_Balloc>
 800583a:	4602      	mov	r2, r0
 800583c:	b928      	cbnz	r0, 800584a <__i2b+0x1a>
 800583e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8005842:	4b04      	ldr	r3, [pc, #16]	; (8005854 <__i2b+0x24>)
 8005844:	4804      	ldr	r0, [pc, #16]	; (8005858 <__i2b+0x28>)
 8005846:	f000 ff49 	bl	80066dc <__assert_func>
 800584a:	2301      	movs	r3, #1
 800584c:	6144      	str	r4, [r0, #20]
 800584e:	6103      	str	r3, [r0, #16]
 8005850:	bd10      	pop	{r4, pc}
 8005852:	bf00      	nop
 8005854:	08007247 	.word	0x08007247
 8005858:	080072b8 	.word	0x080072b8

0800585c <__multiply>:
 800585c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005860:	4691      	mov	r9, r2
 8005862:	690a      	ldr	r2, [r1, #16]
 8005864:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8005868:	460c      	mov	r4, r1
 800586a:	429a      	cmp	r2, r3
 800586c:	bfbe      	ittt	lt
 800586e:	460b      	movlt	r3, r1
 8005870:	464c      	movlt	r4, r9
 8005872:	4699      	movlt	r9, r3
 8005874:	6927      	ldr	r7, [r4, #16]
 8005876:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800587a:	68a3      	ldr	r3, [r4, #8]
 800587c:	6861      	ldr	r1, [r4, #4]
 800587e:	eb07 060a 	add.w	r6, r7, sl
 8005882:	42b3      	cmp	r3, r6
 8005884:	b085      	sub	sp, #20
 8005886:	bfb8      	it	lt
 8005888:	3101      	addlt	r1, #1
 800588a:	f7ff fedb 	bl	8005644 <_Balloc>
 800588e:	b930      	cbnz	r0, 800589e <__multiply+0x42>
 8005890:	4602      	mov	r2, r0
 8005892:	f240 115d 	movw	r1, #349	; 0x15d
 8005896:	4b43      	ldr	r3, [pc, #268]	; (80059a4 <__multiply+0x148>)
 8005898:	4843      	ldr	r0, [pc, #268]	; (80059a8 <__multiply+0x14c>)
 800589a:	f000 ff1f 	bl	80066dc <__assert_func>
 800589e:	f100 0514 	add.w	r5, r0, #20
 80058a2:	462b      	mov	r3, r5
 80058a4:	2200      	movs	r2, #0
 80058a6:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80058aa:	4543      	cmp	r3, r8
 80058ac:	d321      	bcc.n	80058f2 <__multiply+0x96>
 80058ae:	f104 0314 	add.w	r3, r4, #20
 80058b2:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80058b6:	f109 0314 	add.w	r3, r9, #20
 80058ba:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80058be:	9202      	str	r2, [sp, #8]
 80058c0:	1b3a      	subs	r2, r7, r4
 80058c2:	3a15      	subs	r2, #21
 80058c4:	f022 0203 	bic.w	r2, r2, #3
 80058c8:	3204      	adds	r2, #4
 80058ca:	f104 0115 	add.w	r1, r4, #21
 80058ce:	428f      	cmp	r7, r1
 80058d0:	bf38      	it	cc
 80058d2:	2204      	movcc	r2, #4
 80058d4:	9201      	str	r2, [sp, #4]
 80058d6:	9a02      	ldr	r2, [sp, #8]
 80058d8:	9303      	str	r3, [sp, #12]
 80058da:	429a      	cmp	r2, r3
 80058dc:	d80c      	bhi.n	80058f8 <__multiply+0x9c>
 80058de:	2e00      	cmp	r6, #0
 80058e0:	dd03      	ble.n	80058ea <__multiply+0x8e>
 80058e2:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d059      	beq.n	800599e <__multiply+0x142>
 80058ea:	6106      	str	r6, [r0, #16]
 80058ec:	b005      	add	sp, #20
 80058ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80058f2:	f843 2b04 	str.w	r2, [r3], #4
 80058f6:	e7d8      	b.n	80058aa <__multiply+0x4e>
 80058f8:	f8b3 a000 	ldrh.w	sl, [r3]
 80058fc:	f1ba 0f00 	cmp.w	sl, #0
 8005900:	d023      	beq.n	800594a <__multiply+0xee>
 8005902:	46a9      	mov	r9, r5
 8005904:	f04f 0c00 	mov.w	ip, #0
 8005908:	f104 0e14 	add.w	lr, r4, #20
 800590c:	f85e 2b04 	ldr.w	r2, [lr], #4
 8005910:	f8d9 1000 	ldr.w	r1, [r9]
 8005914:	fa1f fb82 	uxth.w	fp, r2
 8005918:	b289      	uxth	r1, r1
 800591a:	fb0a 110b 	mla	r1, sl, fp, r1
 800591e:	4461      	add	r1, ip
 8005920:	f8d9 c000 	ldr.w	ip, [r9]
 8005924:	0c12      	lsrs	r2, r2, #16
 8005926:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800592a:	fb0a c202 	mla	r2, sl, r2, ip
 800592e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8005932:	b289      	uxth	r1, r1
 8005934:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8005938:	4577      	cmp	r7, lr
 800593a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800593e:	f849 1b04 	str.w	r1, [r9], #4
 8005942:	d8e3      	bhi.n	800590c <__multiply+0xb0>
 8005944:	9a01      	ldr	r2, [sp, #4]
 8005946:	f845 c002 	str.w	ip, [r5, r2]
 800594a:	9a03      	ldr	r2, [sp, #12]
 800594c:	3304      	adds	r3, #4
 800594e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8005952:	f1b9 0f00 	cmp.w	r9, #0
 8005956:	d020      	beq.n	800599a <__multiply+0x13e>
 8005958:	46ae      	mov	lr, r5
 800595a:	f04f 0a00 	mov.w	sl, #0
 800595e:	6829      	ldr	r1, [r5, #0]
 8005960:	f104 0c14 	add.w	ip, r4, #20
 8005964:	f8bc b000 	ldrh.w	fp, [ip]
 8005968:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800596c:	b289      	uxth	r1, r1
 800596e:	fb09 220b 	mla	r2, r9, fp, r2
 8005972:	4492      	add	sl, r2
 8005974:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8005978:	f84e 1b04 	str.w	r1, [lr], #4
 800597c:	f85c 2b04 	ldr.w	r2, [ip], #4
 8005980:	f8be 1000 	ldrh.w	r1, [lr]
 8005984:	0c12      	lsrs	r2, r2, #16
 8005986:	fb09 1102 	mla	r1, r9, r2, r1
 800598a:	4567      	cmp	r7, ip
 800598c:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8005990:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8005994:	d8e6      	bhi.n	8005964 <__multiply+0x108>
 8005996:	9a01      	ldr	r2, [sp, #4]
 8005998:	50a9      	str	r1, [r5, r2]
 800599a:	3504      	adds	r5, #4
 800599c:	e79b      	b.n	80058d6 <__multiply+0x7a>
 800599e:	3e01      	subs	r6, #1
 80059a0:	e79d      	b.n	80058de <__multiply+0x82>
 80059a2:	bf00      	nop
 80059a4:	08007247 	.word	0x08007247
 80059a8:	080072b8 	.word	0x080072b8

080059ac <__pow5mult>:
 80059ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80059b0:	4615      	mov	r5, r2
 80059b2:	f012 0203 	ands.w	r2, r2, #3
 80059b6:	4606      	mov	r6, r0
 80059b8:	460f      	mov	r7, r1
 80059ba:	d007      	beq.n	80059cc <__pow5mult+0x20>
 80059bc:	4c25      	ldr	r4, [pc, #148]	; (8005a54 <__pow5mult+0xa8>)
 80059be:	3a01      	subs	r2, #1
 80059c0:	2300      	movs	r3, #0
 80059c2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80059c6:	f7ff fe9f 	bl	8005708 <__multadd>
 80059ca:	4607      	mov	r7, r0
 80059cc:	10ad      	asrs	r5, r5, #2
 80059ce:	d03d      	beq.n	8005a4c <__pow5mult+0xa0>
 80059d0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80059d2:	b97c      	cbnz	r4, 80059f4 <__pow5mult+0x48>
 80059d4:	2010      	movs	r0, #16
 80059d6:	f7ff fe1f 	bl	8005618 <malloc>
 80059da:	4602      	mov	r2, r0
 80059dc:	6270      	str	r0, [r6, #36]	; 0x24
 80059de:	b928      	cbnz	r0, 80059ec <__pow5mult+0x40>
 80059e0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80059e4:	4b1c      	ldr	r3, [pc, #112]	; (8005a58 <__pow5mult+0xac>)
 80059e6:	481d      	ldr	r0, [pc, #116]	; (8005a5c <__pow5mult+0xb0>)
 80059e8:	f000 fe78 	bl	80066dc <__assert_func>
 80059ec:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80059f0:	6004      	str	r4, [r0, #0]
 80059f2:	60c4      	str	r4, [r0, #12]
 80059f4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80059f8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80059fc:	b94c      	cbnz	r4, 8005a12 <__pow5mult+0x66>
 80059fe:	f240 2171 	movw	r1, #625	; 0x271
 8005a02:	4630      	mov	r0, r6
 8005a04:	f7ff ff14 	bl	8005830 <__i2b>
 8005a08:	2300      	movs	r3, #0
 8005a0a:	4604      	mov	r4, r0
 8005a0c:	f8c8 0008 	str.w	r0, [r8, #8]
 8005a10:	6003      	str	r3, [r0, #0]
 8005a12:	f04f 0900 	mov.w	r9, #0
 8005a16:	07eb      	lsls	r3, r5, #31
 8005a18:	d50a      	bpl.n	8005a30 <__pow5mult+0x84>
 8005a1a:	4639      	mov	r1, r7
 8005a1c:	4622      	mov	r2, r4
 8005a1e:	4630      	mov	r0, r6
 8005a20:	f7ff ff1c 	bl	800585c <__multiply>
 8005a24:	4680      	mov	r8, r0
 8005a26:	4639      	mov	r1, r7
 8005a28:	4630      	mov	r0, r6
 8005a2a:	f7ff fe4b 	bl	80056c4 <_Bfree>
 8005a2e:	4647      	mov	r7, r8
 8005a30:	106d      	asrs	r5, r5, #1
 8005a32:	d00b      	beq.n	8005a4c <__pow5mult+0xa0>
 8005a34:	6820      	ldr	r0, [r4, #0]
 8005a36:	b938      	cbnz	r0, 8005a48 <__pow5mult+0x9c>
 8005a38:	4622      	mov	r2, r4
 8005a3a:	4621      	mov	r1, r4
 8005a3c:	4630      	mov	r0, r6
 8005a3e:	f7ff ff0d 	bl	800585c <__multiply>
 8005a42:	6020      	str	r0, [r4, #0]
 8005a44:	f8c0 9000 	str.w	r9, [r0]
 8005a48:	4604      	mov	r4, r0
 8005a4a:	e7e4      	b.n	8005a16 <__pow5mult+0x6a>
 8005a4c:	4638      	mov	r0, r7
 8005a4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005a52:	bf00      	nop
 8005a54:	08007408 	.word	0x08007408
 8005a58:	080071d5 	.word	0x080071d5
 8005a5c:	080072b8 	.word	0x080072b8

08005a60 <__lshift>:
 8005a60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005a64:	460c      	mov	r4, r1
 8005a66:	4607      	mov	r7, r0
 8005a68:	4691      	mov	r9, r2
 8005a6a:	6923      	ldr	r3, [r4, #16]
 8005a6c:	6849      	ldr	r1, [r1, #4]
 8005a6e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8005a72:	68a3      	ldr	r3, [r4, #8]
 8005a74:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005a78:	f108 0601 	add.w	r6, r8, #1
 8005a7c:	42b3      	cmp	r3, r6
 8005a7e:	db0b      	blt.n	8005a98 <__lshift+0x38>
 8005a80:	4638      	mov	r0, r7
 8005a82:	f7ff fddf 	bl	8005644 <_Balloc>
 8005a86:	4605      	mov	r5, r0
 8005a88:	b948      	cbnz	r0, 8005a9e <__lshift+0x3e>
 8005a8a:	4602      	mov	r2, r0
 8005a8c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8005a90:	4b29      	ldr	r3, [pc, #164]	; (8005b38 <__lshift+0xd8>)
 8005a92:	482a      	ldr	r0, [pc, #168]	; (8005b3c <__lshift+0xdc>)
 8005a94:	f000 fe22 	bl	80066dc <__assert_func>
 8005a98:	3101      	adds	r1, #1
 8005a9a:	005b      	lsls	r3, r3, #1
 8005a9c:	e7ee      	b.n	8005a7c <__lshift+0x1c>
 8005a9e:	2300      	movs	r3, #0
 8005aa0:	f100 0114 	add.w	r1, r0, #20
 8005aa4:	f100 0210 	add.w	r2, r0, #16
 8005aa8:	4618      	mov	r0, r3
 8005aaa:	4553      	cmp	r3, sl
 8005aac:	db37      	blt.n	8005b1e <__lshift+0xbe>
 8005aae:	6920      	ldr	r0, [r4, #16]
 8005ab0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005ab4:	f104 0314 	add.w	r3, r4, #20
 8005ab8:	f019 091f 	ands.w	r9, r9, #31
 8005abc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005ac0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8005ac4:	d02f      	beq.n	8005b26 <__lshift+0xc6>
 8005ac6:	468a      	mov	sl, r1
 8005ac8:	f04f 0c00 	mov.w	ip, #0
 8005acc:	f1c9 0e20 	rsb	lr, r9, #32
 8005ad0:	681a      	ldr	r2, [r3, #0]
 8005ad2:	fa02 f209 	lsl.w	r2, r2, r9
 8005ad6:	ea42 020c 	orr.w	r2, r2, ip
 8005ada:	f84a 2b04 	str.w	r2, [sl], #4
 8005ade:	f853 2b04 	ldr.w	r2, [r3], #4
 8005ae2:	4298      	cmp	r0, r3
 8005ae4:	fa22 fc0e 	lsr.w	ip, r2, lr
 8005ae8:	d8f2      	bhi.n	8005ad0 <__lshift+0x70>
 8005aea:	1b03      	subs	r3, r0, r4
 8005aec:	3b15      	subs	r3, #21
 8005aee:	f023 0303 	bic.w	r3, r3, #3
 8005af2:	3304      	adds	r3, #4
 8005af4:	f104 0215 	add.w	r2, r4, #21
 8005af8:	4290      	cmp	r0, r2
 8005afa:	bf38      	it	cc
 8005afc:	2304      	movcc	r3, #4
 8005afe:	f841 c003 	str.w	ip, [r1, r3]
 8005b02:	f1bc 0f00 	cmp.w	ip, #0
 8005b06:	d001      	beq.n	8005b0c <__lshift+0xac>
 8005b08:	f108 0602 	add.w	r6, r8, #2
 8005b0c:	3e01      	subs	r6, #1
 8005b0e:	4638      	mov	r0, r7
 8005b10:	4621      	mov	r1, r4
 8005b12:	612e      	str	r6, [r5, #16]
 8005b14:	f7ff fdd6 	bl	80056c4 <_Bfree>
 8005b18:	4628      	mov	r0, r5
 8005b1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b1e:	f842 0f04 	str.w	r0, [r2, #4]!
 8005b22:	3301      	adds	r3, #1
 8005b24:	e7c1      	b.n	8005aaa <__lshift+0x4a>
 8005b26:	3904      	subs	r1, #4
 8005b28:	f853 2b04 	ldr.w	r2, [r3], #4
 8005b2c:	4298      	cmp	r0, r3
 8005b2e:	f841 2f04 	str.w	r2, [r1, #4]!
 8005b32:	d8f9      	bhi.n	8005b28 <__lshift+0xc8>
 8005b34:	e7ea      	b.n	8005b0c <__lshift+0xac>
 8005b36:	bf00      	nop
 8005b38:	08007247 	.word	0x08007247
 8005b3c:	080072b8 	.word	0x080072b8

08005b40 <__mcmp>:
 8005b40:	4603      	mov	r3, r0
 8005b42:	690a      	ldr	r2, [r1, #16]
 8005b44:	6900      	ldr	r0, [r0, #16]
 8005b46:	b530      	push	{r4, r5, lr}
 8005b48:	1a80      	subs	r0, r0, r2
 8005b4a:	d10d      	bne.n	8005b68 <__mcmp+0x28>
 8005b4c:	3314      	adds	r3, #20
 8005b4e:	3114      	adds	r1, #20
 8005b50:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8005b54:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8005b58:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005b5c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8005b60:	4295      	cmp	r5, r2
 8005b62:	d002      	beq.n	8005b6a <__mcmp+0x2a>
 8005b64:	d304      	bcc.n	8005b70 <__mcmp+0x30>
 8005b66:	2001      	movs	r0, #1
 8005b68:	bd30      	pop	{r4, r5, pc}
 8005b6a:	42a3      	cmp	r3, r4
 8005b6c:	d3f4      	bcc.n	8005b58 <__mcmp+0x18>
 8005b6e:	e7fb      	b.n	8005b68 <__mcmp+0x28>
 8005b70:	f04f 30ff 	mov.w	r0, #4294967295
 8005b74:	e7f8      	b.n	8005b68 <__mcmp+0x28>
	...

08005b78 <__mdiff>:
 8005b78:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b7c:	460d      	mov	r5, r1
 8005b7e:	4607      	mov	r7, r0
 8005b80:	4611      	mov	r1, r2
 8005b82:	4628      	mov	r0, r5
 8005b84:	4614      	mov	r4, r2
 8005b86:	f7ff ffdb 	bl	8005b40 <__mcmp>
 8005b8a:	1e06      	subs	r6, r0, #0
 8005b8c:	d111      	bne.n	8005bb2 <__mdiff+0x3a>
 8005b8e:	4631      	mov	r1, r6
 8005b90:	4638      	mov	r0, r7
 8005b92:	f7ff fd57 	bl	8005644 <_Balloc>
 8005b96:	4602      	mov	r2, r0
 8005b98:	b928      	cbnz	r0, 8005ba6 <__mdiff+0x2e>
 8005b9a:	f240 2132 	movw	r1, #562	; 0x232
 8005b9e:	4b3a      	ldr	r3, [pc, #232]	; (8005c88 <__mdiff+0x110>)
 8005ba0:	483a      	ldr	r0, [pc, #232]	; (8005c8c <__mdiff+0x114>)
 8005ba2:	f000 fd9b 	bl	80066dc <__assert_func>
 8005ba6:	2301      	movs	r3, #1
 8005ba8:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8005bac:	4610      	mov	r0, r2
 8005bae:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005bb2:	bfa4      	itt	ge
 8005bb4:	4623      	movge	r3, r4
 8005bb6:	462c      	movge	r4, r5
 8005bb8:	4638      	mov	r0, r7
 8005bba:	6861      	ldr	r1, [r4, #4]
 8005bbc:	bfa6      	itte	ge
 8005bbe:	461d      	movge	r5, r3
 8005bc0:	2600      	movge	r6, #0
 8005bc2:	2601      	movlt	r6, #1
 8005bc4:	f7ff fd3e 	bl	8005644 <_Balloc>
 8005bc8:	4602      	mov	r2, r0
 8005bca:	b918      	cbnz	r0, 8005bd4 <__mdiff+0x5c>
 8005bcc:	f44f 7110 	mov.w	r1, #576	; 0x240
 8005bd0:	4b2d      	ldr	r3, [pc, #180]	; (8005c88 <__mdiff+0x110>)
 8005bd2:	e7e5      	b.n	8005ba0 <__mdiff+0x28>
 8005bd4:	f102 0814 	add.w	r8, r2, #20
 8005bd8:	46c2      	mov	sl, r8
 8005bda:	f04f 0c00 	mov.w	ip, #0
 8005bde:	6927      	ldr	r7, [r4, #16]
 8005be0:	60c6      	str	r6, [r0, #12]
 8005be2:	692e      	ldr	r6, [r5, #16]
 8005be4:	f104 0014 	add.w	r0, r4, #20
 8005be8:	f105 0914 	add.w	r9, r5, #20
 8005bec:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8005bf0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8005bf4:	3410      	adds	r4, #16
 8005bf6:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8005bfa:	f859 3b04 	ldr.w	r3, [r9], #4
 8005bfe:	fa1f f18b 	uxth.w	r1, fp
 8005c02:	448c      	add	ip, r1
 8005c04:	b299      	uxth	r1, r3
 8005c06:	0c1b      	lsrs	r3, r3, #16
 8005c08:	ebac 0101 	sub.w	r1, ip, r1
 8005c0c:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8005c10:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8005c14:	b289      	uxth	r1, r1
 8005c16:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8005c1a:	454e      	cmp	r6, r9
 8005c1c:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8005c20:	f84a 3b04 	str.w	r3, [sl], #4
 8005c24:	d8e7      	bhi.n	8005bf6 <__mdiff+0x7e>
 8005c26:	1b73      	subs	r3, r6, r5
 8005c28:	3b15      	subs	r3, #21
 8005c2a:	f023 0303 	bic.w	r3, r3, #3
 8005c2e:	3515      	adds	r5, #21
 8005c30:	3304      	adds	r3, #4
 8005c32:	42ae      	cmp	r6, r5
 8005c34:	bf38      	it	cc
 8005c36:	2304      	movcc	r3, #4
 8005c38:	4418      	add	r0, r3
 8005c3a:	4443      	add	r3, r8
 8005c3c:	461e      	mov	r6, r3
 8005c3e:	4605      	mov	r5, r0
 8005c40:	4575      	cmp	r5, lr
 8005c42:	d30e      	bcc.n	8005c62 <__mdiff+0xea>
 8005c44:	f10e 0103 	add.w	r1, lr, #3
 8005c48:	1a09      	subs	r1, r1, r0
 8005c4a:	f021 0103 	bic.w	r1, r1, #3
 8005c4e:	3803      	subs	r0, #3
 8005c50:	4586      	cmp	lr, r0
 8005c52:	bf38      	it	cc
 8005c54:	2100      	movcc	r1, #0
 8005c56:	4419      	add	r1, r3
 8005c58:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8005c5c:	b18b      	cbz	r3, 8005c82 <__mdiff+0x10a>
 8005c5e:	6117      	str	r7, [r2, #16]
 8005c60:	e7a4      	b.n	8005bac <__mdiff+0x34>
 8005c62:	f855 8b04 	ldr.w	r8, [r5], #4
 8005c66:	fa1f f188 	uxth.w	r1, r8
 8005c6a:	4461      	add	r1, ip
 8005c6c:	140c      	asrs	r4, r1, #16
 8005c6e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8005c72:	b289      	uxth	r1, r1
 8005c74:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8005c78:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8005c7c:	f846 1b04 	str.w	r1, [r6], #4
 8005c80:	e7de      	b.n	8005c40 <__mdiff+0xc8>
 8005c82:	3f01      	subs	r7, #1
 8005c84:	e7e8      	b.n	8005c58 <__mdiff+0xe0>
 8005c86:	bf00      	nop
 8005c88:	08007247 	.word	0x08007247
 8005c8c:	080072b8 	.word	0x080072b8

08005c90 <__d2b>:
 8005c90:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8005c94:	2101      	movs	r1, #1
 8005c96:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8005c9a:	4690      	mov	r8, r2
 8005c9c:	461d      	mov	r5, r3
 8005c9e:	f7ff fcd1 	bl	8005644 <_Balloc>
 8005ca2:	4604      	mov	r4, r0
 8005ca4:	b930      	cbnz	r0, 8005cb4 <__d2b+0x24>
 8005ca6:	4602      	mov	r2, r0
 8005ca8:	f240 310a 	movw	r1, #778	; 0x30a
 8005cac:	4b24      	ldr	r3, [pc, #144]	; (8005d40 <__d2b+0xb0>)
 8005cae:	4825      	ldr	r0, [pc, #148]	; (8005d44 <__d2b+0xb4>)
 8005cb0:	f000 fd14 	bl	80066dc <__assert_func>
 8005cb4:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8005cb8:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8005cbc:	bb2d      	cbnz	r5, 8005d0a <__d2b+0x7a>
 8005cbe:	9301      	str	r3, [sp, #4]
 8005cc0:	f1b8 0300 	subs.w	r3, r8, #0
 8005cc4:	d026      	beq.n	8005d14 <__d2b+0x84>
 8005cc6:	4668      	mov	r0, sp
 8005cc8:	9300      	str	r3, [sp, #0]
 8005cca:	f7ff fd83 	bl	80057d4 <__lo0bits>
 8005cce:	9900      	ldr	r1, [sp, #0]
 8005cd0:	b1f0      	cbz	r0, 8005d10 <__d2b+0x80>
 8005cd2:	9a01      	ldr	r2, [sp, #4]
 8005cd4:	f1c0 0320 	rsb	r3, r0, #32
 8005cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8005cdc:	430b      	orrs	r3, r1
 8005cde:	40c2      	lsrs	r2, r0
 8005ce0:	6163      	str	r3, [r4, #20]
 8005ce2:	9201      	str	r2, [sp, #4]
 8005ce4:	9b01      	ldr	r3, [sp, #4]
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	bf14      	ite	ne
 8005cea:	2102      	movne	r1, #2
 8005cec:	2101      	moveq	r1, #1
 8005cee:	61a3      	str	r3, [r4, #24]
 8005cf0:	6121      	str	r1, [r4, #16]
 8005cf2:	b1c5      	cbz	r5, 8005d26 <__d2b+0x96>
 8005cf4:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8005cf8:	4405      	add	r5, r0
 8005cfa:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8005cfe:	603d      	str	r5, [r7, #0]
 8005d00:	6030      	str	r0, [r6, #0]
 8005d02:	4620      	mov	r0, r4
 8005d04:	b002      	add	sp, #8
 8005d06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005d0a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005d0e:	e7d6      	b.n	8005cbe <__d2b+0x2e>
 8005d10:	6161      	str	r1, [r4, #20]
 8005d12:	e7e7      	b.n	8005ce4 <__d2b+0x54>
 8005d14:	a801      	add	r0, sp, #4
 8005d16:	f7ff fd5d 	bl	80057d4 <__lo0bits>
 8005d1a:	2101      	movs	r1, #1
 8005d1c:	9b01      	ldr	r3, [sp, #4]
 8005d1e:	6121      	str	r1, [r4, #16]
 8005d20:	6163      	str	r3, [r4, #20]
 8005d22:	3020      	adds	r0, #32
 8005d24:	e7e5      	b.n	8005cf2 <__d2b+0x62>
 8005d26:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8005d2a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8005d2e:	6038      	str	r0, [r7, #0]
 8005d30:	6918      	ldr	r0, [r3, #16]
 8005d32:	f7ff fd2f 	bl	8005794 <__hi0bits>
 8005d36:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8005d3a:	6031      	str	r1, [r6, #0]
 8005d3c:	e7e1      	b.n	8005d02 <__d2b+0x72>
 8005d3e:	bf00      	nop
 8005d40:	08007247 	.word	0x08007247
 8005d44:	080072b8 	.word	0x080072b8

08005d48 <_calloc_r>:
 8005d48:	b570      	push	{r4, r5, r6, lr}
 8005d4a:	fba1 5402 	umull	r5, r4, r1, r2
 8005d4e:	b934      	cbnz	r4, 8005d5e <_calloc_r+0x16>
 8005d50:	4629      	mov	r1, r5
 8005d52:	f000 f875 	bl	8005e40 <_malloc_r>
 8005d56:	4606      	mov	r6, r0
 8005d58:	b928      	cbnz	r0, 8005d66 <_calloc_r+0x1e>
 8005d5a:	4630      	mov	r0, r6
 8005d5c:	bd70      	pop	{r4, r5, r6, pc}
 8005d5e:	220c      	movs	r2, #12
 8005d60:	2600      	movs	r6, #0
 8005d62:	6002      	str	r2, [r0, #0]
 8005d64:	e7f9      	b.n	8005d5a <_calloc_r+0x12>
 8005d66:	462a      	mov	r2, r5
 8005d68:	4621      	mov	r1, r4
 8005d6a:	f7fe f827 	bl	8003dbc <memset>
 8005d6e:	e7f4      	b.n	8005d5a <_calloc_r+0x12>

08005d70 <_free_r>:
 8005d70:	b538      	push	{r3, r4, r5, lr}
 8005d72:	4605      	mov	r5, r0
 8005d74:	2900      	cmp	r1, #0
 8005d76:	d040      	beq.n	8005dfa <_free_r+0x8a>
 8005d78:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005d7c:	1f0c      	subs	r4, r1, #4
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	bfb8      	it	lt
 8005d82:	18e4      	addlt	r4, r4, r3
 8005d84:	f000 fe4c 	bl	8006a20 <__malloc_lock>
 8005d88:	4a1c      	ldr	r2, [pc, #112]	; (8005dfc <_free_r+0x8c>)
 8005d8a:	6813      	ldr	r3, [r2, #0]
 8005d8c:	b933      	cbnz	r3, 8005d9c <_free_r+0x2c>
 8005d8e:	6063      	str	r3, [r4, #4]
 8005d90:	6014      	str	r4, [r2, #0]
 8005d92:	4628      	mov	r0, r5
 8005d94:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005d98:	f000 be48 	b.w	8006a2c <__malloc_unlock>
 8005d9c:	42a3      	cmp	r3, r4
 8005d9e:	d908      	bls.n	8005db2 <_free_r+0x42>
 8005da0:	6820      	ldr	r0, [r4, #0]
 8005da2:	1821      	adds	r1, r4, r0
 8005da4:	428b      	cmp	r3, r1
 8005da6:	bf01      	itttt	eq
 8005da8:	6819      	ldreq	r1, [r3, #0]
 8005daa:	685b      	ldreq	r3, [r3, #4]
 8005dac:	1809      	addeq	r1, r1, r0
 8005dae:	6021      	streq	r1, [r4, #0]
 8005db0:	e7ed      	b.n	8005d8e <_free_r+0x1e>
 8005db2:	461a      	mov	r2, r3
 8005db4:	685b      	ldr	r3, [r3, #4]
 8005db6:	b10b      	cbz	r3, 8005dbc <_free_r+0x4c>
 8005db8:	42a3      	cmp	r3, r4
 8005dba:	d9fa      	bls.n	8005db2 <_free_r+0x42>
 8005dbc:	6811      	ldr	r1, [r2, #0]
 8005dbe:	1850      	adds	r0, r2, r1
 8005dc0:	42a0      	cmp	r0, r4
 8005dc2:	d10b      	bne.n	8005ddc <_free_r+0x6c>
 8005dc4:	6820      	ldr	r0, [r4, #0]
 8005dc6:	4401      	add	r1, r0
 8005dc8:	1850      	adds	r0, r2, r1
 8005dca:	4283      	cmp	r3, r0
 8005dcc:	6011      	str	r1, [r2, #0]
 8005dce:	d1e0      	bne.n	8005d92 <_free_r+0x22>
 8005dd0:	6818      	ldr	r0, [r3, #0]
 8005dd2:	685b      	ldr	r3, [r3, #4]
 8005dd4:	4401      	add	r1, r0
 8005dd6:	6011      	str	r1, [r2, #0]
 8005dd8:	6053      	str	r3, [r2, #4]
 8005dda:	e7da      	b.n	8005d92 <_free_r+0x22>
 8005ddc:	d902      	bls.n	8005de4 <_free_r+0x74>
 8005dde:	230c      	movs	r3, #12
 8005de0:	602b      	str	r3, [r5, #0]
 8005de2:	e7d6      	b.n	8005d92 <_free_r+0x22>
 8005de4:	6820      	ldr	r0, [r4, #0]
 8005de6:	1821      	adds	r1, r4, r0
 8005de8:	428b      	cmp	r3, r1
 8005dea:	bf01      	itttt	eq
 8005dec:	6819      	ldreq	r1, [r3, #0]
 8005dee:	685b      	ldreq	r3, [r3, #4]
 8005df0:	1809      	addeq	r1, r1, r0
 8005df2:	6021      	streq	r1, [r4, #0]
 8005df4:	6063      	str	r3, [r4, #4]
 8005df6:	6054      	str	r4, [r2, #4]
 8005df8:	e7cb      	b.n	8005d92 <_free_r+0x22>
 8005dfa:	bd38      	pop	{r3, r4, r5, pc}
 8005dfc:	20001158 	.word	0x20001158

08005e00 <sbrk_aligned>:
 8005e00:	b570      	push	{r4, r5, r6, lr}
 8005e02:	4e0e      	ldr	r6, [pc, #56]	; (8005e3c <sbrk_aligned+0x3c>)
 8005e04:	460c      	mov	r4, r1
 8005e06:	6831      	ldr	r1, [r6, #0]
 8005e08:	4605      	mov	r5, r0
 8005e0a:	b911      	cbnz	r1, 8005e12 <sbrk_aligned+0x12>
 8005e0c:	f000 fb40 	bl	8006490 <_sbrk_r>
 8005e10:	6030      	str	r0, [r6, #0]
 8005e12:	4621      	mov	r1, r4
 8005e14:	4628      	mov	r0, r5
 8005e16:	f000 fb3b 	bl	8006490 <_sbrk_r>
 8005e1a:	1c43      	adds	r3, r0, #1
 8005e1c:	d00a      	beq.n	8005e34 <sbrk_aligned+0x34>
 8005e1e:	1cc4      	adds	r4, r0, #3
 8005e20:	f024 0403 	bic.w	r4, r4, #3
 8005e24:	42a0      	cmp	r0, r4
 8005e26:	d007      	beq.n	8005e38 <sbrk_aligned+0x38>
 8005e28:	1a21      	subs	r1, r4, r0
 8005e2a:	4628      	mov	r0, r5
 8005e2c:	f000 fb30 	bl	8006490 <_sbrk_r>
 8005e30:	3001      	adds	r0, #1
 8005e32:	d101      	bne.n	8005e38 <sbrk_aligned+0x38>
 8005e34:	f04f 34ff 	mov.w	r4, #4294967295
 8005e38:	4620      	mov	r0, r4
 8005e3a:	bd70      	pop	{r4, r5, r6, pc}
 8005e3c:	2000115c 	.word	0x2000115c

08005e40 <_malloc_r>:
 8005e40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005e44:	1ccd      	adds	r5, r1, #3
 8005e46:	f025 0503 	bic.w	r5, r5, #3
 8005e4a:	3508      	adds	r5, #8
 8005e4c:	2d0c      	cmp	r5, #12
 8005e4e:	bf38      	it	cc
 8005e50:	250c      	movcc	r5, #12
 8005e52:	2d00      	cmp	r5, #0
 8005e54:	4607      	mov	r7, r0
 8005e56:	db01      	blt.n	8005e5c <_malloc_r+0x1c>
 8005e58:	42a9      	cmp	r1, r5
 8005e5a:	d905      	bls.n	8005e68 <_malloc_r+0x28>
 8005e5c:	230c      	movs	r3, #12
 8005e5e:	2600      	movs	r6, #0
 8005e60:	603b      	str	r3, [r7, #0]
 8005e62:	4630      	mov	r0, r6
 8005e64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005e68:	4e2e      	ldr	r6, [pc, #184]	; (8005f24 <_malloc_r+0xe4>)
 8005e6a:	f000 fdd9 	bl	8006a20 <__malloc_lock>
 8005e6e:	6833      	ldr	r3, [r6, #0]
 8005e70:	461c      	mov	r4, r3
 8005e72:	bb34      	cbnz	r4, 8005ec2 <_malloc_r+0x82>
 8005e74:	4629      	mov	r1, r5
 8005e76:	4638      	mov	r0, r7
 8005e78:	f7ff ffc2 	bl	8005e00 <sbrk_aligned>
 8005e7c:	1c43      	adds	r3, r0, #1
 8005e7e:	4604      	mov	r4, r0
 8005e80:	d14d      	bne.n	8005f1e <_malloc_r+0xde>
 8005e82:	6834      	ldr	r4, [r6, #0]
 8005e84:	4626      	mov	r6, r4
 8005e86:	2e00      	cmp	r6, #0
 8005e88:	d140      	bne.n	8005f0c <_malloc_r+0xcc>
 8005e8a:	6823      	ldr	r3, [r4, #0]
 8005e8c:	4631      	mov	r1, r6
 8005e8e:	4638      	mov	r0, r7
 8005e90:	eb04 0803 	add.w	r8, r4, r3
 8005e94:	f000 fafc 	bl	8006490 <_sbrk_r>
 8005e98:	4580      	cmp	r8, r0
 8005e9a:	d13a      	bne.n	8005f12 <_malloc_r+0xd2>
 8005e9c:	6821      	ldr	r1, [r4, #0]
 8005e9e:	3503      	adds	r5, #3
 8005ea0:	1a6d      	subs	r5, r5, r1
 8005ea2:	f025 0503 	bic.w	r5, r5, #3
 8005ea6:	3508      	adds	r5, #8
 8005ea8:	2d0c      	cmp	r5, #12
 8005eaa:	bf38      	it	cc
 8005eac:	250c      	movcc	r5, #12
 8005eae:	4638      	mov	r0, r7
 8005eb0:	4629      	mov	r1, r5
 8005eb2:	f7ff ffa5 	bl	8005e00 <sbrk_aligned>
 8005eb6:	3001      	adds	r0, #1
 8005eb8:	d02b      	beq.n	8005f12 <_malloc_r+0xd2>
 8005eba:	6823      	ldr	r3, [r4, #0]
 8005ebc:	442b      	add	r3, r5
 8005ebe:	6023      	str	r3, [r4, #0]
 8005ec0:	e00e      	b.n	8005ee0 <_malloc_r+0xa0>
 8005ec2:	6822      	ldr	r2, [r4, #0]
 8005ec4:	1b52      	subs	r2, r2, r5
 8005ec6:	d41e      	bmi.n	8005f06 <_malloc_r+0xc6>
 8005ec8:	2a0b      	cmp	r2, #11
 8005eca:	d916      	bls.n	8005efa <_malloc_r+0xba>
 8005ecc:	1961      	adds	r1, r4, r5
 8005ece:	42a3      	cmp	r3, r4
 8005ed0:	6025      	str	r5, [r4, #0]
 8005ed2:	bf18      	it	ne
 8005ed4:	6059      	strne	r1, [r3, #4]
 8005ed6:	6863      	ldr	r3, [r4, #4]
 8005ed8:	bf08      	it	eq
 8005eda:	6031      	streq	r1, [r6, #0]
 8005edc:	5162      	str	r2, [r4, r5]
 8005ede:	604b      	str	r3, [r1, #4]
 8005ee0:	4638      	mov	r0, r7
 8005ee2:	f104 060b 	add.w	r6, r4, #11
 8005ee6:	f000 fda1 	bl	8006a2c <__malloc_unlock>
 8005eea:	f026 0607 	bic.w	r6, r6, #7
 8005eee:	1d23      	adds	r3, r4, #4
 8005ef0:	1af2      	subs	r2, r6, r3
 8005ef2:	d0b6      	beq.n	8005e62 <_malloc_r+0x22>
 8005ef4:	1b9b      	subs	r3, r3, r6
 8005ef6:	50a3      	str	r3, [r4, r2]
 8005ef8:	e7b3      	b.n	8005e62 <_malloc_r+0x22>
 8005efa:	6862      	ldr	r2, [r4, #4]
 8005efc:	42a3      	cmp	r3, r4
 8005efe:	bf0c      	ite	eq
 8005f00:	6032      	streq	r2, [r6, #0]
 8005f02:	605a      	strne	r2, [r3, #4]
 8005f04:	e7ec      	b.n	8005ee0 <_malloc_r+0xa0>
 8005f06:	4623      	mov	r3, r4
 8005f08:	6864      	ldr	r4, [r4, #4]
 8005f0a:	e7b2      	b.n	8005e72 <_malloc_r+0x32>
 8005f0c:	4634      	mov	r4, r6
 8005f0e:	6876      	ldr	r6, [r6, #4]
 8005f10:	e7b9      	b.n	8005e86 <_malloc_r+0x46>
 8005f12:	230c      	movs	r3, #12
 8005f14:	4638      	mov	r0, r7
 8005f16:	603b      	str	r3, [r7, #0]
 8005f18:	f000 fd88 	bl	8006a2c <__malloc_unlock>
 8005f1c:	e7a1      	b.n	8005e62 <_malloc_r+0x22>
 8005f1e:	6025      	str	r5, [r4, #0]
 8005f20:	e7de      	b.n	8005ee0 <_malloc_r+0xa0>
 8005f22:	bf00      	nop
 8005f24:	20001158 	.word	0x20001158

08005f28 <__ssputs_r>:
 8005f28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005f2c:	688e      	ldr	r6, [r1, #8]
 8005f2e:	4682      	mov	sl, r0
 8005f30:	429e      	cmp	r6, r3
 8005f32:	460c      	mov	r4, r1
 8005f34:	4690      	mov	r8, r2
 8005f36:	461f      	mov	r7, r3
 8005f38:	d838      	bhi.n	8005fac <__ssputs_r+0x84>
 8005f3a:	898a      	ldrh	r2, [r1, #12]
 8005f3c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005f40:	d032      	beq.n	8005fa8 <__ssputs_r+0x80>
 8005f42:	6825      	ldr	r5, [r4, #0]
 8005f44:	6909      	ldr	r1, [r1, #16]
 8005f46:	3301      	adds	r3, #1
 8005f48:	eba5 0901 	sub.w	r9, r5, r1
 8005f4c:	6965      	ldr	r5, [r4, #20]
 8005f4e:	444b      	add	r3, r9
 8005f50:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005f54:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005f58:	106d      	asrs	r5, r5, #1
 8005f5a:	429d      	cmp	r5, r3
 8005f5c:	bf38      	it	cc
 8005f5e:	461d      	movcc	r5, r3
 8005f60:	0553      	lsls	r3, r2, #21
 8005f62:	d531      	bpl.n	8005fc8 <__ssputs_r+0xa0>
 8005f64:	4629      	mov	r1, r5
 8005f66:	f7ff ff6b 	bl	8005e40 <_malloc_r>
 8005f6a:	4606      	mov	r6, r0
 8005f6c:	b950      	cbnz	r0, 8005f84 <__ssputs_r+0x5c>
 8005f6e:	230c      	movs	r3, #12
 8005f70:	f04f 30ff 	mov.w	r0, #4294967295
 8005f74:	f8ca 3000 	str.w	r3, [sl]
 8005f78:	89a3      	ldrh	r3, [r4, #12]
 8005f7a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005f7e:	81a3      	strh	r3, [r4, #12]
 8005f80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f84:	464a      	mov	r2, r9
 8005f86:	6921      	ldr	r1, [r4, #16]
 8005f88:	f7fd ff0a 	bl	8003da0 <memcpy>
 8005f8c:	89a3      	ldrh	r3, [r4, #12]
 8005f8e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005f92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f96:	81a3      	strh	r3, [r4, #12]
 8005f98:	6126      	str	r6, [r4, #16]
 8005f9a:	444e      	add	r6, r9
 8005f9c:	6026      	str	r6, [r4, #0]
 8005f9e:	463e      	mov	r6, r7
 8005fa0:	6165      	str	r5, [r4, #20]
 8005fa2:	eba5 0509 	sub.w	r5, r5, r9
 8005fa6:	60a5      	str	r5, [r4, #8]
 8005fa8:	42be      	cmp	r6, r7
 8005faa:	d900      	bls.n	8005fae <__ssputs_r+0x86>
 8005fac:	463e      	mov	r6, r7
 8005fae:	4632      	mov	r2, r6
 8005fb0:	4641      	mov	r1, r8
 8005fb2:	6820      	ldr	r0, [r4, #0]
 8005fb4:	f000 fd1a 	bl	80069ec <memmove>
 8005fb8:	68a3      	ldr	r3, [r4, #8]
 8005fba:	2000      	movs	r0, #0
 8005fbc:	1b9b      	subs	r3, r3, r6
 8005fbe:	60a3      	str	r3, [r4, #8]
 8005fc0:	6823      	ldr	r3, [r4, #0]
 8005fc2:	4433      	add	r3, r6
 8005fc4:	6023      	str	r3, [r4, #0]
 8005fc6:	e7db      	b.n	8005f80 <__ssputs_r+0x58>
 8005fc8:	462a      	mov	r2, r5
 8005fca:	f000 fd35 	bl	8006a38 <_realloc_r>
 8005fce:	4606      	mov	r6, r0
 8005fd0:	2800      	cmp	r0, #0
 8005fd2:	d1e1      	bne.n	8005f98 <__ssputs_r+0x70>
 8005fd4:	4650      	mov	r0, sl
 8005fd6:	6921      	ldr	r1, [r4, #16]
 8005fd8:	f7ff feca 	bl	8005d70 <_free_r>
 8005fdc:	e7c7      	b.n	8005f6e <__ssputs_r+0x46>
	...

08005fe0 <_svfiprintf_r>:
 8005fe0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005fe4:	4698      	mov	r8, r3
 8005fe6:	898b      	ldrh	r3, [r1, #12]
 8005fe8:	4607      	mov	r7, r0
 8005fea:	061b      	lsls	r3, r3, #24
 8005fec:	460d      	mov	r5, r1
 8005fee:	4614      	mov	r4, r2
 8005ff0:	b09d      	sub	sp, #116	; 0x74
 8005ff2:	d50e      	bpl.n	8006012 <_svfiprintf_r+0x32>
 8005ff4:	690b      	ldr	r3, [r1, #16]
 8005ff6:	b963      	cbnz	r3, 8006012 <_svfiprintf_r+0x32>
 8005ff8:	2140      	movs	r1, #64	; 0x40
 8005ffa:	f7ff ff21 	bl	8005e40 <_malloc_r>
 8005ffe:	6028      	str	r0, [r5, #0]
 8006000:	6128      	str	r0, [r5, #16]
 8006002:	b920      	cbnz	r0, 800600e <_svfiprintf_r+0x2e>
 8006004:	230c      	movs	r3, #12
 8006006:	603b      	str	r3, [r7, #0]
 8006008:	f04f 30ff 	mov.w	r0, #4294967295
 800600c:	e0d1      	b.n	80061b2 <_svfiprintf_r+0x1d2>
 800600e:	2340      	movs	r3, #64	; 0x40
 8006010:	616b      	str	r3, [r5, #20]
 8006012:	2300      	movs	r3, #0
 8006014:	9309      	str	r3, [sp, #36]	; 0x24
 8006016:	2320      	movs	r3, #32
 8006018:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800601c:	2330      	movs	r3, #48	; 0x30
 800601e:	f04f 0901 	mov.w	r9, #1
 8006022:	f8cd 800c 	str.w	r8, [sp, #12]
 8006026:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80061cc <_svfiprintf_r+0x1ec>
 800602a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800602e:	4623      	mov	r3, r4
 8006030:	469a      	mov	sl, r3
 8006032:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006036:	b10a      	cbz	r2, 800603c <_svfiprintf_r+0x5c>
 8006038:	2a25      	cmp	r2, #37	; 0x25
 800603a:	d1f9      	bne.n	8006030 <_svfiprintf_r+0x50>
 800603c:	ebba 0b04 	subs.w	fp, sl, r4
 8006040:	d00b      	beq.n	800605a <_svfiprintf_r+0x7a>
 8006042:	465b      	mov	r3, fp
 8006044:	4622      	mov	r2, r4
 8006046:	4629      	mov	r1, r5
 8006048:	4638      	mov	r0, r7
 800604a:	f7ff ff6d 	bl	8005f28 <__ssputs_r>
 800604e:	3001      	adds	r0, #1
 8006050:	f000 80aa 	beq.w	80061a8 <_svfiprintf_r+0x1c8>
 8006054:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006056:	445a      	add	r2, fp
 8006058:	9209      	str	r2, [sp, #36]	; 0x24
 800605a:	f89a 3000 	ldrb.w	r3, [sl]
 800605e:	2b00      	cmp	r3, #0
 8006060:	f000 80a2 	beq.w	80061a8 <_svfiprintf_r+0x1c8>
 8006064:	2300      	movs	r3, #0
 8006066:	f04f 32ff 	mov.w	r2, #4294967295
 800606a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800606e:	f10a 0a01 	add.w	sl, sl, #1
 8006072:	9304      	str	r3, [sp, #16]
 8006074:	9307      	str	r3, [sp, #28]
 8006076:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800607a:	931a      	str	r3, [sp, #104]	; 0x68
 800607c:	4654      	mov	r4, sl
 800607e:	2205      	movs	r2, #5
 8006080:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006084:	4851      	ldr	r0, [pc, #324]	; (80061cc <_svfiprintf_r+0x1ec>)
 8006086:	f7ff facf 	bl	8005628 <memchr>
 800608a:	9a04      	ldr	r2, [sp, #16]
 800608c:	b9d8      	cbnz	r0, 80060c6 <_svfiprintf_r+0xe6>
 800608e:	06d0      	lsls	r0, r2, #27
 8006090:	bf44      	itt	mi
 8006092:	2320      	movmi	r3, #32
 8006094:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006098:	0711      	lsls	r1, r2, #28
 800609a:	bf44      	itt	mi
 800609c:	232b      	movmi	r3, #43	; 0x2b
 800609e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80060a2:	f89a 3000 	ldrb.w	r3, [sl]
 80060a6:	2b2a      	cmp	r3, #42	; 0x2a
 80060a8:	d015      	beq.n	80060d6 <_svfiprintf_r+0xf6>
 80060aa:	4654      	mov	r4, sl
 80060ac:	2000      	movs	r0, #0
 80060ae:	f04f 0c0a 	mov.w	ip, #10
 80060b2:	9a07      	ldr	r2, [sp, #28]
 80060b4:	4621      	mov	r1, r4
 80060b6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80060ba:	3b30      	subs	r3, #48	; 0x30
 80060bc:	2b09      	cmp	r3, #9
 80060be:	d94e      	bls.n	800615e <_svfiprintf_r+0x17e>
 80060c0:	b1b0      	cbz	r0, 80060f0 <_svfiprintf_r+0x110>
 80060c2:	9207      	str	r2, [sp, #28]
 80060c4:	e014      	b.n	80060f0 <_svfiprintf_r+0x110>
 80060c6:	eba0 0308 	sub.w	r3, r0, r8
 80060ca:	fa09 f303 	lsl.w	r3, r9, r3
 80060ce:	4313      	orrs	r3, r2
 80060d0:	46a2      	mov	sl, r4
 80060d2:	9304      	str	r3, [sp, #16]
 80060d4:	e7d2      	b.n	800607c <_svfiprintf_r+0x9c>
 80060d6:	9b03      	ldr	r3, [sp, #12]
 80060d8:	1d19      	adds	r1, r3, #4
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	9103      	str	r1, [sp, #12]
 80060de:	2b00      	cmp	r3, #0
 80060e0:	bfbb      	ittet	lt
 80060e2:	425b      	neglt	r3, r3
 80060e4:	f042 0202 	orrlt.w	r2, r2, #2
 80060e8:	9307      	strge	r3, [sp, #28]
 80060ea:	9307      	strlt	r3, [sp, #28]
 80060ec:	bfb8      	it	lt
 80060ee:	9204      	strlt	r2, [sp, #16]
 80060f0:	7823      	ldrb	r3, [r4, #0]
 80060f2:	2b2e      	cmp	r3, #46	; 0x2e
 80060f4:	d10c      	bne.n	8006110 <_svfiprintf_r+0x130>
 80060f6:	7863      	ldrb	r3, [r4, #1]
 80060f8:	2b2a      	cmp	r3, #42	; 0x2a
 80060fa:	d135      	bne.n	8006168 <_svfiprintf_r+0x188>
 80060fc:	9b03      	ldr	r3, [sp, #12]
 80060fe:	3402      	adds	r4, #2
 8006100:	1d1a      	adds	r2, r3, #4
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	9203      	str	r2, [sp, #12]
 8006106:	2b00      	cmp	r3, #0
 8006108:	bfb8      	it	lt
 800610a:	f04f 33ff 	movlt.w	r3, #4294967295
 800610e:	9305      	str	r3, [sp, #20]
 8006110:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 80061d0 <_svfiprintf_r+0x1f0>
 8006114:	2203      	movs	r2, #3
 8006116:	4650      	mov	r0, sl
 8006118:	7821      	ldrb	r1, [r4, #0]
 800611a:	f7ff fa85 	bl	8005628 <memchr>
 800611e:	b140      	cbz	r0, 8006132 <_svfiprintf_r+0x152>
 8006120:	2340      	movs	r3, #64	; 0x40
 8006122:	eba0 000a 	sub.w	r0, r0, sl
 8006126:	fa03 f000 	lsl.w	r0, r3, r0
 800612a:	9b04      	ldr	r3, [sp, #16]
 800612c:	3401      	adds	r4, #1
 800612e:	4303      	orrs	r3, r0
 8006130:	9304      	str	r3, [sp, #16]
 8006132:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006136:	2206      	movs	r2, #6
 8006138:	4826      	ldr	r0, [pc, #152]	; (80061d4 <_svfiprintf_r+0x1f4>)
 800613a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800613e:	f7ff fa73 	bl	8005628 <memchr>
 8006142:	2800      	cmp	r0, #0
 8006144:	d038      	beq.n	80061b8 <_svfiprintf_r+0x1d8>
 8006146:	4b24      	ldr	r3, [pc, #144]	; (80061d8 <_svfiprintf_r+0x1f8>)
 8006148:	bb1b      	cbnz	r3, 8006192 <_svfiprintf_r+0x1b2>
 800614a:	9b03      	ldr	r3, [sp, #12]
 800614c:	3307      	adds	r3, #7
 800614e:	f023 0307 	bic.w	r3, r3, #7
 8006152:	3308      	adds	r3, #8
 8006154:	9303      	str	r3, [sp, #12]
 8006156:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006158:	4433      	add	r3, r6
 800615a:	9309      	str	r3, [sp, #36]	; 0x24
 800615c:	e767      	b.n	800602e <_svfiprintf_r+0x4e>
 800615e:	460c      	mov	r4, r1
 8006160:	2001      	movs	r0, #1
 8006162:	fb0c 3202 	mla	r2, ip, r2, r3
 8006166:	e7a5      	b.n	80060b4 <_svfiprintf_r+0xd4>
 8006168:	2300      	movs	r3, #0
 800616a:	f04f 0c0a 	mov.w	ip, #10
 800616e:	4619      	mov	r1, r3
 8006170:	3401      	adds	r4, #1
 8006172:	9305      	str	r3, [sp, #20]
 8006174:	4620      	mov	r0, r4
 8006176:	f810 2b01 	ldrb.w	r2, [r0], #1
 800617a:	3a30      	subs	r2, #48	; 0x30
 800617c:	2a09      	cmp	r2, #9
 800617e:	d903      	bls.n	8006188 <_svfiprintf_r+0x1a8>
 8006180:	2b00      	cmp	r3, #0
 8006182:	d0c5      	beq.n	8006110 <_svfiprintf_r+0x130>
 8006184:	9105      	str	r1, [sp, #20]
 8006186:	e7c3      	b.n	8006110 <_svfiprintf_r+0x130>
 8006188:	4604      	mov	r4, r0
 800618a:	2301      	movs	r3, #1
 800618c:	fb0c 2101 	mla	r1, ip, r1, r2
 8006190:	e7f0      	b.n	8006174 <_svfiprintf_r+0x194>
 8006192:	ab03      	add	r3, sp, #12
 8006194:	9300      	str	r3, [sp, #0]
 8006196:	462a      	mov	r2, r5
 8006198:	4638      	mov	r0, r7
 800619a:	4b10      	ldr	r3, [pc, #64]	; (80061dc <_svfiprintf_r+0x1fc>)
 800619c:	a904      	add	r1, sp, #16
 800619e:	f7fd feb3 	bl	8003f08 <_printf_float>
 80061a2:	1c42      	adds	r2, r0, #1
 80061a4:	4606      	mov	r6, r0
 80061a6:	d1d6      	bne.n	8006156 <_svfiprintf_r+0x176>
 80061a8:	89ab      	ldrh	r3, [r5, #12]
 80061aa:	065b      	lsls	r3, r3, #25
 80061ac:	f53f af2c 	bmi.w	8006008 <_svfiprintf_r+0x28>
 80061b0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80061b2:	b01d      	add	sp, #116	; 0x74
 80061b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80061b8:	ab03      	add	r3, sp, #12
 80061ba:	9300      	str	r3, [sp, #0]
 80061bc:	462a      	mov	r2, r5
 80061be:	4638      	mov	r0, r7
 80061c0:	4b06      	ldr	r3, [pc, #24]	; (80061dc <_svfiprintf_r+0x1fc>)
 80061c2:	a904      	add	r1, sp, #16
 80061c4:	f7fe f93c 	bl	8004440 <_printf_i>
 80061c8:	e7eb      	b.n	80061a2 <_svfiprintf_r+0x1c2>
 80061ca:	bf00      	nop
 80061cc:	08007414 	.word	0x08007414
 80061d0:	0800741a 	.word	0x0800741a
 80061d4:	0800741e 	.word	0x0800741e
 80061d8:	08003f09 	.word	0x08003f09
 80061dc:	08005f29 	.word	0x08005f29

080061e0 <__sfputc_r>:
 80061e0:	6893      	ldr	r3, [r2, #8]
 80061e2:	b410      	push	{r4}
 80061e4:	3b01      	subs	r3, #1
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	6093      	str	r3, [r2, #8]
 80061ea:	da07      	bge.n	80061fc <__sfputc_r+0x1c>
 80061ec:	6994      	ldr	r4, [r2, #24]
 80061ee:	42a3      	cmp	r3, r4
 80061f0:	db01      	blt.n	80061f6 <__sfputc_r+0x16>
 80061f2:	290a      	cmp	r1, #10
 80061f4:	d102      	bne.n	80061fc <__sfputc_r+0x1c>
 80061f6:	bc10      	pop	{r4}
 80061f8:	f000 b99e 	b.w	8006538 <__swbuf_r>
 80061fc:	6813      	ldr	r3, [r2, #0]
 80061fe:	1c58      	adds	r0, r3, #1
 8006200:	6010      	str	r0, [r2, #0]
 8006202:	7019      	strb	r1, [r3, #0]
 8006204:	4608      	mov	r0, r1
 8006206:	bc10      	pop	{r4}
 8006208:	4770      	bx	lr

0800620a <__sfputs_r>:
 800620a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800620c:	4606      	mov	r6, r0
 800620e:	460f      	mov	r7, r1
 8006210:	4614      	mov	r4, r2
 8006212:	18d5      	adds	r5, r2, r3
 8006214:	42ac      	cmp	r4, r5
 8006216:	d101      	bne.n	800621c <__sfputs_r+0x12>
 8006218:	2000      	movs	r0, #0
 800621a:	e007      	b.n	800622c <__sfputs_r+0x22>
 800621c:	463a      	mov	r2, r7
 800621e:	4630      	mov	r0, r6
 8006220:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006224:	f7ff ffdc 	bl	80061e0 <__sfputc_r>
 8006228:	1c43      	adds	r3, r0, #1
 800622a:	d1f3      	bne.n	8006214 <__sfputs_r+0xa>
 800622c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006230 <_vfiprintf_r>:
 8006230:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006234:	460d      	mov	r5, r1
 8006236:	4614      	mov	r4, r2
 8006238:	4698      	mov	r8, r3
 800623a:	4606      	mov	r6, r0
 800623c:	b09d      	sub	sp, #116	; 0x74
 800623e:	b118      	cbz	r0, 8006248 <_vfiprintf_r+0x18>
 8006240:	6983      	ldr	r3, [r0, #24]
 8006242:	b90b      	cbnz	r3, 8006248 <_vfiprintf_r+0x18>
 8006244:	f7ff f942 	bl	80054cc <__sinit>
 8006248:	4b89      	ldr	r3, [pc, #548]	; (8006470 <_vfiprintf_r+0x240>)
 800624a:	429d      	cmp	r5, r3
 800624c:	d11b      	bne.n	8006286 <_vfiprintf_r+0x56>
 800624e:	6875      	ldr	r5, [r6, #4]
 8006250:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006252:	07d9      	lsls	r1, r3, #31
 8006254:	d405      	bmi.n	8006262 <_vfiprintf_r+0x32>
 8006256:	89ab      	ldrh	r3, [r5, #12]
 8006258:	059a      	lsls	r2, r3, #22
 800625a:	d402      	bmi.n	8006262 <_vfiprintf_r+0x32>
 800625c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800625e:	f7ff f9d8 	bl	8005612 <__retarget_lock_acquire_recursive>
 8006262:	89ab      	ldrh	r3, [r5, #12]
 8006264:	071b      	lsls	r3, r3, #28
 8006266:	d501      	bpl.n	800626c <_vfiprintf_r+0x3c>
 8006268:	692b      	ldr	r3, [r5, #16]
 800626a:	b9eb      	cbnz	r3, 80062a8 <_vfiprintf_r+0x78>
 800626c:	4629      	mov	r1, r5
 800626e:	4630      	mov	r0, r6
 8006270:	f000 f9c6 	bl	8006600 <__swsetup_r>
 8006274:	b1c0      	cbz	r0, 80062a8 <_vfiprintf_r+0x78>
 8006276:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006278:	07dc      	lsls	r4, r3, #31
 800627a:	d50e      	bpl.n	800629a <_vfiprintf_r+0x6a>
 800627c:	f04f 30ff 	mov.w	r0, #4294967295
 8006280:	b01d      	add	sp, #116	; 0x74
 8006282:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006286:	4b7b      	ldr	r3, [pc, #492]	; (8006474 <_vfiprintf_r+0x244>)
 8006288:	429d      	cmp	r5, r3
 800628a:	d101      	bne.n	8006290 <_vfiprintf_r+0x60>
 800628c:	68b5      	ldr	r5, [r6, #8]
 800628e:	e7df      	b.n	8006250 <_vfiprintf_r+0x20>
 8006290:	4b79      	ldr	r3, [pc, #484]	; (8006478 <_vfiprintf_r+0x248>)
 8006292:	429d      	cmp	r5, r3
 8006294:	bf08      	it	eq
 8006296:	68f5      	ldreq	r5, [r6, #12]
 8006298:	e7da      	b.n	8006250 <_vfiprintf_r+0x20>
 800629a:	89ab      	ldrh	r3, [r5, #12]
 800629c:	0598      	lsls	r0, r3, #22
 800629e:	d4ed      	bmi.n	800627c <_vfiprintf_r+0x4c>
 80062a0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80062a2:	f7ff f9b7 	bl	8005614 <__retarget_lock_release_recursive>
 80062a6:	e7e9      	b.n	800627c <_vfiprintf_r+0x4c>
 80062a8:	2300      	movs	r3, #0
 80062aa:	9309      	str	r3, [sp, #36]	; 0x24
 80062ac:	2320      	movs	r3, #32
 80062ae:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80062b2:	2330      	movs	r3, #48	; 0x30
 80062b4:	f04f 0901 	mov.w	r9, #1
 80062b8:	f8cd 800c 	str.w	r8, [sp, #12]
 80062bc:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800647c <_vfiprintf_r+0x24c>
 80062c0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80062c4:	4623      	mov	r3, r4
 80062c6:	469a      	mov	sl, r3
 80062c8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80062cc:	b10a      	cbz	r2, 80062d2 <_vfiprintf_r+0xa2>
 80062ce:	2a25      	cmp	r2, #37	; 0x25
 80062d0:	d1f9      	bne.n	80062c6 <_vfiprintf_r+0x96>
 80062d2:	ebba 0b04 	subs.w	fp, sl, r4
 80062d6:	d00b      	beq.n	80062f0 <_vfiprintf_r+0xc0>
 80062d8:	465b      	mov	r3, fp
 80062da:	4622      	mov	r2, r4
 80062dc:	4629      	mov	r1, r5
 80062de:	4630      	mov	r0, r6
 80062e0:	f7ff ff93 	bl	800620a <__sfputs_r>
 80062e4:	3001      	adds	r0, #1
 80062e6:	f000 80aa 	beq.w	800643e <_vfiprintf_r+0x20e>
 80062ea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80062ec:	445a      	add	r2, fp
 80062ee:	9209      	str	r2, [sp, #36]	; 0x24
 80062f0:	f89a 3000 	ldrb.w	r3, [sl]
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	f000 80a2 	beq.w	800643e <_vfiprintf_r+0x20e>
 80062fa:	2300      	movs	r3, #0
 80062fc:	f04f 32ff 	mov.w	r2, #4294967295
 8006300:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006304:	f10a 0a01 	add.w	sl, sl, #1
 8006308:	9304      	str	r3, [sp, #16]
 800630a:	9307      	str	r3, [sp, #28]
 800630c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006310:	931a      	str	r3, [sp, #104]	; 0x68
 8006312:	4654      	mov	r4, sl
 8006314:	2205      	movs	r2, #5
 8006316:	f814 1b01 	ldrb.w	r1, [r4], #1
 800631a:	4858      	ldr	r0, [pc, #352]	; (800647c <_vfiprintf_r+0x24c>)
 800631c:	f7ff f984 	bl	8005628 <memchr>
 8006320:	9a04      	ldr	r2, [sp, #16]
 8006322:	b9d8      	cbnz	r0, 800635c <_vfiprintf_r+0x12c>
 8006324:	06d1      	lsls	r1, r2, #27
 8006326:	bf44      	itt	mi
 8006328:	2320      	movmi	r3, #32
 800632a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800632e:	0713      	lsls	r3, r2, #28
 8006330:	bf44      	itt	mi
 8006332:	232b      	movmi	r3, #43	; 0x2b
 8006334:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006338:	f89a 3000 	ldrb.w	r3, [sl]
 800633c:	2b2a      	cmp	r3, #42	; 0x2a
 800633e:	d015      	beq.n	800636c <_vfiprintf_r+0x13c>
 8006340:	4654      	mov	r4, sl
 8006342:	2000      	movs	r0, #0
 8006344:	f04f 0c0a 	mov.w	ip, #10
 8006348:	9a07      	ldr	r2, [sp, #28]
 800634a:	4621      	mov	r1, r4
 800634c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006350:	3b30      	subs	r3, #48	; 0x30
 8006352:	2b09      	cmp	r3, #9
 8006354:	d94e      	bls.n	80063f4 <_vfiprintf_r+0x1c4>
 8006356:	b1b0      	cbz	r0, 8006386 <_vfiprintf_r+0x156>
 8006358:	9207      	str	r2, [sp, #28]
 800635a:	e014      	b.n	8006386 <_vfiprintf_r+0x156>
 800635c:	eba0 0308 	sub.w	r3, r0, r8
 8006360:	fa09 f303 	lsl.w	r3, r9, r3
 8006364:	4313      	orrs	r3, r2
 8006366:	46a2      	mov	sl, r4
 8006368:	9304      	str	r3, [sp, #16]
 800636a:	e7d2      	b.n	8006312 <_vfiprintf_r+0xe2>
 800636c:	9b03      	ldr	r3, [sp, #12]
 800636e:	1d19      	adds	r1, r3, #4
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	9103      	str	r1, [sp, #12]
 8006374:	2b00      	cmp	r3, #0
 8006376:	bfbb      	ittet	lt
 8006378:	425b      	neglt	r3, r3
 800637a:	f042 0202 	orrlt.w	r2, r2, #2
 800637e:	9307      	strge	r3, [sp, #28]
 8006380:	9307      	strlt	r3, [sp, #28]
 8006382:	bfb8      	it	lt
 8006384:	9204      	strlt	r2, [sp, #16]
 8006386:	7823      	ldrb	r3, [r4, #0]
 8006388:	2b2e      	cmp	r3, #46	; 0x2e
 800638a:	d10c      	bne.n	80063a6 <_vfiprintf_r+0x176>
 800638c:	7863      	ldrb	r3, [r4, #1]
 800638e:	2b2a      	cmp	r3, #42	; 0x2a
 8006390:	d135      	bne.n	80063fe <_vfiprintf_r+0x1ce>
 8006392:	9b03      	ldr	r3, [sp, #12]
 8006394:	3402      	adds	r4, #2
 8006396:	1d1a      	adds	r2, r3, #4
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	9203      	str	r2, [sp, #12]
 800639c:	2b00      	cmp	r3, #0
 800639e:	bfb8      	it	lt
 80063a0:	f04f 33ff 	movlt.w	r3, #4294967295
 80063a4:	9305      	str	r3, [sp, #20]
 80063a6:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8006480 <_vfiprintf_r+0x250>
 80063aa:	2203      	movs	r2, #3
 80063ac:	4650      	mov	r0, sl
 80063ae:	7821      	ldrb	r1, [r4, #0]
 80063b0:	f7ff f93a 	bl	8005628 <memchr>
 80063b4:	b140      	cbz	r0, 80063c8 <_vfiprintf_r+0x198>
 80063b6:	2340      	movs	r3, #64	; 0x40
 80063b8:	eba0 000a 	sub.w	r0, r0, sl
 80063bc:	fa03 f000 	lsl.w	r0, r3, r0
 80063c0:	9b04      	ldr	r3, [sp, #16]
 80063c2:	3401      	adds	r4, #1
 80063c4:	4303      	orrs	r3, r0
 80063c6:	9304      	str	r3, [sp, #16]
 80063c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80063cc:	2206      	movs	r2, #6
 80063ce:	482d      	ldr	r0, [pc, #180]	; (8006484 <_vfiprintf_r+0x254>)
 80063d0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80063d4:	f7ff f928 	bl	8005628 <memchr>
 80063d8:	2800      	cmp	r0, #0
 80063da:	d03f      	beq.n	800645c <_vfiprintf_r+0x22c>
 80063dc:	4b2a      	ldr	r3, [pc, #168]	; (8006488 <_vfiprintf_r+0x258>)
 80063de:	bb1b      	cbnz	r3, 8006428 <_vfiprintf_r+0x1f8>
 80063e0:	9b03      	ldr	r3, [sp, #12]
 80063e2:	3307      	adds	r3, #7
 80063e4:	f023 0307 	bic.w	r3, r3, #7
 80063e8:	3308      	adds	r3, #8
 80063ea:	9303      	str	r3, [sp, #12]
 80063ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80063ee:	443b      	add	r3, r7
 80063f0:	9309      	str	r3, [sp, #36]	; 0x24
 80063f2:	e767      	b.n	80062c4 <_vfiprintf_r+0x94>
 80063f4:	460c      	mov	r4, r1
 80063f6:	2001      	movs	r0, #1
 80063f8:	fb0c 3202 	mla	r2, ip, r2, r3
 80063fc:	e7a5      	b.n	800634a <_vfiprintf_r+0x11a>
 80063fe:	2300      	movs	r3, #0
 8006400:	f04f 0c0a 	mov.w	ip, #10
 8006404:	4619      	mov	r1, r3
 8006406:	3401      	adds	r4, #1
 8006408:	9305      	str	r3, [sp, #20]
 800640a:	4620      	mov	r0, r4
 800640c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006410:	3a30      	subs	r2, #48	; 0x30
 8006412:	2a09      	cmp	r2, #9
 8006414:	d903      	bls.n	800641e <_vfiprintf_r+0x1ee>
 8006416:	2b00      	cmp	r3, #0
 8006418:	d0c5      	beq.n	80063a6 <_vfiprintf_r+0x176>
 800641a:	9105      	str	r1, [sp, #20]
 800641c:	e7c3      	b.n	80063a6 <_vfiprintf_r+0x176>
 800641e:	4604      	mov	r4, r0
 8006420:	2301      	movs	r3, #1
 8006422:	fb0c 2101 	mla	r1, ip, r1, r2
 8006426:	e7f0      	b.n	800640a <_vfiprintf_r+0x1da>
 8006428:	ab03      	add	r3, sp, #12
 800642a:	9300      	str	r3, [sp, #0]
 800642c:	462a      	mov	r2, r5
 800642e:	4630      	mov	r0, r6
 8006430:	4b16      	ldr	r3, [pc, #88]	; (800648c <_vfiprintf_r+0x25c>)
 8006432:	a904      	add	r1, sp, #16
 8006434:	f7fd fd68 	bl	8003f08 <_printf_float>
 8006438:	4607      	mov	r7, r0
 800643a:	1c78      	adds	r0, r7, #1
 800643c:	d1d6      	bne.n	80063ec <_vfiprintf_r+0x1bc>
 800643e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006440:	07d9      	lsls	r1, r3, #31
 8006442:	d405      	bmi.n	8006450 <_vfiprintf_r+0x220>
 8006444:	89ab      	ldrh	r3, [r5, #12]
 8006446:	059a      	lsls	r2, r3, #22
 8006448:	d402      	bmi.n	8006450 <_vfiprintf_r+0x220>
 800644a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800644c:	f7ff f8e2 	bl	8005614 <__retarget_lock_release_recursive>
 8006450:	89ab      	ldrh	r3, [r5, #12]
 8006452:	065b      	lsls	r3, r3, #25
 8006454:	f53f af12 	bmi.w	800627c <_vfiprintf_r+0x4c>
 8006458:	9809      	ldr	r0, [sp, #36]	; 0x24
 800645a:	e711      	b.n	8006280 <_vfiprintf_r+0x50>
 800645c:	ab03      	add	r3, sp, #12
 800645e:	9300      	str	r3, [sp, #0]
 8006460:	462a      	mov	r2, r5
 8006462:	4630      	mov	r0, r6
 8006464:	4b09      	ldr	r3, [pc, #36]	; (800648c <_vfiprintf_r+0x25c>)
 8006466:	a904      	add	r1, sp, #16
 8006468:	f7fd ffea 	bl	8004440 <_printf_i>
 800646c:	e7e4      	b.n	8006438 <_vfiprintf_r+0x208>
 800646e:	bf00      	nop
 8006470:	08007278 	.word	0x08007278
 8006474:	08007298 	.word	0x08007298
 8006478:	08007258 	.word	0x08007258
 800647c:	08007414 	.word	0x08007414
 8006480:	0800741a 	.word	0x0800741a
 8006484:	0800741e 	.word	0x0800741e
 8006488:	08003f09 	.word	0x08003f09
 800648c:	0800620b 	.word	0x0800620b

08006490 <_sbrk_r>:
 8006490:	b538      	push	{r3, r4, r5, lr}
 8006492:	2300      	movs	r3, #0
 8006494:	4d05      	ldr	r5, [pc, #20]	; (80064ac <_sbrk_r+0x1c>)
 8006496:	4604      	mov	r4, r0
 8006498:	4608      	mov	r0, r1
 800649a:	602b      	str	r3, [r5, #0]
 800649c:	f7fb fa26 	bl	80018ec <_sbrk>
 80064a0:	1c43      	adds	r3, r0, #1
 80064a2:	d102      	bne.n	80064aa <_sbrk_r+0x1a>
 80064a4:	682b      	ldr	r3, [r5, #0]
 80064a6:	b103      	cbz	r3, 80064aa <_sbrk_r+0x1a>
 80064a8:	6023      	str	r3, [r4, #0]
 80064aa:	bd38      	pop	{r3, r4, r5, pc}
 80064ac:	20001160 	.word	0x20001160

080064b0 <__sread>:
 80064b0:	b510      	push	{r4, lr}
 80064b2:	460c      	mov	r4, r1
 80064b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80064b8:	f000 faee 	bl	8006a98 <_read_r>
 80064bc:	2800      	cmp	r0, #0
 80064be:	bfab      	itete	ge
 80064c0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80064c2:	89a3      	ldrhlt	r3, [r4, #12]
 80064c4:	181b      	addge	r3, r3, r0
 80064c6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80064ca:	bfac      	ite	ge
 80064cc:	6563      	strge	r3, [r4, #84]	; 0x54
 80064ce:	81a3      	strhlt	r3, [r4, #12]
 80064d0:	bd10      	pop	{r4, pc}

080064d2 <__swrite>:
 80064d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80064d6:	461f      	mov	r7, r3
 80064d8:	898b      	ldrh	r3, [r1, #12]
 80064da:	4605      	mov	r5, r0
 80064dc:	05db      	lsls	r3, r3, #23
 80064de:	460c      	mov	r4, r1
 80064e0:	4616      	mov	r6, r2
 80064e2:	d505      	bpl.n	80064f0 <__swrite+0x1e>
 80064e4:	2302      	movs	r3, #2
 80064e6:	2200      	movs	r2, #0
 80064e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80064ec:	f000 f9f4 	bl	80068d8 <_lseek_r>
 80064f0:	89a3      	ldrh	r3, [r4, #12]
 80064f2:	4632      	mov	r2, r6
 80064f4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80064f8:	81a3      	strh	r3, [r4, #12]
 80064fa:	4628      	mov	r0, r5
 80064fc:	463b      	mov	r3, r7
 80064fe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006502:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006506:	f000 b869 	b.w	80065dc <_write_r>

0800650a <__sseek>:
 800650a:	b510      	push	{r4, lr}
 800650c:	460c      	mov	r4, r1
 800650e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006512:	f000 f9e1 	bl	80068d8 <_lseek_r>
 8006516:	1c43      	adds	r3, r0, #1
 8006518:	89a3      	ldrh	r3, [r4, #12]
 800651a:	bf15      	itete	ne
 800651c:	6560      	strne	r0, [r4, #84]	; 0x54
 800651e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006522:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006526:	81a3      	strheq	r3, [r4, #12]
 8006528:	bf18      	it	ne
 800652a:	81a3      	strhne	r3, [r4, #12]
 800652c:	bd10      	pop	{r4, pc}

0800652e <__sclose>:
 800652e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006532:	f000 b8f1 	b.w	8006718 <_close_r>
	...

08006538 <__swbuf_r>:
 8006538:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800653a:	460e      	mov	r6, r1
 800653c:	4614      	mov	r4, r2
 800653e:	4605      	mov	r5, r0
 8006540:	b118      	cbz	r0, 800654a <__swbuf_r+0x12>
 8006542:	6983      	ldr	r3, [r0, #24]
 8006544:	b90b      	cbnz	r3, 800654a <__swbuf_r+0x12>
 8006546:	f7fe ffc1 	bl	80054cc <__sinit>
 800654a:	4b21      	ldr	r3, [pc, #132]	; (80065d0 <__swbuf_r+0x98>)
 800654c:	429c      	cmp	r4, r3
 800654e:	d12b      	bne.n	80065a8 <__swbuf_r+0x70>
 8006550:	686c      	ldr	r4, [r5, #4]
 8006552:	69a3      	ldr	r3, [r4, #24]
 8006554:	60a3      	str	r3, [r4, #8]
 8006556:	89a3      	ldrh	r3, [r4, #12]
 8006558:	071a      	lsls	r2, r3, #28
 800655a:	d52f      	bpl.n	80065bc <__swbuf_r+0x84>
 800655c:	6923      	ldr	r3, [r4, #16]
 800655e:	b36b      	cbz	r3, 80065bc <__swbuf_r+0x84>
 8006560:	6923      	ldr	r3, [r4, #16]
 8006562:	6820      	ldr	r0, [r4, #0]
 8006564:	b2f6      	uxtb	r6, r6
 8006566:	1ac0      	subs	r0, r0, r3
 8006568:	6963      	ldr	r3, [r4, #20]
 800656a:	4637      	mov	r7, r6
 800656c:	4283      	cmp	r3, r0
 800656e:	dc04      	bgt.n	800657a <__swbuf_r+0x42>
 8006570:	4621      	mov	r1, r4
 8006572:	4628      	mov	r0, r5
 8006574:	f000 f962 	bl	800683c <_fflush_r>
 8006578:	bb30      	cbnz	r0, 80065c8 <__swbuf_r+0x90>
 800657a:	68a3      	ldr	r3, [r4, #8]
 800657c:	3001      	adds	r0, #1
 800657e:	3b01      	subs	r3, #1
 8006580:	60a3      	str	r3, [r4, #8]
 8006582:	6823      	ldr	r3, [r4, #0]
 8006584:	1c5a      	adds	r2, r3, #1
 8006586:	6022      	str	r2, [r4, #0]
 8006588:	701e      	strb	r6, [r3, #0]
 800658a:	6963      	ldr	r3, [r4, #20]
 800658c:	4283      	cmp	r3, r0
 800658e:	d004      	beq.n	800659a <__swbuf_r+0x62>
 8006590:	89a3      	ldrh	r3, [r4, #12]
 8006592:	07db      	lsls	r3, r3, #31
 8006594:	d506      	bpl.n	80065a4 <__swbuf_r+0x6c>
 8006596:	2e0a      	cmp	r6, #10
 8006598:	d104      	bne.n	80065a4 <__swbuf_r+0x6c>
 800659a:	4621      	mov	r1, r4
 800659c:	4628      	mov	r0, r5
 800659e:	f000 f94d 	bl	800683c <_fflush_r>
 80065a2:	b988      	cbnz	r0, 80065c8 <__swbuf_r+0x90>
 80065a4:	4638      	mov	r0, r7
 80065a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80065a8:	4b0a      	ldr	r3, [pc, #40]	; (80065d4 <__swbuf_r+0x9c>)
 80065aa:	429c      	cmp	r4, r3
 80065ac:	d101      	bne.n	80065b2 <__swbuf_r+0x7a>
 80065ae:	68ac      	ldr	r4, [r5, #8]
 80065b0:	e7cf      	b.n	8006552 <__swbuf_r+0x1a>
 80065b2:	4b09      	ldr	r3, [pc, #36]	; (80065d8 <__swbuf_r+0xa0>)
 80065b4:	429c      	cmp	r4, r3
 80065b6:	bf08      	it	eq
 80065b8:	68ec      	ldreq	r4, [r5, #12]
 80065ba:	e7ca      	b.n	8006552 <__swbuf_r+0x1a>
 80065bc:	4621      	mov	r1, r4
 80065be:	4628      	mov	r0, r5
 80065c0:	f000 f81e 	bl	8006600 <__swsetup_r>
 80065c4:	2800      	cmp	r0, #0
 80065c6:	d0cb      	beq.n	8006560 <__swbuf_r+0x28>
 80065c8:	f04f 37ff 	mov.w	r7, #4294967295
 80065cc:	e7ea      	b.n	80065a4 <__swbuf_r+0x6c>
 80065ce:	bf00      	nop
 80065d0:	08007278 	.word	0x08007278
 80065d4:	08007298 	.word	0x08007298
 80065d8:	08007258 	.word	0x08007258

080065dc <_write_r>:
 80065dc:	b538      	push	{r3, r4, r5, lr}
 80065de:	4604      	mov	r4, r0
 80065e0:	4608      	mov	r0, r1
 80065e2:	4611      	mov	r1, r2
 80065e4:	2200      	movs	r2, #0
 80065e6:	4d05      	ldr	r5, [pc, #20]	; (80065fc <_write_r+0x20>)
 80065e8:	602a      	str	r2, [r5, #0]
 80065ea:	461a      	mov	r2, r3
 80065ec:	f7fa fb96 	bl	8000d1c <_write>
 80065f0:	1c43      	adds	r3, r0, #1
 80065f2:	d102      	bne.n	80065fa <_write_r+0x1e>
 80065f4:	682b      	ldr	r3, [r5, #0]
 80065f6:	b103      	cbz	r3, 80065fa <_write_r+0x1e>
 80065f8:	6023      	str	r3, [r4, #0]
 80065fa:	bd38      	pop	{r3, r4, r5, pc}
 80065fc:	20001160 	.word	0x20001160

08006600 <__swsetup_r>:
 8006600:	4b32      	ldr	r3, [pc, #200]	; (80066cc <__swsetup_r+0xcc>)
 8006602:	b570      	push	{r4, r5, r6, lr}
 8006604:	681d      	ldr	r5, [r3, #0]
 8006606:	4606      	mov	r6, r0
 8006608:	460c      	mov	r4, r1
 800660a:	b125      	cbz	r5, 8006616 <__swsetup_r+0x16>
 800660c:	69ab      	ldr	r3, [r5, #24]
 800660e:	b913      	cbnz	r3, 8006616 <__swsetup_r+0x16>
 8006610:	4628      	mov	r0, r5
 8006612:	f7fe ff5b 	bl	80054cc <__sinit>
 8006616:	4b2e      	ldr	r3, [pc, #184]	; (80066d0 <__swsetup_r+0xd0>)
 8006618:	429c      	cmp	r4, r3
 800661a:	d10f      	bne.n	800663c <__swsetup_r+0x3c>
 800661c:	686c      	ldr	r4, [r5, #4]
 800661e:	89a3      	ldrh	r3, [r4, #12]
 8006620:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006624:	0719      	lsls	r1, r3, #28
 8006626:	d42c      	bmi.n	8006682 <__swsetup_r+0x82>
 8006628:	06dd      	lsls	r5, r3, #27
 800662a:	d411      	bmi.n	8006650 <__swsetup_r+0x50>
 800662c:	2309      	movs	r3, #9
 800662e:	6033      	str	r3, [r6, #0]
 8006630:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006634:	f04f 30ff 	mov.w	r0, #4294967295
 8006638:	81a3      	strh	r3, [r4, #12]
 800663a:	e03e      	b.n	80066ba <__swsetup_r+0xba>
 800663c:	4b25      	ldr	r3, [pc, #148]	; (80066d4 <__swsetup_r+0xd4>)
 800663e:	429c      	cmp	r4, r3
 8006640:	d101      	bne.n	8006646 <__swsetup_r+0x46>
 8006642:	68ac      	ldr	r4, [r5, #8]
 8006644:	e7eb      	b.n	800661e <__swsetup_r+0x1e>
 8006646:	4b24      	ldr	r3, [pc, #144]	; (80066d8 <__swsetup_r+0xd8>)
 8006648:	429c      	cmp	r4, r3
 800664a:	bf08      	it	eq
 800664c:	68ec      	ldreq	r4, [r5, #12]
 800664e:	e7e6      	b.n	800661e <__swsetup_r+0x1e>
 8006650:	0758      	lsls	r0, r3, #29
 8006652:	d512      	bpl.n	800667a <__swsetup_r+0x7a>
 8006654:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006656:	b141      	cbz	r1, 800666a <__swsetup_r+0x6a>
 8006658:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800665c:	4299      	cmp	r1, r3
 800665e:	d002      	beq.n	8006666 <__swsetup_r+0x66>
 8006660:	4630      	mov	r0, r6
 8006662:	f7ff fb85 	bl	8005d70 <_free_r>
 8006666:	2300      	movs	r3, #0
 8006668:	6363      	str	r3, [r4, #52]	; 0x34
 800666a:	89a3      	ldrh	r3, [r4, #12]
 800666c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006670:	81a3      	strh	r3, [r4, #12]
 8006672:	2300      	movs	r3, #0
 8006674:	6063      	str	r3, [r4, #4]
 8006676:	6923      	ldr	r3, [r4, #16]
 8006678:	6023      	str	r3, [r4, #0]
 800667a:	89a3      	ldrh	r3, [r4, #12]
 800667c:	f043 0308 	orr.w	r3, r3, #8
 8006680:	81a3      	strh	r3, [r4, #12]
 8006682:	6923      	ldr	r3, [r4, #16]
 8006684:	b94b      	cbnz	r3, 800669a <__swsetup_r+0x9a>
 8006686:	89a3      	ldrh	r3, [r4, #12]
 8006688:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800668c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006690:	d003      	beq.n	800669a <__swsetup_r+0x9a>
 8006692:	4621      	mov	r1, r4
 8006694:	4630      	mov	r0, r6
 8006696:	f000 f957 	bl	8006948 <__smakebuf_r>
 800669a:	89a0      	ldrh	r0, [r4, #12]
 800669c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80066a0:	f010 0301 	ands.w	r3, r0, #1
 80066a4:	d00a      	beq.n	80066bc <__swsetup_r+0xbc>
 80066a6:	2300      	movs	r3, #0
 80066a8:	60a3      	str	r3, [r4, #8]
 80066aa:	6963      	ldr	r3, [r4, #20]
 80066ac:	425b      	negs	r3, r3
 80066ae:	61a3      	str	r3, [r4, #24]
 80066b0:	6923      	ldr	r3, [r4, #16]
 80066b2:	b943      	cbnz	r3, 80066c6 <__swsetup_r+0xc6>
 80066b4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80066b8:	d1ba      	bne.n	8006630 <__swsetup_r+0x30>
 80066ba:	bd70      	pop	{r4, r5, r6, pc}
 80066bc:	0781      	lsls	r1, r0, #30
 80066be:	bf58      	it	pl
 80066c0:	6963      	ldrpl	r3, [r4, #20]
 80066c2:	60a3      	str	r3, [r4, #8]
 80066c4:	e7f4      	b.n	80066b0 <__swsetup_r+0xb0>
 80066c6:	2000      	movs	r0, #0
 80066c8:	e7f7      	b.n	80066ba <__swsetup_r+0xba>
 80066ca:	bf00      	nop
 80066cc:	2000001c 	.word	0x2000001c
 80066d0:	08007278 	.word	0x08007278
 80066d4:	08007298 	.word	0x08007298
 80066d8:	08007258 	.word	0x08007258

080066dc <__assert_func>:
 80066dc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80066de:	4614      	mov	r4, r2
 80066e0:	461a      	mov	r2, r3
 80066e2:	4b09      	ldr	r3, [pc, #36]	; (8006708 <__assert_func+0x2c>)
 80066e4:	4605      	mov	r5, r0
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	68d8      	ldr	r0, [r3, #12]
 80066ea:	b14c      	cbz	r4, 8006700 <__assert_func+0x24>
 80066ec:	4b07      	ldr	r3, [pc, #28]	; (800670c <__assert_func+0x30>)
 80066ee:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80066f2:	9100      	str	r1, [sp, #0]
 80066f4:	462b      	mov	r3, r5
 80066f6:	4906      	ldr	r1, [pc, #24]	; (8006710 <__assert_func+0x34>)
 80066f8:	f000 f8dc 	bl	80068b4 <fiprintf>
 80066fc:	f000 f9eb 	bl	8006ad6 <abort>
 8006700:	4b04      	ldr	r3, [pc, #16]	; (8006714 <__assert_func+0x38>)
 8006702:	461c      	mov	r4, r3
 8006704:	e7f3      	b.n	80066ee <__assert_func+0x12>
 8006706:	bf00      	nop
 8006708:	2000001c 	.word	0x2000001c
 800670c:	08007425 	.word	0x08007425
 8006710:	08007432 	.word	0x08007432
 8006714:	08007460 	.word	0x08007460

08006718 <_close_r>:
 8006718:	b538      	push	{r3, r4, r5, lr}
 800671a:	2300      	movs	r3, #0
 800671c:	4d05      	ldr	r5, [pc, #20]	; (8006734 <_close_r+0x1c>)
 800671e:	4604      	mov	r4, r0
 8006720:	4608      	mov	r0, r1
 8006722:	602b      	str	r3, [r5, #0]
 8006724:	f7fb f8d4 	bl	80018d0 <_close>
 8006728:	1c43      	adds	r3, r0, #1
 800672a:	d102      	bne.n	8006732 <_close_r+0x1a>
 800672c:	682b      	ldr	r3, [r5, #0]
 800672e:	b103      	cbz	r3, 8006732 <_close_r+0x1a>
 8006730:	6023      	str	r3, [r4, #0]
 8006732:	bd38      	pop	{r3, r4, r5, pc}
 8006734:	20001160 	.word	0x20001160

08006738 <__sflush_r>:
 8006738:	898a      	ldrh	r2, [r1, #12]
 800673a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800673c:	4605      	mov	r5, r0
 800673e:	0710      	lsls	r0, r2, #28
 8006740:	460c      	mov	r4, r1
 8006742:	d457      	bmi.n	80067f4 <__sflush_r+0xbc>
 8006744:	684b      	ldr	r3, [r1, #4]
 8006746:	2b00      	cmp	r3, #0
 8006748:	dc04      	bgt.n	8006754 <__sflush_r+0x1c>
 800674a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800674c:	2b00      	cmp	r3, #0
 800674e:	dc01      	bgt.n	8006754 <__sflush_r+0x1c>
 8006750:	2000      	movs	r0, #0
 8006752:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006754:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006756:	2e00      	cmp	r6, #0
 8006758:	d0fa      	beq.n	8006750 <__sflush_r+0x18>
 800675a:	2300      	movs	r3, #0
 800675c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006760:	682f      	ldr	r7, [r5, #0]
 8006762:	602b      	str	r3, [r5, #0]
 8006764:	d032      	beq.n	80067cc <__sflush_r+0x94>
 8006766:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006768:	89a3      	ldrh	r3, [r4, #12]
 800676a:	075a      	lsls	r2, r3, #29
 800676c:	d505      	bpl.n	800677a <__sflush_r+0x42>
 800676e:	6863      	ldr	r3, [r4, #4]
 8006770:	1ac0      	subs	r0, r0, r3
 8006772:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006774:	b10b      	cbz	r3, 800677a <__sflush_r+0x42>
 8006776:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006778:	1ac0      	subs	r0, r0, r3
 800677a:	2300      	movs	r3, #0
 800677c:	4602      	mov	r2, r0
 800677e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006780:	4628      	mov	r0, r5
 8006782:	6a21      	ldr	r1, [r4, #32]
 8006784:	47b0      	blx	r6
 8006786:	1c43      	adds	r3, r0, #1
 8006788:	89a3      	ldrh	r3, [r4, #12]
 800678a:	d106      	bne.n	800679a <__sflush_r+0x62>
 800678c:	6829      	ldr	r1, [r5, #0]
 800678e:	291d      	cmp	r1, #29
 8006790:	d82c      	bhi.n	80067ec <__sflush_r+0xb4>
 8006792:	4a29      	ldr	r2, [pc, #164]	; (8006838 <__sflush_r+0x100>)
 8006794:	40ca      	lsrs	r2, r1
 8006796:	07d6      	lsls	r6, r2, #31
 8006798:	d528      	bpl.n	80067ec <__sflush_r+0xb4>
 800679a:	2200      	movs	r2, #0
 800679c:	6062      	str	r2, [r4, #4]
 800679e:	6922      	ldr	r2, [r4, #16]
 80067a0:	04d9      	lsls	r1, r3, #19
 80067a2:	6022      	str	r2, [r4, #0]
 80067a4:	d504      	bpl.n	80067b0 <__sflush_r+0x78>
 80067a6:	1c42      	adds	r2, r0, #1
 80067a8:	d101      	bne.n	80067ae <__sflush_r+0x76>
 80067aa:	682b      	ldr	r3, [r5, #0]
 80067ac:	b903      	cbnz	r3, 80067b0 <__sflush_r+0x78>
 80067ae:	6560      	str	r0, [r4, #84]	; 0x54
 80067b0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80067b2:	602f      	str	r7, [r5, #0]
 80067b4:	2900      	cmp	r1, #0
 80067b6:	d0cb      	beq.n	8006750 <__sflush_r+0x18>
 80067b8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80067bc:	4299      	cmp	r1, r3
 80067be:	d002      	beq.n	80067c6 <__sflush_r+0x8e>
 80067c0:	4628      	mov	r0, r5
 80067c2:	f7ff fad5 	bl	8005d70 <_free_r>
 80067c6:	2000      	movs	r0, #0
 80067c8:	6360      	str	r0, [r4, #52]	; 0x34
 80067ca:	e7c2      	b.n	8006752 <__sflush_r+0x1a>
 80067cc:	6a21      	ldr	r1, [r4, #32]
 80067ce:	2301      	movs	r3, #1
 80067d0:	4628      	mov	r0, r5
 80067d2:	47b0      	blx	r6
 80067d4:	1c41      	adds	r1, r0, #1
 80067d6:	d1c7      	bne.n	8006768 <__sflush_r+0x30>
 80067d8:	682b      	ldr	r3, [r5, #0]
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d0c4      	beq.n	8006768 <__sflush_r+0x30>
 80067de:	2b1d      	cmp	r3, #29
 80067e0:	d001      	beq.n	80067e6 <__sflush_r+0xae>
 80067e2:	2b16      	cmp	r3, #22
 80067e4:	d101      	bne.n	80067ea <__sflush_r+0xb2>
 80067e6:	602f      	str	r7, [r5, #0]
 80067e8:	e7b2      	b.n	8006750 <__sflush_r+0x18>
 80067ea:	89a3      	ldrh	r3, [r4, #12]
 80067ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80067f0:	81a3      	strh	r3, [r4, #12]
 80067f2:	e7ae      	b.n	8006752 <__sflush_r+0x1a>
 80067f4:	690f      	ldr	r7, [r1, #16]
 80067f6:	2f00      	cmp	r7, #0
 80067f8:	d0aa      	beq.n	8006750 <__sflush_r+0x18>
 80067fa:	0793      	lsls	r3, r2, #30
 80067fc:	bf18      	it	ne
 80067fe:	2300      	movne	r3, #0
 8006800:	680e      	ldr	r6, [r1, #0]
 8006802:	bf08      	it	eq
 8006804:	694b      	ldreq	r3, [r1, #20]
 8006806:	1bf6      	subs	r6, r6, r7
 8006808:	600f      	str	r7, [r1, #0]
 800680a:	608b      	str	r3, [r1, #8]
 800680c:	2e00      	cmp	r6, #0
 800680e:	dd9f      	ble.n	8006750 <__sflush_r+0x18>
 8006810:	4633      	mov	r3, r6
 8006812:	463a      	mov	r2, r7
 8006814:	4628      	mov	r0, r5
 8006816:	6a21      	ldr	r1, [r4, #32]
 8006818:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800681c:	47e0      	blx	ip
 800681e:	2800      	cmp	r0, #0
 8006820:	dc06      	bgt.n	8006830 <__sflush_r+0xf8>
 8006822:	89a3      	ldrh	r3, [r4, #12]
 8006824:	f04f 30ff 	mov.w	r0, #4294967295
 8006828:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800682c:	81a3      	strh	r3, [r4, #12]
 800682e:	e790      	b.n	8006752 <__sflush_r+0x1a>
 8006830:	4407      	add	r7, r0
 8006832:	1a36      	subs	r6, r6, r0
 8006834:	e7ea      	b.n	800680c <__sflush_r+0xd4>
 8006836:	bf00      	nop
 8006838:	20400001 	.word	0x20400001

0800683c <_fflush_r>:
 800683c:	b538      	push	{r3, r4, r5, lr}
 800683e:	690b      	ldr	r3, [r1, #16]
 8006840:	4605      	mov	r5, r0
 8006842:	460c      	mov	r4, r1
 8006844:	b913      	cbnz	r3, 800684c <_fflush_r+0x10>
 8006846:	2500      	movs	r5, #0
 8006848:	4628      	mov	r0, r5
 800684a:	bd38      	pop	{r3, r4, r5, pc}
 800684c:	b118      	cbz	r0, 8006856 <_fflush_r+0x1a>
 800684e:	6983      	ldr	r3, [r0, #24]
 8006850:	b90b      	cbnz	r3, 8006856 <_fflush_r+0x1a>
 8006852:	f7fe fe3b 	bl	80054cc <__sinit>
 8006856:	4b14      	ldr	r3, [pc, #80]	; (80068a8 <_fflush_r+0x6c>)
 8006858:	429c      	cmp	r4, r3
 800685a:	d11b      	bne.n	8006894 <_fflush_r+0x58>
 800685c:	686c      	ldr	r4, [r5, #4]
 800685e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006862:	2b00      	cmp	r3, #0
 8006864:	d0ef      	beq.n	8006846 <_fflush_r+0xa>
 8006866:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006868:	07d0      	lsls	r0, r2, #31
 800686a:	d404      	bmi.n	8006876 <_fflush_r+0x3a>
 800686c:	0599      	lsls	r1, r3, #22
 800686e:	d402      	bmi.n	8006876 <_fflush_r+0x3a>
 8006870:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006872:	f7fe fece 	bl	8005612 <__retarget_lock_acquire_recursive>
 8006876:	4628      	mov	r0, r5
 8006878:	4621      	mov	r1, r4
 800687a:	f7ff ff5d 	bl	8006738 <__sflush_r>
 800687e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006880:	4605      	mov	r5, r0
 8006882:	07da      	lsls	r2, r3, #31
 8006884:	d4e0      	bmi.n	8006848 <_fflush_r+0xc>
 8006886:	89a3      	ldrh	r3, [r4, #12]
 8006888:	059b      	lsls	r3, r3, #22
 800688a:	d4dd      	bmi.n	8006848 <_fflush_r+0xc>
 800688c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800688e:	f7fe fec1 	bl	8005614 <__retarget_lock_release_recursive>
 8006892:	e7d9      	b.n	8006848 <_fflush_r+0xc>
 8006894:	4b05      	ldr	r3, [pc, #20]	; (80068ac <_fflush_r+0x70>)
 8006896:	429c      	cmp	r4, r3
 8006898:	d101      	bne.n	800689e <_fflush_r+0x62>
 800689a:	68ac      	ldr	r4, [r5, #8]
 800689c:	e7df      	b.n	800685e <_fflush_r+0x22>
 800689e:	4b04      	ldr	r3, [pc, #16]	; (80068b0 <_fflush_r+0x74>)
 80068a0:	429c      	cmp	r4, r3
 80068a2:	bf08      	it	eq
 80068a4:	68ec      	ldreq	r4, [r5, #12]
 80068a6:	e7da      	b.n	800685e <_fflush_r+0x22>
 80068a8:	08007278 	.word	0x08007278
 80068ac:	08007298 	.word	0x08007298
 80068b0:	08007258 	.word	0x08007258

080068b4 <fiprintf>:
 80068b4:	b40e      	push	{r1, r2, r3}
 80068b6:	b503      	push	{r0, r1, lr}
 80068b8:	4601      	mov	r1, r0
 80068ba:	ab03      	add	r3, sp, #12
 80068bc:	4805      	ldr	r0, [pc, #20]	; (80068d4 <fiprintf+0x20>)
 80068be:	f853 2b04 	ldr.w	r2, [r3], #4
 80068c2:	6800      	ldr	r0, [r0, #0]
 80068c4:	9301      	str	r3, [sp, #4]
 80068c6:	f7ff fcb3 	bl	8006230 <_vfiprintf_r>
 80068ca:	b002      	add	sp, #8
 80068cc:	f85d eb04 	ldr.w	lr, [sp], #4
 80068d0:	b003      	add	sp, #12
 80068d2:	4770      	bx	lr
 80068d4:	2000001c 	.word	0x2000001c

080068d8 <_lseek_r>:
 80068d8:	b538      	push	{r3, r4, r5, lr}
 80068da:	4604      	mov	r4, r0
 80068dc:	4608      	mov	r0, r1
 80068de:	4611      	mov	r1, r2
 80068e0:	2200      	movs	r2, #0
 80068e2:	4d05      	ldr	r5, [pc, #20]	; (80068f8 <_lseek_r+0x20>)
 80068e4:	602a      	str	r2, [r5, #0]
 80068e6:	461a      	mov	r2, r3
 80068e8:	f7fa fffe 	bl	80018e8 <_lseek>
 80068ec:	1c43      	adds	r3, r0, #1
 80068ee:	d102      	bne.n	80068f6 <_lseek_r+0x1e>
 80068f0:	682b      	ldr	r3, [r5, #0]
 80068f2:	b103      	cbz	r3, 80068f6 <_lseek_r+0x1e>
 80068f4:	6023      	str	r3, [r4, #0]
 80068f6:	bd38      	pop	{r3, r4, r5, pc}
 80068f8:	20001160 	.word	0x20001160

080068fc <__swhatbuf_r>:
 80068fc:	b570      	push	{r4, r5, r6, lr}
 80068fe:	460e      	mov	r6, r1
 8006900:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006904:	4614      	mov	r4, r2
 8006906:	2900      	cmp	r1, #0
 8006908:	461d      	mov	r5, r3
 800690a:	b096      	sub	sp, #88	; 0x58
 800690c:	da08      	bge.n	8006920 <__swhatbuf_r+0x24>
 800690e:	2200      	movs	r2, #0
 8006910:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8006914:	602a      	str	r2, [r5, #0]
 8006916:	061a      	lsls	r2, r3, #24
 8006918:	d410      	bmi.n	800693c <__swhatbuf_r+0x40>
 800691a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800691e:	e00e      	b.n	800693e <__swhatbuf_r+0x42>
 8006920:	466a      	mov	r2, sp
 8006922:	f000 f8df 	bl	8006ae4 <_fstat_r>
 8006926:	2800      	cmp	r0, #0
 8006928:	dbf1      	blt.n	800690e <__swhatbuf_r+0x12>
 800692a:	9a01      	ldr	r2, [sp, #4]
 800692c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006930:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006934:	425a      	negs	r2, r3
 8006936:	415a      	adcs	r2, r3
 8006938:	602a      	str	r2, [r5, #0]
 800693a:	e7ee      	b.n	800691a <__swhatbuf_r+0x1e>
 800693c:	2340      	movs	r3, #64	; 0x40
 800693e:	2000      	movs	r0, #0
 8006940:	6023      	str	r3, [r4, #0]
 8006942:	b016      	add	sp, #88	; 0x58
 8006944:	bd70      	pop	{r4, r5, r6, pc}
	...

08006948 <__smakebuf_r>:
 8006948:	898b      	ldrh	r3, [r1, #12]
 800694a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800694c:	079d      	lsls	r5, r3, #30
 800694e:	4606      	mov	r6, r0
 8006950:	460c      	mov	r4, r1
 8006952:	d507      	bpl.n	8006964 <__smakebuf_r+0x1c>
 8006954:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006958:	6023      	str	r3, [r4, #0]
 800695a:	6123      	str	r3, [r4, #16]
 800695c:	2301      	movs	r3, #1
 800695e:	6163      	str	r3, [r4, #20]
 8006960:	b002      	add	sp, #8
 8006962:	bd70      	pop	{r4, r5, r6, pc}
 8006964:	466a      	mov	r2, sp
 8006966:	ab01      	add	r3, sp, #4
 8006968:	f7ff ffc8 	bl	80068fc <__swhatbuf_r>
 800696c:	9900      	ldr	r1, [sp, #0]
 800696e:	4605      	mov	r5, r0
 8006970:	4630      	mov	r0, r6
 8006972:	f7ff fa65 	bl	8005e40 <_malloc_r>
 8006976:	b948      	cbnz	r0, 800698c <__smakebuf_r+0x44>
 8006978:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800697c:	059a      	lsls	r2, r3, #22
 800697e:	d4ef      	bmi.n	8006960 <__smakebuf_r+0x18>
 8006980:	f023 0303 	bic.w	r3, r3, #3
 8006984:	f043 0302 	orr.w	r3, r3, #2
 8006988:	81a3      	strh	r3, [r4, #12]
 800698a:	e7e3      	b.n	8006954 <__smakebuf_r+0xc>
 800698c:	4b0d      	ldr	r3, [pc, #52]	; (80069c4 <__smakebuf_r+0x7c>)
 800698e:	62b3      	str	r3, [r6, #40]	; 0x28
 8006990:	89a3      	ldrh	r3, [r4, #12]
 8006992:	6020      	str	r0, [r4, #0]
 8006994:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006998:	81a3      	strh	r3, [r4, #12]
 800699a:	9b00      	ldr	r3, [sp, #0]
 800699c:	6120      	str	r0, [r4, #16]
 800699e:	6163      	str	r3, [r4, #20]
 80069a0:	9b01      	ldr	r3, [sp, #4]
 80069a2:	b15b      	cbz	r3, 80069bc <__smakebuf_r+0x74>
 80069a4:	4630      	mov	r0, r6
 80069a6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80069aa:	f000 f8ad 	bl	8006b08 <_isatty_r>
 80069ae:	b128      	cbz	r0, 80069bc <__smakebuf_r+0x74>
 80069b0:	89a3      	ldrh	r3, [r4, #12]
 80069b2:	f023 0303 	bic.w	r3, r3, #3
 80069b6:	f043 0301 	orr.w	r3, r3, #1
 80069ba:	81a3      	strh	r3, [r4, #12]
 80069bc:	89a0      	ldrh	r0, [r4, #12]
 80069be:	4305      	orrs	r5, r0
 80069c0:	81a5      	strh	r5, [r4, #12]
 80069c2:	e7cd      	b.n	8006960 <__smakebuf_r+0x18>
 80069c4:	08005465 	.word	0x08005465

080069c8 <__ascii_mbtowc>:
 80069c8:	b082      	sub	sp, #8
 80069ca:	b901      	cbnz	r1, 80069ce <__ascii_mbtowc+0x6>
 80069cc:	a901      	add	r1, sp, #4
 80069ce:	b142      	cbz	r2, 80069e2 <__ascii_mbtowc+0x1a>
 80069d0:	b14b      	cbz	r3, 80069e6 <__ascii_mbtowc+0x1e>
 80069d2:	7813      	ldrb	r3, [r2, #0]
 80069d4:	600b      	str	r3, [r1, #0]
 80069d6:	7812      	ldrb	r2, [r2, #0]
 80069d8:	1e10      	subs	r0, r2, #0
 80069da:	bf18      	it	ne
 80069dc:	2001      	movne	r0, #1
 80069de:	b002      	add	sp, #8
 80069e0:	4770      	bx	lr
 80069e2:	4610      	mov	r0, r2
 80069e4:	e7fb      	b.n	80069de <__ascii_mbtowc+0x16>
 80069e6:	f06f 0001 	mvn.w	r0, #1
 80069ea:	e7f8      	b.n	80069de <__ascii_mbtowc+0x16>

080069ec <memmove>:
 80069ec:	4288      	cmp	r0, r1
 80069ee:	b510      	push	{r4, lr}
 80069f0:	eb01 0402 	add.w	r4, r1, r2
 80069f4:	d902      	bls.n	80069fc <memmove+0x10>
 80069f6:	4284      	cmp	r4, r0
 80069f8:	4623      	mov	r3, r4
 80069fa:	d807      	bhi.n	8006a0c <memmove+0x20>
 80069fc:	1e43      	subs	r3, r0, #1
 80069fe:	42a1      	cmp	r1, r4
 8006a00:	d008      	beq.n	8006a14 <memmove+0x28>
 8006a02:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006a06:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006a0a:	e7f8      	b.n	80069fe <memmove+0x12>
 8006a0c:	4601      	mov	r1, r0
 8006a0e:	4402      	add	r2, r0
 8006a10:	428a      	cmp	r2, r1
 8006a12:	d100      	bne.n	8006a16 <memmove+0x2a>
 8006a14:	bd10      	pop	{r4, pc}
 8006a16:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006a1a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006a1e:	e7f7      	b.n	8006a10 <memmove+0x24>

08006a20 <__malloc_lock>:
 8006a20:	4801      	ldr	r0, [pc, #4]	; (8006a28 <__malloc_lock+0x8>)
 8006a22:	f7fe bdf6 	b.w	8005612 <__retarget_lock_acquire_recursive>
 8006a26:	bf00      	nop
 8006a28:	20001154 	.word	0x20001154

08006a2c <__malloc_unlock>:
 8006a2c:	4801      	ldr	r0, [pc, #4]	; (8006a34 <__malloc_unlock+0x8>)
 8006a2e:	f7fe bdf1 	b.w	8005614 <__retarget_lock_release_recursive>
 8006a32:	bf00      	nop
 8006a34:	20001154 	.word	0x20001154

08006a38 <_realloc_r>:
 8006a38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a3c:	4680      	mov	r8, r0
 8006a3e:	4614      	mov	r4, r2
 8006a40:	460e      	mov	r6, r1
 8006a42:	b921      	cbnz	r1, 8006a4e <_realloc_r+0x16>
 8006a44:	4611      	mov	r1, r2
 8006a46:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006a4a:	f7ff b9f9 	b.w	8005e40 <_malloc_r>
 8006a4e:	b92a      	cbnz	r2, 8006a5c <_realloc_r+0x24>
 8006a50:	f7ff f98e 	bl	8005d70 <_free_r>
 8006a54:	4625      	mov	r5, r4
 8006a56:	4628      	mov	r0, r5
 8006a58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006a5c:	f000 f864 	bl	8006b28 <_malloc_usable_size_r>
 8006a60:	4284      	cmp	r4, r0
 8006a62:	4607      	mov	r7, r0
 8006a64:	d802      	bhi.n	8006a6c <_realloc_r+0x34>
 8006a66:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006a6a:	d812      	bhi.n	8006a92 <_realloc_r+0x5a>
 8006a6c:	4621      	mov	r1, r4
 8006a6e:	4640      	mov	r0, r8
 8006a70:	f7ff f9e6 	bl	8005e40 <_malloc_r>
 8006a74:	4605      	mov	r5, r0
 8006a76:	2800      	cmp	r0, #0
 8006a78:	d0ed      	beq.n	8006a56 <_realloc_r+0x1e>
 8006a7a:	42bc      	cmp	r4, r7
 8006a7c:	4622      	mov	r2, r4
 8006a7e:	4631      	mov	r1, r6
 8006a80:	bf28      	it	cs
 8006a82:	463a      	movcs	r2, r7
 8006a84:	f7fd f98c 	bl	8003da0 <memcpy>
 8006a88:	4631      	mov	r1, r6
 8006a8a:	4640      	mov	r0, r8
 8006a8c:	f7ff f970 	bl	8005d70 <_free_r>
 8006a90:	e7e1      	b.n	8006a56 <_realloc_r+0x1e>
 8006a92:	4635      	mov	r5, r6
 8006a94:	e7df      	b.n	8006a56 <_realloc_r+0x1e>
	...

08006a98 <_read_r>:
 8006a98:	b538      	push	{r3, r4, r5, lr}
 8006a9a:	4604      	mov	r4, r0
 8006a9c:	4608      	mov	r0, r1
 8006a9e:	4611      	mov	r1, r2
 8006aa0:	2200      	movs	r2, #0
 8006aa2:	4d05      	ldr	r5, [pc, #20]	; (8006ab8 <_read_r+0x20>)
 8006aa4:	602a      	str	r2, [r5, #0]
 8006aa6:	461a      	mov	r2, r3
 8006aa8:	f7fa ff04 	bl	80018b4 <_read>
 8006aac:	1c43      	adds	r3, r0, #1
 8006aae:	d102      	bne.n	8006ab6 <_read_r+0x1e>
 8006ab0:	682b      	ldr	r3, [r5, #0]
 8006ab2:	b103      	cbz	r3, 8006ab6 <_read_r+0x1e>
 8006ab4:	6023      	str	r3, [r4, #0]
 8006ab6:	bd38      	pop	{r3, r4, r5, pc}
 8006ab8:	20001160 	.word	0x20001160

08006abc <__ascii_wctomb>:
 8006abc:	4603      	mov	r3, r0
 8006abe:	4608      	mov	r0, r1
 8006ac0:	b141      	cbz	r1, 8006ad4 <__ascii_wctomb+0x18>
 8006ac2:	2aff      	cmp	r2, #255	; 0xff
 8006ac4:	d904      	bls.n	8006ad0 <__ascii_wctomb+0x14>
 8006ac6:	228a      	movs	r2, #138	; 0x8a
 8006ac8:	f04f 30ff 	mov.w	r0, #4294967295
 8006acc:	601a      	str	r2, [r3, #0]
 8006ace:	4770      	bx	lr
 8006ad0:	2001      	movs	r0, #1
 8006ad2:	700a      	strb	r2, [r1, #0]
 8006ad4:	4770      	bx	lr

08006ad6 <abort>:
 8006ad6:	2006      	movs	r0, #6
 8006ad8:	b508      	push	{r3, lr}
 8006ada:	f000 f855 	bl	8006b88 <raise>
 8006ade:	2001      	movs	r0, #1
 8006ae0:	f7fa fee2 	bl	80018a8 <_exit>

08006ae4 <_fstat_r>:
 8006ae4:	b538      	push	{r3, r4, r5, lr}
 8006ae6:	2300      	movs	r3, #0
 8006ae8:	4d06      	ldr	r5, [pc, #24]	; (8006b04 <_fstat_r+0x20>)
 8006aea:	4604      	mov	r4, r0
 8006aec:	4608      	mov	r0, r1
 8006aee:	4611      	mov	r1, r2
 8006af0:	602b      	str	r3, [r5, #0]
 8006af2:	f7fa fef1 	bl	80018d8 <_fstat>
 8006af6:	1c43      	adds	r3, r0, #1
 8006af8:	d102      	bne.n	8006b00 <_fstat_r+0x1c>
 8006afa:	682b      	ldr	r3, [r5, #0]
 8006afc:	b103      	cbz	r3, 8006b00 <_fstat_r+0x1c>
 8006afe:	6023      	str	r3, [r4, #0]
 8006b00:	bd38      	pop	{r3, r4, r5, pc}
 8006b02:	bf00      	nop
 8006b04:	20001160 	.word	0x20001160

08006b08 <_isatty_r>:
 8006b08:	b538      	push	{r3, r4, r5, lr}
 8006b0a:	2300      	movs	r3, #0
 8006b0c:	4d05      	ldr	r5, [pc, #20]	; (8006b24 <_isatty_r+0x1c>)
 8006b0e:	4604      	mov	r4, r0
 8006b10:	4608      	mov	r0, r1
 8006b12:	602b      	str	r3, [r5, #0]
 8006b14:	f7fa fee6 	bl	80018e4 <_isatty>
 8006b18:	1c43      	adds	r3, r0, #1
 8006b1a:	d102      	bne.n	8006b22 <_isatty_r+0x1a>
 8006b1c:	682b      	ldr	r3, [r5, #0]
 8006b1e:	b103      	cbz	r3, 8006b22 <_isatty_r+0x1a>
 8006b20:	6023      	str	r3, [r4, #0]
 8006b22:	bd38      	pop	{r3, r4, r5, pc}
 8006b24:	20001160 	.word	0x20001160

08006b28 <_malloc_usable_size_r>:
 8006b28:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006b2c:	1f18      	subs	r0, r3, #4
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	bfbc      	itt	lt
 8006b32:	580b      	ldrlt	r3, [r1, r0]
 8006b34:	18c0      	addlt	r0, r0, r3
 8006b36:	4770      	bx	lr

08006b38 <_raise_r>:
 8006b38:	291f      	cmp	r1, #31
 8006b3a:	b538      	push	{r3, r4, r5, lr}
 8006b3c:	4604      	mov	r4, r0
 8006b3e:	460d      	mov	r5, r1
 8006b40:	d904      	bls.n	8006b4c <_raise_r+0x14>
 8006b42:	2316      	movs	r3, #22
 8006b44:	6003      	str	r3, [r0, #0]
 8006b46:	f04f 30ff 	mov.w	r0, #4294967295
 8006b4a:	bd38      	pop	{r3, r4, r5, pc}
 8006b4c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8006b4e:	b112      	cbz	r2, 8006b56 <_raise_r+0x1e>
 8006b50:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006b54:	b94b      	cbnz	r3, 8006b6a <_raise_r+0x32>
 8006b56:	4620      	mov	r0, r4
 8006b58:	f000 f830 	bl	8006bbc <_getpid_r>
 8006b5c:	462a      	mov	r2, r5
 8006b5e:	4601      	mov	r1, r0
 8006b60:	4620      	mov	r0, r4
 8006b62:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006b66:	f000 b817 	b.w	8006b98 <_kill_r>
 8006b6a:	2b01      	cmp	r3, #1
 8006b6c:	d00a      	beq.n	8006b84 <_raise_r+0x4c>
 8006b6e:	1c59      	adds	r1, r3, #1
 8006b70:	d103      	bne.n	8006b7a <_raise_r+0x42>
 8006b72:	2316      	movs	r3, #22
 8006b74:	6003      	str	r3, [r0, #0]
 8006b76:	2001      	movs	r0, #1
 8006b78:	e7e7      	b.n	8006b4a <_raise_r+0x12>
 8006b7a:	2400      	movs	r4, #0
 8006b7c:	4628      	mov	r0, r5
 8006b7e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006b82:	4798      	blx	r3
 8006b84:	2000      	movs	r0, #0
 8006b86:	e7e0      	b.n	8006b4a <_raise_r+0x12>

08006b88 <raise>:
 8006b88:	4b02      	ldr	r3, [pc, #8]	; (8006b94 <raise+0xc>)
 8006b8a:	4601      	mov	r1, r0
 8006b8c:	6818      	ldr	r0, [r3, #0]
 8006b8e:	f7ff bfd3 	b.w	8006b38 <_raise_r>
 8006b92:	bf00      	nop
 8006b94:	2000001c 	.word	0x2000001c

08006b98 <_kill_r>:
 8006b98:	b538      	push	{r3, r4, r5, lr}
 8006b9a:	2300      	movs	r3, #0
 8006b9c:	4d06      	ldr	r5, [pc, #24]	; (8006bb8 <_kill_r+0x20>)
 8006b9e:	4604      	mov	r4, r0
 8006ba0:	4608      	mov	r0, r1
 8006ba2:	4611      	mov	r1, r2
 8006ba4:	602b      	str	r3, [r5, #0]
 8006ba6:	f7fa fe75 	bl	8001894 <_kill>
 8006baa:	1c43      	adds	r3, r0, #1
 8006bac:	d102      	bne.n	8006bb4 <_kill_r+0x1c>
 8006bae:	682b      	ldr	r3, [r5, #0]
 8006bb0:	b103      	cbz	r3, 8006bb4 <_kill_r+0x1c>
 8006bb2:	6023      	str	r3, [r4, #0]
 8006bb4:	bd38      	pop	{r3, r4, r5, pc}
 8006bb6:	bf00      	nop
 8006bb8:	20001160 	.word	0x20001160

08006bbc <_getpid_r>:
 8006bbc:	f7fa be68 	b.w	8001890 <_getpid>

08006bc0 <_init>:
 8006bc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bc2:	bf00      	nop
 8006bc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006bc6:	bc08      	pop	{r3}
 8006bc8:	469e      	mov	lr, r3
 8006bca:	4770      	bx	lr

08006bcc <_fini>:
 8006bcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bce:	bf00      	nop
 8006bd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006bd2:	bc08      	pop	{r3}
 8006bd4:	469e      	mov	lr, r3
 8006bd6:	4770      	bx	lr
