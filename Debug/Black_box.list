
Black_box.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008de4  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000954  08008ef8  08008ef8  00018ef8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800984c  0800984c  000201e4  2**0
                  CONTENTS
  4 .ARM          00000000  0800984c  0800984c  000201e4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800984c  0800984c  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800984c  0800984c  0001984c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009850  08009850  00019850  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  08009854  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001174  200001e4  08009a38  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001358  08009a38  00021358  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016060  00000000  00000000  0002020d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000032b7  00000000  00000000  0003626d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001610  00000000  00000000  00039528  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000014b8  00000000  00000000  0003ab38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b43f  00000000  00000000  0003bff0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001742c  00000000  00000000  0005742f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009abf1  00000000  00000000  0006e85b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0010944c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006f18  00000000  00000000  0010949c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e4 	.word	0x200001e4
 800012c:	00000000 	.word	0x00000000
 8000130:	08008edc 	.word	0x08008edc

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e8 	.word	0x200001e8
 800014c:	08008edc 	.word	0x08008edc

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <RingBuf_Init>:
 * @param[in] size Size of buffer
 * @param[in] cellsize Size of 1 cell [bytes]
 * @param[in] rb #RINGBUF_t structure instance
 * @return #RINGBUF_STATUS enum
 */
RINGBUF_STATUS RingBuf_Init(void *buf, u16_t size, size_t cellsize, RINGBUF_t *rb) {
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b084      	sub	sp, #16
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	60f8      	str	r0, [r7, #12]
 8000a90:	607a      	str	r2, [r7, #4]
 8000a92:	603b      	str	r3, [r7, #0]
 8000a94:	460b      	mov	r3, r1
 8000a96:	817b      	strh	r3, [r7, #10]
    rb->size = size; // size of array
 8000a98:	897a      	ldrh	r2, [r7, #10]
 8000a9a:	683b      	ldr	r3, [r7, #0]
 8000a9c:	60da      	str	r2, [r3, #12]
    rb->cell_size = cellsize; // size of 1 cell of array
 8000a9e:	683b      	ldr	r3, [r7, #0]
 8000aa0:	687a      	ldr	r2, [r7, #4]
 8000aa2:	611a      	str	r2, [r3, #16]
    rb->buf = buf;      // set pointer to buffer
 8000aa4:	683b      	ldr	r3, [r7, #0]
 8000aa6:	68fa      	ldr	r2, [r7, #12]
 8000aa8:	601a      	str	r2, [r3, #0]
    RingBuf_Clear(rb); // clear all
 8000aaa:	6838      	ldr	r0, [r7, #0]
 8000aac:	f000 f80b 	bl	8000ac6 <RingBuf_Clear>
    return rb->buf ? RINGBUF_OK : RINGBUF_PARAM_ERR;
 8000ab0:	683b      	ldr	r3, [r7, #0]
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d001      	beq.n	8000abc <RingBuf_Init+0x34>
 8000ab8:	2300      	movs	r3, #0
 8000aba:	e000      	b.n	8000abe <RingBuf_Init+0x36>
 8000abc:	2302      	movs	r3, #2
}
 8000abe:	4618      	mov	r0, r3
 8000ac0:	3710      	adds	r7, #16
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd80      	pop	{r7, pc}

08000ac6 <RingBuf_Clear>:
 * @note Disable interrupts while clearing
 *
 * @param[in] rb #RINGBUF_t structure instance
 * @return #RINGBUF_STATUS enum
 */
RINGBUF_STATUS RingBuf_Clear(RINGBUF_t *rb) {
 8000ac6:	b480      	push	{r7}
 8000ac8:	b083      	sub	sp, #12
 8000aca:	af00      	add	r7, sp, #0
 8000acc:	6078      	str	r0, [r7, #4]
    if (rb->buf == NULL) return RINGBUF_PARAM_ERR;
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d101      	bne.n	8000ada <RingBuf_Clear+0x14>
 8000ad6:	2302      	movs	r3, #2
 8000ad8:	e005      	b.n	8000ae6 <RingBuf_Clear+0x20>
    rb->head = rb->tail = 0;
 8000ada:	2300      	movs	r3, #0
 8000adc:	687a      	ldr	r2, [r7, #4]
 8000ade:	6053      	str	r3, [r2, #4]
 8000ae0:	687a      	ldr	r2, [r7, #4]
 8000ae2:	6093      	str	r3, [r2, #8]
    return RINGBUF_OK;
 8000ae4:	2300      	movs	r3, #0
}
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	370c      	adds	r7, #12
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bc80      	pop	{r7}
 8000aee:	4770      	bx	lr

08000af0 <RingBuf_Available>:
 *
 * @param[out] len Size to read [bytes]
 * @param[in] rb #RINGBUF_t structure instance
 * @return #RINGBUF_STATUS enum
 */
RINGBUF_STATUS RingBuf_Available(u16_t *len, RINGBUF_t *rb) {
 8000af0:	b480      	push	{r7}
 8000af2:	b083      	sub	sp, #12
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
 8000af8:	6039      	str	r1, [r7, #0]
    if (rb->buf == NULL) return RINGBUF_PARAM_ERR;
 8000afa:	683b      	ldr	r3, [r7, #0]
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d101      	bne.n	8000b06 <RingBuf_Available+0x16>
 8000b02:	2302      	movs	r3, #2
 8000b04:	e020      	b.n	8000b48 <RingBuf_Available+0x58>
    if (rb->head < rb->tail)
 8000b06:	683b      	ldr	r3, [r7, #0]
 8000b08:	689a      	ldr	r2, [r3, #8]
 8000b0a:	683b      	ldr	r3, [r7, #0]
 8000b0c:	685b      	ldr	r3, [r3, #4]
 8000b0e:	429a      	cmp	r2, r3
 8000b10:	d20f      	bcs.n	8000b32 <RingBuf_Available+0x42>
        *len = rb->size - rb->tail + rb->head;
 8000b12:	683b      	ldr	r3, [r7, #0]
 8000b14:	68db      	ldr	r3, [r3, #12]
 8000b16:	b29a      	uxth	r2, r3
 8000b18:	683b      	ldr	r3, [r7, #0]
 8000b1a:	685b      	ldr	r3, [r3, #4]
 8000b1c:	b29b      	uxth	r3, r3
 8000b1e:	1ad3      	subs	r3, r2, r3
 8000b20:	b29a      	uxth	r2, r3
 8000b22:	683b      	ldr	r3, [r7, #0]
 8000b24:	689b      	ldr	r3, [r3, #8]
 8000b26:	b29b      	uxth	r3, r3
 8000b28:	4413      	add	r3, r2
 8000b2a:	b29a      	uxth	r2, r3
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	801a      	strh	r2, [r3, #0]
 8000b30:	e009      	b.n	8000b46 <RingBuf_Available+0x56>
    else
        *len = rb->head - rb->tail;
 8000b32:	683b      	ldr	r3, [r7, #0]
 8000b34:	689b      	ldr	r3, [r3, #8]
 8000b36:	b29a      	uxth	r2, r3
 8000b38:	683b      	ldr	r3, [r7, #0]
 8000b3a:	685b      	ldr	r3, [r3, #4]
 8000b3c:	b29b      	uxth	r3, r3
 8000b3e:	1ad3      	subs	r3, r2, r3
 8000b40:	b29a      	uxth	r2, r3
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	801a      	strh	r2, [r3, #0]
    return RINGBUF_OK;
 8000b46:	2300      	movs	r3, #0
}
 8000b48:	4618      	mov	r0, r3
 8000b4a:	370c      	adds	r7, #12
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	bc80      	pop	{r7}
 8000b50:	4770      	bx	lr

08000b52 <RingBuf_BytePut>:
 *
 * @param[in] data Data byte to be put [bytes]
 * @param[in] rb #RINGBUF_t structure instance
 * @return #RINGBUF_STATUS enum
 */
RINGBUF_STATUS RingBuf_BytePut(const u8_t data, RINGBUF_t *rb) {
 8000b52:	b480      	push	{r7}
 8000b54:	b083      	sub	sp, #12
 8000b56:	af00      	add	r7, sp, #0
 8000b58:	4603      	mov	r3, r0
 8000b5a:	6039      	str	r1, [r7, #0]
 8000b5c:	71fb      	strb	r3, [r7, #7]
    if (rb->buf == NULL) return RINGBUF_PARAM_ERR;
 8000b5e:	683b      	ldr	r3, [r7, #0]
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d101      	bne.n	8000b6a <RingBuf_BytePut+0x18>
 8000b66:	2302      	movs	r3, #2
 8000b68:	e013      	b.n	8000b92 <RingBuf_BytePut+0x40>
    rb->buf[rb->head++] = data; // put byte in cell and increment data
 8000b6a:	683b      	ldr	r3, [r7, #0]
 8000b6c:	681a      	ldr	r2, [r3, #0]
 8000b6e:	683b      	ldr	r3, [r7, #0]
 8000b70:	689b      	ldr	r3, [r3, #8]
 8000b72:	1c58      	adds	r0, r3, #1
 8000b74:	6839      	ldr	r1, [r7, #0]
 8000b76:	6088      	str	r0, [r1, #8]
 8000b78:	4413      	add	r3, r2
 8000b7a:	79fa      	ldrb	r2, [r7, #7]
 8000b7c:	701a      	strb	r2, [r3, #0]
    if (rb->head >= rb->size) // if overflow
 8000b7e:	683b      	ldr	r3, [r7, #0]
 8000b80:	689a      	ldr	r2, [r3, #8]
 8000b82:	683b      	ldr	r3, [r7, #0]
 8000b84:	68db      	ldr	r3, [r3, #12]
 8000b86:	429a      	cmp	r2, r3
 8000b88:	d302      	bcc.n	8000b90 <RingBuf_BytePut+0x3e>
        rb->head = 0;   // set to start
 8000b8a:	683b      	ldr	r3, [r7, #0]
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	609a      	str	r2, [r3, #8]
    return RINGBUF_OK;
 8000b90:	2300      	movs	r3, #0
}
 8000b92:	4618      	mov	r0, r3
 8000b94:	370c      	adds	r7, #12
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bc80      	pop	{r7}
 8000b9a:	4770      	bx	lr

08000b9c <RingBuf_DataRead>:
 * @param[out] data Data from the buffer
 * @param[in] len Length of data to be read [bytes]
 * @param[in] rb #RINGBUF_t structure instance
 * @return #RINGBUF_STATUS enum
 */
RINGBUF_STATUS RingBuf_DataRead(void *data, u16_t len, RINGBUF_t *rb) {
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b086      	sub	sp, #24
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	60f8      	str	r0, [r7, #12]
 8000ba4:	460b      	mov	r3, r1
 8000ba6:	607a      	str	r2, [r7, #4]
 8000ba8:	817b      	strh	r3, [r7, #10]
    if (rb->buf == NULL) return RINGBUF_PARAM_ERR;
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d101      	bne.n	8000bb6 <RingBuf_DataRead+0x1a>
 8000bb2:	2302      	movs	r3, #2
 8000bb4:	e01c      	b.n	8000bf0 <RingBuf_DataRead+0x54>
    // read data
    RINGBUF_STATUS st = RingBuf_DataWatch(data, len, rb);
 8000bb6:	897b      	ldrh	r3, [r7, #10]
 8000bb8:	687a      	ldr	r2, [r7, #4]
 8000bba:	4619      	mov	r1, r3
 8000bbc:	68f8      	ldr	r0, [r7, #12]
 8000bbe:	f000 f81b 	bl	8000bf8 <RingBuf_DataWatch>
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	75fb      	strb	r3, [r7, #23]
    if (st != RINGBUF_OK)
 8000bc6:	7dfb      	ldrb	r3, [r7, #23]
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d001      	beq.n	8000bd0 <RingBuf_DataRead+0x34>
        return st;
 8000bcc:	7dfb      	ldrb	r3, [r7, #23]
 8000bce:	e00f      	b.n	8000bf0 <RingBuf_DataRead+0x54>
    // shift to the next head
    rb->tail += len;
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	685a      	ldr	r2, [r3, #4]
 8000bd4:	897b      	ldrh	r3, [r7, #10]
 8000bd6:	441a      	add	r2, r3
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	605a      	str	r2, [r3, #4]
    if (rb->tail >= rb->size)
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	685a      	ldr	r2, [r3, #4]
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	68db      	ldr	r3, [r3, #12]
 8000be4:	429a      	cmp	r2, r3
 8000be6:	d302      	bcc.n	8000bee <RingBuf_DataRead+0x52>
        rb->tail = 0;
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	2200      	movs	r2, #0
 8000bec:	605a      	str	r2, [r3, #4]
    return st;
 8000bee:	7dfb      	ldrb	r3, [r7, #23]
}
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	3718      	adds	r7, #24
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	bd80      	pop	{r7, pc}

08000bf8 <RingBuf_DataWatch>:
 * @param[out] data Data from buffer
 * @param[in] len Length of data to be read [bytes]
 * @param[in] rb #RINGBUF_t structure instance
 * @return #RINGBUF_STATUS enum
 */
RINGBUF_STATUS RingBuf_DataWatch(void *data, u16_t len, RINGBUF_t *rb) {
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b086      	sub	sp, #24
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	60f8      	str	r0, [r7, #12]
 8000c00:	460b      	mov	r3, r1
 8000c02:	607a      	str	r2, [r7, #4]
 8000c04:	817b      	strh	r3, [r7, #10]
    if (data == NULL)
 8000c06:	68fb      	ldr	r3, [r7, #12]
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d101      	bne.n	8000c10 <RingBuf_DataWatch+0x18>
        return RINGBUF_PARAM_ERR;
 8000c0c:	2302      	movs	r3, #2
 8000c0e:	e04e      	b.n	8000cae <RingBuf_DataWatch+0xb6>
    if (len > rb->size)
 8000c10:	897a      	ldrh	r2, [r7, #10]
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	68db      	ldr	r3, [r3, #12]
 8000c16:	429a      	cmp	r2, r3
 8000c18:	d901      	bls.n	8000c1e <RingBuf_DataWatch+0x26>
        return RINGBUF_OVERFLOW;
 8000c1a:	2303      	movs	r3, #3
 8000c1c:	e047      	b.n	8000cae <RingBuf_DataWatch+0xb6>
    // OUTPUT data index start address
    u16_t s_addr = 0;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	82fb      	strh	r3, [r7, #22]
    // available space in the end of buffer
    u16_t space = rb->size - rb->tail;
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	68db      	ldr	r3, [r3, #12]
 8000c26:	b29a      	uxth	r2, r3
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	685b      	ldr	r3, [r3, #4]
 8000c2c:	b29b      	uxth	r3, r3
 8000c2e:	1ad3      	subs	r3, r2, r3
 8000c30:	827b      	strh	r3, [r7, #18]
    u16_t loc_tail = rb->tail;
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	685b      	ldr	r3, [r3, #4]
 8000c36:	82bb      	strh	r3, [r7, #20]
    if (len > space) { // if len > available space
 8000c38:	897a      	ldrh	r2, [r7, #10]
 8000c3a:	8a7b      	ldrh	r3, [r7, #18]
 8000c3c:	429a      	cmp	r2, r3
 8000c3e:	d91e      	bls.n	8000c7e <RingBuf_DataWatch+0x86>
        // recast pointer to u8_t
        // copy data from available space
        memcpy(&data[s_addr * rb->cell_size], &rb->buf[loc_tail * rb->cell_size], space * rb->cell_size);
 8000c40:	8afb      	ldrh	r3, [r7, #22]
 8000c42:	687a      	ldr	r2, [r7, #4]
 8000c44:	6912      	ldr	r2, [r2, #16]
 8000c46:	fb02 f303 	mul.w	r3, r2, r3
 8000c4a:	68fa      	ldr	r2, [r7, #12]
 8000c4c:	18d0      	adds	r0, r2, r3
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	681a      	ldr	r2, [r3, #0]
 8000c52:	8abb      	ldrh	r3, [r7, #20]
 8000c54:	6879      	ldr	r1, [r7, #4]
 8000c56:	6909      	ldr	r1, [r1, #16]
 8000c58:	fb01 f303 	mul.w	r3, r1, r3
 8000c5c:	18d1      	adds	r1, r2, r3
 8000c5e:	8a7b      	ldrh	r3, [r7, #18]
 8000c60:	687a      	ldr	r2, [r7, #4]
 8000c62:	6912      	ldr	r2, [r2, #16]
 8000c64:	fb02 f303 	mul.w	r3, r2, r3
 8000c68:	461a      	mov	r2, r3
 8000c6a:	f005 fa55 	bl	8006118 <memcpy>
        // next reading will start from 0
        loc_tail = 0;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	82bb      	strh	r3, [r7, #20]
        // new start address - space length
        s_addr = space;
 8000c72:	8a7b      	ldrh	r3, [r7, #18]
 8000c74:	82fb      	strh	r3, [r7, #22]
        // new length - len-space
        len -= space;
 8000c76:	897a      	ldrh	r2, [r7, #10]
 8000c78:	8a7b      	ldrh	r3, [r7, #18]
 8000c7a:	1ad3      	subs	r3, r2, r3
 8000c7c:	817b      	strh	r3, [r7, #10]
    }
    // copy all the data from the buf storage
    memcpy(&data[s_addr * rb->cell_size], &rb->buf[loc_tail * rb->cell_size], len * rb->cell_size);
 8000c7e:	8afb      	ldrh	r3, [r7, #22]
 8000c80:	687a      	ldr	r2, [r7, #4]
 8000c82:	6912      	ldr	r2, [r2, #16]
 8000c84:	fb02 f303 	mul.w	r3, r2, r3
 8000c88:	68fa      	ldr	r2, [r7, #12]
 8000c8a:	18d0      	adds	r0, r2, r3
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	681a      	ldr	r2, [r3, #0]
 8000c90:	8abb      	ldrh	r3, [r7, #20]
 8000c92:	6879      	ldr	r1, [r7, #4]
 8000c94:	6909      	ldr	r1, [r1, #16]
 8000c96:	fb01 f303 	mul.w	r3, r1, r3
 8000c9a:	18d1      	adds	r1, r2, r3
 8000c9c:	897b      	ldrh	r3, [r7, #10]
 8000c9e:	687a      	ldr	r2, [r7, #4]
 8000ca0:	6912      	ldr	r2, [r2, #16]
 8000ca2:	fb02 f303 	mul.w	r3, r2, r3
 8000ca6:	461a      	mov	r2, r3
 8000ca8:	f005 fa36 	bl	8006118 <memcpy>
    return RINGBUF_OK;
 8000cac:	2300      	movs	r3, #0
}
 8000cae:	4618      	mov	r0, r3
 8000cb0:	3718      	adds	r7, #24
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bd80      	pop	{r7, pc}
	...

08000cb8 <lcd_init>:
uint8_t str_null[] = "NULL";

extern SPI_HandleTypeDef hspi2;

void lcd_init(void)
{
 8000cb8:	b590      	push	{r4, r7, lr}
 8000cba:	b085      	sub	sp, #20
 8000cbc:	af00      	add	r7, sp, #0
  DISP_RESET_OFF;
 8000cbe:	2201      	movs	r2, #1
 8000cc0:	2104      	movs	r1, #4
 8000cc2:	481a      	ldr	r0, [pc, #104]	; (8000d2c <lcd_init+0x74>)
 8000cc4:	f002 fc2a 	bl	800351c <HAL_GPIO_WritePin>
  DISP_INIT_SEND_DAT;
 8000cc8:	2201      	movs	r2, #1
 8000cca:	2102      	movs	r1, #2
 8000ccc:	4817      	ldr	r0, [pc, #92]	; (8000d2c <lcd_init+0x74>)
 8000cce:	f002 fc25 	bl	800351c <HAL_GPIO_WritePin>
  HAL_Delay(2);
 8000cd2:	2002      	movs	r0, #2
 8000cd4:	f001 fa12 	bl	80020fc <HAL_Delay>
  DISP_RESET_ON;
 8000cd8:	2200      	movs	r2, #0
 8000cda:	2104      	movs	r1, #4
 8000cdc:	4813      	ldr	r0, [pc, #76]	; (8000d2c <lcd_init+0x74>)
 8000cde:	f002 fc1d 	bl	800351c <HAL_GPIO_WritePin>
  HAL_Delay(2);
 8000ce2:	2002      	movs	r0, #2
 8000ce4:	f001 fa0a 	bl	80020fc <HAL_Delay>
  DISP_RESET_OFF;
 8000ce8:	2201      	movs	r2, #1
 8000cea:	2104      	movs	r1, #4
 8000cec:	480f      	ldr	r0, [pc, #60]	; (8000d2c <lcd_init+0x74>)
 8000cee:	f002 fc15 	bl	800351c <HAL_GPIO_WritePin>
  DISP_INIT_SEND_COM;
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	2102      	movs	r1, #2
 8000cf6:	480d      	ldr	r0, [pc, #52]	; (8000d2c <lcd_init+0x74>)
 8000cf8:	f002 fc10 	bl	800351c <HAL_GPIO_WritePin>
  uint8_t init_data_array[13] = {
 8000cfc:	4b0c      	ldr	r3, [pc, #48]	; (8000d30 <lcd_init+0x78>)
 8000cfe:	463c      	mov	r4, r7
 8000d00:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000d02:	c407      	stmia	r4!, {r0, r1, r2}
 8000d04:	7023      	strb	r3, [r4, #0]
	(0x10 | 0),       // Column Address Set - first byte (0-15)
	(0x00 | 0),       // Column Address Set - second byte (0-15)
	(0xAE | 1),       // Display on(1) / Display off (0)
	(0xA6 | 0),       // Display Normal(0) / Display Reverse(1)
  };
  HAL_SPI_Transmit(&hspi2, init_data_array, 13, 20);
 8000d06:	4639      	mov	r1, r7
 8000d08:	2314      	movs	r3, #20
 8000d0a:	220d      	movs	r2, #13
 8000d0c:	4809      	ldr	r0, [pc, #36]	; (8000d34 <lcd_init+0x7c>)
 8000d0e:	f003 fed7 	bl	8004ac0 <HAL_SPI_Transmit>
  lcd_buferase();
 8000d12:	f000 f8f3 	bl	8000efc <lcd_buferase>
  lcd_bufupload();
 8000d16:	f000 f82f 	bl	8000d78 <lcd_bufupload>
  DISP_INIT_SEND_DAT;
 8000d1a:	2201      	movs	r2, #1
 8000d1c:	2102      	movs	r1, #2
 8000d1e:	4803      	ldr	r0, [pc, #12]	; (8000d2c <lcd_init+0x74>)
 8000d20:	f002 fbfc 	bl	800351c <HAL_GPIO_WritePin>
}
 8000d24:	bf00      	nop
 8000d26:	3714      	adds	r7, #20
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bd90      	pop	{r4, r7, pc}
 8000d2c:	40010800 	.word	0x40010800
 8000d30:	08008ef8 	.word	0x08008ef8
 8000d34:	20000708 	.word	0x20000708

08000d38 <lcd_sendcommands>:

void lcd_sendcommands(uint8_t* data, uint8_t N)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b082      	sub	sp, #8
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
 8000d40:	460b      	mov	r3, r1
 8000d42:	70fb      	strb	r3, [r7, #3]
  DISP_INIT_SEND_COM;
 8000d44:	2200      	movs	r2, #0
 8000d46:	2102      	movs	r1, #2
 8000d48:	4809      	ldr	r0, [pc, #36]	; (8000d70 <lcd_sendcommands+0x38>)
 8000d4a:	f002 fbe7 	bl	800351c <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi2, data, N, 10);
 8000d4e:	78fb      	ldrb	r3, [r7, #3]
 8000d50:	b29a      	uxth	r2, r3
 8000d52:	230a      	movs	r3, #10
 8000d54:	6879      	ldr	r1, [r7, #4]
 8000d56:	4807      	ldr	r0, [pc, #28]	; (8000d74 <lcd_sendcommands+0x3c>)
 8000d58:	f003 feb2 	bl	8004ac0 <HAL_SPI_Transmit>
  DISP_INIT_SEND_DAT;
 8000d5c:	2201      	movs	r2, #1
 8000d5e:	2102      	movs	r1, #2
 8000d60:	4803      	ldr	r0, [pc, #12]	; (8000d70 <lcd_sendcommands+0x38>)
 8000d62:	f002 fbdb 	bl	800351c <HAL_GPIO_WritePin>
}
 8000d66:	bf00      	nop
 8000d68:	3708      	adds	r7, #8
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}
 8000d6e:	bf00      	nop
 8000d70:	40010800 	.word	0x40010800
 8000d74:	20000708 	.word	0x20000708

08000d78 <lcd_bufupload>:

void lcd_bufupload(void)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b082      	sub	sp, #8
 8000d7c:	af00      	add	r7, sp, #0
  for(uint8_t j = 0; j < 8; j++)
 8000d7e:	2300      	movs	r3, #0
 8000d80:	71fb      	strb	r3, [r7, #7]
 8000d82:	e018      	b.n	8000db6 <lcd_bufupload+0x3e>
  {
	uint8_t tmp_arr[] = {(0xB0 + j), 0x10, 0x00};
 8000d84:	79fb      	ldrb	r3, [r7, #7]
 8000d86:	3b50      	subs	r3, #80	; 0x50
 8000d88:	b2db      	uxtb	r3, r3
 8000d8a:	713b      	strb	r3, [r7, #4]
 8000d8c:	2310      	movs	r3, #16
 8000d8e:	717b      	strb	r3, [r7, #5]
 8000d90:	2300      	movs	r3, #0
 8000d92:	71bb      	strb	r3, [r7, #6]
    lcd_sendcommands(tmp_arr, 3);
 8000d94:	1d3b      	adds	r3, r7, #4
 8000d96:	2103      	movs	r1, #3
 8000d98:	4618      	mov	r0, r3
 8000d9a:	f7ff ffcd 	bl	8000d38 <lcd_sendcommands>
    HAL_SPI_Transmit(&hspi2, dispbuffer[j], 128, 10);
 8000d9e:	79fb      	ldrb	r3, [r7, #7]
 8000da0:	01db      	lsls	r3, r3, #7
 8000da2:	4a09      	ldr	r2, [pc, #36]	; (8000dc8 <lcd_bufupload+0x50>)
 8000da4:	1899      	adds	r1, r3, r2
 8000da6:	230a      	movs	r3, #10
 8000da8:	2280      	movs	r2, #128	; 0x80
 8000daa:	4808      	ldr	r0, [pc, #32]	; (8000dcc <lcd_bufupload+0x54>)
 8000dac:	f003 fe88 	bl	8004ac0 <HAL_SPI_Transmit>
  for(uint8_t j = 0; j < 8; j++)
 8000db0:	79fb      	ldrb	r3, [r7, #7]
 8000db2:	3301      	adds	r3, #1
 8000db4:	71fb      	strb	r3, [r7, #7]
 8000db6:	79fb      	ldrb	r3, [r7, #7]
 8000db8:	2b07      	cmp	r3, #7
 8000dba:	d9e3      	bls.n	8000d84 <lcd_bufupload+0xc>
  }
}
 8000dbc:	bf00      	nop
 8000dbe:	bf00      	nop
 8000dc0:	3708      	adds	r7, #8
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	bf00      	nop
 8000dc8:	20000200 	.word	0x20000200
 8000dcc:	20000708 	.word	0x20000708

08000dd0 <lcd_bufwsmb8x5>:


/******************************************/
void lcd_bufwsmb8x5(const uint8_t ch, uint8_t pg, uint8_t cl)
{
 8000dd0:	b4b0      	push	{r4, r5, r7}
 8000dd2:	b085      	sub	sp, #20
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	71fb      	strb	r3, [r7, #7]
 8000dda:	460b      	mov	r3, r1
 8000ddc:	71bb      	strb	r3, [r7, #6]
 8000dde:	4613      	mov	r3, r2
 8000de0:	717b      	strb	r3, [r7, #5]
	for(uint8_t i = 0; i < 5; i++)
 8000de2:	2300      	movs	r3, #0
 8000de4:	73fb      	strb	r3, [r7, #15]
 8000de6:	e015      	b.n	8000e14 <lcd_bufwsmb8x5+0x44>
	  {
	    dispbuffer[pg][cl + i] = char_8x5[ch][i];
 8000de8:	79fa      	ldrb	r2, [r7, #7]
 8000dea:	7bfc      	ldrb	r4, [r7, #15]
 8000dec:	79b8      	ldrb	r0, [r7, #6]
 8000dee:	7979      	ldrb	r1, [r7, #5]
 8000df0:	7bfb      	ldrb	r3, [r7, #15]
 8000df2:	4419      	add	r1, r3
 8000df4:	4d12      	ldr	r5, [pc, #72]	; (8000e40 <lcd_bufwsmb8x5+0x70>)
 8000df6:	4613      	mov	r3, r2
 8000df8:	009b      	lsls	r3, r3, #2
 8000dfa:	4413      	add	r3, r2
 8000dfc:	442b      	add	r3, r5
 8000dfe:	4423      	add	r3, r4
 8000e00:	781c      	ldrb	r4, [r3, #0]
 8000e02:	4a10      	ldr	r2, [pc, #64]	; (8000e44 <lcd_bufwsmb8x5+0x74>)
 8000e04:	01c3      	lsls	r3, r0, #7
 8000e06:	4413      	add	r3, r2
 8000e08:	440b      	add	r3, r1
 8000e0a:	4622      	mov	r2, r4
 8000e0c:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 0; i < 5; i++)
 8000e0e:	7bfb      	ldrb	r3, [r7, #15]
 8000e10:	3301      	adds	r3, #1
 8000e12:	73fb      	strb	r3, [r7, #15]
 8000e14:	7bfb      	ldrb	r3, [r7, #15]
 8000e16:	2b04      	cmp	r3, #4
 8000e18:	d9e6      	bls.n	8000de8 <lcd_bufwsmb8x5+0x18>
	  }
	cl = cl+5;
 8000e1a:	797b      	ldrb	r3, [r7, #5]
 8000e1c:	3305      	adds	r3, #5
 8000e1e:	717b      	strb	r3, [r7, #5]
	dispbuffer[pg][cl] = 0x00;
 8000e20:	79ba      	ldrb	r2, [r7, #6]
 8000e22:	797b      	ldrb	r3, [r7, #5]
 8000e24:	4907      	ldr	r1, [pc, #28]	; (8000e44 <lcd_bufwsmb8x5+0x74>)
 8000e26:	01d2      	lsls	r2, r2, #7
 8000e28:	440a      	add	r2, r1
 8000e2a:	4413      	add	r3, r2
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	701a      	strb	r2, [r3, #0]
	cl++;
 8000e30:	797b      	ldrb	r3, [r7, #5]
 8000e32:	3301      	adds	r3, #1
 8000e34:	717b      	strb	r3, [r7, #5]
}
 8000e36:	bf00      	nop
 8000e38:	3714      	adds	r7, #20
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bcb0      	pop	{r4, r5, r7}
 8000e3e:	4770      	bx	lr
 8000e40:	08008f5c 	.word	0x08008f5c
 8000e44:	20000200 	.word	0x20000200

08000e48 <lcd_bufwstr8x5>:

uint8_t lcd_bufwstr8x5(uint8_t *str, uint8_t pg, uint8_t cl)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b084      	sub	sp, #16
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
 8000e50:	460b      	mov	r3, r1
 8000e52:	70fb      	strb	r3, [r7, #3]
 8000e54:	4613      	mov	r3, r2
 8000e56:	70bb      	strb	r3, [r7, #2]
  if(str == NULL) str = str_null;
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d101      	bne.n	8000e62 <lcd_bufwstr8x5+0x1a>
 8000e5e:	4b16      	ldr	r3, [pc, #88]	; (8000eb8 <lcd_bufwstr8x5+0x70>)
 8000e60:	607b      	str	r3, [r7, #4]
  uint8_t i = 0;
 8000e62:	2300      	movs	r3, #0
 8000e64:	73fb      	strb	r3, [r7, #15]
  while(str[i])
 8000e66:	e01b      	b.n	8000ea0 <lcd_bufwstr8x5+0x58>
  {
	  lcd_bufwsmb8x5(str[i], pg, cl);
 8000e68:	7bfb      	ldrb	r3, [r7, #15]
 8000e6a:	687a      	ldr	r2, [r7, #4]
 8000e6c:	4413      	add	r3, r2
 8000e6e:	781b      	ldrb	r3, [r3, #0]
 8000e70:	78ba      	ldrb	r2, [r7, #2]
 8000e72:	78f9      	ldrb	r1, [r7, #3]
 8000e74:	4618      	mov	r0, r3
 8000e76:	f7ff ffab 	bl	8000dd0 <lcd_bufwsmb8x5>
    cl += 6;
 8000e7a:	78bb      	ldrb	r3, [r7, #2]
 8000e7c:	3306      	adds	r3, #6
 8000e7e:	70bb      	strb	r3, [r7, #2]
    if(cl > 122) {pg++; cl = 0;}
 8000e80:	78bb      	ldrb	r3, [r7, #2]
 8000e82:	2b7a      	cmp	r3, #122	; 0x7a
 8000e84:	d904      	bls.n	8000e90 <lcd_bufwstr8x5+0x48>
 8000e86:	78fb      	ldrb	r3, [r7, #3]
 8000e88:	3301      	adds	r3, #1
 8000e8a:	70fb      	strb	r3, [r7, #3]
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	70bb      	strb	r3, [r7, #2]
    if(pg > 7) return 0;
 8000e90:	78fb      	ldrb	r3, [r7, #3]
 8000e92:	2b07      	cmp	r3, #7
 8000e94:	d901      	bls.n	8000e9a <lcd_bufwstr8x5+0x52>
 8000e96:	2300      	movs	r3, #0
 8000e98:	e009      	b.n	8000eae <lcd_bufwstr8x5+0x66>
    i++;
 8000e9a:	7bfb      	ldrb	r3, [r7, #15]
 8000e9c:	3301      	adds	r3, #1
 8000e9e:	73fb      	strb	r3, [r7, #15]
  while(str[i])
 8000ea0:	7bfb      	ldrb	r3, [r7, #15]
 8000ea2:	687a      	ldr	r2, [r7, #4]
 8000ea4:	4413      	add	r3, r2
 8000ea6:	781b      	ldrb	r3, [r3, #0]
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d1dd      	bne.n	8000e68 <lcd_bufwstr8x5+0x20>
  }
  return i;
 8000eac:	7bfb      	ldrb	r3, [r7, #15]
}
 8000eae:	4618      	mov	r0, r3
 8000eb0:	3710      	adds	r7, #16
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	bf00      	nop
 8000eb8:	20000000 	.word	0x20000000

08000ebc <lcd_bufstrerase>:

void lcd_bufstrerase(uint8_t pg)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	b085      	sub	sp, #20
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	71fb      	strb	r3, [r7, #7]
	for(uint8_t i = 0; i < 128; i++)
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	73fb      	strb	r3, [r7, #15]
 8000eca:	e00a      	b.n	8000ee2 <lcd_bufstrerase+0x26>
		  {
		    dispbuffer[pg][i] = 0;
 8000ecc:	79fa      	ldrb	r2, [r7, #7]
 8000ece:	7bfb      	ldrb	r3, [r7, #15]
 8000ed0:	4909      	ldr	r1, [pc, #36]	; (8000ef8 <lcd_bufstrerase+0x3c>)
 8000ed2:	01d2      	lsls	r2, r2, #7
 8000ed4:	440a      	add	r2, r1
 8000ed6:	4413      	add	r3, r2
 8000ed8:	2200      	movs	r2, #0
 8000eda:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 0; i < 128; i++)
 8000edc:	7bfb      	ldrb	r3, [r7, #15]
 8000ede:	3301      	adds	r3, #1
 8000ee0:	73fb      	strb	r3, [r7, #15]
 8000ee2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	daf0      	bge.n	8000ecc <lcd_bufstrerase+0x10>
		  }
}
 8000eea:	bf00      	nop
 8000eec:	bf00      	nop
 8000eee:	3714      	adds	r7, #20
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bc80      	pop	{r7}
 8000ef4:	4770      	bx	lr
 8000ef6:	bf00      	nop
 8000ef8:	20000200 	.word	0x20000200

08000efc <lcd_buferase>:

void lcd_buferase(void)
{
 8000efc:	b480      	push	{r7}
 8000efe:	b083      	sub	sp, #12
 8000f00:	af00      	add	r7, sp, #0
  for(uint8_t j = 0; j < 8; j++)
 8000f02:	2300      	movs	r3, #0
 8000f04:	71fb      	strb	r3, [r7, #7]
 8000f06:	e014      	b.n	8000f32 <lcd_buferase+0x36>
    for(uint8_t i = 0; i < 128; i++) dispbuffer[j][i] = 0;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	71bb      	strb	r3, [r7, #6]
 8000f0c:	e00a      	b.n	8000f24 <lcd_buferase+0x28>
 8000f0e:	79fa      	ldrb	r2, [r7, #7]
 8000f10:	79bb      	ldrb	r3, [r7, #6]
 8000f12:	490c      	ldr	r1, [pc, #48]	; (8000f44 <lcd_buferase+0x48>)
 8000f14:	01d2      	lsls	r2, r2, #7
 8000f16:	440a      	add	r2, r1
 8000f18:	4413      	add	r3, r2
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	701a      	strb	r2, [r3, #0]
 8000f1e:	79bb      	ldrb	r3, [r7, #6]
 8000f20:	3301      	adds	r3, #1
 8000f22:	71bb      	strb	r3, [r7, #6]
 8000f24:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	daf0      	bge.n	8000f0e <lcd_buferase+0x12>
  for(uint8_t j = 0; j < 8; j++)
 8000f2c:	79fb      	ldrb	r3, [r7, #7]
 8000f2e:	3301      	adds	r3, #1
 8000f30:	71fb      	strb	r3, [r7, #7]
 8000f32:	79fb      	ldrb	r3, [r7, #7]
 8000f34:	2b07      	cmp	r3, #7
 8000f36:	d9e7      	bls.n	8000f08 <lcd_buferase+0xc>
}
 8000f38:	bf00      	nop
 8000f3a:	bf00      	nop
 8000f3c:	370c      	adds	r7, #12
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bc80      	pop	{r7}
 8000f42:	4770      	bx	lr
 8000f44:	20000200 	.word	0x20000200

08000f48 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	b083      	sub	sp, #12
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000f50:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000f54:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000f58:	f003 0301 	and.w	r3, r3, #1
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d013      	beq.n	8000f88 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000f60:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000f64:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000f68:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d00b      	beq.n	8000f88 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000f70:	e000      	b.n	8000f74 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000f72:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000f74:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d0f9      	beq.n	8000f72 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000f7e:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000f82:	687a      	ldr	r2, [r7, #4]
 8000f84:	b2d2      	uxtb	r2, r2
 8000f86:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000f88:	687b      	ldr	r3, [r7, #4]
}
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	370c      	adds	r7, #12
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bc80      	pop	{r7}
 8000f92:	4770      	bx	lr

08000f94 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
  {
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b086      	sub	sp, #24
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	60f8      	str	r0, [r7, #12]
 8000f9c:	60b9      	str	r1, [r7, #8]
 8000f9e:	607a      	str	r2, [r7, #4]
  	for (int i = 0; i < len; i++)
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	617b      	str	r3, [r7, #20]
 8000fa4:	e009      	b.n	8000fba <_write+0x26>
  	{
  		ITM_SendChar(*ptr++);
 8000fa6:	68bb      	ldr	r3, [r7, #8]
 8000fa8:	1c5a      	adds	r2, r3, #1
 8000faa:	60ba      	str	r2, [r7, #8]
 8000fac:	781b      	ldrb	r3, [r3, #0]
 8000fae:	4618      	mov	r0, r3
 8000fb0:	f7ff ffca 	bl	8000f48 <ITM_SendChar>
  	for (int i = 0; i < len; i++)
 8000fb4:	697b      	ldr	r3, [r7, #20]
 8000fb6:	3301      	adds	r3, #1
 8000fb8:	617b      	str	r3, [r7, #20]
 8000fba:	697a      	ldr	r2, [r7, #20]
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	429a      	cmp	r2, r3
 8000fc0:	dbf1      	blt.n	8000fa6 <_write+0x12>
  	}
  	return len;
 8000fc2:	687b      	ldr	r3, [r7, #4]
  }
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	3718      	adds	r7, #24
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bd80      	pop	{r7, pc}

08000fcc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fcc:	b590      	push	{r4, r7, lr}
 8000fce:	b085      	sub	sp, #20
 8000fd0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fd2:	f001 f831 	bl	8002038 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fd6:	f000 f8c7 	bl	8001168 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fda:	f000 fba3 	bl	8001724 <MX_GPIO_Init>
  MX_DMA_Init();
 8000fde:	f000 fb83 	bl	80016e8 <MX_DMA_Init>
  MX_ADC1_Init();
 8000fe2:	f000 f923 	bl	800122c <MX_ADC1_Init>
  MX_CAN_Init();
 8000fe6:	f000 f999 	bl	800131c <MX_CAN_Init>
  MX_SPI2_Init();
 8000fea:	f000 fa4d 	bl	8001488 <MX_SPI2_Init>
  MX_TIM1_Init();
 8000fee:	f000 fa81 	bl	80014f4 <MX_TIM1_Init>
  MX_USB_PCD_Init();
 8000ff2:	f000 fb57 	bl	80016a4 <MX_USB_PCD_Init>
  MX_RTC_Init();
 8000ff6:	f000 f9c7 	bl	8001388 <MX_RTC_Init>
  MX_SPI1_Init();
 8000ffa:	f000 fa0f 	bl	800141c <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8000ffe:	f000 fafd 	bl	80015fc <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8001002:	f000 fb25 	bl	8001650 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
	lcd_init();
 8001006:	f7ff fe57 	bl	8000cb8 <lcd_init>
  RingBuf_Init(rx_buf, 1024, 1, &ringbuf);
 800100a:	4b49      	ldr	r3, [pc, #292]	; (8001130 <main+0x164>)
 800100c:	2201      	movs	r2, #1
 800100e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001012:	4848      	ldr	r0, [pc, #288]	; (8001134 <main+0x168>)
 8001014:	f7ff fd38 	bl	8000a88 <RingBuf_Init>
	uint16_t dutyCycle = 0xB000;
 8001018:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 800101c:	817b      	strh	r3, [r7, #10]
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, dutyCycle);
 800101e:	4b46      	ldr	r3, [pc, #280]	; (8001138 <main+0x16c>)
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	897a      	ldrh	r2, [r7, #10]
 8001024:	635a      	str	r2, [r3, #52]	; 0x34
	sprintf((char*)temp_str, "%d", dutyCycle);
 8001026:	897b      	ldrh	r3, [r7, #10]
 8001028:	461a      	mov	r2, r3
 800102a:	4944      	ldr	r1, [pc, #272]	; (800113c <main+0x170>)
 800102c:	4844      	ldr	r0, [pc, #272]	; (8001140 <main+0x174>)
 800102e:	f005 fce9 	bl	8006a04 <siprintf>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001032:	2100      	movs	r1, #0
 8001034:	4840      	ldr	r0, [pc, #256]	; (8001138 <main+0x16c>)
 8001036:	f003 ff75 	bl	8004f24 <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_UART_Receive_IT(&huart3, &temp_byte, 1);
 800103a:	2201      	movs	r2, #1
 800103c:	4941      	ldr	r1, [pc, #260]	; (8001144 <main+0x178>)
 800103e:	4842      	ldr	r0, [pc, #264]	; (8001148 <main+0x17c>)
 8001040:	f004 fbda 	bl	80057f8 <HAL_UART_Receive_IT>
  uint16_t buf_len = 0;
 8001044:	2300      	movs	r3, #0
 8001046:	807b      	strh	r3, [r7, #2]
  uint32_t period = 500;
 8001048:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800104c:	607b      	str	r3, [r7, #4]
  uint32_t temp_tick = 0;
 800104e:	2300      	movs	r3, #0
 8001050:	60fb      	str	r3, [r7, #12]
/*---------------------------------------------------------------------------------------------------------------------------------------*/
  while (1)
  {
  	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)ADC_data.array, 5);
 8001052:	2205      	movs	r2, #5
 8001054:	493d      	ldr	r1, [pc, #244]	; (800114c <main+0x180>)
 8001056:	483e      	ldr	r0, [pc, #248]	; (8001150 <main+0x184>)
 8001058:	f001 f94c 	bl	80022f4 <HAL_ADC_Start_DMA>




	  sprintf((char*)temp_str, "%ld.%ld sec from start", HAL_GetTick()/1000, (HAL_GetTick()%1000)/100);
 800105c:	f001 f844 	bl	80020e8 <HAL_GetTick>
 8001060:	4603      	mov	r3, r0
 8001062:	4a3c      	ldr	r2, [pc, #240]	; (8001154 <main+0x188>)
 8001064:	fba2 2303 	umull	r2, r3, r2, r3
 8001068:	099c      	lsrs	r4, r3, #6
 800106a:	f001 f83d 	bl	80020e8 <HAL_GetTick>
 800106e:	4602      	mov	r2, r0
 8001070:	4b38      	ldr	r3, [pc, #224]	; (8001154 <main+0x188>)
 8001072:	fba3 1302 	umull	r1, r3, r3, r2
 8001076:	099b      	lsrs	r3, r3, #6
 8001078:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800107c:	fb01 f303 	mul.w	r3, r1, r3
 8001080:	1ad3      	subs	r3, r2, r3
 8001082:	4a35      	ldr	r2, [pc, #212]	; (8001158 <main+0x18c>)
 8001084:	fba2 2303 	umull	r2, r3, r2, r3
 8001088:	095b      	lsrs	r3, r3, #5
 800108a:	4622      	mov	r2, r4
 800108c:	4933      	ldr	r1, [pc, #204]	; (800115c <main+0x190>)
 800108e:	482c      	ldr	r0, [pc, #176]	; (8001140 <main+0x174>)
 8001090:	f005 fcb8 	bl	8006a04 <siprintf>
		lcd_bufstrerase(7);
 8001094:	2007      	movs	r0, #7
 8001096:	f7ff ff11 	bl	8000ebc <lcd_bufstrerase>
		lcd_bufwstr8x5(temp_str, 7, 0);
 800109a:	2200      	movs	r2, #0
 800109c:	2107      	movs	r1, #7
 800109e:	4828      	ldr	r0, [pc, #160]	; (8001140 <main+0x174>)
 80010a0:	f7ff fed2 	bl	8000e48 <lcd_bufwstr8x5>
		lcd_bufupload();
 80010a4:	f7ff fe68 	bl	8000d78 <lcd_bufupload>

	  RingBuf_Available(&buf_len, &ringbuf);
 80010a8:	1cbb      	adds	r3, r7, #2
 80010aa:	4921      	ldr	r1, [pc, #132]	; (8001130 <main+0x164>)
 80010ac:	4618      	mov	r0, r3
 80010ae:	f7ff fd1f 	bl	8000af0 <RingBuf_Available>
	  if((HAL_GetTick() - temp_tick) > period)
 80010b2:	f001 f819 	bl	80020e8 <HAL_GetTick>
 80010b6:	4602      	mov	r2, r0
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	1ad3      	subs	r3, r2, r3
 80010bc:	687a      	ldr	r2, [r7, #4]
 80010be:	429a      	cmp	r2, r3
 80010c0:	d2c7      	bcs.n	8001052 <main+0x86>
	  {
	  	temp_tick = HAL_GetTick();
 80010c2:	f001 f811 	bl	80020e8 <HAL_GetTick>
 80010c6:	60f8      	str	r0, [r7, #12]
			if(buf_len)
 80010c8:	887b      	ldrh	r3, [r7, #2]
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d013      	beq.n	80010f6 <main+0x12a>
			{
				RingBuf_DataRead(temp_str, buf_len, &ringbuf);
 80010ce:	887b      	ldrh	r3, [r7, #2]
 80010d0:	4a17      	ldr	r2, [pc, #92]	; (8001130 <main+0x164>)
 80010d2:	4619      	mov	r1, r3
 80010d4:	481a      	ldr	r0, [pc, #104]	; (8001140 <main+0x174>)
 80010d6:	f7ff fd61 	bl	8000b9c <RingBuf_DataRead>
				temp_str[buf_len] = '\0';
 80010da:	887b      	ldrh	r3, [r7, #2]
 80010dc:	461a      	mov	r2, r3
 80010de:	4b18      	ldr	r3, [pc, #96]	; (8001140 <main+0x174>)
 80010e0:	2100      	movs	r1, #0
 80010e2:	5499      	strb	r1, [r3, r2]
				lcd_buferase();
 80010e4:	f7ff ff0a 	bl	8000efc <lcd_buferase>
				lcd_bufwstr8x5(temp_str, 0, 0);
 80010e8:	2200      	movs	r2, #0
 80010ea:	2100      	movs	r1, #0
 80010ec:	4814      	ldr	r0, [pc, #80]	; (8001140 <main+0x174>)
 80010ee:	f7ff feab 	bl	8000e48 <lcd_bufwstr8x5>
				lcd_bufupload();
 80010f2:	f7ff fe41 	bl	8000d78 <lcd_bufupload>
			}
			lcd_buferase();
 80010f6:	f7ff ff01 	bl	8000efc <lcd_buferase>
			sprintf(temp_str, "jox - %d", ADC_data.jox);
 80010fa:	4b14      	ldr	r3, [pc, #80]	; (800114c <main+0x180>)
 80010fc:	885b      	ldrh	r3, [r3, #2]
 80010fe:	461a      	mov	r2, r3
 8001100:	4917      	ldr	r1, [pc, #92]	; (8001160 <main+0x194>)
 8001102:	480f      	ldr	r0, [pc, #60]	; (8001140 <main+0x174>)
 8001104:	f005 fc7e 	bl	8006a04 <siprintf>
			lcd_bufwstr8x5(temp_str, 0, 0);
 8001108:	2200      	movs	r2, #0
 800110a:	2100      	movs	r1, #0
 800110c:	480c      	ldr	r0, [pc, #48]	; (8001140 <main+0x174>)
 800110e:	f7ff fe9b 	bl	8000e48 <lcd_bufwstr8x5>
			sprintf(temp_str, "joy - %d", ADC_data.joy);
 8001112:	4b0e      	ldr	r3, [pc, #56]	; (800114c <main+0x180>)
 8001114:	889b      	ldrh	r3, [r3, #4]
 8001116:	461a      	mov	r2, r3
 8001118:	4912      	ldr	r1, [pc, #72]	; (8001164 <main+0x198>)
 800111a:	4809      	ldr	r0, [pc, #36]	; (8001140 <main+0x174>)
 800111c:	f005 fc72 	bl	8006a04 <siprintf>
			lcd_bufwstr8x5(temp_str, 1, 0);
 8001120:	2200      	movs	r2, #0
 8001122:	2101      	movs	r1, #1
 8001124:	4806      	ldr	r0, [pc, #24]	; (8001140 <main+0x174>)
 8001126:	f7ff fe8f 	bl	8000e48 <lcd_bufwstr8x5>
			lcd_bufupload();
 800112a:	f7ff fe25 	bl	8000d78 <lcd_bufupload>
  	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)ADC_data.array, 5);
 800112e:	e790      	b.n	8001052 <main+0x86>
 8001130:	20000b1c 	.word	0x20000b1c
 8001134:	20000b30 	.word	0x20000b30
 8001138:	20000760 	.word	0x20000760
 800113c:	08008f08 	.word	0x08008f08
 8001140:	20000f34 	.word	0x20000f34
 8001144:	20000f30 	.word	0x20000f30
 8001148:	200007ec 	.word	0x200007ec
 800114c:	20001334 	.word	0x20001334
 8001150:	20000600 	.word	0x20000600
 8001154:	10624dd3 	.word	0x10624dd3
 8001158:	51eb851f 	.word	0x51eb851f
 800115c:	08008f0c 	.word	0x08008f0c
 8001160:	08008f24 	.word	0x08008f24
 8001164:	08008f30 	.word	0x08008f30

08001168 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b094      	sub	sp, #80	; 0x50
 800116c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800116e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001172:	2228      	movs	r2, #40	; 0x28
 8001174:	2100      	movs	r1, #0
 8001176:	4618      	mov	r0, r3
 8001178:	f004 ffdc 	bl	8006134 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800117c:	f107 0314 	add.w	r3, r7, #20
 8001180:	2200      	movs	r2, #0
 8001182:	601a      	str	r2, [r3, #0]
 8001184:	605a      	str	r2, [r3, #4]
 8001186:	609a      	str	r2, [r3, #8]
 8001188:	60da      	str	r2, [r3, #12]
 800118a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800118c:	1d3b      	adds	r3, r7, #4
 800118e:	2200      	movs	r2, #0
 8001190:	601a      	str	r2, [r3, #0]
 8001192:	605a      	str	r2, [r3, #4]
 8001194:	609a      	str	r2, [r3, #8]
 8001196:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8001198:	2305      	movs	r3, #5
 800119a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800119c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80011a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80011a2:	2300      	movs	r3, #0
 80011a4:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80011a6:	2301      	movs	r3, #1
 80011a8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011aa:	2301      	movs	r3, #1
 80011ac:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011ae:	2302      	movs	r3, #2
 80011b0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80011b2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80011b6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80011b8:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80011bc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011be:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80011c2:	4618      	mov	r0, r3
 80011c4:	f002 fada 	bl	800377c <HAL_RCC_OscConfig>
 80011c8:	4603      	mov	r3, r0
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d001      	beq.n	80011d2 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 80011ce:	f000 fb5f 	bl	8001890 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011d2:	230f      	movs	r3, #15
 80011d4:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011d6:	2302      	movs	r3, #2
 80011d8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011da:	2300      	movs	r3, #0
 80011dc:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80011de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80011e2:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011e4:	2300      	movs	r3, #0
 80011e6:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80011e8:	f107 0314 	add.w	r3, r7, #20
 80011ec:	2102      	movs	r1, #2
 80011ee:	4618      	mov	r0, r3
 80011f0:	f002 fd46 	bl	8003c80 <HAL_RCC_ClockConfig>
 80011f4:	4603      	mov	r3, r0
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d001      	beq.n	80011fe <SystemClock_Config+0x96>
  {
    Error_Handler();
 80011fa:	f000 fb49 	bl	8001890 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_ADC
 80011fe:	2313      	movs	r3, #19
 8001200:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_USB;
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001202:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001206:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8001208:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800120c:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 800120e:	2300      	movs	r3, #0
 8001210:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001212:	1d3b      	adds	r3, r7, #4
 8001214:	4618      	mov	r0, r3
 8001216:	f002 fecb 	bl	8003fb0 <HAL_RCCEx_PeriphCLKConfig>
 800121a:	4603      	mov	r3, r0
 800121c:	2b00      	cmp	r3, #0
 800121e:	d001      	beq.n	8001224 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8001220:	f000 fb36 	bl	8001890 <Error_Handler>
  }
}
 8001224:	bf00      	nop
 8001226:	3750      	adds	r7, #80	; 0x50
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}

0800122c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b084      	sub	sp, #16
 8001230:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001232:	1d3b      	adds	r3, r7, #4
 8001234:	2200      	movs	r2, #0
 8001236:	601a      	str	r2, [r3, #0]
 8001238:	605a      	str	r2, [r3, #4]
 800123a:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800123c:	4b35      	ldr	r3, [pc, #212]	; (8001314 <MX_ADC1_Init+0xe8>)
 800123e:	4a36      	ldr	r2, [pc, #216]	; (8001318 <MX_ADC1_Init+0xec>)
 8001240:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001242:	4b34      	ldr	r3, [pc, #208]	; (8001314 <MX_ADC1_Init+0xe8>)
 8001244:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001248:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800124a:	4b32      	ldr	r3, [pc, #200]	; (8001314 <MX_ADC1_Init+0xe8>)
 800124c:	2200      	movs	r2, #0
 800124e:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001250:	4b30      	ldr	r3, [pc, #192]	; (8001314 <MX_ADC1_Init+0xe8>)
 8001252:	2200      	movs	r2, #0
 8001254:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001256:	4b2f      	ldr	r3, [pc, #188]	; (8001314 <MX_ADC1_Init+0xe8>)
 8001258:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800125c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800125e:	4b2d      	ldr	r3, [pc, #180]	; (8001314 <MX_ADC1_Init+0xe8>)
 8001260:	2200      	movs	r2, #0
 8001262:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 5;
 8001264:	4b2b      	ldr	r3, [pc, #172]	; (8001314 <MX_ADC1_Init+0xe8>)
 8001266:	2205      	movs	r2, #5
 8001268:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800126a:	482a      	ldr	r0, [pc, #168]	; (8001314 <MX_ADC1_Init+0xe8>)
 800126c:	f000 ff6a 	bl	8002144 <HAL_ADC_Init>
 8001270:	4603      	mov	r3, r0
 8001272:	2b00      	cmp	r3, #0
 8001274:	d001      	beq.n	800127a <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8001276:	f000 fb0b 	bl	8001890 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800127a:	2300      	movs	r3, #0
 800127c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800127e:	2301      	movs	r3, #1
 8001280:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_71CYCLES_5;
 8001282:	2306      	movs	r3, #6
 8001284:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001286:	1d3b      	adds	r3, r7, #4
 8001288:	4619      	mov	r1, r3
 800128a:	4822      	ldr	r0, [pc, #136]	; (8001314 <MX_ADC1_Init+0xe8>)
 800128c:	f001 f922 	bl	80024d4 <HAL_ADC_ConfigChannel>
 8001290:	4603      	mov	r3, r0
 8001292:	2b00      	cmp	r3, #0
 8001294:	d001      	beq.n	800129a <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001296:	f000 fafb 	bl	8001890 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 800129a:	2308      	movs	r3, #8
 800129c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800129e:	2302      	movs	r3, #2
 80012a0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012a2:	1d3b      	adds	r3, r7, #4
 80012a4:	4619      	mov	r1, r3
 80012a6:	481b      	ldr	r0, [pc, #108]	; (8001314 <MX_ADC1_Init+0xe8>)
 80012a8:	f001 f914 	bl	80024d4 <HAL_ADC_ConfigChannel>
 80012ac:	4603      	mov	r3, r0
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d001      	beq.n	80012b6 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 80012b2:	f000 faed 	bl	8001890 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80012b6:	2309      	movs	r3, #9
 80012b8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80012ba:	2303      	movs	r3, #3
 80012bc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012be:	1d3b      	adds	r3, r7, #4
 80012c0:	4619      	mov	r1, r3
 80012c2:	4814      	ldr	r0, [pc, #80]	; (8001314 <MX_ADC1_Init+0xe8>)
 80012c4:	f001 f906 	bl	80024d4 <HAL_ADC_ConfigChannel>
 80012c8:	4603      	mov	r3, r0
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d001      	beq.n	80012d2 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 80012ce:	f000 fadf 	bl	8001890 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80012d2:	2310      	movs	r3, #16
 80012d4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80012d6:	2304      	movs	r3, #4
 80012d8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012da:	1d3b      	adds	r3, r7, #4
 80012dc:	4619      	mov	r1, r3
 80012de:	480d      	ldr	r0, [pc, #52]	; (8001314 <MX_ADC1_Init+0xe8>)
 80012e0:	f001 f8f8 	bl	80024d4 <HAL_ADC_ConfigChannel>
 80012e4:	4603      	mov	r3, r0
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d001      	beq.n	80012ee <MX_ADC1_Init+0xc2>
  {
    Error_Handler();
 80012ea:	f000 fad1 	bl	8001890 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 80012ee:	2311      	movs	r3, #17
 80012f0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 80012f2:	2305      	movs	r3, #5
 80012f4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012f6:	1d3b      	adds	r3, r7, #4
 80012f8:	4619      	mov	r1, r3
 80012fa:	4806      	ldr	r0, [pc, #24]	; (8001314 <MX_ADC1_Init+0xe8>)
 80012fc:	f001 f8ea 	bl	80024d4 <HAL_ADC_ConfigChannel>
 8001300:	4603      	mov	r3, r0
 8001302:	2b00      	cmp	r3, #0
 8001304:	d001      	beq.n	800130a <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8001306:	f000 fac3 	bl	8001890 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800130a:	bf00      	nop
 800130c:	3710      	adds	r7, #16
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}
 8001312:	bf00      	nop
 8001314:	20000600 	.word	0x20000600
 8001318:	40012400 	.word	0x40012400

0800131c <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8001320:	4b17      	ldr	r3, [pc, #92]	; (8001380 <MX_CAN_Init+0x64>)
 8001322:	4a18      	ldr	r2, [pc, #96]	; (8001384 <MX_CAN_Init+0x68>)
 8001324:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 8;
 8001326:	4b16      	ldr	r3, [pc, #88]	; (8001380 <MX_CAN_Init+0x64>)
 8001328:	2208      	movs	r2, #8
 800132a:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 800132c:	4b14      	ldr	r3, [pc, #80]	; (8001380 <MX_CAN_Init+0x64>)
 800132e:	2200      	movs	r2, #0
 8001330:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001332:	4b13      	ldr	r3, [pc, #76]	; (8001380 <MX_CAN_Init+0x64>)
 8001334:	2200      	movs	r2, #0
 8001336:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_2TQ;
 8001338:	4b11      	ldr	r3, [pc, #68]	; (8001380 <MX_CAN_Init+0x64>)
 800133a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800133e:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_6TQ;
 8001340:	4b0f      	ldr	r3, [pc, #60]	; (8001380 <MX_CAN_Init+0x64>)
 8001342:	f44f 02a0 	mov.w	r2, #5242880	; 0x500000
 8001346:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8001348:	4b0d      	ldr	r3, [pc, #52]	; (8001380 <MX_CAN_Init+0x64>)
 800134a:	2200      	movs	r2, #0
 800134c:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 800134e:	4b0c      	ldr	r3, [pc, #48]	; (8001380 <MX_CAN_Init+0x64>)
 8001350:	2200      	movs	r2, #0
 8001352:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8001354:	4b0a      	ldr	r3, [pc, #40]	; (8001380 <MX_CAN_Init+0x64>)
 8001356:	2200      	movs	r2, #0
 8001358:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 800135a:	4b09      	ldr	r3, [pc, #36]	; (8001380 <MX_CAN_Init+0x64>)
 800135c:	2200      	movs	r2, #0
 800135e:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8001360:	4b07      	ldr	r3, [pc, #28]	; (8001380 <MX_CAN_Init+0x64>)
 8001362:	2200      	movs	r2, #0
 8001364:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8001366:	4b06      	ldr	r3, [pc, #24]	; (8001380 <MX_CAN_Init+0x64>)
 8001368:	2200      	movs	r2, #0
 800136a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 800136c:	4804      	ldr	r0, [pc, #16]	; (8001380 <MX_CAN_Init+0x64>)
 800136e:	f001 faaa 	bl	80028c6 <HAL_CAN_Init>
 8001372:	4603      	mov	r3, r0
 8001374:	2b00      	cmp	r3, #0
 8001376:	d001      	beq.n	800137c <MX_CAN_Init+0x60>
  {
    Error_Handler();
 8001378:	f000 fa8a 	bl	8001890 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 800137c:	bf00      	nop
 800137e:	bd80      	pop	{r7, pc}
 8001380:	20000674 	.word	0x20000674
 8001384:	40006400 	.word	0x40006400

08001388 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b082      	sub	sp, #8
 800138c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800138e:	1d3b      	adds	r3, r7, #4
 8001390:	2100      	movs	r1, #0
 8001392:	460a      	mov	r2, r1
 8001394:	801a      	strh	r2, [r3, #0]
 8001396:	460a      	mov	r2, r1
 8001398:	709a      	strb	r2, [r3, #2]
  RTC_DateTypeDef DateToUpdate = {0};
 800139a:	2300      	movs	r3, #0
 800139c:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800139e:	4b1d      	ldr	r3, [pc, #116]	; (8001414 <MX_RTC_Init+0x8c>)
 80013a0:	4a1d      	ldr	r2, [pc, #116]	; (8001418 <MX_RTC_Init+0x90>)
 80013a2:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 80013a4:	4b1b      	ldr	r3, [pc, #108]	; (8001414 <MX_RTC_Init+0x8c>)
 80013a6:	f04f 32ff 	mov.w	r2, #4294967295
 80013aa:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_NONE;
 80013ac:	4b19      	ldr	r3, [pc, #100]	; (8001414 <MX_RTC_Init+0x8c>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80013b2:	4818      	ldr	r0, [pc, #96]	; (8001414 <MX_RTC_Init+0x8c>)
 80013b4:	f002 ff72 	bl	800429c <HAL_RTC_Init>
 80013b8:	4603      	mov	r3, r0
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d001      	beq.n	80013c2 <MX_RTC_Init+0x3a>
  {
    Error_Handler();
 80013be:	f000 fa67 	bl	8001890 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 80013c2:	2300      	movs	r3, #0
 80013c4:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 80013c6:	2300      	movs	r3, #0
 80013c8:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 80013ca:	2300      	movs	r3, #0
 80013cc:	71bb      	strb	r3, [r7, #6]

  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80013ce:	1d3b      	adds	r3, r7, #4
 80013d0:	2201      	movs	r2, #1
 80013d2:	4619      	mov	r1, r3
 80013d4:	480f      	ldr	r0, [pc, #60]	; (8001414 <MX_RTC_Init+0x8c>)
 80013d6:	f002 fff7 	bl	80043c8 <HAL_RTC_SetTime>
 80013da:	4603      	mov	r3, r0
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d001      	beq.n	80013e4 <MX_RTC_Init+0x5c>
  {
    Error_Handler();
 80013e0:	f000 fa56 	bl	8001890 <Error_Handler>
  }
  DateToUpdate.WeekDay = RTC_WEEKDAY_MONDAY;
 80013e4:	2301      	movs	r3, #1
 80013e6:	703b      	strb	r3, [r7, #0]
  DateToUpdate.Month = RTC_MONTH_JANUARY;
 80013e8:	2301      	movs	r3, #1
 80013ea:	707b      	strb	r3, [r7, #1]
  DateToUpdate.Date = 0x1;
 80013ec:	2301      	movs	r3, #1
 80013ee:	70bb      	strb	r3, [r7, #2]
  DateToUpdate.Year = 0x0;
 80013f0:	2300      	movs	r3, #0
 80013f2:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BCD) != HAL_OK)
 80013f4:	463b      	mov	r3, r7
 80013f6:	2201      	movs	r2, #1
 80013f8:	4619      	mov	r1, r3
 80013fa:	4806      	ldr	r0, [pc, #24]	; (8001414 <MX_RTC_Init+0x8c>)
 80013fc:	f003 f87c 	bl	80044f8 <HAL_RTC_SetDate>
 8001400:	4603      	mov	r3, r0
 8001402:	2b00      	cmp	r3, #0
 8001404:	d001      	beq.n	800140a <MX_RTC_Init+0x82>
  {
    Error_Handler();
 8001406:	f000 fa43 	bl	8001890 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800140a:	bf00      	nop
 800140c:	3708      	adds	r7, #8
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}
 8001412:	bf00      	nop
 8001414:	2000069c 	.word	0x2000069c
 8001418:	40002800 	.word	0x40002800

0800141c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001420:	4b17      	ldr	r3, [pc, #92]	; (8001480 <MX_SPI1_Init+0x64>)
 8001422:	4a18      	ldr	r2, [pc, #96]	; (8001484 <MX_SPI1_Init+0x68>)
 8001424:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001426:	4b16      	ldr	r3, [pc, #88]	; (8001480 <MX_SPI1_Init+0x64>)
 8001428:	f44f 7282 	mov.w	r2, #260	; 0x104
 800142c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800142e:	4b14      	ldr	r3, [pc, #80]	; (8001480 <MX_SPI1_Init+0x64>)
 8001430:	2200      	movs	r2, #0
 8001432:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001434:	4b12      	ldr	r3, [pc, #72]	; (8001480 <MX_SPI1_Init+0x64>)
 8001436:	2200      	movs	r2, #0
 8001438:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800143a:	4b11      	ldr	r3, [pc, #68]	; (8001480 <MX_SPI1_Init+0x64>)
 800143c:	2200      	movs	r2, #0
 800143e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001440:	4b0f      	ldr	r3, [pc, #60]	; (8001480 <MX_SPI1_Init+0x64>)
 8001442:	2200      	movs	r2, #0
 8001444:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8001446:	4b0e      	ldr	r3, [pc, #56]	; (8001480 <MX_SPI1_Init+0x64>)
 8001448:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800144c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800144e:	4b0c      	ldr	r3, [pc, #48]	; (8001480 <MX_SPI1_Init+0x64>)
 8001450:	2208      	movs	r2, #8
 8001452:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001454:	4b0a      	ldr	r3, [pc, #40]	; (8001480 <MX_SPI1_Init+0x64>)
 8001456:	2200      	movs	r2, #0
 8001458:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800145a:	4b09      	ldr	r3, [pc, #36]	; (8001480 <MX_SPI1_Init+0x64>)
 800145c:	2200      	movs	r2, #0
 800145e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001460:	4b07      	ldr	r3, [pc, #28]	; (8001480 <MX_SPI1_Init+0x64>)
 8001462:	2200      	movs	r2, #0
 8001464:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001466:	4b06      	ldr	r3, [pc, #24]	; (8001480 <MX_SPI1_Init+0x64>)
 8001468:	220a      	movs	r2, #10
 800146a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800146c:	4804      	ldr	r0, [pc, #16]	; (8001480 <MX_SPI1_Init+0x64>)
 800146e:	f003 faa3 	bl	80049b8 <HAL_SPI_Init>
 8001472:	4603      	mov	r3, r0
 8001474:	2b00      	cmp	r3, #0
 8001476:	d001      	beq.n	800147c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001478:	f000 fa0a 	bl	8001890 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800147c:	bf00      	nop
 800147e:	bd80      	pop	{r7, pc}
 8001480:	200006b0 	.word	0x200006b0
 8001484:	40013000 	.word	0x40013000

08001488 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800148c:	4b17      	ldr	r3, [pc, #92]	; (80014ec <MX_SPI2_Init+0x64>)
 800148e:	4a18      	ldr	r2, [pc, #96]	; (80014f0 <MX_SPI2_Init+0x68>)
 8001490:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001492:	4b16      	ldr	r3, [pc, #88]	; (80014ec <MX_SPI2_Init+0x64>)
 8001494:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001498:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800149a:	4b14      	ldr	r3, [pc, #80]	; (80014ec <MX_SPI2_Init+0x64>)
 800149c:	2200      	movs	r2, #0
 800149e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80014a0:	4b12      	ldr	r3, [pc, #72]	; (80014ec <MX_SPI2_Init+0x64>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80014a6:	4b11      	ldr	r3, [pc, #68]	; (80014ec <MX_SPI2_Init+0x64>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80014ac:	4b0f      	ldr	r3, [pc, #60]	; (80014ec <MX_SPI2_Init+0x64>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80014b2:	4b0e      	ldr	r3, [pc, #56]	; (80014ec <MX_SPI2_Init+0x64>)
 80014b4:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80014b8:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80014ba:	4b0c      	ldr	r3, [pc, #48]	; (80014ec <MX_SPI2_Init+0x64>)
 80014bc:	2208      	movs	r2, #8
 80014be:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80014c0:	4b0a      	ldr	r3, [pc, #40]	; (80014ec <MX_SPI2_Init+0x64>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80014c6:	4b09      	ldr	r3, [pc, #36]	; (80014ec <MX_SPI2_Init+0x64>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80014cc:	4b07      	ldr	r3, [pc, #28]	; (80014ec <MX_SPI2_Init+0x64>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80014d2:	4b06      	ldr	r3, [pc, #24]	; (80014ec <MX_SPI2_Init+0x64>)
 80014d4:	220a      	movs	r2, #10
 80014d6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80014d8:	4804      	ldr	r0, [pc, #16]	; (80014ec <MX_SPI2_Init+0x64>)
 80014da:	f003 fa6d 	bl	80049b8 <HAL_SPI_Init>
 80014de:	4603      	mov	r3, r0
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d001      	beq.n	80014e8 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80014e4:	f000 f9d4 	bl	8001890 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80014e8:	bf00      	nop
 80014ea:	bd80      	pop	{r7, pc}
 80014ec:	20000708 	.word	0x20000708
 80014f0:	40003800 	.word	0x40003800

080014f4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b092      	sub	sp, #72	; 0x48
 80014f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014fa:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80014fe:	2200      	movs	r2, #0
 8001500:	601a      	str	r2, [r3, #0]
 8001502:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001504:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001508:	2200      	movs	r2, #0
 800150a:	601a      	str	r2, [r3, #0]
 800150c:	605a      	str	r2, [r3, #4]
 800150e:	609a      	str	r2, [r3, #8]
 8001510:	60da      	str	r2, [r3, #12]
 8001512:	611a      	str	r2, [r3, #16]
 8001514:	615a      	str	r2, [r3, #20]
 8001516:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001518:	1d3b      	adds	r3, r7, #4
 800151a:	2220      	movs	r2, #32
 800151c:	2100      	movs	r1, #0
 800151e:	4618      	mov	r0, r3
 8001520:	f004 fe08 	bl	8006134 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001524:	4b33      	ldr	r3, [pc, #204]	; (80015f4 <MX_TIM1_Init+0x100>)
 8001526:	4a34      	ldr	r2, [pc, #208]	; (80015f8 <MX_TIM1_Init+0x104>)
 8001528:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800152a:	4b32      	ldr	r3, [pc, #200]	; (80015f4 <MX_TIM1_Init+0x100>)
 800152c:	2200      	movs	r2, #0
 800152e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001530:	4b30      	ldr	r3, [pc, #192]	; (80015f4 <MX_TIM1_Init+0x100>)
 8001532:	2200      	movs	r2, #0
 8001534:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001536:	4b2f      	ldr	r3, [pc, #188]	; (80015f4 <MX_TIM1_Init+0x100>)
 8001538:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800153c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800153e:	4b2d      	ldr	r3, [pc, #180]	; (80015f4 <MX_TIM1_Init+0x100>)
 8001540:	2200      	movs	r2, #0
 8001542:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001544:	4b2b      	ldr	r3, [pc, #172]	; (80015f4 <MX_TIM1_Init+0x100>)
 8001546:	2200      	movs	r2, #0
 8001548:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800154a:	4b2a      	ldr	r3, [pc, #168]	; (80015f4 <MX_TIM1_Init+0x100>)
 800154c:	2200      	movs	r2, #0
 800154e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001550:	4828      	ldr	r0, [pc, #160]	; (80015f4 <MX_TIM1_Init+0x100>)
 8001552:	f003 fc97 	bl	8004e84 <HAL_TIM_PWM_Init>
 8001556:	4603      	mov	r3, r0
 8001558:	2b00      	cmp	r3, #0
 800155a:	d001      	beq.n	8001560 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 800155c:	f000 f998 	bl	8001890 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001560:	2300      	movs	r3, #0
 8001562:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001564:	2300      	movs	r3, #0
 8001566:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001568:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800156c:	4619      	mov	r1, r3
 800156e:	4821      	ldr	r0, [pc, #132]	; (80015f4 <MX_TIM1_Init+0x100>)
 8001570:	f004 f846 	bl	8005600 <HAL_TIMEx_MasterConfigSynchronization>
 8001574:	4603      	mov	r3, r0
 8001576:	2b00      	cmp	r3, #0
 8001578:	d001      	beq.n	800157e <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 800157a:	f000 f989 	bl	8001890 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800157e:	2360      	movs	r3, #96	; 0x60
 8001580:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 50000;
 8001582:	f24c 3350 	movw	r3, #50000	; 0xc350
 8001586:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001588:	2300      	movs	r3, #0
 800158a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800158c:	2300      	movs	r3, #0
 800158e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001590:	2300      	movs	r3, #0
 8001592:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001594:	2300      	movs	r3, #0
 8001596:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001598:	2300      	movs	r3, #0
 800159a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800159c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015a0:	2200      	movs	r2, #0
 80015a2:	4619      	mov	r1, r3
 80015a4:	4813      	ldr	r0, [pc, #76]	; (80015f4 <MX_TIM1_Init+0x100>)
 80015a6:	f003 fd5f 	bl	8005068 <HAL_TIM_PWM_ConfigChannel>
 80015aa:	4603      	mov	r3, r0
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d001      	beq.n	80015b4 <MX_TIM1_Init+0xc0>
  {
    Error_Handler();
 80015b0:	f000 f96e 	bl	8001890 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80015b4:	2300      	movs	r3, #0
 80015b6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80015b8:	2300      	movs	r3, #0
 80015ba:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80015bc:	2300      	movs	r3, #0
 80015be:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80015c0:	2300      	movs	r3, #0
 80015c2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80015c4:	2300      	movs	r3, #0
 80015c6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80015c8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80015cc:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80015ce:	2300      	movs	r3, #0
 80015d0:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80015d2:	1d3b      	adds	r3, r7, #4
 80015d4:	4619      	mov	r1, r3
 80015d6:	4807      	ldr	r0, [pc, #28]	; (80015f4 <MX_TIM1_Init+0x100>)
 80015d8:	f004 f870 	bl	80056bc <HAL_TIMEx_ConfigBreakDeadTime>
 80015dc:	4603      	mov	r3, r0
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d001      	beq.n	80015e6 <MX_TIM1_Init+0xf2>
  {
    Error_Handler();
 80015e2:	f000 f955 	bl	8001890 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80015e6:	4803      	ldr	r0, [pc, #12]	; (80015f4 <MX_TIM1_Init+0x100>)
 80015e8:	f000 fb26 	bl	8001c38 <HAL_TIM_MspPostInit>

}
 80015ec:	bf00      	nop
 80015ee:	3748      	adds	r7, #72	; 0x48
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bd80      	pop	{r7, pc}
 80015f4:	20000760 	.word	0x20000760
 80015f8:	40012c00 	.word	0x40012c00

080015fc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001600:	4b11      	ldr	r3, [pc, #68]	; (8001648 <MX_USART1_UART_Init+0x4c>)
 8001602:	4a12      	ldr	r2, [pc, #72]	; (800164c <MX_USART1_UART_Init+0x50>)
 8001604:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001606:	4b10      	ldr	r3, [pc, #64]	; (8001648 <MX_USART1_UART_Init+0x4c>)
 8001608:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800160c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800160e:	4b0e      	ldr	r3, [pc, #56]	; (8001648 <MX_USART1_UART_Init+0x4c>)
 8001610:	2200      	movs	r2, #0
 8001612:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001614:	4b0c      	ldr	r3, [pc, #48]	; (8001648 <MX_USART1_UART_Init+0x4c>)
 8001616:	2200      	movs	r2, #0
 8001618:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800161a:	4b0b      	ldr	r3, [pc, #44]	; (8001648 <MX_USART1_UART_Init+0x4c>)
 800161c:	2200      	movs	r2, #0
 800161e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001620:	4b09      	ldr	r3, [pc, #36]	; (8001648 <MX_USART1_UART_Init+0x4c>)
 8001622:	220c      	movs	r2, #12
 8001624:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001626:	4b08      	ldr	r3, [pc, #32]	; (8001648 <MX_USART1_UART_Init+0x4c>)
 8001628:	2200      	movs	r2, #0
 800162a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800162c:	4b06      	ldr	r3, [pc, #24]	; (8001648 <MX_USART1_UART_Init+0x4c>)
 800162e:	2200      	movs	r2, #0
 8001630:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001632:	4805      	ldr	r0, [pc, #20]	; (8001648 <MX_USART1_UART_Init+0x4c>)
 8001634:	f004 f893 	bl	800575e <HAL_UART_Init>
 8001638:	4603      	mov	r3, r0
 800163a:	2b00      	cmp	r3, #0
 800163c:	d001      	beq.n	8001642 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800163e:	f000 f927 	bl	8001890 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001642:	bf00      	nop
 8001644:	bd80      	pop	{r7, pc}
 8001646:	bf00      	nop
 8001648:	200007a8 	.word	0x200007a8
 800164c:	40013800 	.word	0x40013800

08001650 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001654:	4b11      	ldr	r3, [pc, #68]	; (800169c <MX_USART3_UART_Init+0x4c>)
 8001656:	4a12      	ldr	r2, [pc, #72]	; (80016a0 <MX_USART3_UART_Init+0x50>)
 8001658:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 800165a:	4b10      	ldr	r3, [pc, #64]	; (800169c <MX_USART3_UART_Init+0x4c>)
 800165c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001660:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001662:	4b0e      	ldr	r3, [pc, #56]	; (800169c <MX_USART3_UART_Init+0x4c>)
 8001664:	2200      	movs	r2, #0
 8001666:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001668:	4b0c      	ldr	r3, [pc, #48]	; (800169c <MX_USART3_UART_Init+0x4c>)
 800166a:	2200      	movs	r2, #0
 800166c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800166e:	4b0b      	ldr	r3, [pc, #44]	; (800169c <MX_USART3_UART_Init+0x4c>)
 8001670:	2200      	movs	r2, #0
 8001672:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001674:	4b09      	ldr	r3, [pc, #36]	; (800169c <MX_USART3_UART_Init+0x4c>)
 8001676:	220c      	movs	r2, #12
 8001678:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800167a:	4b08      	ldr	r3, [pc, #32]	; (800169c <MX_USART3_UART_Init+0x4c>)
 800167c:	2200      	movs	r2, #0
 800167e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001680:	4b06      	ldr	r3, [pc, #24]	; (800169c <MX_USART3_UART_Init+0x4c>)
 8001682:	2200      	movs	r2, #0
 8001684:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001686:	4805      	ldr	r0, [pc, #20]	; (800169c <MX_USART3_UART_Init+0x4c>)
 8001688:	f004 f869 	bl	800575e <HAL_UART_Init>
 800168c:	4603      	mov	r3, r0
 800168e:	2b00      	cmp	r3, #0
 8001690:	d001      	beq.n	8001696 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001692:	f000 f8fd 	bl	8001890 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001696:	bf00      	nop
 8001698:	bd80      	pop	{r7, pc}
 800169a:	bf00      	nop
 800169c:	200007ec 	.word	0x200007ec
 80016a0:	40004800 	.word	0x40004800

080016a4 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 80016a8:	4b0d      	ldr	r3, [pc, #52]	; (80016e0 <MX_USB_PCD_Init+0x3c>)
 80016aa:	4a0e      	ldr	r2, [pc, #56]	; (80016e4 <MX_USB_PCD_Init+0x40>)
 80016ac:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80016ae:	4b0c      	ldr	r3, [pc, #48]	; (80016e0 <MX_USB_PCD_Init+0x3c>)
 80016b0:	2208      	movs	r2, #8
 80016b2:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80016b4:	4b0a      	ldr	r3, [pc, #40]	; (80016e0 <MX_USB_PCD_Init+0x3c>)
 80016b6:	2202      	movs	r2, #2
 80016b8:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80016ba:	4b09      	ldr	r3, [pc, #36]	; (80016e0 <MX_USB_PCD_Init+0x3c>)
 80016bc:	2200      	movs	r2, #0
 80016be:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80016c0:	4b07      	ldr	r3, [pc, #28]	; (80016e0 <MX_USB_PCD_Init+0x3c>)
 80016c2:	2200      	movs	r2, #0
 80016c4:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80016c6:	4b06      	ldr	r3, [pc, #24]	; (80016e0 <MX_USB_PCD_Init+0x3c>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80016cc:	4804      	ldr	r0, [pc, #16]	; (80016e0 <MX_USB_PCD_Init+0x3c>)
 80016ce:	f001 ff3d 	bl	800354c <HAL_PCD_Init>
 80016d2:	4603      	mov	r3, r0
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d001      	beq.n	80016dc <MX_USB_PCD_Init+0x38>
  {
    Error_Handler();
 80016d8:	f000 f8da 	bl	8001890 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 80016dc:	bf00      	nop
 80016de:	bd80      	pop	{r7, pc}
 80016e0:	20000830 	.word	0x20000830
 80016e4:	40005c00 	.word	0x40005c00

080016e8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b082      	sub	sp, #8
 80016ec:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80016ee:	4b0c      	ldr	r3, [pc, #48]	; (8001720 <MX_DMA_Init+0x38>)
 80016f0:	695b      	ldr	r3, [r3, #20]
 80016f2:	4a0b      	ldr	r2, [pc, #44]	; (8001720 <MX_DMA_Init+0x38>)
 80016f4:	f043 0301 	orr.w	r3, r3, #1
 80016f8:	6153      	str	r3, [r2, #20]
 80016fa:	4b09      	ldr	r3, [pc, #36]	; (8001720 <MX_DMA_Init+0x38>)
 80016fc:	695b      	ldr	r3, [r3, #20]
 80016fe:	f003 0301 	and.w	r3, r3, #1
 8001702:	607b      	str	r3, [r7, #4]
 8001704:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001706:	2200      	movs	r2, #0
 8001708:	2100      	movs	r1, #0
 800170a:	200b      	movs	r0, #11
 800170c:	f001 faad 	bl	8002c6a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001710:	200b      	movs	r0, #11
 8001712:	f001 fac6 	bl	8002ca2 <HAL_NVIC_EnableIRQ>

}
 8001716:	bf00      	nop
 8001718:	3708      	adds	r7, #8
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	40021000 	.word	0x40021000

08001724 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b088      	sub	sp, #32
 8001728:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800172a:	f107 0310 	add.w	r3, r7, #16
 800172e:	2200      	movs	r2, #0
 8001730:	601a      	str	r2, [r3, #0]
 8001732:	605a      	str	r2, [r3, #4]
 8001734:	609a      	str	r2, [r3, #8]
 8001736:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001738:	4b39      	ldr	r3, [pc, #228]	; (8001820 <MX_GPIO_Init+0xfc>)
 800173a:	699b      	ldr	r3, [r3, #24]
 800173c:	4a38      	ldr	r2, [pc, #224]	; (8001820 <MX_GPIO_Init+0xfc>)
 800173e:	f043 0310 	orr.w	r3, r3, #16
 8001742:	6193      	str	r3, [r2, #24]
 8001744:	4b36      	ldr	r3, [pc, #216]	; (8001820 <MX_GPIO_Init+0xfc>)
 8001746:	699b      	ldr	r3, [r3, #24]
 8001748:	f003 0310 	and.w	r3, r3, #16
 800174c:	60fb      	str	r3, [r7, #12]
 800174e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001750:	4b33      	ldr	r3, [pc, #204]	; (8001820 <MX_GPIO_Init+0xfc>)
 8001752:	699b      	ldr	r3, [r3, #24]
 8001754:	4a32      	ldr	r2, [pc, #200]	; (8001820 <MX_GPIO_Init+0xfc>)
 8001756:	f043 0320 	orr.w	r3, r3, #32
 800175a:	6193      	str	r3, [r2, #24]
 800175c:	4b30      	ldr	r3, [pc, #192]	; (8001820 <MX_GPIO_Init+0xfc>)
 800175e:	699b      	ldr	r3, [r3, #24]
 8001760:	f003 0320 	and.w	r3, r3, #32
 8001764:	60bb      	str	r3, [r7, #8]
 8001766:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001768:	4b2d      	ldr	r3, [pc, #180]	; (8001820 <MX_GPIO_Init+0xfc>)
 800176a:	699b      	ldr	r3, [r3, #24]
 800176c:	4a2c      	ldr	r2, [pc, #176]	; (8001820 <MX_GPIO_Init+0xfc>)
 800176e:	f043 0304 	orr.w	r3, r3, #4
 8001772:	6193      	str	r3, [r2, #24]
 8001774:	4b2a      	ldr	r3, [pc, #168]	; (8001820 <MX_GPIO_Init+0xfc>)
 8001776:	699b      	ldr	r3, [r3, #24]
 8001778:	f003 0304 	and.w	r3, r3, #4
 800177c:	607b      	str	r3, [r7, #4]
 800177e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001780:	4b27      	ldr	r3, [pc, #156]	; (8001820 <MX_GPIO_Init+0xfc>)
 8001782:	699b      	ldr	r3, [r3, #24]
 8001784:	4a26      	ldr	r2, [pc, #152]	; (8001820 <MX_GPIO_Init+0xfc>)
 8001786:	f043 0308 	orr.w	r3, r3, #8
 800178a:	6193      	str	r3, [r2, #24]
 800178c:	4b24      	ldr	r3, [pc, #144]	; (8001820 <MX_GPIO_Init+0xfc>)
 800178e:	699b      	ldr	r3, [r3, #24]
 8001790:	f003 0308 	and.w	r3, r3, #8
 8001794:	603b      	str	r3, [r7, #0]
 8001796:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SHUTDOWN_GPIO_Port, SHUTDOWN_Pin, GPIO_PIN_SET);
 8001798:	2201      	movs	r2, #1
 800179a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800179e:	4821      	ldr	r0, [pc, #132]	; (8001824 <MX_GPIO_Init+0x100>)
 80017a0:	f001 febc 	bl	800351c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DISP_RS_Pin|DISP_RSE_Pin, GPIO_PIN_RESET);
 80017a4:	2200      	movs	r2, #0
 80017a6:	2106      	movs	r1, #6
 80017a8:	481f      	ldr	r0, [pc, #124]	; (8001828 <MX_GPIO_Init+0x104>)
 80017aa:	f001 feb7 	bl	800351c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SHUTDOWN_Pin */
  GPIO_InitStruct.Pin = SHUTDOWN_Pin;
 80017ae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80017b2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80017b4:	2311      	movs	r3, #17
 80017b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b8:	2300      	movs	r3, #0
 80017ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017bc:	2302      	movs	r3, #2
 80017be:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SHUTDOWN_GPIO_Port, &GPIO_InitStruct);
 80017c0:	f107 0310 	add.w	r3, r7, #16
 80017c4:	4619      	mov	r1, r3
 80017c6:	4817      	ldr	r0, [pc, #92]	; (8001824 <MX_GPIO_Init+0x100>)
 80017c8:	f001 fd24 	bl	8003214 <HAL_GPIO_Init>

  /*Configure GPIO pins : DISP_RS_Pin DISP_RSE_Pin */
  GPIO_InitStruct.Pin = DISP_RS_Pin|DISP_RSE_Pin;
 80017cc:	2306      	movs	r3, #6
 80017ce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017d0:	2301      	movs	r3, #1
 80017d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d4:	2300      	movs	r3, #0
 80017d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017d8:	2302      	movs	r3, #2
 80017da:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017dc:	f107 0310 	add.w	r3, r7, #16
 80017e0:	4619      	mov	r1, r3
 80017e2:	4811      	ldr	r0, [pc, #68]	; (8001828 <MX_GPIO_Init+0x104>)
 80017e4:	f001 fd16 	bl	8003214 <HAL_GPIO_Init>

  /*Configure GPIO pin : JOYSTICK_BTN_Pin */
  GPIO_InitStruct.Pin = JOYSTICK_BTN_Pin;
 80017e8:	2308      	movs	r3, #8
 80017ea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017ec:	2300      	movs	r3, #0
 80017ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80017f0:	2301      	movs	r3, #1
 80017f2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(JOYSTICK_BTN_GPIO_Port, &GPIO_InitStruct);
 80017f4:	f107 0310 	add.w	r3, r7, #16
 80017f8:	4619      	mov	r1, r3
 80017fa:	480b      	ldr	r0, [pc, #44]	; (8001828 <MX_GPIO_Init+0x104>)
 80017fc:	f001 fd0a 	bl	8003214 <HAL_GPIO_Init>

  /*Configure GPIO pins : BTN_1_Pin BTN_2_Pin BTN_3_Pin BTN_4_Pin */
  GPIO_InitStruct.Pin = BTN_1_Pin|BTN_2_Pin|BTN_3_Pin|BTN_4_Pin;
 8001800:	23f0      	movs	r3, #240	; 0xf0
 8001802:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001804:	2300      	movs	r3, #0
 8001806:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001808:	2301      	movs	r3, #1
 800180a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800180c:	f107 0310 	add.w	r3, r7, #16
 8001810:	4619      	mov	r1, r3
 8001812:	4806      	ldr	r0, [pc, #24]	; (800182c <MX_GPIO_Init+0x108>)
 8001814:	f001 fcfe 	bl	8003214 <HAL_GPIO_Init>

}
 8001818:	bf00      	nop
 800181a:	3720      	adds	r7, #32
 800181c:	46bd      	mov	sp, r7
 800181e:	bd80      	pop	{r7, pc}
 8001820:	40021000 	.word	0x40021000
 8001824:	40011000 	.word	0x40011000
 8001828:	40010800 	.word	0x40010800
 800182c:	40010c00 	.word	0x40010c00

08001830 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b082      	sub	sp, #8
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
  if(huart == &huart3)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	4a09      	ldr	r2, [pc, #36]	; (8001860 <HAL_UART_RxCpltCallback+0x30>)
 800183c:	4293      	cmp	r3, r2
 800183e:	d10a      	bne.n	8001856 <HAL_UART_RxCpltCallback+0x26>
  {
    RingBuf_BytePut(temp_byte, &ringbuf);
 8001840:	4b08      	ldr	r3, [pc, #32]	; (8001864 <HAL_UART_RxCpltCallback+0x34>)
 8001842:	781b      	ldrb	r3, [r3, #0]
 8001844:	4908      	ldr	r1, [pc, #32]	; (8001868 <HAL_UART_RxCpltCallback+0x38>)
 8001846:	4618      	mov	r0, r3
 8001848:	f7ff f983 	bl	8000b52 <RingBuf_BytePut>
    HAL_UART_Receive_IT (&huart3, &temp_byte, 1);
 800184c:	2201      	movs	r2, #1
 800184e:	4905      	ldr	r1, [pc, #20]	; (8001864 <HAL_UART_RxCpltCallback+0x34>)
 8001850:	4803      	ldr	r0, [pc, #12]	; (8001860 <HAL_UART_RxCpltCallback+0x30>)
 8001852:	f003 ffd1 	bl	80057f8 <HAL_UART_Receive_IT>
  }
}
 8001856:	bf00      	nop
 8001858:	3708      	adds	r7, #8
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}
 800185e:	bf00      	nop
 8001860:	200007ec 	.word	0x200007ec
 8001864:	20000f30 	.word	0x20000f30
 8001868:	20000b1c 	.word	0x20000b1c

0800186c <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800186c:	b480      	push	{r7}
 800186e:	b083      	sub	sp, #12
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
  if(huart == &huart3)
  {
  }
}
 8001874:	bf00      	nop
 8001876:	370c      	adds	r7, #12
 8001878:	46bd      	mov	sp, r7
 800187a:	bc80      	pop	{r7}
 800187c:	4770      	bx	lr

0800187e <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800187e:	b480      	push	{r7}
 8001880:	b083      	sub	sp, #12
 8001882:	af00      	add	r7, sp, #0
 8001884:	6078      	str	r0, [r7, #4]
  if(hadc->Instance == ADC1)
  {
  }
}
 8001886:	bf00      	nop
 8001888:	370c      	adds	r7, #12
 800188a:	46bd      	mov	sp, r7
 800188c:	bc80      	pop	{r7}
 800188e:	4770      	bx	lr

08001890 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001890:	b480      	push	{r7}
 8001892:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001894:	b672      	cpsid	i
}
 8001896:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001898:	e7fe      	b.n	8001898 <Error_Handler+0x8>
	...

0800189c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800189c:	b480      	push	{r7}
 800189e:	b085      	sub	sp, #20
 80018a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80018a2:	4b15      	ldr	r3, [pc, #84]	; (80018f8 <HAL_MspInit+0x5c>)
 80018a4:	699b      	ldr	r3, [r3, #24]
 80018a6:	4a14      	ldr	r2, [pc, #80]	; (80018f8 <HAL_MspInit+0x5c>)
 80018a8:	f043 0301 	orr.w	r3, r3, #1
 80018ac:	6193      	str	r3, [r2, #24]
 80018ae:	4b12      	ldr	r3, [pc, #72]	; (80018f8 <HAL_MspInit+0x5c>)
 80018b0:	699b      	ldr	r3, [r3, #24]
 80018b2:	f003 0301 	and.w	r3, r3, #1
 80018b6:	60bb      	str	r3, [r7, #8]
 80018b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018ba:	4b0f      	ldr	r3, [pc, #60]	; (80018f8 <HAL_MspInit+0x5c>)
 80018bc:	69db      	ldr	r3, [r3, #28]
 80018be:	4a0e      	ldr	r2, [pc, #56]	; (80018f8 <HAL_MspInit+0x5c>)
 80018c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018c4:	61d3      	str	r3, [r2, #28]
 80018c6:	4b0c      	ldr	r3, [pc, #48]	; (80018f8 <HAL_MspInit+0x5c>)
 80018c8:	69db      	ldr	r3, [r3, #28]
 80018ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018ce:	607b      	str	r3, [r7, #4]
 80018d0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80018d2:	4b0a      	ldr	r3, [pc, #40]	; (80018fc <HAL_MspInit+0x60>)
 80018d4:	685b      	ldr	r3, [r3, #4]
 80018d6:	60fb      	str	r3, [r7, #12]
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80018de:	60fb      	str	r3, [r7, #12]
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80018e6:	60fb      	str	r3, [r7, #12]
 80018e8:	4a04      	ldr	r2, [pc, #16]	; (80018fc <HAL_MspInit+0x60>)
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018ee:	bf00      	nop
 80018f0:	3714      	adds	r7, #20
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bc80      	pop	{r7}
 80018f6:	4770      	bx	lr
 80018f8:	40021000 	.word	0x40021000
 80018fc:	40010000 	.word	0x40010000

08001900 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b08a      	sub	sp, #40	; 0x28
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001908:	f107 0318 	add.w	r3, r7, #24
 800190c:	2200      	movs	r2, #0
 800190e:	601a      	str	r2, [r3, #0]
 8001910:	605a      	str	r2, [r3, #4]
 8001912:	609a      	str	r2, [r3, #8]
 8001914:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	4a33      	ldr	r2, [pc, #204]	; (80019e8 <HAL_ADC_MspInit+0xe8>)
 800191c:	4293      	cmp	r3, r2
 800191e:	d15f      	bne.n	80019e0 <HAL_ADC_MspInit+0xe0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001920:	4b32      	ldr	r3, [pc, #200]	; (80019ec <HAL_ADC_MspInit+0xec>)
 8001922:	699b      	ldr	r3, [r3, #24]
 8001924:	4a31      	ldr	r2, [pc, #196]	; (80019ec <HAL_ADC_MspInit+0xec>)
 8001926:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800192a:	6193      	str	r3, [r2, #24]
 800192c:	4b2f      	ldr	r3, [pc, #188]	; (80019ec <HAL_ADC_MspInit+0xec>)
 800192e:	699b      	ldr	r3, [r3, #24]
 8001930:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001934:	617b      	str	r3, [r7, #20]
 8001936:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001938:	4b2c      	ldr	r3, [pc, #176]	; (80019ec <HAL_ADC_MspInit+0xec>)
 800193a:	699b      	ldr	r3, [r3, #24]
 800193c:	4a2b      	ldr	r2, [pc, #172]	; (80019ec <HAL_ADC_MspInit+0xec>)
 800193e:	f043 0304 	orr.w	r3, r3, #4
 8001942:	6193      	str	r3, [r2, #24]
 8001944:	4b29      	ldr	r3, [pc, #164]	; (80019ec <HAL_ADC_MspInit+0xec>)
 8001946:	699b      	ldr	r3, [r3, #24]
 8001948:	f003 0304 	and.w	r3, r3, #4
 800194c:	613b      	str	r3, [r7, #16]
 800194e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001950:	4b26      	ldr	r3, [pc, #152]	; (80019ec <HAL_ADC_MspInit+0xec>)
 8001952:	699b      	ldr	r3, [r3, #24]
 8001954:	4a25      	ldr	r2, [pc, #148]	; (80019ec <HAL_ADC_MspInit+0xec>)
 8001956:	f043 0308 	orr.w	r3, r3, #8
 800195a:	6193      	str	r3, [r2, #24]
 800195c:	4b23      	ldr	r3, [pc, #140]	; (80019ec <HAL_ADC_MspInit+0xec>)
 800195e:	699b      	ldr	r3, [r3, #24]
 8001960:	f003 0308 	and.w	r3, r3, #8
 8001964:	60fb      	str	r3, [r7, #12]
 8001966:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = BAT_LVL_CTRL_Pin;
 8001968:	2301      	movs	r3, #1
 800196a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800196c:	2303      	movs	r3, #3
 800196e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(BAT_LVL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8001970:	f107 0318 	add.w	r3, r7, #24
 8001974:	4619      	mov	r1, r3
 8001976:	481e      	ldr	r0, [pc, #120]	; (80019f0 <HAL_ADC_MspInit+0xf0>)
 8001978:	f001 fc4c 	bl	8003214 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = JOYSTICK_OX_Pin|JOYSTICK_OY_Pin;
 800197c:	2303      	movs	r3, #3
 800197e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001980:	2303      	movs	r3, #3
 8001982:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001984:	f107 0318 	add.w	r3, r7, #24
 8001988:	4619      	mov	r1, r3
 800198a:	481a      	ldr	r0, [pc, #104]	; (80019f4 <HAL_ADC_MspInit+0xf4>)
 800198c:	f001 fc42 	bl	8003214 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001990:	4b19      	ldr	r3, [pc, #100]	; (80019f8 <HAL_ADC_MspInit+0xf8>)
 8001992:	4a1a      	ldr	r2, [pc, #104]	; (80019fc <HAL_ADC_MspInit+0xfc>)
 8001994:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001996:	4b18      	ldr	r3, [pc, #96]	; (80019f8 <HAL_ADC_MspInit+0xf8>)
 8001998:	2200      	movs	r2, #0
 800199a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800199c:	4b16      	ldr	r3, [pc, #88]	; (80019f8 <HAL_ADC_MspInit+0xf8>)
 800199e:	2200      	movs	r2, #0
 80019a0:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80019a2:	4b15      	ldr	r3, [pc, #84]	; (80019f8 <HAL_ADC_MspInit+0xf8>)
 80019a4:	2280      	movs	r2, #128	; 0x80
 80019a6:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80019a8:	4b13      	ldr	r3, [pc, #76]	; (80019f8 <HAL_ADC_MspInit+0xf8>)
 80019aa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80019ae:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80019b0:	4b11      	ldr	r3, [pc, #68]	; (80019f8 <HAL_ADC_MspInit+0xf8>)
 80019b2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80019b6:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 80019b8:	4b0f      	ldr	r3, [pc, #60]	; (80019f8 <HAL_ADC_MspInit+0xf8>)
 80019ba:	2200      	movs	r2, #0
 80019bc:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80019be:	4b0e      	ldr	r3, [pc, #56]	; (80019f8 <HAL_ADC_MspInit+0xf8>)
 80019c0:	2200      	movs	r2, #0
 80019c2:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80019c4:	480c      	ldr	r0, [pc, #48]	; (80019f8 <HAL_ADC_MspInit+0xf8>)
 80019c6:	f001 f987 	bl	8002cd8 <HAL_DMA_Init>
 80019ca:	4603      	mov	r3, r0
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d001      	beq.n	80019d4 <HAL_ADC_MspInit+0xd4>
    {
      Error_Handler();
 80019d0:	f7ff ff5e 	bl	8001890 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	4a08      	ldr	r2, [pc, #32]	; (80019f8 <HAL_ADC_MspInit+0xf8>)
 80019d8:	621a      	str	r2, [r3, #32]
 80019da:	4a07      	ldr	r2, [pc, #28]	; (80019f8 <HAL_ADC_MspInit+0xf8>)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80019e0:	bf00      	nop
 80019e2:	3728      	adds	r7, #40	; 0x28
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bd80      	pop	{r7, pc}
 80019e8:	40012400 	.word	0x40012400
 80019ec:	40021000 	.word	0x40021000
 80019f0:	40010800 	.word	0x40010800
 80019f4:	40010c00 	.word	0x40010c00
 80019f8:	20000630 	.word	0x20000630
 80019fc:	40020008 	.word	0x40020008

08001a00 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b08a      	sub	sp, #40	; 0x28
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a08:	f107 0314 	add.w	r3, r7, #20
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	601a      	str	r2, [r3, #0]
 8001a10:	605a      	str	r2, [r3, #4]
 8001a12:	609a      	str	r2, [r3, #8]
 8001a14:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	4a25      	ldr	r2, [pc, #148]	; (8001ab0 <HAL_CAN_MspInit+0xb0>)
 8001a1c:	4293      	cmp	r3, r2
 8001a1e:	d143      	bne.n	8001aa8 <HAL_CAN_MspInit+0xa8>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001a20:	4b24      	ldr	r3, [pc, #144]	; (8001ab4 <HAL_CAN_MspInit+0xb4>)
 8001a22:	69db      	ldr	r3, [r3, #28]
 8001a24:	4a23      	ldr	r2, [pc, #140]	; (8001ab4 <HAL_CAN_MspInit+0xb4>)
 8001a26:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001a2a:	61d3      	str	r3, [r2, #28]
 8001a2c:	4b21      	ldr	r3, [pc, #132]	; (8001ab4 <HAL_CAN_MspInit+0xb4>)
 8001a2e:	69db      	ldr	r3, [r3, #28]
 8001a30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a34:	613b      	str	r3, [r7, #16]
 8001a36:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a38:	4b1e      	ldr	r3, [pc, #120]	; (8001ab4 <HAL_CAN_MspInit+0xb4>)
 8001a3a:	699b      	ldr	r3, [r3, #24]
 8001a3c:	4a1d      	ldr	r2, [pc, #116]	; (8001ab4 <HAL_CAN_MspInit+0xb4>)
 8001a3e:	f043 0308 	orr.w	r3, r3, #8
 8001a42:	6193      	str	r3, [r2, #24]
 8001a44:	4b1b      	ldr	r3, [pc, #108]	; (8001ab4 <HAL_CAN_MspInit+0xb4>)
 8001a46:	699b      	ldr	r3, [r3, #24]
 8001a48:	f003 0308 	and.w	r3, r3, #8
 8001a4c:	60fb      	str	r3, [r7, #12]
 8001a4e:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001a50:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a56:	2300      	movs	r3, #0
 8001a58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a5e:	f107 0314 	add.w	r3, r7, #20
 8001a62:	4619      	mov	r1, r3
 8001a64:	4814      	ldr	r0, [pc, #80]	; (8001ab8 <HAL_CAN_MspInit+0xb8>)
 8001a66:	f001 fbd5 	bl	8003214 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001a6a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001a6e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a70:	2302      	movs	r3, #2
 8001a72:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a74:	2303      	movs	r3, #3
 8001a76:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a78:	f107 0314 	add.w	r3, r7, #20
 8001a7c:	4619      	mov	r1, r3
 8001a7e:	480e      	ldr	r0, [pc, #56]	; (8001ab8 <HAL_CAN_MspInit+0xb8>)
 8001a80:	f001 fbc8 	bl	8003214 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_CAN1_2();
 8001a84:	4b0d      	ldr	r3, [pc, #52]	; (8001abc <HAL_CAN_MspInit+0xbc>)
 8001a86:	685b      	ldr	r3, [r3, #4]
 8001a88:	627b      	str	r3, [r7, #36]	; 0x24
 8001a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a8c:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8001a90:	627b      	str	r3, [r7, #36]	; 0x24
 8001a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a94:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001a98:	627b      	str	r3, [r7, #36]	; 0x24
 8001a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a9c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001aa0:	627b      	str	r3, [r7, #36]	; 0x24
 8001aa2:	4a06      	ldr	r2, [pc, #24]	; (8001abc <HAL_CAN_MspInit+0xbc>)
 8001aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aa6:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8001aa8:	bf00      	nop
 8001aaa:	3728      	adds	r7, #40	; 0x28
 8001aac:	46bd      	mov	sp, r7
 8001aae:	bd80      	pop	{r7, pc}
 8001ab0:	40006400 	.word	0x40006400
 8001ab4:	40021000 	.word	0x40021000
 8001ab8:	40010c00 	.word	0x40010c00
 8001abc:	40010000 	.word	0x40010000

08001ac0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b084      	sub	sp, #16
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	4a0b      	ldr	r2, [pc, #44]	; (8001afc <HAL_RTC_MspInit+0x3c>)
 8001ace:	4293      	cmp	r3, r2
 8001ad0:	d110      	bne.n	8001af4 <HAL_RTC_MspInit+0x34>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 8001ad2:	f001 fe47 	bl	8003764 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 8001ad6:	4b0a      	ldr	r3, [pc, #40]	; (8001b00 <HAL_RTC_MspInit+0x40>)
 8001ad8:	69db      	ldr	r3, [r3, #28]
 8001ada:	4a09      	ldr	r2, [pc, #36]	; (8001b00 <HAL_RTC_MspInit+0x40>)
 8001adc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001ae0:	61d3      	str	r3, [r2, #28]
 8001ae2:	4b07      	ldr	r3, [pc, #28]	; (8001b00 <HAL_RTC_MspInit+0x40>)
 8001ae4:	69db      	ldr	r3, [r3, #28]
 8001ae6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001aea:	60fb      	str	r3, [r7, #12]
 8001aec:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001aee:	4b05      	ldr	r3, [pc, #20]	; (8001b04 <HAL_RTC_MspInit+0x44>)
 8001af0:	2201      	movs	r2, #1
 8001af2:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001af4:	bf00      	nop
 8001af6:	3710      	adds	r7, #16
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bd80      	pop	{r7, pc}
 8001afc:	40002800 	.word	0x40002800
 8001b00:	40021000 	.word	0x40021000
 8001b04:	4242043c 	.word	0x4242043c

08001b08 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b08a      	sub	sp, #40	; 0x28
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b10:	f107 0318 	add.w	r3, r7, #24
 8001b14:	2200      	movs	r2, #0
 8001b16:	601a      	str	r2, [r3, #0]
 8001b18:	605a      	str	r2, [r3, #4]
 8001b1a:	609a      	str	r2, [r3, #8]
 8001b1c:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	4a31      	ldr	r2, [pc, #196]	; (8001be8 <HAL_SPI_MspInit+0xe0>)
 8001b24:	4293      	cmp	r3, r2
 8001b26:	d130      	bne.n	8001b8a <HAL_SPI_MspInit+0x82>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001b28:	4b30      	ldr	r3, [pc, #192]	; (8001bec <HAL_SPI_MspInit+0xe4>)
 8001b2a:	699b      	ldr	r3, [r3, #24]
 8001b2c:	4a2f      	ldr	r2, [pc, #188]	; (8001bec <HAL_SPI_MspInit+0xe4>)
 8001b2e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001b32:	6193      	str	r3, [r2, #24]
 8001b34:	4b2d      	ldr	r3, [pc, #180]	; (8001bec <HAL_SPI_MspInit+0xe4>)
 8001b36:	699b      	ldr	r3, [r3, #24]
 8001b38:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b3c:	617b      	str	r3, [r7, #20]
 8001b3e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b40:	4b2a      	ldr	r3, [pc, #168]	; (8001bec <HAL_SPI_MspInit+0xe4>)
 8001b42:	699b      	ldr	r3, [r3, #24]
 8001b44:	4a29      	ldr	r2, [pc, #164]	; (8001bec <HAL_SPI_MspInit+0xe4>)
 8001b46:	f043 0304 	orr.w	r3, r3, #4
 8001b4a:	6193      	str	r3, [r2, #24]
 8001b4c:	4b27      	ldr	r3, [pc, #156]	; (8001bec <HAL_SPI_MspInit+0xe4>)
 8001b4e:	699b      	ldr	r3, [r3, #24]
 8001b50:	f003 0304 	and.w	r3, r3, #4
 8001b54:	613b      	str	r3, [r7, #16]
 8001b56:	693b      	ldr	r3, [r7, #16]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
 8001b58:	23b0      	movs	r3, #176	; 0xb0
 8001b5a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b5c:	2302      	movs	r3, #2
 8001b5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b60:	2303      	movs	r3, #3
 8001b62:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b64:	f107 0318 	add.w	r3, r7, #24
 8001b68:	4619      	mov	r1, r3
 8001b6a:	4821      	ldr	r0, [pc, #132]	; (8001bf0 <HAL_SPI_MspInit+0xe8>)
 8001b6c:	f001 fb52 	bl	8003214 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001b70:	2340      	movs	r3, #64	; 0x40
 8001b72:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b74:	2300      	movs	r3, #0
 8001b76:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b7c:	f107 0318 	add.w	r3, r7, #24
 8001b80:	4619      	mov	r1, r3
 8001b82:	481b      	ldr	r0, [pc, #108]	; (8001bf0 <HAL_SPI_MspInit+0xe8>)
 8001b84:	f001 fb46 	bl	8003214 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001b88:	e029      	b.n	8001bde <HAL_SPI_MspInit+0xd6>
  else if(hspi->Instance==SPI2)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	4a19      	ldr	r2, [pc, #100]	; (8001bf4 <HAL_SPI_MspInit+0xec>)
 8001b90:	4293      	cmp	r3, r2
 8001b92:	d124      	bne.n	8001bde <HAL_SPI_MspInit+0xd6>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001b94:	4b15      	ldr	r3, [pc, #84]	; (8001bec <HAL_SPI_MspInit+0xe4>)
 8001b96:	69db      	ldr	r3, [r3, #28]
 8001b98:	4a14      	ldr	r2, [pc, #80]	; (8001bec <HAL_SPI_MspInit+0xe4>)
 8001b9a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b9e:	61d3      	str	r3, [r2, #28]
 8001ba0:	4b12      	ldr	r3, [pc, #72]	; (8001bec <HAL_SPI_MspInit+0xe4>)
 8001ba2:	69db      	ldr	r3, [r3, #28]
 8001ba4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ba8:	60fb      	str	r3, [r7, #12]
 8001baa:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bac:	4b0f      	ldr	r3, [pc, #60]	; (8001bec <HAL_SPI_MspInit+0xe4>)
 8001bae:	699b      	ldr	r3, [r3, #24]
 8001bb0:	4a0e      	ldr	r2, [pc, #56]	; (8001bec <HAL_SPI_MspInit+0xe4>)
 8001bb2:	f043 0308 	orr.w	r3, r3, #8
 8001bb6:	6193      	str	r3, [r2, #24]
 8001bb8:	4b0c      	ldr	r3, [pc, #48]	; (8001bec <HAL_SPI_MspInit+0xe4>)
 8001bba:	699b      	ldr	r3, [r3, #24]
 8001bbc:	f003 0308 	and.w	r3, r3, #8
 8001bc0:	60bb      	str	r3, [r7, #8]
 8001bc2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = DISP_SPI_CS_Pin|DISP_SPI_SCK_Pin|GPIO_PIN_15;
 8001bc4:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 8001bc8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bca:	2302      	movs	r3, #2
 8001bcc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001bce:	2303      	movs	r3, #3
 8001bd0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bd2:	f107 0318 	add.w	r3, r7, #24
 8001bd6:	4619      	mov	r1, r3
 8001bd8:	4807      	ldr	r0, [pc, #28]	; (8001bf8 <HAL_SPI_MspInit+0xf0>)
 8001bda:	f001 fb1b 	bl	8003214 <HAL_GPIO_Init>
}
 8001bde:	bf00      	nop
 8001be0:	3728      	adds	r7, #40	; 0x28
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bd80      	pop	{r7, pc}
 8001be6:	bf00      	nop
 8001be8:	40013000 	.word	0x40013000
 8001bec:	40021000 	.word	0x40021000
 8001bf0:	40010800 	.word	0x40010800
 8001bf4:	40003800 	.word	0x40003800
 8001bf8:	40010c00 	.word	0x40010c00

08001bfc <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	b085      	sub	sp, #20
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4a09      	ldr	r2, [pc, #36]	; (8001c30 <HAL_TIM_PWM_MspInit+0x34>)
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d10b      	bne.n	8001c26 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001c0e:	4b09      	ldr	r3, [pc, #36]	; (8001c34 <HAL_TIM_PWM_MspInit+0x38>)
 8001c10:	699b      	ldr	r3, [r3, #24]
 8001c12:	4a08      	ldr	r2, [pc, #32]	; (8001c34 <HAL_TIM_PWM_MspInit+0x38>)
 8001c14:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001c18:	6193      	str	r3, [r2, #24]
 8001c1a:	4b06      	ldr	r3, [pc, #24]	; (8001c34 <HAL_TIM_PWM_MspInit+0x38>)
 8001c1c:	699b      	ldr	r3, [r3, #24]
 8001c1e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001c22:	60fb      	str	r3, [r7, #12]
 8001c24:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001c26:	bf00      	nop
 8001c28:	3714      	adds	r7, #20
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bc80      	pop	{r7}
 8001c2e:	4770      	bx	lr
 8001c30:	40012c00 	.word	0x40012c00
 8001c34:	40021000 	.word	0x40021000

08001c38 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b088      	sub	sp, #32
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c40:	f107 0310 	add.w	r3, r7, #16
 8001c44:	2200      	movs	r2, #0
 8001c46:	601a      	str	r2, [r3, #0]
 8001c48:	605a      	str	r2, [r3, #4]
 8001c4a:	609a      	str	r2, [r3, #8]
 8001c4c:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	4a10      	ldr	r2, [pc, #64]	; (8001c94 <HAL_TIM_MspPostInit+0x5c>)
 8001c54:	4293      	cmp	r3, r2
 8001c56:	d118      	bne.n	8001c8a <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c58:	4b0f      	ldr	r3, [pc, #60]	; (8001c98 <HAL_TIM_MspPostInit+0x60>)
 8001c5a:	699b      	ldr	r3, [r3, #24]
 8001c5c:	4a0e      	ldr	r2, [pc, #56]	; (8001c98 <HAL_TIM_MspPostInit+0x60>)
 8001c5e:	f043 0304 	orr.w	r3, r3, #4
 8001c62:	6193      	str	r3, [r2, #24]
 8001c64:	4b0c      	ldr	r3, [pc, #48]	; (8001c98 <HAL_TIM_MspPostInit+0x60>)
 8001c66:	699b      	ldr	r3, [r3, #24]
 8001c68:	f003 0304 	and.w	r3, r3, #4
 8001c6c:	60fb      	str	r3, [r7, #12]
 8001c6e:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = DISP_BRIGHT_PWM_Pin;
 8001c70:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001c74:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c76:	2302      	movs	r3, #2
 8001c78:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c7a:	2302      	movs	r3, #2
 8001c7c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISP_BRIGHT_PWM_GPIO_Port, &GPIO_InitStruct);
 8001c7e:	f107 0310 	add.w	r3, r7, #16
 8001c82:	4619      	mov	r1, r3
 8001c84:	4805      	ldr	r0, [pc, #20]	; (8001c9c <HAL_TIM_MspPostInit+0x64>)
 8001c86:	f001 fac5 	bl	8003214 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001c8a:	bf00      	nop
 8001c8c:	3720      	adds	r7, #32
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}
 8001c92:	bf00      	nop
 8001c94:	40012c00 	.word	0x40012c00
 8001c98:	40021000 	.word	0x40021000
 8001c9c:	40010800 	.word	0x40010800

08001ca0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b08a      	sub	sp, #40	; 0x28
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ca8:	f107 0318 	add.w	r3, r7, #24
 8001cac:	2200      	movs	r2, #0
 8001cae:	601a      	str	r2, [r3, #0]
 8001cb0:	605a      	str	r2, [r3, #4]
 8001cb2:	609a      	str	r2, [r3, #8]
 8001cb4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	4a40      	ldr	r2, [pc, #256]	; (8001dbc <HAL_UART_MspInit+0x11c>)
 8001cbc:	4293      	cmp	r3, r2
 8001cbe:	d13a      	bne.n	8001d36 <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001cc0:	4b3f      	ldr	r3, [pc, #252]	; (8001dc0 <HAL_UART_MspInit+0x120>)
 8001cc2:	699b      	ldr	r3, [r3, #24]
 8001cc4:	4a3e      	ldr	r2, [pc, #248]	; (8001dc0 <HAL_UART_MspInit+0x120>)
 8001cc6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001cca:	6193      	str	r3, [r2, #24]
 8001ccc:	4b3c      	ldr	r3, [pc, #240]	; (8001dc0 <HAL_UART_MspInit+0x120>)
 8001cce:	699b      	ldr	r3, [r3, #24]
 8001cd0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001cd4:	617b      	str	r3, [r7, #20]
 8001cd6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cd8:	4b39      	ldr	r3, [pc, #228]	; (8001dc0 <HAL_UART_MspInit+0x120>)
 8001cda:	699b      	ldr	r3, [r3, #24]
 8001cdc:	4a38      	ldr	r2, [pc, #224]	; (8001dc0 <HAL_UART_MspInit+0x120>)
 8001cde:	f043 0304 	orr.w	r3, r3, #4
 8001ce2:	6193      	str	r3, [r2, #24]
 8001ce4:	4b36      	ldr	r3, [pc, #216]	; (8001dc0 <HAL_UART_MspInit+0x120>)
 8001ce6:	699b      	ldr	r3, [r3, #24]
 8001ce8:	f003 0304 	and.w	r3, r3, #4
 8001cec:	613b      	str	r3, [r7, #16]
 8001cee:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ESP_UART_TX_Pin;
 8001cf0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001cf4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cf6:	2302      	movs	r3, #2
 8001cf8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001cfa:	2303      	movs	r3, #3
 8001cfc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ESP_UART_TX_GPIO_Port, &GPIO_InitStruct);
 8001cfe:	f107 0318 	add.w	r3, r7, #24
 8001d02:	4619      	mov	r1, r3
 8001d04:	482f      	ldr	r0, [pc, #188]	; (8001dc4 <HAL_UART_MspInit+0x124>)
 8001d06:	f001 fa85 	bl	8003214 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ESP_UART_RX_Pin;
 8001d0a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001d0e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d10:	2300      	movs	r3, #0
 8001d12:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d14:	2300      	movs	r3, #0
 8001d16:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(ESP_UART_RX_GPIO_Port, &GPIO_InitStruct);
 8001d18:	f107 0318 	add.w	r3, r7, #24
 8001d1c:	4619      	mov	r1, r3
 8001d1e:	4829      	ldr	r0, [pc, #164]	; (8001dc4 <HAL_UART_MspInit+0x124>)
 8001d20:	f001 fa78 	bl	8003214 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001d24:	2200      	movs	r2, #0
 8001d26:	2100      	movs	r1, #0
 8001d28:	2025      	movs	r0, #37	; 0x25
 8001d2a:	f000 ff9e 	bl	8002c6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001d2e:	2025      	movs	r0, #37	; 0x25
 8001d30:	f000 ffb7 	bl	8002ca2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001d34:	e03e      	b.n	8001db4 <HAL_UART_MspInit+0x114>
  else if(huart->Instance==USART3)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	4a23      	ldr	r2, [pc, #140]	; (8001dc8 <HAL_UART_MspInit+0x128>)
 8001d3c:	4293      	cmp	r3, r2
 8001d3e:	d139      	bne.n	8001db4 <HAL_UART_MspInit+0x114>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001d40:	4b1f      	ldr	r3, [pc, #124]	; (8001dc0 <HAL_UART_MspInit+0x120>)
 8001d42:	69db      	ldr	r3, [r3, #28]
 8001d44:	4a1e      	ldr	r2, [pc, #120]	; (8001dc0 <HAL_UART_MspInit+0x120>)
 8001d46:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d4a:	61d3      	str	r3, [r2, #28]
 8001d4c:	4b1c      	ldr	r3, [pc, #112]	; (8001dc0 <HAL_UART_MspInit+0x120>)
 8001d4e:	69db      	ldr	r3, [r3, #28]
 8001d50:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001d54:	60fb      	str	r3, [r7, #12]
 8001d56:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d58:	4b19      	ldr	r3, [pc, #100]	; (8001dc0 <HAL_UART_MspInit+0x120>)
 8001d5a:	699b      	ldr	r3, [r3, #24]
 8001d5c:	4a18      	ldr	r2, [pc, #96]	; (8001dc0 <HAL_UART_MspInit+0x120>)
 8001d5e:	f043 0308 	orr.w	r3, r3, #8
 8001d62:	6193      	str	r3, [r2, #24]
 8001d64:	4b16      	ldr	r3, [pc, #88]	; (8001dc0 <HAL_UART_MspInit+0x120>)
 8001d66:	699b      	ldr	r3, [r3, #24]
 8001d68:	f003 0308 	and.w	r3, r3, #8
 8001d6c:	60bb      	str	r3, [r7, #8]
 8001d6e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = EXT_TX_Pin;
 8001d70:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001d74:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d76:	2302      	movs	r3, #2
 8001d78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d7a:	2303      	movs	r3, #3
 8001d7c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(EXT_TX_GPIO_Port, &GPIO_InitStruct);
 8001d7e:	f107 0318 	add.w	r3, r7, #24
 8001d82:	4619      	mov	r1, r3
 8001d84:	4811      	ldr	r0, [pc, #68]	; (8001dcc <HAL_UART_MspInit+0x12c>)
 8001d86:	f001 fa45 	bl	8003214 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = EXT_RX_Pin;
 8001d8a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001d8e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d90:	2300      	movs	r3, #0
 8001d92:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d94:	2300      	movs	r3, #0
 8001d96:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(EXT_RX_GPIO_Port, &GPIO_InitStruct);
 8001d98:	f107 0318 	add.w	r3, r7, #24
 8001d9c:	4619      	mov	r1, r3
 8001d9e:	480b      	ldr	r0, [pc, #44]	; (8001dcc <HAL_UART_MspInit+0x12c>)
 8001da0:	f001 fa38 	bl	8003214 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001da4:	2200      	movs	r2, #0
 8001da6:	2100      	movs	r1, #0
 8001da8:	2027      	movs	r0, #39	; 0x27
 8001daa:	f000 ff5e 	bl	8002c6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001dae:	2027      	movs	r0, #39	; 0x27
 8001db0:	f000 ff77 	bl	8002ca2 <HAL_NVIC_EnableIRQ>
}
 8001db4:	bf00      	nop
 8001db6:	3728      	adds	r7, #40	; 0x28
 8001db8:	46bd      	mov	sp, r7
 8001dba:	bd80      	pop	{r7, pc}
 8001dbc:	40013800 	.word	0x40013800
 8001dc0:	40021000 	.word	0x40021000
 8001dc4:	40010800 	.word	0x40010800
 8001dc8:	40004800 	.word	0x40004800
 8001dcc:	40010c00 	.word	0x40010c00

08001dd0 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	b085      	sub	sp, #20
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
  if(hpcd->Instance==USB)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	4a09      	ldr	r2, [pc, #36]	; (8001e04 <HAL_PCD_MspInit+0x34>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d10b      	bne.n	8001dfa <HAL_PCD_MspInit+0x2a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8001de2:	4b09      	ldr	r3, [pc, #36]	; (8001e08 <HAL_PCD_MspInit+0x38>)
 8001de4:	69db      	ldr	r3, [r3, #28]
 8001de6:	4a08      	ldr	r2, [pc, #32]	; (8001e08 <HAL_PCD_MspInit+0x38>)
 8001de8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001dec:	61d3      	str	r3, [r2, #28]
 8001dee:	4b06      	ldr	r3, [pc, #24]	; (8001e08 <HAL_PCD_MspInit+0x38>)
 8001df0:	69db      	ldr	r3, [r3, #28]
 8001df2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001df6:	60fb      	str	r3, [r7, #12]
 8001df8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8001dfa:	bf00      	nop
 8001dfc:	3714      	adds	r7, #20
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bc80      	pop	{r7}
 8001e02:	4770      	bx	lr
 8001e04:	40005c00 	.word	0x40005c00
 8001e08:	40021000 	.word	0x40021000

08001e0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001e10:	e7fe      	b.n	8001e10 <NMI_Handler+0x4>

08001e12 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e12:	b480      	push	{r7}
 8001e14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e16:	e7fe      	b.n	8001e16 <HardFault_Handler+0x4>

08001e18 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e1c:	e7fe      	b.n	8001e1c <MemManage_Handler+0x4>

08001e1e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e1e:	b480      	push	{r7}
 8001e20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e22:	e7fe      	b.n	8001e22 <BusFault_Handler+0x4>

08001e24 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e24:	b480      	push	{r7}
 8001e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e28:	e7fe      	b.n	8001e28 <UsageFault_Handler+0x4>

08001e2a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e2a:	b480      	push	{r7}
 8001e2c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e2e:	bf00      	nop
 8001e30:	46bd      	mov	sp, r7
 8001e32:	bc80      	pop	{r7}
 8001e34:	4770      	bx	lr

08001e36 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e36:	b480      	push	{r7}
 8001e38:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e3a:	bf00      	nop
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	bc80      	pop	{r7}
 8001e40:	4770      	bx	lr

08001e42 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e42:	b480      	push	{r7}
 8001e44:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e46:	bf00      	nop
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	bc80      	pop	{r7}
 8001e4c:	4770      	bx	lr

08001e4e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e4e:	b580      	push	{r7, lr}
 8001e50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e52:	f000 f937 	bl	80020c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e56:	bf00      	nop
 8001e58:	bd80      	pop	{r7, pc}
	...

08001e5c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001e60:	4802      	ldr	r0, [pc, #8]	; (8001e6c <DMA1_Channel1_IRQHandler+0x10>)
 8001e62:	f001 f8a3 	bl	8002fac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001e66:	bf00      	nop
 8001e68:	bd80      	pop	{r7, pc}
 8001e6a:	bf00      	nop
 8001e6c:	20000630 	.word	0x20000630

08001e70 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001e74:	4802      	ldr	r0, [pc, #8]	; (8001e80 <USART1_IRQHandler+0x10>)
 8001e76:	f003 fcef 	bl	8005858 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001e7a:	bf00      	nop
 8001e7c:	bd80      	pop	{r7, pc}
 8001e7e:	bf00      	nop
 8001e80:	200007a8 	.word	0x200007a8

08001e84 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001e88:	4802      	ldr	r0, [pc, #8]	; (8001e94 <USART3_IRQHandler+0x10>)
 8001e8a:	f003 fce5 	bl	8005858 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001e8e:	bf00      	nop
 8001e90:	bd80      	pop	{r7, pc}
 8001e92:	bf00      	nop
 8001e94:	200007ec 	.word	0x200007ec

08001e98 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	af00      	add	r7, sp, #0
	return 1;
 8001e9c:	2301      	movs	r3, #1
}
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bc80      	pop	{r7}
 8001ea4:	4770      	bx	lr

08001ea6 <_kill>:

int _kill(int pid, int sig)
{
 8001ea6:	b580      	push	{r7, lr}
 8001ea8:	b082      	sub	sp, #8
 8001eaa:	af00      	add	r7, sp, #0
 8001eac:	6078      	str	r0, [r7, #4]
 8001eae:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001eb0:	f004 f908 	bl	80060c4 <__errno>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	2216      	movs	r2, #22
 8001eb8:	601a      	str	r2, [r3, #0]
	return -1;
 8001eba:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	3708      	adds	r7, #8
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd80      	pop	{r7, pc}

08001ec6 <_exit>:

void _exit (int status)
{
 8001ec6:	b580      	push	{r7, lr}
 8001ec8:	b082      	sub	sp, #8
 8001eca:	af00      	add	r7, sp, #0
 8001ecc:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001ece:	f04f 31ff 	mov.w	r1, #4294967295
 8001ed2:	6878      	ldr	r0, [r7, #4]
 8001ed4:	f7ff ffe7 	bl	8001ea6 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001ed8:	e7fe      	b.n	8001ed8 <_exit+0x12>

08001eda <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001eda:	b580      	push	{r7, lr}
 8001edc:	b086      	sub	sp, #24
 8001ede:	af00      	add	r7, sp, #0
 8001ee0:	60f8      	str	r0, [r7, #12]
 8001ee2:	60b9      	str	r1, [r7, #8]
 8001ee4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	617b      	str	r3, [r7, #20]
 8001eea:	e00a      	b.n	8001f02 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001eec:	f3af 8000 	nop.w
 8001ef0:	4601      	mov	r1, r0
 8001ef2:	68bb      	ldr	r3, [r7, #8]
 8001ef4:	1c5a      	adds	r2, r3, #1
 8001ef6:	60ba      	str	r2, [r7, #8]
 8001ef8:	b2ca      	uxtb	r2, r1
 8001efa:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001efc:	697b      	ldr	r3, [r7, #20]
 8001efe:	3301      	adds	r3, #1
 8001f00:	617b      	str	r3, [r7, #20]
 8001f02:	697a      	ldr	r2, [r7, #20]
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	429a      	cmp	r2, r3
 8001f08:	dbf0      	blt.n	8001eec <_read+0x12>
	}

return len;
 8001f0a:	687b      	ldr	r3, [r7, #4]
}
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	3718      	adds	r7, #24
 8001f10:	46bd      	mov	sp, r7
 8001f12:	bd80      	pop	{r7, pc}

08001f14 <_close>:
	}
	return len;
}

int _close(int file)
{
 8001f14:	b480      	push	{r7}
 8001f16:	b083      	sub	sp, #12
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
	return -1;
 8001f1c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f20:	4618      	mov	r0, r3
 8001f22:	370c      	adds	r7, #12
 8001f24:	46bd      	mov	sp, r7
 8001f26:	bc80      	pop	{r7}
 8001f28:	4770      	bx	lr

08001f2a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001f2a:	b480      	push	{r7}
 8001f2c:	b083      	sub	sp, #12
 8001f2e:	af00      	add	r7, sp, #0
 8001f30:	6078      	str	r0, [r7, #4]
 8001f32:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001f3a:	605a      	str	r2, [r3, #4]
	return 0;
 8001f3c:	2300      	movs	r3, #0
}
 8001f3e:	4618      	mov	r0, r3
 8001f40:	370c      	adds	r7, #12
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bc80      	pop	{r7}
 8001f46:	4770      	bx	lr

08001f48 <_isatty>:

int _isatty(int file)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	b083      	sub	sp, #12
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
	return 1;
 8001f50:	2301      	movs	r3, #1
}
 8001f52:	4618      	mov	r0, r3
 8001f54:	370c      	adds	r7, #12
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bc80      	pop	{r7}
 8001f5a:	4770      	bx	lr

08001f5c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	b085      	sub	sp, #20
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	60f8      	str	r0, [r7, #12]
 8001f64:	60b9      	str	r1, [r7, #8]
 8001f66:	607a      	str	r2, [r7, #4]
	return 0;
 8001f68:	2300      	movs	r3, #0
}
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	3714      	adds	r7, #20
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bc80      	pop	{r7}
 8001f72:	4770      	bx	lr

08001f74 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b086      	sub	sp, #24
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f7c:	4a14      	ldr	r2, [pc, #80]	; (8001fd0 <_sbrk+0x5c>)
 8001f7e:	4b15      	ldr	r3, [pc, #84]	; (8001fd4 <_sbrk+0x60>)
 8001f80:	1ad3      	subs	r3, r2, r3
 8001f82:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f84:	697b      	ldr	r3, [r7, #20]
 8001f86:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f88:	4b13      	ldr	r3, [pc, #76]	; (8001fd8 <_sbrk+0x64>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d102      	bne.n	8001f96 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f90:	4b11      	ldr	r3, [pc, #68]	; (8001fd8 <_sbrk+0x64>)
 8001f92:	4a12      	ldr	r2, [pc, #72]	; (8001fdc <_sbrk+0x68>)
 8001f94:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f96:	4b10      	ldr	r3, [pc, #64]	; (8001fd8 <_sbrk+0x64>)
 8001f98:	681a      	ldr	r2, [r3, #0]
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	4413      	add	r3, r2
 8001f9e:	693a      	ldr	r2, [r7, #16]
 8001fa0:	429a      	cmp	r2, r3
 8001fa2:	d207      	bcs.n	8001fb4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001fa4:	f004 f88e 	bl	80060c4 <__errno>
 8001fa8:	4603      	mov	r3, r0
 8001faa:	220c      	movs	r2, #12
 8001fac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001fae:	f04f 33ff 	mov.w	r3, #4294967295
 8001fb2:	e009      	b.n	8001fc8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001fb4:	4b08      	ldr	r3, [pc, #32]	; (8001fd8 <_sbrk+0x64>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001fba:	4b07      	ldr	r3, [pc, #28]	; (8001fd8 <_sbrk+0x64>)
 8001fbc:	681a      	ldr	r2, [r3, #0]
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	4413      	add	r3, r2
 8001fc2:	4a05      	ldr	r2, [pc, #20]	; (8001fd8 <_sbrk+0x64>)
 8001fc4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001fc6:	68fb      	ldr	r3, [r7, #12]
}
 8001fc8:	4618      	mov	r0, r3
 8001fca:	3718      	adds	r7, #24
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	bd80      	pop	{r7, pc}
 8001fd0:	20005000 	.word	0x20005000
 8001fd4:	00000400 	.word	0x00000400
 8001fd8:	20001340 	.word	0x20001340
 8001fdc:	20001358 	.word	0x20001358

08001fe0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001fe4:	bf00      	nop
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bc80      	pop	{r7}
 8001fea:	4770      	bx	lr

08001fec <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001fec:	480c      	ldr	r0, [pc, #48]	; (8002020 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001fee:	490d      	ldr	r1, [pc, #52]	; (8002024 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001ff0:	4a0d      	ldr	r2, [pc, #52]	; (8002028 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001ff2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ff4:	e002      	b.n	8001ffc <LoopCopyDataInit>

08001ff6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ff6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ff8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ffa:	3304      	adds	r3, #4

08001ffc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ffc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ffe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002000:	d3f9      	bcc.n	8001ff6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002002:	4a0a      	ldr	r2, [pc, #40]	; (800202c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002004:	4c0a      	ldr	r4, [pc, #40]	; (8002030 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002006:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002008:	e001      	b.n	800200e <LoopFillZerobss>

0800200a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800200a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800200c:	3204      	adds	r2, #4

0800200e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800200e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002010:	d3fb      	bcc.n	800200a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002012:	f7ff ffe5 	bl	8001fe0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002016:	f004 f85b 	bl	80060d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800201a:	f7fe ffd7 	bl	8000fcc <main>
  bx lr
 800201e:	4770      	bx	lr
  ldr r0, =_sdata
 8002020:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002024:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8002028:	08009854 	.word	0x08009854
  ldr r2, =_sbss
 800202c:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8002030:	20001358 	.word	0x20001358

08002034 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002034:	e7fe      	b.n	8002034 <ADC1_2_IRQHandler>
	...

08002038 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800203c:	4b08      	ldr	r3, [pc, #32]	; (8002060 <HAL_Init+0x28>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	4a07      	ldr	r2, [pc, #28]	; (8002060 <HAL_Init+0x28>)
 8002042:	f043 0310 	orr.w	r3, r3, #16
 8002046:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002048:	2003      	movs	r0, #3
 800204a:	f000 fe03 	bl	8002c54 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800204e:	200f      	movs	r0, #15
 8002050:	f000 f808 	bl	8002064 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002054:	f7ff fc22 	bl	800189c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002058:	2300      	movs	r3, #0
}
 800205a:	4618      	mov	r0, r3
 800205c:	bd80      	pop	{r7, pc}
 800205e:	bf00      	nop
 8002060:	40022000 	.word	0x40022000

08002064 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b082      	sub	sp, #8
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800206c:	4b12      	ldr	r3, [pc, #72]	; (80020b8 <HAL_InitTick+0x54>)
 800206e:	681a      	ldr	r2, [r3, #0]
 8002070:	4b12      	ldr	r3, [pc, #72]	; (80020bc <HAL_InitTick+0x58>)
 8002072:	781b      	ldrb	r3, [r3, #0]
 8002074:	4619      	mov	r1, r3
 8002076:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800207a:	fbb3 f3f1 	udiv	r3, r3, r1
 800207e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002082:	4618      	mov	r0, r3
 8002084:	f000 fe1b 	bl	8002cbe <HAL_SYSTICK_Config>
 8002088:	4603      	mov	r3, r0
 800208a:	2b00      	cmp	r3, #0
 800208c:	d001      	beq.n	8002092 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800208e:	2301      	movs	r3, #1
 8002090:	e00e      	b.n	80020b0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	2b0f      	cmp	r3, #15
 8002096:	d80a      	bhi.n	80020ae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002098:	2200      	movs	r2, #0
 800209a:	6879      	ldr	r1, [r7, #4]
 800209c:	f04f 30ff 	mov.w	r0, #4294967295
 80020a0:	f000 fde3 	bl	8002c6a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80020a4:	4a06      	ldr	r2, [pc, #24]	; (80020c0 <HAL_InitTick+0x5c>)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80020aa:	2300      	movs	r3, #0
 80020ac:	e000      	b.n	80020b0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80020ae:	2301      	movs	r3, #1
}
 80020b0:	4618      	mov	r0, r3
 80020b2:	3708      	adds	r7, #8
 80020b4:	46bd      	mov	sp, r7
 80020b6:	bd80      	pop	{r7, pc}
 80020b8:	20000008 	.word	0x20000008
 80020bc:	20000010 	.word	0x20000010
 80020c0:	2000000c 	.word	0x2000000c

080020c4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80020c4:	b480      	push	{r7}
 80020c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80020c8:	4b05      	ldr	r3, [pc, #20]	; (80020e0 <HAL_IncTick+0x1c>)
 80020ca:	781b      	ldrb	r3, [r3, #0]
 80020cc:	461a      	mov	r2, r3
 80020ce:	4b05      	ldr	r3, [pc, #20]	; (80020e4 <HAL_IncTick+0x20>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	4413      	add	r3, r2
 80020d4:	4a03      	ldr	r2, [pc, #12]	; (80020e4 <HAL_IncTick+0x20>)
 80020d6:	6013      	str	r3, [r2, #0]
}
 80020d8:	bf00      	nop
 80020da:	46bd      	mov	sp, r7
 80020dc:	bc80      	pop	{r7}
 80020de:	4770      	bx	lr
 80020e0:	20000010 	.word	0x20000010
 80020e4:	20001344 	.word	0x20001344

080020e8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80020e8:	b480      	push	{r7}
 80020ea:	af00      	add	r7, sp, #0
  return uwTick;
 80020ec:	4b02      	ldr	r3, [pc, #8]	; (80020f8 <HAL_GetTick+0x10>)
 80020ee:	681b      	ldr	r3, [r3, #0]
}
 80020f0:	4618      	mov	r0, r3
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bc80      	pop	{r7}
 80020f6:	4770      	bx	lr
 80020f8:	20001344 	.word	0x20001344

080020fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b084      	sub	sp, #16
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002104:	f7ff fff0 	bl	80020e8 <HAL_GetTick>
 8002108:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002114:	d005      	beq.n	8002122 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002116:	4b0a      	ldr	r3, [pc, #40]	; (8002140 <HAL_Delay+0x44>)
 8002118:	781b      	ldrb	r3, [r3, #0]
 800211a:	461a      	mov	r2, r3
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	4413      	add	r3, r2
 8002120:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002122:	bf00      	nop
 8002124:	f7ff ffe0 	bl	80020e8 <HAL_GetTick>
 8002128:	4602      	mov	r2, r0
 800212a:	68bb      	ldr	r3, [r7, #8]
 800212c:	1ad3      	subs	r3, r2, r3
 800212e:	68fa      	ldr	r2, [r7, #12]
 8002130:	429a      	cmp	r2, r3
 8002132:	d8f7      	bhi.n	8002124 <HAL_Delay+0x28>
  {
  }
}
 8002134:	bf00      	nop
 8002136:	bf00      	nop
 8002138:	3710      	adds	r7, #16
 800213a:	46bd      	mov	sp, r7
 800213c:	bd80      	pop	{r7, pc}
 800213e:	bf00      	nop
 8002140:	20000010 	.word	0x20000010

08002144 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b086      	sub	sp, #24
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800214c:	2300      	movs	r3, #0
 800214e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002150:	2300      	movs	r3, #0
 8002152:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002154:	2300      	movs	r3, #0
 8002156:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002158:	2300      	movs	r3, #0
 800215a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	2b00      	cmp	r3, #0
 8002160:	d101      	bne.n	8002166 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002162:	2301      	movs	r3, #1
 8002164:	e0be      	b.n	80022e4 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	689b      	ldr	r3, [r3, #8]
 800216a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002170:	2b00      	cmp	r3, #0
 8002172:	d109      	bne.n	8002188 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	2200      	movs	r2, #0
 8002178:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	2200      	movs	r2, #0
 800217e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002182:	6878      	ldr	r0, [r7, #4]
 8002184:	f7ff fbbc 	bl	8001900 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002188:	6878      	ldr	r0, [r7, #4]
 800218a:	f000 faf5 	bl	8002778 <ADC_ConversionStop_Disable>
 800218e:	4603      	mov	r3, r0
 8002190:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002196:	f003 0310 	and.w	r3, r3, #16
 800219a:	2b00      	cmp	r3, #0
 800219c:	f040 8099 	bne.w	80022d2 <HAL_ADC_Init+0x18e>
 80021a0:	7dfb      	ldrb	r3, [r7, #23]
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	f040 8095 	bne.w	80022d2 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021ac:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80021b0:	f023 0302 	bic.w	r3, r3, #2
 80021b4:	f043 0202 	orr.w	r2, r3, #2
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80021c4:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	7b1b      	ldrb	r3, [r3, #12]
 80021ca:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80021cc:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80021ce:	68ba      	ldr	r2, [r7, #8]
 80021d0:	4313      	orrs	r3, r2
 80021d2:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	689b      	ldr	r3, [r3, #8]
 80021d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80021dc:	d003      	beq.n	80021e6 <HAL_ADC_Init+0xa2>
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	689b      	ldr	r3, [r3, #8]
 80021e2:	2b01      	cmp	r3, #1
 80021e4:	d102      	bne.n	80021ec <HAL_ADC_Init+0xa8>
 80021e6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80021ea:	e000      	b.n	80021ee <HAL_ADC_Init+0xaa>
 80021ec:	2300      	movs	r3, #0
 80021ee:	693a      	ldr	r2, [r7, #16]
 80021f0:	4313      	orrs	r3, r2
 80021f2:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	7d1b      	ldrb	r3, [r3, #20]
 80021f8:	2b01      	cmp	r3, #1
 80021fa:	d119      	bne.n	8002230 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	7b1b      	ldrb	r3, [r3, #12]
 8002200:	2b00      	cmp	r3, #0
 8002202:	d109      	bne.n	8002218 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	699b      	ldr	r3, [r3, #24]
 8002208:	3b01      	subs	r3, #1
 800220a:	035a      	lsls	r2, r3, #13
 800220c:	693b      	ldr	r3, [r7, #16]
 800220e:	4313      	orrs	r3, r2
 8002210:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002214:	613b      	str	r3, [r7, #16]
 8002216:	e00b      	b.n	8002230 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800221c:	f043 0220 	orr.w	r2, r3, #32
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002228:	f043 0201 	orr.w	r2, r3, #1
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	685b      	ldr	r3, [r3, #4]
 8002236:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	693a      	ldr	r2, [r7, #16]
 8002240:	430a      	orrs	r2, r1
 8002242:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	689a      	ldr	r2, [r3, #8]
 800224a:	4b28      	ldr	r3, [pc, #160]	; (80022ec <HAL_ADC_Init+0x1a8>)
 800224c:	4013      	ands	r3, r2
 800224e:	687a      	ldr	r2, [r7, #4]
 8002250:	6812      	ldr	r2, [r2, #0]
 8002252:	68b9      	ldr	r1, [r7, #8]
 8002254:	430b      	orrs	r3, r1
 8002256:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	689b      	ldr	r3, [r3, #8]
 800225c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002260:	d003      	beq.n	800226a <HAL_ADC_Init+0x126>
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	689b      	ldr	r3, [r3, #8]
 8002266:	2b01      	cmp	r3, #1
 8002268:	d104      	bne.n	8002274 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	691b      	ldr	r3, [r3, #16]
 800226e:	3b01      	subs	r3, #1
 8002270:	051b      	lsls	r3, r3, #20
 8002272:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800227a:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	68fa      	ldr	r2, [r7, #12]
 8002284:	430a      	orrs	r2, r1
 8002286:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	689a      	ldr	r2, [r3, #8]
 800228e:	4b18      	ldr	r3, [pc, #96]	; (80022f0 <HAL_ADC_Init+0x1ac>)
 8002290:	4013      	ands	r3, r2
 8002292:	68ba      	ldr	r2, [r7, #8]
 8002294:	429a      	cmp	r2, r3
 8002296:	d10b      	bne.n	80022b0 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	2200      	movs	r2, #0
 800229c:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022a2:	f023 0303 	bic.w	r3, r3, #3
 80022a6:	f043 0201 	orr.w	r2, r3, #1
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80022ae:	e018      	b.n	80022e2 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022b4:	f023 0312 	bic.w	r3, r3, #18
 80022b8:	f043 0210 	orr.w	r2, r3, #16
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022c4:	f043 0201 	orr.w	r2, r3, #1
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80022cc:	2301      	movs	r3, #1
 80022ce:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80022d0:	e007      	b.n	80022e2 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022d6:	f043 0210 	orr.w	r2, r3, #16
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80022de:	2301      	movs	r3, #1
 80022e0:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80022e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80022e4:	4618      	mov	r0, r3
 80022e6:	3718      	adds	r7, #24
 80022e8:	46bd      	mov	sp, r7
 80022ea:	bd80      	pop	{r7, pc}
 80022ec:	ffe1f7fd 	.word	0xffe1f7fd
 80022f0:	ff1f0efe 	.word	0xff1f0efe

080022f4 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b086      	sub	sp, #24
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	60f8      	str	r0, [r7, #12]
 80022fc:	60b9      	str	r1, [r7, #8]
 80022fe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002300:	2300      	movs	r3, #0
 8002302:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	4a64      	ldr	r2, [pc, #400]	; (800249c <HAL_ADC_Start_DMA+0x1a8>)
 800230a:	4293      	cmp	r3, r2
 800230c:	d004      	beq.n	8002318 <HAL_ADC_Start_DMA+0x24>
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	4a63      	ldr	r2, [pc, #396]	; (80024a0 <HAL_ADC_Start_DMA+0x1ac>)
 8002314:	4293      	cmp	r3, r2
 8002316:	d106      	bne.n	8002326 <HAL_ADC_Start_DMA+0x32>
 8002318:	4b60      	ldr	r3, [pc, #384]	; (800249c <HAL_ADC_Start_DMA+0x1a8>)
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8002320:	2b00      	cmp	r3, #0
 8002322:	f040 80b3 	bne.w	800248c <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800232c:	2b01      	cmp	r3, #1
 800232e:	d101      	bne.n	8002334 <HAL_ADC_Start_DMA+0x40>
 8002330:	2302      	movs	r3, #2
 8002332:	e0ae      	b.n	8002492 <HAL_ADC_Start_DMA+0x19e>
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	2201      	movs	r2, #1
 8002338:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800233c:	68f8      	ldr	r0, [r7, #12]
 800233e:	f000 f9c1 	bl	80026c4 <ADC_Enable>
 8002342:	4603      	mov	r3, r0
 8002344:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002346:	7dfb      	ldrb	r3, [r7, #23]
 8002348:	2b00      	cmp	r3, #0
 800234a:	f040 809a 	bne.w	8002482 <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002352:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002356:	f023 0301 	bic.w	r3, r3, #1
 800235a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	4a4e      	ldr	r2, [pc, #312]	; (80024a0 <HAL_ADC_Start_DMA+0x1ac>)
 8002368:	4293      	cmp	r3, r2
 800236a:	d105      	bne.n	8002378 <HAL_ADC_Start_DMA+0x84>
 800236c:	4b4b      	ldr	r3, [pc, #300]	; (800249c <HAL_ADC_Start_DMA+0x1a8>)
 800236e:	685b      	ldr	r3, [r3, #4]
 8002370:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8002374:	2b00      	cmp	r3, #0
 8002376:	d115      	bne.n	80023a4 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800237c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	685b      	ldr	r3, [r3, #4]
 800238a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800238e:	2b00      	cmp	r3, #0
 8002390:	d026      	beq.n	80023e0 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002396:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800239a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80023a2:	e01d      	b.n	80023e0 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023a8:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4a39      	ldr	r2, [pc, #228]	; (800249c <HAL_ADC_Start_DMA+0x1a8>)
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d004      	beq.n	80023c4 <HAL_ADC_Start_DMA+0xd0>
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	4a38      	ldr	r2, [pc, #224]	; (80024a0 <HAL_ADC_Start_DMA+0x1ac>)
 80023c0:	4293      	cmp	r3, r2
 80023c2:	d10d      	bne.n	80023e0 <HAL_ADC_Start_DMA+0xec>
 80023c4:	4b35      	ldr	r3, [pc, #212]	; (800249c <HAL_ADC_Start_DMA+0x1a8>)
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d007      	beq.n	80023e0 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023d4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80023d8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023e4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d006      	beq.n	80023fa <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023f0:	f023 0206 	bic.w	r2, r3, #6
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	62da      	str	r2, [r3, #44]	; 0x2c
 80023f8:	e002      	b.n	8002400 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	2200      	movs	r2, #0
 80023fe:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	2200      	movs	r2, #0
 8002404:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	6a1b      	ldr	r3, [r3, #32]
 800240c:	4a25      	ldr	r2, [pc, #148]	; (80024a4 <HAL_ADC_Start_DMA+0x1b0>)
 800240e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	6a1b      	ldr	r3, [r3, #32]
 8002414:	4a24      	ldr	r2, [pc, #144]	; (80024a8 <HAL_ADC_Start_DMA+0x1b4>)
 8002416:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	6a1b      	ldr	r3, [r3, #32]
 800241c:	4a23      	ldr	r2, [pc, #140]	; (80024ac <HAL_ADC_Start_DMA+0x1b8>)
 800241e:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f06f 0202 	mvn.w	r2, #2
 8002428:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	689a      	ldr	r2, [r3, #8]
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002438:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	6a18      	ldr	r0, [r3, #32]
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	334c      	adds	r3, #76	; 0x4c
 8002444:	4619      	mov	r1, r3
 8002446:	68ba      	ldr	r2, [r7, #8]
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	f000 fc9f 	bl	8002d8c <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	689b      	ldr	r3, [r3, #8]
 8002454:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002458:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800245c:	d108      	bne.n	8002470 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	689a      	ldr	r2, [r3, #8]
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 800246c:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 800246e:	e00f      	b.n	8002490 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	689a      	ldr	r2, [r3, #8]
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800247e:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8002480:	e006      	b.n	8002490 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	2200      	movs	r2, #0
 8002486:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 800248a:	e001      	b.n	8002490 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800248c:	2301      	movs	r3, #1
 800248e:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002490:	7dfb      	ldrb	r3, [r7, #23]
}
 8002492:	4618      	mov	r0, r3
 8002494:	3718      	adds	r7, #24
 8002496:	46bd      	mov	sp, r7
 8002498:	bd80      	pop	{r7, pc}
 800249a:	bf00      	nop
 800249c:	40012400 	.word	0x40012400
 80024a0:	40012800 	.word	0x40012800
 80024a4:	080027fb 	.word	0x080027fb
 80024a8:	08002877 	.word	0x08002877
 80024ac:	08002893 	.word	0x08002893

080024b0 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80024b0:	b480      	push	{r7}
 80024b2:	b083      	sub	sp, #12
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80024b8:	bf00      	nop
 80024ba:	370c      	adds	r7, #12
 80024bc:	46bd      	mov	sp, r7
 80024be:	bc80      	pop	{r7}
 80024c0:	4770      	bx	lr

080024c2 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80024c2:	b480      	push	{r7}
 80024c4:	b083      	sub	sp, #12
 80024c6:	af00      	add	r7, sp, #0
 80024c8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80024ca:	bf00      	nop
 80024cc:	370c      	adds	r7, #12
 80024ce:	46bd      	mov	sp, r7
 80024d0:	bc80      	pop	{r7}
 80024d2:	4770      	bx	lr

080024d4 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80024d4:	b480      	push	{r7}
 80024d6:	b085      	sub	sp, #20
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
 80024dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80024de:	2300      	movs	r3, #0
 80024e0:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80024e2:	2300      	movs	r3, #0
 80024e4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80024ec:	2b01      	cmp	r3, #1
 80024ee:	d101      	bne.n	80024f4 <HAL_ADC_ConfigChannel+0x20>
 80024f0:	2302      	movs	r3, #2
 80024f2:	e0dc      	b.n	80026ae <HAL_ADC_ConfigChannel+0x1da>
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2201      	movs	r2, #1
 80024f8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	2b06      	cmp	r3, #6
 8002502:	d81c      	bhi.n	800253e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	685a      	ldr	r2, [r3, #4]
 800250e:	4613      	mov	r3, r2
 8002510:	009b      	lsls	r3, r3, #2
 8002512:	4413      	add	r3, r2
 8002514:	3b05      	subs	r3, #5
 8002516:	221f      	movs	r2, #31
 8002518:	fa02 f303 	lsl.w	r3, r2, r3
 800251c:	43db      	mvns	r3, r3
 800251e:	4019      	ands	r1, r3
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	6818      	ldr	r0, [r3, #0]
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	685a      	ldr	r2, [r3, #4]
 8002528:	4613      	mov	r3, r2
 800252a:	009b      	lsls	r3, r3, #2
 800252c:	4413      	add	r3, r2
 800252e:	3b05      	subs	r3, #5
 8002530:	fa00 f203 	lsl.w	r2, r0, r3
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	430a      	orrs	r2, r1
 800253a:	635a      	str	r2, [r3, #52]	; 0x34
 800253c:	e03c      	b.n	80025b8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	685b      	ldr	r3, [r3, #4]
 8002542:	2b0c      	cmp	r3, #12
 8002544:	d81c      	bhi.n	8002580 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	685a      	ldr	r2, [r3, #4]
 8002550:	4613      	mov	r3, r2
 8002552:	009b      	lsls	r3, r3, #2
 8002554:	4413      	add	r3, r2
 8002556:	3b23      	subs	r3, #35	; 0x23
 8002558:	221f      	movs	r2, #31
 800255a:	fa02 f303 	lsl.w	r3, r2, r3
 800255e:	43db      	mvns	r3, r3
 8002560:	4019      	ands	r1, r3
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	6818      	ldr	r0, [r3, #0]
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	685a      	ldr	r2, [r3, #4]
 800256a:	4613      	mov	r3, r2
 800256c:	009b      	lsls	r3, r3, #2
 800256e:	4413      	add	r3, r2
 8002570:	3b23      	subs	r3, #35	; 0x23
 8002572:	fa00 f203 	lsl.w	r2, r0, r3
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	430a      	orrs	r2, r1
 800257c:	631a      	str	r2, [r3, #48]	; 0x30
 800257e:	e01b      	b.n	80025b8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	685a      	ldr	r2, [r3, #4]
 800258a:	4613      	mov	r3, r2
 800258c:	009b      	lsls	r3, r3, #2
 800258e:	4413      	add	r3, r2
 8002590:	3b41      	subs	r3, #65	; 0x41
 8002592:	221f      	movs	r2, #31
 8002594:	fa02 f303 	lsl.w	r3, r2, r3
 8002598:	43db      	mvns	r3, r3
 800259a:	4019      	ands	r1, r3
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	6818      	ldr	r0, [r3, #0]
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	685a      	ldr	r2, [r3, #4]
 80025a4:	4613      	mov	r3, r2
 80025a6:	009b      	lsls	r3, r3, #2
 80025a8:	4413      	add	r3, r2
 80025aa:	3b41      	subs	r3, #65	; 0x41
 80025ac:	fa00 f203 	lsl.w	r2, r0, r3
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	430a      	orrs	r2, r1
 80025b6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	2b09      	cmp	r3, #9
 80025be:	d91c      	bls.n	80025fa <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	68d9      	ldr	r1, [r3, #12]
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	681a      	ldr	r2, [r3, #0]
 80025ca:	4613      	mov	r3, r2
 80025cc:	005b      	lsls	r3, r3, #1
 80025ce:	4413      	add	r3, r2
 80025d0:	3b1e      	subs	r3, #30
 80025d2:	2207      	movs	r2, #7
 80025d4:	fa02 f303 	lsl.w	r3, r2, r3
 80025d8:	43db      	mvns	r3, r3
 80025da:	4019      	ands	r1, r3
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	6898      	ldr	r0, [r3, #8]
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	681a      	ldr	r2, [r3, #0]
 80025e4:	4613      	mov	r3, r2
 80025e6:	005b      	lsls	r3, r3, #1
 80025e8:	4413      	add	r3, r2
 80025ea:	3b1e      	subs	r3, #30
 80025ec:	fa00 f203 	lsl.w	r2, r0, r3
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	430a      	orrs	r2, r1
 80025f6:	60da      	str	r2, [r3, #12]
 80025f8:	e019      	b.n	800262e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	6919      	ldr	r1, [r3, #16]
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	681a      	ldr	r2, [r3, #0]
 8002604:	4613      	mov	r3, r2
 8002606:	005b      	lsls	r3, r3, #1
 8002608:	4413      	add	r3, r2
 800260a:	2207      	movs	r2, #7
 800260c:	fa02 f303 	lsl.w	r3, r2, r3
 8002610:	43db      	mvns	r3, r3
 8002612:	4019      	ands	r1, r3
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	6898      	ldr	r0, [r3, #8]
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	681a      	ldr	r2, [r3, #0]
 800261c:	4613      	mov	r3, r2
 800261e:	005b      	lsls	r3, r3, #1
 8002620:	4413      	add	r3, r2
 8002622:	fa00 f203 	lsl.w	r2, r0, r3
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	430a      	orrs	r2, r1
 800262c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	2b10      	cmp	r3, #16
 8002634:	d003      	beq.n	800263e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800263a:	2b11      	cmp	r3, #17
 800263c:	d132      	bne.n	80026a4 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	4a1d      	ldr	r2, [pc, #116]	; (80026b8 <HAL_ADC_ConfigChannel+0x1e4>)
 8002644:	4293      	cmp	r3, r2
 8002646:	d125      	bne.n	8002694 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	689b      	ldr	r3, [r3, #8]
 800264e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002652:	2b00      	cmp	r3, #0
 8002654:	d126      	bne.n	80026a4 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	689a      	ldr	r2, [r3, #8]
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002664:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	2b10      	cmp	r3, #16
 800266c:	d11a      	bne.n	80026a4 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800266e:	4b13      	ldr	r3, [pc, #76]	; (80026bc <HAL_ADC_ConfigChannel+0x1e8>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	4a13      	ldr	r2, [pc, #76]	; (80026c0 <HAL_ADC_ConfigChannel+0x1ec>)
 8002674:	fba2 2303 	umull	r2, r3, r2, r3
 8002678:	0c9a      	lsrs	r2, r3, #18
 800267a:	4613      	mov	r3, r2
 800267c:	009b      	lsls	r3, r3, #2
 800267e:	4413      	add	r3, r2
 8002680:	005b      	lsls	r3, r3, #1
 8002682:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002684:	e002      	b.n	800268c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8002686:	68bb      	ldr	r3, [r7, #8]
 8002688:	3b01      	subs	r3, #1
 800268a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800268c:	68bb      	ldr	r3, [r7, #8]
 800268e:	2b00      	cmp	r3, #0
 8002690:	d1f9      	bne.n	8002686 <HAL_ADC_ConfigChannel+0x1b2>
 8002692:	e007      	b.n	80026a4 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002698:	f043 0220 	orr.w	r2, r3, #32
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80026a0:	2301      	movs	r3, #1
 80026a2:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2200      	movs	r2, #0
 80026a8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80026ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80026ae:	4618      	mov	r0, r3
 80026b0:	3714      	adds	r7, #20
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bc80      	pop	{r7}
 80026b6:	4770      	bx	lr
 80026b8:	40012400 	.word	0x40012400
 80026bc:	20000008 	.word	0x20000008
 80026c0:	431bde83 	.word	0x431bde83

080026c4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b084      	sub	sp, #16
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80026cc:	2300      	movs	r3, #0
 80026ce:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80026d0:	2300      	movs	r3, #0
 80026d2:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	689b      	ldr	r3, [r3, #8]
 80026da:	f003 0301 	and.w	r3, r3, #1
 80026de:	2b01      	cmp	r3, #1
 80026e0:	d040      	beq.n	8002764 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	689a      	ldr	r2, [r3, #8]
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f042 0201 	orr.w	r2, r2, #1
 80026f0:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80026f2:	4b1f      	ldr	r3, [pc, #124]	; (8002770 <ADC_Enable+0xac>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	4a1f      	ldr	r2, [pc, #124]	; (8002774 <ADC_Enable+0xb0>)
 80026f8:	fba2 2303 	umull	r2, r3, r2, r3
 80026fc:	0c9b      	lsrs	r3, r3, #18
 80026fe:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002700:	e002      	b.n	8002708 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8002702:	68bb      	ldr	r3, [r7, #8]
 8002704:	3b01      	subs	r3, #1
 8002706:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002708:	68bb      	ldr	r3, [r7, #8]
 800270a:	2b00      	cmp	r3, #0
 800270c:	d1f9      	bne.n	8002702 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800270e:	f7ff fceb 	bl	80020e8 <HAL_GetTick>
 8002712:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002714:	e01f      	b.n	8002756 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002716:	f7ff fce7 	bl	80020e8 <HAL_GetTick>
 800271a:	4602      	mov	r2, r0
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	1ad3      	subs	r3, r2, r3
 8002720:	2b02      	cmp	r3, #2
 8002722:	d918      	bls.n	8002756 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	689b      	ldr	r3, [r3, #8]
 800272a:	f003 0301 	and.w	r3, r3, #1
 800272e:	2b01      	cmp	r3, #1
 8002730:	d011      	beq.n	8002756 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002736:	f043 0210 	orr.w	r2, r3, #16
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002742:	f043 0201 	orr.w	r2, r3, #1
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	2200      	movs	r2, #0
 800274e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8002752:	2301      	movs	r3, #1
 8002754:	e007      	b.n	8002766 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	689b      	ldr	r3, [r3, #8]
 800275c:	f003 0301 	and.w	r3, r3, #1
 8002760:	2b01      	cmp	r3, #1
 8002762:	d1d8      	bne.n	8002716 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002764:	2300      	movs	r3, #0
}
 8002766:	4618      	mov	r0, r3
 8002768:	3710      	adds	r7, #16
 800276a:	46bd      	mov	sp, r7
 800276c:	bd80      	pop	{r7, pc}
 800276e:	bf00      	nop
 8002770:	20000008 	.word	0x20000008
 8002774:	431bde83 	.word	0x431bde83

08002778 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b084      	sub	sp, #16
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002780:	2300      	movs	r3, #0
 8002782:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	689b      	ldr	r3, [r3, #8]
 800278a:	f003 0301 	and.w	r3, r3, #1
 800278e:	2b01      	cmp	r3, #1
 8002790:	d12e      	bne.n	80027f0 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	689a      	ldr	r2, [r3, #8]
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f022 0201 	bic.w	r2, r2, #1
 80027a0:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80027a2:	f7ff fca1 	bl	80020e8 <HAL_GetTick>
 80027a6:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80027a8:	e01b      	b.n	80027e2 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80027aa:	f7ff fc9d 	bl	80020e8 <HAL_GetTick>
 80027ae:	4602      	mov	r2, r0
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	1ad3      	subs	r3, r2, r3
 80027b4:	2b02      	cmp	r3, #2
 80027b6:	d914      	bls.n	80027e2 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	689b      	ldr	r3, [r3, #8]
 80027be:	f003 0301 	and.w	r3, r3, #1
 80027c2:	2b01      	cmp	r3, #1
 80027c4:	d10d      	bne.n	80027e2 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027ca:	f043 0210 	orr.w	r2, r3, #16
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027d6:	f043 0201 	orr.w	r2, r3, #1
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 80027de:	2301      	movs	r3, #1
 80027e0:	e007      	b.n	80027f2 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	689b      	ldr	r3, [r3, #8]
 80027e8:	f003 0301 	and.w	r3, r3, #1
 80027ec:	2b01      	cmp	r3, #1
 80027ee:	d0dc      	beq.n	80027aa <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80027f0:	2300      	movs	r3, #0
}
 80027f2:	4618      	mov	r0, r3
 80027f4:	3710      	adds	r7, #16
 80027f6:	46bd      	mov	sp, r7
 80027f8:	bd80      	pop	{r7, pc}

080027fa <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80027fa:	b580      	push	{r7, lr}
 80027fc:	b084      	sub	sp, #16
 80027fe:	af00      	add	r7, sp, #0
 8002800:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002806:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800280c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002810:	2b00      	cmp	r3, #0
 8002812:	d127      	bne.n	8002864 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002818:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	689b      	ldr	r3, [r3, #8]
 8002826:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800282a:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800282e:	d115      	bne.n	800285c <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002834:	2b00      	cmp	r3, #0
 8002836:	d111      	bne.n	800285c <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800283c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002848:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800284c:	2b00      	cmp	r3, #0
 800284e:	d105      	bne.n	800285c <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002854:	f043 0201 	orr.w	r2, r3, #1
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800285c:	68f8      	ldr	r0, [r7, #12]
 800285e:	f7ff f80e 	bl	800187e <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8002862:	e004      	b.n	800286e <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	6a1b      	ldr	r3, [r3, #32]
 8002868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800286a:	6878      	ldr	r0, [r7, #4]
 800286c:	4798      	blx	r3
}
 800286e:	bf00      	nop
 8002870:	3710      	adds	r7, #16
 8002872:	46bd      	mov	sp, r7
 8002874:	bd80      	pop	{r7, pc}

08002876 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002876:	b580      	push	{r7, lr}
 8002878:	b084      	sub	sp, #16
 800287a:	af00      	add	r7, sp, #0
 800287c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002882:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002884:	68f8      	ldr	r0, [r7, #12]
 8002886:	f7ff fe13 	bl	80024b0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800288a:	bf00      	nop
 800288c:	3710      	adds	r7, #16
 800288e:	46bd      	mov	sp, r7
 8002890:	bd80      	pop	{r7, pc}

08002892 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002892:	b580      	push	{r7, lr}
 8002894:	b084      	sub	sp, #16
 8002896:	af00      	add	r7, sp, #0
 8002898:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800289e:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028a4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028b0:	f043 0204 	orr.w	r2, r3, #4
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80028b8:	68f8      	ldr	r0, [r7, #12]
 80028ba:	f7ff fe02 	bl	80024c2 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80028be:	bf00      	nop
 80028c0:	3710      	adds	r7, #16
 80028c2:	46bd      	mov	sp, r7
 80028c4:	bd80      	pop	{r7, pc}

080028c6 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80028c6:	b580      	push	{r7, lr}
 80028c8:	b084      	sub	sp, #16
 80028ca:	af00      	add	r7, sp, #0
 80028cc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d101      	bne.n	80028d8 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80028d4:	2301      	movs	r3, #1
 80028d6:	e0ed      	b.n	8002ab4 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	f893 3020 	ldrb.w	r3, [r3, #32]
 80028de:	b2db      	uxtb	r3, r3
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d102      	bne.n	80028ea <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80028e4:	6878      	ldr	r0, [r7, #4]
 80028e6:	f7ff f88b 	bl	8001a00 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	681a      	ldr	r2, [r3, #0]
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f042 0201 	orr.w	r2, r2, #1
 80028f8:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80028fa:	f7ff fbf5 	bl	80020e8 <HAL_GetTick>
 80028fe:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002900:	e012      	b.n	8002928 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002902:	f7ff fbf1 	bl	80020e8 <HAL_GetTick>
 8002906:	4602      	mov	r2, r0
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	1ad3      	subs	r3, r2, r3
 800290c:	2b0a      	cmp	r3, #10
 800290e:	d90b      	bls.n	8002928 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002914:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2205      	movs	r2, #5
 8002920:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002924:	2301      	movs	r3, #1
 8002926:	e0c5      	b.n	8002ab4 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	685b      	ldr	r3, [r3, #4]
 800292e:	f003 0301 	and.w	r3, r3, #1
 8002932:	2b00      	cmp	r3, #0
 8002934:	d0e5      	beq.n	8002902 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	681a      	ldr	r2, [r3, #0]
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f022 0202 	bic.w	r2, r2, #2
 8002944:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002946:	f7ff fbcf 	bl	80020e8 <HAL_GetTick>
 800294a:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800294c:	e012      	b.n	8002974 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800294e:	f7ff fbcb 	bl	80020e8 <HAL_GetTick>
 8002952:	4602      	mov	r2, r0
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	1ad3      	subs	r3, r2, r3
 8002958:	2b0a      	cmp	r3, #10
 800295a:	d90b      	bls.n	8002974 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002960:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2205      	movs	r2, #5
 800296c:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002970:	2301      	movs	r3, #1
 8002972:	e09f      	b.n	8002ab4 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	685b      	ldr	r3, [r3, #4]
 800297a:	f003 0302 	and.w	r3, r3, #2
 800297e:	2b00      	cmp	r3, #0
 8002980:	d1e5      	bne.n	800294e <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	7e1b      	ldrb	r3, [r3, #24]
 8002986:	2b01      	cmp	r3, #1
 8002988:	d108      	bne.n	800299c <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	681a      	ldr	r2, [r3, #0]
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002998:	601a      	str	r2, [r3, #0]
 800299a:	e007      	b.n	80029ac <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	681a      	ldr	r2, [r3, #0]
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80029aa:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	7e5b      	ldrb	r3, [r3, #25]
 80029b0:	2b01      	cmp	r3, #1
 80029b2:	d108      	bne.n	80029c6 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	681a      	ldr	r2, [r3, #0]
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80029c2:	601a      	str	r2, [r3, #0]
 80029c4:	e007      	b.n	80029d6 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	681a      	ldr	r2, [r3, #0]
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80029d4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	7e9b      	ldrb	r3, [r3, #26]
 80029da:	2b01      	cmp	r3, #1
 80029dc:	d108      	bne.n	80029f0 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	681a      	ldr	r2, [r3, #0]
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f042 0220 	orr.w	r2, r2, #32
 80029ec:	601a      	str	r2, [r3, #0]
 80029ee:	e007      	b.n	8002a00 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	681a      	ldr	r2, [r3, #0]
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f022 0220 	bic.w	r2, r2, #32
 80029fe:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	7edb      	ldrb	r3, [r3, #27]
 8002a04:	2b01      	cmp	r3, #1
 8002a06:	d108      	bne.n	8002a1a <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	681a      	ldr	r2, [r3, #0]
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f022 0210 	bic.w	r2, r2, #16
 8002a16:	601a      	str	r2, [r3, #0]
 8002a18:	e007      	b.n	8002a2a <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	681a      	ldr	r2, [r3, #0]
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f042 0210 	orr.w	r2, r2, #16
 8002a28:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	7f1b      	ldrb	r3, [r3, #28]
 8002a2e:	2b01      	cmp	r3, #1
 8002a30:	d108      	bne.n	8002a44 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	681a      	ldr	r2, [r3, #0]
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f042 0208 	orr.w	r2, r2, #8
 8002a40:	601a      	str	r2, [r3, #0]
 8002a42:	e007      	b.n	8002a54 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	681a      	ldr	r2, [r3, #0]
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f022 0208 	bic.w	r2, r2, #8
 8002a52:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	7f5b      	ldrb	r3, [r3, #29]
 8002a58:	2b01      	cmp	r3, #1
 8002a5a:	d108      	bne.n	8002a6e <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	681a      	ldr	r2, [r3, #0]
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f042 0204 	orr.w	r2, r2, #4
 8002a6a:	601a      	str	r2, [r3, #0]
 8002a6c:	e007      	b.n	8002a7e <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	681a      	ldr	r2, [r3, #0]
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f022 0204 	bic.w	r2, r2, #4
 8002a7c:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	689a      	ldr	r2, [r3, #8]
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	68db      	ldr	r3, [r3, #12]
 8002a86:	431a      	orrs	r2, r3
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	691b      	ldr	r3, [r3, #16]
 8002a8c:	431a      	orrs	r2, r3
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	695b      	ldr	r3, [r3, #20]
 8002a92:	ea42 0103 	orr.w	r1, r2, r3
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	685b      	ldr	r3, [r3, #4]
 8002a9a:	1e5a      	subs	r2, r3, #1
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	430a      	orrs	r2, r1
 8002aa2:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	2201      	movs	r2, #1
 8002aae:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002ab2:	2300      	movs	r3, #0
}
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	3710      	adds	r7, #16
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	bd80      	pop	{r7, pc}

08002abc <__NVIC_SetPriorityGrouping>:
{
 8002abc:	b480      	push	{r7}
 8002abe:	b085      	sub	sp, #20
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	f003 0307 	and.w	r3, r3, #7
 8002aca:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002acc:	4b0c      	ldr	r3, [pc, #48]	; (8002b00 <__NVIC_SetPriorityGrouping+0x44>)
 8002ace:	68db      	ldr	r3, [r3, #12]
 8002ad0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002ad2:	68ba      	ldr	r2, [r7, #8]
 8002ad4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002ad8:	4013      	ands	r3, r2
 8002ada:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ae0:	68bb      	ldr	r3, [r7, #8]
 8002ae2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002ae4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002ae8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002aec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002aee:	4a04      	ldr	r2, [pc, #16]	; (8002b00 <__NVIC_SetPriorityGrouping+0x44>)
 8002af0:	68bb      	ldr	r3, [r7, #8]
 8002af2:	60d3      	str	r3, [r2, #12]
}
 8002af4:	bf00      	nop
 8002af6:	3714      	adds	r7, #20
 8002af8:	46bd      	mov	sp, r7
 8002afa:	bc80      	pop	{r7}
 8002afc:	4770      	bx	lr
 8002afe:	bf00      	nop
 8002b00:	e000ed00 	.word	0xe000ed00

08002b04 <__NVIC_GetPriorityGrouping>:
{
 8002b04:	b480      	push	{r7}
 8002b06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b08:	4b04      	ldr	r3, [pc, #16]	; (8002b1c <__NVIC_GetPriorityGrouping+0x18>)
 8002b0a:	68db      	ldr	r3, [r3, #12]
 8002b0c:	0a1b      	lsrs	r3, r3, #8
 8002b0e:	f003 0307 	and.w	r3, r3, #7
}
 8002b12:	4618      	mov	r0, r3
 8002b14:	46bd      	mov	sp, r7
 8002b16:	bc80      	pop	{r7}
 8002b18:	4770      	bx	lr
 8002b1a:	bf00      	nop
 8002b1c:	e000ed00 	.word	0xe000ed00

08002b20 <__NVIC_EnableIRQ>:
{
 8002b20:	b480      	push	{r7}
 8002b22:	b083      	sub	sp, #12
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	4603      	mov	r3, r0
 8002b28:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	db0b      	blt.n	8002b4a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b32:	79fb      	ldrb	r3, [r7, #7]
 8002b34:	f003 021f 	and.w	r2, r3, #31
 8002b38:	4906      	ldr	r1, [pc, #24]	; (8002b54 <__NVIC_EnableIRQ+0x34>)
 8002b3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b3e:	095b      	lsrs	r3, r3, #5
 8002b40:	2001      	movs	r0, #1
 8002b42:	fa00 f202 	lsl.w	r2, r0, r2
 8002b46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002b4a:	bf00      	nop
 8002b4c:	370c      	adds	r7, #12
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bc80      	pop	{r7}
 8002b52:	4770      	bx	lr
 8002b54:	e000e100 	.word	0xe000e100

08002b58 <__NVIC_SetPriority>:
{
 8002b58:	b480      	push	{r7}
 8002b5a:	b083      	sub	sp, #12
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	4603      	mov	r3, r0
 8002b60:	6039      	str	r1, [r7, #0]
 8002b62:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	db0a      	blt.n	8002b82 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	b2da      	uxtb	r2, r3
 8002b70:	490c      	ldr	r1, [pc, #48]	; (8002ba4 <__NVIC_SetPriority+0x4c>)
 8002b72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b76:	0112      	lsls	r2, r2, #4
 8002b78:	b2d2      	uxtb	r2, r2
 8002b7a:	440b      	add	r3, r1
 8002b7c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002b80:	e00a      	b.n	8002b98 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	b2da      	uxtb	r2, r3
 8002b86:	4908      	ldr	r1, [pc, #32]	; (8002ba8 <__NVIC_SetPriority+0x50>)
 8002b88:	79fb      	ldrb	r3, [r7, #7]
 8002b8a:	f003 030f 	and.w	r3, r3, #15
 8002b8e:	3b04      	subs	r3, #4
 8002b90:	0112      	lsls	r2, r2, #4
 8002b92:	b2d2      	uxtb	r2, r2
 8002b94:	440b      	add	r3, r1
 8002b96:	761a      	strb	r2, [r3, #24]
}
 8002b98:	bf00      	nop
 8002b9a:	370c      	adds	r7, #12
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	bc80      	pop	{r7}
 8002ba0:	4770      	bx	lr
 8002ba2:	bf00      	nop
 8002ba4:	e000e100 	.word	0xe000e100
 8002ba8:	e000ed00 	.word	0xe000ed00

08002bac <NVIC_EncodePriority>:
{
 8002bac:	b480      	push	{r7}
 8002bae:	b089      	sub	sp, #36	; 0x24
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	60f8      	str	r0, [r7, #12]
 8002bb4:	60b9      	str	r1, [r7, #8]
 8002bb6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	f003 0307 	and.w	r3, r3, #7
 8002bbe:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002bc0:	69fb      	ldr	r3, [r7, #28]
 8002bc2:	f1c3 0307 	rsb	r3, r3, #7
 8002bc6:	2b04      	cmp	r3, #4
 8002bc8:	bf28      	it	cs
 8002bca:	2304      	movcs	r3, #4
 8002bcc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002bce:	69fb      	ldr	r3, [r7, #28]
 8002bd0:	3304      	adds	r3, #4
 8002bd2:	2b06      	cmp	r3, #6
 8002bd4:	d902      	bls.n	8002bdc <NVIC_EncodePriority+0x30>
 8002bd6:	69fb      	ldr	r3, [r7, #28]
 8002bd8:	3b03      	subs	r3, #3
 8002bda:	e000      	b.n	8002bde <NVIC_EncodePriority+0x32>
 8002bdc:	2300      	movs	r3, #0
 8002bde:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002be0:	f04f 32ff 	mov.w	r2, #4294967295
 8002be4:	69bb      	ldr	r3, [r7, #24]
 8002be6:	fa02 f303 	lsl.w	r3, r2, r3
 8002bea:	43da      	mvns	r2, r3
 8002bec:	68bb      	ldr	r3, [r7, #8]
 8002bee:	401a      	ands	r2, r3
 8002bf0:	697b      	ldr	r3, [r7, #20]
 8002bf2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002bf4:	f04f 31ff 	mov.w	r1, #4294967295
 8002bf8:	697b      	ldr	r3, [r7, #20]
 8002bfa:	fa01 f303 	lsl.w	r3, r1, r3
 8002bfe:	43d9      	mvns	r1, r3
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c04:	4313      	orrs	r3, r2
}
 8002c06:	4618      	mov	r0, r3
 8002c08:	3724      	adds	r7, #36	; 0x24
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	bc80      	pop	{r7}
 8002c0e:	4770      	bx	lr

08002c10 <SysTick_Config>:
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b082      	sub	sp, #8
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	3b01      	subs	r3, #1
 8002c1c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002c20:	d301      	bcc.n	8002c26 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8002c22:	2301      	movs	r3, #1
 8002c24:	e00f      	b.n	8002c46 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c26:	4a0a      	ldr	r2, [pc, #40]	; (8002c50 <SysTick_Config+0x40>)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	3b01      	subs	r3, #1
 8002c2c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c2e:	210f      	movs	r1, #15
 8002c30:	f04f 30ff 	mov.w	r0, #4294967295
 8002c34:	f7ff ff90 	bl	8002b58 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c38:	4b05      	ldr	r3, [pc, #20]	; (8002c50 <SysTick_Config+0x40>)
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c3e:	4b04      	ldr	r3, [pc, #16]	; (8002c50 <SysTick_Config+0x40>)
 8002c40:	2207      	movs	r2, #7
 8002c42:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8002c44:	2300      	movs	r3, #0
}
 8002c46:	4618      	mov	r0, r3
 8002c48:	3708      	adds	r7, #8
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	bd80      	pop	{r7, pc}
 8002c4e:	bf00      	nop
 8002c50:	e000e010 	.word	0xe000e010

08002c54 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b082      	sub	sp, #8
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c5c:	6878      	ldr	r0, [r7, #4]
 8002c5e:	f7ff ff2d 	bl	8002abc <__NVIC_SetPriorityGrouping>
}
 8002c62:	bf00      	nop
 8002c64:	3708      	adds	r7, #8
 8002c66:	46bd      	mov	sp, r7
 8002c68:	bd80      	pop	{r7, pc}

08002c6a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002c6a:	b580      	push	{r7, lr}
 8002c6c:	b086      	sub	sp, #24
 8002c6e:	af00      	add	r7, sp, #0
 8002c70:	4603      	mov	r3, r0
 8002c72:	60b9      	str	r1, [r7, #8]
 8002c74:	607a      	str	r2, [r7, #4]
 8002c76:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002c78:	2300      	movs	r3, #0
 8002c7a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002c7c:	f7ff ff42 	bl	8002b04 <__NVIC_GetPriorityGrouping>
 8002c80:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c82:	687a      	ldr	r2, [r7, #4]
 8002c84:	68b9      	ldr	r1, [r7, #8]
 8002c86:	6978      	ldr	r0, [r7, #20]
 8002c88:	f7ff ff90 	bl	8002bac <NVIC_EncodePriority>
 8002c8c:	4602      	mov	r2, r0
 8002c8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c92:	4611      	mov	r1, r2
 8002c94:	4618      	mov	r0, r3
 8002c96:	f7ff ff5f 	bl	8002b58 <__NVIC_SetPriority>
}
 8002c9a:	bf00      	nop
 8002c9c:	3718      	adds	r7, #24
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	bd80      	pop	{r7, pc}

08002ca2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ca2:	b580      	push	{r7, lr}
 8002ca4:	b082      	sub	sp, #8
 8002ca6:	af00      	add	r7, sp, #0
 8002ca8:	4603      	mov	r3, r0
 8002caa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002cac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	f7ff ff35 	bl	8002b20 <__NVIC_EnableIRQ>
}
 8002cb6:	bf00      	nop
 8002cb8:	3708      	adds	r7, #8
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bd80      	pop	{r7, pc}

08002cbe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002cbe:	b580      	push	{r7, lr}
 8002cc0:	b082      	sub	sp, #8
 8002cc2:	af00      	add	r7, sp, #0
 8002cc4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002cc6:	6878      	ldr	r0, [r7, #4]
 8002cc8:	f7ff ffa2 	bl	8002c10 <SysTick_Config>
 8002ccc:	4603      	mov	r3, r0
}
 8002cce:	4618      	mov	r0, r3
 8002cd0:	3708      	adds	r7, #8
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	bd80      	pop	{r7, pc}
	...

08002cd8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002cd8:	b480      	push	{r7}
 8002cda:	b085      	sub	sp, #20
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d101      	bne.n	8002cee <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002cea:	2301      	movs	r3, #1
 8002cec:	e043      	b.n	8002d76 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	461a      	mov	r2, r3
 8002cf4:	4b22      	ldr	r3, [pc, #136]	; (8002d80 <HAL_DMA_Init+0xa8>)
 8002cf6:	4413      	add	r3, r2
 8002cf8:	4a22      	ldr	r2, [pc, #136]	; (8002d84 <HAL_DMA_Init+0xac>)
 8002cfa:	fba2 2303 	umull	r2, r3, r2, r3
 8002cfe:	091b      	lsrs	r3, r3, #4
 8002d00:	009a      	lsls	r2, r3, #2
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	4a1f      	ldr	r2, [pc, #124]	; (8002d88 <HAL_DMA_Init+0xb0>)
 8002d0a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2202      	movs	r2, #2
 8002d10:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002d22:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002d26:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002d30:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	68db      	ldr	r3, [r3, #12]
 8002d36:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d3c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	695b      	ldr	r3, [r3, #20]
 8002d42:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d48:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	69db      	ldr	r3, [r3, #28]
 8002d4e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002d50:	68fa      	ldr	r2, [r7, #12]
 8002d52:	4313      	orrs	r3, r2
 8002d54:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	68fa      	ldr	r2, [r7, #12]
 8002d5c:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	2200      	movs	r2, #0
 8002d62:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2201      	movs	r2, #1
 8002d68:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2200      	movs	r2, #0
 8002d70:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002d74:	2300      	movs	r3, #0
}
 8002d76:	4618      	mov	r0, r3
 8002d78:	3714      	adds	r7, #20
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	bc80      	pop	{r7}
 8002d7e:	4770      	bx	lr
 8002d80:	bffdfff8 	.word	0xbffdfff8
 8002d84:	cccccccd 	.word	0xcccccccd
 8002d88:	40020000 	.word	0x40020000

08002d8c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b086      	sub	sp, #24
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	60f8      	str	r0, [r7, #12]
 8002d94:	60b9      	str	r1, [r7, #8]
 8002d96:	607a      	str	r2, [r7, #4]
 8002d98:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002da4:	2b01      	cmp	r3, #1
 8002da6:	d101      	bne.n	8002dac <HAL_DMA_Start_IT+0x20>
 8002da8:	2302      	movs	r3, #2
 8002daa:	e04a      	b.n	8002e42 <HAL_DMA_Start_IT+0xb6>
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	2201      	movs	r2, #1
 8002db0:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002dba:	2b01      	cmp	r3, #1
 8002dbc:	d13a      	bne.n	8002e34 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	2202      	movs	r2, #2
 8002dc2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	2200      	movs	r2, #0
 8002dca:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	681a      	ldr	r2, [r3, #0]
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f022 0201 	bic.w	r2, r2, #1
 8002dda:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	687a      	ldr	r2, [r7, #4]
 8002de0:	68b9      	ldr	r1, [r7, #8]
 8002de2:	68f8      	ldr	r0, [r7, #12]
 8002de4:	f000 f9e8 	bl	80031b8 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d008      	beq.n	8002e02 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	681a      	ldr	r2, [r3, #0]
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f042 020e 	orr.w	r2, r2, #14
 8002dfe:	601a      	str	r2, [r3, #0]
 8002e00:	e00f      	b.n	8002e22 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	681a      	ldr	r2, [r3, #0]
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f022 0204 	bic.w	r2, r2, #4
 8002e10:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	681a      	ldr	r2, [r3, #0]
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f042 020a 	orr.w	r2, r2, #10
 8002e20:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	681a      	ldr	r2, [r3, #0]
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f042 0201 	orr.w	r2, r2, #1
 8002e30:	601a      	str	r2, [r3, #0]
 8002e32:	e005      	b.n	8002e40 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	2200      	movs	r2, #0
 8002e38:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002e3c:	2302      	movs	r3, #2
 8002e3e:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8002e40:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e42:	4618      	mov	r0, r3
 8002e44:	3718      	adds	r7, #24
 8002e46:	46bd      	mov	sp, r7
 8002e48:	bd80      	pop	{r7, pc}

08002e4a <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002e4a:	b480      	push	{r7}
 8002e4c:	b085      	sub	sp, #20
 8002e4e:	af00      	add	r7, sp, #0
 8002e50:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e52:	2300      	movs	r3, #0
 8002e54:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002e5c:	2b02      	cmp	r3, #2
 8002e5e:	d008      	beq.n	8002e72 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2204      	movs	r2, #4
 8002e64:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	2200      	movs	r2, #0
 8002e6a:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002e6e:	2301      	movs	r3, #1
 8002e70:	e020      	b.n	8002eb4 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	681a      	ldr	r2, [r3, #0]
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f022 020e 	bic.w	r2, r2, #14
 8002e80:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	681a      	ldr	r2, [r3, #0]
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f022 0201 	bic.w	r2, r2, #1
 8002e90:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e9a:	2101      	movs	r1, #1
 8002e9c:	fa01 f202 	lsl.w	r2, r1, r2
 8002ea0:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	2201      	movs	r2, #1
 8002ea6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	2200      	movs	r2, #0
 8002eae:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002eb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	3714      	adds	r7, #20
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	bc80      	pop	{r7}
 8002ebc:	4770      	bx	lr
	...

08002ec0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b084      	sub	sp, #16
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ec8:	2300      	movs	r3, #0
 8002eca:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002ed2:	2b02      	cmp	r3, #2
 8002ed4:	d005      	beq.n	8002ee2 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	2204      	movs	r2, #4
 8002eda:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002edc:	2301      	movs	r3, #1
 8002ede:	73fb      	strb	r3, [r7, #15]
 8002ee0:	e051      	b.n	8002f86 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	681a      	ldr	r2, [r3, #0]
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f022 020e 	bic.w	r2, r2, #14
 8002ef0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	681a      	ldr	r2, [r3, #0]
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f022 0201 	bic.w	r2, r2, #1
 8002f00:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	4a22      	ldr	r2, [pc, #136]	; (8002f90 <HAL_DMA_Abort_IT+0xd0>)
 8002f08:	4293      	cmp	r3, r2
 8002f0a:	d029      	beq.n	8002f60 <HAL_DMA_Abort_IT+0xa0>
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	4a20      	ldr	r2, [pc, #128]	; (8002f94 <HAL_DMA_Abort_IT+0xd4>)
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d022      	beq.n	8002f5c <HAL_DMA_Abort_IT+0x9c>
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	4a1f      	ldr	r2, [pc, #124]	; (8002f98 <HAL_DMA_Abort_IT+0xd8>)
 8002f1c:	4293      	cmp	r3, r2
 8002f1e:	d01a      	beq.n	8002f56 <HAL_DMA_Abort_IT+0x96>
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	4a1d      	ldr	r2, [pc, #116]	; (8002f9c <HAL_DMA_Abort_IT+0xdc>)
 8002f26:	4293      	cmp	r3, r2
 8002f28:	d012      	beq.n	8002f50 <HAL_DMA_Abort_IT+0x90>
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	4a1c      	ldr	r2, [pc, #112]	; (8002fa0 <HAL_DMA_Abort_IT+0xe0>)
 8002f30:	4293      	cmp	r3, r2
 8002f32:	d00a      	beq.n	8002f4a <HAL_DMA_Abort_IT+0x8a>
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4a1a      	ldr	r2, [pc, #104]	; (8002fa4 <HAL_DMA_Abort_IT+0xe4>)
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d102      	bne.n	8002f44 <HAL_DMA_Abort_IT+0x84>
 8002f3e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002f42:	e00e      	b.n	8002f62 <HAL_DMA_Abort_IT+0xa2>
 8002f44:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002f48:	e00b      	b.n	8002f62 <HAL_DMA_Abort_IT+0xa2>
 8002f4a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002f4e:	e008      	b.n	8002f62 <HAL_DMA_Abort_IT+0xa2>
 8002f50:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002f54:	e005      	b.n	8002f62 <HAL_DMA_Abort_IT+0xa2>
 8002f56:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002f5a:	e002      	b.n	8002f62 <HAL_DMA_Abort_IT+0xa2>
 8002f5c:	2310      	movs	r3, #16
 8002f5e:	e000      	b.n	8002f62 <HAL_DMA_Abort_IT+0xa2>
 8002f60:	2301      	movs	r3, #1
 8002f62:	4a11      	ldr	r2, [pc, #68]	; (8002fa8 <HAL_DMA_Abort_IT+0xe8>)
 8002f64:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	2201      	movs	r2, #1
 8002f6a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	2200      	movs	r2, #0
 8002f72:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d003      	beq.n	8002f86 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f82:	6878      	ldr	r0, [r7, #4]
 8002f84:	4798      	blx	r3
    } 
  }
  return status;
 8002f86:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f88:	4618      	mov	r0, r3
 8002f8a:	3710      	adds	r7, #16
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	bd80      	pop	{r7, pc}
 8002f90:	40020008 	.word	0x40020008
 8002f94:	4002001c 	.word	0x4002001c
 8002f98:	40020030 	.word	0x40020030
 8002f9c:	40020044 	.word	0x40020044
 8002fa0:	40020058 	.word	0x40020058
 8002fa4:	4002006c 	.word	0x4002006c
 8002fa8:	40020000 	.word	0x40020000

08002fac <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b084      	sub	sp, #16
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fc8:	2204      	movs	r2, #4
 8002fca:	409a      	lsls	r2, r3
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	4013      	ands	r3, r2
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d04f      	beq.n	8003074 <HAL_DMA_IRQHandler+0xc8>
 8002fd4:	68bb      	ldr	r3, [r7, #8]
 8002fd6:	f003 0304 	and.w	r3, r3, #4
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d04a      	beq.n	8003074 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f003 0320 	and.w	r3, r3, #32
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d107      	bne.n	8002ffc <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	681a      	ldr	r2, [r3, #0]
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f022 0204 	bic.w	r2, r2, #4
 8002ffa:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	4a66      	ldr	r2, [pc, #408]	; (800319c <HAL_DMA_IRQHandler+0x1f0>)
 8003002:	4293      	cmp	r3, r2
 8003004:	d029      	beq.n	800305a <HAL_DMA_IRQHandler+0xae>
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	4a65      	ldr	r2, [pc, #404]	; (80031a0 <HAL_DMA_IRQHandler+0x1f4>)
 800300c:	4293      	cmp	r3, r2
 800300e:	d022      	beq.n	8003056 <HAL_DMA_IRQHandler+0xaa>
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	4a63      	ldr	r2, [pc, #396]	; (80031a4 <HAL_DMA_IRQHandler+0x1f8>)
 8003016:	4293      	cmp	r3, r2
 8003018:	d01a      	beq.n	8003050 <HAL_DMA_IRQHandler+0xa4>
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	4a62      	ldr	r2, [pc, #392]	; (80031a8 <HAL_DMA_IRQHandler+0x1fc>)
 8003020:	4293      	cmp	r3, r2
 8003022:	d012      	beq.n	800304a <HAL_DMA_IRQHandler+0x9e>
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	4a60      	ldr	r2, [pc, #384]	; (80031ac <HAL_DMA_IRQHandler+0x200>)
 800302a:	4293      	cmp	r3, r2
 800302c:	d00a      	beq.n	8003044 <HAL_DMA_IRQHandler+0x98>
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	4a5f      	ldr	r2, [pc, #380]	; (80031b0 <HAL_DMA_IRQHandler+0x204>)
 8003034:	4293      	cmp	r3, r2
 8003036:	d102      	bne.n	800303e <HAL_DMA_IRQHandler+0x92>
 8003038:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800303c:	e00e      	b.n	800305c <HAL_DMA_IRQHandler+0xb0>
 800303e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8003042:	e00b      	b.n	800305c <HAL_DMA_IRQHandler+0xb0>
 8003044:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003048:	e008      	b.n	800305c <HAL_DMA_IRQHandler+0xb0>
 800304a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800304e:	e005      	b.n	800305c <HAL_DMA_IRQHandler+0xb0>
 8003050:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003054:	e002      	b.n	800305c <HAL_DMA_IRQHandler+0xb0>
 8003056:	2340      	movs	r3, #64	; 0x40
 8003058:	e000      	b.n	800305c <HAL_DMA_IRQHandler+0xb0>
 800305a:	2304      	movs	r3, #4
 800305c:	4a55      	ldr	r2, [pc, #340]	; (80031b4 <HAL_DMA_IRQHandler+0x208>)
 800305e:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003064:	2b00      	cmp	r3, #0
 8003066:	f000 8094 	beq.w	8003192 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800306e:	6878      	ldr	r0, [r7, #4]
 8003070:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8003072:	e08e      	b.n	8003192 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003078:	2202      	movs	r2, #2
 800307a:	409a      	lsls	r2, r3
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	4013      	ands	r3, r2
 8003080:	2b00      	cmp	r3, #0
 8003082:	d056      	beq.n	8003132 <HAL_DMA_IRQHandler+0x186>
 8003084:	68bb      	ldr	r3, [r7, #8]
 8003086:	f003 0302 	and.w	r3, r3, #2
 800308a:	2b00      	cmp	r3, #0
 800308c:	d051      	beq.n	8003132 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f003 0320 	and.w	r3, r3, #32
 8003098:	2b00      	cmp	r3, #0
 800309a:	d10b      	bne.n	80030b4 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	681a      	ldr	r2, [r3, #0]
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f022 020a 	bic.w	r2, r2, #10
 80030aa:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2201      	movs	r2, #1
 80030b0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	4a38      	ldr	r2, [pc, #224]	; (800319c <HAL_DMA_IRQHandler+0x1f0>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d029      	beq.n	8003112 <HAL_DMA_IRQHandler+0x166>
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	4a37      	ldr	r2, [pc, #220]	; (80031a0 <HAL_DMA_IRQHandler+0x1f4>)
 80030c4:	4293      	cmp	r3, r2
 80030c6:	d022      	beq.n	800310e <HAL_DMA_IRQHandler+0x162>
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	4a35      	ldr	r2, [pc, #212]	; (80031a4 <HAL_DMA_IRQHandler+0x1f8>)
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d01a      	beq.n	8003108 <HAL_DMA_IRQHandler+0x15c>
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	4a34      	ldr	r2, [pc, #208]	; (80031a8 <HAL_DMA_IRQHandler+0x1fc>)
 80030d8:	4293      	cmp	r3, r2
 80030da:	d012      	beq.n	8003102 <HAL_DMA_IRQHandler+0x156>
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	4a32      	ldr	r2, [pc, #200]	; (80031ac <HAL_DMA_IRQHandler+0x200>)
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d00a      	beq.n	80030fc <HAL_DMA_IRQHandler+0x150>
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	4a31      	ldr	r2, [pc, #196]	; (80031b0 <HAL_DMA_IRQHandler+0x204>)
 80030ec:	4293      	cmp	r3, r2
 80030ee:	d102      	bne.n	80030f6 <HAL_DMA_IRQHandler+0x14a>
 80030f0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80030f4:	e00e      	b.n	8003114 <HAL_DMA_IRQHandler+0x168>
 80030f6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80030fa:	e00b      	b.n	8003114 <HAL_DMA_IRQHandler+0x168>
 80030fc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003100:	e008      	b.n	8003114 <HAL_DMA_IRQHandler+0x168>
 8003102:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003106:	e005      	b.n	8003114 <HAL_DMA_IRQHandler+0x168>
 8003108:	f44f 7300 	mov.w	r3, #512	; 0x200
 800310c:	e002      	b.n	8003114 <HAL_DMA_IRQHandler+0x168>
 800310e:	2320      	movs	r3, #32
 8003110:	e000      	b.n	8003114 <HAL_DMA_IRQHandler+0x168>
 8003112:	2302      	movs	r3, #2
 8003114:	4a27      	ldr	r2, [pc, #156]	; (80031b4 <HAL_DMA_IRQHandler+0x208>)
 8003116:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2200      	movs	r2, #0
 800311c:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003124:	2b00      	cmp	r3, #0
 8003126:	d034      	beq.n	8003192 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800312c:	6878      	ldr	r0, [r7, #4]
 800312e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003130:	e02f      	b.n	8003192 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003136:	2208      	movs	r2, #8
 8003138:	409a      	lsls	r2, r3
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	4013      	ands	r3, r2
 800313e:	2b00      	cmp	r3, #0
 8003140:	d028      	beq.n	8003194 <HAL_DMA_IRQHandler+0x1e8>
 8003142:	68bb      	ldr	r3, [r7, #8]
 8003144:	f003 0308 	and.w	r3, r3, #8
 8003148:	2b00      	cmp	r3, #0
 800314a:	d023      	beq.n	8003194 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	681a      	ldr	r2, [r3, #0]
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f022 020e 	bic.w	r2, r2, #14
 800315a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003164:	2101      	movs	r1, #1
 8003166:	fa01 f202 	lsl.w	r2, r1, r2
 800316a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2201      	movs	r2, #1
 8003170:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	2201      	movs	r2, #1
 8003176:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	2200      	movs	r2, #0
 800317e:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003186:	2b00      	cmp	r3, #0
 8003188:	d004      	beq.n	8003194 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800318e:	6878      	ldr	r0, [r7, #4]
 8003190:	4798      	blx	r3
    }
  }
  return;
 8003192:	bf00      	nop
 8003194:	bf00      	nop
}
 8003196:	3710      	adds	r7, #16
 8003198:	46bd      	mov	sp, r7
 800319a:	bd80      	pop	{r7, pc}
 800319c:	40020008 	.word	0x40020008
 80031a0:	4002001c 	.word	0x4002001c
 80031a4:	40020030 	.word	0x40020030
 80031a8:	40020044 	.word	0x40020044
 80031ac:	40020058 	.word	0x40020058
 80031b0:	4002006c 	.word	0x4002006c
 80031b4:	40020000 	.word	0x40020000

080031b8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80031b8:	b480      	push	{r7}
 80031ba:	b085      	sub	sp, #20
 80031bc:	af00      	add	r7, sp, #0
 80031be:	60f8      	str	r0, [r7, #12]
 80031c0:	60b9      	str	r1, [r7, #8]
 80031c2:	607a      	str	r2, [r7, #4]
 80031c4:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031ce:	2101      	movs	r1, #1
 80031d0:	fa01 f202 	lsl.w	r2, r1, r2
 80031d4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	683a      	ldr	r2, [r7, #0]
 80031dc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	685b      	ldr	r3, [r3, #4]
 80031e2:	2b10      	cmp	r3, #16
 80031e4:	d108      	bne.n	80031f8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	687a      	ldr	r2, [r7, #4]
 80031ec:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	68ba      	ldr	r2, [r7, #8]
 80031f4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80031f6:	e007      	b.n	8003208 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	68ba      	ldr	r2, [r7, #8]
 80031fe:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	687a      	ldr	r2, [r7, #4]
 8003206:	60da      	str	r2, [r3, #12]
}
 8003208:	bf00      	nop
 800320a:	3714      	adds	r7, #20
 800320c:	46bd      	mov	sp, r7
 800320e:	bc80      	pop	{r7}
 8003210:	4770      	bx	lr
	...

08003214 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003214:	b480      	push	{r7}
 8003216:	b08b      	sub	sp, #44	; 0x2c
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
 800321c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800321e:	2300      	movs	r3, #0
 8003220:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003222:	2300      	movs	r3, #0
 8003224:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003226:	e169      	b.n	80034fc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003228:	2201      	movs	r2, #1
 800322a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800322c:	fa02 f303 	lsl.w	r3, r2, r3
 8003230:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	69fa      	ldr	r2, [r7, #28]
 8003238:	4013      	ands	r3, r2
 800323a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800323c:	69ba      	ldr	r2, [r7, #24]
 800323e:	69fb      	ldr	r3, [r7, #28]
 8003240:	429a      	cmp	r2, r3
 8003242:	f040 8158 	bne.w	80034f6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	685b      	ldr	r3, [r3, #4]
 800324a:	4a9a      	ldr	r2, [pc, #616]	; (80034b4 <HAL_GPIO_Init+0x2a0>)
 800324c:	4293      	cmp	r3, r2
 800324e:	d05e      	beq.n	800330e <HAL_GPIO_Init+0xfa>
 8003250:	4a98      	ldr	r2, [pc, #608]	; (80034b4 <HAL_GPIO_Init+0x2a0>)
 8003252:	4293      	cmp	r3, r2
 8003254:	d875      	bhi.n	8003342 <HAL_GPIO_Init+0x12e>
 8003256:	4a98      	ldr	r2, [pc, #608]	; (80034b8 <HAL_GPIO_Init+0x2a4>)
 8003258:	4293      	cmp	r3, r2
 800325a:	d058      	beq.n	800330e <HAL_GPIO_Init+0xfa>
 800325c:	4a96      	ldr	r2, [pc, #600]	; (80034b8 <HAL_GPIO_Init+0x2a4>)
 800325e:	4293      	cmp	r3, r2
 8003260:	d86f      	bhi.n	8003342 <HAL_GPIO_Init+0x12e>
 8003262:	4a96      	ldr	r2, [pc, #600]	; (80034bc <HAL_GPIO_Init+0x2a8>)
 8003264:	4293      	cmp	r3, r2
 8003266:	d052      	beq.n	800330e <HAL_GPIO_Init+0xfa>
 8003268:	4a94      	ldr	r2, [pc, #592]	; (80034bc <HAL_GPIO_Init+0x2a8>)
 800326a:	4293      	cmp	r3, r2
 800326c:	d869      	bhi.n	8003342 <HAL_GPIO_Init+0x12e>
 800326e:	4a94      	ldr	r2, [pc, #592]	; (80034c0 <HAL_GPIO_Init+0x2ac>)
 8003270:	4293      	cmp	r3, r2
 8003272:	d04c      	beq.n	800330e <HAL_GPIO_Init+0xfa>
 8003274:	4a92      	ldr	r2, [pc, #584]	; (80034c0 <HAL_GPIO_Init+0x2ac>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d863      	bhi.n	8003342 <HAL_GPIO_Init+0x12e>
 800327a:	4a92      	ldr	r2, [pc, #584]	; (80034c4 <HAL_GPIO_Init+0x2b0>)
 800327c:	4293      	cmp	r3, r2
 800327e:	d046      	beq.n	800330e <HAL_GPIO_Init+0xfa>
 8003280:	4a90      	ldr	r2, [pc, #576]	; (80034c4 <HAL_GPIO_Init+0x2b0>)
 8003282:	4293      	cmp	r3, r2
 8003284:	d85d      	bhi.n	8003342 <HAL_GPIO_Init+0x12e>
 8003286:	2b12      	cmp	r3, #18
 8003288:	d82a      	bhi.n	80032e0 <HAL_GPIO_Init+0xcc>
 800328a:	2b12      	cmp	r3, #18
 800328c:	d859      	bhi.n	8003342 <HAL_GPIO_Init+0x12e>
 800328e:	a201      	add	r2, pc, #4	; (adr r2, 8003294 <HAL_GPIO_Init+0x80>)
 8003290:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003294:	0800330f 	.word	0x0800330f
 8003298:	080032e9 	.word	0x080032e9
 800329c:	080032fb 	.word	0x080032fb
 80032a0:	0800333d 	.word	0x0800333d
 80032a4:	08003343 	.word	0x08003343
 80032a8:	08003343 	.word	0x08003343
 80032ac:	08003343 	.word	0x08003343
 80032b0:	08003343 	.word	0x08003343
 80032b4:	08003343 	.word	0x08003343
 80032b8:	08003343 	.word	0x08003343
 80032bc:	08003343 	.word	0x08003343
 80032c0:	08003343 	.word	0x08003343
 80032c4:	08003343 	.word	0x08003343
 80032c8:	08003343 	.word	0x08003343
 80032cc:	08003343 	.word	0x08003343
 80032d0:	08003343 	.word	0x08003343
 80032d4:	08003343 	.word	0x08003343
 80032d8:	080032f1 	.word	0x080032f1
 80032dc:	08003305 	.word	0x08003305
 80032e0:	4a79      	ldr	r2, [pc, #484]	; (80034c8 <HAL_GPIO_Init+0x2b4>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d013      	beq.n	800330e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80032e6:	e02c      	b.n	8003342 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	68db      	ldr	r3, [r3, #12]
 80032ec:	623b      	str	r3, [r7, #32]
          break;
 80032ee:	e029      	b.n	8003344 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	68db      	ldr	r3, [r3, #12]
 80032f4:	3304      	adds	r3, #4
 80032f6:	623b      	str	r3, [r7, #32]
          break;
 80032f8:	e024      	b.n	8003344 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	68db      	ldr	r3, [r3, #12]
 80032fe:	3308      	adds	r3, #8
 8003300:	623b      	str	r3, [r7, #32]
          break;
 8003302:	e01f      	b.n	8003344 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	68db      	ldr	r3, [r3, #12]
 8003308:	330c      	adds	r3, #12
 800330a:	623b      	str	r3, [r7, #32]
          break;
 800330c:	e01a      	b.n	8003344 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	689b      	ldr	r3, [r3, #8]
 8003312:	2b00      	cmp	r3, #0
 8003314:	d102      	bne.n	800331c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003316:	2304      	movs	r3, #4
 8003318:	623b      	str	r3, [r7, #32]
          break;
 800331a:	e013      	b.n	8003344 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	689b      	ldr	r3, [r3, #8]
 8003320:	2b01      	cmp	r3, #1
 8003322:	d105      	bne.n	8003330 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003324:	2308      	movs	r3, #8
 8003326:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	69fa      	ldr	r2, [r7, #28]
 800332c:	611a      	str	r2, [r3, #16]
          break;
 800332e:	e009      	b.n	8003344 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003330:	2308      	movs	r3, #8
 8003332:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	69fa      	ldr	r2, [r7, #28]
 8003338:	615a      	str	r2, [r3, #20]
          break;
 800333a:	e003      	b.n	8003344 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800333c:	2300      	movs	r3, #0
 800333e:	623b      	str	r3, [r7, #32]
          break;
 8003340:	e000      	b.n	8003344 <HAL_GPIO_Init+0x130>
          break;
 8003342:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003344:	69bb      	ldr	r3, [r7, #24]
 8003346:	2bff      	cmp	r3, #255	; 0xff
 8003348:	d801      	bhi.n	800334e <HAL_GPIO_Init+0x13a>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	e001      	b.n	8003352 <HAL_GPIO_Init+0x13e>
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	3304      	adds	r3, #4
 8003352:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003354:	69bb      	ldr	r3, [r7, #24]
 8003356:	2bff      	cmp	r3, #255	; 0xff
 8003358:	d802      	bhi.n	8003360 <HAL_GPIO_Init+0x14c>
 800335a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800335c:	009b      	lsls	r3, r3, #2
 800335e:	e002      	b.n	8003366 <HAL_GPIO_Init+0x152>
 8003360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003362:	3b08      	subs	r3, #8
 8003364:	009b      	lsls	r3, r3, #2
 8003366:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003368:	697b      	ldr	r3, [r7, #20]
 800336a:	681a      	ldr	r2, [r3, #0]
 800336c:	210f      	movs	r1, #15
 800336e:	693b      	ldr	r3, [r7, #16]
 8003370:	fa01 f303 	lsl.w	r3, r1, r3
 8003374:	43db      	mvns	r3, r3
 8003376:	401a      	ands	r2, r3
 8003378:	6a39      	ldr	r1, [r7, #32]
 800337a:	693b      	ldr	r3, [r7, #16]
 800337c:	fa01 f303 	lsl.w	r3, r1, r3
 8003380:	431a      	orrs	r2, r3
 8003382:	697b      	ldr	r3, [r7, #20]
 8003384:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	685b      	ldr	r3, [r3, #4]
 800338a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800338e:	2b00      	cmp	r3, #0
 8003390:	f000 80b1 	beq.w	80034f6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003394:	4b4d      	ldr	r3, [pc, #308]	; (80034cc <HAL_GPIO_Init+0x2b8>)
 8003396:	699b      	ldr	r3, [r3, #24]
 8003398:	4a4c      	ldr	r2, [pc, #304]	; (80034cc <HAL_GPIO_Init+0x2b8>)
 800339a:	f043 0301 	orr.w	r3, r3, #1
 800339e:	6193      	str	r3, [r2, #24]
 80033a0:	4b4a      	ldr	r3, [pc, #296]	; (80034cc <HAL_GPIO_Init+0x2b8>)
 80033a2:	699b      	ldr	r3, [r3, #24]
 80033a4:	f003 0301 	and.w	r3, r3, #1
 80033a8:	60bb      	str	r3, [r7, #8]
 80033aa:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80033ac:	4a48      	ldr	r2, [pc, #288]	; (80034d0 <HAL_GPIO_Init+0x2bc>)
 80033ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033b0:	089b      	lsrs	r3, r3, #2
 80033b2:	3302      	adds	r3, #2
 80033b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033b8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80033ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033bc:	f003 0303 	and.w	r3, r3, #3
 80033c0:	009b      	lsls	r3, r3, #2
 80033c2:	220f      	movs	r2, #15
 80033c4:	fa02 f303 	lsl.w	r3, r2, r3
 80033c8:	43db      	mvns	r3, r3
 80033ca:	68fa      	ldr	r2, [r7, #12]
 80033cc:	4013      	ands	r3, r2
 80033ce:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	4a40      	ldr	r2, [pc, #256]	; (80034d4 <HAL_GPIO_Init+0x2c0>)
 80033d4:	4293      	cmp	r3, r2
 80033d6:	d013      	beq.n	8003400 <HAL_GPIO_Init+0x1ec>
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	4a3f      	ldr	r2, [pc, #252]	; (80034d8 <HAL_GPIO_Init+0x2c4>)
 80033dc:	4293      	cmp	r3, r2
 80033de:	d00d      	beq.n	80033fc <HAL_GPIO_Init+0x1e8>
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	4a3e      	ldr	r2, [pc, #248]	; (80034dc <HAL_GPIO_Init+0x2c8>)
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d007      	beq.n	80033f8 <HAL_GPIO_Init+0x1e4>
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	4a3d      	ldr	r2, [pc, #244]	; (80034e0 <HAL_GPIO_Init+0x2cc>)
 80033ec:	4293      	cmp	r3, r2
 80033ee:	d101      	bne.n	80033f4 <HAL_GPIO_Init+0x1e0>
 80033f0:	2303      	movs	r3, #3
 80033f2:	e006      	b.n	8003402 <HAL_GPIO_Init+0x1ee>
 80033f4:	2304      	movs	r3, #4
 80033f6:	e004      	b.n	8003402 <HAL_GPIO_Init+0x1ee>
 80033f8:	2302      	movs	r3, #2
 80033fa:	e002      	b.n	8003402 <HAL_GPIO_Init+0x1ee>
 80033fc:	2301      	movs	r3, #1
 80033fe:	e000      	b.n	8003402 <HAL_GPIO_Init+0x1ee>
 8003400:	2300      	movs	r3, #0
 8003402:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003404:	f002 0203 	and.w	r2, r2, #3
 8003408:	0092      	lsls	r2, r2, #2
 800340a:	4093      	lsls	r3, r2
 800340c:	68fa      	ldr	r2, [r7, #12]
 800340e:	4313      	orrs	r3, r2
 8003410:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003412:	492f      	ldr	r1, [pc, #188]	; (80034d0 <HAL_GPIO_Init+0x2bc>)
 8003414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003416:	089b      	lsrs	r3, r3, #2
 8003418:	3302      	adds	r3, #2
 800341a:	68fa      	ldr	r2, [r7, #12]
 800341c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	685b      	ldr	r3, [r3, #4]
 8003424:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003428:	2b00      	cmp	r3, #0
 800342a:	d006      	beq.n	800343a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800342c:	4b2d      	ldr	r3, [pc, #180]	; (80034e4 <HAL_GPIO_Init+0x2d0>)
 800342e:	681a      	ldr	r2, [r3, #0]
 8003430:	492c      	ldr	r1, [pc, #176]	; (80034e4 <HAL_GPIO_Init+0x2d0>)
 8003432:	69bb      	ldr	r3, [r7, #24]
 8003434:	4313      	orrs	r3, r2
 8003436:	600b      	str	r3, [r1, #0]
 8003438:	e006      	b.n	8003448 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800343a:	4b2a      	ldr	r3, [pc, #168]	; (80034e4 <HAL_GPIO_Init+0x2d0>)
 800343c:	681a      	ldr	r2, [r3, #0]
 800343e:	69bb      	ldr	r3, [r7, #24]
 8003440:	43db      	mvns	r3, r3
 8003442:	4928      	ldr	r1, [pc, #160]	; (80034e4 <HAL_GPIO_Init+0x2d0>)
 8003444:	4013      	ands	r3, r2
 8003446:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	685b      	ldr	r3, [r3, #4]
 800344c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003450:	2b00      	cmp	r3, #0
 8003452:	d006      	beq.n	8003462 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003454:	4b23      	ldr	r3, [pc, #140]	; (80034e4 <HAL_GPIO_Init+0x2d0>)
 8003456:	685a      	ldr	r2, [r3, #4]
 8003458:	4922      	ldr	r1, [pc, #136]	; (80034e4 <HAL_GPIO_Init+0x2d0>)
 800345a:	69bb      	ldr	r3, [r7, #24]
 800345c:	4313      	orrs	r3, r2
 800345e:	604b      	str	r3, [r1, #4]
 8003460:	e006      	b.n	8003470 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003462:	4b20      	ldr	r3, [pc, #128]	; (80034e4 <HAL_GPIO_Init+0x2d0>)
 8003464:	685a      	ldr	r2, [r3, #4]
 8003466:	69bb      	ldr	r3, [r7, #24]
 8003468:	43db      	mvns	r3, r3
 800346a:	491e      	ldr	r1, [pc, #120]	; (80034e4 <HAL_GPIO_Init+0x2d0>)
 800346c:	4013      	ands	r3, r2
 800346e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	685b      	ldr	r3, [r3, #4]
 8003474:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003478:	2b00      	cmp	r3, #0
 800347a:	d006      	beq.n	800348a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800347c:	4b19      	ldr	r3, [pc, #100]	; (80034e4 <HAL_GPIO_Init+0x2d0>)
 800347e:	689a      	ldr	r2, [r3, #8]
 8003480:	4918      	ldr	r1, [pc, #96]	; (80034e4 <HAL_GPIO_Init+0x2d0>)
 8003482:	69bb      	ldr	r3, [r7, #24]
 8003484:	4313      	orrs	r3, r2
 8003486:	608b      	str	r3, [r1, #8]
 8003488:	e006      	b.n	8003498 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800348a:	4b16      	ldr	r3, [pc, #88]	; (80034e4 <HAL_GPIO_Init+0x2d0>)
 800348c:	689a      	ldr	r2, [r3, #8]
 800348e:	69bb      	ldr	r3, [r7, #24]
 8003490:	43db      	mvns	r3, r3
 8003492:	4914      	ldr	r1, [pc, #80]	; (80034e4 <HAL_GPIO_Init+0x2d0>)
 8003494:	4013      	ands	r3, r2
 8003496:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	685b      	ldr	r3, [r3, #4]
 800349c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d021      	beq.n	80034e8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80034a4:	4b0f      	ldr	r3, [pc, #60]	; (80034e4 <HAL_GPIO_Init+0x2d0>)
 80034a6:	68da      	ldr	r2, [r3, #12]
 80034a8:	490e      	ldr	r1, [pc, #56]	; (80034e4 <HAL_GPIO_Init+0x2d0>)
 80034aa:	69bb      	ldr	r3, [r7, #24]
 80034ac:	4313      	orrs	r3, r2
 80034ae:	60cb      	str	r3, [r1, #12]
 80034b0:	e021      	b.n	80034f6 <HAL_GPIO_Init+0x2e2>
 80034b2:	bf00      	nop
 80034b4:	10320000 	.word	0x10320000
 80034b8:	10310000 	.word	0x10310000
 80034bc:	10220000 	.word	0x10220000
 80034c0:	10210000 	.word	0x10210000
 80034c4:	10120000 	.word	0x10120000
 80034c8:	10110000 	.word	0x10110000
 80034cc:	40021000 	.word	0x40021000
 80034d0:	40010000 	.word	0x40010000
 80034d4:	40010800 	.word	0x40010800
 80034d8:	40010c00 	.word	0x40010c00
 80034dc:	40011000 	.word	0x40011000
 80034e0:	40011400 	.word	0x40011400
 80034e4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80034e8:	4b0b      	ldr	r3, [pc, #44]	; (8003518 <HAL_GPIO_Init+0x304>)
 80034ea:	68da      	ldr	r2, [r3, #12]
 80034ec:	69bb      	ldr	r3, [r7, #24]
 80034ee:	43db      	mvns	r3, r3
 80034f0:	4909      	ldr	r1, [pc, #36]	; (8003518 <HAL_GPIO_Init+0x304>)
 80034f2:	4013      	ands	r3, r2
 80034f4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80034f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034f8:	3301      	adds	r3, #1
 80034fa:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	681a      	ldr	r2, [r3, #0]
 8003500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003502:	fa22 f303 	lsr.w	r3, r2, r3
 8003506:	2b00      	cmp	r3, #0
 8003508:	f47f ae8e 	bne.w	8003228 <HAL_GPIO_Init+0x14>
  }
}
 800350c:	bf00      	nop
 800350e:	bf00      	nop
 8003510:	372c      	adds	r7, #44	; 0x2c
 8003512:	46bd      	mov	sp, r7
 8003514:	bc80      	pop	{r7}
 8003516:	4770      	bx	lr
 8003518:	40010400 	.word	0x40010400

0800351c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800351c:	b480      	push	{r7}
 800351e:	b083      	sub	sp, #12
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
 8003524:	460b      	mov	r3, r1
 8003526:	807b      	strh	r3, [r7, #2]
 8003528:	4613      	mov	r3, r2
 800352a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800352c:	787b      	ldrb	r3, [r7, #1]
 800352e:	2b00      	cmp	r3, #0
 8003530:	d003      	beq.n	800353a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003532:	887a      	ldrh	r2, [r7, #2]
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003538:	e003      	b.n	8003542 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800353a:	887b      	ldrh	r3, [r7, #2]
 800353c:	041a      	lsls	r2, r3, #16
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	611a      	str	r2, [r3, #16]
}
 8003542:	bf00      	nop
 8003544:	370c      	adds	r7, #12
 8003546:	46bd      	mov	sp, r7
 8003548:	bc80      	pop	{r7}
 800354a:	4770      	bx	lr

0800354c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800354c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800354e:	b08b      	sub	sp, #44	; 0x2c
 8003550:	af06      	add	r7, sp, #24
 8003552:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2b00      	cmp	r3, #0
 8003558:	d101      	bne.n	800355e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800355a:	2301      	movs	r3, #1
 800355c:	e0fd      	b.n	800375a <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8003564:	b2db      	uxtb	r3, r3
 8003566:	2b00      	cmp	r3, #0
 8003568:	d106      	bne.n	8003578 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	2200      	movs	r2, #0
 800356e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003572:	6878      	ldr	r0, [r7, #4]
 8003574:	f7fe fc2c 	bl	8001dd0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2203      	movs	r2, #3
 800357c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	4618      	mov	r0, r3
 8003586:	f002 fd4d 	bl	8006024 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	603b      	str	r3, [r7, #0]
 8003590:	687e      	ldr	r6, [r7, #4]
 8003592:	466d      	mov	r5, sp
 8003594:	f106 0410 	add.w	r4, r6, #16
 8003598:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800359a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800359c:	6823      	ldr	r3, [r4, #0]
 800359e:	602b      	str	r3, [r5, #0]
 80035a0:	1d33      	adds	r3, r6, #4
 80035a2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80035a4:	6838      	ldr	r0, [r7, #0]
 80035a6:	f002 fd2d 	bl	8006004 <USB_CoreInit>
 80035aa:	4603      	mov	r3, r0
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d005      	beq.n	80035bc <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2202      	movs	r2, #2
 80035b4:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 80035b8:	2301      	movs	r3, #1
 80035ba:	e0ce      	b.n	800375a <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	2100      	movs	r1, #0
 80035c2:	4618      	mov	r0, r3
 80035c4:	f002 fd48 	bl	8006058 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80035c8:	2300      	movs	r3, #0
 80035ca:	73fb      	strb	r3, [r7, #15]
 80035cc:	e04c      	b.n	8003668 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80035ce:	7bfb      	ldrb	r3, [r7, #15]
 80035d0:	6879      	ldr	r1, [r7, #4]
 80035d2:	1c5a      	adds	r2, r3, #1
 80035d4:	4613      	mov	r3, r2
 80035d6:	009b      	lsls	r3, r3, #2
 80035d8:	4413      	add	r3, r2
 80035da:	00db      	lsls	r3, r3, #3
 80035dc:	440b      	add	r3, r1
 80035de:	3301      	adds	r3, #1
 80035e0:	2201      	movs	r2, #1
 80035e2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80035e4:	7bfb      	ldrb	r3, [r7, #15]
 80035e6:	6879      	ldr	r1, [r7, #4]
 80035e8:	1c5a      	adds	r2, r3, #1
 80035ea:	4613      	mov	r3, r2
 80035ec:	009b      	lsls	r3, r3, #2
 80035ee:	4413      	add	r3, r2
 80035f0:	00db      	lsls	r3, r3, #3
 80035f2:	440b      	add	r3, r1
 80035f4:	7bfa      	ldrb	r2, [r7, #15]
 80035f6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80035f8:	7bfa      	ldrb	r2, [r7, #15]
 80035fa:	7bfb      	ldrb	r3, [r7, #15]
 80035fc:	b298      	uxth	r0, r3
 80035fe:	6879      	ldr	r1, [r7, #4]
 8003600:	4613      	mov	r3, r2
 8003602:	009b      	lsls	r3, r3, #2
 8003604:	4413      	add	r3, r2
 8003606:	00db      	lsls	r3, r3, #3
 8003608:	440b      	add	r3, r1
 800360a:	3336      	adds	r3, #54	; 0x36
 800360c:	4602      	mov	r2, r0
 800360e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003610:	7bfb      	ldrb	r3, [r7, #15]
 8003612:	6879      	ldr	r1, [r7, #4]
 8003614:	1c5a      	adds	r2, r3, #1
 8003616:	4613      	mov	r3, r2
 8003618:	009b      	lsls	r3, r3, #2
 800361a:	4413      	add	r3, r2
 800361c:	00db      	lsls	r3, r3, #3
 800361e:	440b      	add	r3, r1
 8003620:	3303      	adds	r3, #3
 8003622:	2200      	movs	r2, #0
 8003624:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003626:	7bfa      	ldrb	r2, [r7, #15]
 8003628:	6879      	ldr	r1, [r7, #4]
 800362a:	4613      	mov	r3, r2
 800362c:	009b      	lsls	r3, r3, #2
 800362e:	4413      	add	r3, r2
 8003630:	00db      	lsls	r3, r3, #3
 8003632:	440b      	add	r3, r1
 8003634:	3338      	adds	r3, #56	; 0x38
 8003636:	2200      	movs	r2, #0
 8003638:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800363a:	7bfa      	ldrb	r2, [r7, #15]
 800363c:	6879      	ldr	r1, [r7, #4]
 800363e:	4613      	mov	r3, r2
 8003640:	009b      	lsls	r3, r3, #2
 8003642:	4413      	add	r3, r2
 8003644:	00db      	lsls	r3, r3, #3
 8003646:	440b      	add	r3, r1
 8003648:	333c      	adds	r3, #60	; 0x3c
 800364a:	2200      	movs	r2, #0
 800364c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800364e:	7bfa      	ldrb	r2, [r7, #15]
 8003650:	6879      	ldr	r1, [r7, #4]
 8003652:	4613      	mov	r3, r2
 8003654:	009b      	lsls	r3, r3, #2
 8003656:	4413      	add	r3, r2
 8003658:	00db      	lsls	r3, r3, #3
 800365a:	440b      	add	r3, r1
 800365c:	3340      	adds	r3, #64	; 0x40
 800365e:	2200      	movs	r2, #0
 8003660:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003662:	7bfb      	ldrb	r3, [r7, #15]
 8003664:	3301      	adds	r3, #1
 8003666:	73fb      	strb	r3, [r7, #15]
 8003668:	7bfa      	ldrb	r2, [r7, #15]
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	685b      	ldr	r3, [r3, #4]
 800366e:	429a      	cmp	r2, r3
 8003670:	d3ad      	bcc.n	80035ce <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003672:	2300      	movs	r3, #0
 8003674:	73fb      	strb	r3, [r7, #15]
 8003676:	e044      	b.n	8003702 <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003678:	7bfa      	ldrb	r2, [r7, #15]
 800367a:	6879      	ldr	r1, [r7, #4]
 800367c:	4613      	mov	r3, r2
 800367e:	009b      	lsls	r3, r3, #2
 8003680:	4413      	add	r3, r2
 8003682:	00db      	lsls	r3, r3, #3
 8003684:	440b      	add	r3, r1
 8003686:	f203 1369 	addw	r3, r3, #361	; 0x169
 800368a:	2200      	movs	r2, #0
 800368c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800368e:	7bfa      	ldrb	r2, [r7, #15]
 8003690:	6879      	ldr	r1, [r7, #4]
 8003692:	4613      	mov	r3, r2
 8003694:	009b      	lsls	r3, r3, #2
 8003696:	4413      	add	r3, r2
 8003698:	00db      	lsls	r3, r3, #3
 800369a:	440b      	add	r3, r1
 800369c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80036a0:	7bfa      	ldrb	r2, [r7, #15]
 80036a2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80036a4:	7bfa      	ldrb	r2, [r7, #15]
 80036a6:	6879      	ldr	r1, [r7, #4]
 80036a8:	4613      	mov	r3, r2
 80036aa:	009b      	lsls	r3, r3, #2
 80036ac:	4413      	add	r3, r2
 80036ae:	00db      	lsls	r3, r3, #3
 80036b0:	440b      	add	r3, r1
 80036b2:	f203 136b 	addw	r3, r3, #363	; 0x16b
 80036b6:	2200      	movs	r2, #0
 80036b8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80036ba:	7bfa      	ldrb	r2, [r7, #15]
 80036bc:	6879      	ldr	r1, [r7, #4]
 80036be:	4613      	mov	r3, r2
 80036c0:	009b      	lsls	r3, r3, #2
 80036c2:	4413      	add	r3, r2
 80036c4:	00db      	lsls	r3, r3, #3
 80036c6:	440b      	add	r3, r1
 80036c8:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80036cc:	2200      	movs	r2, #0
 80036ce:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80036d0:	7bfa      	ldrb	r2, [r7, #15]
 80036d2:	6879      	ldr	r1, [r7, #4]
 80036d4:	4613      	mov	r3, r2
 80036d6:	009b      	lsls	r3, r3, #2
 80036d8:	4413      	add	r3, r2
 80036da:	00db      	lsls	r3, r3, #3
 80036dc:	440b      	add	r3, r1
 80036de:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80036e2:	2200      	movs	r2, #0
 80036e4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80036e6:	7bfa      	ldrb	r2, [r7, #15]
 80036e8:	6879      	ldr	r1, [r7, #4]
 80036ea:	4613      	mov	r3, r2
 80036ec:	009b      	lsls	r3, r3, #2
 80036ee:	4413      	add	r3, r2
 80036f0:	00db      	lsls	r3, r3, #3
 80036f2:	440b      	add	r3, r1
 80036f4:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80036f8:	2200      	movs	r2, #0
 80036fa:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80036fc:	7bfb      	ldrb	r3, [r7, #15]
 80036fe:	3301      	adds	r3, #1
 8003700:	73fb      	strb	r3, [r7, #15]
 8003702:	7bfa      	ldrb	r2, [r7, #15]
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	685b      	ldr	r3, [r3, #4]
 8003708:	429a      	cmp	r2, r3
 800370a:	d3b5      	bcc.n	8003678 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	603b      	str	r3, [r7, #0]
 8003712:	687e      	ldr	r6, [r7, #4]
 8003714:	466d      	mov	r5, sp
 8003716:	f106 0410 	add.w	r4, r6, #16
 800371a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800371c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800371e:	6823      	ldr	r3, [r4, #0]
 8003720:	602b      	str	r3, [r5, #0]
 8003722:	1d33      	adds	r3, r6, #4
 8003724:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003726:	6838      	ldr	r0, [r7, #0]
 8003728:	f002 fca2 	bl	8006070 <USB_DevInit>
 800372c:	4603      	mov	r3, r0
 800372e:	2b00      	cmp	r3, #0
 8003730:	d005      	beq.n	800373e <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	2202      	movs	r2, #2
 8003736:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 800373a:	2301      	movs	r3, #1
 800373c:	e00d      	b.n	800375a <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	2200      	movs	r2, #0
 8003742:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	2201      	movs	r2, #1
 800374a:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	4618      	mov	r0, r3
 8003754:	f002 fcac 	bl	80060b0 <USB_DevDisconnect>

  return HAL_OK;
 8003758:	2300      	movs	r3, #0
}
 800375a:	4618      	mov	r0, r3
 800375c:	3714      	adds	r7, #20
 800375e:	46bd      	mov	sp, r7
 8003760:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08003764 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003764:	b480      	push	{r7}
 8003766:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8003768:	4b03      	ldr	r3, [pc, #12]	; (8003778 <HAL_PWR_EnableBkUpAccess+0x14>)
 800376a:	2201      	movs	r2, #1
 800376c:	601a      	str	r2, [r3, #0]
}
 800376e:	bf00      	nop
 8003770:	46bd      	mov	sp, r7
 8003772:	bc80      	pop	{r7}
 8003774:	4770      	bx	lr
 8003776:	bf00      	nop
 8003778:	420e0020 	.word	0x420e0020

0800377c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	b086      	sub	sp, #24
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2b00      	cmp	r3, #0
 8003788:	d101      	bne.n	800378e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800378a:	2301      	movs	r3, #1
 800378c:	e272      	b.n	8003c74 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f003 0301 	and.w	r3, r3, #1
 8003796:	2b00      	cmp	r3, #0
 8003798:	f000 8087 	beq.w	80038aa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800379c:	4b92      	ldr	r3, [pc, #584]	; (80039e8 <HAL_RCC_OscConfig+0x26c>)
 800379e:	685b      	ldr	r3, [r3, #4]
 80037a0:	f003 030c 	and.w	r3, r3, #12
 80037a4:	2b04      	cmp	r3, #4
 80037a6:	d00c      	beq.n	80037c2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80037a8:	4b8f      	ldr	r3, [pc, #572]	; (80039e8 <HAL_RCC_OscConfig+0x26c>)
 80037aa:	685b      	ldr	r3, [r3, #4]
 80037ac:	f003 030c 	and.w	r3, r3, #12
 80037b0:	2b08      	cmp	r3, #8
 80037b2:	d112      	bne.n	80037da <HAL_RCC_OscConfig+0x5e>
 80037b4:	4b8c      	ldr	r3, [pc, #560]	; (80039e8 <HAL_RCC_OscConfig+0x26c>)
 80037b6:	685b      	ldr	r3, [r3, #4]
 80037b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037c0:	d10b      	bne.n	80037da <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037c2:	4b89      	ldr	r3, [pc, #548]	; (80039e8 <HAL_RCC_OscConfig+0x26c>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d06c      	beq.n	80038a8 <HAL_RCC_OscConfig+0x12c>
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	685b      	ldr	r3, [r3, #4]
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d168      	bne.n	80038a8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80037d6:	2301      	movs	r3, #1
 80037d8:	e24c      	b.n	8003c74 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	685b      	ldr	r3, [r3, #4]
 80037de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037e2:	d106      	bne.n	80037f2 <HAL_RCC_OscConfig+0x76>
 80037e4:	4b80      	ldr	r3, [pc, #512]	; (80039e8 <HAL_RCC_OscConfig+0x26c>)
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	4a7f      	ldr	r2, [pc, #508]	; (80039e8 <HAL_RCC_OscConfig+0x26c>)
 80037ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037ee:	6013      	str	r3, [r2, #0]
 80037f0:	e02e      	b.n	8003850 <HAL_RCC_OscConfig+0xd4>
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	685b      	ldr	r3, [r3, #4]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d10c      	bne.n	8003814 <HAL_RCC_OscConfig+0x98>
 80037fa:	4b7b      	ldr	r3, [pc, #492]	; (80039e8 <HAL_RCC_OscConfig+0x26c>)
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	4a7a      	ldr	r2, [pc, #488]	; (80039e8 <HAL_RCC_OscConfig+0x26c>)
 8003800:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003804:	6013      	str	r3, [r2, #0]
 8003806:	4b78      	ldr	r3, [pc, #480]	; (80039e8 <HAL_RCC_OscConfig+0x26c>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	4a77      	ldr	r2, [pc, #476]	; (80039e8 <HAL_RCC_OscConfig+0x26c>)
 800380c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003810:	6013      	str	r3, [r2, #0]
 8003812:	e01d      	b.n	8003850 <HAL_RCC_OscConfig+0xd4>
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	685b      	ldr	r3, [r3, #4]
 8003818:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800381c:	d10c      	bne.n	8003838 <HAL_RCC_OscConfig+0xbc>
 800381e:	4b72      	ldr	r3, [pc, #456]	; (80039e8 <HAL_RCC_OscConfig+0x26c>)
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	4a71      	ldr	r2, [pc, #452]	; (80039e8 <HAL_RCC_OscConfig+0x26c>)
 8003824:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003828:	6013      	str	r3, [r2, #0]
 800382a:	4b6f      	ldr	r3, [pc, #444]	; (80039e8 <HAL_RCC_OscConfig+0x26c>)
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	4a6e      	ldr	r2, [pc, #440]	; (80039e8 <HAL_RCC_OscConfig+0x26c>)
 8003830:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003834:	6013      	str	r3, [r2, #0]
 8003836:	e00b      	b.n	8003850 <HAL_RCC_OscConfig+0xd4>
 8003838:	4b6b      	ldr	r3, [pc, #428]	; (80039e8 <HAL_RCC_OscConfig+0x26c>)
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	4a6a      	ldr	r2, [pc, #424]	; (80039e8 <HAL_RCC_OscConfig+0x26c>)
 800383e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003842:	6013      	str	r3, [r2, #0]
 8003844:	4b68      	ldr	r3, [pc, #416]	; (80039e8 <HAL_RCC_OscConfig+0x26c>)
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	4a67      	ldr	r2, [pc, #412]	; (80039e8 <HAL_RCC_OscConfig+0x26c>)
 800384a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800384e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	685b      	ldr	r3, [r3, #4]
 8003854:	2b00      	cmp	r3, #0
 8003856:	d013      	beq.n	8003880 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003858:	f7fe fc46 	bl	80020e8 <HAL_GetTick>
 800385c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800385e:	e008      	b.n	8003872 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003860:	f7fe fc42 	bl	80020e8 <HAL_GetTick>
 8003864:	4602      	mov	r2, r0
 8003866:	693b      	ldr	r3, [r7, #16]
 8003868:	1ad3      	subs	r3, r2, r3
 800386a:	2b64      	cmp	r3, #100	; 0x64
 800386c:	d901      	bls.n	8003872 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800386e:	2303      	movs	r3, #3
 8003870:	e200      	b.n	8003c74 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003872:	4b5d      	ldr	r3, [pc, #372]	; (80039e8 <HAL_RCC_OscConfig+0x26c>)
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800387a:	2b00      	cmp	r3, #0
 800387c:	d0f0      	beq.n	8003860 <HAL_RCC_OscConfig+0xe4>
 800387e:	e014      	b.n	80038aa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003880:	f7fe fc32 	bl	80020e8 <HAL_GetTick>
 8003884:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003886:	e008      	b.n	800389a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003888:	f7fe fc2e 	bl	80020e8 <HAL_GetTick>
 800388c:	4602      	mov	r2, r0
 800388e:	693b      	ldr	r3, [r7, #16]
 8003890:	1ad3      	subs	r3, r2, r3
 8003892:	2b64      	cmp	r3, #100	; 0x64
 8003894:	d901      	bls.n	800389a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003896:	2303      	movs	r3, #3
 8003898:	e1ec      	b.n	8003c74 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800389a:	4b53      	ldr	r3, [pc, #332]	; (80039e8 <HAL_RCC_OscConfig+0x26c>)
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d1f0      	bne.n	8003888 <HAL_RCC_OscConfig+0x10c>
 80038a6:	e000      	b.n	80038aa <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f003 0302 	and.w	r3, r3, #2
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d063      	beq.n	800397e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80038b6:	4b4c      	ldr	r3, [pc, #304]	; (80039e8 <HAL_RCC_OscConfig+0x26c>)
 80038b8:	685b      	ldr	r3, [r3, #4]
 80038ba:	f003 030c 	and.w	r3, r3, #12
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d00b      	beq.n	80038da <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80038c2:	4b49      	ldr	r3, [pc, #292]	; (80039e8 <HAL_RCC_OscConfig+0x26c>)
 80038c4:	685b      	ldr	r3, [r3, #4]
 80038c6:	f003 030c 	and.w	r3, r3, #12
 80038ca:	2b08      	cmp	r3, #8
 80038cc:	d11c      	bne.n	8003908 <HAL_RCC_OscConfig+0x18c>
 80038ce:	4b46      	ldr	r3, [pc, #280]	; (80039e8 <HAL_RCC_OscConfig+0x26c>)
 80038d0:	685b      	ldr	r3, [r3, #4]
 80038d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d116      	bne.n	8003908 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80038da:	4b43      	ldr	r3, [pc, #268]	; (80039e8 <HAL_RCC_OscConfig+0x26c>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f003 0302 	and.w	r3, r3, #2
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d005      	beq.n	80038f2 <HAL_RCC_OscConfig+0x176>
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	691b      	ldr	r3, [r3, #16]
 80038ea:	2b01      	cmp	r3, #1
 80038ec:	d001      	beq.n	80038f2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80038ee:	2301      	movs	r3, #1
 80038f0:	e1c0      	b.n	8003c74 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038f2:	4b3d      	ldr	r3, [pc, #244]	; (80039e8 <HAL_RCC_OscConfig+0x26c>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	695b      	ldr	r3, [r3, #20]
 80038fe:	00db      	lsls	r3, r3, #3
 8003900:	4939      	ldr	r1, [pc, #228]	; (80039e8 <HAL_RCC_OscConfig+0x26c>)
 8003902:	4313      	orrs	r3, r2
 8003904:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003906:	e03a      	b.n	800397e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	691b      	ldr	r3, [r3, #16]
 800390c:	2b00      	cmp	r3, #0
 800390e:	d020      	beq.n	8003952 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003910:	4b36      	ldr	r3, [pc, #216]	; (80039ec <HAL_RCC_OscConfig+0x270>)
 8003912:	2201      	movs	r2, #1
 8003914:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003916:	f7fe fbe7 	bl	80020e8 <HAL_GetTick>
 800391a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800391c:	e008      	b.n	8003930 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800391e:	f7fe fbe3 	bl	80020e8 <HAL_GetTick>
 8003922:	4602      	mov	r2, r0
 8003924:	693b      	ldr	r3, [r7, #16]
 8003926:	1ad3      	subs	r3, r2, r3
 8003928:	2b02      	cmp	r3, #2
 800392a:	d901      	bls.n	8003930 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800392c:	2303      	movs	r3, #3
 800392e:	e1a1      	b.n	8003c74 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003930:	4b2d      	ldr	r3, [pc, #180]	; (80039e8 <HAL_RCC_OscConfig+0x26c>)
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f003 0302 	and.w	r3, r3, #2
 8003938:	2b00      	cmp	r3, #0
 800393a:	d0f0      	beq.n	800391e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800393c:	4b2a      	ldr	r3, [pc, #168]	; (80039e8 <HAL_RCC_OscConfig+0x26c>)
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	695b      	ldr	r3, [r3, #20]
 8003948:	00db      	lsls	r3, r3, #3
 800394a:	4927      	ldr	r1, [pc, #156]	; (80039e8 <HAL_RCC_OscConfig+0x26c>)
 800394c:	4313      	orrs	r3, r2
 800394e:	600b      	str	r3, [r1, #0]
 8003950:	e015      	b.n	800397e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003952:	4b26      	ldr	r3, [pc, #152]	; (80039ec <HAL_RCC_OscConfig+0x270>)
 8003954:	2200      	movs	r2, #0
 8003956:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003958:	f7fe fbc6 	bl	80020e8 <HAL_GetTick>
 800395c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800395e:	e008      	b.n	8003972 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003960:	f7fe fbc2 	bl	80020e8 <HAL_GetTick>
 8003964:	4602      	mov	r2, r0
 8003966:	693b      	ldr	r3, [r7, #16]
 8003968:	1ad3      	subs	r3, r2, r3
 800396a:	2b02      	cmp	r3, #2
 800396c:	d901      	bls.n	8003972 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800396e:	2303      	movs	r3, #3
 8003970:	e180      	b.n	8003c74 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003972:	4b1d      	ldr	r3, [pc, #116]	; (80039e8 <HAL_RCC_OscConfig+0x26c>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f003 0302 	and.w	r3, r3, #2
 800397a:	2b00      	cmp	r3, #0
 800397c:	d1f0      	bne.n	8003960 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f003 0308 	and.w	r3, r3, #8
 8003986:	2b00      	cmp	r3, #0
 8003988:	d03a      	beq.n	8003a00 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	699b      	ldr	r3, [r3, #24]
 800398e:	2b00      	cmp	r3, #0
 8003990:	d019      	beq.n	80039c6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003992:	4b17      	ldr	r3, [pc, #92]	; (80039f0 <HAL_RCC_OscConfig+0x274>)
 8003994:	2201      	movs	r2, #1
 8003996:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003998:	f7fe fba6 	bl	80020e8 <HAL_GetTick>
 800399c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800399e:	e008      	b.n	80039b2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80039a0:	f7fe fba2 	bl	80020e8 <HAL_GetTick>
 80039a4:	4602      	mov	r2, r0
 80039a6:	693b      	ldr	r3, [r7, #16]
 80039a8:	1ad3      	subs	r3, r2, r3
 80039aa:	2b02      	cmp	r3, #2
 80039ac:	d901      	bls.n	80039b2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80039ae:	2303      	movs	r3, #3
 80039b0:	e160      	b.n	8003c74 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80039b2:	4b0d      	ldr	r3, [pc, #52]	; (80039e8 <HAL_RCC_OscConfig+0x26c>)
 80039b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039b6:	f003 0302 	and.w	r3, r3, #2
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d0f0      	beq.n	80039a0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80039be:	2001      	movs	r0, #1
 80039c0:	f000 fad8 	bl	8003f74 <RCC_Delay>
 80039c4:	e01c      	b.n	8003a00 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80039c6:	4b0a      	ldr	r3, [pc, #40]	; (80039f0 <HAL_RCC_OscConfig+0x274>)
 80039c8:	2200      	movs	r2, #0
 80039ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039cc:	f7fe fb8c 	bl	80020e8 <HAL_GetTick>
 80039d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80039d2:	e00f      	b.n	80039f4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80039d4:	f7fe fb88 	bl	80020e8 <HAL_GetTick>
 80039d8:	4602      	mov	r2, r0
 80039da:	693b      	ldr	r3, [r7, #16]
 80039dc:	1ad3      	subs	r3, r2, r3
 80039de:	2b02      	cmp	r3, #2
 80039e0:	d908      	bls.n	80039f4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80039e2:	2303      	movs	r3, #3
 80039e4:	e146      	b.n	8003c74 <HAL_RCC_OscConfig+0x4f8>
 80039e6:	bf00      	nop
 80039e8:	40021000 	.word	0x40021000
 80039ec:	42420000 	.word	0x42420000
 80039f0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80039f4:	4b92      	ldr	r3, [pc, #584]	; (8003c40 <HAL_RCC_OscConfig+0x4c4>)
 80039f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039f8:	f003 0302 	and.w	r3, r3, #2
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d1e9      	bne.n	80039d4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f003 0304 	and.w	r3, r3, #4
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	f000 80a6 	beq.w	8003b5a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a0e:	2300      	movs	r3, #0
 8003a10:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a12:	4b8b      	ldr	r3, [pc, #556]	; (8003c40 <HAL_RCC_OscConfig+0x4c4>)
 8003a14:	69db      	ldr	r3, [r3, #28]
 8003a16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d10d      	bne.n	8003a3a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a1e:	4b88      	ldr	r3, [pc, #544]	; (8003c40 <HAL_RCC_OscConfig+0x4c4>)
 8003a20:	69db      	ldr	r3, [r3, #28]
 8003a22:	4a87      	ldr	r2, [pc, #540]	; (8003c40 <HAL_RCC_OscConfig+0x4c4>)
 8003a24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a28:	61d3      	str	r3, [r2, #28]
 8003a2a:	4b85      	ldr	r3, [pc, #532]	; (8003c40 <HAL_RCC_OscConfig+0x4c4>)
 8003a2c:	69db      	ldr	r3, [r3, #28]
 8003a2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a32:	60bb      	str	r3, [r7, #8]
 8003a34:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a36:	2301      	movs	r3, #1
 8003a38:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a3a:	4b82      	ldr	r3, [pc, #520]	; (8003c44 <HAL_RCC_OscConfig+0x4c8>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d118      	bne.n	8003a78 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003a46:	4b7f      	ldr	r3, [pc, #508]	; (8003c44 <HAL_RCC_OscConfig+0x4c8>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	4a7e      	ldr	r2, [pc, #504]	; (8003c44 <HAL_RCC_OscConfig+0x4c8>)
 8003a4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a50:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a52:	f7fe fb49 	bl	80020e8 <HAL_GetTick>
 8003a56:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a58:	e008      	b.n	8003a6c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a5a:	f7fe fb45 	bl	80020e8 <HAL_GetTick>
 8003a5e:	4602      	mov	r2, r0
 8003a60:	693b      	ldr	r3, [r7, #16]
 8003a62:	1ad3      	subs	r3, r2, r3
 8003a64:	2b64      	cmp	r3, #100	; 0x64
 8003a66:	d901      	bls.n	8003a6c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003a68:	2303      	movs	r3, #3
 8003a6a:	e103      	b.n	8003c74 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a6c:	4b75      	ldr	r3, [pc, #468]	; (8003c44 <HAL_RCC_OscConfig+0x4c8>)
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d0f0      	beq.n	8003a5a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	68db      	ldr	r3, [r3, #12]
 8003a7c:	2b01      	cmp	r3, #1
 8003a7e:	d106      	bne.n	8003a8e <HAL_RCC_OscConfig+0x312>
 8003a80:	4b6f      	ldr	r3, [pc, #444]	; (8003c40 <HAL_RCC_OscConfig+0x4c4>)
 8003a82:	6a1b      	ldr	r3, [r3, #32]
 8003a84:	4a6e      	ldr	r2, [pc, #440]	; (8003c40 <HAL_RCC_OscConfig+0x4c4>)
 8003a86:	f043 0301 	orr.w	r3, r3, #1
 8003a8a:	6213      	str	r3, [r2, #32]
 8003a8c:	e02d      	b.n	8003aea <HAL_RCC_OscConfig+0x36e>
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	68db      	ldr	r3, [r3, #12]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d10c      	bne.n	8003ab0 <HAL_RCC_OscConfig+0x334>
 8003a96:	4b6a      	ldr	r3, [pc, #424]	; (8003c40 <HAL_RCC_OscConfig+0x4c4>)
 8003a98:	6a1b      	ldr	r3, [r3, #32]
 8003a9a:	4a69      	ldr	r2, [pc, #420]	; (8003c40 <HAL_RCC_OscConfig+0x4c4>)
 8003a9c:	f023 0301 	bic.w	r3, r3, #1
 8003aa0:	6213      	str	r3, [r2, #32]
 8003aa2:	4b67      	ldr	r3, [pc, #412]	; (8003c40 <HAL_RCC_OscConfig+0x4c4>)
 8003aa4:	6a1b      	ldr	r3, [r3, #32]
 8003aa6:	4a66      	ldr	r2, [pc, #408]	; (8003c40 <HAL_RCC_OscConfig+0x4c4>)
 8003aa8:	f023 0304 	bic.w	r3, r3, #4
 8003aac:	6213      	str	r3, [r2, #32]
 8003aae:	e01c      	b.n	8003aea <HAL_RCC_OscConfig+0x36e>
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	68db      	ldr	r3, [r3, #12]
 8003ab4:	2b05      	cmp	r3, #5
 8003ab6:	d10c      	bne.n	8003ad2 <HAL_RCC_OscConfig+0x356>
 8003ab8:	4b61      	ldr	r3, [pc, #388]	; (8003c40 <HAL_RCC_OscConfig+0x4c4>)
 8003aba:	6a1b      	ldr	r3, [r3, #32]
 8003abc:	4a60      	ldr	r2, [pc, #384]	; (8003c40 <HAL_RCC_OscConfig+0x4c4>)
 8003abe:	f043 0304 	orr.w	r3, r3, #4
 8003ac2:	6213      	str	r3, [r2, #32]
 8003ac4:	4b5e      	ldr	r3, [pc, #376]	; (8003c40 <HAL_RCC_OscConfig+0x4c4>)
 8003ac6:	6a1b      	ldr	r3, [r3, #32]
 8003ac8:	4a5d      	ldr	r2, [pc, #372]	; (8003c40 <HAL_RCC_OscConfig+0x4c4>)
 8003aca:	f043 0301 	orr.w	r3, r3, #1
 8003ace:	6213      	str	r3, [r2, #32]
 8003ad0:	e00b      	b.n	8003aea <HAL_RCC_OscConfig+0x36e>
 8003ad2:	4b5b      	ldr	r3, [pc, #364]	; (8003c40 <HAL_RCC_OscConfig+0x4c4>)
 8003ad4:	6a1b      	ldr	r3, [r3, #32]
 8003ad6:	4a5a      	ldr	r2, [pc, #360]	; (8003c40 <HAL_RCC_OscConfig+0x4c4>)
 8003ad8:	f023 0301 	bic.w	r3, r3, #1
 8003adc:	6213      	str	r3, [r2, #32]
 8003ade:	4b58      	ldr	r3, [pc, #352]	; (8003c40 <HAL_RCC_OscConfig+0x4c4>)
 8003ae0:	6a1b      	ldr	r3, [r3, #32]
 8003ae2:	4a57      	ldr	r2, [pc, #348]	; (8003c40 <HAL_RCC_OscConfig+0x4c4>)
 8003ae4:	f023 0304 	bic.w	r3, r3, #4
 8003ae8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	68db      	ldr	r3, [r3, #12]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d015      	beq.n	8003b1e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003af2:	f7fe faf9 	bl	80020e8 <HAL_GetTick>
 8003af6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003af8:	e00a      	b.n	8003b10 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003afa:	f7fe faf5 	bl	80020e8 <HAL_GetTick>
 8003afe:	4602      	mov	r2, r0
 8003b00:	693b      	ldr	r3, [r7, #16]
 8003b02:	1ad3      	subs	r3, r2, r3
 8003b04:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b08:	4293      	cmp	r3, r2
 8003b0a:	d901      	bls.n	8003b10 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003b0c:	2303      	movs	r3, #3
 8003b0e:	e0b1      	b.n	8003c74 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b10:	4b4b      	ldr	r3, [pc, #300]	; (8003c40 <HAL_RCC_OscConfig+0x4c4>)
 8003b12:	6a1b      	ldr	r3, [r3, #32]
 8003b14:	f003 0302 	and.w	r3, r3, #2
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d0ee      	beq.n	8003afa <HAL_RCC_OscConfig+0x37e>
 8003b1c:	e014      	b.n	8003b48 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b1e:	f7fe fae3 	bl	80020e8 <HAL_GetTick>
 8003b22:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b24:	e00a      	b.n	8003b3c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b26:	f7fe fadf 	bl	80020e8 <HAL_GetTick>
 8003b2a:	4602      	mov	r2, r0
 8003b2c:	693b      	ldr	r3, [r7, #16]
 8003b2e:	1ad3      	subs	r3, r2, r3
 8003b30:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b34:	4293      	cmp	r3, r2
 8003b36:	d901      	bls.n	8003b3c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003b38:	2303      	movs	r3, #3
 8003b3a:	e09b      	b.n	8003c74 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b3c:	4b40      	ldr	r3, [pc, #256]	; (8003c40 <HAL_RCC_OscConfig+0x4c4>)
 8003b3e:	6a1b      	ldr	r3, [r3, #32]
 8003b40:	f003 0302 	and.w	r3, r3, #2
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d1ee      	bne.n	8003b26 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003b48:	7dfb      	ldrb	r3, [r7, #23]
 8003b4a:	2b01      	cmp	r3, #1
 8003b4c:	d105      	bne.n	8003b5a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b4e:	4b3c      	ldr	r3, [pc, #240]	; (8003c40 <HAL_RCC_OscConfig+0x4c4>)
 8003b50:	69db      	ldr	r3, [r3, #28]
 8003b52:	4a3b      	ldr	r2, [pc, #236]	; (8003c40 <HAL_RCC_OscConfig+0x4c4>)
 8003b54:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b58:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	69db      	ldr	r3, [r3, #28]
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	f000 8087 	beq.w	8003c72 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003b64:	4b36      	ldr	r3, [pc, #216]	; (8003c40 <HAL_RCC_OscConfig+0x4c4>)
 8003b66:	685b      	ldr	r3, [r3, #4]
 8003b68:	f003 030c 	and.w	r3, r3, #12
 8003b6c:	2b08      	cmp	r3, #8
 8003b6e:	d061      	beq.n	8003c34 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	69db      	ldr	r3, [r3, #28]
 8003b74:	2b02      	cmp	r3, #2
 8003b76:	d146      	bne.n	8003c06 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b78:	4b33      	ldr	r3, [pc, #204]	; (8003c48 <HAL_RCC_OscConfig+0x4cc>)
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b7e:	f7fe fab3 	bl	80020e8 <HAL_GetTick>
 8003b82:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b84:	e008      	b.n	8003b98 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b86:	f7fe faaf 	bl	80020e8 <HAL_GetTick>
 8003b8a:	4602      	mov	r2, r0
 8003b8c:	693b      	ldr	r3, [r7, #16]
 8003b8e:	1ad3      	subs	r3, r2, r3
 8003b90:	2b02      	cmp	r3, #2
 8003b92:	d901      	bls.n	8003b98 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003b94:	2303      	movs	r3, #3
 8003b96:	e06d      	b.n	8003c74 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b98:	4b29      	ldr	r3, [pc, #164]	; (8003c40 <HAL_RCC_OscConfig+0x4c4>)
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d1f0      	bne.n	8003b86 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6a1b      	ldr	r3, [r3, #32]
 8003ba8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003bac:	d108      	bne.n	8003bc0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003bae:	4b24      	ldr	r3, [pc, #144]	; (8003c40 <HAL_RCC_OscConfig+0x4c4>)
 8003bb0:	685b      	ldr	r3, [r3, #4]
 8003bb2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	689b      	ldr	r3, [r3, #8]
 8003bba:	4921      	ldr	r1, [pc, #132]	; (8003c40 <HAL_RCC_OscConfig+0x4c4>)
 8003bbc:	4313      	orrs	r3, r2
 8003bbe:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003bc0:	4b1f      	ldr	r3, [pc, #124]	; (8003c40 <HAL_RCC_OscConfig+0x4c4>)
 8003bc2:	685b      	ldr	r3, [r3, #4]
 8003bc4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6a19      	ldr	r1, [r3, #32]
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bd0:	430b      	orrs	r3, r1
 8003bd2:	491b      	ldr	r1, [pc, #108]	; (8003c40 <HAL_RCC_OscConfig+0x4c4>)
 8003bd4:	4313      	orrs	r3, r2
 8003bd6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003bd8:	4b1b      	ldr	r3, [pc, #108]	; (8003c48 <HAL_RCC_OscConfig+0x4cc>)
 8003bda:	2201      	movs	r2, #1
 8003bdc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bde:	f7fe fa83 	bl	80020e8 <HAL_GetTick>
 8003be2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003be4:	e008      	b.n	8003bf8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003be6:	f7fe fa7f 	bl	80020e8 <HAL_GetTick>
 8003bea:	4602      	mov	r2, r0
 8003bec:	693b      	ldr	r3, [r7, #16]
 8003bee:	1ad3      	subs	r3, r2, r3
 8003bf0:	2b02      	cmp	r3, #2
 8003bf2:	d901      	bls.n	8003bf8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003bf4:	2303      	movs	r3, #3
 8003bf6:	e03d      	b.n	8003c74 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003bf8:	4b11      	ldr	r3, [pc, #68]	; (8003c40 <HAL_RCC_OscConfig+0x4c4>)
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d0f0      	beq.n	8003be6 <HAL_RCC_OscConfig+0x46a>
 8003c04:	e035      	b.n	8003c72 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c06:	4b10      	ldr	r3, [pc, #64]	; (8003c48 <HAL_RCC_OscConfig+0x4cc>)
 8003c08:	2200      	movs	r2, #0
 8003c0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c0c:	f7fe fa6c 	bl	80020e8 <HAL_GetTick>
 8003c10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c12:	e008      	b.n	8003c26 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c14:	f7fe fa68 	bl	80020e8 <HAL_GetTick>
 8003c18:	4602      	mov	r2, r0
 8003c1a:	693b      	ldr	r3, [r7, #16]
 8003c1c:	1ad3      	subs	r3, r2, r3
 8003c1e:	2b02      	cmp	r3, #2
 8003c20:	d901      	bls.n	8003c26 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003c22:	2303      	movs	r3, #3
 8003c24:	e026      	b.n	8003c74 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c26:	4b06      	ldr	r3, [pc, #24]	; (8003c40 <HAL_RCC_OscConfig+0x4c4>)
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d1f0      	bne.n	8003c14 <HAL_RCC_OscConfig+0x498>
 8003c32:	e01e      	b.n	8003c72 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	69db      	ldr	r3, [r3, #28]
 8003c38:	2b01      	cmp	r3, #1
 8003c3a:	d107      	bne.n	8003c4c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003c3c:	2301      	movs	r3, #1
 8003c3e:	e019      	b.n	8003c74 <HAL_RCC_OscConfig+0x4f8>
 8003c40:	40021000 	.word	0x40021000
 8003c44:	40007000 	.word	0x40007000
 8003c48:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003c4c:	4b0b      	ldr	r3, [pc, #44]	; (8003c7c <HAL_RCC_OscConfig+0x500>)
 8003c4e:	685b      	ldr	r3, [r3, #4]
 8003c50:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6a1b      	ldr	r3, [r3, #32]
 8003c5c:	429a      	cmp	r2, r3
 8003c5e:	d106      	bne.n	8003c6e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c6a:	429a      	cmp	r2, r3
 8003c6c:	d001      	beq.n	8003c72 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003c6e:	2301      	movs	r3, #1
 8003c70:	e000      	b.n	8003c74 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003c72:	2300      	movs	r3, #0
}
 8003c74:	4618      	mov	r0, r3
 8003c76:	3718      	adds	r7, #24
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	bd80      	pop	{r7, pc}
 8003c7c:	40021000 	.word	0x40021000

08003c80 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b084      	sub	sp, #16
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
 8003c88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d101      	bne.n	8003c94 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003c90:	2301      	movs	r3, #1
 8003c92:	e0d0      	b.n	8003e36 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003c94:	4b6a      	ldr	r3, [pc, #424]	; (8003e40 <HAL_RCC_ClockConfig+0x1c0>)
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f003 0307 	and.w	r3, r3, #7
 8003c9c:	683a      	ldr	r2, [r7, #0]
 8003c9e:	429a      	cmp	r2, r3
 8003ca0:	d910      	bls.n	8003cc4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ca2:	4b67      	ldr	r3, [pc, #412]	; (8003e40 <HAL_RCC_ClockConfig+0x1c0>)
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f023 0207 	bic.w	r2, r3, #7
 8003caa:	4965      	ldr	r1, [pc, #404]	; (8003e40 <HAL_RCC_ClockConfig+0x1c0>)
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	4313      	orrs	r3, r2
 8003cb0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cb2:	4b63      	ldr	r3, [pc, #396]	; (8003e40 <HAL_RCC_ClockConfig+0x1c0>)
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f003 0307 	and.w	r3, r3, #7
 8003cba:	683a      	ldr	r2, [r7, #0]
 8003cbc:	429a      	cmp	r2, r3
 8003cbe:	d001      	beq.n	8003cc4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003cc0:	2301      	movs	r3, #1
 8003cc2:	e0b8      	b.n	8003e36 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f003 0302 	and.w	r3, r3, #2
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d020      	beq.n	8003d12 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f003 0304 	and.w	r3, r3, #4
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d005      	beq.n	8003ce8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003cdc:	4b59      	ldr	r3, [pc, #356]	; (8003e44 <HAL_RCC_ClockConfig+0x1c4>)
 8003cde:	685b      	ldr	r3, [r3, #4]
 8003ce0:	4a58      	ldr	r2, [pc, #352]	; (8003e44 <HAL_RCC_ClockConfig+0x1c4>)
 8003ce2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003ce6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f003 0308 	and.w	r3, r3, #8
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d005      	beq.n	8003d00 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003cf4:	4b53      	ldr	r3, [pc, #332]	; (8003e44 <HAL_RCC_ClockConfig+0x1c4>)
 8003cf6:	685b      	ldr	r3, [r3, #4]
 8003cf8:	4a52      	ldr	r2, [pc, #328]	; (8003e44 <HAL_RCC_ClockConfig+0x1c4>)
 8003cfa:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003cfe:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d00:	4b50      	ldr	r3, [pc, #320]	; (8003e44 <HAL_RCC_ClockConfig+0x1c4>)
 8003d02:	685b      	ldr	r3, [r3, #4]
 8003d04:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	689b      	ldr	r3, [r3, #8]
 8003d0c:	494d      	ldr	r1, [pc, #308]	; (8003e44 <HAL_RCC_ClockConfig+0x1c4>)
 8003d0e:	4313      	orrs	r3, r2
 8003d10:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f003 0301 	and.w	r3, r3, #1
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d040      	beq.n	8003da0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	685b      	ldr	r3, [r3, #4]
 8003d22:	2b01      	cmp	r3, #1
 8003d24:	d107      	bne.n	8003d36 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d26:	4b47      	ldr	r3, [pc, #284]	; (8003e44 <HAL_RCC_ClockConfig+0x1c4>)
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d115      	bne.n	8003d5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d32:	2301      	movs	r3, #1
 8003d34:	e07f      	b.n	8003e36 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	685b      	ldr	r3, [r3, #4]
 8003d3a:	2b02      	cmp	r3, #2
 8003d3c:	d107      	bne.n	8003d4e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d3e:	4b41      	ldr	r3, [pc, #260]	; (8003e44 <HAL_RCC_ClockConfig+0x1c4>)
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d109      	bne.n	8003d5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d4a:	2301      	movs	r3, #1
 8003d4c:	e073      	b.n	8003e36 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d4e:	4b3d      	ldr	r3, [pc, #244]	; (8003e44 <HAL_RCC_ClockConfig+0x1c4>)
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f003 0302 	and.w	r3, r3, #2
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d101      	bne.n	8003d5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d5a:	2301      	movs	r3, #1
 8003d5c:	e06b      	b.n	8003e36 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003d5e:	4b39      	ldr	r3, [pc, #228]	; (8003e44 <HAL_RCC_ClockConfig+0x1c4>)
 8003d60:	685b      	ldr	r3, [r3, #4]
 8003d62:	f023 0203 	bic.w	r2, r3, #3
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	685b      	ldr	r3, [r3, #4]
 8003d6a:	4936      	ldr	r1, [pc, #216]	; (8003e44 <HAL_RCC_ClockConfig+0x1c4>)
 8003d6c:	4313      	orrs	r3, r2
 8003d6e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003d70:	f7fe f9ba 	bl	80020e8 <HAL_GetTick>
 8003d74:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d76:	e00a      	b.n	8003d8e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d78:	f7fe f9b6 	bl	80020e8 <HAL_GetTick>
 8003d7c:	4602      	mov	r2, r0
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	1ad3      	subs	r3, r2, r3
 8003d82:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d86:	4293      	cmp	r3, r2
 8003d88:	d901      	bls.n	8003d8e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003d8a:	2303      	movs	r3, #3
 8003d8c:	e053      	b.n	8003e36 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d8e:	4b2d      	ldr	r3, [pc, #180]	; (8003e44 <HAL_RCC_ClockConfig+0x1c4>)
 8003d90:	685b      	ldr	r3, [r3, #4]
 8003d92:	f003 020c 	and.w	r2, r3, #12
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	685b      	ldr	r3, [r3, #4]
 8003d9a:	009b      	lsls	r3, r3, #2
 8003d9c:	429a      	cmp	r2, r3
 8003d9e:	d1eb      	bne.n	8003d78 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003da0:	4b27      	ldr	r3, [pc, #156]	; (8003e40 <HAL_RCC_ClockConfig+0x1c0>)
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f003 0307 	and.w	r3, r3, #7
 8003da8:	683a      	ldr	r2, [r7, #0]
 8003daa:	429a      	cmp	r2, r3
 8003dac:	d210      	bcs.n	8003dd0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003dae:	4b24      	ldr	r3, [pc, #144]	; (8003e40 <HAL_RCC_ClockConfig+0x1c0>)
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f023 0207 	bic.w	r2, r3, #7
 8003db6:	4922      	ldr	r1, [pc, #136]	; (8003e40 <HAL_RCC_ClockConfig+0x1c0>)
 8003db8:	683b      	ldr	r3, [r7, #0]
 8003dba:	4313      	orrs	r3, r2
 8003dbc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003dbe:	4b20      	ldr	r3, [pc, #128]	; (8003e40 <HAL_RCC_ClockConfig+0x1c0>)
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f003 0307 	and.w	r3, r3, #7
 8003dc6:	683a      	ldr	r2, [r7, #0]
 8003dc8:	429a      	cmp	r2, r3
 8003dca:	d001      	beq.n	8003dd0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003dcc:	2301      	movs	r3, #1
 8003dce:	e032      	b.n	8003e36 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f003 0304 	and.w	r3, r3, #4
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d008      	beq.n	8003dee <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ddc:	4b19      	ldr	r3, [pc, #100]	; (8003e44 <HAL_RCC_ClockConfig+0x1c4>)
 8003dde:	685b      	ldr	r3, [r3, #4]
 8003de0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	68db      	ldr	r3, [r3, #12]
 8003de8:	4916      	ldr	r1, [pc, #88]	; (8003e44 <HAL_RCC_ClockConfig+0x1c4>)
 8003dea:	4313      	orrs	r3, r2
 8003dec:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f003 0308 	and.w	r3, r3, #8
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d009      	beq.n	8003e0e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003dfa:	4b12      	ldr	r3, [pc, #72]	; (8003e44 <HAL_RCC_ClockConfig+0x1c4>)
 8003dfc:	685b      	ldr	r3, [r3, #4]
 8003dfe:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	691b      	ldr	r3, [r3, #16]
 8003e06:	00db      	lsls	r3, r3, #3
 8003e08:	490e      	ldr	r1, [pc, #56]	; (8003e44 <HAL_RCC_ClockConfig+0x1c4>)
 8003e0a:	4313      	orrs	r3, r2
 8003e0c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003e0e:	f000 f821 	bl	8003e54 <HAL_RCC_GetSysClockFreq>
 8003e12:	4602      	mov	r2, r0
 8003e14:	4b0b      	ldr	r3, [pc, #44]	; (8003e44 <HAL_RCC_ClockConfig+0x1c4>)
 8003e16:	685b      	ldr	r3, [r3, #4]
 8003e18:	091b      	lsrs	r3, r3, #4
 8003e1a:	f003 030f 	and.w	r3, r3, #15
 8003e1e:	490a      	ldr	r1, [pc, #40]	; (8003e48 <HAL_RCC_ClockConfig+0x1c8>)
 8003e20:	5ccb      	ldrb	r3, [r1, r3]
 8003e22:	fa22 f303 	lsr.w	r3, r2, r3
 8003e26:	4a09      	ldr	r2, [pc, #36]	; (8003e4c <HAL_RCC_ClockConfig+0x1cc>)
 8003e28:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003e2a:	4b09      	ldr	r3, [pc, #36]	; (8003e50 <HAL_RCC_ClockConfig+0x1d0>)
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	4618      	mov	r0, r3
 8003e30:	f7fe f918 	bl	8002064 <HAL_InitTick>

  return HAL_OK;
 8003e34:	2300      	movs	r3, #0
}
 8003e36:	4618      	mov	r0, r3
 8003e38:	3710      	adds	r7, #16
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	bd80      	pop	{r7, pc}
 8003e3e:	bf00      	nop
 8003e40:	40022000 	.word	0x40022000
 8003e44:	40021000 	.word	0x40021000
 8003e48:	0800945c 	.word	0x0800945c
 8003e4c:	20000008 	.word	0x20000008
 8003e50:	2000000c 	.word	0x2000000c

08003e54 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e54:	b490      	push	{r4, r7}
 8003e56:	b08a      	sub	sp, #40	; 0x28
 8003e58:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003e5a:	4b29      	ldr	r3, [pc, #164]	; (8003f00 <HAL_RCC_GetSysClockFreq+0xac>)
 8003e5c:	1d3c      	adds	r4, r7, #4
 8003e5e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003e60:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003e64:	f240 2301 	movw	r3, #513	; 0x201
 8003e68:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003e6a:	2300      	movs	r3, #0
 8003e6c:	61fb      	str	r3, [r7, #28]
 8003e6e:	2300      	movs	r3, #0
 8003e70:	61bb      	str	r3, [r7, #24]
 8003e72:	2300      	movs	r3, #0
 8003e74:	627b      	str	r3, [r7, #36]	; 0x24
 8003e76:	2300      	movs	r3, #0
 8003e78:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003e7e:	4b21      	ldr	r3, [pc, #132]	; (8003f04 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003e80:	685b      	ldr	r3, [r3, #4]
 8003e82:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003e84:	69fb      	ldr	r3, [r7, #28]
 8003e86:	f003 030c 	and.w	r3, r3, #12
 8003e8a:	2b04      	cmp	r3, #4
 8003e8c:	d002      	beq.n	8003e94 <HAL_RCC_GetSysClockFreq+0x40>
 8003e8e:	2b08      	cmp	r3, #8
 8003e90:	d003      	beq.n	8003e9a <HAL_RCC_GetSysClockFreq+0x46>
 8003e92:	e02b      	b.n	8003eec <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003e94:	4b1c      	ldr	r3, [pc, #112]	; (8003f08 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003e96:	623b      	str	r3, [r7, #32]
      break;
 8003e98:	e02b      	b.n	8003ef2 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003e9a:	69fb      	ldr	r3, [r7, #28]
 8003e9c:	0c9b      	lsrs	r3, r3, #18
 8003e9e:	f003 030f 	and.w	r3, r3, #15
 8003ea2:	3328      	adds	r3, #40	; 0x28
 8003ea4:	443b      	add	r3, r7
 8003ea6:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003eaa:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003eac:	69fb      	ldr	r3, [r7, #28]
 8003eae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d012      	beq.n	8003edc <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003eb6:	4b13      	ldr	r3, [pc, #76]	; (8003f04 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003eb8:	685b      	ldr	r3, [r3, #4]
 8003eba:	0c5b      	lsrs	r3, r3, #17
 8003ebc:	f003 0301 	and.w	r3, r3, #1
 8003ec0:	3328      	adds	r3, #40	; 0x28
 8003ec2:	443b      	add	r3, r7
 8003ec4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003ec8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003eca:	697b      	ldr	r3, [r7, #20]
 8003ecc:	4a0e      	ldr	r2, [pc, #56]	; (8003f08 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003ece:	fb03 f202 	mul.w	r2, r3, r2
 8003ed2:	69bb      	ldr	r3, [r7, #24]
 8003ed4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ed8:	627b      	str	r3, [r7, #36]	; 0x24
 8003eda:	e004      	b.n	8003ee6 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003edc:	697b      	ldr	r3, [r7, #20]
 8003ede:	4a0b      	ldr	r2, [pc, #44]	; (8003f0c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003ee0:	fb02 f303 	mul.w	r3, r2, r3
 8003ee4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ee8:	623b      	str	r3, [r7, #32]
      break;
 8003eea:	e002      	b.n	8003ef2 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003eec:	4b06      	ldr	r3, [pc, #24]	; (8003f08 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003eee:	623b      	str	r3, [r7, #32]
      break;
 8003ef0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003ef2:	6a3b      	ldr	r3, [r7, #32]
}
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	3728      	adds	r7, #40	; 0x28
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	bc90      	pop	{r4, r7}
 8003efc:	4770      	bx	lr
 8003efe:	bf00      	nop
 8003f00:	08008f3c 	.word	0x08008f3c
 8003f04:	40021000 	.word	0x40021000
 8003f08:	007a1200 	.word	0x007a1200
 8003f0c:	003d0900 	.word	0x003d0900

08003f10 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003f10:	b480      	push	{r7}
 8003f12:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003f14:	4b02      	ldr	r3, [pc, #8]	; (8003f20 <HAL_RCC_GetHCLKFreq+0x10>)
 8003f16:	681b      	ldr	r3, [r3, #0]
}
 8003f18:	4618      	mov	r0, r3
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	bc80      	pop	{r7}
 8003f1e:	4770      	bx	lr
 8003f20:	20000008 	.word	0x20000008

08003f24 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003f24:	b580      	push	{r7, lr}
 8003f26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003f28:	f7ff fff2 	bl	8003f10 <HAL_RCC_GetHCLKFreq>
 8003f2c:	4602      	mov	r2, r0
 8003f2e:	4b05      	ldr	r3, [pc, #20]	; (8003f44 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003f30:	685b      	ldr	r3, [r3, #4]
 8003f32:	0a1b      	lsrs	r3, r3, #8
 8003f34:	f003 0307 	and.w	r3, r3, #7
 8003f38:	4903      	ldr	r1, [pc, #12]	; (8003f48 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003f3a:	5ccb      	ldrb	r3, [r1, r3]
 8003f3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f40:	4618      	mov	r0, r3
 8003f42:	bd80      	pop	{r7, pc}
 8003f44:	40021000 	.word	0x40021000
 8003f48:	0800946c 	.word	0x0800946c

08003f4c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003f50:	f7ff ffde 	bl	8003f10 <HAL_RCC_GetHCLKFreq>
 8003f54:	4602      	mov	r2, r0
 8003f56:	4b05      	ldr	r3, [pc, #20]	; (8003f6c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003f58:	685b      	ldr	r3, [r3, #4]
 8003f5a:	0adb      	lsrs	r3, r3, #11
 8003f5c:	f003 0307 	and.w	r3, r3, #7
 8003f60:	4903      	ldr	r1, [pc, #12]	; (8003f70 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003f62:	5ccb      	ldrb	r3, [r1, r3]
 8003f64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f68:	4618      	mov	r0, r3
 8003f6a:	bd80      	pop	{r7, pc}
 8003f6c:	40021000 	.word	0x40021000
 8003f70:	0800946c 	.word	0x0800946c

08003f74 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003f74:	b480      	push	{r7}
 8003f76:	b085      	sub	sp, #20
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003f7c:	4b0a      	ldr	r3, [pc, #40]	; (8003fa8 <RCC_Delay+0x34>)
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	4a0a      	ldr	r2, [pc, #40]	; (8003fac <RCC_Delay+0x38>)
 8003f82:	fba2 2303 	umull	r2, r3, r2, r3
 8003f86:	0a5b      	lsrs	r3, r3, #9
 8003f88:	687a      	ldr	r2, [r7, #4]
 8003f8a:	fb02 f303 	mul.w	r3, r2, r3
 8003f8e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003f90:	bf00      	nop
  }
  while (Delay --);
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	1e5a      	subs	r2, r3, #1
 8003f96:	60fa      	str	r2, [r7, #12]
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d1f9      	bne.n	8003f90 <RCC_Delay+0x1c>
}
 8003f9c:	bf00      	nop
 8003f9e:	bf00      	nop
 8003fa0:	3714      	adds	r7, #20
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	bc80      	pop	{r7}
 8003fa6:	4770      	bx	lr
 8003fa8:	20000008 	.word	0x20000008
 8003fac:	10624dd3 	.word	0x10624dd3

08003fb0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b086      	sub	sp, #24
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003fb8:	2300      	movs	r3, #0
 8003fba:	613b      	str	r3, [r7, #16]
 8003fbc:	2300      	movs	r3, #0
 8003fbe:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f003 0301 	and.w	r3, r3, #1
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d07d      	beq.n	80040c8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003fcc:	2300      	movs	r3, #0
 8003fce:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003fd0:	4b4f      	ldr	r3, [pc, #316]	; (8004110 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003fd2:	69db      	ldr	r3, [r3, #28]
 8003fd4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d10d      	bne.n	8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003fdc:	4b4c      	ldr	r3, [pc, #304]	; (8004110 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003fde:	69db      	ldr	r3, [r3, #28]
 8003fe0:	4a4b      	ldr	r2, [pc, #300]	; (8004110 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003fe2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003fe6:	61d3      	str	r3, [r2, #28]
 8003fe8:	4b49      	ldr	r3, [pc, #292]	; (8004110 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003fea:	69db      	ldr	r3, [r3, #28]
 8003fec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ff0:	60bb      	str	r3, [r7, #8]
 8003ff2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ff4:	2301      	movs	r3, #1
 8003ff6:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ff8:	4b46      	ldr	r3, [pc, #280]	; (8004114 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004000:	2b00      	cmp	r3, #0
 8004002:	d118      	bne.n	8004036 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004004:	4b43      	ldr	r3, [pc, #268]	; (8004114 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	4a42      	ldr	r2, [pc, #264]	; (8004114 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800400a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800400e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004010:	f7fe f86a 	bl	80020e8 <HAL_GetTick>
 8004014:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004016:	e008      	b.n	800402a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004018:	f7fe f866 	bl	80020e8 <HAL_GetTick>
 800401c:	4602      	mov	r2, r0
 800401e:	693b      	ldr	r3, [r7, #16]
 8004020:	1ad3      	subs	r3, r2, r3
 8004022:	2b64      	cmp	r3, #100	; 0x64
 8004024:	d901      	bls.n	800402a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8004026:	2303      	movs	r3, #3
 8004028:	e06d      	b.n	8004106 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800402a:	4b3a      	ldr	r3, [pc, #232]	; (8004114 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004032:	2b00      	cmp	r3, #0
 8004034:	d0f0      	beq.n	8004018 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004036:	4b36      	ldr	r3, [pc, #216]	; (8004110 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004038:	6a1b      	ldr	r3, [r3, #32]
 800403a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800403e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	2b00      	cmp	r3, #0
 8004044:	d02e      	beq.n	80040a4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	685b      	ldr	r3, [r3, #4]
 800404a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800404e:	68fa      	ldr	r2, [r7, #12]
 8004050:	429a      	cmp	r2, r3
 8004052:	d027      	beq.n	80040a4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004054:	4b2e      	ldr	r3, [pc, #184]	; (8004110 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004056:	6a1b      	ldr	r3, [r3, #32]
 8004058:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800405c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800405e:	4b2e      	ldr	r3, [pc, #184]	; (8004118 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004060:	2201      	movs	r2, #1
 8004062:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004064:	4b2c      	ldr	r3, [pc, #176]	; (8004118 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004066:	2200      	movs	r2, #0
 8004068:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800406a:	4a29      	ldr	r2, [pc, #164]	; (8004110 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	f003 0301 	and.w	r3, r3, #1
 8004076:	2b00      	cmp	r3, #0
 8004078:	d014      	beq.n	80040a4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800407a:	f7fe f835 	bl	80020e8 <HAL_GetTick>
 800407e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004080:	e00a      	b.n	8004098 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004082:	f7fe f831 	bl	80020e8 <HAL_GetTick>
 8004086:	4602      	mov	r2, r0
 8004088:	693b      	ldr	r3, [r7, #16]
 800408a:	1ad3      	subs	r3, r2, r3
 800408c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004090:	4293      	cmp	r3, r2
 8004092:	d901      	bls.n	8004098 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004094:	2303      	movs	r3, #3
 8004096:	e036      	b.n	8004106 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004098:	4b1d      	ldr	r3, [pc, #116]	; (8004110 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800409a:	6a1b      	ldr	r3, [r3, #32]
 800409c:	f003 0302 	and.w	r3, r3, #2
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d0ee      	beq.n	8004082 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80040a4:	4b1a      	ldr	r3, [pc, #104]	; (8004110 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80040a6:	6a1b      	ldr	r3, [r3, #32]
 80040a8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	685b      	ldr	r3, [r3, #4]
 80040b0:	4917      	ldr	r1, [pc, #92]	; (8004110 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80040b2:	4313      	orrs	r3, r2
 80040b4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80040b6:	7dfb      	ldrb	r3, [r7, #23]
 80040b8:	2b01      	cmp	r3, #1
 80040ba:	d105      	bne.n	80040c8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80040bc:	4b14      	ldr	r3, [pc, #80]	; (8004110 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80040be:	69db      	ldr	r3, [r3, #28]
 80040c0:	4a13      	ldr	r2, [pc, #76]	; (8004110 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80040c2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80040c6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f003 0302 	and.w	r3, r3, #2
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d008      	beq.n	80040e6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80040d4:	4b0e      	ldr	r3, [pc, #56]	; (8004110 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80040d6:	685b      	ldr	r3, [r3, #4]
 80040d8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	689b      	ldr	r3, [r3, #8]
 80040e0:	490b      	ldr	r1, [pc, #44]	; (8004110 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80040e2:	4313      	orrs	r3, r2
 80040e4:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f003 0310 	and.w	r3, r3, #16
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d008      	beq.n	8004104 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80040f2:	4b07      	ldr	r3, [pc, #28]	; (8004110 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80040f4:	685b      	ldr	r3, [r3, #4]
 80040f6:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	68db      	ldr	r3, [r3, #12]
 80040fe:	4904      	ldr	r1, [pc, #16]	; (8004110 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004100:	4313      	orrs	r3, r2
 8004102:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004104:	2300      	movs	r3, #0
}
 8004106:	4618      	mov	r0, r3
 8004108:	3718      	adds	r7, #24
 800410a:	46bd      	mov	sp, r7
 800410c:	bd80      	pop	{r7, pc}
 800410e:	bf00      	nop
 8004110:	40021000 	.word	0x40021000
 8004114:	40007000 	.word	0x40007000
 8004118:	42420440 	.word	0x42420440

0800411c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800411c:	b590      	push	{r4, r7, lr}
 800411e:	b08d      	sub	sp, #52	; 0x34
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004124:	4b58      	ldr	r3, [pc, #352]	; (8004288 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 8004126:	f107 040c 	add.w	r4, r7, #12
 800412a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800412c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004130:	f240 2301 	movw	r3, #513	; 0x201
 8004134:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8004136:	2300      	movs	r3, #0
 8004138:	627b      	str	r3, [r7, #36]	; 0x24
 800413a:	2300      	movs	r3, #0
 800413c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800413e:	2300      	movs	r3, #0
 8004140:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8004142:	2300      	movs	r3, #0
 8004144:	61fb      	str	r3, [r7, #28]
 8004146:	2300      	movs	r3, #0
 8004148:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	2b10      	cmp	r3, #16
 800414e:	d00a      	beq.n	8004166 <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2b10      	cmp	r3, #16
 8004154:	f200 808e 	bhi.w	8004274 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2b01      	cmp	r3, #1
 800415c:	d049      	beq.n	80041f2 <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	2b02      	cmp	r3, #2
 8004162:	d079      	beq.n	8004258 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8004164:	e086      	b.n	8004274 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
      temp_reg = RCC->CFGR;
 8004166:	4b49      	ldr	r3, [pc, #292]	; (800428c <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8004168:	685b      	ldr	r3, [r3, #4]
 800416a:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 800416c:	4b47      	ldr	r3, [pc, #284]	; (800428c <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004174:	2b00      	cmp	r3, #0
 8004176:	d07f      	beq.n	8004278 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004178:	69fb      	ldr	r3, [r7, #28]
 800417a:	0c9b      	lsrs	r3, r3, #18
 800417c:	f003 030f 	and.w	r3, r3, #15
 8004180:	3330      	adds	r3, #48	; 0x30
 8004182:	443b      	add	r3, r7
 8004184:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004188:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800418a:	69fb      	ldr	r3, [r7, #28]
 800418c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004190:	2b00      	cmp	r3, #0
 8004192:	d017      	beq.n	80041c4 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004194:	4b3d      	ldr	r3, [pc, #244]	; (800428c <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8004196:	685b      	ldr	r3, [r3, #4]
 8004198:	0c5b      	lsrs	r3, r3, #17
 800419a:	f003 0301 	and.w	r3, r3, #1
 800419e:	3330      	adds	r3, #48	; 0x30
 80041a0:	443b      	add	r3, r7
 80041a2:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80041a6:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80041a8:	69fb      	ldr	r3, [r7, #28]
 80041aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d00d      	beq.n	80041ce <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80041b2:	4a37      	ldr	r2, [pc, #220]	; (8004290 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 80041b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041b6:	fbb2 f2f3 	udiv	r2, r2, r3
 80041ba:	6a3b      	ldr	r3, [r7, #32]
 80041bc:	fb02 f303 	mul.w	r3, r2, r3
 80041c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80041c2:	e004      	b.n	80041ce <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80041c4:	6a3b      	ldr	r3, [r7, #32]
 80041c6:	4a33      	ldr	r2, [pc, #204]	; (8004294 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80041c8:	fb02 f303 	mul.w	r3, r2, r3
 80041cc:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80041ce:	4b2f      	ldr	r3, [pc, #188]	; (800428c <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80041d0:	685b      	ldr	r3, [r3, #4]
 80041d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80041d6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80041da:	d102      	bne.n	80041e2 <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
          frequency = pllclk;
 80041dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041de:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80041e0:	e04a      	b.n	8004278 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
          frequency = (pllclk * 2) / 3;
 80041e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041e4:	005b      	lsls	r3, r3, #1
 80041e6:	4a2c      	ldr	r2, [pc, #176]	; (8004298 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 80041e8:	fba2 2303 	umull	r2, r3, r2, r3
 80041ec:	085b      	lsrs	r3, r3, #1
 80041ee:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80041f0:	e042      	b.n	8004278 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
      temp_reg = RCC->BDCR;
 80041f2:	4b26      	ldr	r3, [pc, #152]	; (800428c <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80041f4:	6a1b      	ldr	r3, [r3, #32]
 80041f6:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80041f8:	69fb      	ldr	r3, [r7, #28]
 80041fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004202:	d108      	bne.n	8004216 <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
 8004204:	69fb      	ldr	r3, [r7, #28]
 8004206:	f003 0302 	and.w	r3, r3, #2
 800420a:	2b00      	cmp	r3, #0
 800420c:	d003      	beq.n	8004216 <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
        frequency = LSE_VALUE;
 800420e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004212:	62bb      	str	r3, [r7, #40]	; 0x28
 8004214:	e01f      	b.n	8004256 <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8004216:	69fb      	ldr	r3, [r7, #28]
 8004218:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800421c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004220:	d109      	bne.n	8004236 <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
 8004222:	4b1a      	ldr	r3, [pc, #104]	; (800428c <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8004224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004226:	f003 0302 	and.w	r3, r3, #2
 800422a:	2b00      	cmp	r3, #0
 800422c:	d003      	beq.n	8004236 <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
        frequency = LSI_VALUE;
 800422e:	f649 4340 	movw	r3, #40000	; 0x9c40
 8004232:	62bb      	str	r3, [r7, #40]	; 0x28
 8004234:	e00f      	b.n	8004256 <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8004236:	69fb      	ldr	r3, [r7, #28]
 8004238:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800423c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004240:	d11c      	bne.n	800427c <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 8004242:	4b12      	ldr	r3, [pc, #72]	; (800428c <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800424a:	2b00      	cmp	r3, #0
 800424c:	d016      	beq.n	800427c <HAL_RCCEx_GetPeriphCLKFreq+0x160>
        frequency = HSE_VALUE / 128U;
 800424e:	f24f 4324 	movw	r3, #62500	; 0xf424
 8004252:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8004254:	e012      	b.n	800427c <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 8004256:	e011      	b.n	800427c <HAL_RCCEx_GetPeriphCLKFreq+0x160>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8004258:	f7ff fe78 	bl	8003f4c <HAL_RCC_GetPCLK2Freq>
 800425c:	4602      	mov	r2, r0
 800425e:	4b0b      	ldr	r3, [pc, #44]	; (800428c <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8004260:	685b      	ldr	r3, [r3, #4]
 8004262:	0b9b      	lsrs	r3, r3, #14
 8004264:	f003 0303 	and.w	r3, r3, #3
 8004268:	3301      	adds	r3, #1
 800426a:	005b      	lsls	r3, r3, #1
 800426c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004270:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8004272:	e004      	b.n	800427e <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8004274:	bf00      	nop
 8004276:	e002      	b.n	800427e <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8004278:	bf00      	nop
 800427a:	e000      	b.n	800427e <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 800427c:	bf00      	nop
    }
  }
  return (frequency);
 800427e:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8004280:	4618      	mov	r0, r3
 8004282:	3734      	adds	r7, #52	; 0x34
 8004284:	46bd      	mov	sp, r7
 8004286:	bd90      	pop	{r4, r7, pc}
 8004288:	08008f4c 	.word	0x08008f4c
 800428c:	40021000 	.word	0x40021000
 8004290:	007a1200 	.word	0x007a1200
 8004294:	003d0900 	.word	0x003d0900
 8004298:	aaaaaaab 	.word	0xaaaaaaab

0800429c <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800429c:	b580      	push	{r7, lr}
 800429e:	b084      	sub	sp, #16
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 80042a4:	2300      	movs	r3, #0
 80042a6:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d101      	bne.n	80042b2 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80042ae:	2301      	movs	r3, #1
 80042b0:	e084      	b.n	80043bc <HAL_RTC_Init+0x120>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	7c5b      	ldrb	r3, [r3, #17]
 80042b6:	b2db      	uxtb	r3, r3
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d105      	bne.n	80042c8 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2200      	movs	r2, #0
 80042c0:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80042c2:	6878      	ldr	r0, [r7, #4]
 80042c4:	f7fd fbfc 	bl	8001ac0 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2202      	movs	r2, #2
 80042cc:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80042ce:	6878      	ldr	r0, [r7, #4]
 80042d0:	f000 f9c8 	bl	8004664 <HAL_RTC_WaitForSynchro>
 80042d4:	4603      	mov	r3, r0
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d004      	beq.n	80042e4 <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	2204      	movs	r2, #4
 80042de:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 80042e0:	2301      	movs	r3, #1
 80042e2:	e06b      	b.n	80043bc <HAL_RTC_Init+0x120>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80042e4:	6878      	ldr	r0, [r7, #4]
 80042e6:	f000 fa81 	bl	80047ec <RTC_EnterInitMode>
 80042ea:	4603      	mov	r3, r0
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d004      	beq.n	80042fa <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2204      	movs	r2, #4
 80042f4:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 80042f6:	2301      	movs	r3, #1
 80042f8:	e060      	b.n	80043bc <HAL_RTC_Init+0x120>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	685a      	ldr	r2, [r3, #4]
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f022 0207 	bic.w	r2, r2, #7
 8004308:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	689b      	ldr	r3, [r3, #8]
 800430e:	2b00      	cmp	r3, #0
 8004310:	d005      	beq.n	800431e <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 8004312:	4b2c      	ldr	r3, [pc, #176]	; (80043c4 <HAL_RTC_Init+0x128>)
 8004314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004316:	4a2b      	ldr	r2, [pc, #172]	; (80043c4 <HAL_RTC_Init+0x128>)
 8004318:	f023 0301 	bic.w	r3, r3, #1
 800431c:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 800431e:	4b29      	ldr	r3, [pc, #164]	; (80043c4 <HAL_RTC_Init+0x128>)
 8004320:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004322:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	689b      	ldr	r3, [r3, #8]
 800432a:	4926      	ldr	r1, [pc, #152]	; (80043c4 <HAL_RTC_Init+0x128>)
 800432c:	4313      	orrs	r3, r2
 800432e:	62cb      	str	r3, [r1, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	685b      	ldr	r3, [r3, #4]
 8004334:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004338:	d003      	beq.n	8004342 <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	685b      	ldr	r3, [r3, #4]
 800433e:	60fb      	str	r3, [r7, #12]
 8004340:	e00e      	b.n	8004360 <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 8004342:	2001      	movs	r0, #1
 8004344:	f7ff feea 	bl	800411c <HAL_RCCEx_GetPeriphCLKFreq>
 8004348:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	2b00      	cmp	r3, #0
 800434e:	d104      	bne.n	800435a <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2204      	movs	r2, #4
 8004354:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 8004356:	2301      	movs	r3, #1
 8004358:	e030      	b.n	80043bc <HAL_RTC_Init+0x120>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	3b01      	subs	r3, #1
 800435e:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    MODIFY_REG(hrtc->Instance->PRLH, RTC_PRLH_PRL, (prescaler >> 16U));
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	689b      	ldr	r3, [r3, #8]
 8004366:	f023 010f 	bic.w	r1, r3, #15
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	0c1a      	lsrs	r2, r3, #16
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	430a      	orrs	r2, r1
 8004374:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hrtc->Instance->PRLL, RTC_PRLL_PRL, (prescaler & RTC_PRLL_PRL));
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	68db      	ldr	r3, [r3, #12]
 800437c:	0c1b      	lsrs	r3, r3, #16
 800437e:	041b      	lsls	r3, r3, #16
 8004380:	68fa      	ldr	r2, [r7, #12]
 8004382:	b291      	uxth	r1, r2
 8004384:	687a      	ldr	r2, [r7, #4]
 8004386:	6812      	ldr	r2, [r2, #0]
 8004388:	430b      	orrs	r3, r1
 800438a:	60d3      	str	r3, [r2, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 800438c:	6878      	ldr	r0, [r7, #4]
 800438e:	f000 fa55 	bl	800483c <RTC_ExitInitMode>
 8004392:	4603      	mov	r3, r0
 8004394:	2b00      	cmp	r3, #0
 8004396:	d004      	beq.n	80043a2 <HAL_RTC_Init+0x106>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2204      	movs	r2, #4
 800439c:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 800439e:	2301      	movs	r3, #1
 80043a0:	e00c      	b.n	80043bc <HAL_RTC_Init+0x120>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	2200      	movs	r2, #0
 80043a6:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2201      	movs	r2, #1
 80043ac:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	2201      	movs	r2, #1
 80043b2:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2201      	movs	r2, #1
 80043b8:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 80043ba:	2300      	movs	r3, #0
  }
}
 80043bc:	4618      	mov	r0, r3
 80043be:	3710      	adds	r7, #16
 80043c0:	46bd      	mov	sp, r7
 80043c2:	bd80      	pop	{r7, pc}
 80043c4:	40006c00 	.word	0x40006c00

080043c8 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80043c8:	b590      	push	{r4, r7, lr}
 80043ca:	b087      	sub	sp, #28
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	60f8      	str	r0, [r7, #12]
 80043d0:	60b9      	str	r1, [r7, #8]
 80043d2:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U;
 80043d4:	2300      	movs	r3, #0
 80043d6:	617b      	str	r3, [r7, #20]
 80043d8:	2300      	movs	r3, #0
 80043da:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d002      	beq.n	80043e8 <HAL_RTC_SetTime+0x20>
 80043e2:	68bb      	ldr	r3, [r7, #8]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d101      	bne.n	80043ec <HAL_RTC_SetTime+0x24>
  {
    return HAL_ERROR;
 80043e8:	2301      	movs	r3, #1
 80043ea:	e080      	b.n	80044ee <HAL_RTC_SetTime+0x126>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	7c1b      	ldrb	r3, [r3, #16]
 80043f0:	2b01      	cmp	r3, #1
 80043f2:	d101      	bne.n	80043f8 <HAL_RTC_SetTime+0x30>
 80043f4:	2302      	movs	r3, #2
 80043f6:	e07a      	b.n	80044ee <HAL_RTC_SetTime+0x126>
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	2201      	movs	r2, #1
 80043fc:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	2202      	movs	r2, #2
 8004402:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2b00      	cmp	r3, #0
 8004408:	d113      	bne.n	8004432 <HAL_RTC_SetTime+0x6a>
  {
    assert_param(IS_RTC_HOUR24(sTime->Hours));
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 800440a:	68bb      	ldr	r3, [r7, #8]
 800440c:	781b      	ldrb	r3, [r3, #0]
 800440e:	461a      	mov	r2, r3
 8004410:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8004414:	fb03 f202 	mul.w	r2, r3, r2
                              ((uint32_t)sTime->Minutes * 60U) + \
 8004418:	68bb      	ldr	r3, [r7, #8]
 800441a:	785b      	ldrb	r3, [r3, #1]
 800441c:	4619      	mov	r1, r3
 800441e:	460b      	mov	r3, r1
 8004420:	011b      	lsls	r3, r3, #4
 8004422:	1a5b      	subs	r3, r3, r1
 8004424:	009b      	lsls	r3, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8004426:	4413      	add	r3, r2
                              ((uint32_t)sTime->Seconds));
 8004428:	68ba      	ldr	r2, [r7, #8]
 800442a:	7892      	ldrb	r2, [r2, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 800442c:	4413      	add	r3, r2
 800442e:	617b      	str	r3, [r7, #20]
 8004430:	e01e      	b.n	8004470 <HAL_RTC_SetTime+0xa8>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));

    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8004432:	68bb      	ldr	r3, [r7, #8]
 8004434:	781b      	ldrb	r3, [r3, #0]
 8004436:	4618      	mov	r0, r3
 8004438:	f000 fa28 	bl	800488c <RTC_Bcd2ToByte>
 800443c:	4603      	mov	r3, r0
 800443e:	461a      	mov	r2, r3
 8004440:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8004444:	fb03 f402 	mul.w	r4, r3, r2
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 8004448:	68bb      	ldr	r3, [r7, #8]
 800444a:	785b      	ldrb	r3, [r3, #1]
 800444c:	4618      	mov	r0, r3
 800444e:	f000 fa1d 	bl	800488c <RTC_Bcd2ToByte>
 8004452:	4603      	mov	r3, r0
 8004454:	461a      	mov	r2, r3
 8004456:	4613      	mov	r3, r2
 8004458:	011b      	lsls	r3, r3, #4
 800445a:	1a9b      	subs	r3, r3, r2
 800445c:	009b      	lsls	r3, r3, #2
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 800445e:	441c      	add	r4, r3
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 8004460:	68bb      	ldr	r3, [r7, #8]
 8004462:	789b      	ldrb	r3, [r3, #2]
 8004464:	4618      	mov	r0, r3
 8004466:	f000 fa11 	bl	800488c <RTC_Bcd2ToByte>
 800446a:	4603      	mov	r3, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 800446c:	4423      	add	r3, r4
 800446e:	617b      	str	r3, [r7, #20]
  }

  /* Write time counter in RTC registers */
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8004470:	6979      	ldr	r1, [r7, #20]
 8004472:	68f8      	ldr	r0, [r7, #12]
 8004474:	f000 f953 	bl	800471e <RTC_WriteTimeCounter>
 8004478:	4603      	mov	r3, r0
 800447a:	2b00      	cmp	r3, #0
 800447c:	d007      	beq.n	800448e <HAL_RTC_SetTime+0xc6>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	2204      	movs	r2, #4
 8004482:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	2200      	movs	r2, #0
 8004488:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 800448a:	2301      	movs	r3, #1
 800448c:	e02f      	b.n	80044ee <HAL_RTC_SetTime+0x126>
  }
  else
  {
    /* Clear Second and overflow flags */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	685a      	ldr	r2, [r3, #4]
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f022 0205 	bic.w	r2, r2, #5
 800449c:	605a      	str	r2, [r3, #4]

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 800449e:	68f8      	ldr	r0, [r7, #12]
 80044a0:	f000 f964 	bl	800476c <RTC_ReadAlarmCounter>
 80044a4:	6138      	str	r0, [r7, #16]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 80044a6:	693b      	ldr	r3, [r7, #16]
 80044a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044ac:	d018      	beq.n	80044e0 <HAL_RTC_SetTime+0x118>
    {
      if (counter_alarm < counter_time)
 80044ae:	693a      	ldr	r2, [r7, #16]
 80044b0:	697b      	ldr	r3, [r7, #20]
 80044b2:	429a      	cmp	r2, r3
 80044b4:	d214      	bcs.n	80044e0 <HAL_RTC_SetTime+0x118>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 80044b6:	693b      	ldr	r3, [r7, #16]
 80044b8:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 80044bc:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80044c0:	613b      	str	r3, [r7, #16]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 80044c2:	6939      	ldr	r1, [r7, #16]
 80044c4:	68f8      	ldr	r0, [r7, #12]
 80044c6:	f000 f96a 	bl	800479e <RTC_WriteAlarmCounter>
 80044ca:	4603      	mov	r3, r0
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d007      	beq.n	80044e0 <HAL_RTC_SetTime+0x118>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	2204      	movs	r2, #4
 80044d4:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	2200      	movs	r2, #0
 80044da:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 80044dc:	2301      	movs	r3, #1
 80044de:	e006      	b.n	80044ee <HAL_RTC_SetTime+0x126>
        }
      }
    }

    hrtc->State = HAL_RTC_STATE_READY;
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	2201      	movs	r2, #1
 80044e4:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	2200      	movs	r2, #0
 80044ea:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 80044ec:	2300      	movs	r3, #0
  }
}
 80044ee:	4618      	mov	r0, r3
 80044f0:	371c      	adds	r7, #28
 80044f2:	46bd      	mov	sp, r7
 80044f4:	bd90      	pop	{r4, r7, pc}
	...

080044f8 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80044f8:	b580      	push	{r7, lr}
 80044fa:	b088      	sub	sp, #32
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	60f8      	str	r0, [r7, #12]
 8004500:	60b9      	str	r1, [r7, #8]
 8004502:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, hours = 0U;
 8004504:	2300      	movs	r3, #0
 8004506:	61fb      	str	r3, [r7, #28]
 8004508:	2300      	movs	r3, #0
 800450a:	61bb      	str	r3, [r7, #24]
 800450c:	2300      	movs	r3, #0
 800450e:	617b      	str	r3, [r7, #20]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	2b00      	cmp	r3, #0
 8004514:	d002      	beq.n	800451c <HAL_RTC_SetDate+0x24>
 8004516:	68bb      	ldr	r3, [r7, #8]
 8004518:	2b00      	cmp	r3, #0
 800451a:	d101      	bne.n	8004520 <HAL_RTC_SetDate+0x28>
  {
    return HAL_ERROR;
 800451c:	2301      	movs	r3, #1
 800451e:	e097      	b.n	8004650 <HAL_RTC_SetDate+0x158>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	7c1b      	ldrb	r3, [r3, #16]
 8004524:	2b01      	cmp	r3, #1
 8004526:	d101      	bne.n	800452c <HAL_RTC_SetDate+0x34>
 8004528:	2302      	movs	r3, #2
 800452a:	e091      	b.n	8004650 <HAL_RTC_SetDate+0x158>
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	2201      	movs	r2, #1
 8004530:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	2202      	movs	r2, #2
 8004536:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2b00      	cmp	r3, #0
 800453c:	d10c      	bne.n	8004558 <HAL_RTC_SetDate+0x60>
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = sDate->Year;
 800453e:	68bb      	ldr	r3, [r7, #8]
 8004540:	78da      	ldrb	r2, [r3, #3]
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 8004546:	68bb      	ldr	r3, [r7, #8]
 8004548:	785a      	ldrb	r2, [r3, #1]
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 800454e:	68bb      	ldr	r3, [r7, #8]
 8004550:	789a      	ldrb	r2, [r3, #2]
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	739a      	strb	r2, [r3, #14]
 8004556:	e01a      	b.n	800458e <HAL_RTC_SetDate+0x96>
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 8004558:	68bb      	ldr	r3, [r7, #8]
 800455a:	78db      	ldrb	r3, [r3, #3]
 800455c:	4618      	mov	r0, r3
 800455e:	f000 f995 	bl	800488c <RTC_Bcd2ToByte>
 8004562:	4603      	mov	r3, r0
 8004564:	461a      	mov	r2, r3
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 800456a:	68bb      	ldr	r3, [r7, #8]
 800456c:	785b      	ldrb	r3, [r3, #1]
 800456e:	4618      	mov	r0, r3
 8004570:	f000 f98c 	bl	800488c <RTC_Bcd2ToByte>
 8004574:	4603      	mov	r3, r0
 8004576:	461a      	mov	r2, r3
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 800457c:	68bb      	ldr	r3, [r7, #8]
 800457e:	789b      	ldrb	r3, [r3, #2]
 8004580:	4618      	mov	r0, r3
 8004582:	f000 f983 	bl	800488c <RTC_Bcd2ToByte>
 8004586:	4603      	mov	r3, r0
 8004588:	461a      	mov	r2, r3
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	739a      	strb	r2, [r3, #14]
  }

  /* WeekDay set by user can be ignored because automatically calculated */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	7bdb      	ldrb	r3, [r3, #15]
 8004592:	4618      	mov	r0, r3
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	7b59      	ldrb	r1, [r3, #13]
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	7b9b      	ldrb	r3, [r3, #14]
 800459c:	461a      	mov	r2, r3
 800459e:	f000 f993 	bl	80048c8 <RTC_WeekDayNum>
 80045a2:	4603      	mov	r3, r0
 80045a4:	461a      	mov	r2, r3
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	731a      	strb	r2, [r3, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	7b1a      	ldrb	r2, [r3, #12]
 80045ae:	68bb      	ldr	r3, [r7, #8]
 80045b0:	701a      	strb	r2, [r3, #0]

  /* Reset time to be aligned on the same day */
  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 80045b2:	68f8      	ldr	r0, [r7, #12]
 80045b4:	f000 f883 	bl	80046be <RTC_ReadTimeCounter>
 80045b8:	61f8      	str	r0, [r7, #28]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 80045ba:	69fb      	ldr	r3, [r7, #28]
 80045bc:	4a26      	ldr	r2, [pc, #152]	; (8004658 <HAL_RTC_SetDate+0x160>)
 80045be:	fba2 2303 	umull	r2, r3, r2, r3
 80045c2:	0adb      	lsrs	r3, r3, #11
 80045c4:	617b      	str	r3, [r7, #20]
  if (hours > 24U)
 80045c6:	697b      	ldr	r3, [r7, #20]
 80045c8:	2b18      	cmp	r3, #24
 80045ca:	d93a      	bls.n	8004642 <HAL_RTC_SetDate+0x14a>
  {
    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= ((hours / 24U) * 24U * 3600U);
 80045cc:	697b      	ldr	r3, [r7, #20]
 80045ce:	4a23      	ldr	r2, [pc, #140]	; (800465c <HAL_RTC_SetDate+0x164>)
 80045d0:	fba2 2303 	umull	r2, r3, r2, r3
 80045d4:	091b      	lsrs	r3, r3, #4
 80045d6:	4a22      	ldr	r2, [pc, #136]	; (8004660 <HAL_RTC_SetDate+0x168>)
 80045d8:	fb02 f303 	mul.w	r3, r2, r3
 80045dc:	69fa      	ldr	r2, [r7, #28]
 80045de:	1ad3      	subs	r3, r2, r3
 80045e0:	61fb      	str	r3, [r7, #28]
    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 80045e2:	69f9      	ldr	r1, [r7, #28]
 80045e4:	68f8      	ldr	r0, [r7, #12]
 80045e6:	f000 f89a 	bl	800471e <RTC_WriteTimeCounter>
 80045ea:	4603      	mov	r3, r0
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d007      	beq.n	8004600 <HAL_RTC_SetDate+0x108>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	2204      	movs	r2, #4
 80045f4:	745a      	strb	r2, [r3, #17]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	2200      	movs	r2, #0
 80045fa:	741a      	strb	r2, [r3, #16]

      return HAL_ERROR;
 80045fc:	2301      	movs	r3, #1
 80045fe:	e027      	b.n	8004650 <HAL_RTC_SetDate+0x158>
    }

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8004600:	68f8      	ldr	r0, [r7, #12]
 8004602:	f000 f8b3 	bl	800476c <RTC_ReadAlarmCounter>
 8004606:	61b8      	str	r0, [r7, #24]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8004608:	69bb      	ldr	r3, [r7, #24]
 800460a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800460e:	d018      	beq.n	8004642 <HAL_RTC_SetDate+0x14a>
    {
      if (counter_alarm < counter_time)
 8004610:	69ba      	ldr	r2, [r7, #24]
 8004612:	69fb      	ldr	r3, [r7, #28]
 8004614:	429a      	cmp	r2, r3
 8004616:	d214      	bcs.n	8004642 <HAL_RTC_SetDate+0x14a>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8004618:	69bb      	ldr	r3, [r7, #24]
 800461a:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 800461e:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8004622:	61bb      	str	r3, [r7, #24]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8004624:	69b9      	ldr	r1, [r7, #24]
 8004626:	68f8      	ldr	r0, [r7, #12]
 8004628:	f000 f8b9 	bl	800479e <RTC_WriteAlarmCounter>
 800462c:	4603      	mov	r3, r0
 800462e:	2b00      	cmp	r3, #0
 8004630:	d007      	beq.n	8004642 <HAL_RTC_SetDate+0x14a>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	2204      	movs	r2, #4
 8004636:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	2200      	movs	r2, #0
 800463c:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 800463e:	2301      	movs	r3, #1
 8004640:	e006      	b.n	8004650 <HAL_RTC_SetDate+0x158>
    }


  }

  hrtc->State = HAL_RTC_STATE_READY ;
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	2201      	movs	r2, #1
 8004646:	745a      	strb	r2, [r3, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	2200      	movs	r2, #0
 800464c:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 800464e:	2300      	movs	r3, #0
}
 8004650:	4618      	mov	r0, r3
 8004652:	3720      	adds	r7, #32
 8004654:	46bd      	mov	sp, r7
 8004656:	bd80      	pop	{r7, pc}
 8004658:	91a2b3c5 	.word	0x91a2b3c5
 800465c:	aaaaaaab 	.word	0xaaaaaaab
 8004660:	00015180 	.word	0x00015180

08004664 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004664:	b580      	push	{r7, lr}
 8004666:	b084      	sub	sp, #16
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800466c:	2300      	movs	r3, #0
 800466e:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2b00      	cmp	r3, #0
 8004674:	d101      	bne.n	800467a <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 8004676:	2301      	movs	r3, #1
 8004678:	e01d      	b.n	80046b6 <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	685a      	ldr	r2, [r3, #4]
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f022 0208 	bic.w	r2, r2, #8
 8004688:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 800468a:	f7fd fd2d 	bl	80020e8 <HAL_GetTick>
 800468e:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8004690:	e009      	b.n	80046a6 <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8004692:	f7fd fd29 	bl	80020e8 <HAL_GetTick>
 8004696:	4602      	mov	r2, r0
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	1ad3      	subs	r3, r2, r3
 800469c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80046a0:	d901      	bls.n	80046a6 <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 80046a2:	2303      	movs	r3, #3
 80046a4:	e007      	b.n	80046b6 <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	685b      	ldr	r3, [r3, #4]
 80046ac:	f003 0308 	and.w	r3, r3, #8
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d0ee      	beq.n	8004692 <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 80046b4:	2300      	movs	r3, #0
}
 80046b6:	4618      	mov	r0, r3
 80046b8:	3710      	adds	r7, #16
 80046ba:	46bd      	mov	sp, r7
 80046bc:	bd80      	pop	{r7, pc}

080046be <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 80046be:	b480      	push	{r7}
 80046c0:	b087      	sub	sp, #28
 80046c2:	af00      	add	r7, sp, #0
 80046c4:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 80046c6:	2300      	movs	r3, #0
 80046c8:	827b      	strh	r3, [r7, #18]
 80046ca:	2300      	movs	r3, #0
 80046cc:	823b      	strh	r3, [r7, #16]
 80046ce:	2300      	movs	r3, #0
 80046d0:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 80046d2:	2300      	movs	r3, #0
 80046d4:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	699b      	ldr	r3, [r3, #24]
 80046dc:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	69db      	ldr	r3, [r3, #28]
 80046e4:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	699b      	ldr	r3, [r3, #24]
 80046ec:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 80046ee:	8a7a      	ldrh	r2, [r7, #18]
 80046f0:	8a3b      	ldrh	r3, [r7, #16]
 80046f2:	429a      	cmp	r2, r3
 80046f4:	d008      	beq.n	8004708 <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 80046f6:	8a3b      	ldrh	r3, [r7, #16]
 80046f8:	041a      	lsls	r2, r3, #16
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	69db      	ldr	r3, [r3, #28]
 8004700:	b29b      	uxth	r3, r3
 8004702:	4313      	orrs	r3, r2
 8004704:	617b      	str	r3, [r7, #20]
 8004706:	e004      	b.n	8004712 <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 8004708:	8a7b      	ldrh	r3, [r7, #18]
 800470a:	041a      	lsls	r2, r3, #16
 800470c:	89fb      	ldrh	r3, [r7, #14]
 800470e:	4313      	orrs	r3, r2
 8004710:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 8004712:	697b      	ldr	r3, [r7, #20]
}
 8004714:	4618      	mov	r0, r3
 8004716:	371c      	adds	r7, #28
 8004718:	46bd      	mov	sp, r7
 800471a:	bc80      	pop	{r7}
 800471c:	4770      	bx	lr

0800471e <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 800471e:	b580      	push	{r7, lr}
 8004720:	b084      	sub	sp, #16
 8004722:	af00      	add	r7, sp, #0
 8004724:	6078      	str	r0, [r7, #4]
 8004726:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004728:	2300      	movs	r3, #0
 800472a:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800472c:	6878      	ldr	r0, [r7, #4]
 800472e:	f000 f85d 	bl	80047ec <RTC_EnterInitMode>
 8004732:	4603      	mov	r3, r0
 8004734:	2b00      	cmp	r3, #0
 8004736:	d002      	beq.n	800473e <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 8004738:	2301      	movs	r3, #1
 800473a:	73fb      	strb	r3, [r7, #15]
 800473c:	e011      	b.n	8004762 <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	683a      	ldr	r2, [r7, #0]
 8004744:	0c12      	lsrs	r2, r2, #16
 8004746:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	683a      	ldr	r2, [r7, #0]
 800474e:	b292      	uxth	r2, r2
 8004750:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8004752:	6878      	ldr	r0, [r7, #4]
 8004754:	f000 f872 	bl	800483c <RTC_ExitInitMode>
 8004758:	4603      	mov	r3, r0
 800475a:	2b00      	cmp	r3, #0
 800475c:	d001      	beq.n	8004762 <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 800475e:	2301      	movs	r3, #1
 8004760:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8004762:	7bfb      	ldrb	r3, [r7, #15]
}
 8004764:	4618      	mov	r0, r3
 8004766:	3710      	adds	r7, #16
 8004768:	46bd      	mov	sp, r7
 800476a:	bd80      	pop	{r7, pc}

0800476c <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 800476c:	b480      	push	{r7}
 800476e:	b085      	sub	sp, #20
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 8004774:	2300      	movs	r3, #0
 8004776:	81fb      	strh	r3, [r7, #14]
 8004778:	2300      	movs	r3, #0
 800477a:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	6a1b      	ldr	r3, [r3, #32]
 8004782:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800478a:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 800478c:	89fb      	ldrh	r3, [r7, #14]
 800478e:	041a      	lsls	r2, r3, #16
 8004790:	89bb      	ldrh	r3, [r7, #12]
 8004792:	4313      	orrs	r3, r2
}
 8004794:	4618      	mov	r0, r3
 8004796:	3714      	adds	r7, #20
 8004798:	46bd      	mov	sp, r7
 800479a:	bc80      	pop	{r7}
 800479c:	4770      	bx	lr

0800479e <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 800479e:	b580      	push	{r7, lr}
 80047a0:	b084      	sub	sp, #16
 80047a2:	af00      	add	r7, sp, #0
 80047a4:	6078      	str	r0, [r7, #4]
 80047a6:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80047a8:	2300      	movs	r3, #0
 80047aa:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80047ac:	6878      	ldr	r0, [r7, #4]
 80047ae:	f000 f81d 	bl	80047ec <RTC_EnterInitMode>
 80047b2:	4603      	mov	r3, r0
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d002      	beq.n	80047be <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 80047b8:	2301      	movs	r3, #1
 80047ba:	73fb      	strb	r3, [r7, #15]
 80047bc:	e011      	b.n	80047e2 <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	683a      	ldr	r2, [r7, #0]
 80047c4:	0c12      	lsrs	r2, r2, #16
 80047c6:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	683a      	ldr	r2, [r7, #0]
 80047ce:	b292      	uxth	r2, r2
 80047d0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 80047d2:	6878      	ldr	r0, [r7, #4]
 80047d4:	f000 f832 	bl	800483c <RTC_ExitInitMode>
 80047d8:	4603      	mov	r3, r0
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d001      	beq.n	80047e2 <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 80047de:	2301      	movs	r3, #1
 80047e0:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80047e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80047e4:	4618      	mov	r0, r3
 80047e6:	3710      	adds	r7, #16
 80047e8:	46bd      	mov	sp, r7
 80047ea:	bd80      	pop	{r7, pc}

080047ec <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80047ec:	b580      	push	{r7, lr}
 80047ee:	b084      	sub	sp, #16
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80047f4:	2300      	movs	r3, #0
 80047f6:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 80047f8:	f7fd fc76 	bl	80020e8 <HAL_GetTick>
 80047fc:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80047fe:	e009      	b.n	8004814 <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8004800:	f7fd fc72 	bl	80020e8 <HAL_GetTick>
 8004804:	4602      	mov	r2, r0
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	1ad3      	subs	r3, r2, r3
 800480a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800480e:	d901      	bls.n	8004814 <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 8004810:	2303      	movs	r3, #3
 8004812:	e00f      	b.n	8004834 <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	685b      	ldr	r3, [r3, #4]
 800481a:	f003 0320 	and.w	r3, r3, #32
 800481e:	2b00      	cmp	r3, #0
 8004820:	d0ee      	beq.n	8004800 <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	685a      	ldr	r2, [r3, #4]
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f042 0210 	orr.w	r2, r2, #16
 8004830:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 8004832:	2300      	movs	r3, #0
}
 8004834:	4618      	mov	r0, r3
 8004836:	3710      	adds	r7, #16
 8004838:	46bd      	mov	sp, r7
 800483a:	bd80      	pop	{r7, pc}

0800483c <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800483c:	b580      	push	{r7, lr}
 800483e:	b084      	sub	sp, #16
 8004840:	af00      	add	r7, sp, #0
 8004842:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004844:	2300      	movs	r3, #0
 8004846:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	685a      	ldr	r2, [r3, #4]
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f022 0210 	bic.w	r2, r2, #16
 8004856:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8004858:	f7fd fc46 	bl	80020e8 <HAL_GetTick>
 800485c:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800485e:	e009      	b.n	8004874 <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8004860:	f7fd fc42 	bl	80020e8 <HAL_GetTick>
 8004864:	4602      	mov	r2, r0
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	1ad3      	subs	r3, r2, r3
 800486a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800486e:	d901      	bls.n	8004874 <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 8004870:	2303      	movs	r3, #3
 8004872:	e007      	b.n	8004884 <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	685b      	ldr	r3, [r3, #4]
 800487a:	f003 0320 	and.w	r3, r3, #32
 800487e:	2b00      	cmp	r3, #0
 8004880:	d0ee      	beq.n	8004860 <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 8004882:	2300      	movs	r3, #0
}
 8004884:	4618      	mov	r0, r3
 8004886:	3710      	adds	r7, #16
 8004888:	46bd      	mov	sp, r7
 800488a:	bd80      	pop	{r7, pc}

0800488c <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800488c:	b480      	push	{r7}
 800488e:	b085      	sub	sp, #20
 8004890:	af00      	add	r7, sp, #0
 8004892:	4603      	mov	r3, r0
 8004894:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8004896:	2300      	movs	r3, #0
 8004898:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 800489a:	79fb      	ldrb	r3, [r7, #7]
 800489c:	091b      	lsrs	r3, r3, #4
 800489e:	b2db      	uxtb	r3, r3
 80048a0:	461a      	mov	r2, r3
 80048a2:	4613      	mov	r3, r2
 80048a4:	009b      	lsls	r3, r3, #2
 80048a6:	4413      	add	r3, r2
 80048a8:	005b      	lsls	r3, r3, #1
 80048aa:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 80048ac:	79fb      	ldrb	r3, [r7, #7]
 80048ae:	f003 030f 	and.w	r3, r3, #15
 80048b2:	b2da      	uxtb	r2, r3
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	b2db      	uxtb	r3, r3
 80048b8:	4413      	add	r3, r2
 80048ba:	b2db      	uxtb	r3, r3
}
 80048bc:	4618      	mov	r0, r3
 80048be:	3714      	adds	r7, #20
 80048c0:	46bd      	mov	sp, r7
 80048c2:	bc80      	pop	{r7}
 80048c4:	4770      	bx	lr
	...

080048c8 <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 80048c8:	b480      	push	{r7}
 80048ca:	b085      	sub	sp, #20
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]
 80048d0:	460b      	mov	r3, r1
 80048d2:	70fb      	strb	r3, [r7, #3]
 80048d4:	4613      	mov	r3, r2
 80048d6:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 80048d8:	2300      	movs	r3, #0
 80048da:	60bb      	str	r3, [r7, #8]
 80048dc:	2300      	movs	r3, #0
 80048de:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 80048e6:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 80048e8:	78fb      	ldrb	r3, [r7, #3]
 80048ea:	2b02      	cmp	r3, #2
 80048ec:	d82d      	bhi.n	800494a <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 80048ee:	78fa      	ldrb	r2, [r7, #3]
 80048f0:	4613      	mov	r3, r2
 80048f2:	005b      	lsls	r3, r3, #1
 80048f4:	4413      	add	r3, r2
 80048f6:	00db      	lsls	r3, r3, #3
 80048f8:	1a9b      	subs	r3, r3, r2
 80048fa:	4a2c      	ldr	r2, [pc, #176]	; (80049ac <RTC_WeekDayNum+0xe4>)
 80048fc:	fba2 2303 	umull	r2, r3, r2, r3
 8004900:	085a      	lsrs	r2, r3, #1
 8004902:	78bb      	ldrb	r3, [r7, #2]
 8004904:	441a      	add	r2, r3
 8004906:	68bb      	ldr	r3, [r7, #8]
 8004908:	441a      	add	r2, r3
 800490a:	68bb      	ldr	r3, [r7, #8]
 800490c:	3b01      	subs	r3, #1
 800490e:	089b      	lsrs	r3, r3, #2
 8004910:	441a      	add	r2, r3
 8004912:	68bb      	ldr	r3, [r7, #8]
 8004914:	3b01      	subs	r3, #1
 8004916:	4926      	ldr	r1, [pc, #152]	; (80049b0 <RTC_WeekDayNum+0xe8>)
 8004918:	fba1 1303 	umull	r1, r3, r1, r3
 800491c:	095b      	lsrs	r3, r3, #5
 800491e:	1ad2      	subs	r2, r2, r3
 8004920:	68bb      	ldr	r3, [r7, #8]
 8004922:	3b01      	subs	r3, #1
 8004924:	4922      	ldr	r1, [pc, #136]	; (80049b0 <RTC_WeekDayNum+0xe8>)
 8004926:	fba1 1303 	umull	r1, r3, r1, r3
 800492a:	09db      	lsrs	r3, r3, #7
 800492c:	4413      	add	r3, r2
 800492e:	1d1a      	adds	r2, r3, #4
 8004930:	4b20      	ldr	r3, [pc, #128]	; (80049b4 <RTC_WeekDayNum+0xec>)
 8004932:	fba3 1302 	umull	r1, r3, r3, r2
 8004936:	1ad1      	subs	r1, r2, r3
 8004938:	0849      	lsrs	r1, r1, #1
 800493a:	440b      	add	r3, r1
 800493c:	0899      	lsrs	r1, r3, #2
 800493e:	460b      	mov	r3, r1
 8004940:	00db      	lsls	r3, r3, #3
 8004942:	1a5b      	subs	r3, r3, r1
 8004944:	1ad3      	subs	r3, r2, r3
 8004946:	60fb      	str	r3, [r7, #12]
 8004948:	e029      	b.n	800499e <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 800494a:	78fa      	ldrb	r2, [r7, #3]
 800494c:	4613      	mov	r3, r2
 800494e:	005b      	lsls	r3, r3, #1
 8004950:	4413      	add	r3, r2
 8004952:	00db      	lsls	r3, r3, #3
 8004954:	1a9b      	subs	r3, r3, r2
 8004956:	4a15      	ldr	r2, [pc, #84]	; (80049ac <RTC_WeekDayNum+0xe4>)
 8004958:	fba2 2303 	umull	r2, r3, r2, r3
 800495c:	085a      	lsrs	r2, r3, #1
 800495e:	78bb      	ldrb	r3, [r7, #2]
 8004960:	441a      	add	r2, r3
 8004962:	68bb      	ldr	r3, [r7, #8]
 8004964:	441a      	add	r2, r3
 8004966:	68bb      	ldr	r3, [r7, #8]
 8004968:	089b      	lsrs	r3, r3, #2
 800496a:	441a      	add	r2, r3
 800496c:	68bb      	ldr	r3, [r7, #8]
 800496e:	4910      	ldr	r1, [pc, #64]	; (80049b0 <RTC_WeekDayNum+0xe8>)
 8004970:	fba1 1303 	umull	r1, r3, r1, r3
 8004974:	095b      	lsrs	r3, r3, #5
 8004976:	1ad2      	subs	r2, r2, r3
 8004978:	68bb      	ldr	r3, [r7, #8]
 800497a:	490d      	ldr	r1, [pc, #52]	; (80049b0 <RTC_WeekDayNum+0xe8>)
 800497c:	fba1 1303 	umull	r1, r3, r1, r3
 8004980:	09db      	lsrs	r3, r3, #7
 8004982:	4413      	add	r3, r2
 8004984:	1c9a      	adds	r2, r3, #2
 8004986:	4b0b      	ldr	r3, [pc, #44]	; (80049b4 <RTC_WeekDayNum+0xec>)
 8004988:	fba3 1302 	umull	r1, r3, r3, r2
 800498c:	1ad1      	subs	r1, r2, r3
 800498e:	0849      	lsrs	r1, r1, #1
 8004990:	440b      	add	r3, r1
 8004992:	0899      	lsrs	r1, r3, #2
 8004994:	460b      	mov	r3, r1
 8004996:	00db      	lsls	r3, r3, #3
 8004998:	1a5b      	subs	r3, r3, r1
 800499a:	1ad3      	subs	r3, r2, r3
 800499c:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	b2db      	uxtb	r3, r3
}
 80049a2:	4618      	mov	r0, r3
 80049a4:	3714      	adds	r7, #20
 80049a6:	46bd      	mov	sp, r7
 80049a8:	bc80      	pop	{r7}
 80049aa:	4770      	bx	lr
 80049ac:	38e38e39 	.word	0x38e38e39
 80049b0:	51eb851f 	.word	0x51eb851f
 80049b4:	24924925 	.word	0x24924925

080049b8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80049b8:	b580      	push	{r7, lr}
 80049ba:	b082      	sub	sp, #8
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d101      	bne.n	80049ca <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80049c6:	2301      	movs	r3, #1
 80049c8:	e076      	b.n	8004ab8 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d108      	bne.n	80049e4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	685b      	ldr	r3, [r3, #4]
 80049d6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80049da:	d009      	beq.n	80049f0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2200      	movs	r2, #0
 80049e0:	61da      	str	r2, [r3, #28]
 80049e2:	e005      	b.n	80049f0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2200      	movs	r2, #0
 80049e8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	2200      	movs	r2, #0
 80049ee:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2200      	movs	r2, #0
 80049f4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80049fc:	b2db      	uxtb	r3, r3
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d106      	bne.n	8004a10 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	2200      	movs	r2, #0
 8004a06:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004a0a:	6878      	ldr	r0, [r7, #4]
 8004a0c:	f7fd f87c 	bl	8001b08 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2202      	movs	r2, #2
 8004a14:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	681a      	ldr	r2, [r3, #0]
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a26:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	685b      	ldr	r3, [r3, #4]
 8004a2c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	689b      	ldr	r3, [r3, #8]
 8004a34:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004a38:	431a      	orrs	r2, r3
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	68db      	ldr	r3, [r3, #12]
 8004a3e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a42:	431a      	orrs	r2, r3
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	691b      	ldr	r3, [r3, #16]
 8004a48:	f003 0302 	and.w	r3, r3, #2
 8004a4c:	431a      	orrs	r2, r3
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	695b      	ldr	r3, [r3, #20]
 8004a52:	f003 0301 	and.w	r3, r3, #1
 8004a56:	431a      	orrs	r2, r3
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	699b      	ldr	r3, [r3, #24]
 8004a5c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004a60:	431a      	orrs	r2, r3
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	69db      	ldr	r3, [r3, #28]
 8004a66:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004a6a:	431a      	orrs	r2, r3
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	6a1b      	ldr	r3, [r3, #32]
 8004a70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a74:	ea42 0103 	orr.w	r1, r2, r3
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a7c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	430a      	orrs	r2, r1
 8004a86:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	699b      	ldr	r3, [r3, #24]
 8004a8c:	0c1a      	lsrs	r2, r3, #16
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f002 0204 	and.w	r2, r2, #4
 8004a96:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	69da      	ldr	r2, [r3, #28]
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004aa6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2200      	movs	r2, #0
 8004aac:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	2201      	movs	r2, #1
 8004ab2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004ab6:	2300      	movs	r3, #0
}
 8004ab8:	4618      	mov	r0, r3
 8004aba:	3708      	adds	r7, #8
 8004abc:	46bd      	mov	sp, r7
 8004abe:	bd80      	pop	{r7, pc}

08004ac0 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	b088      	sub	sp, #32
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	60f8      	str	r0, [r7, #12]
 8004ac8:	60b9      	str	r1, [r7, #8]
 8004aca:	603b      	str	r3, [r7, #0]
 8004acc:	4613      	mov	r3, r2
 8004ace:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004ad0:	2300      	movs	r3, #0
 8004ad2:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004ada:	2b01      	cmp	r3, #1
 8004adc:	d101      	bne.n	8004ae2 <HAL_SPI_Transmit+0x22>
 8004ade:	2302      	movs	r3, #2
 8004ae0:	e126      	b.n	8004d30 <HAL_SPI_Transmit+0x270>
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	2201      	movs	r2, #1
 8004ae6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004aea:	f7fd fafd 	bl	80020e8 <HAL_GetTick>
 8004aee:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004af0:	88fb      	ldrh	r3, [r7, #6]
 8004af2:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004afa:	b2db      	uxtb	r3, r3
 8004afc:	2b01      	cmp	r3, #1
 8004afe:	d002      	beq.n	8004b06 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004b00:	2302      	movs	r3, #2
 8004b02:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004b04:	e10b      	b.n	8004d1e <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004b06:	68bb      	ldr	r3, [r7, #8]
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d002      	beq.n	8004b12 <HAL_SPI_Transmit+0x52>
 8004b0c:	88fb      	ldrh	r3, [r7, #6]
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d102      	bne.n	8004b18 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004b12:	2301      	movs	r3, #1
 8004b14:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004b16:	e102      	b.n	8004d1e <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	2203      	movs	r2, #3
 8004b1c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	2200      	movs	r2, #0
 8004b24:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	68ba      	ldr	r2, [r7, #8]
 8004b2a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	88fa      	ldrh	r2, [r7, #6]
 8004b30:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	88fa      	ldrh	r2, [r7, #6]
 8004b36:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	2200      	movs	r2, #0
 8004b3c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	2200      	movs	r2, #0
 8004b42:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	2200      	movs	r2, #0
 8004b48:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	2200      	movs	r2, #0
 8004b54:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	689b      	ldr	r3, [r3, #8]
 8004b5a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b5e:	d10f      	bne.n	8004b80 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	681a      	ldr	r2, [r3, #0]
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b6e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	681a      	ldr	r2, [r3, #0]
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004b7e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b8a:	2b40      	cmp	r3, #64	; 0x40
 8004b8c:	d007      	beq.n	8004b9e <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	681a      	ldr	r2, [r3, #0]
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004b9c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	68db      	ldr	r3, [r3, #12]
 8004ba2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ba6:	d14b      	bne.n	8004c40 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	685b      	ldr	r3, [r3, #4]
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d002      	beq.n	8004bb6 <HAL_SPI_Transmit+0xf6>
 8004bb0:	8afb      	ldrh	r3, [r7, #22]
 8004bb2:	2b01      	cmp	r3, #1
 8004bb4:	d13e      	bne.n	8004c34 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bba:	881a      	ldrh	r2, [r3, #0]
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bc6:	1c9a      	adds	r2, r3, #2
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004bd0:	b29b      	uxth	r3, r3
 8004bd2:	3b01      	subs	r3, #1
 8004bd4:	b29a      	uxth	r2, r3
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004bda:	e02b      	b.n	8004c34 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	689b      	ldr	r3, [r3, #8]
 8004be2:	f003 0302 	and.w	r3, r3, #2
 8004be6:	2b02      	cmp	r3, #2
 8004be8:	d112      	bne.n	8004c10 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bee:	881a      	ldrh	r2, [r3, #0]
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bfa:	1c9a      	adds	r2, r3, #2
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004c04:	b29b      	uxth	r3, r3
 8004c06:	3b01      	subs	r3, #1
 8004c08:	b29a      	uxth	r2, r3
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	86da      	strh	r2, [r3, #54]	; 0x36
 8004c0e:	e011      	b.n	8004c34 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004c10:	f7fd fa6a 	bl	80020e8 <HAL_GetTick>
 8004c14:	4602      	mov	r2, r0
 8004c16:	69bb      	ldr	r3, [r7, #24]
 8004c18:	1ad3      	subs	r3, r2, r3
 8004c1a:	683a      	ldr	r2, [r7, #0]
 8004c1c:	429a      	cmp	r2, r3
 8004c1e:	d803      	bhi.n	8004c28 <HAL_SPI_Transmit+0x168>
 8004c20:	683b      	ldr	r3, [r7, #0]
 8004c22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c26:	d102      	bne.n	8004c2e <HAL_SPI_Transmit+0x16e>
 8004c28:	683b      	ldr	r3, [r7, #0]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d102      	bne.n	8004c34 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8004c2e:	2303      	movs	r3, #3
 8004c30:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004c32:	e074      	b.n	8004d1e <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004c38:	b29b      	uxth	r3, r3
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d1ce      	bne.n	8004bdc <HAL_SPI_Transmit+0x11c>
 8004c3e:	e04c      	b.n	8004cda <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	685b      	ldr	r3, [r3, #4]
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d002      	beq.n	8004c4e <HAL_SPI_Transmit+0x18e>
 8004c48:	8afb      	ldrh	r3, [r7, #22]
 8004c4a:	2b01      	cmp	r3, #1
 8004c4c:	d140      	bne.n	8004cd0 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	330c      	adds	r3, #12
 8004c58:	7812      	ldrb	r2, [r2, #0]
 8004c5a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c60:	1c5a      	adds	r2, r3, #1
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004c6a:	b29b      	uxth	r3, r3
 8004c6c:	3b01      	subs	r3, #1
 8004c6e:	b29a      	uxth	r2, r3
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004c74:	e02c      	b.n	8004cd0 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	689b      	ldr	r3, [r3, #8]
 8004c7c:	f003 0302 	and.w	r3, r3, #2
 8004c80:	2b02      	cmp	r3, #2
 8004c82:	d113      	bne.n	8004cac <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	330c      	adds	r3, #12
 8004c8e:	7812      	ldrb	r2, [r2, #0]
 8004c90:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c96:	1c5a      	adds	r2, r3, #1
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004ca0:	b29b      	uxth	r3, r3
 8004ca2:	3b01      	subs	r3, #1
 8004ca4:	b29a      	uxth	r2, r3
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	86da      	strh	r2, [r3, #54]	; 0x36
 8004caa:	e011      	b.n	8004cd0 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004cac:	f7fd fa1c 	bl	80020e8 <HAL_GetTick>
 8004cb0:	4602      	mov	r2, r0
 8004cb2:	69bb      	ldr	r3, [r7, #24]
 8004cb4:	1ad3      	subs	r3, r2, r3
 8004cb6:	683a      	ldr	r2, [r7, #0]
 8004cb8:	429a      	cmp	r2, r3
 8004cba:	d803      	bhi.n	8004cc4 <HAL_SPI_Transmit+0x204>
 8004cbc:	683b      	ldr	r3, [r7, #0]
 8004cbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cc2:	d102      	bne.n	8004cca <HAL_SPI_Transmit+0x20a>
 8004cc4:	683b      	ldr	r3, [r7, #0]
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d102      	bne.n	8004cd0 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8004cca:	2303      	movs	r3, #3
 8004ccc:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004cce:	e026      	b.n	8004d1e <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004cd4:	b29b      	uxth	r3, r3
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d1cd      	bne.n	8004c76 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004cda:	69ba      	ldr	r2, [r7, #24]
 8004cdc:	6839      	ldr	r1, [r7, #0]
 8004cde:	68f8      	ldr	r0, [r7, #12]
 8004ce0:	f000 f8b2 	bl	8004e48 <SPI_EndRxTxTransaction>
 8004ce4:	4603      	mov	r3, r0
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d002      	beq.n	8004cf0 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	2220      	movs	r2, #32
 8004cee:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	689b      	ldr	r3, [r3, #8]
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d10a      	bne.n	8004d0e <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004cf8:	2300      	movs	r3, #0
 8004cfa:	613b      	str	r3, [r7, #16]
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	68db      	ldr	r3, [r3, #12]
 8004d02:	613b      	str	r3, [r7, #16]
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	689b      	ldr	r3, [r3, #8]
 8004d0a:	613b      	str	r3, [r7, #16]
 8004d0c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d002      	beq.n	8004d1c <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8004d16:	2301      	movs	r3, #1
 8004d18:	77fb      	strb	r3, [r7, #31]
 8004d1a:	e000      	b.n	8004d1e <HAL_SPI_Transmit+0x25e>
  }

error:
 8004d1c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	2201      	movs	r2, #1
 8004d22:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	2200      	movs	r2, #0
 8004d2a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004d2e:	7ffb      	ldrb	r3, [r7, #31]
}
 8004d30:	4618      	mov	r0, r3
 8004d32:	3720      	adds	r7, #32
 8004d34:	46bd      	mov	sp, r7
 8004d36:	bd80      	pop	{r7, pc}

08004d38 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004d38:	b580      	push	{r7, lr}
 8004d3a:	b088      	sub	sp, #32
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	60f8      	str	r0, [r7, #12]
 8004d40:	60b9      	str	r1, [r7, #8]
 8004d42:	603b      	str	r3, [r7, #0]
 8004d44:	4613      	mov	r3, r2
 8004d46:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004d48:	f7fd f9ce 	bl	80020e8 <HAL_GetTick>
 8004d4c:	4602      	mov	r2, r0
 8004d4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d50:	1a9b      	subs	r3, r3, r2
 8004d52:	683a      	ldr	r2, [r7, #0]
 8004d54:	4413      	add	r3, r2
 8004d56:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004d58:	f7fd f9c6 	bl	80020e8 <HAL_GetTick>
 8004d5c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004d5e:	4b39      	ldr	r3, [pc, #228]	; (8004e44 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	015b      	lsls	r3, r3, #5
 8004d64:	0d1b      	lsrs	r3, r3, #20
 8004d66:	69fa      	ldr	r2, [r7, #28]
 8004d68:	fb02 f303 	mul.w	r3, r2, r3
 8004d6c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004d6e:	e054      	b.n	8004e1a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004d70:	683b      	ldr	r3, [r7, #0]
 8004d72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d76:	d050      	beq.n	8004e1a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004d78:	f7fd f9b6 	bl	80020e8 <HAL_GetTick>
 8004d7c:	4602      	mov	r2, r0
 8004d7e:	69bb      	ldr	r3, [r7, #24]
 8004d80:	1ad3      	subs	r3, r2, r3
 8004d82:	69fa      	ldr	r2, [r7, #28]
 8004d84:	429a      	cmp	r2, r3
 8004d86:	d902      	bls.n	8004d8e <SPI_WaitFlagStateUntilTimeout+0x56>
 8004d88:	69fb      	ldr	r3, [r7, #28]
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d13d      	bne.n	8004e0a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	685a      	ldr	r2, [r3, #4]
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004d9c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	685b      	ldr	r3, [r3, #4]
 8004da2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004da6:	d111      	bne.n	8004dcc <SPI_WaitFlagStateUntilTimeout+0x94>
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	689b      	ldr	r3, [r3, #8]
 8004dac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004db0:	d004      	beq.n	8004dbc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	689b      	ldr	r3, [r3, #8]
 8004db6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004dba:	d107      	bne.n	8004dcc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	681a      	ldr	r2, [r3, #0]
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004dca:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dd0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004dd4:	d10f      	bne.n	8004df6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	681a      	ldr	r2, [r3, #0]
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004de4:	601a      	str	r2, [r3, #0]
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	681a      	ldr	r2, [r3, #0]
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004df4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	2201      	movs	r2, #1
 8004dfa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	2200      	movs	r2, #0
 8004e02:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004e06:	2303      	movs	r3, #3
 8004e08:	e017      	b.n	8004e3a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8004e0a:	697b      	ldr	r3, [r7, #20]
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d101      	bne.n	8004e14 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004e10:	2300      	movs	r3, #0
 8004e12:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004e14:	697b      	ldr	r3, [r7, #20]
 8004e16:	3b01      	subs	r3, #1
 8004e18:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	689a      	ldr	r2, [r3, #8]
 8004e20:	68bb      	ldr	r3, [r7, #8]
 8004e22:	4013      	ands	r3, r2
 8004e24:	68ba      	ldr	r2, [r7, #8]
 8004e26:	429a      	cmp	r2, r3
 8004e28:	bf0c      	ite	eq
 8004e2a:	2301      	moveq	r3, #1
 8004e2c:	2300      	movne	r3, #0
 8004e2e:	b2db      	uxtb	r3, r3
 8004e30:	461a      	mov	r2, r3
 8004e32:	79fb      	ldrb	r3, [r7, #7]
 8004e34:	429a      	cmp	r2, r3
 8004e36:	d19b      	bne.n	8004d70 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004e38:	2300      	movs	r3, #0
}
 8004e3a:	4618      	mov	r0, r3
 8004e3c:	3720      	adds	r7, #32
 8004e3e:	46bd      	mov	sp, r7
 8004e40:	bd80      	pop	{r7, pc}
 8004e42:	bf00      	nop
 8004e44:	20000008 	.word	0x20000008

08004e48 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	b086      	sub	sp, #24
 8004e4c:	af02      	add	r7, sp, #8
 8004e4e:	60f8      	str	r0, [r7, #12]
 8004e50:	60b9      	str	r1, [r7, #8]
 8004e52:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	9300      	str	r3, [sp, #0]
 8004e58:	68bb      	ldr	r3, [r7, #8]
 8004e5a:	2200      	movs	r2, #0
 8004e5c:	2180      	movs	r1, #128	; 0x80
 8004e5e:	68f8      	ldr	r0, [r7, #12]
 8004e60:	f7ff ff6a 	bl	8004d38 <SPI_WaitFlagStateUntilTimeout>
 8004e64:	4603      	mov	r3, r0
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d007      	beq.n	8004e7a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e6e:	f043 0220 	orr.w	r2, r3, #32
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8004e76:	2303      	movs	r3, #3
 8004e78:	e000      	b.n	8004e7c <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8004e7a:	2300      	movs	r3, #0
}
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	3710      	adds	r7, #16
 8004e80:	46bd      	mov	sp, r7
 8004e82:	bd80      	pop	{r7, pc}

08004e84 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004e84:	b580      	push	{r7, lr}
 8004e86:	b082      	sub	sp, #8
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d101      	bne.n	8004e96 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004e92:	2301      	movs	r3, #1
 8004e94:	e041      	b.n	8004f1a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e9c:	b2db      	uxtb	r3, r3
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d106      	bne.n	8004eb0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	2200      	movs	r2, #0
 8004ea6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004eaa:	6878      	ldr	r0, [r7, #4]
 8004eac:	f7fc fea6 	bl	8001bfc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2202      	movs	r2, #2
 8004eb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681a      	ldr	r2, [r3, #0]
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	3304      	adds	r3, #4
 8004ec0:	4619      	mov	r1, r3
 8004ec2:	4610      	mov	r0, r2
 8004ec4:	f000 f98e 	bl	80051e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2201      	movs	r2, #1
 8004ecc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2201      	movs	r2, #1
 8004ed4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2201      	movs	r2, #1
 8004edc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2201      	movs	r2, #1
 8004ee4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2201      	movs	r2, #1
 8004eec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2201      	movs	r2, #1
 8004ef4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	2201      	movs	r2, #1
 8004efc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2201      	movs	r2, #1
 8004f04:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2201      	movs	r2, #1
 8004f0c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	2201      	movs	r2, #1
 8004f14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004f18:	2300      	movs	r3, #0
}
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	3708      	adds	r7, #8
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	bd80      	pop	{r7, pc}
	...

08004f24 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004f24:	b580      	push	{r7, lr}
 8004f26:	b084      	sub	sp, #16
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	6078      	str	r0, [r7, #4]
 8004f2c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004f2e:	683b      	ldr	r3, [r7, #0]
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d109      	bne.n	8004f48 <HAL_TIM_PWM_Start+0x24>
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004f3a:	b2db      	uxtb	r3, r3
 8004f3c:	2b01      	cmp	r3, #1
 8004f3e:	bf14      	ite	ne
 8004f40:	2301      	movne	r3, #1
 8004f42:	2300      	moveq	r3, #0
 8004f44:	b2db      	uxtb	r3, r3
 8004f46:	e022      	b.n	8004f8e <HAL_TIM_PWM_Start+0x6a>
 8004f48:	683b      	ldr	r3, [r7, #0]
 8004f4a:	2b04      	cmp	r3, #4
 8004f4c:	d109      	bne.n	8004f62 <HAL_TIM_PWM_Start+0x3e>
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004f54:	b2db      	uxtb	r3, r3
 8004f56:	2b01      	cmp	r3, #1
 8004f58:	bf14      	ite	ne
 8004f5a:	2301      	movne	r3, #1
 8004f5c:	2300      	moveq	r3, #0
 8004f5e:	b2db      	uxtb	r3, r3
 8004f60:	e015      	b.n	8004f8e <HAL_TIM_PWM_Start+0x6a>
 8004f62:	683b      	ldr	r3, [r7, #0]
 8004f64:	2b08      	cmp	r3, #8
 8004f66:	d109      	bne.n	8004f7c <HAL_TIM_PWM_Start+0x58>
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004f6e:	b2db      	uxtb	r3, r3
 8004f70:	2b01      	cmp	r3, #1
 8004f72:	bf14      	ite	ne
 8004f74:	2301      	movne	r3, #1
 8004f76:	2300      	moveq	r3, #0
 8004f78:	b2db      	uxtb	r3, r3
 8004f7a:	e008      	b.n	8004f8e <HAL_TIM_PWM_Start+0x6a>
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004f82:	b2db      	uxtb	r3, r3
 8004f84:	2b01      	cmp	r3, #1
 8004f86:	bf14      	ite	ne
 8004f88:	2301      	movne	r3, #1
 8004f8a:	2300      	moveq	r3, #0
 8004f8c:	b2db      	uxtb	r3, r3
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d001      	beq.n	8004f96 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004f92:	2301      	movs	r3, #1
 8004f94:	e05e      	b.n	8005054 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004f96:	683b      	ldr	r3, [r7, #0]
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d104      	bne.n	8004fa6 <HAL_TIM_PWM_Start+0x82>
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2202      	movs	r2, #2
 8004fa0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004fa4:	e013      	b.n	8004fce <HAL_TIM_PWM_Start+0xaa>
 8004fa6:	683b      	ldr	r3, [r7, #0]
 8004fa8:	2b04      	cmp	r3, #4
 8004faa:	d104      	bne.n	8004fb6 <HAL_TIM_PWM_Start+0x92>
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	2202      	movs	r2, #2
 8004fb0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004fb4:	e00b      	b.n	8004fce <HAL_TIM_PWM_Start+0xaa>
 8004fb6:	683b      	ldr	r3, [r7, #0]
 8004fb8:	2b08      	cmp	r3, #8
 8004fba:	d104      	bne.n	8004fc6 <HAL_TIM_PWM_Start+0xa2>
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2202      	movs	r2, #2
 8004fc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004fc4:	e003      	b.n	8004fce <HAL_TIM_PWM_Start+0xaa>
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	2202      	movs	r2, #2
 8004fca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	2201      	movs	r2, #1
 8004fd4:	6839      	ldr	r1, [r7, #0]
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	f000 faee 	bl	80055b8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	4a1e      	ldr	r2, [pc, #120]	; (800505c <HAL_TIM_PWM_Start+0x138>)
 8004fe2:	4293      	cmp	r3, r2
 8004fe4:	d107      	bne.n	8004ff6 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004ff4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	4a18      	ldr	r2, [pc, #96]	; (800505c <HAL_TIM_PWM_Start+0x138>)
 8004ffc:	4293      	cmp	r3, r2
 8004ffe:	d00e      	beq.n	800501e <HAL_TIM_PWM_Start+0xfa>
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005008:	d009      	beq.n	800501e <HAL_TIM_PWM_Start+0xfa>
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	4a14      	ldr	r2, [pc, #80]	; (8005060 <HAL_TIM_PWM_Start+0x13c>)
 8005010:	4293      	cmp	r3, r2
 8005012:	d004      	beq.n	800501e <HAL_TIM_PWM_Start+0xfa>
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	4a12      	ldr	r2, [pc, #72]	; (8005064 <HAL_TIM_PWM_Start+0x140>)
 800501a:	4293      	cmp	r3, r2
 800501c:	d111      	bne.n	8005042 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	689b      	ldr	r3, [r3, #8]
 8005024:	f003 0307 	and.w	r3, r3, #7
 8005028:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	2b06      	cmp	r3, #6
 800502e:	d010      	beq.n	8005052 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	681a      	ldr	r2, [r3, #0]
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f042 0201 	orr.w	r2, r2, #1
 800503e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005040:	e007      	b.n	8005052 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	681a      	ldr	r2, [r3, #0]
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f042 0201 	orr.w	r2, r2, #1
 8005050:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005052:	2300      	movs	r3, #0
}
 8005054:	4618      	mov	r0, r3
 8005056:	3710      	adds	r7, #16
 8005058:	46bd      	mov	sp, r7
 800505a:	bd80      	pop	{r7, pc}
 800505c:	40012c00 	.word	0x40012c00
 8005060:	40000400 	.word	0x40000400
 8005064:	40000800 	.word	0x40000800

08005068 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005068:	b580      	push	{r7, lr}
 800506a:	b084      	sub	sp, #16
 800506c:	af00      	add	r7, sp, #0
 800506e:	60f8      	str	r0, [r7, #12]
 8005070:	60b9      	str	r1, [r7, #8]
 8005072:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800507a:	2b01      	cmp	r3, #1
 800507c:	d101      	bne.n	8005082 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800507e:	2302      	movs	r3, #2
 8005080:	e0ac      	b.n	80051dc <HAL_TIM_PWM_ConfigChannel+0x174>
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	2201      	movs	r2, #1
 8005086:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	2b0c      	cmp	r3, #12
 800508e:	f200 809f 	bhi.w	80051d0 <HAL_TIM_PWM_ConfigChannel+0x168>
 8005092:	a201      	add	r2, pc, #4	; (adr r2, 8005098 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8005094:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005098:	080050cd 	.word	0x080050cd
 800509c:	080051d1 	.word	0x080051d1
 80050a0:	080051d1 	.word	0x080051d1
 80050a4:	080051d1 	.word	0x080051d1
 80050a8:	0800510d 	.word	0x0800510d
 80050ac:	080051d1 	.word	0x080051d1
 80050b0:	080051d1 	.word	0x080051d1
 80050b4:	080051d1 	.word	0x080051d1
 80050b8:	0800514f 	.word	0x0800514f
 80050bc:	080051d1 	.word	0x080051d1
 80050c0:	080051d1 	.word	0x080051d1
 80050c4:	080051d1 	.word	0x080051d1
 80050c8:	0800518f 	.word	0x0800518f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	68b9      	ldr	r1, [r7, #8]
 80050d2:	4618      	mov	r0, r3
 80050d4:	f000 f8e8 	bl	80052a8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	699a      	ldr	r2, [r3, #24]
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f042 0208 	orr.w	r2, r2, #8
 80050e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	699a      	ldr	r2, [r3, #24]
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f022 0204 	bic.w	r2, r2, #4
 80050f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	6999      	ldr	r1, [r3, #24]
 80050fe:	68bb      	ldr	r3, [r7, #8]
 8005100:	691a      	ldr	r2, [r3, #16]
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	430a      	orrs	r2, r1
 8005108:	619a      	str	r2, [r3, #24]
      break;
 800510a:	e062      	b.n	80051d2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	68b9      	ldr	r1, [r7, #8]
 8005112:	4618      	mov	r0, r3
 8005114:	f000 f92e 	bl	8005374 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	699a      	ldr	r2, [r3, #24]
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005126:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	699a      	ldr	r2, [r3, #24]
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005136:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	6999      	ldr	r1, [r3, #24]
 800513e:	68bb      	ldr	r3, [r7, #8]
 8005140:	691b      	ldr	r3, [r3, #16]
 8005142:	021a      	lsls	r2, r3, #8
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	430a      	orrs	r2, r1
 800514a:	619a      	str	r2, [r3, #24]
      break;
 800514c:	e041      	b.n	80051d2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	68b9      	ldr	r1, [r7, #8]
 8005154:	4618      	mov	r0, r3
 8005156:	f000 f977 	bl	8005448 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	69da      	ldr	r2, [r3, #28]
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	f042 0208 	orr.w	r2, r2, #8
 8005168:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	69da      	ldr	r2, [r3, #28]
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f022 0204 	bic.w	r2, r2, #4
 8005178:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	69d9      	ldr	r1, [r3, #28]
 8005180:	68bb      	ldr	r3, [r7, #8]
 8005182:	691a      	ldr	r2, [r3, #16]
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	430a      	orrs	r2, r1
 800518a:	61da      	str	r2, [r3, #28]
      break;
 800518c:	e021      	b.n	80051d2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	68b9      	ldr	r1, [r7, #8]
 8005194:	4618      	mov	r0, r3
 8005196:	f000 f9c1 	bl	800551c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	69da      	ldr	r2, [r3, #28]
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80051a8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	69da      	ldr	r2, [r3, #28]
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80051b8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	69d9      	ldr	r1, [r3, #28]
 80051c0:	68bb      	ldr	r3, [r7, #8]
 80051c2:	691b      	ldr	r3, [r3, #16]
 80051c4:	021a      	lsls	r2, r3, #8
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	430a      	orrs	r2, r1
 80051cc:	61da      	str	r2, [r3, #28]
      break;
 80051ce:	e000      	b.n	80051d2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 80051d0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	2200      	movs	r2, #0
 80051d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80051da:	2300      	movs	r3, #0
}
 80051dc:	4618      	mov	r0, r3
 80051de:	3710      	adds	r7, #16
 80051e0:	46bd      	mov	sp, r7
 80051e2:	bd80      	pop	{r7, pc}

080051e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80051e4:	b480      	push	{r7}
 80051e6:	b085      	sub	sp, #20
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	6078      	str	r0, [r7, #4]
 80051ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	4a29      	ldr	r2, [pc, #164]	; (800529c <TIM_Base_SetConfig+0xb8>)
 80051f8:	4293      	cmp	r3, r2
 80051fa:	d00b      	beq.n	8005214 <TIM_Base_SetConfig+0x30>
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005202:	d007      	beq.n	8005214 <TIM_Base_SetConfig+0x30>
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	4a26      	ldr	r2, [pc, #152]	; (80052a0 <TIM_Base_SetConfig+0xbc>)
 8005208:	4293      	cmp	r3, r2
 800520a:	d003      	beq.n	8005214 <TIM_Base_SetConfig+0x30>
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	4a25      	ldr	r2, [pc, #148]	; (80052a4 <TIM_Base_SetConfig+0xc0>)
 8005210:	4293      	cmp	r3, r2
 8005212:	d108      	bne.n	8005226 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800521a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800521c:	683b      	ldr	r3, [r7, #0]
 800521e:	685b      	ldr	r3, [r3, #4]
 8005220:	68fa      	ldr	r2, [r7, #12]
 8005222:	4313      	orrs	r3, r2
 8005224:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	4a1c      	ldr	r2, [pc, #112]	; (800529c <TIM_Base_SetConfig+0xb8>)
 800522a:	4293      	cmp	r3, r2
 800522c:	d00b      	beq.n	8005246 <TIM_Base_SetConfig+0x62>
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005234:	d007      	beq.n	8005246 <TIM_Base_SetConfig+0x62>
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	4a19      	ldr	r2, [pc, #100]	; (80052a0 <TIM_Base_SetConfig+0xbc>)
 800523a:	4293      	cmp	r3, r2
 800523c:	d003      	beq.n	8005246 <TIM_Base_SetConfig+0x62>
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	4a18      	ldr	r2, [pc, #96]	; (80052a4 <TIM_Base_SetConfig+0xc0>)
 8005242:	4293      	cmp	r3, r2
 8005244:	d108      	bne.n	8005258 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800524c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800524e:	683b      	ldr	r3, [r7, #0]
 8005250:	68db      	ldr	r3, [r3, #12]
 8005252:	68fa      	ldr	r2, [r7, #12]
 8005254:	4313      	orrs	r3, r2
 8005256:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800525e:	683b      	ldr	r3, [r7, #0]
 8005260:	695b      	ldr	r3, [r3, #20]
 8005262:	4313      	orrs	r3, r2
 8005264:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	68fa      	ldr	r2, [r7, #12]
 800526a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800526c:	683b      	ldr	r3, [r7, #0]
 800526e:	689a      	ldr	r2, [r3, #8]
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005274:	683b      	ldr	r3, [r7, #0]
 8005276:	681a      	ldr	r2, [r3, #0]
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	4a07      	ldr	r2, [pc, #28]	; (800529c <TIM_Base_SetConfig+0xb8>)
 8005280:	4293      	cmp	r3, r2
 8005282:	d103      	bne.n	800528c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005284:	683b      	ldr	r3, [r7, #0]
 8005286:	691a      	ldr	r2, [r3, #16]
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2201      	movs	r2, #1
 8005290:	615a      	str	r2, [r3, #20]
}
 8005292:	bf00      	nop
 8005294:	3714      	adds	r7, #20
 8005296:	46bd      	mov	sp, r7
 8005298:	bc80      	pop	{r7}
 800529a:	4770      	bx	lr
 800529c:	40012c00 	.word	0x40012c00
 80052a0:	40000400 	.word	0x40000400
 80052a4:	40000800 	.word	0x40000800

080052a8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80052a8:	b480      	push	{r7}
 80052aa:	b087      	sub	sp, #28
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	6078      	str	r0, [r7, #4]
 80052b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	6a1b      	ldr	r3, [r3, #32]
 80052b6:	f023 0201 	bic.w	r2, r3, #1
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	6a1b      	ldr	r3, [r3, #32]
 80052c2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	685b      	ldr	r3, [r3, #4]
 80052c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	699b      	ldr	r3, [r3, #24]
 80052ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	f023 0303 	bic.w	r3, r3, #3
 80052de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80052e0:	683b      	ldr	r3, [r7, #0]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	68fa      	ldr	r2, [r7, #12]
 80052e6:	4313      	orrs	r3, r2
 80052e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80052ea:	697b      	ldr	r3, [r7, #20]
 80052ec:	f023 0302 	bic.w	r3, r3, #2
 80052f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80052f2:	683b      	ldr	r3, [r7, #0]
 80052f4:	689b      	ldr	r3, [r3, #8]
 80052f6:	697a      	ldr	r2, [r7, #20]
 80052f8:	4313      	orrs	r3, r2
 80052fa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	4a1c      	ldr	r2, [pc, #112]	; (8005370 <TIM_OC1_SetConfig+0xc8>)
 8005300:	4293      	cmp	r3, r2
 8005302:	d10c      	bne.n	800531e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005304:	697b      	ldr	r3, [r7, #20]
 8005306:	f023 0308 	bic.w	r3, r3, #8
 800530a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800530c:	683b      	ldr	r3, [r7, #0]
 800530e:	68db      	ldr	r3, [r3, #12]
 8005310:	697a      	ldr	r2, [r7, #20]
 8005312:	4313      	orrs	r3, r2
 8005314:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005316:	697b      	ldr	r3, [r7, #20]
 8005318:	f023 0304 	bic.w	r3, r3, #4
 800531c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	4a13      	ldr	r2, [pc, #76]	; (8005370 <TIM_OC1_SetConfig+0xc8>)
 8005322:	4293      	cmp	r3, r2
 8005324:	d111      	bne.n	800534a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005326:	693b      	ldr	r3, [r7, #16]
 8005328:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800532c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800532e:	693b      	ldr	r3, [r7, #16]
 8005330:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005334:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005336:	683b      	ldr	r3, [r7, #0]
 8005338:	695b      	ldr	r3, [r3, #20]
 800533a:	693a      	ldr	r2, [r7, #16]
 800533c:	4313      	orrs	r3, r2
 800533e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005340:	683b      	ldr	r3, [r7, #0]
 8005342:	699b      	ldr	r3, [r3, #24]
 8005344:	693a      	ldr	r2, [r7, #16]
 8005346:	4313      	orrs	r3, r2
 8005348:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	693a      	ldr	r2, [r7, #16]
 800534e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	68fa      	ldr	r2, [r7, #12]
 8005354:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005356:	683b      	ldr	r3, [r7, #0]
 8005358:	685a      	ldr	r2, [r3, #4]
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	697a      	ldr	r2, [r7, #20]
 8005362:	621a      	str	r2, [r3, #32]
}
 8005364:	bf00      	nop
 8005366:	371c      	adds	r7, #28
 8005368:	46bd      	mov	sp, r7
 800536a:	bc80      	pop	{r7}
 800536c:	4770      	bx	lr
 800536e:	bf00      	nop
 8005370:	40012c00 	.word	0x40012c00

08005374 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005374:	b480      	push	{r7}
 8005376:	b087      	sub	sp, #28
 8005378:	af00      	add	r7, sp, #0
 800537a:	6078      	str	r0, [r7, #4]
 800537c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	6a1b      	ldr	r3, [r3, #32]
 8005382:	f023 0210 	bic.w	r2, r3, #16
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	6a1b      	ldr	r3, [r3, #32]
 800538e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	685b      	ldr	r3, [r3, #4]
 8005394:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	699b      	ldr	r3, [r3, #24]
 800539a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80053a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80053aa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80053ac:	683b      	ldr	r3, [r7, #0]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	021b      	lsls	r3, r3, #8
 80053b2:	68fa      	ldr	r2, [r7, #12]
 80053b4:	4313      	orrs	r3, r2
 80053b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80053b8:	697b      	ldr	r3, [r7, #20]
 80053ba:	f023 0320 	bic.w	r3, r3, #32
 80053be:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80053c0:	683b      	ldr	r3, [r7, #0]
 80053c2:	689b      	ldr	r3, [r3, #8]
 80053c4:	011b      	lsls	r3, r3, #4
 80053c6:	697a      	ldr	r2, [r7, #20]
 80053c8:	4313      	orrs	r3, r2
 80053ca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	4a1d      	ldr	r2, [pc, #116]	; (8005444 <TIM_OC2_SetConfig+0xd0>)
 80053d0:	4293      	cmp	r3, r2
 80053d2:	d10d      	bne.n	80053f0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80053d4:	697b      	ldr	r3, [r7, #20]
 80053d6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80053da:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80053dc:	683b      	ldr	r3, [r7, #0]
 80053de:	68db      	ldr	r3, [r3, #12]
 80053e0:	011b      	lsls	r3, r3, #4
 80053e2:	697a      	ldr	r2, [r7, #20]
 80053e4:	4313      	orrs	r3, r2
 80053e6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80053e8:	697b      	ldr	r3, [r7, #20]
 80053ea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80053ee:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	4a14      	ldr	r2, [pc, #80]	; (8005444 <TIM_OC2_SetConfig+0xd0>)
 80053f4:	4293      	cmp	r3, r2
 80053f6:	d113      	bne.n	8005420 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80053f8:	693b      	ldr	r3, [r7, #16]
 80053fa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80053fe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005400:	693b      	ldr	r3, [r7, #16]
 8005402:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005406:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	695b      	ldr	r3, [r3, #20]
 800540c:	009b      	lsls	r3, r3, #2
 800540e:	693a      	ldr	r2, [r7, #16]
 8005410:	4313      	orrs	r3, r2
 8005412:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005414:	683b      	ldr	r3, [r7, #0]
 8005416:	699b      	ldr	r3, [r3, #24]
 8005418:	009b      	lsls	r3, r3, #2
 800541a:	693a      	ldr	r2, [r7, #16]
 800541c:	4313      	orrs	r3, r2
 800541e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	693a      	ldr	r2, [r7, #16]
 8005424:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	68fa      	ldr	r2, [r7, #12]
 800542a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800542c:	683b      	ldr	r3, [r7, #0]
 800542e:	685a      	ldr	r2, [r3, #4]
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	697a      	ldr	r2, [r7, #20]
 8005438:	621a      	str	r2, [r3, #32]
}
 800543a:	bf00      	nop
 800543c:	371c      	adds	r7, #28
 800543e:	46bd      	mov	sp, r7
 8005440:	bc80      	pop	{r7}
 8005442:	4770      	bx	lr
 8005444:	40012c00 	.word	0x40012c00

08005448 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005448:	b480      	push	{r7}
 800544a:	b087      	sub	sp, #28
 800544c:	af00      	add	r7, sp, #0
 800544e:	6078      	str	r0, [r7, #4]
 8005450:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	6a1b      	ldr	r3, [r3, #32]
 8005456:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	6a1b      	ldr	r3, [r3, #32]
 8005462:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	685b      	ldr	r3, [r3, #4]
 8005468:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	69db      	ldr	r3, [r3, #28]
 800546e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005476:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	f023 0303 	bic.w	r3, r3, #3
 800547e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005480:	683b      	ldr	r3, [r7, #0]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	68fa      	ldr	r2, [r7, #12]
 8005486:	4313      	orrs	r3, r2
 8005488:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800548a:	697b      	ldr	r3, [r7, #20]
 800548c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005490:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005492:	683b      	ldr	r3, [r7, #0]
 8005494:	689b      	ldr	r3, [r3, #8]
 8005496:	021b      	lsls	r3, r3, #8
 8005498:	697a      	ldr	r2, [r7, #20]
 800549a:	4313      	orrs	r3, r2
 800549c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	4a1d      	ldr	r2, [pc, #116]	; (8005518 <TIM_OC3_SetConfig+0xd0>)
 80054a2:	4293      	cmp	r3, r2
 80054a4:	d10d      	bne.n	80054c2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80054a6:	697b      	ldr	r3, [r7, #20]
 80054a8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80054ac:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80054ae:	683b      	ldr	r3, [r7, #0]
 80054b0:	68db      	ldr	r3, [r3, #12]
 80054b2:	021b      	lsls	r3, r3, #8
 80054b4:	697a      	ldr	r2, [r7, #20]
 80054b6:	4313      	orrs	r3, r2
 80054b8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80054ba:	697b      	ldr	r3, [r7, #20]
 80054bc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80054c0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	4a14      	ldr	r2, [pc, #80]	; (8005518 <TIM_OC3_SetConfig+0xd0>)
 80054c6:	4293      	cmp	r3, r2
 80054c8:	d113      	bne.n	80054f2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80054ca:	693b      	ldr	r3, [r7, #16]
 80054cc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80054d0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80054d2:	693b      	ldr	r3, [r7, #16]
 80054d4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80054d8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80054da:	683b      	ldr	r3, [r7, #0]
 80054dc:	695b      	ldr	r3, [r3, #20]
 80054de:	011b      	lsls	r3, r3, #4
 80054e0:	693a      	ldr	r2, [r7, #16]
 80054e2:	4313      	orrs	r3, r2
 80054e4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80054e6:	683b      	ldr	r3, [r7, #0]
 80054e8:	699b      	ldr	r3, [r3, #24]
 80054ea:	011b      	lsls	r3, r3, #4
 80054ec:	693a      	ldr	r2, [r7, #16]
 80054ee:	4313      	orrs	r3, r2
 80054f0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	693a      	ldr	r2, [r7, #16]
 80054f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	68fa      	ldr	r2, [r7, #12]
 80054fc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80054fe:	683b      	ldr	r3, [r7, #0]
 8005500:	685a      	ldr	r2, [r3, #4]
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	697a      	ldr	r2, [r7, #20]
 800550a:	621a      	str	r2, [r3, #32]
}
 800550c:	bf00      	nop
 800550e:	371c      	adds	r7, #28
 8005510:	46bd      	mov	sp, r7
 8005512:	bc80      	pop	{r7}
 8005514:	4770      	bx	lr
 8005516:	bf00      	nop
 8005518:	40012c00 	.word	0x40012c00

0800551c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800551c:	b480      	push	{r7}
 800551e:	b087      	sub	sp, #28
 8005520:	af00      	add	r7, sp, #0
 8005522:	6078      	str	r0, [r7, #4]
 8005524:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	6a1b      	ldr	r3, [r3, #32]
 800552a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	6a1b      	ldr	r3, [r3, #32]
 8005536:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	685b      	ldr	r3, [r3, #4]
 800553c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	69db      	ldr	r3, [r3, #28]
 8005542:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800554a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005552:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005554:	683b      	ldr	r3, [r7, #0]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	021b      	lsls	r3, r3, #8
 800555a:	68fa      	ldr	r2, [r7, #12]
 800555c:	4313      	orrs	r3, r2
 800555e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005560:	693b      	ldr	r3, [r7, #16]
 8005562:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005566:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005568:	683b      	ldr	r3, [r7, #0]
 800556a:	689b      	ldr	r3, [r3, #8]
 800556c:	031b      	lsls	r3, r3, #12
 800556e:	693a      	ldr	r2, [r7, #16]
 8005570:	4313      	orrs	r3, r2
 8005572:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	4a0f      	ldr	r2, [pc, #60]	; (80055b4 <TIM_OC4_SetConfig+0x98>)
 8005578:	4293      	cmp	r3, r2
 800557a:	d109      	bne.n	8005590 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800557c:	697b      	ldr	r3, [r7, #20]
 800557e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005582:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005584:	683b      	ldr	r3, [r7, #0]
 8005586:	695b      	ldr	r3, [r3, #20]
 8005588:	019b      	lsls	r3, r3, #6
 800558a:	697a      	ldr	r2, [r7, #20]
 800558c:	4313      	orrs	r3, r2
 800558e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	697a      	ldr	r2, [r7, #20]
 8005594:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	68fa      	ldr	r2, [r7, #12]
 800559a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800559c:	683b      	ldr	r3, [r7, #0]
 800559e:	685a      	ldr	r2, [r3, #4]
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	693a      	ldr	r2, [r7, #16]
 80055a8:	621a      	str	r2, [r3, #32]
}
 80055aa:	bf00      	nop
 80055ac:	371c      	adds	r7, #28
 80055ae:	46bd      	mov	sp, r7
 80055b0:	bc80      	pop	{r7}
 80055b2:	4770      	bx	lr
 80055b4:	40012c00 	.word	0x40012c00

080055b8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80055b8:	b480      	push	{r7}
 80055ba:	b087      	sub	sp, #28
 80055bc:	af00      	add	r7, sp, #0
 80055be:	60f8      	str	r0, [r7, #12]
 80055c0:	60b9      	str	r1, [r7, #8]
 80055c2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80055c4:	68bb      	ldr	r3, [r7, #8]
 80055c6:	f003 031f 	and.w	r3, r3, #31
 80055ca:	2201      	movs	r2, #1
 80055cc:	fa02 f303 	lsl.w	r3, r2, r3
 80055d0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	6a1a      	ldr	r2, [r3, #32]
 80055d6:	697b      	ldr	r3, [r7, #20]
 80055d8:	43db      	mvns	r3, r3
 80055da:	401a      	ands	r2, r3
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	6a1a      	ldr	r2, [r3, #32]
 80055e4:	68bb      	ldr	r3, [r7, #8]
 80055e6:	f003 031f 	and.w	r3, r3, #31
 80055ea:	6879      	ldr	r1, [r7, #4]
 80055ec:	fa01 f303 	lsl.w	r3, r1, r3
 80055f0:	431a      	orrs	r2, r3
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	621a      	str	r2, [r3, #32]
}
 80055f6:	bf00      	nop
 80055f8:	371c      	adds	r7, #28
 80055fa:	46bd      	mov	sp, r7
 80055fc:	bc80      	pop	{r7}
 80055fe:	4770      	bx	lr

08005600 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005600:	b480      	push	{r7}
 8005602:	b085      	sub	sp, #20
 8005604:	af00      	add	r7, sp, #0
 8005606:	6078      	str	r0, [r7, #4]
 8005608:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005610:	2b01      	cmp	r3, #1
 8005612:	d101      	bne.n	8005618 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005614:	2302      	movs	r3, #2
 8005616:	e046      	b.n	80056a6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	2201      	movs	r2, #1
 800561c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2202      	movs	r2, #2
 8005624:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	685b      	ldr	r3, [r3, #4]
 800562e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	689b      	ldr	r3, [r3, #8]
 8005636:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800563e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005640:	683b      	ldr	r3, [r7, #0]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	68fa      	ldr	r2, [r7, #12]
 8005646:	4313      	orrs	r3, r2
 8005648:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	68fa      	ldr	r2, [r7, #12]
 8005650:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	4a16      	ldr	r2, [pc, #88]	; (80056b0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005658:	4293      	cmp	r3, r2
 800565a:	d00e      	beq.n	800567a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005664:	d009      	beq.n	800567a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	4a12      	ldr	r2, [pc, #72]	; (80056b4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800566c:	4293      	cmp	r3, r2
 800566e:	d004      	beq.n	800567a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	4a10      	ldr	r2, [pc, #64]	; (80056b8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005676:	4293      	cmp	r3, r2
 8005678:	d10c      	bne.n	8005694 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800567a:	68bb      	ldr	r3, [r7, #8]
 800567c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005680:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005682:	683b      	ldr	r3, [r7, #0]
 8005684:	685b      	ldr	r3, [r3, #4]
 8005686:	68ba      	ldr	r2, [r7, #8]
 8005688:	4313      	orrs	r3, r2
 800568a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	68ba      	ldr	r2, [r7, #8]
 8005692:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	2201      	movs	r2, #1
 8005698:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2200      	movs	r2, #0
 80056a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80056a4:	2300      	movs	r3, #0
}
 80056a6:	4618      	mov	r0, r3
 80056a8:	3714      	adds	r7, #20
 80056aa:	46bd      	mov	sp, r7
 80056ac:	bc80      	pop	{r7}
 80056ae:	4770      	bx	lr
 80056b0:	40012c00 	.word	0x40012c00
 80056b4:	40000400 	.word	0x40000400
 80056b8:	40000800 	.word	0x40000800

080056bc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80056bc:	b480      	push	{r7}
 80056be:	b085      	sub	sp, #20
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	6078      	str	r0, [r7, #4]
 80056c4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80056c6:	2300      	movs	r3, #0
 80056c8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80056d0:	2b01      	cmp	r3, #1
 80056d2:	d101      	bne.n	80056d8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80056d4:	2302      	movs	r3, #2
 80056d6:	e03d      	b.n	8005754 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	2201      	movs	r2, #1
 80056dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80056e6:	683b      	ldr	r3, [r7, #0]
 80056e8:	68db      	ldr	r3, [r3, #12]
 80056ea:	4313      	orrs	r3, r2
 80056ec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80056f4:	683b      	ldr	r3, [r7, #0]
 80056f6:	689b      	ldr	r3, [r3, #8]
 80056f8:	4313      	orrs	r3, r2
 80056fa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005702:	683b      	ldr	r3, [r7, #0]
 8005704:	685b      	ldr	r3, [r3, #4]
 8005706:	4313      	orrs	r3, r2
 8005708:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005710:	683b      	ldr	r3, [r7, #0]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	4313      	orrs	r3, r2
 8005716:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800571e:	683b      	ldr	r3, [r7, #0]
 8005720:	691b      	ldr	r3, [r3, #16]
 8005722:	4313      	orrs	r3, r2
 8005724:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800572c:	683b      	ldr	r3, [r7, #0]
 800572e:	695b      	ldr	r3, [r3, #20]
 8005730:	4313      	orrs	r3, r2
 8005732:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800573a:	683b      	ldr	r3, [r7, #0]
 800573c:	69db      	ldr	r3, [r3, #28]
 800573e:	4313      	orrs	r3, r2
 8005740:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	68fa      	ldr	r2, [r7, #12]
 8005748:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	2200      	movs	r2, #0
 800574e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005752:	2300      	movs	r3, #0
}
 8005754:	4618      	mov	r0, r3
 8005756:	3714      	adds	r7, #20
 8005758:	46bd      	mov	sp, r7
 800575a:	bc80      	pop	{r7}
 800575c:	4770      	bx	lr

0800575e <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800575e:	b580      	push	{r7, lr}
 8005760:	b082      	sub	sp, #8
 8005762:	af00      	add	r7, sp, #0
 8005764:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	2b00      	cmp	r3, #0
 800576a:	d101      	bne.n	8005770 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800576c:	2301      	movs	r3, #1
 800576e:	e03f      	b.n	80057f0 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005776:	b2db      	uxtb	r3, r3
 8005778:	2b00      	cmp	r3, #0
 800577a:	d106      	bne.n	800578a <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2200      	movs	r2, #0
 8005780:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005784:	6878      	ldr	r0, [r7, #4]
 8005786:	f7fc fa8b 	bl	8001ca0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	2224      	movs	r2, #36	; 0x24
 800578e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	68da      	ldr	r2, [r3, #12]
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80057a0:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80057a2:	6878      	ldr	r0, [r7, #4]
 80057a4:	f000 fba0 	bl	8005ee8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	691a      	ldr	r2, [r3, #16]
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80057b6:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	695a      	ldr	r2, [r3, #20]
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80057c6:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	68da      	ldr	r2, [r3, #12]
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80057d6:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	2200      	movs	r2, #0
 80057dc:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	2220      	movs	r2, #32
 80057e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	2220      	movs	r2, #32
 80057ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80057ee:	2300      	movs	r3, #0
}
 80057f0:	4618      	mov	r0, r3
 80057f2:	3708      	adds	r7, #8
 80057f4:	46bd      	mov	sp, r7
 80057f6:	bd80      	pop	{r7, pc}

080057f8 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80057f8:	b580      	push	{r7, lr}
 80057fa:	b084      	sub	sp, #16
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	60f8      	str	r0, [r7, #12]
 8005800:	60b9      	str	r1, [r7, #8]
 8005802:	4613      	mov	r3, r2
 8005804:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800580c:	b2db      	uxtb	r3, r3
 800580e:	2b20      	cmp	r3, #32
 8005810:	d11d      	bne.n	800584e <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8005812:	68bb      	ldr	r3, [r7, #8]
 8005814:	2b00      	cmp	r3, #0
 8005816:	d002      	beq.n	800581e <HAL_UART_Receive_IT+0x26>
 8005818:	88fb      	ldrh	r3, [r7, #6]
 800581a:	2b00      	cmp	r3, #0
 800581c:	d101      	bne.n	8005822 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800581e:	2301      	movs	r3, #1
 8005820:	e016      	b.n	8005850 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005828:	2b01      	cmp	r3, #1
 800582a:	d101      	bne.n	8005830 <HAL_UART_Receive_IT+0x38>
 800582c:	2302      	movs	r3, #2
 800582e:	e00f      	b.n	8005850 <HAL_UART_Receive_IT+0x58>
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	2201      	movs	r2, #1
 8005834:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	2200      	movs	r2, #0
 800583c:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 800583e:	88fb      	ldrh	r3, [r7, #6]
 8005840:	461a      	mov	r2, r3
 8005842:	68b9      	ldr	r1, [r7, #8]
 8005844:	68f8      	ldr	r0, [r7, #12]
 8005846:	f000 f9c5 	bl	8005bd4 <UART_Start_Receive_IT>
 800584a:	4603      	mov	r3, r0
 800584c:	e000      	b.n	8005850 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800584e:	2302      	movs	r3, #2
  }
}
 8005850:	4618      	mov	r0, r3
 8005852:	3710      	adds	r7, #16
 8005854:	46bd      	mov	sp, r7
 8005856:	bd80      	pop	{r7, pc}

08005858 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005858:	b580      	push	{r7, lr}
 800585a:	b08a      	sub	sp, #40	; 0x28
 800585c:	af00      	add	r7, sp, #0
 800585e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	68db      	ldr	r3, [r3, #12]
 800586e:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	695b      	ldr	r3, [r3, #20]
 8005876:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8005878:	2300      	movs	r3, #0
 800587a:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 800587c:	2300      	movs	r3, #0
 800587e:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005882:	f003 030f 	and.w	r3, r3, #15
 8005886:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8005888:	69bb      	ldr	r3, [r7, #24]
 800588a:	2b00      	cmp	r3, #0
 800588c:	d10d      	bne.n	80058aa <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800588e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005890:	f003 0320 	and.w	r3, r3, #32
 8005894:	2b00      	cmp	r3, #0
 8005896:	d008      	beq.n	80058aa <HAL_UART_IRQHandler+0x52>
 8005898:	6a3b      	ldr	r3, [r7, #32]
 800589a:	f003 0320 	and.w	r3, r3, #32
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d003      	beq.n	80058aa <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80058a2:	6878      	ldr	r0, [r7, #4]
 80058a4:	f000 fa76 	bl	8005d94 <UART_Receive_IT>
      return;
 80058a8:	e17b      	b.n	8005ba2 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80058aa:	69bb      	ldr	r3, [r7, #24]
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	f000 80b1 	beq.w	8005a14 <HAL_UART_IRQHandler+0x1bc>
 80058b2:	69fb      	ldr	r3, [r7, #28]
 80058b4:	f003 0301 	and.w	r3, r3, #1
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d105      	bne.n	80058c8 <HAL_UART_IRQHandler+0x70>
 80058bc:	6a3b      	ldr	r3, [r7, #32]
 80058be:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	f000 80a6 	beq.w	8005a14 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80058c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058ca:	f003 0301 	and.w	r3, r3, #1
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d00a      	beq.n	80058e8 <HAL_UART_IRQHandler+0x90>
 80058d2:	6a3b      	ldr	r3, [r7, #32]
 80058d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d005      	beq.n	80058e8 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058e0:	f043 0201 	orr.w	r2, r3, #1
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80058e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058ea:	f003 0304 	and.w	r3, r3, #4
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d00a      	beq.n	8005908 <HAL_UART_IRQHandler+0xb0>
 80058f2:	69fb      	ldr	r3, [r7, #28]
 80058f4:	f003 0301 	and.w	r3, r3, #1
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d005      	beq.n	8005908 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005900:	f043 0202 	orr.w	r2, r3, #2
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800590a:	f003 0302 	and.w	r3, r3, #2
 800590e:	2b00      	cmp	r3, #0
 8005910:	d00a      	beq.n	8005928 <HAL_UART_IRQHandler+0xd0>
 8005912:	69fb      	ldr	r3, [r7, #28]
 8005914:	f003 0301 	and.w	r3, r3, #1
 8005918:	2b00      	cmp	r3, #0
 800591a:	d005      	beq.n	8005928 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005920:	f043 0204 	orr.w	r2, r3, #4
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8005928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800592a:	f003 0308 	and.w	r3, r3, #8
 800592e:	2b00      	cmp	r3, #0
 8005930:	d00f      	beq.n	8005952 <HAL_UART_IRQHandler+0xfa>
 8005932:	6a3b      	ldr	r3, [r7, #32]
 8005934:	f003 0320 	and.w	r3, r3, #32
 8005938:	2b00      	cmp	r3, #0
 800593a:	d104      	bne.n	8005946 <HAL_UART_IRQHandler+0xee>
 800593c:	69fb      	ldr	r3, [r7, #28]
 800593e:	f003 0301 	and.w	r3, r3, #1
 8005942:	2b00      	cmp	r3, #0
 8005944:	d005      	beq.n	8005952 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800594a:	f043 0208 	orr.w	r2, r3, #8
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005956:	2b00      	cmp	r3, #0
 8005958:	f000 811e 	beq.w	8005b98 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800595c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800595e:	f003 0320 	and.w	r3, r3, #32
 8005962:	2b00      	cmp	r3, #0
 8005964:	d007      	beq.n	8005976 <HAL_UART_IRQHandler+0x11e>
 8005966:	6a3b      	ldr	r3, [r7, #32]
 8005968:	f003 0320 	and.w	r3, r3, #32
 800596c:	2b00      	cmp	r3, #0
 800596e:	d002      	beq.n	8005976 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8005970:	6878      	ldr	r0, [r7, #4]
 8005972:	f000 fa0f 	bl	8005d94 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	695b      	ldr	r3, [r3, #20]
 800597c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005980:	2b00      	cmp	r3, #0
 8005982:	bf14      	ite	ne
 8005984:	2301      	movne	r3, #1
 8005986:	2300      	moveq	r3, #0
 8005988:	b2db      	uxtb	r3, r3
 800598a:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005990:	f003 0308 	and.w	r3, r3, #8
 8005994:	2b00      	cmp	r3, #0
 8005996:	d102      	bne.n	800599e <HAL_UART_IRQHandler+0x146>
 8005998:	697b      	ldr	r3, [r7, #20]
 800599a:	2b00      	cmp	r3, #0
 800599c:	d031      	beq.n	8005a02 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800599e:	6878      	ldr	r0, [r7, #4]
 80059a0:	f000 f951 	bl	8005c46 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	695b      	ldr	r3, [r3, #20]
 80059aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d023      	beq.n	80059fa <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	695a      	ldr	r2, [r3, #20]
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80059c0:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d013      	beq.n	80059f2 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059ce:	4a76      	ldr	r2, [pc, #472]	; (8005ba8 <HAL_UART_IRQHandler+0x350>)
 80059d0:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059d6:	4618      	mov	r0, r3
 80059d8:	f7fd fa72 	bl	8002ec0 <HAL_DMA_Abort_IT>
 80059dc:	4603      	mov	r3, r0
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d016      	beq.n	8005a10 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059e8:	687a      	ldr	r2, [r7, #4]
 80059ea:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80059ec:	4610      	mov	r0, r2
 80059ee:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80059f0:	e00e      	b.n	8005a10 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80059f2:	6878      	ldr	r0, [r7, #4]
 80059f4:	f000 f8da 	bl	8005bac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80059f8:	e00a      	b.n	8005a10 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80059fa:	6878      	ldr	r0, [r7, #4]
 80059fc:	f000 f8d6 	bl	8005bac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a00:	e006      	b.n	8005a10 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005a02:	6878      	ldr	r0, [r7, #4]
 8005a04:	f000 f8d2 	bl	8005bac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	2200      	movs	r2, #0
 8005a0c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005a0e:	e0c3      	b.n	8005b98 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a10:	bf00      	nop
    return;
 8005a12:	e0c1      	b.n	8005b98 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a18:	2b01      	cmp	r3, #1
 8005a1a:	f040 80a1 	bne.w	8005b60 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8005a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a20:	f003 0310 	and.w	r3, r3, #16
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	f000 809b 	beq.w	8005b60 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8005a2a:	6a3b      	ldr	r3, [r7, #32]
 8005a2c:	f003 0310 	and.w	r3, r3, #16
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	f000 8095 	beq.w	8005b60 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005a36:	2300      	movs	r3, #0
 8005a38:	60fb      	str	r3, [r7, #12]
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	60fb      	str	r3, [r7, #12]
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	685b      	ldr	r3, [r3, #4]
 8005a48:	60fb      	str	r3, [r7, #12]
 8005a4a:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	695b      	ldr	r3, [r3, #20]
 8005a52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d04e      	beq.n	8005af8 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	685b      	ldr	r3, [r3, #4]
 8005a62:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8005a64:	8a3b      	ldrh	r3, [r7, #16]
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	f000 8098 	beq.w	8005b9c <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005a70:	8a3a      	ldrh	r2, [r7, #16]
 8005a72:	429a      	cmp	r2, r3
 8005a74:	f080 8092 	bcs.w	8005b9c <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	8a3a      	ldrh	r2, [r7, #16]
 8005a7c:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a82:	699b      	ldr	r3, [r3, #24]
 8005a84:	2b20      	cmp	r3, #32
 8005a86:	d02b      	beq.n	8005ae0 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	68da      	ldr	r2, [r3, #12]
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005a96:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	695a      	ldr	r2, [r3, #20]
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	f022 0201 	bic.w	r2, r2, #1
 8005aa6:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	695a      	ldr	r2, [r3, #20]
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005ab6:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	2220      	movs	r2, #32
 8005abc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	2200      	movs	r2, #0
 8005ac4:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	68da      	ldr	r2, [r3, #12]
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	f022 0210 	bic.w	r2, r2, #16
 8005ad4:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ada:	4618      	mov	r0, r3
 8005adc:	f7fd f9b5 	bl	8002e4a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005ae8:	b29b      	uxth	r3, r3
 8005aea:	1ad3      	subs	r3, r2, r3
 8005aec:	b29b      	uxth	r3, r3
 8005aee:	4619      	mov	r1, r3
 8005af0:	6878      	ldr	r0, [r7, #4]
 8005af2:	f000 f864 	bl	8005bbe <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8005af6:	e051      	b.n	8005b9c <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005b00:	b29b      	uxth	r3, r3
 8005b02:	1ad3      	subs	r3, r2, r3
 8005b04:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005b0a:	b29b      	uxth	r3, r3
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d047      	beq.n	8005ba0 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8005b10:	8a7b      	ldrh	r3, [r7, #18]
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d044      	beq.n	8005ba0 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	68da      	ldr	r2, [r3, #12]
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005b24:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	695a      	ldr	r2, [r3, #20]
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	f022 0201 	bic.w	r2, r2, #1
 8005b34:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	2220      	movs	r2, #32
 8005b3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	2200      	movs	r2, #0
 8005b42:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	68da      	ldr	r2, [r3, #12]
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	f022 0210 	bic.w	r2, r2, #16
 8005b52:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005b54:	8a7b      	ldrh	r3, [r7, #18]
 8005b56:	4619      	mov	r1, r3
 8005b58:	6878      	ldr	r0, [r7, #4]
 8005b5a:	f000 f830 	bl	8005bbe <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8005b5e:	e01f      	b.n	8005ba0 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d008      	beq.n	8005b7c <HAL_UART_IRQHandler+0x324>
 8005b6a:	6a3b      	ldr	r3, [r7, #32]
 8005b6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d003      	beq.n	8005b7c <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8005b74:	6878      	ldr	r0, [r7, #4]
 8005b76:	f000 f8a6 	bl	8005cc6 <UART_Transmit_IT>
    return;
 8005b7a:	e012      	b.n	8005ba2 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d00d      	beq.n	8005ba2 <HAL_UART_IRQHandler+0x34a>
 8005b86:	6a3b      	ldr	r3, [r7, #32]
 8005b88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d008      	beq.n	8005ba2 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8005b90:	6878      	ldr	r0, [r7, #4]
 8005b92:	f000 f8e7 	bl	8005d64 <UART_EndTransmit_IT>
    return;
 8005b96:	e004      	b.n	8005ba2 <HAL_UART_IRQHandler+0x34a>
    return;
 8005b98:	bf00      	nop
 8005b9a:	e002      	b.n	8005ba2 <HAL_UART_IRQHandler+0x34a>
      return;
 8005b9c:	bf00      	nop
 8005b9e:	e000      	b.n	8005ba2 <HAL_UART_IRQHandler+0x34a>
      return;
 8005ba0:	bf00      	nop
  }
}
 8005ba2:	3728      	adds	r7, #40	; 0x28
 8005ba4:	46bd      	mov	sp, r7
 8005ba6:	bd80      	pop	{r7, pc}
 8005ba8:	08005c9f 	.word	0x08005c9f

08005bac <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005bac:	b480      	push	{r7}
 8005bae:	b083      	sub	sp, #12
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005bb4:	bf00      	nop
 8005bb6:	370c      	adds	r7, #12
 8005bb8:	46bd      	mov	sp, r7
 8005bba:	bc80      	pop	{r7}
 8005bbc:	4770      	bx	lr

08005bbe <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005bbe:	b480      	push	{r7}
 8005bc0:	b083      	sub	sp, #12
 8005bc2:	af00      	add	r7, sp, #0
 8005bc4:	6078      	str	r0, [r7, #4]
 8005bc6:	460b      	mov	r3, r1
 8005bc8:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005bca:	bf00      	nop
 8005bcc:	370c      	adds	r7, #12
 8005bce:	46bd      	mov	sp, r7
 8005bd0:	bc80      	pop	{r7}
 8005bd2:	4770      	bx	lr

08005bd4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005bd4:	b480      	push	{r7}
 8005bd6:	b085      	sub	sp, #20
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	60f8      	str	r0, [r7, #12]
 8005bdc:	60b9      	str	r1, [r7, #8]
 8005bde:	4613      	mov	r3, r2
 8005be0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	68ba      	ldr	r2, [r7, #8]
 8005be6:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	88fa      	ldrh	r2, [r7, #6]
 8005bec:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	88fa      	ldrh	r2, [r7, #6]
 8005bf2:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	2200      	movs	r2, #0
 8005bf8:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	2222      	movs	r2, #34	; 0x22
 8005bfe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	2200      	movs	r2, #0
 8005c06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	68da      	ldr	r2, [r3, #12]
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005c18:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	695a      	ldr	r2, [r3, #20]
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	f042 0201 	orr.w	r2, r2, #1
 8005c28:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	68da      	ldr	r2, [r3, #12]
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	f042 0220 	orr.w	r2, r2, #32
 8005c38:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005c3a:	2300      	movs	r3, #0
}
 8005c3c:	4618      	mov	r0, r3
 8005c3e:	3714      	adds	r7, #20
 8005c40:	46bd      	mov	sp, r7
 8005c42:	bc80      	pop	{r7}
 8005c44:	4770      	bx	lr

08005c46 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005c46:	b480      	push	{r7}
 8005c48:	b083      	sub	sp, #12
 8005c4a:	af00      	add	r7, sp, #0
 8005c4c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	68da      	ldr	r2, [r3, #12]
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005c5c:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	695a      	ldr	r2, [r3, #20]
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	f022 0201 	bic.w	r2, r2, #1
 8005c6c:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c72:	2b01      	cmp	r3, #1
 8005c74:	d107      	bne.n	8005c86 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	68da      	ldr	r2, [r3, #12]
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	f022 0210 	bic.w	r2, r2, #16
 8005c84:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	2220      	movs	r2, #32
 8005c8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	2200      	movs	r2, #0
 8005c92:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005c94:	bf00      	nop
 8005c96:	370c      	adds	r7, #12
 8005c98:	46bd      	mov	sp, r7
 8005c9a:	bc80      	pop	{r7}
 8005c9c:	4770      	bx	lr

08005c9e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005c9e:	b580      	push	{r7, lr}
 8005ca0:	b084      	sub	sp, #16
 8005ca2:	af00      	add	r7, sp, #0
 8005ca4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005caa:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	2200      	movs	r2, #0
 8005cb0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	2200      	movs	r2, #0
 8005cb6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005cb8:	68f8      	ldr	r0, [r7, #12]
 8005cba:	f7ff ff77 	bl	8005bac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005cbe:	bf00      	nop
 8005cc0:	3710      	adds	r7, #16
 8005cc2:	46bd      	mov	sp, r7
 8005cc4:	bd80      	pop	{r7, pc}

08005cc6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005cc6:	b480      	push	{r7}
 8005cc8:	b085      	sub	sp, #20
 8005cca:	af00      	add	r7, sp, #0
 8005ccc:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005cd4:	b2db      	uxtb	r3, r3
 8005cd6:	2b21      	cmp	r3, #33	; 0x21
 8005cd8:	d13e      	bne.n	8005d58 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	689b      	ldr	r3, [r3, #8]
 8005cde:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ce2:	d114      	bne.n	8005d0e <UART_Transmit_IT+0x48>
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	691b      	ldr	r3, [r3, #16]
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d110      	bne.n	8005d0e <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	6a1b      	ldr	r3, [r3, #32]
 8005cf0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	881b      	ldrh	r3, [r3, #0]
 8005cf6:	461a      	mov	r2, r3
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005d00:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	6a1b      	ldr	r3, [r3, #32]
 8005d06:	1c9a      	adds	r2, r3, #2
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	621a      	str	r2, [r3, #32]
 8005d0c:	e008      	b.n	8005d20 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	6a1b      	ldr	r3, [r3, #32]
 8005d12:	1c59      	adds	r1, r3, #1
 8005d14:	687a      	ldr	r2, [r7, #4]
 8005d16:	6211      	str	r1, [r2, #32]
 8005d18:	781a      	ldrb	r2, [r3, #0]
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005d24:	b29b      	uxth	r3, r3
 8005d26:	3b01      	subs	r3, #1
 8005d28:	b29b      	uxth	r3, r3
 8005d2a:	687a      	ldr	r2, [r7, #4]
 8005d2c:	4619      	mov	r1, r3
 8005d2e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d10f      	bne.n	8005d54 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	68da      	ldr	r2, [r3, #12]
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005d42:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	68da      	ldr	r2, [r3, #12]
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005d52:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005d54:	2300      	movs	r3, #0
 8005d56:	e000      	b.n	8005d5a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005d58:	2302      	movs	r3, #2
  }
}
 8005d5a:	4618      	mov	r0, r3
 8005d5c:	3714      	adds	r7, #20
 8005d5e:	46bd      	mov	sp, r7
 8005d60:	bc80      	pop	{r7}
 8005d62:	4770      	bx	lr

08005d64 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005d64:	b580      	push	{r7, lr}
 8005d66:	b082      	sub	sp, #8
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	68da      	ldr	r2, [r3, #12]
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005d7a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	2220      	movs	r2, #32
 8005d80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005d84:	6878      	ldr	r0, [r7, #4]
 8005d86:	f7fb fd71 	bl	800186c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005d8a:	2300      	movs	r3, #0
}
 8005d8c:	4618      	mov	r0, r3
 8005d8e:	3708      	adds	r7, #8
 8005d90:	46bd      	mov	sp, r7
 8005d92:	bd80      	pop	{r7, pc}

08005d94 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005d94:	b580      	push	{r7, lr}
 8005d96:	b086      	sub	sp, #24
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005da2:	b2db      	uxtb	r3, r3
 8005da4:	2b22      	cmp	r3, #34	; 0x22
 8005da6:	f040 8099 	bne.w	8005edc <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	689b      	ldr	r3, [r3, #8]
 8005dae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005db2:	d117      	bne.n	8005de4 <UART_Receive_IT+0x50>
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	691b      	ldr	r3, [r3, #16]
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d113      	bne.n	8005de4 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005dbc:	2300      	movs	r3, #0
 8005dbe:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dc4:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	685b      	ldr	r3, [r3, #4]
 8005dcc:	b29b      	uxth	r3, r3
 8005dce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005dd2:	b29a      	uxth	r2, r3
 8005dd4:	693b      	ldr	r3, [r7, #16]
 8005dd6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ddc:	1c9a      	adds	r2, r3, #2
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	629a      	str	r2, [r3, #40]	; 0x28
 8005de2:	e026      	b.n	8005e32 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005de8:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8005dea:	2300      	movs	r3, #0
 8005dec:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	689b      	ldr	r3, [r3, #8]
 8005df2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005df6:	d007      	beq.n	8005e08 <UART_Receive_IT+0x74>
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	689b      	ldr	r3, [r3, #8]
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d10a      	bne.n	8005e16 <UART_Receive_IT+0x82>
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	691b      	ldr	r3, [r3, #16]
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d106      	bne.n	8005e16 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	685b      	ldr	r3, [r3, #4]
 8005e0e:	b2da      	uxtb	r2, r3
 8005e10:	697b      	ldr	r3, [r7, #20]
 8005e12:	701a      	strb	r2, [r3, #0]
 8005e14:	e008      	b.n	8005e28 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	685b      	ldr	r3, [r3, #4]
 8005e1c:	b2db      	uxtb	r3, r3
 8005e1e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005e22:	b2da      	uxtb	r2, r3
 8005e24:	697b      	ldr	r3, [r7, #20]
 8005e26:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e2c:	1c5a      	adds	r2, r3, #1
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005e36:	b29b      	uxth	r3, r3
 8005e38:	3b01      	subs	r3, #1
 8005e3a:	b29b      	uxth	r3, r3
 8005e3c:	687a      	ldr	r2, [r7, #4]
 8005e3e:	4619      	mov	r1, r3
 8005e40:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d148      	bne.n	8005ed8 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	68da      	ldr	r2, [r3, #12]
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	f022 0220 	bic.w	r2, r2, #32
 8005e54:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	68da      	ldr	r2, [r3, #12]
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005e64:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	695a      	ldr	r2, [r3, #20]
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	f022 0201 	bic.w	r2, r2, #1
 8005e74:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	2220      	movs	r2, #32
 8005e7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e82:	2b01      	cmp	r3, #1
 8005e84:	d123      	bne.n	8005ece <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	2200      	movs	r2, #0
 8005e8a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	68da      	ldr	r2, [r3, #12]
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	f022 0210 	bic.w	r2, r2, #16
 8005e9a:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	f003 0310 	and.w	r3, r3, #16
 8005ea6:	2b10      	cmp	r3, #16
 8005ea8:	d10a      	bne.n	8005ec0 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005eaa:	2300      	movs	r3, #0
 8005eac:	60fb      	str	r3, [r7, #12]
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	60fb      	str	r3, [r7, #12]
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	685b      	ldr	r3, [r3, #4]
 8005ebc:	60fb      	str	r3, [r7, #12]
 8005ebe:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005ec4:	4619      	mov	r1, r3
 8005ec6:	6878      	ldr	r0, [r7, #4]
 8005ec8:	f7ff fe79 	bl	8005bbe <HAL_UARTEx_RxEventCallback>
 8005ecc:	e002      	b.n	8005ed4 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8005ece:	6878      	ldr	r0, [r7, #4]
 8005ed0:	f7fb fcae 	bl	8001830 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005ed4:	2300      	movs	r3, #0
 8005ed6:	e002      	b.n	8005ede <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8005ed8:	2300      	movs	r3, #0
 8005eda:	e000      	b.n	8005ede <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8005edc:	2302      	movs	r3, #2
  }
}
 8005ede:	4618      	mov	r0, r3
 8005ee0:	3718      	adds	r7, #24
 8005ee2:	46bd      	mov	sp, r7
 8005ee4:	bd80      	pop	{r7, pc}
	...

08005ee8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005ee8:	b580      	push	{r7, lr}
 8005eea:	b084      	sub	sp, #16
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	691b      	ldr	r3, [r3, #16]
 8005ef6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	68da      	ldr	r2, [r3, #12]
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	430a      	orrs	r2, r1
 8005f04:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	689a      	ldr	r2, [r3, #8]
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	691b      	ldr	r3, [r3, #16]
 8005f0e:	431a      	orrs	r2, r3
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	695b      	ldr	r3, [r3, #20]
 8005f14:	4313      	orrs	r3, r2
 8005f16:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	68db      	ldr	r3, [r3, #12]
 8005f1e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8005f22:	f023 030c 	bic.w	r3, r3, #12
 8005f26:	687a      	ldr	r2, [r7, #4]
 8005f28:	6812      	ldr	r2, [r2, #0]
 8005f2a:	68b9      	ldr	r1, [r7, #8]
 8005f2c:	430b      	orrs	r3, r1
 8005f2e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	695b      	ldr	r3, [r3, #20]
 8005f36:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	699a      	ldr	r2, [r3, #24]
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	430a      	orrs	r2, r1
 8005f44:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	4a2c      	ldr	r2, [pc, #176]	; (8005ffc <UART_SetConfig+0x114>)
 8005f4c:	4293      	cmp	r3, r2
 8005f4e:	d103      	bne.n	8005f58 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005f50:	f7fd fffc 	bl	8003f4c <HAL_RCC_GetPCLK2Freq>
 8005f54:	60f8      	str	r0, [r7, #12]
 8005f56:	e002      	b.n	8005f5e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005f58:	f7fd ffe4 	bl	8003f24 <HAL_RCC_GetPCLK1Freq>
 8005f5c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005f5e:	68fa      	ldr	r2, [r7, #12]
 8005f60:	4613      	mov	r3, r2
 8005f62:	009b      	lsls	r3, r3, #2
 8005f64:	4413      	add	r3, r2
 8005f66:	009a      	lsls	r2, r3, #2
 8005f68:	441a      	add	r2, r3
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	685b      	ldr	r3, [r3, #4]
 8005f6e:	009b      	lsls	r3, r3, #2
 8005f70:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f74:	4a22      	ldr	r2, [pc, #136]	; (8006000 <UART_SetConfig+0x118>)
 8005f76:	fba2 2303 	umull	r2, r3, r2, r3
 8005f7a:	095b      	lsrs	r3, r3, #5
 8005f7c:	0119      	lsls	r1, r3, #4
 8005f7e:	68fa      	ldr	r2, [r7, #12]
 8005f80:	4613      	mov	r3, r2
 8005f82:	009b      	lsls	r3, r3, #2
 8005f84:	4413      	add	r3, r2
 8005f86:	009a      	lsls	r2, r3, #2
 8005f88:	441a      	add	r2, r3
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	685b      	ldr	r3, [r3, #4]
 8005f8e:	009b      	lsls	r3, r3, #2
 8005f90:	fbb2 f2f3 	udiv	r2, r2, r3
 8005f94:	4b1a      	ldr	r3, [pc, #104]	; (8006000 <UART_SetConfig+0x118>)
 8005f96:	fba3 0302 	umull	r0, r3, r3, r2
 8005f9a:	095b      	lsrs	r3, r3, #5
 8005f9c:	2064      	movs	r0, #100	; 0x64
 8005f9e:	fb00 f303 	mul.w	r3, r0, r3
 8005fa2:	1ad3      	subs	r3, r2, r3
 8005fa4:	011b      	lsls	r3, r3, #4
 8005fa6:	3332      	adds	r3, #50	; 0x32
 8005fa8:	4a15      	ldr	r2, [pc, #84]	; (8006000 <UART_SetConfig+0x118>)
 8005faa:	fba2 2303 	umull	r2, r3, r2, r3
 8005fae:	095b      	lsrs	r3, r3, #5
 8005fb0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005fb4:	4419      	add	r1, r3
 8005fb6:	68fa      	ldr	r2, [r7, #12]
 8005fb8:	4613      	mov	r3, r2
 8005fba:	009b      	lsls	r3, r3, #2
 8005fbc:	4413      	add	r3, r2
 8005fbe:	009a      	lsls	r2, r3, #2
 8005fc0:	441a      	add	r2, r3
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	685b      	ldr	r3, [r3, #4]
 8005fc6:	009b      	lsls	r3, r3, #2
 8005fc8:	fbb2 f2f3 	udiv	r2, r2, r3
 8005fcc:	4b0c      	ldr	r3, [pc, #48]	; (8006000 <UART_SetConfig+0x118>)
 8005fce:	fba3 0302 	umull	r0, r3, r3, r2
 8005fd2:	095b      	lsrs	r3, r3, #5
 8005fd4:	2064      	movs	r0, #100	; 0x64
 8005fd6:	fb00 f303 	mul.w	r3, r0, r3
 8005fda:	1ad3      	subs	r3, r2, r3
 8005fdc:	011b      	lsls	r3, r3, #4
 8005fde:	3332      	adds	r3, #50	; 0x32
 8005fe0:	4a07      	ldr	r2, [pc, #28]	; (8006000 <UART_SetConfig+0x118>)
 8005fe2:	fba2 2303 	umull	r2, r3, r2, r3
 8005fe6:	095b      	lsrs	r3, r3, #5
 8005fe8:	f003 020f 	and.w	r2, r3, #15
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	440a      	add	r2, r1
 8005ff2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005ff4:	bf00      	nop
 8005ff6:	3710      	adds	r7, #16
 8005ff8:	46bd      	mov	sp, r7
 8005ffa:	bd80      	pop	{r7, pc}
 8005ffc:	40013800 	.word	0x40013800
 8006000:	51eb851f 	.word	0x51eb851f

08006004 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8006004:	b084      	sub	sp, #16
 8006006:	b480      	push	{r7}
 8006008:	b083      	sub	sp, #12
 800600a:	af00      	add	r7, sp, #0
 800600c:	6078      	str	r0, [r7, #4]
 800600e:	f107 0014 	add.w	r0, r7, #20
 8006012:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006016:	2300      	movs	r3, #0
}
 8006018:	4618      	mov	r0, r3
 800601a:	370c      	adds	r7, #12
 800601c:	46bd      	mov	sp, r7
 800601e:	bc80      	pop	{r7}
 8006020:	b004      	add	sp, #16
 8006022:	4770      	bx	lr

08006024 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8006024:	b480      	push	{r7}
 8006026:	b085      	sub	sp, #20
 8006028:	af00      	add	r7, sp, #0
 800602a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800602c:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8006030:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8006038:	b29a      	uxth	r2, r3
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	b29b      	uxth	r3, r3
 800603e:	43db      	mvns	r3, r3
 8006040:	b29b      	uxth	r3, r3
 8006042:	4013      	ands	r3, r2
 8006044:	b29a      	uxth	r2, r3
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800604c:	2300      	movs	r3, #0
}
 800604e:	4618      	mov	r0, r3
 8006050:	3714      	adds	r7, #20
 8006052:	46bd      	mov	sp, r7
 8006054:	bc80      	pop	{r7}
 8006056:	4770      	bx	lr

08006058 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8006058:	b480      	push	{r7}
 800605a:	b083      	sub	sp, #12
 800605c:	af00      	add	r7, sp, #0
 800605e:	6078      	str	r0, [r7, #4]
 8006060:	460b      	mov	r3, r1
 8006062:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8006064:	2300      	movs	r3, #0
}
 8006066:	4618      	mov	r0, r3
 8006068:	370c      	adds	r7, #12
 800606a:	46bd      	mov	sp, r7
 800606c:	bc80      	pop	{r7}
 800606e:	4770      	bx	lr

08006070 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8006070:	b084      	sub	sp, #16
 8006072:	b480      	push	{r7}
 8006074:	b083      	sub	sp, #12
 8006076:	af00      	add	r7, sp, #0
 8006078:	6078      	str	r0, [r7, #4]
 800607a:	f107 0014 	add.w	r0, r7, #20
 800607e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	2201      	movs	r2, #1
 8006086:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	2200      	movs	r2, #0
 800608e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	2200      	movs	r2, #0
 8006096:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	2200      	movs	r2, #0
 800609e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80060a2:	2300      	movs	r3, #0
}
 80060a4:	4618      	mov	r0, r3
 80060a6:	370c      	adds	r7, #12
 80060a8:	46bd      	mov	sp, r7
 80060aa:	bc80      	pop	{r7}
 80060ac:	b004      	add	sp, #16
 80060ae:	4770      	bx	lr

080060b0 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 80060b0:	b480      	push	{r7}
 80060b2:	b083      	sub	sp, #12
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80060b8:	2300      	movs	r3, #0
}
 80060ba:	4618      	mov	r0, r3
 80060bc:	370c      	adds	r7, #12
 80060be:	46bd      	mov	sp, r7
 80060c0:	bc80      	pop	{r7}
 80060c2:	4770      	bx	lr

080060c4 <__errno>:
 80060c4:	4b01      	ldr	r3, [pc, #4]	; (80060cc <__errno+0x8>)
 80060c6:	6818      	ldr	r0, [r3, #0]
 80060c8:	4770      	bx	lr
 80060ca:	bf00      	nop
 80060cc:	20000014 	.word	0x20000014

080060d0 <__libc_init_array>:
 80060d0:	b570      	push	{r4, r5, r6, lr}
 80060d2:	2600      	movs	r6, #0
 80060d4:	4d0c      	ldr	r5, [pc, #48]	; (8006108 <__libc_init_array+0x38>)
 80060d6:	4c0d      	ldr	r4, [pc, #52]	; (800610c <__libc_init_array+0x3c>)
 80060d8:	1b64      	subs	r4, r4, r5
 80060da:	10a4      	asrs	r4, r4, #2
 80060dc:	42a6      	cmp	r6, r4
 80060de:	d109      	bne.n	80060f4 <__libc_init_array+0x24>
 80060e0:	f002 fefc 	bl	8008edc <_init>
 80060e4:	2600      	movs	r6, #0
 80060e6:	4d0a      	ldr	r5, [pc, #40]	; (8006110 <__libc_init_array+0x40>)
 80060e8:	4c0a      	ldr	r4, [pc, #40]	; (8006114 <__libc_init_array+0x44>)
 80060ea:	1b64      	subs	r4, r4, r5
 80060ec:	10a4      	asrs	r4, r4, #2
 80060ee:	42a6      	cmp	r6, r4
 80060f0:	d105      	bne.n	80060fe <__libc_init_array+0x2e>
 80060f2:	bd70      	pop	{r4, r5, r6, pc}
 80060f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80060f8:	4798      	blx	r3
 80060fa:	3601      	adds	r6, #1
 80060fc:	e7ee      	b.n	80060dc <__libc_init_array+0xc>
 80060fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8006102:	4798      	blx	r3
 8006104:	3601      	adds	r6, #1
 8006106:	e7f2      	b.n	80060ee <__libc_init_array+0x1e>
 8006108:	0800984c 	.word	0x0800984c
 800610c:	0800984c 	.word	0x0800984c
 8006110:	0800984c 	.word	0x0800984c
 8006114:	08009850 	.word	0x08009850

08006118 <memcpy>:
 8006118:	440a      	add	r2, r1
 800611a:	4291      	cmp	r1, r2
 800611c:	f100 33ff 	add.w	r3, r0, #4294967295
 8006120:	d100      	bne.n	8006124 <memcpy+0xc>
 8006122:	4770      	bx	lr
 8006124:	b510      	push	{r4, lr}
 8006126:	f811 4b01 	ldrb.w	r4, [r1], #1
 800612a:	4291      	cmp	r1, r2
 800612c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006130:	d1f9      	bne.n	8006126 <memcpy+0xe>
 8006132:	bd10      	pop	{r4, pc}

08006134 <memset>:
 8006134:	4603      	mov	r3, r0
 8006136:	4402      	add	r2, r0
 8006138:	4293      	cmp	r3, r2
 800613a:	d100      	bne.n	800613e <memset+0xa>
 800613c:	4770      	bx	lr
 800613e:	f803 1b01 	strb.w	r1, [r3], #1
 8006142:	e7f9      	b.n	8006138 <memset+0x4>

08006144 <__cvt>:
 8006144:	2b00      	cmp	r3, #0
 8006146:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800614a:	461f      	mov	r7, r3
 800614c:	bfbb      	ittet	lt
 800614e:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8006152:	461f      	movlt	r7, r3
 8006154:	2300      	movge	r3, #0
 8006156:	232d      	movlt	r3, #45	; 0x2d
 8006158:	b088      	sub	sp, #32
 800615a:	4614      	mov	r4, r2
 800615c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800615e:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8006160:	7013      	strb	r3, [r2, #0]
 8006162:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006164:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8006168:	f023 0820 	bic.w	r8, r3, #32
 800616c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006170:	d005      	beq.n	800617e <__cvt+0x3a>
 8006172:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006176:	d100      	bne.n	800617a <__cvt+0x36>
 8006178:	3501      	adds	r5, #1
 800617a:	2302      	movs	r3, #2
 800617c:	e000      	b.n	8006180 <__cvt+0x3c>
 800617e:	2303      	movs	r3, #3
 8006180:	aa07      	add	r2, sp, #28
 8006182:	9204      	str	r2, [sp, #16]
 8006184:	aa06      	add	r2, sp, #24
 8006186:	e9cd a202 	strd	sl, r2, [sp, #8]
 800618a:	e9cd 3500 	strd	r3, r5, [sp]
 800618e:	4622      	mov	r2, r4
 8006190:	463b      	mov	r3, r7
 8006192:	f000 fce5 	bl	8006b60 <_dtoa_r>
 8006196:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800619a:	4606      	mov	r6, r0
 800619c:	d102      	bne.n	80061a4 <__cvt+0x60>
 800619e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80061a0:	07db      	lsls	r3, r3, #31
 80061a2:	d522      	bpl.n	80061ea <__cvt+0xa6>
 80061a4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80061a8:	eb06 0905 	add.w	r9, r6, r5
 80061ac:	d110      	bne.n	80061d0 <__cvt+0x8c>
 80061ae:	7833      	ldrb	r3, [r6, #0]
 80061b0:	2b30      	cmp	r3, #48	; 0x30
 80061b2:	d10a      	bne.n	80061ca <__cvt+0x86>
 80061b4:	2200      	movs	r2, #0
 80061b6:	2300      	movs	r3, #0
 80061b8:	4620      	mov	r0, r4
 80061ba:	4639      	mov	r1, r7
 80061bc:	f7fa fbf4 	bl	80009a8 <__aeabi_dcmpeq>
 80061c0:	b918      	cbnz	r0, 80061ca <__cvt+0x86>
 80061c2:	f1c5 0501 	rsb	r5, r5, #1
 80061c6:	f8ca 5000 	str.w	r5, [sl]
 80061ca:	f8da 3000 	ldr.w	r3, [sl]
 80061ce:	4499      	add	r9, r3
 80061d0:	2200      	movs	r2, #0
 80061d2:	2300      	movs	r3, #0
 80061d4:	4620      	mov	r0, r4
 80061d6:	4639      	mov	r1, r7
 80061d8:	f7fa fbe6 	bl	80009a8 <__aeabi_dcmpeq>
 80061dc:	b108      	cbz	r0, 80061e2 <__cvt+0x9e>
 80061de:	f8cd 901c 	str.w	r9, [sp, #28]
 80061e2:	2230      	movs	r2, #48	; 0x30
 80061e4:	9b07      	ldr	r3, [sp, #28]
 80061e6:	454b      	cmp	r3, r9
 80061e8:	d307      	bcc.n	80061fa <__cvt+0xb6>
 80061ea:	4630      	mov	r0, r6
 80061ec:	9b07      	ldr	r3, [sp, #28]
 80061ee:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80061f0:	1b9b      	subs	r3, r3, r6
 80061f2:	6013      	str	r3, [r2, #0]
 80061f4:	b008      	add	sp, #32
 80061f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80061fa:	1c59      	adds	r1, r3, #1
 80061fc:	9107      	str	r1, [sp, #28]
 80061fe:	701a      	strb	r2, [r3, #0]
 8006200:	e7f0      	b.n	80061e4 <__cvt+0xa0>

08006202 <__exponent>:
 8006202:	4603      	mov	r3, r0
 8006204:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006206:	2900      	cmp	r1, #0
 8006208:	f803 2b02 	strb.w	r2, [r3], #2
 800620c:	bfb6      	itet	lt
 800620e:	222d      	movlt	r2, #45	; 0x2d
 8006210:	222b      	movge	r2, #43	; 0x2b
 8006212:	4249      	neglt	r1, r1
 8006214:	2909      	cmp	r1, #9
 8006216:	7042      	strb	r2, [r0, #1]
 8006218:	dd2b      	ble.n	8006272 <__exponent+0x70>
 800621a:	f10d 0407 	add.w	r4, sp, #7
 800621e:	46a4      	mov	ip, r4
 8006220:	270a      	movs	r7, #10
 8006222:	fb91 f6f7 	sdiv	r6, r1, r7
 8006226:	460a      	mov	r2, r1
 8006228:	46a6      	mov	lr, r4
 800622a:	fb07 1516 	mls	r5, r7, r6, r1
 800622e:	2a63      	cmp	r2, #99	; 0x63
 8006230:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8006234:	4631      	mov	r1, r6
 8006236:	f104 34ff 	add.w	r4, r4, #4294967295
 800623a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800623e:	dcf0      	bgt.n	8006222 <__exponent+0x20>
 8006240:	3130      	adds	r1, #48	; 0x30
 8006242:	f1ae 0502 	sub.w	r5, lr, #2
 8006246:	f804 1c01 	strb.w	r1, [r4, #-1]
 800624a:	4629      	mov	r1, r5
 800624c:	1c44      	adds	r4, r0, #1
 800624e:	4561      	cmp	r1, ip
 8006250:	d30a      	bcc.n	8006268 <__exponent+0x66>
 8006252:	f10d 0209 	add.w	r2, sp, #9
 8006256:	eba2 020e 	sub.w	r2, r2, lr
 800625a:	4565      	cmp	r5, ip
 800625c:	bf88      	it	hi
 800625e:	2200      	movhi	r2, #0
 8006260:	4413      	add	r3, r2
 8006262:	1a18      	subs	r0, r3, r0
 8006264:	b003      	add	sp, #12
 8006266:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006268:	f811 2b01 	ldrb.w	r2, [r1], #1
 800626c:	f804 2f01 	strb.w	r2, [r4, #1]!
 8006270:	e7ed      	b.n	800624e <__exponent+0x4c>
 8006272:	2330      	movs	r3, #48	; 0x30
 8006274:	3130      	adds	r1, #48	; 0x30
 8006276:	7083      	strb	r3, [r0, #2]
 8006278:	70c1      	strb	r1, [r0, #3]
 800627a:	1d03      	adds	r3, r0, #4
 800627c:	e7f1      	b.n	8006262 <__exponent+0x60>
	...

08006280 <_printf_float>:
 8006280:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006284:	b091      	sub	sp, #68	; 0x44
 8006286:	460c      	mov	r4, r1
 8006288:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 800628c:	4616      	mov	r6, r2
 800628e:	461f      	mov	r7, r3
 8006290:	4605      	mov	r5, r0
 8006292:	f001 fa53 	bl	800773c <_localeconv_r>
 8006296:	6803      	ldr	r3, [r0, #0]
 8006298:	4618      	mov	r0, r3
 800629a:	9309      	str	r3, [sp, #36]	; 0x24
 800629c:	f7f9 ff58 	bl	8000150 <strlen>
 80062a0:	2300      	movs	r3, #0
 80062a2:	930e      	str	r3, [sp, #56]	; 0x38
 80062a4:	f8d8 3000 	ldr.w	r3, [r8]
 80062a8:	900a      	str	r0, [sp, #40]	; 0x28
 80062aa:	3307      	adds	r3, #7
 80062ac:	f023 0307 	bic.w	r3, r3, #7
 80062b0:	f103 0208 	add.w	r2, r3, #8
 80062b4:	f894 9018 	ldrb.w	r9, [r4, #24]
 80062b8:	f8d4 b000 	ldr.w	fp, [r4]
 80062bc:	f8c8 2000 	str.w	r2, [r8]
 80062c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062c4:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80062c8:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 80062cc:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 80062d0:	930b      	str	r3, [sp, #44]	; 0x2c
 80062d2:	f04f 32ff 	mov.w	r2, #4294967295
 80062d6:	4640      	mov	r0, r8
 80062d8:	4b9c      	ldr	r3, [pc, #624]	; (800654c <_printf_float+0x2cc>)
 80062da:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80062dc:	f7fa fb96 	bl	8000a0c <__aeabi_dcmpun>
 80062e0:	bb70      	cbnz	r0, 8006340 <_printf_float+0xc0>
 80062e2:	f04f 32ff 	mov.w	r2, #4294967295
 80062e6:	4640      	mov	r0, r8
 80062e8:	4b98      	ldr	r3, [pc, #608]	; (800654c <_printf_float+0x2cc>)
 80062ea:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80062ec:	f7fa fb70 	bl	80009d0 <__aeabi_dcmple>
 80062f0:	bb30      	cbnz	r0, 8006340 <_printf_float+0xc0>
 80062f2:	2200      	movs	r2, #0
 80062f4:	2300      	movs	r3, #0
 80062f6:	4640      	mov	r0, r8
 80062f8:	4651      	mov	r1, sl
 80062fa:	f7fa fb5f 	bl	80009bc <__aeabi_dcmplt>
 80062fe:	b110      	cbz	r0, 8006306 <_printf_float+0x86>
 8006300:	232d      	movs	r3, #45	; 0x2d
 8006302:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006306:	4b92      	ldr	r3, [pc, #584]	; (8006550 <_printf_float+0x2d0>)
 8006308:	4892      	ldr	r0, [pc, #584]	; (8006554 <_printf_float+0x2d4>)
 800630a:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800630e:	bf94      	ite	ls
 8006310:	4698      	movls	r8, r3
 8006312:	4680      	movhi	r8, r0
 8006314:	2303      	movs	r3, #3
 8006316:	f04f 0a00 	mov.w	sl, #0
 800631a:	6123      	str	r3, [r4, #16]
 800631c:	f02b 0304 	bic.w	r3, fp, #4
 8006320:	6023      	str	r3, [r4, #0]
 8006322:	4633      	mov	r3, r6
 8006324:	4621      	mov	r1, r4
 8006326:	4628      	mov	r0, r5
 8006328:	9700      	str	r7, [sp, #0]
 800632a:	aa0f      	add	r2, sp, #60	; 0x3c
 800632c:	f000 f9d4 	bl	80066d8 <_printf_common>
 8006330:	3001      	adds	r0, #1
 8006332:	f040 8090 	bne.w	8006456 <_printf_float+0x1d6>
 8006336:	f04f 30ff 	mov.w	r0, #4294967295
 800633a:	b011      	add	sp, #68	; 0x44
 800633c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006340:	4642      	mov	r2, r8
 8006342:	4653      	mov	r3, sl
 8006344:	4640      	mov	r0, r8
 8006346:	4651      	mov	r1, sl
 8006348:	f7fa fb60 	bl	8000a0c <__aeabi_dcmpun>
 800634c:	b148      	cbz	r0, 8006362 <_printf_float+0xe2>
 800634e:	f1ba 0f00 	cmp.w	sl, #0
 8006352:	bfb8      	it	lt
 8006354:	232d      	movlt	r3, #45	; 0x2d
 8006356:	4880      	ldr	r0, [pc, #512]	; (8006558 <_printf_float+0x2d8>)
 8006358:	bfb8      	it	lt
 800635a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800635e:	4b7f      	ldr	r3, [pc, #508]	; (800655c <_printf_float+0x2dc>)
 8006360:	e7d3      	b.n	800630a <_printf_float+0x8a>
 8006362:	6863      	ldr	r3, [r4, #4]
 8006364:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8006368:	1c5a      	adds	r2, r3, #1
 800636a:	d142      	bne.n	80063f2 <_printf_float+0x172>
 800636c:	2306      	movs	r3, #6
 800636e:	6063      	str	r3, [r4, #4]
 8006370:	2200      	movs	r2, #0
 8006372:	9206      	str	r2, [sp, #24]
 8006374:	aa0e      	add	r2, sp, #56	; 0x38
 8006376:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800637a:	aa0d      	add	r2, sp, #52	; 0x34
 800637c:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8006380:	9203      	str	r2, [sp, #12]
 8006382:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8006386:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800638a:	6023      	str	r3, [r4, #0]
 800638c:	6863      	ldr	r3, [r4, #4]
 800638e:	4642      	mov	r2, r8
 8006390:	9300      	str	r3, [sp, #0]
 8006392:	4628      	mov	r0, r5
 8006394:	4653      	mov	r3, sl
 8006396:	910b      	str	r1, [sp, #44]	; 0x2c
 8006398:	f7ff fed4 	bl	8006144 <__cvt>
 800639c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800639e:	4680      	mov	r8, r0
 80063a0:	2947      	cmp	r1, #71	; 0x47
 80063a2:	990d      	ldr	r1, [sp, #52]	; 0x34
 80063a4:	d108      	bne.n	80063b8 <_printf_float+0x138>
 80063a6:	1cc8      	adds	r0, r1, #3
 80063a8:	db02      	blt.n	80063b0 <_printf_float+0x130>
 80063aa:	6863      	ldr	r3, [r4, #4]
 80063ac:	4299      	cmp	r1, r3
 80063ae:	dd40      	ble.n	8006432 <_printf_float+0x1b2>
 80063b0:	f1a9 0902 	sub.w	r9, r9, #2
 80063b4:	fa5f f989 	uxtb.w	r9, r9
 80063b8:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80063bc:	d81f      	bhi.n	80063fe <_printf_float+0x17e>
 80063be:	464a      	mov	r2, r9
 80063c0:	3901      	subs	r1, #1
 80063c2:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80063c6:	910d      	str	r1, [sp, #52]	; 0x34
 80063c8:	f7ff ff1b 	bl	8006202 <__exponent>
 80063cc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80063ce:	4682      	mov	sl, r0
 80063d0:	1813      	adds	r3, r2, r0
 80063d2:	2a01      	cmp	r2, #1
 80063d4:	6123      	str	r3, [r4, #16]
 80063d6:	dc02      	bgt.n	80063de <_printf_float+0x15e>
 80063d8:	6822      	ldr	r2, [r4, #0]
 80063da:	07d2      	lsls	r2, r2, #31
 80063dc:	d501      	bpl.n	80063e2 <_printf_float+0x162>
 80063de:	3301      	adds	r3, #1
 80063e0:	6123      	str	r3, [r4, #16]
 80063e2:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d09b      	beq.n	8006322 <_printf_float+0xa2>
 80063ea:	232d      	movs	r3, #45	; 0x2d
 80063ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80063f0:	e797      	b.n	8006322 <_printf_float+0xa2>
 80063f2:	2947      	cmp	r1, #71	; 0x47
 80063f4:	d1bc      	bne.n	8006370 <_printf_float+0xf0>
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d1ba      	bne.n	8006370 <_printf_float+0xf0>
 80063fa:	2301      	movs	r3, #1
 80063fc:	e7b7      	b.n	800636e <_printf_float+0xee>
 80063fe:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8006402:	d118      	bne.n	8006436 <_printf_float+0x1b6>
 8006404:	2900      	cmp	r1, #0
 8006406:	6863      	ldr	r3, [r4, #4]
 8006408:	dd0b      	ble.n	8006422 <_printf_float+0x1a2>
 800640a:	6121      	str	r1, [r4, #16]
 800640c:	b913      	cbnz	r3, 8006414 <_printf_float+0x194>
 800640e:	6822      	ldr	r2, [r4, #0]
 8006410:	07d0      	lsls	r0, r2, #31
 8006412:	d502      	bpl.n	800641a <_printf_float+0x19a>
 8006414:	3301      	adds	r3, #1
 8006416:	440b      	add	r3, r1
 8006418:	6123      	str	r3, [r4, #16]
 800641a:	f04f 0a00 	mov.w	sl, #0
 800641e:	65a1      	str	r1, [r4, #88]	; 0x58
 8006420:	e7df      	b.n	80063e2 <_printf_float+0x162>
 8006422:	b913      	cbnz	r3, 800642a <_printf_float+0x1aa>
 8006424:	6822      	ldr	r2, [r4, #0]
 8006426:	07d2      	lsls	r2, r2, #31
 8006428:	d501      	bpl.n	800642e <_printf_float+0x1ae>
 800642a:	3302      	adds	r3, #2
 800642c:	e7f4      	b.n	8006418 <_printf_float+0x198>
 800642e:	2301      	movs	r3, #1
 8006430:	e7f2      	b.n	8006418 <_printf_float+0x198>
 8006432:	f04f 0967 	mov.w	r9, #103	; 0x67
 8006436:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006438:	4299      	cmp	r1, r3
 800643a:	db05      	blt.n	8006448 <_printf_float+0x1c8>
 800643c:	6823      	ldr	r3, [r4, #0]
 800643e:	6121      	str	r1, [r4, #16]
 8006440:	07d8      	lsls	r0, r3, #31
 8006442:	d5ea      	bpl.n	800641a <_printf_float+0x19a>
 8006444:	1c4b      	adds	r3, r1, #1
 8006446:	e7e7      	b.n	8006418 <_printf_float+0x198>
 8006448:	2900      	cmp	r1, #0
 800644a:	bfcc      	ite	gt
 800644c:	2201      	movgt	r2, #1
 800644e:	f1c1 0202 	rsble	r2, r1, #2
 8006452:	4413      	add	r3, r2
 8006454:	e7e0      	b.n	8006418 <_printf_float+0x198>
 8006456:	6823      	ldr	r3, [r4, #0]
 8006458:	055a      	lsls	r2, r3, #21
 800645a:	d407      	bmi.n	800646c <_printf_float+0x1ec>
 800645c:	6923      	ldr	r3, [r4, #16]
 800645e:	4642      	mov	r2, r8
 8006460:	4631      	mov	r1, r6
 8006462:	4628      	mov	r0, r5
 8006464:	47b8      	blx	r7
 8006466:	3001      	adds	r0, #1
 8006468:	d12b      	bne.n	80064c2 <_printf_float+0x242>
 800646a:	e764      	b.n	8006336 <_printf_float+0xb6>
 800646c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8006470:	f240 80dd 	bls.w	800662e <_printf_float+0x3ae>
 8006474:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006478:	2200      	movs	r2, #0
 800647a:	2300      	movs	r3, #0
 800647c:	f7fa fa94 	bl	80009a8 <__aeabi_dcmpeq>
 8006480:	2800      	cmp	r0, #0
 8006482:	d033      	beq.n	80064ec <_printf_float+0x26c>
 8006484:	2301      	movs	r3, #1
 8006486:	4631      	mov	r1, r6
 8006488:	4628      	mov	r0, r5
 800648a:	4a35      	ldr	r2, [pc, #212]	; (8006560 <_printf_float+0x2e0>)
 800648c:	47b8      	blx	r7
 800648e:	3001      	adds	r0, #1
 8006490:	f43f af51 	beq.w	8006336 <_printf_float+0xb6>
 8006494:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006498:	429a      	cmp	r2, r3
 800649a:	db02      	blt.n	80064a2 <_printf_float+0x222>
 800649c:	6823      	ldr	r3, [r4, #0]
 800649e:	07d8      	lsls	r0, r3, #31
 80064a0:	d50f      	bpl.n	80064c2 <_printf_float+0x242>
 80064a2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80064a6:	4631      	mov	r1, r6
 80064a8:	4628      	mov	r0, r5
 80064aa:	47b8      	blx	r7
 80064ac:	3001      	adds	r0, #1
 80064ae:	f43f af42 	beq.w	8006336 <_printf_float+0xb6>
 80064b2:	f04f 0800 	mov.w	r8, #0
 80064b6:	f104 091a 	add.w	r9, r4, #26
 80064ba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80064bc:	3b01      	subs	r3, #1
 80064be:	4543      	cmp	r3, r8
 80064c0:	dc09      	bgt.n	80064d6 <_printf_float+0x256>
 80064c2:	6823      	ldr	r3, [r4, #0]
 80064c4:	079b      	lsls	r3, r3, #30
 80064c6:	f100 8102 	bmi.w	80066ce <_printf_float+0x44e>
 80064ca:	68e0      	ldr	r0, [r4, #12]
 80064cc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80064ce:	4298      	cmp	r0, r3
 80064d0:	bfb8      	it	lt
 80064d2:	4618      	movlt	r0, r3
 80064d4:	e731      	b.n	800633a <_printf_float+0xba>
 80064d6:	2301      	movs	r3, #1
 80064d8:	464a      	mov	r2, r9
 80064da:	4631      	mov	r1, r6
 80064dc:	4628      	mov	r0, r5
 80064de:	47b8      	blx	r7
 80064e0:	3001      	adds	r0, #1
 80064e2:	f43f af28 	beq.w	8006336 <_printf_float+0xb6>
 80064e6:	f108 0801 	add.w	r8, r8, #1
 80064ea:	e7e6      	b.n	80064ba <_printf_float+0x23a>
 80064ec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	dc38      	bgt.n	8006564 <_printf_float+0x2e4>
 80064f2:	2301      	movs	r3, #1
 80064f4:	4631      	mov	r1, r6
 80064f6:	4628      	mov	r0, r5
 80064f8:	4a19      	ldr	r2, [pc, #100]	; (8006560 <_printf_float+0x2e0>)
 80064fa:	47b8      	blx	r7
 80064fc:	3001      	adds	r0, #1
 80064fe:	f43f af1a 	beq.w	8006336 <_printf_float+0xb6>
 8006502:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006506:	4313      	orrs	r3, r2
 8006508:	d102      	bne.n	8006510 <_printf_float+0x290>
 800650a:	6823      	ldr	r3, [r4, #0]
 800650c:	07d9      	lsls	r1, r3, #31
 800650e:	d5d8      	bpl.n	80064c2 <_printf_float+0x242>
 8006510:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006514:	4631      	mov	r1, r6
 8006516:	4628      	mov	r0, r5
 8006518:	47b8      	blx	r7
 800651a:	3001      	adds	r0, #1
 800651c:	f43f af0b 	beq.w	8006336 <_printf_float+0xb6>
 8006520:	f04f 0900 	mov.w	r9, #0
 8006524:	f104 0a1a 	add.w	sl, r4, #26
 8006528:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800652a:	425b      	negs	r3, r3
 800652c:	454b      	cmp	r3, r9
 800652e:	dc01      	bgt.n	8006534 <_printf_float+0x2b4>
 8006530:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006532:	e794      	b.n	800645e <_printf_float+0x1de>
 8006534:	2301      	movs	r3, #1
 8006536:	4652      	mov	r2, sl
 8006538:	4631      	mov	r1, r6
 800653a:	4628      	mov	r0, r5
 800653c:	47b8      	blx	r7
 800653e:	3001      	adds	r0, #1
 8006540:	f43f aef9 	beq.w	8006336 <_printf_float+0xb6>
 8006544:	f109 0901 	add.w	r9, r9, #1
 8006548:	e7ee      	b.n	8006528 <_printf_float+0x2a8>
 800654a:	bf00      	nop
 800654c:	7fefffff 	.word	0x7fefffff
 8006550:	08009478 	.word	0x08009478
 8006554:	0800947c 	.word	0x0800947c
 8006558:	08009484 	.word	0x08009484
 800655c:	08009480 	.word	0x08009480
 8006560:	08009488 	.word	0x08009488
 8006564:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006566:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006568:	429a      	cmp	r2, r3
 800656a:	bfa8      	it	ge
 800656c:	461a      	movge	r2, r3
 800656e:	2a00      	cmp	r2, #0
 8006570:	4691      	mov	r9, r2
 8006572:	dc37      	bgt.n	80065e4 <_printf_float+0x364>
 8006574:	f04f 0b00 	mov.w	fp, #0
 8006578:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800657c:	f104 021a 	add.w	r2, r4, #26
 8006580:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8006584:	ebaa 0309 	sub.w	r3, sl, r9
 8006588:	455b      	cmp	r3, fp
 800658a:	dc33      	bgt.n	80065f4 <_printf_float+0x374>
 800658c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006590:	429a      	cmp	r2, r3
 8006592:	db3b      	blt.n	800660c <_printf_float+0x38c>
 8006594:	6823      	ldr	r3, [r4, #0]
 8006596:	07da      	lsls	r2, r3, #31
 8006598:	d438      	bmi.n	800660c <_printf_float+0x38c>
 800659a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800659c:	990d      	ldr	r1, [sp, #52]	; 0x34
 800659e:	eba3 020a 	sub.w	r2, r3, sl
 80065a2:	eba3 0901 	sub.w	r9, r3, r1
 80065a6:	4591      	cmp	r9, r2
 80065a8:	bfa8      	it	ge
 80065aa:	4691      	movge	r9, r2
 80065ac:	f1b9 0f00 	cmp.w	r9, #0
 80065b0:	dc34      	bgt.n	800661c <_printf_float+0x39c>
 80065b2:	f04f 0800 	mov.w	r8, #0
 80065b6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80065ba:	f104 0a1a 	add.w	sl, r4, #26
 80065be:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80065c2:	1a9b      	subs	r3, r3, r2
 80065c4:	eba3 0309 	sub.w	r3, r3, r9
 80065c8:	4543      	cmp	r3, r8
 80065ca:	f77f af7a 	ble.w	80064c2 <_printf_float+0x242>
 80065ce:	2301      	movs	r3, #1
 80065d0:	4652      	mov	r2, sl
 80065d2:	4631      	mov	r1, r6
 80065d4:	4628      	mov	r0, r5
 80065d6:	47b8      	blx	r7
 80065d8:	3001      	adds	r0, #1
 80065da:	f43f aeac 	beq.w	8006336 <_printf_float+0xb6>
 80065de:	f108 0801 	add.w	r8, r8, #1
 80065e2:	e7ec      	b.n	80065be <_printf_float+0x33e>
 80065e4:	4613      	mov	r3, r2
 80065e6:	4631      	mov	r1, r6
 80065e8:	4642      	mov	r2, r8
 80065ea:	4628      	mov	r0, r5
 80065ec:	47b8      	blx	r7
 80065ee:	3001      	adds	r0, #1
 80065f0:	d1c0      	bne.n	8006574 <_printf_float+0x2f4>
 80065f2:	e6a0      	b.n	8006336 <_printf_float+0xb6>
 80065f4:	2301      	movs	r3, #1
 80065f6:	4631      	mov	r1, r6
 80065f8:	4628      	mov	r0, r5
 80065fa:	920b      	str	r2, [sp, #44]	; 0x2c
 80065fc:	47b8      	blx	r7
 80065fe:	3001      	adds	r0, #1
 8006600:	f43f ae99 	beq.w	8006336 <_printf_float+0xb6>
 8006604:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006606:	f10b 0b01 	add.w	fp, fp, #1
 800660a:	e7b9      	b.n	8006580 <_printf_float+0x300>
 800660c:	4631      	mov	r1, r6
 800660e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006612:	4628      	mov	r0, r5
 8006614:	47b8      	blx	r7
 8006616:	3001      	adds	r0, #1
 8006618:	d1bf      	bne.n	800659a <_printf_float+0x31a>
 800661a:	e68c      	b.n	8006336 <_printf_float+0xb6>
 800661c:	464b      	mov	r3, r9
 800661e:	4631      	mov	r1, r6
 8006620:	4628      	mov	r0, r5
 8006622:	eb08 020a 	add.w	r2, r8, sl
 8006626:	47b8      	blx	r7
 8006628:	3001      	adds	r0, #1
 800662a:	d1c2      	bne.n	80065b2 <_printf_float+0x332>
 800662c:	e683      	b.n	8006336 <_printf_float+0xb6>
 800662e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006630:	2a01      	cmp	r2, #1
 8006632:	dc01      	bgt.n	8006638 <_printf_float+0x3b8>
 8006634:	07db      	lsls	r3, r3, #31
 8006636:	d537      	bpl.n	80066a8 <_printf_float+0x428>
 8006638:	2301      	movs	r3, #1
 800663a:	4642      	mov	r2, r8
 800663c:	4631      	mov	r1, r6
 800663e:	4628      	mov	r0, r5
 8006640:	47b8      	blx	r7
 8006642:	3001      	adds	r0, #1
 8006644:	f43f ae77 	beq.w	8006336 <_printf_float+0xb6>
 8006648:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800664c:	4631      	mov	r1, r6
 800664e:	4628      	mov	r0, r5
 8006650:	47b8      	blx	r7
 8006652:	3001      	adds	r0, #1
 8006654:	f43f ae6f 	beq.w	8006336 <_printf_float+0xb6>
 8006658:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800665c:	2200      	movs	r2, #0
 800665e:	2300      	movs	r3, #0
 8006660:	f7fa f9a2 	bl	80009a8 <__aeabi_dcmpeq>
 8006664:	b9d8      	cbnz	r0, 800669e <_printf_float+0x41e>
 8006666:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006668:	f108 0201 	add.w	r2, r8, #1
 800666c:	3b01      	subs	r3, #1
 800666e:	4631      	mov	r1, r6
 8006670:	4628      	mov	r0, r5
 8006672:	47b8      	blx	r7
 8006674:	3001      	adds	r0, #1
 8006676:	d10e      	bne.n	8006696 <_printf_float+0x416>
 8006678:	e65d      	b.n	8006336 <_printf_float+0xb6>
 800667a:	2301      	movs	r3, #1
 800667c:	464a      	mov	r2, r9
 800667e:	4631      	mov	r1, r6
 8006680:	4628      	mov	r0, r5
 8006682:	47b8      	blx	r7
 8006684:	3001      	adds	r0, #1
 8006686:	f43f ae56 	beq.w	8006336 <_printf_float+0xb6>
 800668a:	f108 0801 	add.w	r8, r8, #1
 800668e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006690:	3b01      	subs	r3, #1
 8006692:	4543      	cmp	r3, r8
 8006694:	dcf1      	bgt.n	800667a <_printf_float+0x3fa>
 8006696:	4653      	mov	r3, sl
 8006698:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800669c:	e6e0      	b.n	8006460 <_printf_float+0x1e0>
 800669e:	f04f 0800 	mov.w	r8, #0
 80066a2:	f104 091a 	add.w	r9, r4, #26
 80066a6:	e7f2      	b.n	800668e <_printf_float+0x40e>
 80066a8:	2301      	movs	r3, #1
 80066aa:	4642      	mov	r2, r8
 80066ac:	e7df      	b.n	800666e <_printf_float+0x3ee>
 80066ae:	2301      	movs	r3, #1
 80066b0:	464a      	mov	r2, r9
 80066b2:	4631      	mov	r1, r6
 80066b4:	4628      	mov	r0, r5
 80066b6:	47b8      	blx	r7
 80066b8:	3001      	adds	r0, #1
 80066ba:	f43f ae3c 	beq.w	8006336 <_printf_float+0xb6>
 80066be:	f108 0801 	add.w	r8, r8, #1
 80066c2:	68e3      	ldr	r3, [r4, #12]
 80066c4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80066c6:	1a5b      	subs	r3, r3, r1
 80066c8:	4543      	cmp	r3, r8
 80066ca:	dcf0      	bgt.n	80066ae <_printf_float+0x42e>
 80066cc:	e6fd      	b.n	80064ca <_printf_float+0x24a>
 80066ce:	f04f 0800 	mov.w	r8, #0
 80066d2:	f104 0919 	add.w	r9, r4, #25
 80066d6:	e7f4      	b.n	80066c2 <_printf_float+0x442>

080066d8 <_printf_common>:
 80066d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80066dc:	4616      	mov	r6, r2
 80066de:	4699      	mov	r9, r3
 80066e0:	688a      	ldr	r2, [r1, #8]
 80066e2:	690b      	ldr	r3, [r1, #16]
 80066e4:	4607      	mov	r7, r0
 80066e6:	4293      	cmp	r3, r2
 80066e8:	bfb8      	it	lt
 80066ea:	4613      	movlt	r3, r2
 80066ec:	6033      	str	r3, [r6, #0]
 80066ee:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80066f2:	460c      	mov	r4, r1
 80066f4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80066f8:	b10a      	cbz	r2, 80066fe <_printf_common+0x26>
 80066fa:	3301      	adds	r3, #1
 80066fc:	6033      	str	r3, [r6, #0]
 80066fe:	6823      	ldr	r3, [r4, #0]
 8006700:	0699      	lsls	r1, r3, #26
 8006702:	bf42      	ittt	mi
 8006704:	6833      	ldrmi	r3, [r6, #0]
 8006706:	3302      	addmi	r3, #2
 8006708:	6033      	strmi	r3, [r6, #0]
 800670a:	6825      	ldr	r5, [r4, #0]
 800670c:	f015 0506 	ands.w	r5, r5, #6
 8006710:	d106      	bne.n	8006720 <_printf_common+0x48>
 8006712:	f104 0a19 	add.w	sl, r4, #25
 8006716:	68e3      	ldr	r3, [r4, #12]
 8006718:	6832      	ldr	r2, [r6, #0]
 800671a:	1a9b      	subs	r3, r3, r2
 800671c:	42ab      	cmp	r3, r5
 800671e:	dc28      	bgt.n	8006772 <_printf_common+0x9a>
 8006720:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006724:	1e13      	subs	r3, r2, #0
 8006726:	6822      	ldr	r2, [r4, #0]
 8006728:	bf18      	it	ne
 800672a:	2301      	movne	r3, #1
 800672c:	0692      	lsls	r2, r2, #26
 800672e:	d42d      	bmi.n	800678c <_printf_common+0xb4>
 8006730:	4649      	mov	r1, r9
 8006732:	4638      	mov	r0, r7
 8006734:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006738:	47c0      	blx	r8
 800673a:	3001      	adds	r0, #1
 800673c:	d020      	beq.n	8006780 <_printf_common+0xa8>
 800673e:	6823      	ldr	r3, [r4, #0]
 8006740:	68e5      	ldr	r5, [r4, #12]
 8006742:	f003 0306 	and.w	r3, r3, #6
 8006746:	2b04      	cmp	r3, #4
 8006748:	bf18      	it	ne
 800674a:	2500      	movne	r5, #0
 800674c:	6832      	ldr	r2, [r6, #0]
 800674e:	f04f 0600 	mov.w	r6, #0
 8006752:	68a3      	ldr	r3, [r4, #8]
 8006754:	bf08      	it	eq
 8006756:	1aad      	subeq	r5, r5, r2
 8006758:	6922      	ldr	r2, [r4, #16]
 800675a:	bf08      	it	eq
 800675c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006760:	4293      	cmp	r3, r2
 8006762:	bfc4      	itt	gt
 8006764:	1a9b      	subgt	r3, r3, r2
 8006766:	18ed      	addgt	r5, r5, r3
 8006768:	341a      	adds	r4, #26
 800676a:	42b5      	cmp	r5, r6
 800676c:	d11a      	bne.n	80067a4 <_printf_common+0xcc>
 800676e:	2000      	movs	r0, #0
 8006770:	e008      	b.n	8006784 <_printf_common+0xac>
 8006772:	2301      	movs	r3, #1
 8006774:	4652      	mov	r2, sl
 8006776:	4649      	mov	r1, r9
 8006778:	4638      	mov	r0, r7
 800677a:	47c0      	blx	r8
 800677c:	3001      	adds	r0, #1
 800677e:	d103      	bne.n	8006788 <_printf_common+0xb0>
 8006780:	f04f 30ff 	mov.w	r0, #4294967295
 8006784:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006788:	3501      	adds	r5, #1
 800678a:	e7c4      	b.n	8006716 <_printf_common+0x3e>
 800678c:	2030      	movs	r0, #48	; 0x30
 800678e:	18e1      	adds	r1, r4, r3
 8006790:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006794:	1c5a      	adds	r2, r3, #1
 8006796:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800679a:	4422      	add	r2, r4
 800679c:	3302      	adds	r3, #2
 800679e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80067a2:	e7c5      	b.n	8006730 <_printf_common+0x58>
 80067a4:	2301      	movs	r3, #1
 80067a6:	4622      	mov	r2, r4
 80067a8:	4649      	mov	r1, r9
 80067aa:	4638      	mov	r0, r7
 80067ac:	47c0      	blx	r8
 80067ae:	3001      	adds	r0, #1
 80067b0:	d0e6      	beq.n	8006780 <_printf_common+0xa8>
 80067b2:	3601      	adds	r6, #1
 80067b4:	e7d9      	b.n	800676a <_printf_common+0x92>
	...

080067b8 <_printf_i>:
 80067b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80067bc:	7e0f      	ldrb	r7, [r1, #24]
 80067be:	4691      	mov	r9, r2
 80067c0:	2f78      	cmp	r7, #120	; 0x78
 80067c2:	4680      	mov	r8, r0
 80067c4:	460c      	mov	r4, r1
 80067c6:	469a      	mov	sl, r3
 80067c8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80067ca:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80067ce:	d807      	bhi.n	80067e0 <_printf_i+0x28>
 80067d0:	2f62      	cmp	r7, #98	; 0x62
 80067d2:	d80a      	bhi.n	80067ea <_printf_i+0x32>
 80067d4:	2f00      	cmp	r7, #0
 80067d6:	f000 80d9 	beq.w	800698c <_printf_i+0x1d4>
 80067da:	2f58      	cmp	r7, #88	; 0x58
 80067dc:	f000 80a4 	beq.w	8006928 <_printf_i+0x170>
 80067e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80067e4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80067e8:	e03a      	b.n	8006860 <_printf_i+0xa8>
 80067ea:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80067ee:	2b15      	cmp	r3, #21
 80067f0:	d8f6      	bhi.n	80067e0 <_printf_i+0x28>
 80067f2:	a101      	add	r1, pc, #4	; (adr r1, 80067f8 <_printf_i+0x40>)
 80067f4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80067f8:	08006851 	.word	0x08006851
 80067fc:	08006865 	.word	0x08006865
 8006800:	080067e1 	.word	0x080067e1
 8006804:	080067e1 	.word	0x080067e1
 8006808:	080067e1 	.word	0x080067e1
 800680c:	080067e1 	.word	0x080067e1
 8006810:	08006865 	.word	0x08006865
 8006814:	080067e1 	.word	0x080067e1
 8006818:	080067e1 	.word	0x080067e1
 800681c:	080067e1 	.word	0x080067e1
 8006820:	080067e1 	.word	0x080067e1
 8006824:	08006973 	.word	0x08006973
 8006828:	08006895 	.word	0x08006895
 800682c:	08006955 	.word	0x08006955
 8006830:	080067e1 	.word	0x080067e1
 8006834:	080067e1 	.word	0x080067e1
 8006838:	08006995 	.word	0x08006995
 800683c:	080067e1 	.word	0x080067e1
 8006840:	08006895 	.word	0x08006895
 8006844:	080067e1 	.word	0x080067e1
 8006848:	080067e1 	.word	0x080067e1
 800684c:	0800695d 	.word	0x0800695d
 8006850:	682b      	ldr	r3, [r5, #0]
 8006852:	1d1a      	adds	r2, r3, #4
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	602a      	str	r2, [r5, #0]
 8006858:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800685c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006860:	2301      	movs	r3, #1
 8006862:	e0a4      	b.n	80069ae <_printf_i+0x1f6>
 8006864:	6820      	ldr	r0, [r4, #0]
 8006866:	6829      	ldr	r1, [r5, #0]
 8006868:	0606      	lsls	r6, r0, #24
 800686a:	f101 0304 	add.w	r3, r1, #4
 800686e:	d50a      	bpl.n	8006886 <_printf_i+0xce>
 8006870:	680e      	ldr	r6, [r1, #0]
 8006872:	602b      	str	r3, [r5, #0]
 8006874:	2e00      	cmp	r6, #0
 8006876:	da03      	bge.n	8006880 <_printf_i+0xc8>
 8006878:	232d      	movs	r3, #45	; 0x2d
 800687a:	4276      	negs	r6, r6
 800687c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006880:	230a      	movs	r3, #10
 8006882:	485e      	ldr	r0, [pc, #376]	; (80069fc <_printf_i+0x244>)
 8006884:	e019      	b.n	80068ba <_printf_i+0x102>
 8006886:	680e      	ldr	r6, [r1, #0]
 8006888:	f010 0f40 	tst.w	r0, #64	; 0x40
 800688c:	602b      	str	r3, [r5, #0]
 800688e:	bf18      	it	ne
 8006890:	b236      	sxthne	r6, r6
 8006892:	e7ef      	b.n	8006874 <_printf_i+0xbc>
 8006894:	682b      	ldr	r3, [r5, #0]
 8006896:	6820      	ldr	r0, [r4, #0]
 8006898:	1d19      	adds	r1, r3, #4
 800689a:	6029      	str	r1, [r5, #0]
 800689c:	0601      	lsls	r1, r0, #24
 800689e:	d501      	bpl.n	80068a4 <_printf_i+0xec>
 80068a0:	681e      	ldr	r6, [r3, #0]
 80068a2:	e002      	b.n	80068aa <_printf_i+0xf2>
 80068a4:	0646      	lsls	r6, r0, #25
 80068a6:	d5fb      	bpl.n	80068a0 <_printf_i+0xe8>
 80068a8:	881e      	ldrh	r6, [r3, #0]
 80068aa:	2f6f      	cmp	r7, #111	; 0x6f
 80068ac:	bf0c      	ite	eq
 80068ae:	2308      	moveq	r3, #8
 80068b0:	230a      	movne	r3, #10
 80068b2:	4852      	ldr	r0, [pc, #328]	; (80069fc <_printf_i+0x244>)
 80068b4:	2100      	movs	r1, #0
 80068b6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80068ba:	6865      	ldr	r5, [r4, #4]
 80068bc:	2d00      	cmp	r5, #0
 80068be:	bfa8      	it	ge
 80068c0:	6821      	ldrge	r1, [r4, #0]
 80068c2:	60a5      	str	r5, [r4, #8]
 80068c4:	bfa4      	itt	ge
 80068c6:	f021 0104 	bicge.w	r1, r1, #4
 80068ca:	6021      	strge	r1, [r4, #0]
 80068cc:	b90e      	cbnz	r6, 80068d2 <_printf_i+0x11a>
 80068ce:	2d00      	cmp	r5, #0
 80068d0:	d04d      	beq.n	800696e <_printf_i+0x1b6>
 80068d2:	4615      	mov	r5, r2
 80068d4:	fbb6 f1f3 	udiv	r1, r6, r3
 80068d8:	fb03 6711 	mls	r7, r3, r1, r6
 80068dc:	5dc7      	ldrb	r7, [r0, r7]
 80068de:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80068e2:	4637      	mov	r7, r6
 80068e4:	42bb      	cmp	r3, r7
 80068e6:	460e      	mov	r6, r1
 80068e8:	d9f4      	bls.n	80068d4 <_printf_i+0x11c>
 80068ea:	2b08      	cmp	r3, #8
 80068ec:	d10b      	bne.n	8006906 <_printf_i+0x14e>
 80068ee:	6823      	ldr	r3, [r4, #0]
 80068f0:	07de      	lsls	r6, r3, #31
 80068f2:	d508      	bpl.n	8006906 <_printf_i+0x14e>
 80068f4:	6923      	ldr	r3, [r4, #16]
 80068f6:	6861      	ldr	r1, [r4, #4]
 80068f8:	4299      	cmp	r1, r3
 80068fa:	bfde      	ittt	le
 80068fc:	2330      	movle	r3, #48	; 0x30
 80068fe:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006902:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006906:	1b52      	subs	r2, r2, r5
 8006908:	6122      	str	r2, [r4, #16]
 800690a:	464b      	mov	r3, r9
 800690c:	4621      	mov	r1, r4
 800690e:	4640      	mov	r0, r8
 8006910:	f8cd a000 	str.w	sl, [sp]
 8006914:	aa03      	add	r2, sp, #12
 8006916:	f7ff fedf 	bl	80066d8 <_printf_common>
 800691a:	3001      	adds	r0, #1
 800691c:	d14c      	bne.n	80069b8 <_printf_i+0x200>
 800691e:	f04f 30ff 	mov.w	r0, #4294967295
 8006922:	b004      	add	sp, #16
 8006924:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006928:	4834      	ldr	r0, [pc, #208]	; (80069fc <_printf_i+0x244>)
 800692a:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800692e:	6829      	ldr	r1, [r5, #0]
 8006930:	6823      	ldr	r3, [r4, #0]
 8006932:	f851 6b04 	ldr.w	r6, [r1], #4
 8006936:	6029      	str	r1, [r5, #0]
 8006938:	061d      	lsls	r5, r3, #24
 800693a:	d514      	bpl.n	8006966 <_printf_i+0x1ae>
 800693c:	07df      	lsls	r7, r3, #31
 800693e:	bf44      	itt	mi
 8006940:	f043 0320 	orrmi.w	r3, r3, #32
 8006944:	6023      	strmi	r3, [r4, #0]
 8006946:	b91e      	cbnz	r6, 8006950 <_printf_i+0x198>
 8006948:	6823      	ldr	r3, [r4, #0]
 800694a:	f023 0320 	bic.w	r3, r3, #32
 800694e:	6023      	str	r3, [r4, #0]
 8006950:	2310      	movs	r3, #16
 8006952:	e7af      	b.n	80068b4 <_printf_i+0xfc>
 8006954:	6823      	ldr	r3, [r4, #0]
 8006956:	f043 0320 	orr.w	r3, r3, #32
 800695a:	6023      	str	r3, [r4, #0]
 800695c:	2378      	movs	r3, #120	; 0x78
 800695e:	4828      	ldr	r0, [pc, #160]	; (8006a00 <_printf_i+0x248>)
 8006960:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006964:	e7e3      	b.n	800692e <_printf_i+0x176>
 8006966:	0659      	lsls	r1, r3, #25
 8006968:	bf48      	it	mi
 800696a:	b2b6      	uxthmi	r6, r6
 800696c:	e7e6      	b.n	800693c <_printf_i+0x184>
 800696e:	4615      	mov	r5, r2
 8006970:	e7bb      	b.n	80068ea <_printf_i+0x132>
 8006972:	682b      	ldr	r3, [r5, #0]
 8006974:	6826      	ldr	r6, [r4, #0]
 8006976:	1d18      	adds	r0, r3, #4
 8006978:	6961      	ldr	r1, [r4, #20]
 800697a:	6028      	str	r0, [r5, #0]
 800697c:	0635      	lsls	r5, r6, #24
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	d501      	bpl.n	8006986 <_printf_i+0x1ce>
 8006982:	6019      	str	r1, [r3, #0]
 8006984:	e002      	b.n	800698c <_printf_i+0x1d4>
 8006986:	0670      	lsls	r0, r6, #25
 8006988:	d5fb      	bpl.n	8006982 <_printf_i+0x1ca>
 800698a:	8019      	strh	r1, [r3, #0]
 800698c:	2300      	movs	r3, #0
 800698e:	4615      	mov	r5, r2
 8006990:	6123      	str	r3, [r4, #16]
 8006992:	e7ba      	b.n	800690a <_printf_i+0x152>
 8006994:	682b      	ldr	r3, [r5, #0]
 8006996:	2100      	movs	r1, #0
 8006998:	1d1a      	adds	r2, r3, #4
 800699a:	602a      	str	r2, [r5, #0]
 800699c:	681d      	ldr	r5, [r3, #0]
 800699e:	6862      	ldr	r2, [r4, #4]
 80069a0:	4628      	mov	r0, r5
 80069a2:	f000 fed7 	bl	8007754 <memchr>
 80069a6:	b108      	cbz	r0, 80069ac <_printf_i+0x1f4>
 80069a8:	1b40      	subs	r0, r0, r5
 80069aa:	6060      	str	r0, [r4, #4]
 80069ac:	6863      	ldr	r3, [r4, #4]
 80069ae:	6123      	str	r3, [r4, #16]
 80069b0:	2300      	movs	r3, #0
 80069b2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80069b6:	e7a8      	b.n	800690a <_printf_i+0x152>
 80069b8:	462a      	mov	r2, r5
 80069ba:	4649      	mov	r1, r9
 80069bc:	4640      	mov	r0, r8
 80069be:	6923      	ldr	r3, [r4, #16]
 80069c0:	47d0      	blx	sl
 80069c2:	3001      	adds	r0, #1
 80069c4:	d0ab      	beq.n	800691e <_printf_i+0x166>
 80069c6:	6823      	ldr	r3, [r4, #0]
 80069c8:	079b      	lsls	r3, r3, #30
 80069ca:	d413      	bmi.n	80069f4 <_printf_i+0x23c>
 80069cc:	68e0      	ldr	r0, [r4, #12]
 80069ce:	9b03      	ldr	r3, [sp, #12]
 80069d0:	4298      	cmp	r0, r3
 80069d2:	bfb8      	it	lt
 80069d4:	4618      	movlt	r0, r3
 80069d6:	e7a4      	b.n	8006922 <_printf_i+0x16a>
 80069d8:	2301      	movs	r3, #1
 80069da:	4632      	mov	r2, r6
 80069dc:	4649      	mov	r1, r9
 80069de:	4640      	mov	r0, r8
 80069e0:	47d0      	blx	sl
 80069e2:	3001      	adds	r0, #1
 80069e4:	d09b      	beq.n	800691e <_printf_i+0x166>
 80069e6:	3501      	adds	r5, #1
 80069e8:	68e3      	ldr	r3, [r4, #12]
 80069ea:	9903      	ldr	r1, [sp, #12]
 80069ec:	1a5b      	subs	r3, r3, r1
 80069ee:	42ab      	cmp	r3, r5
 80069f0:	dcf2      	bgt.n	80069d8 <_printf_i+0x220>
 80069f2:	e7eb      	b.n	80069cc <_printf_i+0x214>
 80069f4:	2500      	movs	r5, #0
 80069f6:	f104 0619 	add.w	r6, r4, #25
 80069fa:	e7f5      	b.n	80069e8 <_printf_i+0x230>
 80069fc:	0800948a 	.word	0x0800948a
 8006a00:	0800949b 	.word	0x0800949b

08006a04 <siprintf>:
 8006a04:	b40e      	push	{r1, r2, r3}
 8006a06:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006a0a:	b500      	push	{lr}
 8006a0c:	b09c      	sub	sp, #112	; 0x70
 8006a0e:	ab1d      	add	r3, sp, #116	; 0x74
 8006a10:	9002      	str	r0, [sp, #8]
 8006a12:	9006      	str	r0, [sp, #24]
 8006a14:	9107      	str	r1, [sp, #28]
 8006a16:	9104      	str	r1, [sp, #16]
 8006a18:	4808      	ldr	r0, [pc, #32]	; (8006a3c <siprintf+0x38>)
 8006a1a:	4909      	ldr	r1, [pc, #36]	; (8006a40 <siprintf+0x3c>)
 8006a1c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006a20:	9105      	str	r1, [sp, #20]
 8006a22:	6800      	ldr	r0, [r0, #0]
 8006a24:	a902      	add	r1, sp, #8
 8006a26:	9301      	str	r3, [sp, #4]
 8006a28:	f001 fb70 	bl	800810c <_svfiprintf_r>
 8006a2c:	2200      	movs	r2, #0
 8006a2e:	9b02      	ldr	r3, [sp, #8]
 8006a30:	701a      	strb	r2, [r3, #0]
 8006a32:	b01c      	add	sp, #112	; 0x70
 8006a34:	f85d eb04 	ldr.w	lr, [sp], #4
 8006a38:	b003      	add	sp, #12
 8006a3a:	4770      	bx	lr
 8006a3c:	20000014 	.word	0x20000014
 8006a40:	ffff0208 	.word	0xffff0208

08006a44 <quorem>:
 8006a44:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a48:	6903      	ldr	r3, [r0, #16]
 8006a4a:	690c      	ldr	r4, [r1, #16]
 8006a4c:	4607      	mov	r7, r0
 8006a4e:	42a3      	cmp	r3, r4
 8006a50:	f2c0 8082 	blt.w	8006b58 <quorem+0x114>
 8006a54:	3c01      	subs	r4, #1
 8006a56:	f100 0514 	add.w	r5, r0, #20
 8006a5a:	f101 0814 	add.w	r8, r1, #20
 8006a5e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006a62:	9301      	str	r3, [sp, #4]
 8006a64:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006a68:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006a6c:	3301      	adds	r3, #1
 8006a6e:	429a      	cmp	r2, r3
 8006a70:	fbb2 f6f3 	udiv	r6, r2, r3
 8006a74:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006a78:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006a7c:	d331      	bcc.n	8006ae2 <quorem+0x9e>
 8006a7e:	f04f 0e00 	mov.w	lr, #0
 8006a82:	4640      	mov	r0, r8
 8006a84:	46ac      	mov	ip, r5
 8006a86:	46f2      	mov	sl, lr
 8006a88:	f850 2b04 	ldr.w	r2, [r0], #4
 8006a8c:	b293      	uxth	r3, r2
 8006a8e:	fb06 e303 	mla	r3, r6, r3, lr
 8006a92:	0c12      	lsrs	r2, r2, #16
 8006a94:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8006a98:	b29b      	uxth	r3, r3
 8006a9a:	fb06 e202 	mla	r2, r6, r2, lr
 8006a9e:	ebaa 0303 	sub.w	r3, sl, r3
 8006aa2:	f8dc a000 	ldr.w	sl, [ip]
 8006aa6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006aaa:	fa1f fa8a 	uxth.w	sl, sl
 8006aae:	4453      	add	r3, sl
 8006ab0:	f8dc a000 	ldr.w	sl, [ip]
 8006ab4:	b292      	uxth	r2, r2
 8006ab6:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8006aba:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006abe:	b29b      	uxth	r3, r3
 8006ac0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006ac4:	4581      	cmp	r9, r0
 8006ac6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006aca:	f84c 3b04 	str.w	r3, [ip], #4
 8006ace:	d2db      	bcs.n	8006a88 <quorem+0x44>
 8006ad0:	f855 300b 	ldr.w	r3, [r5, fp]
 8006ad4:	b92b      	cbnz	r3, 8006ae2 <quorem+0x9e>
 8006ad6:	9b01      	ldr	r3, [sp, #4]
 8006ad8:	3b04      	subs	r3, #4
 8006ada:	429d      	cmp	r5, r3
 8006adc:	461a      	mov	r2, r3
 8006ade:	d32f      	bcc.n	8006b40 <quorem+0xfc>
 8006ae0:	613c      	str	r4, [r7, #16]
 8006ae2:	4638      	mov	r0, r7
 8006ae4:	f001 f8c2 	bl	8007c6c <__mcmp>
 8006ae8:	2800      	cmp	r0, #0
 8006aea:	db25      	blt.n	8006b38 <quorem+0xf4>
 8006aec:	4628      	mov	r0, r5
 8006aee:	f04f 0c00 	mov.w	ip, #0
 8006af2:	3601      	adds	r6, #1
 8006af4:	f858 1b04 	ldr.w	r1, [r8], #4
 8006af8:	f8d0 e000 	ldr.w	lr, [r0]
 8006afc:	b28b      	uxth	r3, r1
 8006afe:	ebac 0303 	sub.w	r3, ip, r3
 8006b02:	fa1f f28e 	uxth.w	r2, lr
 8006b06:	4413      	add	r3, r2
 8006b08:	0c0a      	lsrs	r2, r1, #16
 8006b0a:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006b0e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006b12:	b29b      	uxth	r3, r3
 8006b14:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006b18:	45c1      	cmp	r9, r8
 8006b1a:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006b1e:	f840 3b04 	str.w	r3, [r0], #4
 8006b22:	d2e7      	bcs.n	8006af4 <quorem+0xb0>
 8006b24:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006b28:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006b2c:	b922      	cbnz	r2, 8006b38 <quorem+0xf4>
 8006b2e:	3b04      	subs	r3, #4
 8006b30:	429d      	cmp	r5, r3
 8006b32:	461a      	mov	r2, r3
 8006b34:	d30a      	bcc.n	8006b4c <quorem+0x108>
 8006b36:	613c      	str	r4, [r7, #16]
 8006b38:	4630      	mov	r0, r6
 8006b3a:	b003      	add	sp, #12
 8006b3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b40:	6812      	ldr	r2, [r2, #0]
 8006b42:	3b04      	subs	r3, #4
 8006b44:	2a00      	cmp	r2, #0
 8006b46:	d1cb      	bne.n	8006ae0 <quorem+0x9c>
 8006b48:	3c01      	subs	r4, #1
 8006b4a:	e7c6      	b.n	8006ada <quorem+0x96>
 8006b4c:	6812      	ldr	r2, [r2, #0]
 8006b4e:	3b04      	subs	r3, #4
 8006b50:	2a00      	cmp	r2, #0
 8006b52:	d1f0      	bne.n	8006b36 <quorem+0xf2>
 8006b54:	3c01      	subs	r4, #1
 8006b56:	e7eb      	b.n	8006b30 <quorem+0xec>
 8006b58:	2000      	movs	r0, #0
 8006b5a:	e7ee      	b.n	8006b3a <quorem+0xf6>
 8006b5c:	0000      	movs	r0, r0
	...

08006b60 <_dtoa_r>:
 8006b60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b64:	4616      	mov	r6, r2
 8006b66:	461f      	mov	r7, r3
 8006b68:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8006b6a:	b099      	sub	sp, #100	; 0x64
 8006b6c:	4605      	mov	r5, r0
 8006b6e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8006b72:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8006b76:	b974      	cbnz	r4, 8006b96 <_dtoa_r+0x36>
 8006b78:	2010      	movs	r0, #16
 8006b7a:	f000 fde3 	bl	8007744 <malloc>
 8006b7e:	4602      	mov	r2, r0
 8006b80:	6268      	str	r0, [r5, #36]	; 0x24
 8006b82:	b920      	cbnz	r0, 8006b8e <_dtoa_r+0x2e>
 8006b84:	21ea      	movs	r1, #234	; 0xea
 8006b86:	4ba8      	ldr	r3, [pc, #672]	; (8006e28 <_dtoa_r+0x2c8>)
 8006b88:	48a8      	ldr	r0, [pc, #672]	; (8006e2c <_dtoa_r+0x2cc>)
 8006b8a:	f001 fbcf 	bl	800832c <__assert_func>
 8006b8e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006b92:	6004      	str	r4, [r0, #0]
 8006b94:	60c4      	str	r4, [r0, #12]
 8006b96:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006b98:	6819      	ldr	r1, [r3, #0]
 8006b9a:	b151      	cbz	r1, 8006bb2 <_dtoa_r+0x52>
 8006b9c:	685a      	ldr	r2, [r3, #4]
 8006b9e:	2301      	movs	r3, #1
 8006ba0:	4093      	lsls	r3, r2
 8006ba2:	604a      	str	r2, [r1, #4]
 8006ba4:	608b      	str	r3, [r1, #8]
 8006ba6:	4628      	mov	r0, r5
 8006ba8:	f000 fe22 	bl	80077f0 <_Bfree>
 8006bac:	2200      	movs	r2, #0
 8006bae:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006bb0:	601a      	str	r2, [r3, #0]
 8006bb2:	1e3b      	subs	r3, r7, #0
 8006bb4:	bfaf      	iteee	ge
 8006bb6:	2300      	movge	r3, #0
 8006bb8:	2201      	movlt	r2, #1
 8006bba:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006bbe:	9305      	strlt	r3, [sp, #20]
 8006bc0:	bfa8      	it	ge
 8006bc2:	f8c8 3000 	strge.w	r3, [r8]
 8006bc6:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8006bca:	4b99      	ldr	r3, [pc, #612]	; (8006e30 <_dtoa_r+0x2d0>)
 8006bcc:	bfb8      	it	lt
 8006bce:	f8c8 2000 	strlt.w	r2, [r8]
 8006bd2:	ea33 0309 	bics.w	r3, r3, r9
 8006bd6:	d119      	bne.n	8006c0c <_dtoa_r+0xac>
 8006bd8:	f242 730f 	movw	r3, #9999	; 0x270f
 8006bdc:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006bde:	6013      	str	r3, [r2, #0]
 8006be0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006be4:	4333      	orrs	r3, r6
 8006be6:	f000 857f 	beq.w	80076e8 <_dtoa_r+0xb88>
 8006bea:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006bec:	b953      	cbnz	r3, 8006c04 <_dtoa_r+0xa4>
 8006bee:	4b91      	ldr	r3, [pc, #580]	; (8006e34 <_dtoa_r+0x2d4>)
 8006bf0:	e022      	b.n	8006c38 <_dtoa_r+0xd8>
 8006bf2:	4b91      	ldr	r3, [pc, #580]	; (8006e38 <_dtoa_r+0x2d8>)
 8006bf4:	9303      	str	r3, [sp, #12]
 8006bf6:	3308      	adds	r3, #8
 8006bf8:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8006bfa:	6013      	str	r3, [r2, #0]
 8006bfc:	9803      	ldr	r0, [sp, #12]
 8006bfe:	b019      	add	sp, #100	; 0x64
 8006c00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c04:	4b8b      	ldr	r3, [pc, #556]	; (8006e34 <_dtoa_r+0x2d4>)
 8006c06:	9303      	str	r3, [sp, #12]
 8006c08:	3303      	adds	r3, #3
 8006c0a:	e7f5      	b.n	8006bf8 <_dtoa_r+0x98>
 8006c0c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8006c10:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8006c14:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006c18:	2200      	movs	r2, #0
 8006c1a:	2300      	movs	r3, #0
 8006c1c:	f7f9 fec4 	bl	80009a8 <__aeabi_dcmpeq>
 8006c20:	4680      	mov	r8, r0
 8006c22:	b158      	cbz	r0, 8006c3c <_dtoa_r+0xdc>
 8006c24:	2301      	movs	r3, #1
 8006c26:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006c28:	6013      	str	r3, [r2, #0]
 8006c2a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	f000 8558 	beq.w	80076e2 <_dtoa_r+0xb82>
 8006c32:	4882      	ldr	r0, [pc, #520]	; (8006e3c <_dtoa_r+0x2dc>)
 8006c34:	6018      	str	r0, [r3, #0]
 8006c36:	1e43      	subs	r3, r0, #1
 8006c38:	9303      	str	r3, [sp, #12]
 8006c3a:	e7df      	b.n	8006bfc <_dtoa_r+0x9c>
 8006c3c:	ab16      	add	r3, sp, #88	; 0x58
 8006c3e:	9301      	str	r3, [sp, #4]
 8006c40:	ab17      	add	r3, sp, #92	; 0x5c
 8006c42:	9300      	str	r3, [sp, #0]
 8006c44:	4628      	mov	r0, r5
 8006c46:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8006c4a:	f001 f8b7 	bl	8007dbc <__d2b>
 8006c4e:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8006c52:	4683      	mov	fp, r0
 8006c54:	2c00      	cmp	r4, #0
 8006c56:	d07f      	beq.n	8006d58 <_dtoa_r+0x1f8>
 8006c58:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006c5c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006c5e:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8006c62:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006c66:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8006c6a:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8006c6e:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8006c72:	2200      	movs	r2, #0
 8006c74:	4b72      	ldr	r3, [pc, #456]	; (8006e40 <_dtoa_r+0x2e0>)
 8006c76:	f7f9 fa77 	bl	8000168 <__aeabi_dsub>
 8006c7a:	a365      	add	r3, pc, #404	; (adr r3, 8006e10 <_dtoa_r+0x2b0>)
 8006c7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c80:	f7f9 fc2a 	bl	80004d8 <__aeabi_dmul>
 8006c84:	a364      	add	r3, pc, #400	; (adr r3, 8006e18 <_dtoa_r+0x2b8>)
 8006c86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c8a:	f7f9 fa6f 	bl	800016c <__adddf3>
 8006c8e:	4606      	mov	r6, r0
 8006c90:	4620      	mov	r0, r4
 8006c92:	460f      	mov	r7, r1
 8006c94:	f7f9 fbb6 	bl	8000404 <__aeabi_i2d>
 8006c98:	a361      	add	r3, pc, #388	; (adr r3, 8006e20 <_dtoa_r+0x2c0>)
 8006c9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c9e:	f7f9 fc1b 	bl	80004d8 <__aeabi_dmul>
 8006ca2:	4602      	mov	r2, r0
 8006ca4:	460b      	mov	r3, r1
 8006ca6:	4630      	mov	r0, r6
 8006ca8:	4639      	mov	r1, r7
 8006caa:	f7f9 fa5f 	bl	800016c <__adddf3>
 8006cae:	4606      	mov	r6, r0
 8006cb0:	460f      	mov	r7, r1
 8006cb2:	f7f9 fec1 	bl	8000a38 <__aeabi_d2iz>
 8006cb6:	2200      	movs	r2, #0
 8006cb8:	4682      	mov	sl, r0
 8006cba:	2300      	movs	r3, #0
 8006cbc:	4630      	mov	r0, r6
 8006cbe:	4639      	mov	r1, r7
 8006cc0:	f7f9 fe7c 	bl	80009bc <__aeabi_dcmplt>
 8006cc4:	b148      	cbz	r0, 8006cda <_dtoa_r+0x17a>
 8006cc6:	4650      	mov	r0, sl
 8006cc8:	f7f9 fb9c 	bl	8000404 <__aeabi_i2d>
 8006ccc:	4632      	mov	r2, r6
 8006cce:	463b      	mov	r3, r7
 8006cd0:	f7f9 fe6a 	bl	80009a8 <__aeabi_dcmpeq>
 8006cd4:	b908      	cbnz	r0, 8006cda <_dtoa_r+0x17a>
 8006cd6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006cda:	f1ba 0f16 	cmp.w	sl, #22
 8006cde:	d858      	bhi.n	8006d92 <_dtoa_r+0x232>
 8006ce0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006ce4:	4b57      	ldr	r3, [pc, #348]	; (8006e44 <_dtoa_r+0x2e4>)
 8006ce6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8006cea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cee:	f7f9 fe65 	bl	80009bc <__aeabi_dcmplt>
 8006cf2:	2800      	cmp	r0, #0
 8006cf4:	d04f      	beq.n	8006d96 <_dtoa_r+0x236>
 8006cf6:	2300      	movs	r3, #0
 8006cf8:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006cfc:	930f      	str	r3, [sp, #60]	; 0x3c
 8006cfe:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8006d00:	1b1c      	subs	r4, r3, r4
 8006d02:	1e63      	subs	r3, r4, #1
 8006d04:	9309      	str	r3, [sp, #36]	; 0x24
 8006d06:	bf49      	itett	mi
 8006d08:	f1c4 0301 	rsbmi	r3, r4, #1
 8006d0c:	2300      	movpl	r3, #0
 8006d0e:	9306      	strmi	r3, [sp, #24]
 8006d10:	2300      	movmi	r3, #0
 8006d12:	bf54      	ite	pl
 8006d14:	9306      	strpl	r3, [sp, #24]
 8006d16:	9309      	strmi	r3, [sp, #36]	; 0x24
 8006d18:	f1ba 0f00 	cmp.w	sl, #0
 8006d1c:	db3d      	blt.n	8006d9a <_dtoa_r+0x23a>
 8006d1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d20:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8006d24:	4453      	add	r3, sl
 8006d26:	9309      	str	r3, [sp, #36]	; 0x24
 8006d28:	2300      	movs	r3, #0
 8006d2a:	930a      	str	r3, [sp, #40]	; 0x28
 8006d2c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006d2e:	2b09      	cmp	r3, #9
 8006d30:	f200 808c 	bhi.w	8006e4c <_dtoa_r+0x2ec>
 8006d34:	2b05      	cmp	r3, #5
 8006d36:	bfc4      	itt	gt
 8006d38:	3b04      	subgt	r3, #4
 8006d3a:	9322      	strgt	r3, [sp, #136]	; 0x88
 8006d3c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006d3e:	bfc8      	it	gt
 8006d40:	2400      	movgt	r4, #0
 8006d42:	f1a3 0302 	sub.w	r3, r3, #2
 8006d46:	bfd8      	it	le
 8006d48:	2401      	movle	r4, #1
 8006d4a:	2b03      	cmp	r3, #3
 8006d4c:	f200 808a 	bhi.w	8006e64 <_dtoa_r+0x304>
 8006d50:	e8df f003 	tbb	[pc, r3]
 8006d54:	5b4d4f2d 	.word	0x5b4d4f2d
 8006d58:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8006d5c:	441c      	add	r4, r3
 8006d5e:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8006d62:	2b20      	cmp	r3, #32
 8006d64:	bfc3      	ittte	gt
 8006d66:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006d6a:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8006d6e:	fa09 f303 	lslgt.w	r3, r9, r3
 8006d72:	f1c3 0320 	rsble	r3, r3, #32
 8006d76:	bfc6      	itte	gt
 8006d78:	fa26 f000 	lsrgt.w	r0, r6, r0
 8006d7c:	4318      	orrgt	r0, r3
 8006d7e:	fa06 f003 	lslle.w	r0, r6, r3
 8006d82:	f7f9 fb2f 	bl	80003e4 <__aeabi_ui2d>
 8006d86:	2301      	movs	r3, #1
 8006d88:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8006d8c:	3c01      	subs	r4, #1
 8006d8e:	9313      	str	r3, [sp, #76]	; 0x4c
 8006d90:	e76f      	b.n	8006c72 <_dtoa_r+0x112>
 8006d92:	2301      	movs	r3, #1
 8006d94:	e7b2      	b.n	8006cfc <_dtoa_r+0x19c>
 8006d96:	900f      	str	r0, [sp, #60]	; 0x3c
 8006d98:	e7b1      	b.n	8006cfe <_dtoa_r+0x19e>
 8006d9a:	9b06      	ldr	r3, [sp, #24]
 8006d9c:	eba3 030a 	sub.w	r3, r3, sl
 8006da0:	9306      	str	r3, [sp, #24]
 8006da2:	f1ca 0300 	rsb	r3, sl, #0
 8006da6:	930a      	str	r3, [sp, #40]	; 0x28
 8006da8:	2300      	movs	r3, #0
 8006daa:	930e      	str	r3, [sp, #56]	; 0x38
 8006dac:	e7be      	b.n	8006d2c <_dtoa_r+0x1cc>
 8006dae:	2300      	movs	r3, #0
 8006db0:	930b      	str	r3, [sp, #44]	; 0x2c
 8006db2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	dc58      	bgt.n	8006e6a <_dtoa_r+0x30a>
 8006db8:	f04f 0901 	mov.w	r9, #1
 8006dbc:	464b      	mov	r3, r9
 8006dbe:	f8cd 9020 	str.w	r9, [sp, #32]
 8006dc2:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 8006dc6:	2200      	movs	r2, #0
 8006dc8:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8006dca:	6042      	str	r2, [r0, #4]
 8006dcc:	2204      	movs	r2, #4
 8006dce:	f102 0614 	add.w	r6, r2, #20
 8006dd2:	429e      	cmp	r6, r3
 8006dd4:	6841      	ldr	r1, [r0, #4]
 8006dd6:	d94e      	bls.n	8006e76 <_dtoa_r+0x316>
 8006dd8:	4628      	mov	r0, r5
 8006dda:	f000 fcc9 	bl	8007770 <_Balloc>
 8006dde:	9003      	str	r0, [sp, #12]
 8006de0:	2800      	cmp	r0, #0
 8006de2:	d14c      	bne.n	8006e7e <_dtoa_r+0x31e>
 8006de4:	4602      	mov	r2, r0
 8006de6:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006dea:	4b17      	ldr	r3, [pc, #92]	; (8006e48 <_dtoa_r+0x2e8>)
 8006dec:	e6cc      	b.n	8006b88 <_dtoa_r+0x28>
 8006dee:	2301      	movs	r3, #1
 8006df0:	e7de      	b.n	8006db0 <_dtoa_r+0x250>
 8006df2:	2300      	movs	r3, #0
 8006df4:	930b      	str	r3, [sp, #44]	; 0x2c
 8006df6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006df8:	eb0a 0903 	add.w	r9, sl, r3
 8006dfc:	f109 0301 	add.w	r3, r9, #1
 8006e00:	2b01      	cmp	r3, #1
 8006e02:	9308      	str	r3, [sp, #32]
 8006e04:	bfb8      	it	lt
 8006e06:	2301      	movlt	r3, #1
 8006e08:	e7dd      	b.n	8006dc6 <_dtoa_r+0x266>
 8006e0a:	2301      	movs	r3, #1
 8006e0c:	e7f2      	b.n	8006df4 <_dtoa_r+0x294>
 8006e0e:	bf00      	nop
 8006e10:	636f4361 	.word	0x636f4361
 8006e14:	3fd287a7 	.word	0x3fd287a7
 8006e18:	8b60c8b3 	.word	0x8b60c8b3
 8006e1c:	3fc68a28 	.word	0x3fc68a28
 8006e20:	509f79fb 	.word	0x509f79fb
 8006e24:	3fd34413 	.word	0x3fd34413
 8006e28:	080094b9 	.word	0x080094b9
 8006e2c:	080094d0 	.word	0x080094d0
 8006e30:	7ff00000 	.word	0x7ff00000
 8006e34:	080094b5 	.word	0x080094b5
 8006e38:	080094ac 	.word	0x080094ac
 8006e3c:	08009489 	.word	0x08009489
 8006e40:	3ff80000 	.word	0x3ff80000
 8006e44:	080095c0 	.word	0x080095c0
 8006e48:	0800952b 	.word	0x0800952b
 8006e4c:	2401      	movs	r4, #1
 8006e4e:	2300      	movs	r3, #0
 8006e50:	940b      	str	r4, [sp, #44]	; 0x2c
 8006e52:	9322      	str	r3, [sp, #136]	; 0x88
 8006e54:	f04f 39ff 	mov.w	r9, #4294967295
 8006e58:	2200      	movs	r2, #0
 8006e5a:	2312      	movs	r3, #18
 8006e5c:	f8cd 9020 	str.w	r9, [sp, #32]
 8006e60:	9223      	str	r2, [sp, #140]	; 0x8c
 8006e62:	e7b0      	b.n	8006dc6 <_dtoa_r+0x266>
 8006e64:	2301      	movs	r3, #1
 8006e66:	930b      	str	r3, [sp, #44]	; 0x2c
 8006e68:	e7f4      	b.n	8006e54 <_dtoa_r+0x2f4>
 8006e6a:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 8006e6e:	464b      	mov	r3, r9
 8006e70:	f8cd 9020 	str.w	r9, [sp, #32]
 8006e74:	e7a7      	b.n	8006dc6 <_dtoa_r+0x266>
 8006e76:	3101      	adds	r1, #1
 8006e78:	6041      	str	r1, [r0, #4]
 8006e7a:	0052      	lsls	r2, r2, #1
 8006e7c:	e7a7      	b.n	8006dce <_dtoa_r+0x26e>
 8006e7e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006e80:	9a03      	ldr	r2, [sp, #12]
 8006e82:	601a      	str	r2, [r3, #0]
 8006e84:	9b08      	ldr	r3, [sp, #32]
 8006e86:	2b0e      	cmp	r3, #14
 8006e88:	f200 80a8 	bhi.w	8006fdc <_dtoa_r+0x47c>
 8006e8c:	2c00      	cmp	r4, #0
 8006e8e:	f000 80a5 	beq.w	8006fdc <_dtoa_r+0x47c>
 8006e92:	f1ba 0f00 	cmp.w	sl, #0
 8006e96:	dd34      	ble.n	8006f02 <_dtoa_r+0x3a2>
 8006e98:	4a9a      	ldr	r2, [pc, #616]	; (8007104 <_dtoa_r+0x5a4>)
 8006e9a:	f00a 030f 	and.w	r3, sl, #15
 8006e9e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006ea2:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8006ea6:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006eaa:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8006eae:	ea4f 142a 	mov.w	r4, sl, asr #4
 8006eb2:	d016      	beq.n	8006ee2 <_dtoa_r+0x382>
 8006eb4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006eb8:	4b93      	ldr	r3, [pc, #588]	; (8007108 <_dtoa_r+0x5a8>)
 8006eba:	2703      	movs	r7, #3
 8006ebc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006ec0:	f7f9 fc34 	bl	800072c <__aeabi_ddiv>
 8006ec4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006ec8:	f004 040f 	and.w	r4, r4, #15
 8006ecc:	4e8e      	ldr	r6, [pc, #568]	; (8007108 <_dtoa_r+0x5a8>)
 8006ece:	b954      	cbnz	r4, 8006ee6 <_dtoa_r+0x386>
 8006ed0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006ed4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006ed8:	f7f9 fc28 	bl	800072c <__aeabi_ddiv>
 8006edc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006ee0:	e029      	b.n	8006f36 <_dtoa_r+0x3d6>
 8006ee2:	2702      	movs	r7, #2
 8006ee4:	e7f2      	b.n	8006ecc <_dtoa_r+0x36c>
 8006ee6:	07e1      	lsls	r1, r4, #31
 8006ee8:	d508      	bpl.n	8006efc <_dtoa_r+0x39c>
 8006eea:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006eee:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006ef2:	f7f9 faf1 	bl	80004d8 <__aeabi_dmul>
 8006ef6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006efa:	3701      	adds	r7, #1
 8006efc:	1064      	asrs	r4, r4, #1
 8006efe:	3608      	adds	r6, #8
 8006f00:	e7e5      	b.n	8006ece <_dtoa_r+0x36e>
 8006f02:	f000 80a5 	beq.w	8007050 <_dtoa_r+0x4f0>
 8006f06:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006f0a:	f1ca 0400 	rsb	r4, sl, #0
 8006f0e:	4b7d      	ldr	r3, [pc, #500]	; (8007104 <_dtoa_r+0x5a4>)
 8006f10:	f004 020f 	and.w	r2, r4, #15
 8006f14:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006f18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f1c:	f7f9 fadc 	bl	80004d8 <__aeabi_dmul>
 8006f20:	2702      	movs	r7, #2
 8006f22:	2300      	movs	r3, #0
 8006f24:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006f28:	4e77      	ldr	r6, [pc, #476]	; (8007108 <_dtoa_r+0x5a8>)
 8006f2a:	1124      	asrs	r4, r4, #4
 8006f2c:	2c00      	cmp	r4, #0
 8006f2e:	f040 8084 	bne.w	800703a <_dtoa_r+0x4da>
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d1d2      	bne.n	8006edc <_dtoa_r+0x37c>
 8006f36:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	f000 808b 	beq.w	8007054 <_dtoa_r+0x4f4>
 8006f3e:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8006f42:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8006f46:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006f4a:	2200      	movs	r2, #0
 8006f4c:	4b6f      	ldr	r3, [pc, #444]	; (800710c <_dtoa_r+0x5ac>)
 8006f4e:	f7f9 fd35 	bl	80009bc <__aeabi_dcmplt>
 8006f52:	2800      	cmp	r0, #0
 8006f54:	d07e      	beq.n	8007054 <_dtoa_r+0x4f4>
 8006f56:	9b08      	ldr	r3, [sp, #32]
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d07b      	beq.n	8007054 <_dtoa_r+0x4f4>
 8006f5c:	f1b9 0f00 	cmp.w	r9, #0
 8006f60:	dd38      	ble.n	8006fd4 <_dtoa_r+0x474>
 8006f62:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006f66:	2200      	movs	r2, #0
 8006f68:	4b69      	ldr	r3, [pc, #420]	; (8007110 <_dtoa_r+0x5b0>)
 8006f6a:	f7f9 fab5 	bl	80004d8 <__aeabi_dmul>
 8006f6e:	464c      	mov	r4, r9
 8006f70:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006f74:	f10a 38ff 	add.w	r8, sl, #4294967295
 8006f78:	3701      	adds	r7, #1
 8006f7a:	4638      	mov	r0, r7
 8006f7c:	f7f9 fa42 	bl	8000404 <__aeabi_i2d>
 8006f80:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006f84:	f7f9 faa8 	bl	80004d8 <__aeabi_dmul>
 8006f88:	2200      	movs	r2, #0
 8006f8a:	4b62      	ldr	r3, [pc, #392]	; (8007114 <_dtoa_r+0x5b4>)
 8006f8c:	f7f9 f8ee 	bl	800016c <__adddf3>
 8006f90:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8006f94:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006f98:	9611      	str	r6, [sp, #68]	; 0x44
 8006f9a:	2c00      	cmp	r4, #0
 8006f9c:	d15d      	bne.n	800705a <_dtoa_r+0x4fa>
 8006f9e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006fa2:	2200      	movs	r2, #0
 8006fa4:	4b5c      	ldr	r3, [pc, #368]	; (8007118 <_dtoa_r+0x5b8>)
 8006fa6:	f7f9 f8df 	bl	8000168 <__aeabi_dsub>
 8006faa:	4602      	mov	r2, r0
 8006fac:	460b      	mov	r3, r1
 8006fae:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006fb2:	4633      	mov	r3, r6
 8006fb4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006fb6:	f7f9 fd1f 	bl	80009f8 <__aeabi_dcmpgt>
 8006fba:	2800      	cmp	r0, #0
 8006fbc:	f040 829c 	bne.w	80074f8 <_dtoa_r+0x998>
 8006fc0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006fc4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006fc6:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8006fca:	f7f9 fcf7 	bl	80009bc <__aeabi_dcmplt>
 8006fce:	2800      	cmp	r0, #0
 8006fd0:	f040 8290 	bne.w	80074f4 <_dtoa_r+0x994>
 8006fd4:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8006fd8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8006fdc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	f2c0 8152 	blt.w	8007288 <_dtoa_r+0x728>
 8006fe4:	f1ba 0f0e 	cmp.w	sl, #14
 8006fe8:	f300 814e 	bgt.w	8007288 <_dtoa_r+0x728>
 8006fec:	4b45      	ldr	r3, [pc, #276]	; (8007104 <_dtoa_r+0x5a4>)
 8006fee:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8006ff2:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006ff6:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8006ffa:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	f280 80db 	bge.w	80071b8 <_dtoa_r+0x658>
 8007002:	9b08      	ldr	r3, [sp, #32]
 8007004:	2b00      	cmp	r3, #0
 8007006:	f300 80d7 	bgt.w	80071b8 <_dtoa_r+0x658>
 800700a:	f040 8272 	bne.w	80074f2 <_dtoa_r+0x992>
 800700e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007012:	2200      	movs	r2, #0
 8007014:	4b40      	ldr	r3, [pc, #256]	; (8007118 <_dtoa_r+0x5b8>)
 8007016:	f7f9 fa5f 	bl	80004d8 <__aeabi_dmul>
 800701a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800701e:	f7f9 fce1 	bl	80009e4 <__aeabi_dcmpge>
 8007022:	9c08      	ldr	r4, [sp, #32]
 8007024:	4626      	mov	r6, r4
 8007026:	2800      	cmp	r0, #0
 8007028:	f040 8248 	bne.w	80074bc <_dtoa_r+0x95c>
 800702c:	2331      	movs	r3, #49	; 0x31
 800702e:	9f03      	ldr	r7, [sp, #12]
 8007030:	f10a 0a01 	add.w	sl, sl, #1
 8007034:	f807 3b01 	strb.w	r3, [r7], #1
 8007038:	e244      	b.n	80074c4 <_dtoa_r+0x964>
 800703a:	07e2      	lsls	r2, r4, #31
 800703c:	d505      	bpl.n	800704a <_dtoa_r+0x4ea>
 800703e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007042:	f7f9 fa49 	bl	80004d8 <__aeabi_dmul>
 8007046:	2301      	movs	r3, #1
 8007048:	3701      	adds	r7, #1
 800704a:	1064      	asrs	r4, r4, #1
 800704c:	3608      	adds	r6, #8
 800704e:	e76d      	b.n	8006f2c <_dtoa_r+0x3cc>
 8007050:	2702      	movs	r7, #2
 8007052:	e770      	b.n	8006f36 <_dtoa_r+0x3d6>
 8007054:	46d0      	mov	r8, sl
 8007056:	9c08      	ldr	r4, [sp, #32]
 8007058:	e78f      	b.n	8006f7a <_dtoa_r+0x41a>
 800705a:	9903      	ldr	r1, [sp, #12]
 800705c:	4b29      	ldr	r3, [pc, #164]	; (8007104 <_dtoa_r+0x5a4>)
 800705e:	4421      	add	r1, r4
 8007060:	9112      	str	r1, [sp, #72]	; 0x48
 8007062:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007064:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007068:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800706c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007070:	2900      	cmp	r1, #0
 8007072:	d055      	beq.n	8007120 <_dtoa_r+0x5c0>
 8007074:	2000      	movs	r0, #0
 8007076:	4929      	ldr	r1, [pc, #164]	; (800711c <_dtoa_r+0x5bc>)
 8007078:	f7f9 fb58 	bl	800072c <__aeabi_ddiv>
 800707c:	463b      	mov	r3, r7
 800707e:	4632      	mov	r2, r6
 8007080:	f7f9 f872 	bl	8000168 <__aeabi_dsub>
 8007084:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007088:	9f03      	ldr	r7, [sp, #12]
 800708a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800708e:	f7f9 fcd3 	bl	8000a38 <__aeabi_d2iz>
 8007092:	4604      	mov	r4, r0
 8007094:	f7f9 f9b6 	bl	8000404 <__aeabi_i2d>
 8007098:	4602      	mov	r2, r0
 800709a:	460b      	mov	r3, r1
 800709c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80070a0:	f7f9 f862 	bl	8000168 <__aeabi_dsub>
 80070a4:	4602      	mov	r2, r0
 80070a6:	460b      	mov	r3, r1
 80070a8:	3430      	adds	r4, #48	; 0x30
 80070aa:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80070ae:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80070b2:	f807 4b01 	strb.w	r4, [r7], #1
 80070b6:	f7f9 fc81 	bl	80009bc <__aeabi_dcmplt>
 80070ba:	2800      	cmp	r0, #0
 80070bc:	d174      	bne.n	80071a8 <_dtoa_r+0x648>
 80070be:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80070c2:	2000      	movs	r0, #0
 80070c4:	4911      	ldr	r1, [pc, #68]	; (800710c <_dtoa_r+0x5ac>)
 80070c6:	f7f9 f84f 	bl	8000168 <__aeabi_dsub>
 80070ca:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80070ce:	f7f9 fc75 	bl	80009bc <__aeabi_dcmplt>
 80070d2:	2800      	cmp	r0, #0
 80070d4:	f040 80b7 	bne.w	8007246 <_dtoa_r+0x6e6>
 80070d8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80070da:	429f      	cmp	r7, r3
 80070dc:	f43f af7a 	beq.w	8006fd4 <_dtoa_r+0x474>
 80070e0:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80070e4:	2200      	movs	r2, #0
 80070e6:	4b0a      	ldr	r3, [pc, #40]	; (8007110 <_dtoa_r+0x5b0>)
 80070e8:	f7f9 f9f6 	bl	80004d8 <__aeabi_dmul>
 80070ec:	2200      	movs	r2, #0
 80070ee:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80070f2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80070f6:	4b06      	ldr	r3, [pc, #24]	; (8007110 <_dtoa_r+0x5b0>)
 80070f8:	f7f9 f9ee 	bl	80004d8 <__aeabi_dmul>
 80070fc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007100:	e7c3      	b.n	800708a <_dtoa_r+0x52a>
 8007102:	bf00      	nop
 8007104:	080095c0 	.word	0x080095c0
 8007108:	08009598 	.word	0x08009598
 800710c:	3ff00000 	.word	0x3ff00000
 8007110:	40240000 	.word	0x40240000
 8007114:	401c0000 	.word	0x401c0000
 8007118:	40140000 	.word	0x40140000
 800711c:	3fe00000 	.word	0x3fe00000
 8007120:	4630      	mov	r0, r6
 8007122:	4639      	mov	r1, r7
 8007124:	f7f9 f9d8 	bl	80004d8 <__aeabi_dmul>
 8007128:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800712a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800712e:	9c03      	ldr	r4, [sp, #12]
 8007130:	9314      	str	r3, [sp, #80]	; 0x50
 8007132:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007136:	f7f9 fc7f 	bl	8000a38 <__aeabi_d2iz>
 800713a:	9015      	str	r0, [sp, #84]	; 0x54
 800713c:	f7f9 f962 	bl	8000404 <__aeabi_i2d>
 8007140:	4602      	mov	r2, r0
 8007142:	460b      	mov	r3, r1
 8007144:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007148:	f7f9 f80e 	bl	8000168 <__aeabi_dsub>
 800714c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800714e:	4606      	mov	r6, r0
 8007150:	3330      	adds	r3, #48	; 0x30
 8007152:	f804 3b01 	strb.w	r3, [r4], #1
 8007156:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007158:	460f      	mov	r7, r1
 800715a:	429c      	cmp	r4, r3
 800715c:	f04f 0200 	mov.w	r2, #0
 8007160:	d124      	bne.n	80071ac <_dtoa_r+0x64c>
 8007162:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007166:	4bb0      	ldr	r3, [pc, #704]	; (8007428 <_dtoa_r+0x8c8>)
 8007168:	f7f9 f800 	bl	800016c <__adddf3>
 800716c:	4602      	mov	r2, r0
 800716e:	460b      	mov	r3, r1
 8007170:	4630      	mov	r0, r6
 8007172:	4639      	mov	r1, r7
 8007174:	f7f9 fc40 	bl	80009f8 <__aeabi_dcmpgt>
 8007178:	2800      	cmp	r0, #0
 800717a:	d163      	bne.n	8007244 <_dtoa_r+0x6e4>
 800717c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007180:	2000      	movs	r0, #0
 8007182:	49a9      	ldr	r1, [pc, #676]	; (8007428 <_dtoa_r+0x8c8>)
 8007184:	f7f8 fff0 	bl	8000168 <__aeabi_dsub>
 8007188:	4602      	mov	r2, r0
 800718a:	460b      	mov	r3, r1
 800718c:	4630      	mov	r0, r6
 800718e:	4639      	mov	r1, r7
 8007190:	f7f9 fc14 	bl	80009bc <__aeabi_dcmplt>
 8007194:	2800      	cmp	r0, #0
 8007196:	f43f af1d 	beq.w	8006fd4 <_dtoa_r+0x474>
 800719a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800719c:	1e7b      	subs	r3, r7, #1
 800719e:	9314      	str	r3, [sp, #80]	; 0x50
 80071a0:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 80071a4:	2b30      	cmp	r3, #48	; 0x30
 80071a6:	d0f8      	beq.n	800719a <_dtoa_r+0x63a>
 80071a8:	46c2      	mov	sl, r8
 80071aa:	e03b      	b.n	8007224 <_dtoa_r+0x6c4>
 80071ac:	4b9f      	ldr	r3, [pc, #636]	; (800742c <_dtoa_r+0x8cc>)
 80071ae:	f7f9 f993 	bl	80004d8 <__aeabi_dmul>
 80071b2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80071b6:	e7bc      	b.n	8007132 <_dtoa_r+0x5d2>
 80071b8:	9f03      	ldr	r7, [sp, #12]
 80071ba:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80071be:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80071c2:	4640      	mov	r0, r8
 80071c4:	4649      	mov	r1, r9
 80071c6:	f7f9 fab1 	bl	800072c <__aeabi_ddiv>
 80071ca:	f7f9 fc35 	bl	8000a38 <__aeabi_d2iz>
 80071ce:	4604      	mov	r4, r0
 80071d0:	f7f9 f918 	bl	8000404 <__aeabi_i2d>
 80071d4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80071d8:	f7f9 f97e 	bl	80004d8 <__aeabi_dmul>
 80071dc:	4602      	mov	r2, r0
 80071de:	460b      	mov	r3, r1
 80071e0:	4640      	mov	r0, r8
 80071e2:	4649      	mov	r1, r9
 80071e4:	f7f8 ffc0 	bl	8000168 <__aeabi_dsub>
 80071e8:	f104 0630 	add.w	r6, r4, #48	; 0x30
 80071ec:	f807 6b01 	strb.w	r6, [r7], #1
 80071f0:	9e03      	ldr	r6, [sp, #12]
 80071f2:	f8dd c020 	ldr.w	ip, [sp, #32]
 80071f6:	1bbe      	subs	r6, r7, r6
 80071f8:	45b4      	cmp	ip, r6
 80071fa:	4602      	mov	r2, r0
 80071fc:	460b      	mov	r3, r1
 80071fe:	d136      	bne.n	800726e <_dtoa_r+0x70e>
 8007200:	f7f8 ffb4 	bl	800016c <__adddf3>
 8007204:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007208:	4680      	mov	r8, r0
 800720a:	4689      	mov	r9, r1
 800720c:	f7f9 fbf4 	bl	80009f8 <__aeabi_dcmpgt>
 8007210:	bb58      	cbnz	r0, 800726a <_dtoa_r+0x70a>
 8007212:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007216:	4640      	mov	r0, r8
 8007218:	4649      	mov	r1, r9
 800721a:	f7f9 fbc5 	bl	80009a8 <__aeabi_dcmpeq>
 800721e:	b108      	cbz	r0, 8007224 <_dtoa_r+0x6c4>
 8007220:	07e1      	lsls	r1, r4, #31
 8007222:	d422      	bmi.n	800726a <_dtoa_r+0x70a>
 8007224:	4628      	mov	r0, r5
 8007226:	4659      	mov	r1, fp
 8007228:	f000 fae2 	bl	80077f0 <_Bfree>
 800722c:	2300      	movs	r3, #0
 800722e:	703b      	strb	r3, [r7, #0]
 8007230:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8007232:	f10a 0001 	add.w	r0, sl, #1
 8007236:	6018      	str	r0, [r3, #0]
 8007238:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800723a:	2b00      	cmp	r3, #0
 800723c:	f43f acde 	beq.w	8006bfc <_dtoa_r+0x9c>
 8007240:	601f      	str	r7, [r3, #0]
 8007242:	e4db      	b.n	8006bfc <_dtoa_r+0x9c>
 8007244:	4627      	mov	r7, r4
 8007246:	463b      	mov	r3, r7
 8007248:	461f      	mov	r7, r3
 800724a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800724e:	2a39      	cmp	r2, #57	; 0x39
 8007250:	d107      	bne.n	8007262 <_dtoa_r+0x702>
 8007252:	9a03      	ldr	r2, [sp, #12]
 8007254:	429a      	cmp	r2, r3
 8007256:	d1f7      	bne.n	8007248 <_dtoa_r+0x6e8>
 8007258:	2230      	movs	r2, #48	; 0x30
 800725a:	9903      	ldr	r1, [sp, #12]
 800725c:	f108 0801 	add.w	r8, r8, #1
 8007260:	700a      	strb	r2, [r1, #0]
 8007262:	781a      	ldrb	r2, [r3, #0]
 8007264:	3201      	adds	r2, #1
 8007266:	701a      	strb	r2, [r3, #0]
 8007268:	e79e      	b.n	80071a8 <_dtoa_r+0x648>
 800726a:	46d0      	mov	r8, sl
 800726c:	e7eb      	b.n	8007246 <_dtoa_r+0x6e6>
 800726e:	2200      	movs	r2, #0
 8007270:	4b6e      	ldr	r3, [pc, #440]	; (800742c <_dtoa_r+0x8cc>)
 8007272:	f7f9 f931 	bl	80004d8 <__aeabi_dmul>
 8007276:	2200      	movs	r2, #0
 8007278:	2300      	movs	r3, #0
 800727a:	4680      	mov	r8, r0
 800727c:	4689      	mov	r9, r1
 800727e:	f7f9 fb93 	bl	80009a8 <__aeabi_dcmpeq>
 8007282:	2800      	cmp	r0, #0
 8007284:	d09b      	beq.n	80071be <_dtoa_r+0x65e>
 8007286:	e7cd      	b.n	8007224 <_dtoa_r+0x6c4>
 8007288:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800728a:	2a00      	cmp	r2, #0
 800728c:	f000 80d0 	beq.w	8007430 <_dtoa_r+0x8d0>
 8007290:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8007292:	2a01      	cmp	r2, #1
 8007294:	f300 80ae 	bgt.w	80073f4 <_dtoa_r+0x894>
 8007298:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800729a:	2a00      	cmp	r2, #0
 800729c:	f000 80a6 	beq.w	80073ec <_dtoa_r+0x88c>
 80072a0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80072a4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80072a6:	9f06      	ldr	r7, [sp, #24]
 80072a8:	9a06      	ldr	r2, [sp, #24]
 80072aa:	2101      	movs	r1, #1
 80072ac:	441a      	add	r2, r3
 80072ae:	9206      	str	r2, [sp, #24]
 80072b0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80072b2:	4628      	mov	r0, r5
 80072b4:	441a      	add	r2, r3
 80072b6:	9209      	str	r2, [sp, #36]	; 0x24
 80072b8:	f000 fb50 	bl	800795c <__i2b>
 80072bc:	4606      	mov	r6, r0
 80072be:	2f00      	cmp	r7, #0
 80072c0:	dd0c      	ble.n	80072dc <_dtoa_r+0x77c>
 80072c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	dd09      	ble.n	80072dc <_dtoa_r+0x77c>
 80072c8:	42bb      	cmp	r3, r7
 80072ca:	bfa8      	it	ge
 80072cc:	463b      	movge	r3, r7
 80072ce:	9a06      	ldr	r2, [sp, #24]
 80072d0:	1aff      	subs	r7, r7, r3
 80072d2:	1ad2      	subs	r2, r2, r3
 80072d4:	9206      	str	r2, [sp, #24]
 80072d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80072d8:	1ad3      	subs	r3, r2, r3
 80072da:	9309      	str	r3, [sp, #36]	; 0x24
 80072dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80072de:	b1f3      	cbz	r3, 800731e <_dtoa_r+0x7be>
 80072e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	f000 80a8 	beq.w	8007438 <_dtoa_r+0x8d8>
 80072e8:	2c00      	cmp	r4, #0
 80072ea:	dd10      	ble.n	800730e <_dtoa_r+0x7ae>
 80072ec:	4631      	mov	r1, r6
 80072ee:	4622      	mov	r2, r4
 80072f0:	4628      	mov	r0, r5
 80072f2:	f000 fbf1 	bl	8007ad8 <__pow5mult>
 80072f6:	465a      	mov	r2, fp
 80072f8:	4601      	mov	r1, r0
 80072fa:	4606      	mov	r6, r0
 80072fc:	4628      	mov	r0, r5
 80072fe:	f000 fb43 	bl	8007988 <__multiply>
 8007302:	4680      	mov	r8, r0
 8007304:	4659      	mov	r1, fp
 8007306:	4628      	mov	r0, r5
 8007308:	f000 fa72 	bl	80077f0 <_Bfree>
 800730c:	46c3      	mov	fp, r8
 800730e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007310:	1b1a      	subs	r2, r3, r4
 8007312:	d004      	beq.n	800731e <_dtoa_r+0x7be>
 8007314:	4659      	mov	r1, fp
 8007316:	4628      	mov	r0, r5
 8007318:	f000 fbde 	bl	8007ad8 <__pow5mult>
 800731c:	4683      	mov	fp, r0
 800731e:	2101      	movs	r1, #1
 8007320:	4628      	mov	r0, r5
 8007322:	f000 fb1b 	bl	800795c <__i2b>
 8007326:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007328:	4604      	mov	r4, r0
 800732a:	2b00      	cmp	r3, #0
 800732c:	f340 8086 	ble.w	800743c <_dtoa_r+0x8dc>
 8007330:	461a      	mov	r2, r3
 8007332:	4601      	mov	r1, r0
 8007334:	4628      	mov	r0, r5
 8007336:	f000 fbcf 	bl	8007ad8 <__pow5mult>
 800733a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800733c:	4604      	mov	r4, r0
 800733e:	2b01      	cmp	r3, #1
 8007340:	dd7f      	ble.n	8007442 <_dtoa_r+0x8e2>
 8007342:	f04f 0800 	mov.w	r8, #0
 8007346:	6923      	ldr	r3, [r4, #16]
 8007348:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800734c:	6918      	ldr	r0, [r3, #16]
 800734e:	f000 fab7 	bl	80078c0 <__hi0bits>
 8007352:	f1c0 0020 	rsb	r0, r0, #32
 8007356:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007358:	4418      	add	r0, r3
 800735a:	f010 001f 	ands.w	r0, r0, #31
 800735e:	f000 8092 	beq.w	8007486 <_dtoa_r+0x926>
 8007362:	f1c0 0320 	rsb	r3, r0, #32
 8007366:	2b04      	cmp	r3, #4
 8007368:	f340 808a 	ble.w	8007480 <_dtoa_r+0x920>
 800736c:	f1c0 001c 	rsb	r0, r0, #28
 8007370:	9b06      	ldr	r3, [sp, #24]
 8007372:	4407      	add	r7, r0
 8007374:	4403      	add	r3, r0
 8007376:	9306      	str	r3, [sp, #24]
 8007378:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800737a:	4403      	add	r3, r0
 800737c:	9309      	str	r3, [sp, #36]	; 0x24
 800737e:	9b06      	ldr	r3, [sp, #24]
 8007380:	2b00      	cmp	r3, #0
 8007382:	dd05      	ble.n	8007390 <_dtoa_r+0x830>
 8007384:	4659      	mov	r1, fp
 8007386:	461a      	mov	r2, r3
 8007388:	4628      	mov	r0, r5
 800738a:	f000 fbff 	bl	8007b8c <__lshift>
 800738e:	4683      	mov	fp, r0
 8007390:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007392:	2b00      	cmp	r3, #0
 8007394:	dd05      	ble.n	80073a2 <_dtoa_r+0x842>
 8007396:	4621      	mov	r1, r4
 8007398:	461a      	mov	r2, r3
 800739a:	4628      	mov	r0, r5
 800739c:	f000 fbf6 	bl	8007b8c <__lshift>
 80073a0:	4604      	mov	r4, r0
 80073a2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d070      	beq.n	800748a <_dtoa_r+0x92a>
 80073a8:	4621      	mov	r1, r4
 80073aa:	4658      	mov	r0, fp
 80073ac:	f000 fc5e 	bl	8007c6c <__mcmp>
 80073b0:	2800      	cmp	r0, #0
 80073b2:	da6a      	bge.n	800748a <_dtoa_r+0x92a>
 80073b4:	2300      	movs	r3, #0
 80073b6:	4659      	mov	r1, fp
 80073b8:	220a      	movs	r2, #10
 80073ba:	4628      	mov	r0, r5
 80073bc:	f000 fa3a 	bl	8007834 <__multadd>
 80073c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80073c2:	4683      	mov	fp, r0
 80073c4:	f10a 3aff 	add.w	sl, sl, #4294967295
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	f000 8194 	beq.w	80076f6 <_dtoa_r+0xb96>
 80073ce:	4631      	mov	r1, r6
 80073d0:	2300      	movs	r3, #0
 80073d2:	220a      	movs	r2, #10
 80073d4:	4628      	mov	r0, r5
 80073d6:	f000 fa2d 	bl	8007834 <__multadd>
 80073da:	f1b9 0f00 	cmp.w	r9, #0
 80073de:	4606      	mov	r6, r0
 80073e0:	f300 8093 	bgt.w	800750a <_dtoa_r+0x9aa>
 80073e4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80073e6:	2b02      	cmp	r3, #2
 80073e8:	dc57      	bgt.n	800749a <_dtoa_r+0x93a>
 80073ea:	e08e      	b.n	800750a <_dtoa_r+0x9aa>
 80073ec:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80073ee:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80073f2:	e757      	b.n	80072a4 <_dtoa_r+0x744>
 80073f4:	9b08      	ldr	r3, [sp, #32]
 80073f6:	1e5c      	subs	r4, r3, #1
 80073f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80073fa:	42a3      	cmp	r3, r4
 80073fc:	bfb7      	itett	lt
 80073fe:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8007400:	1b1c      	subge	r4, r3, r4
 8007402:	1ae2      	sublt	r2, r4, r3
 8007404:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8007406:	bfbe      	ittt	lt
 8007408:	940a      	strlt	r4, [sp, #40]	; 0x28
 800740a:	189b      	addlt	r3, r3, r2
 800740c:	930e      	strlt	r3, [sp, #56]	; 0x38
 800740e:	9b08      	ldr	r3, [sp, #32]
 8007410:	bfb8      	it	lt
 8007412:	2400      	movlt	r4, #0
 8007414:	2b00      	cmp	r3, #0
 8007416:	bfbb      	ittet	lt
 8007418:	9b06      	ldrlt	r3, [sp, #24]
 800741a:	9a08      	ldrlt	r2, [sp, #32]
 800741c:	9f06      	ldrge	r7, [sp, #24]
 800741e:	1a9f      	sublt	r7, r3, r2
 8007420:	bfac      	ite	ge
 8007422:	9b08      	ldrge	r3, [sp, #32]
 8007424:	2300      	movlt	r3, #0
 8007426:	e73f      	b.n	80072a8 <_dtoa_r+0x748>
 8007428:	3fe00000 	.word	0x3fe00000
 800742c:	40240000 	.word	0x40240000
 8007430:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007432:	9f06      	ldr	r7, [sp, #24]
 8007434:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8007436:	e742      	b.n	80072be <_dtoa_r+0x75e>
 8007438:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800743a:	e76b      	b.n	8007314 <_dtoa_r+0x7b4>
 800743c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800743e:	2b01      	cmp	r3, #1
 8007440:	dc19      	bgt.n	8007476 <_dtoa_r+0x916>
 8007442:	9b04      	ldr	r3, [sp, #16]
 8007444:	b9bb      	cbnz	r3, 8007476 <_dtoa_r+0x916>
 8007446:	9b05      	ldr	r3, [sp, #20]
 8007448:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800744c:	b99b      	cbnz	r3, 8007476 <_dtoa_r+0x916>
 800744e:	9b05      	ldr	r3, [sp, #20]
 8007450:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007454:	0d1b      	lsrs	r3, r3, #20
 8007456:	051b      	lsls	r3, r3, #20
 8007458:	b183      	cbz	r3, 800747c <_dtoa_r+0x91c>
 800745a:	f04f 0801 	mov.w	r8, #1
 800745e:	9b06      	ldr	r3, [sp, #24]
 8007460:	3301      	adds	r3, #1
 8007462:	9306      	str	r3, [sp, #24]
 8007464:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007466:	3301      	adds	r3, #1
 8007468:	9309      	str	r3, [sp, #36]	; 0x24
 800746a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800746c:	2b00      	cmp	r3, #0
 800746e:	f47f af6a 	bne.w	8007346 <_dtoa_r+0x7e6>
 8007472:	2001      	movs	r0, #1
 8007474:	e76f      	b.n	8007356 <_dtoa_r+0x7f6>
 8007476:	f04f 0800 	mov.w	r8, #0
 800747a:	e7f6      	b.n	800746a <_dtoa_r+0x90a>
 800747c:	4698      	mov	r8, r3
 800747e:	e7f4      	b.n	800746a <_dtoa_r+0x90a>
 8007480:	f43f af7d 	beq.w	800737e <_dtoa_r+0x81e>
 8007484:	4618      	mov	r0, r3
 8007486:	301c      	adds	r0, #28
 8007488:	e772      	b.n	8007370 <_dtoa_r+0x810>
 800748a:	9b08      	ldr	r3, [sp, #32]
 800748c:	2b00      	cmp	r3, #0
 800748e:	dc36      	bgt.n	80074fe <_dtoa_r+0x99e>
 8007490:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007492:	2b02      	cmp	r3, #2
 8007494:	dd33      	ble.n	80074fe <_dtoa_r+0x99e>
 8007496:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800749a:	f1b9 0f00 	cmp.w	r9, #0
 800749e:	d10d      	bne.n	80074bc <_dtoa_r+0x95c>
 80074a0:	4621      	mov	r1, r4
 80074a2:	464b      	mov	r3, r9
 80074a4:	2205      	movs	r2, #5
 80074a6:	4628      	mov	r0, r5
 80074a8:	f000 f9c4 	bl	8007834 <__multadd>
 80074ac:	4601      	mov	r1, r0
 80074ae:	4604      	mov	r4, r0
 80074b0:	4658      	mov	r0, fp
 80074b2:	f000 fbdb 	bl	8007c6c <__mcmp>
 80074b6:	2800      	cmp	r0, #0
 80074b8:	f73f adb8 	bgt.w	800702c <_dtoa_r+0x4cc>
 80074bc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80074be:	9f03      	ldr	r7, [sp, #12]
 80074c0:	ea6f 0a03 	mvn.w	sl, r3
 80074c4:	f04f 0800 	mov.w	r8, #0
 80074c8:	4621      	mov	r1, r4
 80074ca:	4628      	mov	r0, r5
 80074cc:	f000 f990 	bl	80077f0 <_Bfree>
 80074d0:	2e00      	cmp	r6, #0
 80074d2:	f43f aea7 	beq.w	8007224 <_dtoa_r+0x6c4>
 80074d6:	f1b8 0f00 	cmp.w	r8, #0
 80074da:	d005      	beq.n	80074e8 <_dtoa_r+0x988>
 80074dc:	45b0      	cmp	r8, r6
 80074de:	d003      	beq.n	80074e8 <_dtoa_r+0x988>
 80074e0:	4641      	mov	r1, r8
 80074e2:	4628      	mov	r0, r5
 80074e4:	f000 f984 	bl	80077f0 <_Bfree>
 80074e8:	4631      	mov	r1, r6
 80074ea:	4628      	mov	r0, r5
 80074ec:	f000 f980 	bl	80077f0 <_Bfree>
 80074f0:	e698      	b.n	8007224 <_dtoa_r+0x6c4>
 80074f2:	2400      	movs	r4, #0
 80074f4:	4626      	mov	r6, r4
 80074f6:	e7e1      	b.n	80074bc <_dtoa_r+0x95c>
 80074f8:	46c2      	mov	sl, r8
 80074fa:	4626      	mov	r6, r4
 80074fc:	e596      	b.n	800702c <_dtoa_r+0x4cc>
 80074fe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007500:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007504:	2b00      	cmp	r3, #0
 8007506:	f000 80fd 	beq.w	8007704 <_dtoa_r+0xba4>
 800750a:	2f00      	cmp	r7, #0
 800750c:	dd05      	ble.n	800751a <_dtoa_r+0x9ba>
 800750e:	4631      	mov	r1, r6
 8007510:	463a      	mov	r2, r7
 8007512:	4628      	mov	r0, r5
 8007514:	f000 fb3a 	bl	8007b8c <__lshift>
 8007518:	4606      	mov	r6, r0
 800751a:	f1b8 0f00 	cmp.w	r8, #0
 800751e:	d05c      	beq.n	80075da <_dtoa_r+0xa7a>
 8007520:	4628      	mov	r0, r5
 8007522:	6871      	ldr	r1, [r6, #4]
 8007524:	f000 f924 	bl	8007770 <_Balloc>
 8007528:	4607      	mov	r7, r0
 800752a:	b928      	cbnz	r0, 8007538 <_dtoa_r+0x9d8>
 800752c:	4602      	mov	r2, r0
 800752e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8007532:	4b7f      	ldr	r3, [pc, #508]	; (8007730 <_dtoa_r+0xbd0>)
 8007534:	f7ff bb28 	b.w	8006b88 <_dtoa_r+0x28>
 8007538:	6932      	ldr	r2, [r6, #16]
 800753a:	f106 010c 	add.w	r1, r6, #12
 800753e:	3202      	adds	r2, #2
 8007540:	0092      	lsls	r2, r2, #2
 8007542:	300c      	adds	r0, #12
 8007544:	f7fe fde8 	bl	8006118 <memcpy>
 8007548:	2201      	movs	r2, #1
 800754a:	4639      	mov	r1, r7
 800754c:	4628      	mov	r0, r5
 800754e:	f000 fb1d 	bl	8007b8c <__lshift>
 8007552:	46b0      	mov	r8, r6
 8007554:	4606      	mov	r6, r0
 8007556:	9b03      	ldr	r3, [sp, #12]
 8007558:	3301      	adds	r3, #1
 800755a:	9308      	str	r3, [sp, #32]
 800755c:	9b03      	ldr	r3, [sp, #12]
 800755e:	444b      	add	r3, r9
 8007560:	930a      	str	r3, [sp, #40]	; 0x28
 8007562:	9b04      	ldr	r3, [sp, #16]
 8007564:	f003 0301 	and.w	r3, r3, #1
 8007568:	9309      	str	r3, [sp, #36]	; 0x24
 800756a:	9b08      	ldr	r3, [sp, #32]
 800756c:	4621      	mov	r1, r4
 800756e:	3b01      	subs	r3, #1
 8007570:	4658      	mov	r0, fp
 8007572:	9304      	str	r3, [sp, #16]
 8007574:	f7ff fa66 	bl	8006a44 <quorem>
 8007578:	4603      	mov	r3, r0
 800757a:	4641      	mov	r1, r8
 800757c:	3330      	adds	r3, #48	; 0x30
 800757e:	9006      	str	r0, [sp, #24]
 8007580:	4658      	mov	r0, fp
 8007582:	930b      	str	r3, [sp, #44]	; 0x2c
 8007584:	f000 fb72 	bl	8007c6c <__mcmp>
 8007588:	4632      	mov	r2, r6
 800758a:	4681      	mov	r9, r0
 800758c:	4621      	mov	r1, r4
 800758e:	4628      	mov	r0, r5
 8007590:	f000 fb88 	bl	8007ca4 <__mdiff>
 8007594:	68c2      	ldr	r2, [r0, #12]
 8007596:	4607      	mov	r7, r0
 8007598:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800759a:	bb02      	cbnz	r2, 80075de <_dtoa_r+0xa7e>
 800759c:	4601      	mov	r1, r0
 800759e:	4658      	mov	r0, fp
 80075a0:	f000 fb64 	bl	8007c6c <__mcmp>
 80075a4:	4602      	mov	r2, r0
 80075a6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80075a8:	4639      	mov	r1, r7
 80075aa:	4628      	mov	r0, r5
 80075ac:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 80075b0:	f000 f91e 	bl	80077f0 <_Bfree>
 80075b4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80075b6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80075b8:	9f08      	ldr	r7, [sp, #32]
 80075ba:	ea43 0102 	orr.w	r1, r3, r2
 80075be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80075c0:	430b      	orrs	r3, r1
 80075c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80075c4:	d10d      	bne.n	80075e2 <_dtoa_r+0xa82>
 80075c6:	2b39      	cmp	r3, #57	; 0x39
 80075c8:	d029      	beq.n	800761e <_dtoa_r+0xabe>
 80075ca:	f1b9 0f00 	cmp.w	r9, #0
 80075ce:	dd01      	ble.n	80075d4 <_dtoa_r+0xa74>
 80075d0:	9b06      	ldr	r3, [sp, #24]
 80075d2:	3331      	adds	r3, #49	; 0x31
 80075d4:	9a04      	ldr	r2, [sp, #16]
 80075d6:	7013      	strb	r3, [r2, #0]
 80075d8:	e776      	b.n	80074c8 <_dtoa_r+0x968>
 80075da:	4630      	mov	r0, r6
 80075dc:	e7b9      	b.n	8007552 <_dtoa_r+0x9f2>
 80075de:	2201      	movs	r2, #1
 80075e0:	e7e2      	b.n	80075a8 <_dtoa_r+0xa48>
 80075e2:	f1b9 0f00 	cmp.w	r9, #0
 80075e6:	db06      	blt.n	80075f6 <_dtoa_r+0xa96>
 80075e8:	9922      	ldr	r1, [sp, #136]	; 0x88
 80075ea:	ea41 0909 	orr.w	r9, r1, r9
 80075ee:	9909      	ldr	r1, [sp, #36]	; 0x24
 80075f0:	ea59 0101 	orrs.w	r1, r9, r1
 80075f4:	d120      	bne.n	8007638 <_dtoa_r+0xad8>
 80075f6:	2a00      	cmp	r2, #0
 80075f8:	ddec      	ble.n	80075d4 <_dtoa_r+0xa74>
 80075fa:	4659      	mov	r1, fp
 80075fc:	2201      	movs	r2, #1
 80075fe:	4628      	mov	r0, r5
 8007600:	9308      	str	r3, [sp, #32]
 8007602:	f000 fac3 	bl	8007b8c <__lshift>
 8007606:	4621      	mov	r1, r4
 8007608:	4683      	mov	fp, r0
 800760a:	f000 fb2f 	bl	8007c6c <__mcmp>
 800760e:	2800      	cmp	r0, #0
 8007610:	9b08      	ldr	r3, [sp, #32]
 8007612:	dc02      	bgt.n	800761a <_dtoa_r+0xaba>
 8007614:	d1de      	bne.n	80075d4 <_dtoa_r+0xa74>
 8007616:	07da      	lsls	r2, r3, #31
 8007618:	d5dc      	bpl.n	80075d4 <_dtoa_r+0xa74>
 800761a:	2b39      	cmp	r3, #57	; 0x39
 800761c:	d1d8      	bne.n	80075d0 <_dtoa_r+0xa70>
 800761e:	2339      	movs	r3, #57	; 0x39
 8007620:	9a04      	ldr	r2, [sp, #16]
 8007622:	7013      	strb	r3, [r2, #0]
 8007624:	463b      	mov	r3, r7
 8007626:	461f      	mov	r7, r3
 8007628:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800762c:	3b01      	subs	r3, #1
 800762e:	2a39      	cmp	r2, #57	; 0x39
 8007630:	d050      	beq.n	80076d4 <_dtoa_r+0xb74>
 8007632:	3201      	adds	r2, #1
 8007634:	701a      	strb	r2, [r3, #0]
 8007636:	e747      	b.n	80074c8 <_dtoa_r+0x968>
 8007638:	2a00      	cmp	r2, #0
 800763a:	dd03      	ble.n	8007644 <_dtoa_r+0xae4>
 800763c:	2b39      	cmp	r3, #57	; 0x39
 800763e:	d0ee      	beq.n	800761e <_dtoa_r+0xabe>
 8007640:	3301      	adds	r3, #1
 8007642:	e7c7      	b.n	80075d4 <_dtoa_r+0xa74>
 8007644:	9a08      	ldr	r2, [sp, #32]
 8007646:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007648:	f802 3c01 	strb.w	r3, [r2, #-1]
 800764c:	428a      	cmp	r2, r1
 800764e:	d02a      	beq.n	80076a6 <_dtoa_r+0xb46>
 8007650:	4659      	mov	r1, fp
 8007652:	2300      	movs	r3, #0
 8007654:	220a      	movs	r2, #10
 8007656:	4628      	mov	r0, r5
 8007658:	f000 f8ec 	bl	8007834 <__multadd>
 800765c:	45b0      	cmp	r8, r6
 800765e:	4683      	mov	fp, r0
 8007660:	f04f 0300 	mov.w	r3, #0
 8007664:	f04f 020a 	mov.w	r2, #10
 8007668:	4641      	mov	r1, r8
 800766a:	4628      	mov	r0, r5
 800766c:	d107      	bne.n	800767e <_dtoa_r+0xb1e>
 800766e:	f000 f8e1 	bl	8007834 <__multadd>
 8007672:	4680      	mov	r8, r0
 8007674:	4606      	mov	r6, r0
 8007676:	9b08      	ldr	r3, [sp, #32]
 8007678:	3301      	adds	r3, #1
 800767a:	9308      	str	r3, [sp, #32]
 800767c:	e775      	b.n	800756a <_dtoa_r+0xa0a>
 800767e:	f000 f8d9 	bl	8007834 <__multadd>
 8007682:	4631      	mov	r1, r6
 8007684:	4680      	mov	r8, r0
 8007686:	2300      	movs	r3, #0
 8007688:	220a      	movs	r2, #10
 800768a:	4628      	mov	r0, r5
 800768c:	f000 f8d2 	bl	8007834 <__multadd>
 8007690:	4606      	mov	r6, r0
 8007692:	e7f0      	b.n	8007676 <_dtoa_r+0xb16>
 8007694:	f1b9 0f00 	cmp.w	r9, #0
 8007698:	bfcc      	ite	gt
 800769a:	464f      	movgt	r7, r9
 800769c:	2701      	movle	r7, #1
 800769e:	f04f 0800 	mov.w	r8, #0
 80076a2:	9a03      	ldr	r2, [sp, #12]
 80076a4:	4417      	add	r7, r2
 80076a6:	4659      	mov	r1, fp
 80076a8:	2201      	movs	r2, #1
 80076aa:	4628      	mov	r0, r5
 80076ac:	9308      	str	r3, [sp, #32]
 80076ae:	f000 fa6d 	bl	8007b8c <__lshift>
 80076b2:	4621      	mov	r1, r4
 80076b4:	4683      	mov	fp, r0
 80076b6:	f000 fad9 	bl	8007c6c <__mcmp>
 80076ba:	2800      	cmp	r0, #0
 80076bc:	dcb2      	bgt.n	8007624 <_dtoa_r+0xac4>
 80076be:	d102      	bne.n	80076c6 <_dtoa_r+0xb66>
 80076c0:	9b08      	ldr	r3, [sp, #32]
 80076c2:	07db      	lsls	r3, r3, #31
 80076c4:	d4ae      	bmi.n	8007624 <_dtoa_r+0xac4>
 80076c6:	463b      	mov	r3, r7
 80076c8:	461f      	mov	r7, r3
 80076ca:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80076ce:	2a30      	cmp	r2, #48	; 0x30
 80076d0:	d0fa      	beq.n	80076c8 <_dtoa_r+0xb68>
 80076d2:	e6f9      	b.n	80074c8 <_dtoa_r+0x968>
 80076d4:	9a03      	ldr	r2, [sp, #12]
 80076d6:	429a      	cmp	r2, r3
 80076d8:	d1a5      	bne.n	8007626 <_dtoa_r+0xac6>
 80076da:	2331      	movs	r3, #49	; 0x31
 80076dc:	f10a 0a01 	add.w	sl, sl, #1
 80076e0:	e779      	b.n	80075d6 <_dtoa_r+0xa76>
 80076e2:	4b14      	ldr	r3, [pc, #80]	; (8007734 <_dtoa_r+0xbd4>)
 80076e4:	f7ff baa8 	b.w	8006c38 <_dtoa_r+0xd8>
 80076e8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	f47f aa81 	bne.w	8006bf2 <_dtoa_r+0x92>
 80076f0:	4b11      	ldr	r3, [pc, #68]	; (8007738 <_dtoa_r+0xbd8>)
 80076f2:	f7ff baa1 	b.w	8006c38 <_dtoa_r+0xd8>
 80076f6:	f1b9 0f00 	cmp.w	r9, #0
 80076fa:	dc03      	bgt.n	8007704 <_dtoa_r+0xba4>
 80076fc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80076fe:	2b02      	cmp	r3, #2
 8007700:	f73f aecb 	bgt.w	800749a <_dtoa_r+0x93a>
 8007704:	9f03      	ldr	r7, [sp, #12]
 8007706:	4621      	mov	r1, r4
 8007708:	4658      	mov	r0, fp
 800770a:	f7ff f99b 	bl	8006a44 <quorem>
 800770e:	9a03      	ldr	r2, [sp, #12]
 8007710:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8007714:	f807 3b01 	strb.w	r3, [r7], #1
 8007718:	1aba      	subs	r2, r7, r2
 800771a:	4591      	cmp	r9, r2
 800771c:	ddba      	ble.n	8007694 <_dtoa_r+0xb34>
 800771e:	4659      	mov	r1, fp
 8007720:	2300      	movs	r3, #0
 8007722:	220a      	movs	r2, #10
 8007724:	4628      	mov	r0, r5
 8007726:	f000 f885 	bl	8007834 <__multadd>
 800772a:	4683      	mov	fp, r0
 800772c:	e7eb      	b.n	8007706 <_dtoa_r+0xba6>
 800772e:	bf00      	nop
 8007730:	0800952b 	.word	0x0800952b
 8007734:	08009488 	.word	0x08009488
 8007738:	080094ac 	.word	0x080094ac

0800773c <_localeconv_r>:
 800773c:	4800      	ldr	r0, [pc, #0]	; (8007740 <_localeconv_r+0x4>)
 800773e:	4770      	bx	lr
 8007740:	20000168 	.word	0x20000168

08007744 <malloc>:
 8007744:	4b02      	ldr	r3, [pc, #8]	; (8007750 <malloc+0xc>)
 8007746:	4601      	mov	r1, r0
 8007748:	6818      	ldr	r0, [r3, #0]
 800774a:	f000 bc0f 	b.w	8007f6c <_malloc_r>
 800774e:	bf00      	nop
 8007750:	20000014 	.word	0x20000014

08007754 <memchr>:
 8007754:	4603      	mov	r3, r0
 8007756:	b510      	push	{r4, lr}
 8007758:	b2c9      	uxtb	r1, r1
 800775a:	4402      	add	r2, r0
 800775c:	4293      	cmp	r3, r2
 800775e:	4618      	mov	r0, r3
 8007760:	d101      	bne.n	8007766 <memchr+0x12>
 8007762:	2000      	movs	r0, #0
 8007764:	e003      	b.n	800776e <memchr+0x1a>
 8007766:	7804      	ldrb	r4, [r0, #0]
 8007768:	3301      	adds	r3, #1
 800776a:	428c      	cmp	r4, r1
 800776c:	d1f6      	bne.n	800775c <memchr+0x8>
 800776e:	bd10      	pop	{r4, pc}

08007770 <_Balloc>:
 8007770:	b570      	push	{r4, r5, r6, lr}
 8007772:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007774:	4604      	mov	r4, r0
 8007776:	460d      	mov	r5, r1
 8007778:	b976      	cbnz	r6, 8007798 <_Balloc+0x28>
 800777a:	2010      	movs	r0, #16
 800777c:	f7ff ffe2 	bl	8007744 <malloc>
 8007780:	4602      	mov	r2, r0
 8007782:	6260      	str	r0, [r4, #36]	; 0x24
 8007784:	b920      	cbnz	r0, 8007790 <_Balloc+0x20>
 8007786:	2166      	movs	r1, #102	; 0x66
 8007788:	4b17      	ldr	r3, [pc, #92]	; (80077e8 <_Balloc+0x78>)
 800778a:	4818      	ldr	r0, [pc, #96]	; (80077ec <_Balloc+0x7c>)
 800778c:	f000 fdce 	bl	800832c <__assert_func>
 8007790:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007794:	6006      	str	r6, [r0, #0]
 8007796:	60c6      	str	r6, [r0, #12]
 8007798:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800779a:	68f3      	ldr	r3, [r6, #12]
 800779c:	b183      	cbz	r3, 80077c0 <_Balloc+0x50>
 800779e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80077a0:	68db      	ldr	r3, [r3, #12]
 80077a2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80077a6:	b9b8      	cbnz	r0, 80077d8 <_Balloc+0x68>
 80077a8:	2101      	movs	r1, #1
 80077aa:	fa01 f605 	lsl.w	r6, r1, r5
 80077ae:	1d72      	adds	r2, r6, #5
 80077b0:	4620      	mov	r0, r4
 80077b2:	0092      	lsls	r2, r2, #2
 80077b4:	f000 fb5e 	bl	8007e74 <_calloc_r>
 80077b8:	b160      	cbz	r0, 80077d4 <_Balloc+0x64>
 80077ba:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80077be:	e00e      	b.n	80077de <_Balloc+0x6e>
 80077c0:	2221      	movs	r2, #33	; 0x21
 80077c2:	2104      	movs	r1, #4
 80077c4:	4620      	mov	r0, r4
 80077c6:	f000 fb55 	bl	8007e74 <_calloc_r>
 80077ca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80077cc:	60f0      	str	r0, [r6, #12]
 80077ce:	68db      	ldr	r3, [r3, #12]
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d1e4      	bne.n	800779e <_Balloc+0x2e>
 80077d4:	2000      	movs	r0, #0
 80077d6:	bd70      	pop	{r4, r5, r6, pc}
 80077d8:	6802      	ldr	r2, [r0, #0]
 80077da:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80077de:	2300      	movs	r3, #0
 80077e0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80077e4:	e7f7      	b.n	80077d6 <_Balloc+0x66>
 80077e6:	bf00      	nop
 80077e8:	080094b9 	.word	0x080094b9
 80077ec:	0800953c 	.word	0x0800953c

080077f0 <_Bfree>:
 80077f0:	b570      	push	{r4, r5, r6, lr}
 80077f2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80077f4:	4605      	mov	r5, r0
 80077f6:	460c      	mov	r4, r1
 80077f8:	b976      	cbnz	r6, 8007818 <_Bfree+0x28>
 80077fa:	2010      	movs	r0, #16
 80077fc:	f7ff ffa2 	bl	8007744 <malloc>
 8007800:	4602      	mov	r2, r0
 8007802:	6268      	str	r0, [r5, #36]	; 0x24
 8007804:	b920      	cbnz	r0, 8007810 <_Bfree+0x20>
 8007806:	218a      	movs	r1, #138	; 0x8a
 8007808:	4b08      	ldr	r3, [pc, #32]	; (800782c <_Bfree+0x3c>)
 800780a:	4809      	ldr	r0, [pc, #36]	; (8007830 <_Bfree+0x40>)
 800780c:	f000 fd8e 	bl	800832c <__assert_func>
 8007810:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007814:	6006      	str	r6, [r0, #0]
 8007816:	60c6      	str	r6, [r0, #12]
 8007818:	b13c      	cbz	r4, 800782a <_Bfree+0x3a>
 800781a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800781c:	6862      	ldr	r2, [r4, #4]
 800781e:	68db      	ldr	r3, [r3, #12]
 8007820:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007824:	6021      	str	r1, [r4, #0]
 8007826:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800782a:	bd70      	pop	{r4, r5, r6, pc}
 800782c:	080094b9 	.word	0x080094b9
 8007830:	0800953c 	.word	0x0800953c

08007834 <__multadd>:
 8007834:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007838:	4607      	mov	r7, r0
 800783a:	460c      	mov	r4, r1
 800783c:	461e      	mov	r6, r3
 800783e:	2000      	movs	r0, #0
 8007840:	690d      	ldr	r5, [r1, #16]
 8007842:	f101 0c14 	add.w	ip, r1, #20
 8007846:	f8dc 3000 	ldr.w	r3, [ip]
 800784a:	3001      	adds	r0, #1
 800784c:	b299      	uxth	r1, r3
 800784e:	fb02 6101 	mla	r1, r2, r1, r6
 8007852:	0c1e      	lsrs	r6, r3, #16
 8007854:	0c0b      	lsrs	r3, r1, #16
 8007856:	fb02 3306 	mla	r3, r2, r6, r3
 800785a:	b289      	uxth	r1, r1
 800785c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007860:	4285      	cmp	r5, r0
 8007862:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007866:	f84c 1b04 	str.w	r1, [ip], #4
 800786a:	dcec      	bgt.n	8007846 <__multadd+0x12>
 800786c:	b30e      	cbz	r6, 80078b2 <__multadd+0x7e>
 800786e:	68a3      	ldr	r3, [r4, #8]
 8007870:	42ab      	cmp	r3, r5
 8007872:	dc19      	bgt.n	80078a8 <__multadd+0x74>
 8007874:	6861      	ldr	r1, [r4, #4]
 8007876:	4638      	mov	r0, r7
 8007878:	3101      	adds	r1, #1
 800787a:	f7ff ff79 	bl	8007770 <_Balloc>
 800787e:	4680      	mov	r8, r0
 8007880:	b928      	cbnz	r0, 800788e <__multadd+0x5a>
 8007882:	4602      	mov	r2, r0
 8007884:	21b5      	movs	r1, #181	; 0xb5
 8007886:	4b0c      	ldr	r3, [pc, #48]	; (80078b8 <__multadd+0x84>)
 8007888:	480c      	ldr	r0, [pc, #48]	; (80078bc <__multadd+0x88>)
 800788a:	f000 fd4f 	bl	800832c <__assert_func>
 800788e:	6922      	ldr	r2, [r4, #16]
 8007890:	f104 010c 	add.w	r1, r4, #12
 8007894:	3202      	adds	r2, #2
 8007896:	0092      	lsls	r2, r2, #2
 8007898:	300c      	adds	r0, #12
 800789a:	f7fe fc3d 	bl	8006118 <memcpy>
 800789e:	4621      	mov	r1, r4
 80078a0:	4638      	mov	r0, r7
 80078a2:	f7ff ffa5 	bl	80077f0 <_Bfree>
 80078a6:	4644      	mov	r4, r8
 80078a8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80078ac:	3501      	adds	r5, #1
 80078ae:	615e      	str	r6, [r3, #20]
 80078b0:	6125      	str	r5, [r4, #16]
 80078b2:	4620      	mov	r0, r4
 80078b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80078b8:	0800952b 	.word	0x0800952b
 80078bc:	0800953c 	.word	0x0800953c

080078c0 <__hi0bits>:
 80078c0:	0c02      	lsrs	r2, r0, #16
 80078c2:	0412      	lsls	r2, r2, #16
 80078c4:	4603      	mov	r3, r0
 80078c6:	b9ca      	cbnz	r2, 80078fc <__hi0bits+0x3c>
 80078c8:	0403      	lsls	r3, r0, #16
 80078ca:	2010      	movs	r0, #16
 80078cc:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80078d0:	bf04      	itt	eq
 80078d2:	021b      	lsleq	r3, r3, #8
 80078d4:	3008      	addeq	r0, #8
 80078d6:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80078da:	bf04      	itt	eq
 80078dc:	011b      	lsleq	r3, r3, #4
 80078de:	3004      	addeq	r0, #4
 80078e0:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80078e4:	bf04      	itt	eq
 80078e6:	009b      	lsleq	r3, r3, #2
 80078e8:	3002      	addeq	r0, #2
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	db05      	blt.n	80078fa <__hi0bits+0x3a>
 80078ee:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 80078f2:	f100 0001 	add.w	r0, r0, #1
 80078f6:	bf08      	it	eq
 80078f8:	2020      	moveq	r0, #32
 80078fa:	4770      	bx	lr
 80078fc:	2000      	movs	r0, #0
 80078fe:	e7e5      	b.n	80078cc <__hi0bits+0xc>

08007900 <__lo0bits>:
 8007900:	6803      	ldr	r3, [r0, #0]
 8007902:	4602      	mov	r2, r0
 8007904:	f013 0007 	ands.w	r0, r3, #7
 8007908:	d00b      	beq.n	8007922 <__lo0bits+0x22>
 800790a:	07d9      	lsls	r1, r3, #31
 800790c:	d421      	bmi.n	8007952 <__lo0bits+0x52>
 800790e:	0798      	lsls	r0, r3, #30
 8007910:	bf49      	itett	mi
 8007912:	085b      	lsrmi	r3, r3, #1
 8007914:	089b      	lsrpl	r3, r3, #2
 8007916:	2001      	movmi	r0, #1
 8007918:	6013      	strmi	r3, [r2, #0]
 800791a:	bf5c      	itt	pl
 800791c:	2002      	movpl	r0, #2
 800791e:	6013      	strpl	r3, [r2, #0]
 8007920:	4770      	bx	lr
 8007922:	b299      	uxth	r1, r3
 8007924:	b909      	cbnz	r1, 800792a <__lo0bits+0x2a>
 8007926:	2010      	movs	r0, #16
 8007928:	0c1b      	lsrs	r3, r3, #16
 800792a:	b2d9      	uxtb	r1, r3
 800792c:	b909      	cbnz	r1, 8007932 <__lo0bits+0x32>
 800792e:	3008      	adds	r0, #8
 8007930:	0a1b      	lsrs	r3, r3, #8
 8007932:	0719      	lsls	r1, r3, #28
 8007934:	bf04      	itt	eq
 8007936:	091b      	lsreq	r3, r3, #4
 8007938:	3004      	addeq	r0, #4
 800793a:	0799      	lsls	r1, r3, #30
 800793c:	bf04      	itt	eq
 800793e:	089b      	lsreq	r3, r3, #2
 8007940:	3002      	addeq	r0, #2
 8007942:	07d9      	lsls	r1, r3, #31
 8007944:	d403      	bmi.n	800794e <__lo0bits+0x4e>
 8007946:	085b      	lsrs	r3, r3, #1
 8007948:	f100 0001 	add.w	r0, r0, #1
 800794c:	d003      	beq.n	8007956 <__lo0bits+0x56>
 800794e:	6013      	str	r3, [r2, #0]
 8007950:	4770      	bx	lr
 8007952:	2000      	movs	r0, #0
 8007954:	4770      	bx	lr
 8007956:	2020      	movs	r0, #32
 8007958:	4770      	bx	lr
	...

0800795c <__i2b>:
 800795c:	b510      	push	{r4, lr}
 800795e:	460c      	mov	r4, r1
 8007960:	2101      	movs	r1, #1
 8007962:	f7ff ff05 	bl	8007770 <_Balloc>
 8007966:	4602      	mov	r2, r0
 8007968:	b928      	cbnz	r0, 8007976 <__i2b+0x1a>
 800796a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800796e:	4b04      	ldr	r3, [pc, #16]	; (8007980 <__i2b+0x24>)
 8007970:	4804      	ldr	r0, [pc, #16]	; (8007984 <__i2b+0x28>)
 8007972:	f000 fcdb 	bl	800832c <__assert_func>
 8007976:	2301      	movs	r3, #1
 8007978:	6144      	str	r4, [r0, #20]
 800797a:	6103      	str	r3, [r0, #16]
 800797c:	bd10      	pop	{r4, pc}
 800797e:	bf00      	nop
 8007980:	0800952b 	.word	0x0800952b
 8007984:	0800953c 	.word	0x0800953c

08007988 <__multiply>:
 8007988:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800798c:	4691      	mov	r9, r2
 800798e:	690a      	ldr	r2, [r1, #16]
 8007990:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007994:	460c      	mov	r4, r1
 8007996:	429a      	cmp	r2, r3
 8007998:	bfbe      	ittt	lt
 800799a:	460b      	movlt	r3, r1
 800799c:	464c      	movlt	r4, r9
 800799e:	4699      	movlt	r9, r3
 80079a0:	6927      	ldr	r7, [r4, #16]
 80079a2:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80079a6:	68a3      	ldr	r3, [r4, #8]
 80079a8:	6861      	ldr	r1, [r4, #4]
 80079aa:	eb07 060a 	add.w	r6, r7, sl
 80079ae:	42b3      	cmp	r3, r6
 80079b0:	b085      	sub	sp, #20
 80079b2:	bfb8      	it	lt
 80079b4:	3101      	addlt	r1, #1
 80079b6:	f7ff fedb 	bl	8007770 <_Balloc>
 80079ba:	b930      	cbnz	r0, 80079ca <__multiply+0x42>
 80079bc:	4602      	mov	r2, r0
 80079be:	f240 115d 	movw	r1, #349	; 0x15d
 80079c2:	4b43      	ldr	r3, [pc, #268]	; (8007ad0 <__multiply+0x148>)
 80079c4:	4843      	ldr	r0, [pc, #268]	; (8007ad4 <__multiply+0x14c>)
 80079c6:	f000 fcb1 	bl	800832c <__assert_func>
 80079ca:	f100 0514 	add.w	r5, r0, #20
 80079ce:	462b      	mov	r3, r5
 80079d0:	2200      	movs	r2, #0
 80079d2:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80079d6:	4543      	cmp	r3, r8
 80079d8:	d321      	bcc.n	8007a1e <__multiply+0x96>
 80079da:	f104 0314 	add.w	r3, r4, #20
 80079de:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80079e2:	f109 0314 	add.w	r3, r9, #20
 80079e6:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80079ea:	9202      	str	r2, [sp, #8]
 80079ec:	1b3a      	subs	r2, r7, r4
 80079ee:	3a15      	subs	r2, #21
 80079f0:	f022 0203 	bic.w	r2, r2, #3
 80079f4:	3204      	adds	r2, #4
 80079f6:	f104 0115 	add.w	r1, r4, #21
 80079fa:	428f      	cmp	r7, r1
 80079fc:	bf38      	it	cc
 80079fe:	2204      	movcc	r2, #4
 8007a00:	9201      	str	r2, [sp, #4]
 8007a02:	9a02      	ldr	r2, [sp, #8]
 8007a04:	9303      	str	r3, [sp, #12]
 8007a06:	429a      	cmp	r2, r3
 8007a08:	d80c      	bhi.n	8007a24 <__multiply+0x9c>
 8007a0a:	2e00      	cmp	r6, #0
 8007a0c:	dd03      	ble.n	8007a16 <__multiply+0x8e>
 8007a0e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d059      	beq.n	8007aca <__multiply+0x142>
 8007a16:	6106      	str	r6, [r0, #16]
 8007a18:	b005      	add	sp, #20
 8007a1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a1e:	f843 2b04 	str.w	r2, [r3], #4
 8007a22:	e7d8      	b.n	80079d6 <__multiply+0x4e>
 8007a24:	f8b3 a000 	ldrh.w	sl, [r3]
 8007a28:	f1ba 0f00 	cmp.w	sl, #0
 8007a2c:	d023      	beq.n	8007a76 <__multiply+0xee>
 8007a2e:	46a9      	mov	r9, r5
 8007a30:	f04f 0c00 	mov.w	ip, #0
 8007a34:	f104 0e14 	add.w	lr, r4, #20
 8007a38:	f85e 2b04 	ldr.w	r2, [lr], #4
 8007a3c:	f8d9 1000 	ldr.w	r1, [r9]
 8007a40:	fa1f fb82 	uxth.w	fp, r2
 8007a44:	b289      	uxth	r1, r1
 8007a46:	fb0a 110b 	mla	r1, sl, fp, r1
 8007a4a:	4461      	add	r1, ip
 8007a4c:	f8d9 c000 	ldr.w	ip, [r9]
 8007a50:	0c12      	lsrs	r2, r2, #16
 8007a52:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8007a56:	fb0a c202 	mla	r2, sl, r2, ip
 8007a5a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007a5e:	b289      	uxth	r1, r1
 8007a60:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007a64:	4577      	cmp	r7, lr
 8007a66:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007a6a:	f849 1b04 	str.w	r1, [r9], #4
 8007a6e:	d8e3      	bhi.n	8007a38 <__multiply+0xb0>
 8007a70:	9a01      	ldr	r2, [sp, #4]
 8007a72:	f845 c002 	str.w	ip, [r5, r2]
 8007a76:	9a03      	ldr	r2, [sp, #12]
 8007a78:	3304      	adds	r3, #4
 8007a7a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007a7e:	f1b9 0f00 	cmp.w	r9, #0
 8007a82:	d020      	beq.n	8007ac6 <__multiply+0x13e>
 8007a84:	46ae      	mov	lr, r5
 8007a86:	f04f 0a00 	mov.w	sl, #0
 8007a8a:	6829      	ldr	r1, [r5, #0]
 8007a8c:	f104 0c14 	add.w	ip, r4, #20
 8007a90:	f8bc b000 	ldrh.w	fp, [ip]
 8007a94:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007a98:	b289      	uxth	r1, r1
 8007a9a:	fb09 220b 	mla	r2, r9, fp, r2
 8007a9e:	4492      	add	sl, r2
 8007aa0:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8007aa4:	f84e 1b04 	str.w	r1, [lr], #4
 8007aa8:	f85c 2b04 	ldr.w	r2, [ip], #4
 8007aac:	f8be 1000 	ldrh.w	r1, [lr]
 8007ab0:	0c12      	lsrs	r2, r2, #16
 8007ab2:	fb09 1102 	mla	r1, r9, r2, r1
 8007ab6:	4567      	cmp	r7, ip
 8007ab8:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8007abc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007ac0:	d8e6      	bhi.n	8007a90 <__multiply+0x108>
 8007ac2:	9a01      	ldr	r2, [sp, #4]
 8007ac4:	50a9      	str	r1, [r5, r2]
 8007ac6:	3504      	adds	r5, #4
 8007ac8:	e79b      	b.n	8007a02 <__multiply+0x7a>
 8007aca:	3e01      	subs	r6, #1
 8007acc:	e79d      	b.n	8007a0a <__multiply+0x82>
 8007ace:	bf00      	nop
 8007ad0:	0800952b 	.word	0x0800952b
 8007ad4:	0800953c 	.word	0x0800953c

08007ad8 <__pow5mult>:
 8007ad8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007adc:	4615      	mov	r5, r2
 8007ade:	f012 0203 	ands.w	r2, r2, #3
 8007ae2:	4606      	mov	r6, r0
 8007ae4:	460f      	mov	r7, r1
 8007ae6:	d007      	beq.n	8007af8 <__pow5mult+0x20>
 8007ae8:	4c25      	ldr	r4, [pc, #148]	; (8007b80 <__pow5mult+0xa8>)
 8007aea:	3a01      	subs	r2, #1
 8007aec:	2300      	movs	r3, #0
 8007aee:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007af2:	f7ff fe9f 	bl	8007834 <__multadd>
 8007af6:	4607      	mov	r7, r0
 8007af8:	10ad      	asrs	r5, r5, #2
 8007afa:	d03d      	beq.n	8007b78 <__pow5mult+0xa0>
 8007afc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007afe:	b97c      	cbnz	r4, 8007b20 <__pow5mult+0x48>
 8007b00:	2010      	movs	r0, #16
 8007b02:	f7ff fe1f 	bl	8007744 <malloc>
 8007b06:	4602      	mov	r2, r0
 8007b08:	6270      	str	r0, [r6, #36]	; 0x24
 8007b0a:	b928      	cbnz	r0, 8007b18 <__pow5mult+0x40>
 8007b0c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8007b10:	4b1c      	ldr	r3, [pc, #112]	; (8007b84 <__pow5mult+0xac>)
 8007b12:	481d      	ldr	r0, [pc, #116]	; (8007b88 <__pow5mult+0xb0>)
 8007b14:	f000 fc0a 	bl	800832c <__assert_func>
 8007b18:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007b1c:	6004      	str	r4, [r0, #0]
 8007b1e:	60c4      	str	r4, [r0, #12]
 8007b20:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007b24:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007b28:	b94c      	cbnz	r4, 8007b3e <__pow5mult+0x66>
 8007b2a:	f240 2171 	movw	r1, #625	; 0x271
 8007b2e:	4630      	mov	r0, r6
 8007b30:	f7ff ff14 	bl	800795c <__i2b>
 8007b34:	2300      	movs	r3, #0
 8007b36:	4604      	mov	r4, r0
 8007b38:	f8c8 0008 	str.w	r0, [r8, #8]
 8007b3c:	6003      	str	r3, [r0, #0]
 8007b3e:	f04f 0900 	mov.w	r9, #0
 8007b42:	07eb      	lsls	r3, r5, #31
 8007b44:	d50a      	bpl.n	8007b5c <__pow5mult+0x84>
 8007b46:	4639      	mov	r1, r7
 8007b48:	4622      	mov	r2, r4
 8007b4a:	4630      	mov	r0, r6
 8007b4c:	f7ff ff1c 	bl	8007988 <__multiply>
 8007b50:	4680      	mov	r8, r0
 8007b52:	4639      	mov	r1, r7
 8007b54:	4630      	mov	r0, r6
 8007b56:	f7ff fe4b 	bl	80077f0 <_Bfree>
 8007b5a:	4647      	mov	r7, r8
 8007b5c:	106d      	asrs	r5, r5, #1
 8007b5e:	d00b      	beq.n	8007b78 <__pow5mult+0xa0>
 8007b60:	6820      	ldr	r0, [r4, #0]
 8007b62:	b938      	cbnz	r0, 8007b74 <__pow5mult+0x9c>
 8007b64:	4622      	mov	r2, r4
 8007b66:	4621      	mov	r1, r4
 8007b68:	4630      	mov	r0, r6
 8007b6a:	f7ff ff0d 	bl	8007988 <__multiply>
 8007b6e:	6020      	str	r0, [r4, #0]
 8007b70:	f8c0 9000 	str.w	r9, [r0]
 8007b74:	4604      	mov	r4, r0
 8007b76:	e7e4      	b.n	8007b42 <__pow5mult+0x6a>
 8007b78:	4638      	mov	r0, r7
 8007b7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007b7e:	bf00      	nop
 8007b80:	08009688 	.word	0x08009688
 8007b84:	080094b9 	.word	0x080094b9
 8007b88:	0800953c 	.word	0x0800953c

08007b8c <__lshift>:
 8007b8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007b90:	460c      	mov	r4, r1
 8007b92:	4607      	mov	r7, r0
 8007b94:	4691      	mov	r9, r2
 8007b96:	6923      	ldr	r3, [r4, #16]
 8007b98:	6849      	ldr	r1, [r1, #4]
 8007b9a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007b9e:	68a3      	ldr	r3, [r4, #8]
 8007ba0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007ba4:	f108 0601 	add.w	r6, r8, #1
 8007ba8:	42b3      	cmp	r3, r6
 8007baa:	db0b      	blt.n	8007bc4 <__lshift+0x38>
 8007bac:	4638      	mov	r0, r7
 8007bae:	f7ff fddf 	bl	8007770 <_Balloc>
 8007bb2:	4605      	mov	r5, r0
 8007bb4:	b948      	cbnz	r0, 8007bca <__lshift+0x3e>
 8007bb6:	4602      	mov	r2, r0
 8007bb8:	f240 11d9 	movw	r1, #473	; 0x1d9
 8007bbc:	4b29      	ldr	r3, [pc, #164]	; (8007c64 <__lshift+0xd8>)
 8007bbe:	482a      	ldr	r0, [pc, #168]	; (8007c68 <__lshift+0xdc>)
 8007bc0:	f000 fbb4 	bl	800832c <__assert_func>
 8007bc4:	3101      	adds	r1, #1
 8007bc6:	005b      	lsls	r3, r3, #1
 8007bc8:	e7ee      	b.n	8007ba8 <__lshift+0x1c>
 8007bca:	2300      	movs	r3, #0
 8007bcc:	f100 0114 	add.w	r1, r0, #20
 8007bd0:	f100 0210 	add.w	r2, r0, #16
 8007bd4:	4618      	mov	r0, r3
 8007bd6:	4553      	cmp	r3, sl
 8007bd8:	db37      	blt.n	8007c4a <__lshift+0xbe>
 8007bda:	6920      	ldr	r0, [r4, #16]
 8007bdc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007be0:	f104 0314 	add.w	r3, r4, #20
 8007be4:	f019 091f 	ands.w	r9, r9, #31
 8007be8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007bec:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8007bf0:	d02f      	beq.n	8007c52 <__lshift+0xc6>
 8007bf2:	468a      	mov	sl, r1
 8007bf4:	f04f 0c00 	mov.w	ip, #0
 8007bf8:	f1c9 0e20 	rsb	lr, r9, #32
 8007bfc:	681a      	ldr	r2, [r3, #0]
 8007bfe:	fa02 f209 	lsl.w	r2, r2, r9
 8007c02:	ea42 020c 	orr.w	r2, r2, ip
 8007c06:	f84a 2b04 	str.w	r2, [sl], #4
 8007c0a:	f853 2b04 	ldr.w	r2, [r3], #4
 8007c0e:	4298      	cmp	r0, r3
 8007c10:	fa22 fc0e 	lsr.w	ip, r2, lr
 8007c14:	d8f2      	bhi.n	8007bfc <__lshift+0x70>
 8007c16:	1b03      	subs	r3, r0, r4
 8007c18:	3b15      	subs	r3, #21
 8007c1a:	f023 0303 	bic.w	r3, r3, #3
 8007c1e:	3304      	adds	r3, #4
 8007c20:	f104 0215 	add.w	r2, r4, #21
 8007c24:	4290      	cmp	r0, r2
 8007c26:	bf38      	it	cc
 8007c28:	2304      	movcc	r3, #4
 8007c2a:	f841 c003 	str.w	ip, [r1, r3]
 8007c2e:	f1bc 0f00 	cmp.w	ip, #0
 8007c32:	d001      	beq.n	8007c38 <__lshift+0xac>
 8007c34:	f108 0602 	add.w	r6, r8, #2
 8007c38:	3e01      	subs	r6, #1
 8007c3a:	4638      	mov	r0, r7
 8007c3c:	4621      	mov	r1, r4
 8007c3e:	612e      	str	r6, [r5, #16]
 8007c40:	f7ff fdd6 	bl	80077f0 <_Bfree>
 8007c44:	4628      	mov	r0, r5
 8007c46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c4a:	f842 0f04 	str.w	r0, [r2, #4]!
 8007c4e:	3301      	adds	r3, #1
 8007c50:	e7c1      	b.n	8007bd6 <__lshift+0x4a>
 8007c52:	3904      	subs	r1, #4
 8007c54:	f853 2b04 	ldr.w	r2, [r3], #4
 8007c58:	4298      	cmp	r0, r3
 8007c5a:	f841 2f04 	str.w	r2, [r1, #4]!
 8007c5e:	d8f9      	bhi.n	8007c54 <__lshift+0xc8>
 8007c60:	e7ea      	b.n	8007c38 <__lshift+0xac>
 8007c62:	bf00      	nop
 8007c64:	0800952b 	.word	0x0800952b
 8007c68:	0800953c 	.word	0x0800953c

08007c6c <__mcmp>:
 8007c6c:	4603      	mov	r3, r0
 8007c6e:	690a      	ldr	r2, [r1, #16]
 8007c70:	6900      	ldr	r0, [r0, #16]
 8007c72:	b530      	push	{r4, r5, lr}
 8007c74:	1a80      	subs	r0, r0, r2
 8007c76:	d10d      	bne.n	8007c94 <__mcmp+0x28>
 8007c78:	3314      	adds	r3, #20
 8007c7a:	3114      	adds	r1, #20
 8007c7c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007c80:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007c84:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007c88:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007c8c:	4295      	cmp	r5, r2
 8007c8e:	d002      	beq.n	8007c96 <__mcmp+0x2a>
 8007c90:	d304      	bcc.n	8007c9c <__mcmp+0x30>
 8007c92:	2001      	movs	r0, #1
 8007c94:	bd30      	pop	{r4, r5, pc}
 8007c96:	42a3      	cmp	r3, r4
 8007c98:	d3f4      	bcc.n	8007c84 <__mcmp+0x18>
 8007c9a:	e7fb      	b.n	8007c94 <__mcmp+0x28>
 8007c9c:	f04f 30ff 	mov.w	r0, #4294967295
 8007ca0:	e7f8      	b.n	8007c94 <__mcmp+0x28>
	...

08007ca4 <__mdiff>:
 8007ca4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ca8:	460d      	mov	r5, r1
 8007caa:	4607      	mov	r7, r0
 8007cac:	4611      	mov	r1, r2
 8007cae:	4628      	mov	r0, r5
 8007cb0:	4614      	mov	r4, r2
 8007cb2:	f7ff ffdb 	bl	8007c6c <__mcmp>
 8007cb6:	1e06      	subs	r6, r0, #0
 8007cb8:	d111      	bne.n	8007cde <__mdiff+0x3a>
 8007cba:	4631      	mov	r1, r6
 8007cbc:	4638      	mov	r0, r7
 8007cbe:	f7ff fd57 	bl	8007770 <_Balloc>
 8007cc2:	4602      	mov	r2, r0
 8007cc4:	b928      	cbnz	r0, 8007cd2 <__mdiff+0x2e>
 8007cc6:	f240 2132 	movw	r1, #562	; 0x232
 8007cca:	4b3a      	ldr	r3, [pc, #232]	; (8007db4 <__mdiff+0x110>)
 8007ccc:	483a      	ldr	r0, [pc, #232]	; (8007db8 <__mdiff+0x114>)
 8007cce:	f000 fb2d 	bl	800832c <__assert_func>
 8007cd2:	2301      	movs	r3, #1
 8007cd4:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8007cd8:	4610      	mov	r0, r2
 8007cda:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007cde:	bfa4      	itt	ge
 8007ce0:	4623      	movge	r3, r4
 8007ce2:	462c      	movge	r4, r5
 8007ce4:	4638      	mov	r0, r7
 8007ce6:	6861      	ldr	r1, [r4, #4]
 8007ce8:	bfa6      	itte	ge
 8007cea:	461d      	movge	r5, r3
 8007cec:	2600      	movge	r6, #0
 8007cee:	2601      	movlt	r6, #1
 8007cf0:	f7ff fd3e 	bl	8007770 <_Balloc>
 8007cf4:	4602      	mov	r2, r0
 8007cf6:	b918      	cbnz	r0, 8007d00 <__mdiff+0x5c>
 8007cf8:	f44f 7110 	mov.w	r1, #576	; 0x240
 8007cfc:	4b2d      	ldr	r3, [pc, #180]	; (8007db4 <__mdiff+0x110>)
 8007cfe:	e7e5      	b.n	8007ccc <__mdiff+0x28>
 8007d00:	f102 0814 	add.w	r8, r2, #20
 8007d04:	46c2      	mov	sl, r8
 8007d06:	f04f 0c00 	mov.w	ip, #0
 8007d0a:	6927      	ldr	r7, [r4, #16]
 8007d0c:	60c6      	str	r6, [r0, #12]
 8007d0e:	692e      	ldr	r6, [r5, #16]
 8007d10:	f104 0014 	add.w	r0, r4, #20
 8007d14:	f105 0914 	add.w	r9, r5, #20
 8007d18:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8007d1c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007d20:	3410      	adds	r4, #16
 8007d22:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8007d26:	f859 3b04 	ldr.w	r3, [r9], #4
 8007d2a:	fa1f f18b 	uxth.w	r1, fp
 8007d2e:	448c      	add	ip, r1
 8007d30:	b299      	uxth	r1, r3
 8007d32:	0c1b      	lsrs	r3, r3, #16
 8007d34:	ebac 0101 	sub.w	r1, ip, r1
 8007d38:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007d3c:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8007d40:	b289      	uxth	r1, r1
 8007d42:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8007d46:	454e      	cmp	r6, r9
 8007d48:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8007d4c:	f84a 3b04 	str.w	r3, [sl], #4
 8007d50:	d8e7      	bhi.n	8007d22 <__mdiff+0x7e>
 8007d52:	1b73      	subs	r3, r6, r5
 8007d54:	3b15      	subs	r3, #21
 8007d56:	f023 0303 	bic.w	r3, r3, #3
 8007d5a:	3515      	adds	r5, #21
 8007d5c:	3304      	adds	r3, #4
 8007d5e:	42ae      	cmp	r6, r5
 8007d60:	bf38      	it	cc
 8007d62:	2304      	movcc	r3, #4
 8007d64:	4418      	add	r0, r3
 8007d66:	4443      	add	r3, r8
 8007d68:	461e      	mov	r6, r3
 8007d6a:	4605      	mov	r5, r0
 8007d6c:	4575      	cmp	r5, lr
 8007d6e:	d30e      	bcc.n	8007d8e <__mdiff+0xea>
 8007d70:	f10e 0103 	add.w	r1, lr, #3
 8007d74:	1a09      	subs	r1, r1, r0
 8007d76:	f021 0103 	bic.w	r1, r1, #3
 8007d7a:	3803      	subs	r0, #3
 8007d7c:	4586      	cmp	lr, r0
 8007d7e:	bf38      	it	cc
 8007d80:	2100      	movcc	r1, #0
 8007d82:	4419      	add	r1, r3
 8007d84:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8007d88:	b18b      	cbz	r3, 8007dae <__mdiff+0x10a>
 8007d8a:	6117      	str	r7, [r2, #16]
 8007d8c:	e7a4      	b.n	8007cd8 <__mdiff+0x34>
 8007d8e:	f855 8b04 	ldr.w	r8, [r5], #4
 8007d92:	fa1f f188 	uxth.w	r1, r8
 8007d96:	4461      	add	r1, ip
 8007d98:	140c      	asrs	r4, r1, #16
 8007d9a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8007d9e:	b289      	uxth	r1, r1
 8007da0:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8007da4:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8007da8:	f846 1b04 	str.w	r1, [r6], #4
 8007dac:	e7de      	b.n	8007d6c <__mdiff+0xc8>
 8007dae:	3f01      	subs	r7, #1
 8007db0:	e7e8      	b.n	8007d84 <__mdiff+0xe0>
 8007db2:	bf00      	nop
 8007db4:	0800952b 	.word	0x0800952b
 8007db8:	0800953c 	.word	0x0800953c

08007dbc <__d2b>:
 8007dbc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8007dc0:	2101      	movs	r1, #1
 8007dc2:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8007dc6:	4690      	mov	r8, r2
 8007dc8:	461d      	mov	r5, r3
 8007dca:	f7ff fcd1 	bl	8007770 <_Balloc>
 8007dce:	4604      	mov	r4, r0
 8007dd0:	b930      	cbnz	r0, 8007de0 <__d2b+0x24>
 8007dd2:	4602      	mov	r2, r0
 8007dd4:	f240 310a 	movw	r1, #778	; 0x30a
 8007dd8:	4b24      	ldr	r3, [pc, #144]	; (8007e6c <__d2b+0xb0>)
 8007dda:	4825      	ldr	r0, [pc, #148]	; (8007e70 <__d2b+0xb4>)
 8007ddc:	f000 faa6 	bl	800832c <__assert_func>
 8007de0:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8007de4:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8007de8:	bb2d      	cbnz	r5, 8007e36 <__d2b+0x7a>
 8007dea:	9301      	str	r3, [sp, #4]
 8007dec:	f1b8 0300 	subs.w	r3, r8, #0
 8007df0:	d026      	beq.n	8007e40 <__d2b+0x84>
 8007df2:	4668      	mov	r0, sp
 8007df4:	9300      	str	r3, [sp, #0]
 8007df6:	f7ff fd83 	bl	8007900 <__lo0bits>
 8007dfa:	9900      	ldr	r1, [sp, #0]
 8007dfc:	b1f0      	cbz	r0, 8007e3c <__d2b+0x80>
 8007dfe:	9a01      	ldr	r2, [sp, #4]
 8007e00:	f1c0 0320 	rsb	r3, r0, #32
 8007e04:	fa02 f303 	lsl.w	r3, r2, r3
 8007e08:	430b      	orrs	r3, r1
 8007e0a:	40c2      	lsrs	r2, r0
 8007e0c:	6163      	str	r3, [r4, #20]
 8007e0e:	9201      	str	r2, [sp, #4]
 8007e10:	9b01      	ldr	r3, [sp, #4]
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	bf14      	ite	ne
 8007e16:	2102      	movne	r1, #2
 8007e18:	2101      	moveq	r1, #1
 8007e1a:	61a3      	str	r3, [r4, #24]
 8007e1c:	6121      	str	r1, [r4, #16]
 8007e1e:	b1c5      	cbz	r5, 8007e52 <__d2b+0x96>
 8007e20:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007e24:	4405      	add	r5, r0
 8007e26:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007e2a:	603d      	str	r5, [r7, #0]
 8007e2c:	6030      	str	r0, [r6, #0]
 8007e2e:	4620      	mov	r0, r4
 8007e30:	b002      	add	sp, #8
 8007e32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007e36:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007e3a:	e7d6      	b.n	8007dea <__d2b+0x2e>
 8007e3c:	6161      	str	r1, [r4, #20]
 8007e3e:	e7e7      	b.n	8007e10 <__d2b+0x54>
 8007e40:	a801      	add	r0, sp, #4
 8007e42:	f7ff fd5d 	bl	8007900 <__lo0bits>
 8007e46:	2101      	movs	r1, #1
 8007e48:	9b01      	ldr	r3, [sp, #4]
 8007e4a:	6121      	str	r1, [r4, #16]
 8007e4c:	6163      	str	r3, [r4, #20]
 8007e4e:	3020      	adds	r0, #32
 8007e50:	e7e5      	b.n	8007e1e <__d2b+0x62>
 8007e52:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8007e56:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007e5a:	6038      	str	r0, [r7, #0]
 8007e5c:	6918      	ldr	r0, [r3, #16]
 8007e5e:	f7ff fd2f 	bl	80078c0 <__hi0bits>
 8007e62:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8007e66:	6031      	str	r1, [r6, #0]
 8007e68:	e7e1      	b.n	8007e2e <__d2b+0x72>
 8007e6a:	bf00      	nop
 8007e6c:	0800952b 	.word	0x0800952b
 8007e70:	0800953c 	.word	0x0800953c

08007e74 <_calloc_r>:
 8007e74:	b570      	push	{r4, r5, r6, lr}
 8007e76:	fba1 5402 	umull	r5, r4, r1, r2
 8007e7a:	b934      	cbnz	r4, 8007e8a <_calloc_r+0x16>
 8007e7c:	4629      	mov	r1, r5
 8007e7e:	f000 f875 	bl	8007f6c <_malloc_r>
 8007e82:	4606      	mov	r6, r0
 8007e84:	b928      	cbnz	r0, 8007e92 <_calloc_r+0x1e>
 8007e86:	4630      	mov	r0, r6
 8007e88:	bd70      	pop	{r4, r5, r6, pc}
 8007e8a:	220c      	movs	r2, #12
 8007e8c:	2600      	movs	r6, #0
 8007e8e:	6002      	str	r2, [r0, #0]
 8007e90:	e7f9      	b.n	8007e86 <_calloc_r+0x12>
 8007e92:	462a      	mov	r2, r5
 8007e94:	4621      	mov	r1, r4
 8007e96:	f7fe f94d 	bl	8006134 <memset>
 8007e9a:	e7f4      	b.n	8007e86 <_calloc_r+0x12>

08007e9c <_free_r>:
 8007e9c:	b538      	push	{r3, r4, r5, lr}
 8007e9e:	4605      	mov	r5, r0
 8007ea0:	2900      	cmp	r1, #0
 8007ea2:	d040      	beq.n	8007f26 <_free_r+0x8a>
 8007ea4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007ea8:	1f0c      	subs	r4, r1, #4
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	bfb8      	it	lt
 8007eae:	18e4      	addlt	r4, r4, r3
 8007eb0:	f000 fa98 	bl	80083e4 <__malloc_lock>
 8007eb4:	4a1c      	ldr	r2, [pc, #112]	; (8007f28 <_free_r+0x8c>)
 8007eb6:	6813      	ldr	r3, [r2, #0]
 8007eb8:	b933      	cbnz	r3, 8007ec8 <_free_r+0x2c>
 8007eba:	6063      	str	r3, [r4, #4]
 8007ebc:	6014      	str	r4, [r2, #0]
 8007ebe:	4628      	mov	r0, r5
 8007ec0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007ec4:	f000 ba94 	b.w	80083f0 <__malloc_unlock>
 8007ec8:	42a3      	cmp	r3, r4
 8007eca:	d908      	bls.n	8007ede <_free_r+0x42>
 8007ecc:	6820      	ldr	r0, [r4, #0]
 8007ece:	1821      	adds	r1, r4, r0
 8007ed0:	428b      	cmp	r3, r1
 8007ed2:	bf01      	itttt	eq
 8007ed4:	6819      	ldreq	r1, [r3, #0]
 8007ed6:	685b      	ldreq	r3, [r3, #4]
 8007ed8:	1809      	addeq	r1, r1, r0
 8007eda:	6021      	streq	r1, [r4, #0]
 8007edc:	e7ed      	b.n	8007eba <_free_r+0x1e>
 8007ede:	461a      	mov	r2, r3
 8007ee0:	685b      	ldr	r3, [r3, #4]
 8007ee2:	b10b      	cbz	r3, 8007ee8 <_free_r+0x4c>
 8007ee4:	42a3      	cmp	r3, r4
 8007ee6:	d9fa      	bls.n	8007ede <_free_r+0x42>
 8007ee8:	6811      	ldr	r1, [r2, #0]
 8007eea:	1850      	adds	r0, r2, r1
 8007eec:	42a0      	cmp	r0, r4
 8007eee:	d10b      	bne.n	8007f08 <_free_r+0x6c>
 8007ef0:	6820      	ldr	r0, [r4, #0]
 8007ef2:	4401      	add	r1, r0
 8007ef4:	1850      	adds	r0, r2, r1
 8007ef6:	4283      	cmp	r3, r0
 8007ef8:	6011      	str	r1, [r2, #0]
 8007efa:	d1e0      	bne.n	8007ebe <_free_r+0x22>
 8007efc:	6818      	ldr	r0, [r3, #0]
 8007efe:	685b      	ldr	r3, [r3, #4]
 8007f00:	4401      	add	r1, r0
 8007f02:	6011      	str	r1, [r2, #0]
 8007f04:	6053      	str	r3, [r2, #4]
 8007f06:	e7da      	b.n	8007ebe <_free_r+0x22>
 8007f08:	d902      	bls.n	8007f10 <_free_r+0x74>
 8007f0a:	230c      	movs	r3, #12
 8007f0c:	602b      	str	r3, [r5, #0]
 8007f0e:	e7d6      	b.n	8007ebe <_free_r+0x22>
 8007f10:	6820      	ldr	r0, [r4, #0]
 8007f12:	1821      	adds	r1, r4, r0
 8007f14:	428b      	cmp	r3, r1
 8007f16:	bf01      	itttt	eq
 8007f18:	6819      	ldreq	r1, [r3, #0]
 8007f1a:	685b      	ldreq	r3, [r3, #4]
 8007f1c:	1809      	addeq	r1, r1, r0
 8007f1e:	6021      	streq	r1, [r4, #0]
 8007f20:	6063      	str	r3, [r4, #4]
 8007f22:	6054      	str	r4, [r2, #4]
 8007f24:	e7cb      	b.n	8007ebe <_free_r+0x22>
 8007f26:	bd38      	pop	{r3, r4, r5, pc}
 8007f28:	20001348 	.word	0x20001348

08007f2c <sbrk_aligned>:
 8007f2c:	b570      	push	{r4, r5, r6, lr}
 8007f2e:	4e0e      	ldr	r6, [pc, #56]	; (8007f68 <sbrk_aligned+0x3c>)
 8007f30:	460c      	mov	r4, r1
 8007f32:	6831      	ldr	r1, [r6, #0]
 8007f34:	4605      	mov	r5, r0
 8007f36:	b911      	cbnz	r1, 8007f3e <sbrk_aligned+0x12>
 8007f38:	f000 f9e8 	bl	800830c <_sbrk_r>
 8007f3c:	6030      	str	r0, [r6, #0]
 8007f3e:	4621      	mov	r1, r4
 8007f40:	4628      	mov	r0, r5
 8007f42:	f000 f9e3 	bl	800830c <_sbrk_r>
 8007f46:	1c43      	adds	r3, r0, #1
 8007f48:	d00a      	beq.n	8007f60 <sbrk_aligned+0x34>
 8007f4a:	1cc4      	adds	r4, r0, #3
 8007f4c:	f024 0403 	bic.w	r4, r4, #3
 8007f50:	42a0      	cmp	r0, r4
 8007f52:	d007      	beq.n	8007f64 <sbrk_aligned+0x38>
 8007f54:	1a21      	subs	r1, r4, r0
 8007f56:	4628      	mov	r0, r5
 8007f58:	f000 f9d8 	bl	800830c <_sbrk_r>
 8007f5c:	3001      	adds	r0, #1
 8007f5e:	d101      	bne.n	8007f64 <sbrk_aligned+0x38>
 8007f60:	f04f 34ff 	mov.w	r4, #4294967295
 8007f64:	4620      	mov	r0, r4
 8007f66:	bd70      	pop	{r4, r5, r6, pc}
 8007f68:	2000134c 	.word	0x2000134c

08007f6c <_malloc_r>:
 8007f6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f70:	1ccd      	adds	r5, r1, #3
 8007f72:	f025 0503 	bic.w	r5, r5, #3
 8007f76:	3508      	adds	r5, #8
 8007f78:	2d0c      	cmp	r5, #12
 8007f7a:	bf38      	it	cc
 8007f7c:	250c      	movcc	r5, #12
 8007f7e:	2d00      	cmp	r5, #0
 8007f80:	4607      	mov	r7, r0
 8007f82:	db01      	blt.n	8007f88 <_malloc_r+0x1c>
 8007f84:	42a9      	cmp	r1, r5
 8007f86:	d905      	bls.n	8007f94 <_malloc_r+0x28>
 8007f88:	230c      	movs	r3, #12
 8007f8a:	2600      	movs	r6, #0
 8007f8c:	603b      	str	r3, [r7, #0]
 8007f8e:	4630      	mov	r0, r6
 8007f90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007f94:	4e2e      	ldr	r6, [pc, #184]	; (8008050 <_malloc_r+0xe4>)
 8007f96:	f000 fa25 	bl	80083e4 <__malloc_lock>
 8007f9a:	6833      	ldr	r3, [r6, #0]
 8007f9c:	461c      	mov	r4, r3
 8007f9e:	bb34      	cbnz	r4, 8007fee <_malloc_r+0x82>
 8007fa0:	4629      	mov	r1, r5
 8007fa2:	4638      	mov	r0, r7
 8007fa4:	f7ff ffc2 	bl	8007f2c <sbrk_aligned>
 8007fa8:	1c43      	adds	r3, r0, #1
 8007faa:	4604      	mov	r4, r0
 8007fac:	d14d      	bne.n	800804a <_malloc_r+0xde>
 8007fae:	6834      	ldr	r4, [r6, #0]
 8007fb0:	4626      	mov	r6, r4
 8007fb2:	2e00      	cmp	r6, #0
 8007fb4:	d140      	bne.n	8008038 <_malloc_r+0xcc>
 8007fb6:	6823      	ldr	r3, [r4, #0]
 8007fb8:	4631      	mov	r1, r6
 8007fba:	4638      	mov	r0, r7
 8007fbc:	eb04 0803 	add.w	r8, r4, r3
 8007fc0:	f000 f9a4 	bl	800830c <_sbrk_r>
 8007fc4:	4580      	cmp	r8, r0
 8007fc6:	d13a      	bne.n	800803e <_malloc_r+0xd2>
 8007fc8:	6821      	ldr	r1, [r4, #0]
 8007fca:	3503      	adds	r5, #3
 8007fcc:	1a6d      	subs	r5, r5, r1
 8007fce:	f025 0503 	bic.w	r5, r5, #3
 8007fd2:	3508      	adds	r5, #8
 8007fd4:	2d0c      	cmp	r5, #12
 8007fd6:	bf38      	it	cc
 8007fd8:	250c      	movcc	r5, #12
 8007fda:	4638      	mov	r0, r7
 8007fdc:	4629      	mov	r1, r5
 8007fde:	f7ff ffa5 	bl	8007f2c <sbrk_aligned>
 8007fe2:	3001      	adds	r0, #1
 8007fe4:	d02b      	beq.n	800803e <_malloc_r+0xd2>
 8007fe6:	6823      	ldr	r3, [r4, #0]
 8007fe8:	442b      	add	r3, r5
 8007fea:	6023      	str	r3, [r4, #0]
 8007fec:	e00e      	b.n	800800c <_malloc_r+0xa0>
 8007fee:	6822      	ldr	r2, [r4, #0]
 8007ff0:	1b52      	subs	r2, r2, r5
 8007ff2:	d41e      	bmi.n	8008032 <_malloc_r+0xc6>
 8007ff4:	2a0b      	cmp	r2, #11
 8007ff6:	d916      	bls.n	8008026 <_malloc_r+0xba>
 8007ff8:	1961      	adds	r1, r4, r5
 8007ffa:	42a3      	cmp	r3, r4
 8007ffc:	6025      	str	r5, [r4, #0]
 8007ffe:	bf18      	it	ne
 8008000:	6059      	strne	r1, [r3, #4]
 8008002:	6863      	ldr	r3, [r4, #4]
 8008004:	bf08      	it	eq
 8008006:	6031      	streq	r1, [r6, #0]
 8008008:	5162      	str	r2, [r4, r5]
 800800a:	604b      	str	r3, [r1, #4]
 800800c:	4638      	mov	r0, r7
 800800e:	f104 060b 	add.w	r6, r4, #11
 8008012:	f000 f9ed 	bl	80083f0 <__malloc_unlock>
 8008016:	f026 0607 	bic.w	r6, r6, #7
 800801a:	1d23      	adds	r3, r4, #4
 800801c:	1af2      	subs	r2, r6, r3
 800801e:	d0b6      	beq.n	8007f8e <_malloc_r+0x22>
 8008020:	1b9b      	subs	r3, r3, r6
 8008022:	50a3      	str	r3, [r4, r2]
 8008024:	e7b3      	b.n	8007f8e <_malloc_r+0x22>
 8008026:	6862      	ldr	r2, [r4, #4]
 8008028:	42a3      	cmp	r3, r4
 800802a:	bf0c      	ite	eq
 800802c:	6032      	streq	r2, [r6, #0]
 800802e:	605a      	strne	r2, [r3, #4]
 8008030:	e7ec      	b.n	800800c <_malloc_r+0xa0>
 8008032:	4623      	mov	r3, r4
 8008034:	6864      	ldr	r4, [r4, #4]
 8008036:	e7b2      	b.n	8007f9e <_malloc_r+0x32>
 8008038:	4634      	mov	r4, r6
 800803a:	6876      	ldr	r6, [r6, #4]
 800803c:	e7b9      	b.n	8007fb2 <_malloc_r+0x46>
 800803e:	230c      	movs	r3, #12
 8008040:	4638      	mov	r0, r7
 8008042:	603b      	str	r3, [r7, #0]
 8008044:	f000 f9d4 	bl	80083f0 <__malloc_unlock>
 8008048:	e7a1      	b.n	8007f8e <_malloc_r+0x22>
 800804a:	6025      	str	r5, [r4, #0]
 800804c:	e7de      	b.n	800800c <_malloc_r+0xa0>
 800804e:	bf00      	nop
 8008050:	20001348 	.word	0x20001348

08008054 <__ssputs_r>:
 8008054:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008058:	688e      	ldr	r6, [r1, #8]
 800805a:	4682      	mov	sl, r0
 800805c:	429e      	cmp	r6, r3
 800805e:	460c      	mov	r4, r1
 8008060:	4690      	mov	r8, r2
 8008062:	461f      	mov	r7, r3
 8008064:	d838      	bhi.n	80080d8 <__ssputs_r+0x84>
 8008066:	898a      	ldrh	r2, [r1, #12]
 8008068:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800806c:	d032      	beq.n	80080d4 <__ssputs_r+0x80>
 800806e:	6825      	ldr	r5, [r4, #0]
 8008070:	6909      	ldr	r1, [r1, #16]
 8008072:	3301      	adds	r3, #1
 8008074:	eba5 0901 	sub.w	r9, r5, r1
 8008078:	6965      	ldr	r5, [r4, #20]
 800807a:	444b      	add	r3, r9
 800807c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008080:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008084:	106d      	asrs	r5, r5, #1
 8008086:	429d      	cmp	r5, r3
 8008088:	bf38      	it	cc
 800808a:	461d      	movcc	r5, r3
 800808c:	0553      	lsls	r3, r2, #21
 800808e:	d531      	bpl.n	80080f4 <__ssputs_r+0xa0>
 8008090:	4629      	mov	r1, r5
 8008092:	f7ff ff6b 	bl	8007f6c <_malloc_r>
 8008096:	4606      	mov	r6, r0
 8008098:	b950      	cbnz	r0, 80080b0 <__ssputs_r+0x5c>
 800809a:	230c      	movs	r3, #12
 800809c:	f04f 30ff 	mov.w	r0, #4294967295
 80080a0:	f8ca 3000 	str.w	r3, [sl]
 80080a4:	89a3      	ldrh	r3, [r4, #12]
 80080a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80080aa:	81a3      	strh	r3, [r4, #12]
 80080ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80080b0:	464a      	mov	r2, r9
 80080b2:	6921      	ldr	r1, [r4, #16]
 80080b4:	f7fe f830 	bl	8006118 <memcpy>
 80080b8:	89a3      	ldrh	r3, [r4, #12]
 80080ba:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80080be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80080c2:	81a3      	strh	r3, [r4, #12]
 80080c4:	6126      	str	r6, [r4, #16]
 80080c6:	444e      	add	r6, r9
 80080c8:	6026      	str	r6, [r4, #0]
 80080ca:	463e      	mov	r6, r7
 80080cc:	6165      	str	r5, [r4, #20]
 80080ce:	eba5 0509 	sub.w	r5, r5, r9
 80080d2:	60a5      	str	r5, [r4, #8]
 80080d4:	42be      	cmp	r6, r7
 80080d6:	d900      	bls.n	80080da <__ssputs_r+0x86>
 80080d8:	463e      	mov	r6, r7
 80080da:	4632      	mov	r2, r6
 80080dc:	4641      	mov	r1, r8
 80080de:	6820      	ldr	r0, [r4, #0]
 80080e0:	f000 f966 	bl	80083b0 <memmove>
 80080e4:	68a3      	ldr	r3, [r4, #8]
 80080e6:	2000      	movs	r0, #0
 80080e8:	1b9b      	subs	r3, r3, r6
 80080ea:	60a3      	str	r3, [r4, #8]
 80080ec:	6823      	ldr	r3, [r4, #0]
 80080ee:	4433      	add	r3, r6
 80080f0:	6023      	str	r3, [r4, #0]
 80080f2:	e7db      	b.n	80080ac <__ssputs_r+0x58>
 80080f4:	462a      	mov	r2, r5
 80080f6:	f000 f981 	bl	80083fc <_realloc_r>
 80080fa:	4606      	mov	r6, r0
 80080fc:	2800      	cmp	r0, #0
 80080fe:	d1e1      	bne.n	80080c4 <__ssputs_r+0x70>
 8008100:	4650      	mov	r0, sl
 8008102:	6921      	ldr	r1, [r4, #16]
 8008104:	f7ff feca 	bl	8007e9c <_free_r>
 8008108:	e7c7      	b.n	800809a <__ssputs_r+0x46>
	...

0800810c <_svfiprintf_r>:
 800810c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008110:	4698      	mov	r8, r3
 8008112:	898b      	ldrh	r3, [r1, #12]
 8008114:	4607      	mov	r7, r0
 8008116:	061b      	lsls	r3, r3, #24
 8008118:	460d      	mov	r5, r1
 800811a:	4614      	mov	r4, r2
 800811c:	b09d      	sub	sp, #116	; 0x74
 800811e:	d50e      	bpl.n	800813e <_svfiprintf_r+0x32>
 8008120:	690b      	ldr	r3, [r1, #16]
 8008122:	b963      	cbnz	r3, 800813e <_svfiprintf_r+0x32>
 8008124:	2140      	movs	r1, #64	; 0x40
 8008126:	f7ff ff21 	bl	8007f6c <_malloc_r>
 800812a:	6028      	str	r0, [r5, #0]
 800812c:	6128      	str	r0, [r5, #16]
 800812e:	b920      	cbnz	r0, 800813a <_svfiprintf_r+0x2e>
 8008130:	230c      	movs	r3, #12
 8008132:	603b      	str	r3, [r7, #0]
 8008134:	f04f 30ff 	mov.w	r0, #4294967295
 8008138:	e0d1      	b.n	80082de <_svfiprintf_r+0x1d2>
 800813a:	2340      	movs	r3, #64	; 0x40
 800813c:	616b      	str	r3, [r5, #20]
 800813e:	2300      	movs	r3, #0
 8008140:	9309      	str	r3, [sp, #36]	; 0x24
 8008142:	2320      	movs	r3, #32
 8008144:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008148:	2330      	movs	r3, #48	; 0x30
 800814a:	f04f 0901 	mov.w	r9, #1
 800814e:	f8cd 800c 	str.w	r8, [sp, #12]
 8008152:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80082f8 <_svfiprintf_r+0x1ec>
 8008156:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800815a:	4623      	mov	r3, r4
 800815c:	469a      	mov	sl, r3
 800815e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008162:	b10a      	cbz	r2, 8008168 <_svfiprintf_r+0x5c>
 8008164:	2a25      	cmp	r2, #37	; 0x25
 8008166:	d1f9      	bne.n	800815c <_svfiprintf_r+0x50>
 8008168:	ebba 0b04 	subs.w	fp, sl, r4
 800816c:	d00b      	beq.n	8008186 <_svfiprintf_r+0x7a>
 800816e:	465b      	mov	r3, fp
 8008170:	4622      	mov	r2, r4
 8008172:	4629      	mov	r1, r5
 8008174:	4638      	mov	r0, r7
 8008176:	f7ff ff6d 	bl	8008054 <__ssputs_r>
 800817a:	3001      	adds	r0, #1
 800817c:	f000 80aa 	beq.w	80082d4 <_svfiprintf_r+0x1c8>
 8008180:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008182:	445a      	add	r2, fp
 8008184:	9209      	str	r2, [sp, #36]	; 0x24
 8008186:	f89a 3000 	ldrb.w	r3, [sl]
 800818a:	2b00      	cmp	r3, #0
 800818c:	f000 80a2 	beq.w	80082d4 <_svfiprintf_r+0x1c8>
 8008190:	2300      	movs	r3, #0
 8008192:	f04f 32ff 	mov.w	r2, #4294967295
 8008196:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800819a:	f10a 0a01 	add.w	sl, sl, #1
 800819e:	9304      	str	r3, [sp, #16]
 80081a0:	9307      	str	r3, [sp, #28]
 80081a2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80081a6:	931a      	str	r3, [sp, #104]	; 0x68
 80081a8:	4654      	mov	r4, sl
 80081aa:	2205      	movs	r2, #5
 80081ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80081b0:	4851      	ldr	r0, [pc, #324]	; (80082f8 <_svfiprintf_r+0x1ec>)
 80081b2:	f7ff facf 	bl	8007754 <memchr>
 80081b6:	9a04      	ldr	r2, [sp, #16]
 80081b8:	b9d8      	cbnz	r0, 80081f2 <_svfiprintf_r+0xe6>
 80081ba:	06d0      	lsls	r0, r2, #27
 80081bc:	bf44      	itt	mi
 80081be:	2320      	movmi	r3, #32
 80081c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80081c4:	0711      	lsls	r1, r2, #28
 80081c6:	bf44      	itt	mi
 80081c8:	232b      	movmi	r3, #43	; 0x2b
 80081ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80081ce:	f89a 3000 	ldrb.w	r3, [sl]
 80081d2:	2b2a      	cmp	r3, #42	; 0x2a
 80081d4:	d015      	beq.n	8008202 <_svfiprintf_r+0xf6>
 80081d6:	4654      	mov	r4, sl
 80081d8:	2000      	movs	r0, #0
 80081da:	f04f 0c0a 	mov.w	ip, #10
 80081de:	9a07      	ldr	r2, [sp, #28]
 80081e0:	4621      	mov	r1, r4
 80081e2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80081e6:	3b30      	subs	r3, #48	; 0x30
 80081e8:	2b09      	cmp	r3, #9
 80081ea:	d94e      	bls.n	800828a <_svfiprintf_r+0x17e>
 80081ec:	b1b0      	cbz	r0, 800821c <_svfiprintf_r+0x110>
 80081ee:	9207      	str	r2, [sp, #28]
 80081f0:	e014      	b.n	800821c <_svfiprintf_r+0x110>
 80081f2:	eba0 0308 	sub.w	r3, r0, r8
 80081f6:	fa09 f303 	lsl.w	r3, r9, r3
 80081fa:	4313      	orrs	r3, r2
 80081fc:	46a2      	mov	sl, r4
 80081fe:	9304      	str	r3, [sp, #16]
 8008200:	e7d2      	b.n	80081a8 <_svfiprintf_r+0x9c>
 8008202:	9b03      	ldr	r3, [sp, #12]
 8008204:	1d19      	adds	r1, r3, #4
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	9103      	str	r1, [sp, #12]
 800820a:	2b00      	cmp	r3, #0
 800820c:	bfbb      	ittet	lt
 800820e:	425b      	neglt	r3, r3
 8008210:	f042 0202 	orrlt.w	r2, r2, #2
 8008214:	9307      	strge	r3, [sp, #28]
 8008216:	9307      	strlt	r3, [sp, #28]
 8008218:	bfb8      	it	lt
 800821a:	9204      	strlt	r2, [sp, #16]
 800821c:	7823      	ldrb	r3, [r4, #0]
 800821e:	2b2e      	cmp	r3, #46	; 0x2e
 8008220:	d10c      	bne.n	800823c <_svfiprintf_r+0x130>
 8008222:	7863      	ldrb	r3, [r4, #1]
 8008224:	2b2a      	cmp	r3, #42	; 0x2a
 8008226:	d135      	bne.n	8008294 <_svfiprintf_r+0x188>
 8008228:	9b03      	ldr	r3, [sp, #12]
 800822a:	3402      	adds	r4, #2
 800822c:	1d1a      	adds	r2, r3, #4
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	9203      	str	r2, [sp, #12]
 8008232:	2b00      	cmp	r3, #0
 8008234:	bfb8      	it	lt
 8008236:	f04f 33ff 	movlt.w	r3, #4294967295
 800823a:	9305      	str	r3, [sp, #20]
 800823c:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 80082fc <_svfiprintf_r+0x1f0>
 8008240:	2203      	movs	r2, #3
 8008242:	4650      	mov	r0, sl
 8008244:	7821      	ldrb	r1, [r4, #0]
 8008246:	f7ff fa85 	bl	8007754 <memchr>
 800824a:	b140      	cbz	r0, 800825e <_svfiprintf_r+0x152>
 800824c:	2340      	movs	r3, #64	; 0x40
 800824e:	eba0 000a 	sub.w	r0, r0, sl
 8008252:	fa03 f000 	lsl.w	r0, r3, r0
 8008256:	9b04      	ldr	r3, [sp, #16]
 8008258:	3401      	adds	r4, #1
 800825a:	4303      	orrs	r3, r0
 800825c:	9304      	str	r3, [sp, #16]
 800825e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008262:	2206      	movs	r2, #6
 8008264:	4826      	ldr	r0, [pc, #152]	; (8008300 <_svfiprintf_r+0x1f4>)
 8008266:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800826a:	f7ff fa73 	bl	8007754 <memchr>
 800826e:	2800      	cmp	r0, #0
 8008270:	d038      	beq.n	80082e4 <_svfiprintf_r+0x1d8>
 8008272:	4b24      	ldr	r3, [pc, #144]	; (8008304 <_svfiprintf_r+0x1f8>)
 8008274:	bb1b      	cbnz	r3, 80082be <_svfiprintf_r+0x1b2>
 8008276:	9b03      	ldr	r3, [sp, #12]
 8008278:	3307      	adds	r3, #7
 800827a:	f023 0307 	bic.w	r3, r3, #7
 800827e:	3308      	adds	r3, #8
 8008280:	9303      	str	r3, [sp, #12]
 8008282:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008284:	4433      	add	r3, r6
 8008286:	9309      	str	r3, [sp, #36]	; 0x24
 8008288:	e767      	b.n	800815a <_svfiprintf_r+0x4e>
 800828a:	460c      	mov	r4, r1
 800828c:	2001      	movs	r0, #1
 800828e:	fb0c 3202 	mla	r2, ip, r2, r3
 8008292:	e7a5      	b.n	80081e0 <_svfiprintf_r+0xd4>
 8008294:	2300      	movs	r3, #0
 8008296:	f04f 0c0a 	mov.w	ip, #10
 800829a:	4619      	mov	r1, r3
 800829c:	3401      	adds	r4, #1
 800829e:	9305      	str	r3, [sp, #20]
 80082a0:	4620      	mov	r0, r4
 80082a2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80082a6:	3a30      	subs	r2, #48	; 0x30
 80082a8:	2a09      	cmp	r2, #9
 80082aa:	d903      	bls.n	80082b4 <_svfiprintf_r+0x1a8>
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d0c5      	beq.n	800823c <_svfiprintf_r+0x130>
 80082b0:	9105      	str	r1, [sp, #20]
 80082b2:	e7c3      	b.n	800823c <_svfiprintf_r+0x130>
 80082b4:	4604      	mov	r4, r0
 80082b6:	2301      	movs	r3, #1
 80082b8:	fb0c 2101 	mla	r1, ip, r1, r2
 80082bc:	e7f0      	b.n	80082a0 <_svfiprintf_r+0x194>
 80082be:	ab03      	add	r3, sp, #12
 80082c0:	9300      	str	r3, [sp, #0]
 80082c2:	462a      	mov	r2, r5
 80082c4:	4638      	mov	r0, r7
 80082c6:	4b10      	ldr	r3, [pc, #64]	; (8008308 <_svfiprintf_r+0x1fc>)
 80082c8:	a904      	add	r1, sp, #16
 80082ca:	f7fd ffd9 	bl	8006280 <_printf_float>
 80082ce:	1c42      	adds	r2, r0, #1
 80082d0:	4606      	mov	r6, r0
 80082d2:	d1d6      	bne.n	8008282 <_svfiprintf_r+0x176>
 80082d4:	89ab      	ldrh	r3, [r5, #12]
 80082d6:	065b      	lsls	r3, r3, #25
 80082d8:	f53f af2c 	bmi.w	8008134 <_svfiprintf_r+0x28>
 80082dc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80082de:	b01d      	add	sp, #116	; 0x74
 80082e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082e4:	ab03      	add	r3, sp, #12
 80082e6:	9300      	str	r3, [sp, #0]
 80082e8:	462a      	mov	r2, r5
 80082ea:	4638      	mov	r0, r7
 80082ec:	4b06      	ldr	r3, [pc, #24]	; (8008308 <_svfiprintf_r+0x1fc>)
 80082ee:	a904      	add	r1, sp, #16
 80082f0:	f7fe fa62 	bl	80067b8 <_printf_i>
 80082f4:	e7eb      	b.n	80082ce <_svfiprintf_r+0x1c2>
 80082f6:	bf00      	nop
 80082f8:	08009694 	.word	0x08009694
 80082fc:	0800969a 	.word	0x0800969a
 8008300:	0800969e 	.word	0x0800969e
 8008304:	08006281 	.word	0x08006281
 8008308:	08008055 	.word	0x08008055

0800830c <_sbrk_r>:
 800830c:	b538      	push	{r3, r4, r5, lr}
 800830e:	2300      	movs	r3, #0
 8008310:	4d05      	ldr	r5, [pc, #20]	; (8008328 <_sbrk_r+0x1c>)
 8008312:	4604      	mov	r4, r0
 8008314:	4608      	mov	r0, r1
 8008316:	602b      	str	r3, [r5, #0]
 8008318:	f7f9 fe2c 	bl	8001f74 <_sbrk>
 800831c:	1c43      	adds	r3, r0, #1
 800831e:	d102      	bne.n	8008326 <_sbrk_r+0x1a>
 8008320:	682b      	ldr	r3, [r5, #0]
 8008322:	b103      	cbz	r3, 8008326 <_sbrk_r+0x1a>
 8008324:	6023      	str	r3, [r4, #0]
 8008326:	bd38      	pop	{r3, r4, r5, pc}
 8008328:	20001350 	.word	0x20001350

0800832c <__assert_func>:
 800832c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800832e:	4614      	mov	r4, r2
 8008330:	461a      	mov	r2, r3
 8008332:	4b09      	ldr	r3, [pc, #36]	; (8008358 <__assert_func+0x2c>)
 8008334:	4605      	mov	r5, r0
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	68d8      	ldr	r0, [r3, #12]
 800833a:	b14c      	cbz	r4, 8008350 <__assert_func+0x24>
 800833c:	4b07      	ldr	r3, [pc, #28]	; (800835c <__assert_func+0x30>)
 800833e:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008342:	9100      	str	r1, [sp, #0]
 8008344:	462b      	mov	r3, r5
 8008346:	4906      	ldr	r1, [pc, #24]	; (8008360 <__assert_func+0x34>)
 8008348:	f000 f80e 	bl	8008368 <fiprintf>
 800834c:	f000 faaa 	bl	80088a4 <abort>
 8008350:	4b04      	ldr	r3, [pc, #16]	; (8008364 <__assert_func+0x38>)
 8008352:	461c      	mov	r4, r3
 8008354:	e7f3      	b.n	800833e <__assert_func+0x12>
 8008356:	bf00      	nop
 8008358:	20000014 	.word	0x20000014
 800835c:	080096a5 	.word	0x080096a5
 8008360:	080096b2 	.word	0x080096b2
 8008364:	080096e0 	.word	0x080096e0

08008368 <fiprintf>:
 8008368:	b40e      	push	{r1, r2, r3}
 800836a:	b503      	push	{r0, r1, lr}
 800836c:	4601      	mov	r1, r0
 800836e:	ab03      	add	r3, sp, #12
 8008370:	4805      	ldr	r0, [pc, #20]	; (8008388 <fiprintf+0x20>)
 8008372:	f853 2b04 	ldr.w	r2, [r3], #4
 8008376:	6800      	ldr	r0, [r0, #0]
 8008378:	9301      	str	r3, [sp, #4]
 800837a:	f000 f895 	bl	80084a8 <_vfiprintf_r>
 800837e:	b002      	add	sp, #8
 8008380:	f85d eb04 	ldr.w	lr, [sp], #4
 8008384:	b003      	add	sp, #12
 8008386:	4770      	bx	lr
 8008388:	20000014 	.word	0x20000014

0800838c <__ascii_mbtowc>:
 800838c:	b082      	sub	sp, #8
 800838e:	b901      	cbnz	r1, 8008392 <__ascii_mbtowc+0x6>
 8008390:	a901      	add	r1, sp, #4
 8008392:	b142      	cbz	r2, 80083a6 <__ascii_mbtowc+0x1a>
 8008394:	b14b      	cbz	r3, 80083aa <__ascii_mbtowc+0x1e>
 8008396:	7813      	ldrb	r3, [r2, #0]
 8008398:	600b      	str	r3, [r1, #0]
 800839a:	7812      	ldrb	r2, [r2, #0]
 800839c:	1e10      	subs	r0, r2, #0
 800839e:	bf18      	it	ne
 80083a0:	2001      	movne	r0, #1
 80083a2:	b002      	add	sp, #8
 80083a4:	4770      	bx	lr
 80083a6:	4610      	mov	r0, r2
 80083a8:	e7fb      	b.n	80083a2 <__ascii_mbtowc+0x16>
 80083aa:	f06f 0001 	mvn.w	r0, #1
 80083ae:	e7f8      	b.n	80083a2 <__ascii_mbtowc+0x16>

080083b0 <memmove>:
 80083b0:	4288      	cmp	r0, r1
 80083b2:	b510      	push	{r4, lr}
 80083b4:	eb01 0402 	add.w	r4, r1, r2
 80083b8:	d902      	bls.n	80083c0 <memmove+0x10>
 80083ba:	4284      	cmp	r4, r0
 80083bc:	4623      	mov	r3, r4
 80083be:	d807      	bhi.n	80083d0 <memmove+0x20>
 80083c0:	1e43      	subs	r3, r0, #1
 80083c2:	42a1      	cmp	r1, r4
 80083c4:	d008      	beq.n	80083d8 <memmove+0x28>
 80083c6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80083ca:	f803 2f01 	strb.w	r2, [r3, #1]!
 80083ce:	e7f8      	b.n	80083c2 <memmove+0x12>
 80083d0:	4601      	mov	r1, r0
 80083d2:	4402      	add	r2, r0
 80083d4:	428a      	cmp	r2, r1
 80083d6:	d100      	bne.n	80083da <memmove+0x2a>
 80083d8:	bd10      	pop	{r4, pc}
 80083da:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80083de:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80083e2:	e7f7      	b.n	80083d4 <memmove+0x24>

080083e4 <__malloc_lock>:
 80083e4:	4801      	ldr	r0, [pc, #4]	; (80083ec <__malloc_lock+0x8>)
 80083e6:	f000 bc19 	b.w	8008c1c <__retarget_lock_acquire_recursive>
 80083ea:	bf00      	nop
 80083ec:	20001354 	.word	0x20001354

080083f0 <__malloc_unlock>:
 80083f0:	4801      	ldr	r0, [pc, #4]	; (80083f8 <__malloc_unlock+0x8>)
 80083f2:	f000 bc14 	b.w	8008c1e <__retarget_lock_release_recursive>
 80083f6:	bf00      	nop
 80083f8:	20001354 	.word	0x20001354

080083fc <_realloc_r>:
 80083fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008400:	4680      	mov	r8, r0
 8008402:	4614      	mov	r4, r2
 8008404:	460e      	mov	r6, r1
 8008406:	b921      	cbnz	r1, 8008412 <_realloc_r+0x16>
 8008408:	4611      	mov	r1, r2
 800840a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800840e:	f7ff bdad 	b.w	8007f6c <_malloc_r>
 8008412:	b92a      	cbnz	r2, 8008420 <_realloc_r+0x24>
 8008414:	f7ff fd42 	bl	8007e9c <_free_r>
 8008418:	4625      	mov	r5, r4
 800841a:	4628      	mov	r0, r5
 800841c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008420:	f000 fc64 	bl	8008cec <_malloc_usable_size_r>
 8008424:	4284      	cmp	r4, r0
 8008426:	4607      	mov	r7, r0
 8008428:	d802      	bhi.n	8008430 <_realloc_r+0x34>
 800842a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800842e:	d812      	bhi.n	8008456 <_realloc_r+0x5a>
 8008430:	4621      	mov	r1, r4
 8008432:	4640      	mov	r0, r8
 8008434:	f7ff fd9a 	bl	8007f6c <_malloc_r>
 8008438:	4605      	mov	r5, r0
 800843a:	2800      	cmp	r0, #0
 800843c:	d0ed      	beq.n	800841a <_realloc_r+0x1e>
 800843e:	42bc      	cmp	r4, r7
 8008440:	4622      	mov	r2, r4
 8008442:	4631      	mov	r1, r6
 8008444:	bf28      	it	cs
 8008446:	463a      	movcs	r2, r7
 8008448:	f7fd fe66 	bl	8006118 <memcpy>
 800844c:	4631      	mov	r1, r6
 800844e:	4640      	mov	r0, r8
 8008450:	f7ff fd24 	bl	8007e9c <_free_r>
 8008454:	e7e1      	b.n	800841a <_realloc_r+0x1e>
 8008456:	4635      	mov	r5, r6
 8008458:	e7df      	b.n	800841a <_realloc_r+0x1e>

0800845a <__sfputc_r>:
 800845a:	6893      	ldr	r3, [r2, #8]
 800845c:	b410      	push	{r4}
 800845e:	3b01      	subs	r3, #1
 8008460:	2b00      	cmp	r3, #0
 8008462:	6093      	str	r3, [r2, #8]
 8008464:	da07      	bge.n	8008476 <__sfputc_r+0x1c>
 8008466:	6994      	ldr	r4, [r2, #24]
 8008468:	42a3      	cmp	r3, r4
 800846a:	db01      	blt.n	8008470 <__sfputc_r+0x16>
 800846c:	290a      	cmp	r1, #10
 800846e:	d102      	bne.n	8008476 <__sfputc_r+0x1c>
 8008470:	bc10      	pop	{r4}
 8008472:	f000 b949 	b.w	8008708 <__swbuf_r>
 8008476:	6813      	ldr	r3, [r2, #0]
 8008478:	1c58      	adds	r0, r3, #1
 800847a:	6010      	str	r0, [r2, #0]
 800847c:	7019      	strb	r1, [r3, #0]
 800847e:	4608      	mov	r0, r1
 8008480:	bc10      	pop	{r4}
 8008482:	4770      	bx	lr

08008484 <__sfputs_r>:
 8008484:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008486:	4606      	mov	r6, r0
 8008488:	460f      	mov	r7, r1
 800848a:	4614      	mov	r4, r2
 800848c:	18d5      	adds	r5, r2, r3
 800848e:	42ac      	cmp	r4, r5
 8008490:	d101      	bne.n	8008496 <__sfputs_r+0x12>
 8008492:	2000      	movs	r0, #0
 8008494:	e007      	b.n	80084a6 <__sfputs_r+0x22>
 8008496:	463a      	mov	r2, r7
 8008498:	4630      	mov	r0, r6
 800849a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800849e:	f7ff ffdc 	bl	800845a <__sfputc_r>
 80084a2:	1c43      	adds	r3, r0, #1
 80084a4:	d1f3      	bne.n	800848e <__sfputs_r+0xa>
 80084a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080084a8 <_vfiprintf_r>:
 80084a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084ac:	460d      	mov	r5, r1
 80084ae:	4614      	mov	r4, r2
 80084b0:	4698      	mov	r8, r3
 80084b2:	4606      	mov	r6, r0
 80084b4:	b09d      	sub	sp, #116	; 0x74
 80084b6:	b118      	cbz	r0, 80084c0 <_vfiprintf_r+0x18>
 80084b8:	6983      	ldr	r3, [r0, #24]
 80084ba:	b90b      	cbnz	r3, 80084c0 <_vfiprintf_r+0x18>
 80084bc:	f000 fb10 	bl	8008ae0 <__sinit>
 80084c0:	4b89      	ldr	r3, [pc, #548]	; (80086e8 <_vfiprintf_r+0x240>)
 80084c2:	429d      	cmp	r5, r3
 80084c4:	d11b      	bne.n	80084fe <_vfiprintf_r+0x56>
 80084c6:	6875      	ldr	r5, [r6, #4]
 80084c8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80084ca:	07d9      	lsls	r1, r3, #31
 80084cc:	d405      	bmi.n	80084da <_vfiprintf_r+0x32>
 80084ce:	89ab      	ldrh	r3, [r5, #12]
 80084d0:	059a      	lsls	r2, r3, #22
 80084d2:	d402      	bmi.n	80084da <_vfiprintf_r+0x32>
 80084d4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80084d6:	f000 fba1 	bl	8008c1c <__retarget_lock_acquire_recursive>
 80084da:	89ab      	ldrh	r3, [r5, #12]
 80084dc:	071b      	lsls	r3, r3, #28
 80084de:	d501      	bpl.n	80084e4 <_vfiprintf_r+0x3c>
 80084e0:	692b      	ldr	r3, [r5, #16]
 80084e2:	b9eb      	cbnz	r3, 8008520 <_vfiprintf_r+0x78>
 80084e4:	4629      	mov	r1, r5
 80084e6:	4630      	mov	r0, r6
 80084e8:	f000 f96e 	bl	80087c8 <__swsetup_r>
 80084ec:	b1c0      	cbz	r0, 8008520 <_vfiprintf_r+0x78>
 80084ee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80084f0:	07dc      	lsls	r4, r3, #31
 80084f2:	d50e      	bpl.n	8008512 <_vfiprintf_r+0x6a>
 80084f4:	f04f 30ff 	mov.w	r0, #4294967295
 80084f8:	b01d      	add	sp, #116	; 0x74
 80084fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80084fe:	4b7b      	ldr	r3, [pc, #492]	; (80086ec <_vfiprintf_r+0x244>)
 8008500:	429d      	cmp	r5, r3
 8008502:	d101      	bne.n	8008508 <_vfiprintf_r+0x60>
 8008504:	68b5      	ldr	r5, [r6, #8]
 8008506:	e7df      	b.n	80084c8 <_vfiprintf_r+0x20>
 8008508:	4b79      	ldr	r3, [pc, #484]	; (80086f0 <_vfiprintf_r+0x248>)
 800850a:	429d      	cmp	r5, r3
 800850c:	bf08      	it	eq
 800850e:	68f5      	ldreq	r5, [r6, #12]
 8008510:	e7da      	b.n	80084c8 <_vfiprintf_r+0x20>
 8008512:	89ab      	ldrh	r3, [r5, #12]
 8008514:	0598      	lsls	r0, r3, #22
 8008516:	d4ed      	bmi.n	80084f4 <_vfiprintf_r+0x4c>
 8008518:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800851a:	f000 fb80 	bl	8008c1e <__retarget_lock_release_recursive>
 800851e:	e7e9      	b.n	80084f4 <_vfiprintf_r+0x4c>
 8008520:	2300      	movs	r3, #0
 8008522:	9309      	str	r3, [sp, #36]	; 0x24
 8008524:	2320      	movs	r3, #32
 8008526:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800852a:	2330      	movs	r3, #48	; 0x30
 800852c:	f04f 0901 	mov.w	r9, #1
 8008530:	f8cd 800c 	str.w	r8, [sp, #12]
 8008534:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 80086f4 <_vfiprintf_r+0x24c>
 8008538:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800853c:	4623      	mov	r3, r4
 800853e:	469a      	mov	sl, r3
 8008540:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008544:	b10a      	cbz	r2, 800854a <_vfiprintf_r+0xa2>
 8008546:	2a25      	cmp	r2, #37	; 0x25
 8008548:	d1f9      	bne.n	800853e <_vfiprintf_r+0x96>
 800854a:	ebba 0b04 	subs.w	fp, sl, r4
 800854e:	d00b      	beq.n	8008568 <_vfiprintf_r+0xc0>
 8008550:	465b      	mov	r3, fp
 8008552:	4622      	mov	r2, r4
 8008554:	4629      	mov	r1, r5
 8008556:	4630      	mov	r0, r6
 8008558:	f7ff ff94 	bl	8008484 <__sfputs_r>
 800855c:	3001      	adds	r0, #1
 800855e:	f000 80aa 	beq.w	80086b6 <_vfiprintf_r+0x20e>
 8008562:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008564:	445a      	add	r2, fp
 8008566:	9209      	str	r2, [sp, #36]	; 0x24
 8008568:	f89a 3000 	ldrb.w	r3, [sl]
 800856c:	2b00      	cmp	r3, #0
 800856e:	f000 80a2 	beq.w	80086b6 <_vfiprintf_r+0x20e>
 8008572:	2300      	movs	r3, #0
 8008574:	f04f 32ff 	mov.w	r2, #4294967295
 8008578:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800857c:	f10a 0a01 	add.w	sl, sl, #1
 8008580:	9304      	str	r3, [sp, #16]
 8008582:	9307      	str	r3, [sp, #28]
 8008584:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008588:	931a      	str	r3, [sp, #104]	; 0x68
 800858a:	4654      	mov	r4, sl
 800858c:	2205      	movs	r2, #5
 800858e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008592:	4858      	ldr	r0, [pc, #352]	; (80086f4 <_vfiprintf_r+0x24c>)
 8008594:	f7ff f8de 	bl	8007754 <memchr>
 8008598:	9a04      	ldr	r2, [sp, #16]
 800859a:	b9d8      	cbnz	r0, 80085d4 <_vfiprintf_r+0x12c>
 800859c:	06d1      	lsls	r1, r2, #27
 800859e:	bf44      	itt	mi
 80085a0:	2320      	movmi	r3, #32
 80085a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80085a6:	0713      	lsls	r3, r2, #28
 80085a8:	bf44      	itt	mi
 80085aa:	232b      	movmi	r3, #43	; 0x2b
 80085ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80085b0:	f89a 3000 	ldrb.w	r3, [sl]
 80085b4:	2b2a      	cmp	r3, #42	; 0x2a
 80085b6:	d015      	beq.n	80085e4 <_vfiprintf_r+0x13c>
 80085b8:	4654      	mov	r4, sl
 80085ba:	2000      	movs	r0, #0
 80085bc:	f04f 0c0a 	mov.w	ip, #10
 80085c0:	9a07      	ldr	r2, [sp, #28]
 80085c2:	4621      	mov	r1, r4
 80085c4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80085c8:	3b30      	subs	r3, #48	; 0x30
 80085ca:	2b09      	cmp	r3, #9
 80085cc:	d94e      	bls.n	800866c <_vfiprintf_r+0x1c4>
 80085ce:	b1b0      	cbz	r0, 80085fe <_vfiprintf_r+0x156>
 80085d0:	9207      	str	r2, [sp, #28]
 80085d2:	e014      	b.n	80085fe <_vfiprintf_r+0x156>
 80085d4:	eba0 0308 	sub.w	r3, r0, r8
 80085d8:	fa09 f303 	lsl.w	r3, r9, r3
 80085dc:	4313      	orrs	r3, r2
 80085de:	46a2      	mov	sl, r4
 80085e0:	9304      	str	r3, [sp, #16]
 80085e2:	e7d2      	b.n	800858a <_vfiprintf_r+0xe2>
 80085e4:	9b03      	ldr	r3, [sp, #12]
 80085e6:	1d19      	adds	r1, r3, #4
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	9103      	str	r1, [sp, #12]
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	bfbb      	ittet	lt
 80085f0:	425b      	neglt	r3, r3
 80085f2:	f042 0202 	orrlt.w	r2, r2, #2
 80085f6:	9307      	strge	r3, [sp, #28]
 80085f8:	9307      	strlt	r3, [sp, #28]
 80085fa:	bfb8      	it	lt
 80085fc:	9204      	strlt	r2, [sp, #16]
 80085fe:	7823      	ldrb	r3, [r4, #0]
 8008600:	2b2e      	cmp	r3, #46	; 0x2e
 8008602:	d10c      	bne.n	800861e <_vfiprintf_r+0x176>
 8008604:	7863      	ldrb	r3, [r4, #1]
 8008606:	2b2a      	cmp	r3, #42	; 0x2a
 8008608:	d135      	bne.n	8008676 <_vfiprintf_r+0x1ce>
 800860a:	9b03      	ldr	r3, [sp, #12]
 800860c:	3402      	adds	r4, #2
 800860e:	1d1a      	adds	r2, r3, #4
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	9203      	str	r2, [sp, #12]
 8008614:	2b00      	cmp	r3, #0
 8008616:	bfb8      	it	lt
 8008618:	f04f 33ff 	movlt.w	r3, #4294967295
 800861c:	9305      	str	r3, [sp, #20]
 800861e:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 80086f8 <_vfiprintf_r+0x250>
 8008622:	2203      	movs	r2, #3
 8008624:	4650      	mov	r0, sl
 8008626:	7821      	ldrb	r1, [r4, #0]
 8008628:	f7ff f894 	bl	8007754 <memchr>
 800862c:	b140      	cbz	r0, 8008640 <_vfiprintf_r+0x198>
 800862e:	2340      	movs	r3, #64	; 0x40
 8008630:	eba0 000a 	sub.w	r0, r0, sl
 8008634:	fa03 f000 	lsl.w	r0, r3, r0
 8008638:	9b04      	ldr	r3, [sp, #16]
 800863a:	3401      	adds	r4, #1
 800863c:	4303      	orrs	r3, r0
 800863e:	9304      	str	r3, [sp, #16]
 8008640:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008644:	2206      	movs	r2, #6
 8008646:	482d      	ldr	r0, [pc, #180]	; (80086fc <_vfiprintf_r+0x254>)
 8008648:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800864c:	f7ff f882 	bl	8007754 <memchr>
 8008650:	2800      	cmp	r0, #0
 8008652:	d03f      	beq.n	80086d4 <_vfiprintf_r+0x22c>
 8008654:	4b2a      	ldr	r3, [pc, #168]	; (8008700 <_vfiprintf_r+0x258>)
 8008656:	bb1b      	cbnz	r3, 80086a0 <_vfiprintf_r+0x1f8>
 8008658:	9b03      	ldr	r3, [sp, #12]
 800865a:	3307      	adds	r3, #7
 800865c:	f023 0307 	bic.w	r3, r3, #7
 8008660:	3308      	adds	r3, #8
 8008662:	9303      	str	r3, [sp, #12]
 8008664:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008666:	443b      	add	r3, r7
 8008668:	9309      	str	r3, [sp, #36]	; 0x24
 800866a:	e767      	b.n	800853c <_vfiprintf_r+0x94>
 800866c:	460c      	mov	r4, r1
 800866e:	2001      	movs	r0, #1
 8008670:	fb0c 3202 	mla	r2, ip, r2, r3
 8008674:	e7a5      	b.n	80085c2 <_vfiprintf_r+0x11a>
 8008676:	2300      	movs	r3, #0
 8008678:	f04f 0c0a 	mov.w	ip, #10
 800867c:	4619      	mov	r1, r3
 800867e:	3401      	adds	r4, #1
 8008680:	9305      	str	r3, [sp, #20]
 8008682:	4620      	mov	r0, r4
 8008684:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008688:	3a30      	subs	r2, #48	; 0x30
 800868a:	2a09      	cmp	r2, #9
 800868c:	d903      	bls.n	8008696 <_vfiprintf_r+0x1ee>
 800868e:	2b00      	cmp	r3, #0
 8008690:	d0c5      	beq.n	800861e <_vfiprintf_r+0x176>
 8008692:	9105      	str	r1, [sp, #20]
 8008694:	e7c3      	b.n	800861e <_vfiprintf_r+0x176>
 8008696:	4604      	mov	r4, r0
 8008698:	2301      	movs	r3, #1
 800869a:	fb0c 2101 	mla	r1, ip, r1, r2
 800869e:	e7f0      	b.n	8008682 <_vfiprintf_r+0x1da>
 80086a0:	ab03      	add	r3, sp, #12
 80086a2:	9300      	str	r3, [sp, #0]
 80086a4:	462a      	mov	r2, r5
 80086a6:	4630      	mov	r0, r6
 80086a8:	4b16      	ldr	r3, [pc, #88]	; (8008704 <_vfiprintf_r+0x25c>)
 80086aa:	a904      	add	r1, sp, #16
 80086ac:	f7fd fde8 	bl	8006280 <_printf_float>
 80086b0:	4607      	mov	r7, r0
 80086b2:	1c78      	adds	r0, r7, #1
 80086b4:	d1d6      	bne.n	8008664 <_vfiprintf_r+0x1bc>
 80086b6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80086b8:	07d9      	lsls	r1, r3, #31
 80086ba:	d405      	bmi.n	80086c8 <_vfiprintf_r+0x220>
 80086bc:	89ab      	ldrh	r3, [r5, #12]
 80086be:	059a      	lsls	r2, r3, #22
 80086c0:	d402      	bmi.n	80086c8 <_vfiprintf_r+0x220>
 80086c2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80086c4:	f000 faab 	bl	8008c1e <__retarget_lock_release_recursive>
 80086c8:	89ab      	ldrh	r3, [r5, #12]
 80086ca:	065b      	lsls	r3, r3, #25
 80086cc:	f53f af12 	bmi.w	80084f4 <_vfiprintf_r+0x4c>
 80086d0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80086d2:	e711      	b.n	80084f8 <_vfiprintf_r+0x50>
 80086d4:	ab03      	add	r3, sp, #12
 80086d6:	9300      	str	r3, [sp, #0]
 80086d8:	462a      	mov	r2, r5
 80086da:	4630      	mov	r0, r6
 80086dc:	4b09      	ldr	r3, [pc, #36]	; (8008704 <_vfiprintf_r+0x25c>)
 80086de:	a904      	add	r1, sp, #16
 80086e0:	f7fe f86a 	bl	80067b8 <_printf_i>
 80086e4:	e7e4      	b.n	80086b0 <_vfiprintf_r+0x208>
 80086e6:	bf00      	nop
 80086e8:	0800980c 	.word	0x0800980c
 80086ec:	0800982c 	.word	0x0800982c
 80086f0:	080097ec 	.word	0x080097ec
 80086f4:	08009694 	.word	0x08009694
 80086f8:	0800969a 	.word	0x0800969a
 80086fc:	0800969e 	.word	0x0800969e
 8008700:	08006281 	.word	0x08006281
 8008704:	08008485 	.word	0x08008485

08008708 <__swbuf_r>:
 8008708:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800870a:	460e      	mov	r6, r1
 800870c:	4614      	mov	r4, r2
 800870e:	4605      	mov	r5, r0
 8008710:	b118      	cbz	r0, 800871a <__swbuf_r+0x12>
 8008712:	6983      	ldr	r3, [r0, #24]
 8008714:	b90b      	cbnz	r3, 800871a <__swbuf_r+0x12>
 8008716:	f000 f9e3 	bl	8008ae0 <__sinit>
 800871a:	4b21      	ldr	r3, [pc, #132]	; (80087a0 <__swbuf_r+0x98>)
 800871c:	429c      	cmp	r4, r3
 800871e:	d12b      	bne.n	8008778 <__swbuf_r+0x70>
 8008720:	686c      	ldr	r4, [r5, #4]
 8008722:	69a3      	ldr	r3, [r4, #24]
 8008724:	60a3      	str	r3, [r4, #8]
 8008726:	89a3      	ldrh	r3, [r4, #12]
 8008728:	071a      	lsls	r2, r3, #28
 800872a:	d52f      	bpl.n	800878c <__swbuf_r+0x84>
 800872c:	6923      	ldr	r3, [r4, #16]
 800872e:	b36b      	cbz	r3, 800878c <__swbuf_r+0x84>
 8008730:	6923      	ldr	r3, [r4, #16]
 8008732:	6820      	ldr	r0, [r4, #0]
 8008734:	b2f6      	uxtb	r6, r6
 8008736:	1ac0      	subs	r0, r0, r3
 8008738:	6963      	ldr	r3, [r4, #20]
 800873a:	4637      	mov	r7, r6
 800873c:	4283      	cmp	r3, r0
 800873e:	dc04      	bgt.n	800874a <__swbuf_r+0x42>
 8008740:	4621      	mov	r1, r4
 8008742:	4628      	mov	r0, r5
 8008744:	f000 f938 	bl	80089b8 <_fflush_r>
 8008748:	bb30      	cbnz	r0, 8008798 <__swbuf_r+0x90>
 800874a:	68a3      	ldr	r3, [r4, #8]
 800874c:	3001      	adds	r0, #1
 800874e:	3b01      	subs	r3, #1
 8008750:	60a3      	str	r3, [r4, #8]
 8008752:	6823      	ldr	r3, [r4, #0]
 8008754:	1c5a      	adds	r2, r3, #1
 8008756:	6022      	str	r2, [r4, #0]
 8008758:	701e      	strb	r6, [r3, #0]
 800875a:	6963      	ldr	r3, [r4, #20]
 800875c:	4283      	cmp	r3, r0
 800875e:	d004      	beq.n	800876a <__swbuf_r+0x62>
 8008760:	89a3      	ldrh	r3, [r4, #12]
 8008762:	07db      	lsls	r3, r3, #31
 8008764:	d506      	bpl.n	8008774 <__swbuf_r+0x6c>
 8008766:	2e0a      	cmp	r6, #10
 8008768:	d104      	bne.n	8008774 <__swbuf_r+0x6c>
 800876a:	4621      	mov	r1, r4
 800876c:	4628      	mov	r0, r5
 800876e:	f000 f923 	bl	80089b8 <_fflush_r>
 8008772:	b988      	cbnz	r0, 8008798 <__swbuf_r+0x90>
 8008774:	4638      	mov	r0, r7
 8008776:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008778:	4b0a      	ldr	r3, [pc, #40]	; (80087a4 <__swbuf_r+0x9c>)
 800877a:	429c      	cmp	r4, r3
 800877c:	d101      	bne.n	8008782 <__swbuf_r+0x7a>
 800877e:	68ac      	ldr	r4, [r5, #8]
 8008780:	e7cf      	b.n	8008722 <__swbuf_r+0x1a>
 8008782:	4b09      	ldr	r3, [pc, #36]	; (80087a8 <__swbuf_r+0xa0>)
 8008784:	429c      	cmp	r4, r3
 8008786:	bf08      	it	eq
 8008788:	68ec      	ldreq	r4, [r5, #12]
 800878a:	e7ca      	b.n	8008722 <__swbuf_r+0x1a>
 800878c:	4621      	mov	r1, r4
 800878e:	4628      	mov	r0, r5
 8008790:	f000 f81a 	bl	80087c8 <__swsetup_r>
 8008794:	2800      	cmp	r0, #0
 8008796:	d0cb      	beq.n	8008730 <__swbuf_r+0x28>
 8008798:	f04f 37ff 	mov.w	r7, #4294967295
 800879c:	e7ea      	b.n	8008774 <__swbuf_r+0x6c>
 800879e:	bf00      	nop
 80087a0:	0800980c 	.word	0x0800980c
 80087a4:	0800982c 	.word	0x0800982c
 80087a8:	080097ec 	.word	0x080097ec

080087ac <__ascii_wctomb>:
 80087ac:	4603      	mov	r3, r0
 80087ae:	4608      	mov	r0, r1
 80087b0:	b141      	cbz	r1, 80087c4 <__ascii_wctomb+0x18>
 80087b2:	2aff      	cmp	r2, #255	; 0xff
 80087b4:	d904      	bls.n	80087c0 <__ascii_wctomb+0x14>
 80087b6:	228a      	movs	r2, #138	; 0x8a
 80087b8:	f04f 30ff 	mov.w	r0, #4294967295
 80087bc:	601a      	str	r2, [r3, #0]
 80087be:	4770      	bx	lr
 80087c0:	2001      	movs	r0, #1
 80087c2:	700a      	strb	r2, [r1, #0]
 80087c4:	4770      	bx	lr
	...

080087c8 <__swsetup_r>:
 80087c8:	4b32      	ldr	r3, [pc, #200]	; (8008894 <__swsetup_r+0xcc>)
 80087ca:	b570      	push	{r4, r5, r6, lr}
 80087cc:	681d      	ldr	r5, [r3, #0]
 80087ce:	4606      	mov	r6, r0
 80087d0:	460c      	mov	r4, r1
 80087d2:	b125      	cbz	r5, 80087de <__swsetup_r+0x16>
 80087d4:	69ab      	ldr	r3, [r5, #24]
 80087d6:	b913      	cbnz	r3, 80087de <__swsetup_r+0x16>
 80087d8:	4628      	mov	r0, r5
 80087da:	f000 f981 	bl	8008ae0 <__sinit>
 80087de:	4b2e      	ldr	r3, [pc, #184]	; (8008898 <__swsetup_r+0xd0>)
 80087e0:	429c      	cmp	r4, r3
 80087e2:	d10f      	bne.n	8008804 <__swsetup_r+0x3c>
 80087e4:	686c      	ldr	r4, [r5, #4]
 80087e6:	89a3      	ldrh	r3, [r4, #12]
 80087e8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80087ec:	0719      	lsls	r1, r3, #28
 80087ee:	d42c      	bmi.n	800884a <__swsetup_r+0x82>
 80087f0:	06dd      	lsls	r5, r3, #27
 80087f2:	d411      	bmi.n	8008818 <__swsetup_r+0x50>
 80087f4:	2309      	movs	r3, #9
 80087f6:	6033      	str	r3, [r6, #0]
 80087f8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80087fc:	f04f 30ff 	mov.w	r0, #4294967295
 8008800:	81a3      	strh	r3, [r4, #12]
 8008802:	e03e      	b.n	8008882 <__swsetup_r+0xba>
 8008804:	4b25      	ldr	r3, [pc, #148]	; (800889c <__swsetup_r+0xd4>)
 8008806:	429c      	cmp	r4, r3
 8008808:	d101      	bne.n	800880e <__swsetup_r+0x46>
 800880a:	68ac      	ldr	r4, [r5, #8]
 800880c:	e7eb      	b.n	80087e6 <__swsetup_r+0x1e>
 800880e:	4b24      	ldr	r3, [pc, #144]	; (80088a0 <__swsetup_r+0xd8>)
 8008810:	429c      	cmp	r4, r3
 8008812:	bf08      	it	eq
 8008814:	68ec      	ldreq	r4, [r5, #12]
 8008816:	e7e6      	b.n	80087e6 <__swsetup_r+0x1e>
 8008818:	0758      	lsls	r0, r3, #29
 800881a:	d512      	bpl.n	8008842 <__swsetup_r+0x7a>
 800881c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800881e:	b141      	cbz	r1, 8008832 <__swsetup_r+0x6a>
 8008820:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008824:	4299      	cmp	r1, r3
 8008826:	d002      	beq.n	800882e <__swsetup_r+0x66>
 8008828:	4630      	mov	r0, r6
 800882a:	f7ff fb37 	bl	8007e9c <_free_r>
 800882e:	2300      	movs	r3, #0
 8008830:	6363      	str	r3, [r4, #52]	; 0x34
 8008832:	89a3      	ldrh	r3, [r4, #12]
 8008834:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008838:	81a3      	strh	r3, [r4, #12]
 800883a:	2300      	movs	r3, #0
 800883c:	6063      	str	r3, [r4, #4]
 800883e:	6923      	ldr	r3, [r4, #16]
 8008840:	6023      	str	r3, [r4, #0]
 8008842:	89a3      	ldrh	r3, [r4, #12]
 8008844:	f043 0308 	orr.w	r3, r3, #8
 8008848:	81a3      	strh	r3, [r4, #12]
 800884a:	6923      	ldr	r3, [r4, #16]
 800884c:	b94b      	cbnz	r3, 8008862 <__swsetup_r+0x9a>
 800884e:	89a3      	ldrh	r3, [r4, #12]
 8008850:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008854:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008858:	d003      	beq.n	8008862 <__swsetup_r+0x9a>
 800885a:	4621      	mov	r1, r4
 800885c:	4630      	mov	r0, r6
 800885e:	f000 fa05 	bl	8008c6c <__smakebuf_r>
 8008862:	89a0      	ldrh	r0, [r4, #12]
 8008864:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008868:	f010 0301 	ands.w	r3, r0, #1
 800886c:	d00a      	beq.n	8008884 <__swsetup_r+0xbc>
 800886e:	2300      	movs	r3, #0
 8008870:	60a3      	str	r3, [r4, #8]
 8008872:	6963      	ldr	r3, [r4, #20]
 8008874:	425b      	negs	r3, r3
 8008876:	61a3      	str	r3, [r4, #24]
 8008878:	6923      	ldr	r3, [r4, #16]
 800887a:	b943      	cbnz	r3, 800888e <__swsetup_r+0xc6>
 800887c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008880:	d1ba      	bne.n	80087f8 <__swsetup_r+0x30>
 8008882:	bd70      	pop	{r4, r5, r6, pc}
 8008884:	0781      	lsls	r1, r0, #30
 8008886:	bf58      	it	pl
 8008888:	6963      	ldrpl	r3, [r4, #20]
 800888a:	60a3      	str	r3, [r4, #8]
 800888c:	e7f4      	b.n	8008878 <__swsetup_r+0xb0>
 800888e:	2000      	movs	r0, #0
 8008890:	e7f7      	b.n	8008882 <__swsetup_r+0xba>
 8008892:	bf00      	nop
 8008894:	20000014 	.word	0x20000014
 8008898:	0800980c 	.word	0x0800980c
 800889c:	0800982c 	.word	0x0800982c
 80088a0:	080097ec 	.word	0x080097ec

080088a4 <abort>:
 80088a4:	2006      	movs	r0, #6
 80088a6:	b508      	push	{r3, lr}
 80088a8:	f000 fa50 	bl	8008d4c <raise>
 80088ac:	2001      	movs	r0, #1
 80088ae:	f7f9 fb0a 	bl	8001ec6 <_exit>
	...

080088b4 <__sflush_r>:
 80088b4:	898a      	ldrh	r2, [r1, #12]
 80088b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088b8:	4605      	mov	r5, r0
 80088ba:	0710      	lsls	r0, r2, #28
 80088bc:	460c      	mov	r4, r1
 80088be:	d457      	bmi.n	8008970 <__sflush_r+0xbc>
 80088c0:	684b      	ldr	r3, [r1, #4]
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	dc04      	bgt.n	80088d0 <__sflush_r+0x1c>
 80088c6:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	dc01      	bgt.n	80088d0 <__sflush_r+0x1c>
 80088cc:	2000      	movs	r0, #0
 80088ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80088d0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80088d2:	2e00      	cmp	r6, #0
 80088d4:	d0fa      	beq.n	80088cc <__sflush_r+0x18>
 80088d6:	2300      	movs	r3, #0
 80088d8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80088dc:	682f      	ldr	r7, [r5, #0]
 80088de:	602b      	str	r3, [r5, #0]
 80088e0:	d032      	beq.n	8008948 <__sflush_r+0x94>
 80088e2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80088e4:	89a3      	ldrh	r3, [r4, #12]
 80088e6:	075a      	lsls	r2, r3, #29
 80088e8:	d505      	bpl.n	80088f6 <__sflush_r+0x42>
 80088ea:	6863      	ldr	r3, [r4, #4]
 80088ec:	1ac0      	subs	r0, r0, r3
 80088ee:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80088f0:	b10b      	cbz	r3, 80088f6 <__sflush_r+0x42>
 80088f2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80088f4:	1ac0      	subs	r0, r0, r3
 80088f6:	2300      	movs	r3, #0
 80088f8:	4602      	mov	r2, r0
 80088fa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80088fc:	4628      	mov	r0, r5
 80088fe:	6a21      	ldr	r1, [r4, #32]
 8008900:	47b0      	blx	r6
 8008902:	1c43      	adds	r3, r0, #1
 8008904:	89a3      	ldrh	r3, [r4, #12]
 8008906:	d106      	bne.n	8008916 <__sflush_r+0x62>
 8008908:	6829      	ldr	r1, [r5, #0]
 800890a:	291d      	cmp	r1, #29
 800890c:	d82c      	bhi.n	8008968 <__sflush_r+0xb4>
 800890e:	4a29      	ldr	r2, [pc, #164]	; (80089b4 <__sflush_r+0x100>)
 8008910:	40ca      	lsrs	r2, r1
 8008912:	07d6      	lsls	r6, r2, #31
 8008914:	d528      	bpl.n	8008968 <__sflush_r+0xb4>
 8008916:	2200      	movs	r2, #0
 8008918:	6062      	str	r2, [r4, #4]
 800891a:	6922      	ldr	r2, [r4, #16]
 800891c:	04d9      	lsls	r1, r3, #19
 800891e:	6022      	str	r2, [r4, #0]
 8008920:	d504      	bpl.n	800892c <__sflush_r+0x78>
 8008922:	1c42      	adds	r2, r0, #1
 8008924:	d101      	bne.n	800892a <__sflush_r+0x76>
 8008926:	682b      	ldr	r3, [r5, #0]
 8008928:	b903      	cbnz	r3, 800892c <__sflush_r+0x78>
 800892a:	6560      	str	r0, [r4, #84]	; 0x54
 800892c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800892e:	602f      	str	r7, [r5, #0]
 8008930:	2900      	cmp	r1, #0
 8008932:	d0cb      	beq.n	80088cc <__sflush_r+0x18>
 8008934:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008938:	4299      	cmp	r1, r3
 800893a:	d002      	beq.n	8008942 <__sflush_r+0x8e>
 800893c:	4628      	mov	r0, r5
 800893e:	f7ff faad 	bl	8007e9c <_free_r>
 8008942:	2000      	movs	r0, #0
 8008944:	6360      	str	r0, [r4, #52]	; 0x34
 8008946:	e7c2      	b.n	80088ce <__sflush_r+0x1a>
 8008948:	6a21      	ldr	r1, [r4, #32]
 800894a:	2301      	movs	r3, #1
 800894c:	4628      	mov	r0, r5
 800894e:	47b0      	blx	r6
 8008950:	1c41      	adds	r1, r0, #1
 8008952:	d1c7      	bne.n	80088e4 <__sflush_r+0x30>
 8008954:	682b      	ldr	r3, [r5, #0]
 8008956:	2b00      	cmp	r3, #0
 8008958:	d0c4      	beq.n	80088e4 <__sflush_r+0x30>
 800895a:	2b1d      	cmp	r3, #29
 800895c:	d001      	beq.n	8008962 <__sflush_r+0xae>
 800895e:	2b16      	cmp	r3, #22
 8008960:	d101      	bne.n	8008966 <__sflush_r+0xb2>
 8008962:	602f      	str	r7, [r5, #0]
 8008964:	e7b2      	b.n	80088cc <__sflush_r+0x18>
 8008966:	89a3      	ldrh	r3, [r4, #12]
 8008968:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800896c:	81a3      	strh	r3, [r4, #12]
 800896e:	e7ae      	b.n	80088ce <__sflush_r+0x1a>
 8008970:	690f      	ldr	r7, [r1, #16]
 8008972:	2f00      	cmp	r7, #0
 8008974:	d0aa      	beq.n	80088cc <__sflush_r+0x18>
 8008976:	0793      	lsls	r3, r2, #30
 8008978:	bf18      	it	ne
 800897a:	2300      	movne	r3, #0
 800897c:	680e      	ldr	r6, [r1, #0]
 800897e:	bf08      	it	eq
 8008980:	694b      	ldreq	r3, [r1, #20]
 8008982:	1bf6      	subs	r6, r6, r7
 8008984:	600f      	str	r7, [r1, #0]
 8008986:	608b      	str	r3, [r1, #8]
 8008988:	2e00      	cmp	r6, #0
 800898a:	dd9f      	ble.n	80088cc <__sflush_r+0x18>
 800898c:	4633      	mov	r3, r6
 800898e:	463a      	mov	r2, r7
 8008990:	4628      	mov	r0, r5
 8008992:	6a21      	ldr	r1, [r4, #32]
 8008994:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8008998:	47e0      	blx	ip
 800899a:	2800      	cmp	r0, #0
 800899c:	dc06      	bgt.n	80089ac <__sflush_r+0xf8>
 800899e:	89a3      	ldrh	r3, [r4, #12]
 80089a0:	f04f 30ff 	mov.w	r0, #4294967295
 80089a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80089a8:	81a3      	strh	r3, [r4, #12]
 80089aa:	e790      	b.n	80088ce <__sflush_r+0x1a>
 80089ac:	4407      	add	r7, r0
 80089ae:	1a36      	subs	r6, r6, r0
 80089b0:	e7ea      	b.n	8008988 <__sflush_r+0xd4>
 80089b2:	bf00      	nop
 80089b4:	20400001 	.word	0x20400001

080089b8 <_fflush_r>:
 80089b8:	b538      	push	{r3, r4, r5, lr}
 80089ba:	690b      	ldr	r3, [r1, #16]
 80089bc:	4605      	mov	r5, r0
 80089be:	460c      	mov	r4, r1
 80089c0:	b913      	cbnz	r3, 80089c8 <_fflush_r+0x10>
 80089c2:	2500      	movs	r5, #0
 80089c4:	4628      	mov	r0, r5
 80089c6:	bd38      	pop	{r3, r4, r5, pc}
 80089c8:	b118      	cbz	r0, 80089d2 <_fflush_r+0x1a>
 80089ca:	6983      	ldr	r3, [r0, #24]
 80089cc:	b90b      	cbnz	r3, 80089d2 <_fflush_r+0x1a>
 80089ce:	f000 f887 	bl	8008ae0 <__sinit>
 80089d2:	4b14      	ldr	r3, [pc, #80]	; (8008a24 <_fflush_r+0x6c>)
 80089d4:	429c      	cmp	r4, r3
 80089d6:	d11b      	bne.n	8008a10 <_fflush_r+0x58>
 80089d8:	686c      	ldr	r4, [r5, #4]
 80089da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d0ef      	beq.n	80089c2 <_fflush_r+0xa>
 80089e2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80089e4:	07d0      	lsls	r0, r2, #31
 80089e6:	d404      	bmi.n	80089f2 <_fflush_r+0x3a>
 80089e8:	0599      	lsls	r1, r3, #22
 80089ea:	d402      	bmi.n	80089f2 <_fflush_r+0x3a>
 80089ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80089ee:	f000 f915 	bl	8008c1c <__retarget_lock_acquire_recursive>
 80089f2:	4628      	mov	r0, r5
 80089f4:	4621      	mov	r1, r4
 80089f6:	f7ff ff5d 	bl	80088b4 <__sflush_r>
 80089fa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80089fc:	4605      	mov	r5, r0
 80089fe:	07da      	lsls	r2, r3, #31
 8008a00:	d4e0      	bmi.n	80089c4 <_fflush_r+0xc>
 8008a02:	89a3      	ldrh	r3, [r4, #12]
 8008a04:	059b      	lsls	r3, r3, #22
 8008a06:	d4dd      	bmi.n	80089c4 <_fflush_r+0xc>
 8008a08:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008a0a:	f000 f908 	bl	8008c1e <__retarget_lock_release_recursive>
 8008a0e:	e7d9      	b.n	80089c4 <_fflush_r+0xc>
 8008a10:	4b05      	ldr	r3, [pc, #20]	; (8008a28 <_fflush_r+0x70>)
 8008a12:	429c      	cmp	r4, r3
 8008a14:	d101      	bne.n	8008a1a <_fflush_r+0x62>
 8008a16:	68ac      	ldr	r4, [r5, #8]
 8008a18:	e7df      	b.n	80089da <_fflush_r+0x22>
 8008a1a:	4b04      	ldr	r3, [pc, #16]	; (8008a2c <_fflush_r+0x74>)
 8008a1c:	429c      	cmp	r4, r3
 8008a1e:	bf08      	it	eq
 8008a20:	68ec      	ldreq	r4, [r5, #12]
 8008a22:	e7da      	b.n	80089da <_fflush_r+0x22>
 8008a24:	0800980c 	.word	0x0800980c
 8008a28:	0800982c 	.word	0x0800982c
 8008a2c:	080097ec 	.word	0x080097ec

08008a30 <std>:
 8008a30:	2300      	movs	r3, #0
 8008a32:	b510      	push	{r4, lr}
 8008a34:	4604      	mov	r4, r0
 8008a36:	e9c0 3300 	strd	r3, r3, [r0]
 8008a3a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008a3e:	6083      	str	r3, [r0, #8]
 8008a40:	8181      	strh	r1, [r0, #12]
 8008a42:	6643      	str	r3, [r0, #100]	; 0x64
 8008a44:	81c2      	strh	r2, [r0, #14]
 8008a46:	6183      	str	r3, [r0, #24]
 8008a48:	4619      	mov	r1, r3
 8008a4a:	2208      	movs	r2, #8
 8008a4c:	305c      	adds	r0, #92	; 0x5c
 8008a4e:	f7fd fb71 	bl	8006134 <memset>
 8008a52:	4b05      	ldr	r3, [pc, #20]	; (8008a68 <std+0x38>)
 8008a54:	6224      	str	r4, [r4, #32]
 8008a56:	6263      	str	r3, [r4, #36]	; 0x24
 8008a58:	4b04      	ldr	r3, [pc, #16]	; (8008a6c <std+0x3c>)
 8008a5a:	62a3      	str	r3, [r4, #40]	; 0x28
 8008a5c:	4b04      	ldr	r3, [pc, #16]	; (8008a70 <std+0x40>)
 8008a5e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008a60:	4b04      	ldr	r3, [pc, #16]	; (8008a74 <std+0x44>)
 8008a62:	6323      	str	r3, [r4, #48]	; 0x30
 8008a64:	bd10      	pop	{r4, pc}
 8008a66:	bf00      	nop
 8008a68:	08008d85 	.word	0x08008d85
 8008a6c:	08008da7 	.word	0x08008da7
 8008a70:	08008ddf 	.word	0x08008ddf
 8008a74:	08008e03 	.word	0x08008e03

08008a78 <_cleanup_r>:
 8008a78:	4901      	ldr	r1, [pc, #4]	; (8008a80 <_cleanup_r+0x8>)
 8008a7a:	f000 b8af 	b.w	8008bdc <_fwalk_reent>
 8008a7e:	bf00      	nop
 8008a80:	080089b9 	.word	0x080089b9

08008a84 <__sfmoreglue>:
 8008a84:	2268      	movs	r2, #104	; 0x68
 8008a86:	b570      	push	{r4, r5, r6, lr}
 8008a88:	1e4d      	subs	r5, r1, #1
 8008a8a:	4355      	muls	r5, r2
 8008a8c:	460e      	mov	r6, r1
 8008a8e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008a92:	f7ff fa6b 	bl	8007f6c <_malloc_r>
 8008a96:	4604      	mov	r4, r0
 8008a98:	b140      	cbz	r0, 8008aac <__sfmoreglue+0x28>
 8008a9a:	2100      	movs	r1, #0
 8008a9c:	e9c0 1600 	strd	r1, r6, [r0]
 8008aa0:	300c      	adds	r0, #12
 8008aa2:	60a0      	str	r0, [r4, #8]
 8008aa4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008aa8:	f7fd fb44 	bl	8006134 <memset>
 8008aac:	4620      	mov	r0, r4
 8008aae:	bd70      	pop	{r4, r5, r6, pc}

08008ab0 <__sfp_lock_acquire>:
 8008ab0:	4801      	ldr	r0, [pc, #4]	; (8008ab8 <__sfp_lock_acquire+0x8>)
 8008ab2:	f000 b8b3 	b.w	8008c1c <__retarget_lock_acquire_recursive>
 8008ab6:	bf00      	nop
 8008ab8:	20001355 	.word	0x20001355

08008abc <__sfp_lock_release>:
 8008abc:	4801      	ldr	r0, [pc, #4]	; (8008ac4 <__sfp_lock_release+0x8>)
 8008abe:	f000 b8ae 	b.w	8008c1e <__retarget_lock_release_recursive>
 8008ac2:	bf00      	nop
 8008ac4:	20001355 	.word	0x20001355

08008ac8 <__sinit_lock_acquire>:
 8008ac8:	4801      	ldr	r0, [pc, #4]	; (8008ad0 <__sinit_lock_acquire+0x8>)
 8008aca:	f000 b8a7 	b.w	8008c1c <__retarget_lock_acquire_recursive>
 8008ace:	bf00      	nop
 8008ad0:	20001356 	.word	0x20001356

08008ad4 <__sinit_lock_release>:
 8008ad4:	4801      	ldr	r0, [pc, #4]	; (8008adc <__sinit_lock_release+0x8>)
 8008ad6:	f000 b8a2 	b.w	8008c1e <__retarget_lock_release_recursive>
 8008ada:	bf00      	nop
 8008adc:	20001356 	.word	0x20001356

08008ae0 <__sinit>:
 8008ae0:	b510      	push	{r4, lr}
 8008ae2:	4604      	mov	r4, r0
 8008ae4:	f7ff fff0 	bl	8008ac8 <__sinit_lock_acquire>
 8008ae8:	69a3      	ldr	r3, [r4, #24]
 8008aea:	b11b      	cbz	r3, 8008af4 <__sinit+0x14>
 8008aec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008af0:	f7ff bff0 	b.w	8008ad4 <__sinit_lock_release>
 8008af4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008af8:	6523      	str	r3, [r4, #80]	; 0x50
 8008afa:	4b13      	ldr	r3, [pc, #76]	; (8008b48 <__sinit+0x68>)
 8008afc:	4a13      	ldr	r2, [pc, #76]	; (8008b4c <__sinit+0x6c>)
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	62a2      	str	r2, [r4, #40]	; 0x28
 8008b02:	42a3      	cmp	r3, r4
 8008b04:	bf08      	it	eq
 8008b06:	2301      	moveq	r3, #1
 8008b08:	4620      	mov	r0, r4
 8008b0a:	bf08      	it	eq
 8008b0c:	61a3      	streq	r3, [r4, #24]
 8008b0e:	f000 f81f 	bl	8008b50 <__sfp>
 8008b12:	6060      	str	r0, [r4, #4]
 8008b14:	4620      	mov	r0, r4
 8008b16:	f000 f81b 	bl	8008b50 <__sfp>
 8008b1a:	60a0      	str	r0, [r4, #8]
 8008b1c:	4620      	mov	r0, r4
 8008b1e:	f000 f817 	bl	8008b50 <__sfp>
 8008b22:	2200      	movs	r2, #0
 8008b24:	2104      	movs	r1, #4
 8008b26:	60e0      	str	r0, [r4, #12]
 8008b28:	6860      	ldr	r0, [r4, #4]
 8008b2a:	f7ff ff81 	bl	8008a30 <std>
 8008b2e:	2201      	movs	r2, #1
 8008b30:	2109      	movs	r1, #9
 8008b32:	68a0      	ldr	r0, [r4, #8]
 8008b34:	f7ff ff7c 	bl	8008a30 <std>
 8008b38:	2202      	movs	r2, #2
 8008b3a:	2112      	movs	r1, #18
 8008b3c:	68e0      	ldr	r0, [r4, #12]
 8008b3e:	f7ff ff77 	bl	8008a30 <std>
 8008b42:	2301      	movs	r3, #1
 8008b44:	61a3      	str	r3, [r4, #24]
 8008b46:	e7d1      	b.n	8008aec <__sinit+0xc>
 8008b48:	08009474 	.word	0x08009474
 8008b4c:	08008a79 	.word	0x08008a79

08008b50 <__sfp>:
 8008b50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b52:	4607      	mov	r7, r0
 8008b54:	f7ff ffac 	bl	8008ab0 <__sfp_lock_acquire>
 8008b58:	4b1e      	ldr	r3, [pc, #120]	; (8008bd4 <__sfp+0x84>)
 8008b5a:	681e      	ldr	r6, [r3, #0]
 8008b5c:	69b3      	ldr	r3, [r6, #24]
 8008b5e:	b913      	cbnz	r3, 8008b66 <__sfp+0x16>
 8008b60:	4630      	mov	r0, r6
 8008b62:	f7ff ffbd 	bl	8008ae0 <__sinit>
 8008b66:	3648      	adds	r6, #72	; 0x48
 8008b68:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008b6c:	3b01      	subs	r3, #1
 8008b6e:	d503      	bpl.n	8008b78 <__sfp+0x28>
 8008b70:	6833      	ldr	r3, [r6, #0]
 8008b72:	b30b      	cbz	r3, 8008bb8 <__sfp+0x68>
 8008b74:	6836      	ldr	r6, [r6, #0]
 8008b76:	e7f7      	b.n	8008b68 <__sfp+0x18>
 8008b78:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008b7c:	b9d5      	cbnz	r5, 8008bb4 <__sfp+0x64>
 8008b7e:	4b16      	ldr	r3, [pc, #88]	; (8008bd8 <__sfp+0x88>)
 8008b80:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008b84:	60e3      	str	r3, [r4, #12]
 8008b86:	6665      	str	r5, [r4, #100]	; 0x64
 8008b88:	f000 f847 	bl	8008c1a <__retarget_lock_init_recursive>
 8008b8c:	f7ff ff96 	bl	8008abc <__sfp_lock_release>
 8008b90:	2208      	movs	r2, #8
 8008b92:	4629      	mov	r1, r5
 8008b94:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008b98:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008b9c:	6025      	str	r5, [r4, #0]
 8008b9e:	61a5      	str	r5, [r4, #24]
 8008ba0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008ba4:	f7fd fac6 	bl	8006134 <memset>
 8008ba8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008bac:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008bb0:	4620      	mov	r0, r4
 8008bb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008bb4:	3468      	adds	r4, #104	; 0x68
 8008bb6:	e7d9      	b.n	8008b6c <__sfp+0x1c>
 8008bb8:	2104      	movs	r1, #4
 8008bba:	4638      	mov	r0, r7
 8008bbc:	f7ff ff62 	bl	8008a84 <__sfmoreglue>
 8008bc0:	4604      	mov	r4, r0
 8008bc2:	6030      	str	r0, [r6, #0]
 8008bc4:	2800      	cmp	r0, #0
 8008bc6:	d1d5      	bne.n	8008b74 <__sfp+0x24>
 8008bc8:	f7ff ff78 	bl	8008abc <__sfp_lock_release>
 8008bcc:	230c      	movs	r3, #12
 8008bce:	603b      	str	r3, [r7, #0]
 8008bd0:	e7ee      	b.n	8008bb0 <__sfp+0x60>
 8008bd2:	bf00      	nop
 8008bd4:	08009474 	.word	0x08009474
 8008bd8:	ffff0001 	.word	0xffff0001

08008bdc <_fwalk_reent>:
 8008bdc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008be0:	4606      	mov	r6, r0
 8008be2:	4688      	mov	r8, r1
 8008be4:	2700      	movs	r7, #0
 8008be6:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008bea:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008bee:	f1b9 0901 	subs.w	r9, r9, #1
 8008bf2:	d505      	bpl.n	8008c00 <_fwalk_reent+0x24>
 8008bf4:	6824      	ldr	r4, [r4, #0]
 8008bf6:	2c00      	cmp	r4, #0
 8008bf8:	d1f7      	bne.n	8008bea <_fwalk_reent+0xe>
 8008bfa:	4638      	mov	r0, r7
 8008bfc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008c00:	89ab      	ldrh	r3, [r5, #12]
 8008c02:	2b01      	cmp	r3, #1
 8008c04:	d907      	bls.n	8008c16 <_fwalk_reent+0x3a>
 8008c06:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008c0a:	3301      	adds	r3, #1
 8008c0c:	d003      	beq.n	8008c16 <_fwalk_reent+0x3a>
 8008c0e:	4629      	mov	r1, r5
 8008c10:	4630      	mov	r0, r6
 8008c12:	47c0      	blx	r8
 8008c14:	4307      	orrs	r7, r0
 8008c16:	3568      	adds	r5, #104	; 0x68
 8008c18:	e7e9      	b.n	8008bee <_fwalk_reent+0x12>

08008c1a <__retarget_lock_init_recursive>:
 8008c1a:	4770      	bx	lr

08008c1c <__retarget_lock_acquire_recursive>:
 8008c1c:	4770      	bx	lr

08008c1e <__retarget_lock_release_recursive>:
 8008c1e:	4770      	bx	lr

08008c20 <__swhatbuf_r>:
 8008c20:	b570      	push	{r4, r5, r6, lr}
 8008c22:	460e      	mov	r6, r1
 8008c24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008c28:	4614      	mov	r4, r2
 8008c2a:	2900      	cmp	r1, #0
 8008c2c:	461d      	mov	r5, r3
 8008c2e:	b096      	sub	sp, #88	; 0x58
 8008c30:	da08      	bge.n	8008c44 <__swhatbuf_r+0x24>
 8008c32:	2200      	movs	r2, #0
 8008c34:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8008c38:	602a      	str	r2, [r5, #0]
 8008c3a:	061a      	lsls	r2, r3, #24
 8008c3c:	d410      	bmi.n	8008c60 <__swhatbuf_r+0x40>
 8008c3e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008c42:	e00e      	b.n	8008c62 <__swhatbuf_r+0x42>
 8008c44:	466a      	mov	r2, sp
 8008c46:	f000 f903 	bl	8008e50 <_fstat_r>
 8008c4a:	2800      	cmp	r0, #0
 8008c4c:	dbf1      	blt.n	8008c32 <__swhatbuf_r+0x12>
 8008c4e:	9a01      	ldr	r2, [sp, #4]
 8008c50:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008c54:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008c58:	425a      	negs	r2, r3
 8008c5a:	415a      	adcs	r2, r3
 8008c5c:	602a      	str	r2, [r5, #0]
 8008c5e:	e7ee      	b.n	8008c3e <__swhatbuf_r+0x1e>
 8008c60:	2340      	movs	r3, #64	; 0x40
 8008c62:	2000      	movs	r0, #0
 8008c64:	6023      	str	r3, [r4, #0]
 8008c66:	b016      	add	sp, #88	; 0x58
 8008c68:	bd70      	pop	{r4, r5, r6, pc}
	...

08008c6c <__smakebuf_r>:
 8008c6c:	898b      	ldrh	r3, [r1, #12]
 8008c6e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008c70:	079d      	lsls	r5, r3, #30
 8008c72:	4606      	mov	r6, r0
 8008c74:	460c      	mov	r4, r1
 8008c76:	d507      	bpl.n	8008c88 <__smakebuf_r+0x1c>
 8008c78:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008c7c:	6023      	str	r3, [r4, #0]
 8008c7e:	6123      	str	r3, [r4, #16]
 8008c80:	2301      	movs	r3, #1
 8008c82:	6163      	str	r3, [r4, #20]
 8008c84:	b002      	add	sp, #8
 8008c86:	bd70      	pop	{r4, r5, r6, pc}
 8008c88:	466a      	mov	r2, sp
 8008c8a:	ab01      	add	r3, sp, #4
 8008c8c:	f7ff ffc8 	bl	8008c20 <__swhatbuf_r>
 8008c90:	9900      	ldr	r1, [sp, #0]
 8008c92:	4605      	mov	r5, r0
 8008c94:	4630      	mov	r0, r6
 8008c96:	f7ff f969 	bl	8007f6c <_malloc_r>
 8008c9a:	b948      	cbnz	r0, 8008cb0 <__smakebuf_r+0x44>
 8008c9c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008ca0:	059a      	lsls	r2, r3, #22
 8008ca2:	d4ef      	bmi.n	8008c84 <__smakebuf_r+0x18>
 8008ca4:	f023 0303 	bic.w	r3, r3, #3
 8008ca8:	f043 0302 	orr.w	r3, r3, #2
 8008cac:	81a3      	strh	r3, [r4, #12]
 8008cae:	e7e3      	b.n	8008c78 <__smakebuf_r+0xc>
 8008cb0:	4b0d      	ldr	r3, [pc, #52]	; (8008ce8 <__smakebuf_r+0x7c>)
 8008cb2:	62b3      	str	r3, [r6, #40]	; 0x28
 8008cb4:	89a3      	ldrh	r3, [r4, #12]
 8008cb6:	6020      	str	r0, [r4, #0]
 8008cb8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008cbc:	81a3      	strh	r3, [r4, #12]
 8008cbe:	9b00      	ldr	r3, [sp, #0]
 8008cc0:	6120      	str	r0, [r4, #16]
 8008cc2:	6163      	str	r3, [r4, #20]
 8008cc4:	9b01      	ldr	r3, [sp, #4]
 8008cc6:	b15b      	cbz	r3, 8008ce0 <__smakebuf_r+0x74>
 8008cc8:	4630      	mov	r0, r6
 8008cca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008cce:	f000 f8d1 	bl	8008e74 <_isatty_r>
 8008cd2:	b128      	cbz	r0, 8008ce0 <__smakebuf_r+0x74>
 8008cd4:	89a3      	ldrh	r3, [r4, #12]
 8008cd6:	f023 0303 	bic.w	r3, r3, #3
 8008cda:	f043 0301 	orr.w	r3, r3, #1
 8008cde:	81a3      	strh	r3, [r4, #12]
 8008ce0:	89a0      	ldrh	r0, [r4, #12]
 8008ce2:	4305      	orrs	r5, r0
 8008ce4:	81a5      	strh	r5, [r4, #12]
 8008ce6:	e7cd      	b.n	8008c84 <__smakebuf_r+0x18>
 8008ce8:	08008a79 	.word	0x08008a79

08008cec <_malloc_usable_size_r>:
 8008cec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008cf0:	1f18      	subs	r0, r3, #4
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	bfbc      	itt	lt
 8008cf6:	580b      	ldrlt	r3, [r1, r0]
 8008cf8:	18c0      	addlt	r0, r0, r3
 8008cfa:	4770      	bx	lr

08008cfc <_raise_r>:
 8008cfc:	291f      	cmp	r1, #31
 8008cfe:	b538      	push	{r3, r4, r5, lr}
 8008d00:	4604      	mov	r4, r0
 8008d02:	460d      	mov	r5, r1
 8008d04:	d904      	bls.n	8008d10 <_raise_r+0x14>
 8008d06:	2316      	movs	r3, #22
 8008d08:	6003      	str	r3, [r0, #0]
 8008d0a:	f04f 30ff 	mov.w	r0, #4294967295
 8008d0e:	bd38      	pop	{r3, r4, r5, pc}
 8008d10:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008d12:	b112      	cbz	r2, 8008d1a <_raise_r+0x1e>
 8008d14:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008d18:	b94b      	cbnz	r3, 8008d2e <_raise_r+0x32>
 8008d1a:	4620      	mov	r0, r4
 8008d1c:	f000 f830 	bl	8008d80 <_getpid_r>
 8008d20:	462a      	mov	r2, r5
 8008d22:	4601      	mov	r1, r0
 8008d24:	4620      	mov	r0, r4
 8008d26:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008d2a:	f000 b817 	b.w	8008d5c <_kill_r>
 8008d2e:	2b01      	cmp	r3, #1
 8008d30:	d00a      	beq.n	8008d48 <_raise_r+0x4c>
 8008d32:	1c59      	adds	r1, r3, #1
 8008d34:	d103      	bne.n	8008d3e <_raise_r+0x42>
 8008d36:	2316      	movs	r3, #22
 8008d38:	6003      	str	r3, [r0, #0]
 8008d3a:	2001      	movs	r0, #1
 8008d3c:	e7e7      	b.n	8008d0e <_raise_r+0x12>
 8008d3e:	2400      	movs	r4, #0
 8008d40:	4628      	mov	r0, r5
 8008d42:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008d46:	4798      	blx	r3
 8008d48:	2000      	movs	r0, #0
 8008d4a:	e7e0      	b.n	8008d0e <_raise_r+0x12>

08008d4c <raise>:
 8008d4c:	4b02      	ldr	r3, [pc, #8]	; (8008d58 <raise+0xc>)
 8008d4e:	4601      	mov	r1, r0
 8008d50:	6818      	ldr	r0, [r3, #0]
 8008d52:	f7ff bfd3 	b.w	8008cfc <_raise_r>
 8008d56:	bf00      	nop
 8008d58:	20000014 	.word	0x20000014

08008d5c <_kill_r>:
 8008d5c:	b538      	push	{r3, r4, r5, lr}
 8008d5e:	2300      	movs	r3, #0
 8008d60:	4d06      	ldr	r5, [pc, #24]	; (8008d7c <_kill_r+0x20>)
 8008d62:	4604      	mov	r4, r0
 8008d64:	4608      	mov	r0, r1
 8008d66:	4611      	mov	r1, r2
 8008d68:	602b      	str	r3, [r5, #0]
 8008d6a:	f7f9 f89c 	bl	8001ea6 <_kill>
 8008d6e:	1c43      	adds	r3, r0, #1
 8008d70:	d102      	bne.n	8008d78 <_kill_r+0x1c>
 8008d72:	682b      	ldr	r3, [r5, #0]
 8008d74:	b103      	cbz	r3, 8008d78 <_kill_r+0x1c>
 8008d76:	6023      	str	r3, [r4, #0]
 8008d78:	bd38      	pop	{r3, r4, r5, pc}
 8008d7a:	bf00      	nop
 8008d7c:	20001350 	.word	0x20001350

08008d80 <_getpid_r>:
 8008d80:	f7f9 b88a 	b.w	8001e98 <_getpid>

08008d84 <__sread>:
 8008d84:	b510      	push	{r4, lr}
 8008d86:	460c      	mov	r4, r1
 8008d88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d8c:	f000 f894 	bl	8008eb8 <_read_r>
 8008d90:	2800      	cmp	r0, #0
 8008d92:	bfab      	itete	ge
 8008d94:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008d96:	89a3      	ldrhlt	r3, [r4, #12]
 8008d98:	181b      	addge	r3, r3, r0
 8008d9a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008d9e:	bfac      	ite	ge
 8008da0:	6563      	strge	r3, [r4, #84]	; 0x54
 8008da2:	81a3      	strhlt	r3, [r4, #12]
 8008da4:	bd10      	pop	{r4, pc}

08008da6 <__swrite>:
 8008da6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008daa:	461f      	mov	r7, r3
 8008dac:	898b      	ldrh	r3, [r1, #12]
 8008dae:	4605      	mov	r5, r0
 8008db0:	05db      	lsls	r3, r3, #23
 8008db2:	460c      	mov	r4, r1
 8008db4:	4616      	mov	r6, r2
 8008db6:	d505      	bpl.n	8008dc4 <__swrite+0x1e>
 8008db8:	2302      	movs	r3, #2
 8008dba:	2200      	movs	r2, #0
 8008dbc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008dc0:	f000 f868 	bl	8008e94 <_lseek_r>
 8008dc4:	89a3      	ldrh	r3, [r4, #12]
 8008dc6:	4632      	mov	r2, r6
 8008dc8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008dcc:	81a3      	strh	r3, [r4, #12]
 8008dce:	4628      	mov	r0, r5
 8008dd0:	463b      	mov	r3, r7
 8008dd2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008dd6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008dda:	f000 b817 	b.w	8008e0c <_write_r>

08008dde <__sseek>:
 8008dde:	b510      	push	{r4, lr}
 8008de0:	460c      	mov	r4, r1
 8008de2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008de6:	f000 f855 	bl	8008e94 <_lseek_r>
 8008dea:	1c43      	adds	r3, r0, #1
 8008dec:	89a3      	ldrh	r3, [r4, #12]
 8008dee:	bf15      	itete	ne
 8008df0:	6560      	strne	r0, [r4, #84]	; 0x54
 8008df2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008df6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008dfa:	81a3      	strheq	r3, [r4, #12]
 8008dfc:	bf18      	it	ne
 8008dfe:	81a3      	strhne	r3, [r4, #12]
 8008e00:	bd10      	pop	{r4, pc}

08008e02 <__sclose>:
 8008e02:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008e06:	f000 b813 	b.w	8008e30 <_close_r>
	...

08008e0c <_write_r>:
 8008e0c:	b538      	push	{r3, r4, r5, lr}
 8008e0e:	4604      	mov	r4, r0
 8008e10:	4608      	mov	r0, r1
 8008e12:	4611      	mov	r1, r2
 8008e14:	2200      	movs	r2, #0
 8008e16:	4d05      	ldr	r5, [pc, #20]	; (8008e2c <_write_r+0x20>)
 8008e18:	602a      	str	r2, [r5, #0]
 8008e1a:	461a      	mov	r2, r3
 8008e1c:	f7f8 f8ba 	bl	8000f94 <_write>
 8008e20:	1c43      	adds	r3, r0, #1
 8008e22:	d102      	bne.n	8008e2a <_write_r+0x1e>
 8008e24:	682b      	ldr	r3, [r5, #0]
 8008e26:	b103      	cbz	r3, 8008e2a <_write_r+0x1e>
 8008e28:	6023      	str	r3, [r4, #0]
 8008e2a:	bd38      	pop	{r3, r4, r5, pc}
 8008e2c:	20001350 	.word	0x20001350

08008e30 <_close_r>:
 8008e30:	b538      	push	{r3, r4, r5, lr}
 8008e32:	2300      	movs	r3, #0
 8008e34:	4d05      	ldr	r5, [pc, #20]	; (8008e4c <_close_r+0x1c>)
 8008e36:	4604      	mov	r4, r0
 8008e38:	4608      	mov	r0, r1
 8008e3a:	602b      	str	r3, [r5, #0]
 8008e3c:	f7f9 f86a 	bl	8001f14 <_close>
 8008e40:	1c43      	adds	r3, r0, #1
 8008e42:	d102      	bne.n	8008e4a <_close_r+0x1a>
 8008e44:	682b      	ldr	r3, [r5, #0]
 8008e46:	b103      	cbz	r3, 8008e4a <_close_r+0x1a>
 8008e48:	6023      	str	r3, [r4, #0]
 8008e4a:	bd38      	pop	{r3, r4, r5, pc}
 8008e4c:	20001350 	.word	0x20001350

08008e50 <_fstat_r>:
 8008e50:	b538      	push	{r3, r4, r5, lr}
 8008e52:	2300      	movs	r3, #0
 8008e54:	4d06      	ldr	r5, [pc, #24]	; (8008e70 <_fstat_r+0x20>)
 8008e56:	4604      	mov	r4, r0
 8008e58:	4608      	mov	r0, r1
 8008e5a:	4611      	mov	r1, r2
 8008e5c:	602b      	str	r3, [r5, #0]
 8008e5e:	f7f9 f864 	bl	8001f2a <_fstat>
 8008e62:	1c43      	adds	r3, r0, #1
 8008e64:	d102      	bne.n	8008e6c <_fstat_r+0x1c>
 8008e66:	682b      	ldr	r3, [r5, #0]
 8008e68:	b103      	cbz	r3, 8008e6c <_fstat_r+0x1c>
 8008e6a:	6023      	str	r3, [r4, #0]
 8008e6c:	bd38      	pop	{r3, r4, r5, pc}
 8008e6e:	bf00      	nop
 8008e70:	20001350 	.word	0x20001350

08008e74 <_isatty_r>:
 8008e74:	b538      	push	{r3, r4, r5, lr}
 8008e76:	2300      	movs	r3, #0
 8008e78:	4d05      	ldr	r5, [pc, #20]	; (8008e90 <_isatty_r+0x1c>)
 8008e7a:	4604      	mov	r4, r0
 8008e7c:	4608      	mov	r0, r1
 8008e7e:	602b      	str	r3, [r5, #0]
 8008e80:	f7f9 f862 	bl	8001f48 <_isatty>
 8008e84:	1c43      	adds	r3, r0, #1
 8008e86:	d102      	bne.n	8008e8e <_isatty_r+0x1a>
 8008e88:	682b      	ldr	r3, [r5, #0]
 8008e8a:	b103      	cbz	r3, 8008e8e <_isatty_r+0x1a>
 8008e8c:	6023      	str	r3, [r4, #0]
 8008e8e:	bd38      	pop	{r3, r4, r5, pc}
 8008e90:	20001350 	.word	0x20001350

08008e94 <_lseek_r>:
 8008e94:	b538      	push	{r3, r4, r5, lr}
 8008e96:	4604      	mov	r4, r0
 8008e98:	4608      	mov	r0, r1
 8008e9a:	4611      	mov	r1, r2
 8008e9c:	2200      	movs	r2, #0
 8008e9e:	4d05      	ldr	r5, [pc, #20]	; (8008eb4 <_lseek_r+0x20>)
 8008ea0:	602a      	str	r2, [r5, #0]
 8008ea2:	461a      	mov	r2, r3
 8008ea4:	f7f9 f85a 	bl	8001f5c <_lseek>
 8008ea8:	1c43      	adds	r3, r0, #1
 8008eaa:	d102      	bne.n	8008eb2 <_lseek_r+0x1e>
 8008eac:	682b      	ldr	r3, [r5, #0]
 8008eae:	b103      	cbz	r3, 8008eb2 <_lseek_r+0x1e>
 8008eb0:	6023      	str	r3, [r4, #0]
 8008eb2:	bd38      	pop	{r3, r4, r5, pc}
 8008eb4:	20001350 	.word	0x20001350

08008eb8 <_read_r>:
 8008eb8:	b538      	push	{r3, r4, r5, lr}
 8008eba:	4604      	mov	r4, r0
 8008ebc:	4608      	mov	r0, r1
 8008ebe:	4611      	mov	r1, r2
 8008ec0:	2200      	movs	r2, #0
 8008ec2:	4d05      	ldr	r5, [pc, #20]	; (8008ed8 <_read_r+0x20>)
 8008ec4:	602a      	str	r2, [r5, #0]
 8008ec6:	461a      	mov	r2, r3
 8008ec8:	f7f9 f807 	bl	8001eda <_read>
 8008ecc:	1c43      	adds	r3, r0, #1
 8008ece:	d102      	bne.n	8008ed6 <_read_r+0x1e>
 8008ed0:	682b      	ldr	r3, [r5, #0]
 8008ed2:	b103      	cbz	r3, 8008ed6 <_read_r+0x1e>
 8008ed4:	6023      	str	r3, [r4, #0]
 8008ed6:	bd38      	pop	{r3, r4, r5, pc}
 8008ed8:	20001350 	.word	0x20001350

08008edc <_init>:
 8008edc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ede:	bf00      	nop
 8008ee0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008ee2:	bc08      	pop	{r3}
 8008ee4:	469e      	mov	lr, r3
 8008ee6:	4770      	bx	lr

08008ee8 <_fini>:
 8008ee8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008eea:	bf00      	nop
 8008eec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008eee:	bc08      	pop	{r3}
 8008ef0:	469e      	mov	lr, r3
 8008ef2:	4770      	bx	lr
