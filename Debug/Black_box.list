
Black_box.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000084dc  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000092c  080085f0  080085f0  000185f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008f1c  08008f1c  000201e4  2**0
                  CONTENTS
  4 .ARM          00000000  08008f1c  08008f1c  000201e4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008f1c  08008f1c  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008f1c  08008f1c  00018f1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008f20  08008f20  00018f20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  08008f24  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001124  200001e4  08009108  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001308  08009108  00021308  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015d01  00000000  00000000  0002020d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003251  00000000  00000000  00035f0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015f8  00000000  00000000  00039160  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000014a0  00000000  00000000  0003a758  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b439  00000000  00000000  0003bbf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001735e  00000000  00000000  00057031  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009ab9a  00000000  00000000  0006e38f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00108f29  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006eb0  00000000  00000000  00108f7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e4 	.word	0x200001e4
 800012c:	00000000 	.word	0x00000000
 8000130:	080085d4 	.word	0x080085d4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e8 	.word	0x200001e8
 800014c:	080085d4 	.word	0x080085d4

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <RingBuf_Init>:
 * @param[in] size Size of buffer
 * @param[in] cellsize Size of 1 cell [bytes]
 * @param[in] rb #RINGBUF_t structure instance
 * @return #RINGBUF_STATUS enum
 */
RINGBUF_STATUS RingBuf_Init(void *buf, u16_t size, size_t cellsize, RINGBUF_t *rb) {
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b084      	sub	sp, #16
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	60f8      	str	r0, [r7, #12]
 8000a90:	607a      	str	r2, [r7, #4]
 8000a92:	603b      	str	r3, [r7, #0]
 8000a94:	460b      	mov	r3, r1
 8000a96:	817b      	strh	r3, [r7, #10]
    rb->size = size; // size of array
 8000a98:	897a      	ldrh	r2, [r7, #10]
 8000a9a:	683b      	ldr	r3, [r7, #0]
 8000a9c:	60da      	str	r2, [r3, #12]
    rb->cell_size = cellsize; // size of 1 cell of array
 8000a9e:	683b      	ldr	r3, [r7, #0]
 8000aa0:	687a      	ldr	r2, [r7, #4]
 8000aa2:	611a      	str	r2, [r3, #16]
    rb->buf = buf;      // set pointer to buffer
 8000aa4:	683b      	ldr	r3, [r7, #0]
 8000aa6:	68fa      	ldr	r2, [r7, #12]
 8000aa8:	601a      	str	r2, [r3, #0]
    RingBuf_Clear(rb); // clear all
 8000aaa:	6838      	ldr	r0, [r7, #0]
 8000aac:	f000 f80b 	bl	8000ac6 <RingBuf_Clear>
    return rb->buf ? RINGBUF_OK : RINGBUF_PARAM_ERR;
 8000ab0:	683b      	ldr	r3, [r7, #0]
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d001      	beq.n	8000abc <RingBuf_Init+0x34>
 8000ab8:	2300      	movs	r3, #0
 8000aba:	e000      	b.n	8000abe <RingBuf_Init+0x36>
 8000abc:	2302      	movs	r3, #2
}
 8000abe:	4618      	mov	r0, r3
 8000ac0:	3710      	adds	r7, #16
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd80      	pop	{r7, pc}

08000ac6 <RingBuf_Clear>:
 * @note Disable interrupts while clearing
 *
 * @param[in] rb #RINGBUF_t structure instance
 * @return #RINGBUF_STATUS enum
 */
RINGBUF_STATUS RingBuf_Clear(RINGBUF_t *rb) {
 8000ac6:	b480      	push	{r7}
 8000ac8:	b083      	sub	sp, #12
 8000aca:	af00      	add	r7, sp, #0
 8000acc:	6078      	str	r0, [r7, #4]
    if (rb->buf == NULL) return RINGBUF_PARAM_ERR;
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d101      	bne.n	8000ada <RingBuf_Clear+0x14>
 8000ad6:	2302      	movs	r3, #2
 8000ad8:	e005      	b.n	8000ae6 <RingBuf_Clear+0x20>
    rb->head = rb->tail = 0;
 8000ada:	2300      	movs	r3, #0
 8000adc:	687a      	ldr	r2, [r7, #4]
 8000ade:	6053      	str	r3, [r2, #4]
 8000ae0:	687a      	ldr	r2, [r7, #4]
 8000ae2:	6093      	str	r3, [r2, #8]
    return RINGBUF_OK;
 8000ae4:	2300      	movs	r3, #0
}
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	370c      	adds	r7, #12
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bc80      	pop	{r7}
 8000aee:	4770      	bx	lr

08000af0 <RingBuf_Available>:
 *
 * @param[out] len Size to read [bytes]
 * @param[in] rb #RINGBUF_t structure instance
 * @return #RINGBUF_STATUS enum
 */
RINGBUF_STATUS RingBuf_Available(u16_t *len, RINGBUF_t *rb) {
 8000af0:	b480      	push	{r7}
 8000af2:	b083      	sub	sp, #12
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
 8000af8:	6039      	str	r1, [r7, #0]
    if (rb->buf == NULL) return RINGBUF_PARAM_ERR;
 8000afa:	683b      	ldr	r3, [r7, #0]
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d101      	bne.n	8000b06 <RingBuf_Available+0x16>
 8000b02:	2302      	movs	r3, #2
 8000b04:	e020      	b.n	8000b48 <RingBuf_Available+0x58>
    if (rb->head < rb->tail)
 8000b06:	683b      	ldr	r3, [r7, #0]
 8000b08:	689a      	ldr	r2, [r3, #8]
 8000b0a:	683b      	ldr	r3, [r7, #0]
 8000b0c:	685b      	ldr	r3, [r3, #4]
 8000b0e:	429a      	cmp	r2, r3
 8000b10:	d20f      	bcs.n	8000b32 <RingBuf_Available+0x42>
        *len = rb->size - rb->tail + rb->head;
 8000b12:	683b      	ldr	r3, [r7, #0]
 8000b14:	68db      	ldr	r3, [r3, #12]
 8000b16:	b29a      	uxth	r2, r3
 8000b18:	683b      	ldr	r3, [r7, #0]
 8000b1a:	685b      	ldr	r3, [r3, #4]
 8000b1c:	b29b      	uxth	r3, r3
 8000b1e:	1ad3      	subs	r3, r2, r3
 8000b20:	b29a      	uxth	r2, r3
 8000b22:	683b      	ldr	r3, [r7, #0]
 8000b24:	689b      	ldr	r3, [r3, #8]
 8000b26:	b29b      	uxth	r3, r3
 8000b28:	4413      	add	r3, r2
 8000b2a:	b29a      	uxth	r2, r3
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	801a      	strh	r2, [r3, #0]
 8000b30:	e009      	b.n	8000b46 <RingBuf_Available+0x56>
    else
        *len = rb->head - rb->tail;
 8000b32:	683b      	ldr	r3, [r7, #0]
 8000b34:	689b      	ldr	r3, [r3, #8]
 8000b36:	b29a      	uxth	r2, r3
 8000b38:	683b      	ldr	r3, [r7, #0]
 8000b3a:	685b      	ldr	r3, [r3, #4]
 8000b3c:	b29b      	uxth	r3, r3
 8000b3e:	1ad3      	subs	r3, r2, r3
 8000b40:	b29a      	uxth	r2, r3
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	801a      	strh	r2, [r3, #0]
    return RINGBUF_OK;
 8000b46:	2300      	movs	r3, #0
}
 8000b48:	4618      	mov	r0, r3
 8000b4a:	370c      	adds	r7, #12
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	bc80      	pop	{r7}
 8000b50:	4770      	bx	lr

08000b52 <RingBuf_BytePut>:
 *
 * @param[in] data Data byte to be put [bytes]
 * @param[in] rb #RINGBUF_t structure instance
 * @return #RINGBUF_STATUS enum
 */
RINGBUF_STATUS RingBuf_BytePut(const u8_t data, RINGBUF_t *rb) {
 8000b52:	b480      	push	{r7}
 8000b54:	b083      	sub	sp, #12
 8000b56:	af00      	add	r7, sp, #0
 8000b58:	4603      	mov	r3, r0
 8000b5a:	6039      	str	r1, [r7, #0]
 8000b5c:	71fb      	strb	r3, [r7, #7]
    if (rb->buf == NULL) return RINGBUF_PARAM_ERR;
 8000b5e:	683b      	ldr	r3, [r7, #0]
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d101      	bne.n	8000b6a <RingBuf_BytePut+0x18>
 8000b66:	2302      	movs	r3, #2
 8000b68:	e013      	b.n	8000b92 <RingBuf_BytePut+0x40>
    rb->buf[rb->head++] = data; // put byte in cell and increment data
 8000b6a:	683b      	ldr	r3, [r7, #0]
 8000b6c:	681a      	ldr	r2, [r3, #0]
 8000b6e:	683b      	ldr	r3, [r7, #0]
 8000b70:	689b      	ldr	r3, [r3, #8]
 8000b72:	1c58      	adds	r0, r3, #1
 8000b74:	6839      	ldr	r1, [r7, #0]
 8000b76:	6088      	str	r0, [r1, #8]
 8000b78:	4413      	add	r3, r2
 8000b7a:	79fa      	ldrb	r2, [r7, #7]
 8000b7c:	701a      	strb	r2, [r3, #0]
    if (rb->head >= rb->size) // if overflow
 8000b7e:	683b      	ldr	r3, [r7, #0]
 8000b80:	689a      	ldr	r2, [r3, #8]
 8000b82:	683b      	ldr	r3, [r7, #0]
 8000b84:	68db      	ldr	r3, [r3, #12]
 8000b86:	429a      	cmp	r2, r3
 8000b88:	d302      	bcc.n	8000b90 <RingBuf_BytePut+0x3e>
        rb->head = 0;   // set to start
 8000b8a:	683b      	ldr	r3, [r7, #0]
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	609a      	str	r2, [r3, #8]
    return RINGBUF_OK;
 8000b90:	2300      	movs	r3, #0
}
 8000b92:	4618      	mov	r0, r3
 8000b94:	370c      	adds	r7, #12
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bc80      	pop	{r7}
 8000b9a:	4770      	bx	lr

08000b9c <RingBuf_DataRead>:
 * @param[out] data Data from the buffer
 * @param[in] len Length of data to be read [bytes]
 * @param[in] rb #RINGBUF_t structure instance
 * @return #RINGBUF_STATUS enum
 */
RINGBUF_STATUS RingBuf_DataRead(void *data, u16_t len, RINGBUF_t *rb) {
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b086      	sub	sp, #24
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	60f8      	str	r0, [r7, #12]
 8000ba4:	460b      	mov	r3, r1
 8000ba6:	607a      	str	r2, [r7, #4]
 8000ba8:	817b      	strh	r3, [r7, #10]
    if (rb->buf == NULL) return RINGBUF_PARAM_ERR;
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d101      	bne.n	8000bb6 <RingBuf_DataRead+0x1a>
 8000bb2:	2302      	movs	r3, #2
 8000bb4:	e01c      	b.n	8000bf0 <RingBuf_DataRead+0x54>
    // read data
    RINGBUF_STATUS st = RingBuf_DataWatch(data, len, rb);
 8000bb6:	897b      	ldrh	r3, [r7, #10]
 8000bb8:	687a      	ldr	r2, [r7, #4]
 8000bba:	4619      	mov	r1, r3
 8000bbc:	68f8      	ldr	r0, [r7, #12]
 8000bbe:	f000 f81b 	bl	8000bf8 <RingBuf_DataWatch>
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	75fb      	strb	r3, [r7, #23]
    if (st != RINGBUF_OK)
 8000bc6:	7dfb      	ldrb	r3, [r7, #23]
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d001      	beq.n	8000bd0 <RingBuf_DataRead+0x34>
        return st;
 8000bcc:	7dfb      	ldrb	r3, [r7, #23]
 8000bce:	e00f      	b.n	8000bf0 <RingBuf_DataRead+0x54>
    // shift to the next head
    rb->tail += len;
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	685a      	ldr	r2, [r3, #4]
 8000bd4:	897b      	ldrh	r3, [r7, #10]
 8000bd6:	441a      	add	r2, r3
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	605a      	str	r2, [r3, #4]
    if (rb->tail >= rb->size)
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	685a      	ldr	r2, [r3, #4]
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	68db      	ldr	r3, [r3, #12]
 8000be4:	429a      	cmp	r2, r3
 8000be6:	d302      	bcc.n	8000bee <RingBuf_DataRead+0x52>
        rb->tail = 0;
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	2200      	movs	r2, #0
 8000bec:	605a      	str	r2, [r3, #4]
    return st;
 8000bee:	7dfb      	ldrb	r3, [r7, #23]
}
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	3718      	adds	r7, #24
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	bd80      	pop	{r7, pc}

08000bf8 <RingBuf_DataWatch>:
 * @param[out] data Data from buffer
 * @param[in] len Length of data to be read [bytes]
 * @param[in] rb #RINGBUF_t structure instance
 * @return #RINGBUF_STATUS enum
 */
RINGBUF_STATUS RingBuf_DataWatch(void *data, u16_t len, RINGBUF_t *rb) {
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b086      	sub	sp, #24
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	60f8      	str	r0, [r7, #12]
 8000c00:	460b      	mov	r3, r1
 8000c02:	607a      	str	r2, [r7, #4]
 8000c04:	817b      	strh	r3, [r7, #10]
    if (data == NULL)
 8000c06:	68fb      	ldr	r3, [r7, #12]
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d101      	bne.n	8000c10 <RingBuf_DataWatch+0x18>
        return RINGBUF_PARAM_ERR;
 8000c0c:	2302      	movs	r3, #2
 8000c0e:	e04e      	b.n	8000cae <RingBuf_DataWatch+0xb6>
    if (len > rb->size)
 8000c10:	897a      	ldrh	r2, [r7, #10]
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	68db      	ldr	r3, [r3, #12]
 8000c16:	429a      	cmp	r2, r3
 8000c18:	d901      	bls.n	8000c1e <RingBuf_DataWatch+0x26>
        return RINGBUF_OVERFLOW;
 8000c1a:	2303      	movs	r3, #3
 8000c1c:	e047      	b.n	8000cae <RingBuf_DataWatch+0xb6>
    // OUTPUT data index start address
    u16_t s_addr = 0;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	82fb      	strh	r3, [r7, #22]
    // available space in the end of buffer
    u16_t space = rb->size - rb->tail;
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	68db      	ldr	r3, [r3, #12]
 8000c26:	b29a      	uxth	r2, r3
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	685b      	ldr	r3, [r3, #4]
 8000c2c:	b29b      	uxth	r3, r3
 8000c2e:	1ad3      	subs	r3, r2, r3
 8000c30:	827b      	strh	r3, [r7, #18]
    u16_t loc_tail = rb->tail;
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	685b      	ldr	r3, [r3, #4]
 8000c36:	82bb      	strh	r3, [r7, #20]
    if (len > space) { // if len > available space
 8000c38:	897a      	ldrh	r2, [r7, #10]
 8000c3a:	8a7b      	ldrh	r3, [r7, #18]
 8000c3c:	429a      	cmp	r2, r3
 8000c3e:	d91e      	bls.n	8000c7e <RingBuf_DataWatch+0x86>
        // recast pointer to u8_t
        // copy data from available space
        memcpy(&data[s_addr * rb->cell_size], &rb->buf[loc_tail * rb->cell_size], space * rb->cell_size);
 8000c40:	8afb      	ldrh	r3, [r7, #22]
 8000c42:	687a      	ldr	r2, [r7, #4]
 8000c44:	6912      	ldr	r2, [r2, #16]
 8000c46:	fb02 f303 	mul.w	r3, r2, r3
 8000c4a:	68fa      	ldr	r2, [r7, #12]
 8000c4c:	18d0      	adds	r0, r2, r3
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	681a      	ldr	r2, [r3, #0]
 8000c52:	8abb      	ldrh	r3, [r7, #20]
 8000c54:	6879      	ldr	r1, [r7, #4]
 8000c56:	6909      	ldr	r1, [r1, #16]
 8000c58:	fb01 f303 	mul.w	r3, r1, r3
 8000c5c:	18d1      	adds	r1, r2, r3
 8000c5e:	8a7b      	ldrh	r3, [r7, #18]
 8000c60:	687a      	ldr	r2, [r7, #4]
 8000c62:	6912      	ldr	r2, [r2, #16]
 8000c64:	fb02 f303 	mul.w	r3, r2, r3
 8000c68:	461a      	mov	r2, r3
 8000c6a:	f004 fdd3 	bl	8005814 <memcpy>
        // next reading will start from 0
        loc_tail = 0;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	82bb      	strh	r3, [r7, #20]
        // new start address - space length
        s_addr = space;
 8000c72:	8a7b      	ldrh	r3, [r7, #18]
 8000c74:	82fb      	strh	r3, [r7, #22]
        // new length - len-space
        len -= space;
 8000c76:	897a      	ldrh	r2, [r7, #10]
 8000c78:	8a7b      	ldrh	r3, [r7, #18]
 8000c7a:	1ad3      	subs	r3, r2, r3
 8000c7c:	817b      	strh	r3, [r7, #10]
    }
    // copy all the data from the buf storage
    memcpy(&data[s_addr * rb->cell_size], &rb->buf[loc_tail * rb->cell_size], len * rb->cell_size);
 8000c7e:	8afb      	ldrh	r3, [r7, #22]
 8000c80:	687a      	ldr	r2, [r7, #4]
 8000c82:	6912      	ldr	r2, [r2, #16]
 8000c84:	fb02 f303 	mul.w	r3, r2, r3
 8000c88:	68fa      	ldr	r2, [r7, #12]
 8000c8a:	18d0      	adds	r0, r2, r3
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	681a      	ldr	r2, [r3, #0]
 8000c90:	8abb      	ldrh	r3, [r7, #20]
 8000c92:	6879      	ldr	r1, [r7, #4]
 8000c94:	6909      	ldr	r1, [r1, #16]
 8000c96:	fb01 f303 	mul.w	r3, r1, r3
 8000c9a:	18d1      	adds	r1, r2, r3
 8000c9c:	897b      	ldrh	r3, [r7, #10]
 8000c9e:	687a      	ldr	r2, [r7, #4]
 8000ca0:	6912      	ldr	r2, [r2, #16]
 8000ca2:	fb02 f303 	mul.w	r3, r2, r3
 8000ca6:	461a      	mov	r2, r3
 8000ca8:	f004 fdb4 	bl	8005814 <memcpy>
    return RINGBUF_OK;
 8000cac:	2300      	movs	r3, #0
}
 8000cae:	4618      	mov	r0, r3
 8000cb0:	3718      	adds	r7, #24
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bd80      	pop	{r7, pc}
	...

08000cb8 <lcd_init>:
uint8_t str_null[] = "NULL";

extern SPI_HandleTypeDef hspi2;

void lcd_init(void)
{
 8000cb8:	b590      	push	{r4, r7, lr}
 8000cba:	b085      	sub	sp, #20
 8000cbc:	af00      	add	r7, sp, #0
  DISP_RESET_OFF;
 8000cbe:	2201      	movs	r2, #1
 8000cc0:	2104      	movs	r1, #4
 8000cc2:	481a      	ldr	r0, [pc, #104]	; (8000d2c <lcd_init+0x74>)
 8000cc4:	f001 ffa8 	bl	8002c18 <HAL_GPIO_WritePin>
  DISP_INIT_SEND_DAT;
 8000cc8:	2201      	movs	r2, #1
 8000cca:	2102      	movs	r1, #2
 8000ccc:	4817      	ldr	r0, [pc, #92]	; (8000d2c <lcd_init+0x74>)
 8000cce:	f001 ffa3 	bl	8002c18 <HAL_GPIO_WritePin>
  HAL_Delay(2);
 8000cd2:	2002      	movs	r0, #2
 8000cd4:	f001 f92e 	bl	8001f34 <HAL_Delay>
  DISP_RESET_ON;
 8000cd8:	2200      	movs	r2, #0
 8000cda:	2104      	movs	r1, #4
 8000cdc:	4813      	ldr	r0, [pc, #76]	; (8000d2c <lcd_init+0x74>)
 8000cde:	f001 ff9b 	bl	8002c18 <HAL_GPIO_WritePin>
  HAL_Delay(2);
 8000ce2:	2002      	movs	r0, #2
 8000ce4:	f001 f926 	bl	8001f34 <HAL_Delay>
  DISP_RESET_OFF;
 8000ce8:	2201      	movs	r2, #1
 8000cea:	2104      	movs	r1, #4
 8000cec:	480f      	ldr	r0, [pc, #60]	; (8000d2c <lcd_init+0x74>)
 8000cee:	f001 ff93 	bl	8002c18 <HAL_GPIO_WritePin>
  DISP_INIT_SEND_COM;
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	2102      	movs	r1, #2
 8000cf6:	480d      	ldr	r0, [pc, #52]	; (8000d2c <lcd_init+0x74>)
 8000cf8:	f001 ff8e 	bl	8002c18 <HAL_GPIO_WritePin>
  uint8_t init_data_array[13] = {
 8000cfc:	4b0c      	ldr	r3, [pc, #48]	; (8000d30 <lcd_init+0x78>)
 8000cfe:	463c      	mov	r4, r7
 8000d00:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000d02:	c407      	stmia	r4!, {r0, r1, r2}
 8000d04:	7023      	strb	r3, [r4, #0]
	(0x10 | 0),       // Column Address Set - first byte (0-15)
	(0x00 | 0),       // Column Address Set - second byte (0-15)
	(0xAE | 1),       // Display on(1) / Display off (0)
	(0xA6 | 0),       // Display Normal(0) / Display Reverse(1)
  };
  HAL_SPI_Transmit(&hspi2, init_data_array, 13, 20);
 8000d06:	4639      	mov	r1, r7
 8000d08:	2314      	movs	r3, #20
 8000d0a:	220d      	movs	r2, #13
 8000d0c:	4809      	ldr	r0, [pc, #36]	; (8000d34 <lcd_init+0x7c>)
 8000d0e:	f003 fa55 	bl	80041bc <HAL_SPI_Transmit>
  lcd_buferase();
 8000d12:	f000 f8d3 	bl	8000ebc <lcd_buferase>
  lcd_bufupload();
 8000d16:	f000 f82f 	bl	8000d78 <lcd_bufupload>
  DISP_INIT_SEND_DAT;
 8000d1a:	2201      	movs	r2, #1
 8000d1c:	2102      	movs	r1, #2
 8000d1e:	4803      	ldr	r0, [pc, #12]	; (8000d2c <lcd_init+0x74>)
 8000d20:	f001 ff7a 	bl	8002c18 <HAL_GPIO_WritePin>
}
 8000d24:	bf00      	nop
 8000d26:	3714      	adds	r7, #20
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bd90      	pop	{r4, r7, pc}
 8000d2c:	40010800 	.word	0x40010800
 8000d30:	080085f0 	.word	0x080085f0
 8000d34:	20000edc 	.word	0x20000edc

08000d38 <lcd_sendcommands>:

void lcd_sendcommands(uint8_t* data, uint8_t N)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b082      	sub	sp, #8
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
 8000d40:	460b      	mov	r3, r1
 8000d42:	70fb      	strb	r3, [r7, #3]
  DISP_INIT_SEND_COM;
 8000d44:	2200      	movs	r2, #0
 8000d46:	2102      	movs	r1, #2
 8000d48:	4809      	ldr	r0, [pc, #36]	; (8000d70 <lcd_sendcommands+0x38>)
 8000d4a:	f001 ff65 	bl	8002c18 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi2, data, N, 10);
 8000d4e:	78fb      	ldrb	r3, [r7, #3]
 8000d50:	b29a      	uxth	r2, r3
 8000d52:	230a      	movs	r3, #10
 8000d54:	6879      	ldr	r1, [r7, #4]
 8000d56:	4807      	ldr	r0, [pc, #28]	; (8000d74 <lcd_sendcommands+0x3c>)
 8000d58:	f003 fa30 	bl	80041bc <HAL_SPI_Transmit>
  DISP_INIT_SEND_DAT;
 8000d5c:	2201      	movs	r2, #1
 8000d5e:	2102      	movs	r1, #2
 8000d60:	4803      	ldr	r0, [pc, #12]	; (8000d70 <lcd_sendcommands+0x38>)
 8000d62:	f001 ff59 	bl	8002c18 <HAL_GPIO_WritePin>
}
 8000d66:	bf00      	nop
 8000d68:	3708      	adds	r7, #8
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}
 8000d6e:	bf00      	nop
 8000d70:	40010800 	.word	0x40010800
 8000d74:	20000edc 	.word	0x20000edc

08000d78 <lcd_bufupload>:

void lcd_bufupload(void)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b082      	sub	sp, #8
 8000d7c:	af00      	add	r7, sp, #0
  for(uint8_t j = 0; j < 8; j++)
 8000d7e:	2300      	movs	r3, #0
 8000d80:	71fb      	strb	r3, [r7, #7]
 8000d82:	e018      	b.n	8000db6 <lcd_bufupload+0x3e>
  {
	uint8_t tmp_arr[] = {(0xB0 + j), 0x10, 0x00};
 8000d84:	79fb      	ldrb	r3, [r7, #7]
 8000d86:	3b50      	subs	r3, #80	; 0x50
 8000d88:	b2db      	uxtb	r3, r3
 8000d8a:	713b      	strb	r3, [r7, #4]
 8000d8c:	2310      	movs	r3, #16
 8000d8e:	717b      	strb	r3, [r7, #5]
 8000d90:	2300      	movs	r3, #0
 8000d92:	71bb      	strb	r3, [r7, #6]
    lcd_sendcommands(tmp_arr, 3);
 8000d94:	1d3b      	adds	r3, r7, #4
 8000d96:	2103      	movs	r1, #3
 8000d98:	4618      	mov	r0, r3
 8000d9a:	f7ff ffcd 	bl	8000d38 <lcd_sendcommands>
    HAL_SPI_Transmit(&hspi2, dispbuffer[j], 128, 10);
 8000d9e:	79fb      	ldrb	r3, [r7, #7]
 8000da0:	01db      	lsls	r3, r3, #7
 8000da2:	4a09      	ldr	r2, [pc, #36]	; (8000dc8 <lcd_bufupload+0x50>)
 8000da4:	1899      	adds	r1, r3, r2
 8000da6:	230a      	movs	r3, #10
 8000da8:	2280      	movs	r2, #128	; 0x80
 8000daa:	4808      	ldr	r0, [pc, #32]	; (8000dcc <lcd_bufupload+0x54>)
 8000dac:	f003 fa06 	bl	80041bc <HAL_SPI_Transmit>
  for(uint8_t j = 0; j < 8; j++)
 8000db0:	79fb      	ldrb	r3, [r7, #7]
 8000db2:	3301      	adds	r3, #1
 8000db4:	71fb      	strb	r3, [r7, #7]
 8000db6:	79fb      	ldrb	r3, [r7, #7]
 8000db8:	2b07      	cmp	r3, #7
 8000dba:	d9e3      	bls.n	8000d84 <lcd_bufupload+0xc>
  }
}
 8000dbc:	bf00      	nop
 8000dbe:	bf00      	nop
 8000dc0:	3708      	adds	r7, #8
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	bf00      	nop
 8000dc8:	20000200 	.word	0x20000200
 8000dcc:	20000edc 	.word	0x20000edc

08000dd0 <lcd_bufwsmb8x5>:


/******************************************/
void lcd_bufwsmb8x5(const uint8_t ch, uint8_t pg, uint8_t cl)
{
 8000dd0:	b4b0      	push	{r4, r5, r7}
 8000dd2:	b085      	sub	sp, #20
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	71fb      	strb	r3, [r7, #7]
 8000dda:	460b      	mov	r3, r1
 8000ddc:	71bb      	strb	r3, [r7, #6]
 8000dde:	4613      	mov	r3, r2
 8000de0:	717b      	strb	r3, [r7, #5]
	for(uint8_t i = 0; i < 5; i++)
 8000de2:	2300      	movs	r3, #0
 8000de4:	73fb      	strb	r3, [r7, #15]
 8000de6:	e015      	b.n	8000e14 <lcd_bufwsmb8x5+0x44>
	  {
	    dispbuffer[pg][cl + i] = char_8x5[ch][i];
 8000de8:	79fa      	ldrb	r2, [r7, #7]
 8000dea:	7bfc      	ldrb	r4, [r7, #15]
 8000dec:	79b8      	ldrb	r0, [r7, #6]
 8000dee:	7979      	ldrb	r1, [r7, #5]
 8000df0:	7bfb      	ldrb	r3, [r7, #15]
 8000df2:	4419      	add	r1, r3
 8000df4:	4d12      	ldr	r5, [pc, #72]	; (8000e40 <lcd_bufwsmb8x5+0x70>)
 8000df6:	4613      	mov	r3, r2
 8000df8:	009b      	lsls	r3, r3, #2
 8000dfa:	4413      	add	r3, r2
 8000dfc:	442b      	add	r3, r5
 8000dfe:	4423      	add	r3, r4
 8000e00:	781c      	ldrb	r4, [r3, #0]
 8000e02:	4a10      	ldr	r2, [pc, #64]	; (8000e44 <lcd_bufwsmb8x5+0x74>)
 8000e04:	01c3      	lsls	r3, r0, #7
 8000e06:	4413      	add	r3, r2
 8000e08:	440b      	add	r3, r1
 8000e0a:	4622      	mov	r2, r4
 8000e0c:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 0; i < 5; i++)
 8000e0e:	7bfb      	ldrb	r3, [r7, #15]
 8000e10:	3301      	adds	r3, #1
 8000e12:	73fb      	strb	r3, [r7, #15]
 8000e14:	7bfb      	ldrb	r3, [r7, #15]
 8000e16:	2b04      	cmp	r3, #4
 8000e18:	d9e6      	bls.n	8000de8 <lcd_bufwsmb8x5+0x18>
	  }
	cl = cl+5;
 8000e1a:	797b      	ldrb	r3, [r7, #5]
 8000e1c:	3305      	adds	r3, #5
 8000e1e:	717b      	strb	r3, [r7, #5]
	dispbuffer[pg][cl] = 0x00;
 8000e20:	79ba      	ldrb	r2, [r7, #6]
 8000e22:	797b      	ldrb	r3, [r7, #5]
 8000e24:	4907      	ldr	r1, [pc, #28]	; (8000e44 <lcd_bufwsmb8x5+0x74>)
 8000e26:	01d2      	lsls	r2, r2, #7
 8000e28:	440a      	add	r2, r1
 8000e2a:	4413      	add	r3, r2
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	701a      	strb	r2, [r3, #0]
	cl++;
 8000e30:	797b      	ldrb	r3, [r7, #5]
 8000e32:	3301      	adds	r3, #1
 8000e34:	717b      	strb	r3, [r7, #5]
}
 8000e36:	bf00      	nop
 8000e38:	3714      	adds	r7, #20
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bcb0      	pop	{r4, r5, r7}
 8000e3e:	4770      	bx	lr
 8000e40:	08008628 	.word	0x08008628
 8000e44:	20000200 	.word	0x20000200

08000e48 <lcd_bufwstr8x5>:

uint8_t lcd_bufwstr8x5(uint8_t *str, uint8_t pg, uint8_t cl)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b084      	sub	sp, #16
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
 8000e50:	460b      	mov	r3, r1
 8000e52:	70fb      	strb	r3, [r7, #3]
 8000e54:	4613      	mov	r3, r2
 8000e56:	70bb      	strb	r3, [r7, #2]
  if(str == NULL) str = str_null;
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d101      	bne.n	8000e62 <lcd_bufwstr8x5+0x1a>
 8000e5e:	4b16      	ldr	r3, [pc, #88]	; (8000eb8 <lcd_bufwstr8x5+0x70>)
 8000e60:	607b      	str	r3, [r7, #4]
  uint8_t i = 0;
 8000e62:	2300      	movs	r3, #0
 8000e64:	73fb      	strb	r3, [r7, #15]
  while(str[i])
 8000e66:	e01b      	b.n	8000ea0 <lcd_bufwstr8x5+0x58>
  {
	  lcd_bufwsmb8x5(str[i], pg, cl);
 8000e68:	7bfb      	ldrb	r3, [r7, #15]
 8000e6a:	687a      	ldr	r2, [r7, #4]
 8000e6c:	4413      	add	r3, r2
 8000e6e:	781b      	ldrb	r3, [r3, #0]
 8000e70:	78ba      	ldrb	r2, [r7, #2]
 8000e72:	78f9      	ldrb	r1, [r7, #3]
 8000e74:	4618      	mov	r0, r3
 8000e76:	f7ff ffab 	bl	8000dd0 <lcd_bufwsmb8x5>
    cl += 6;
 8000e7a:	78bb      	ldrb	r3, [r7, #2]
 8000e7c:	3306      	adds	r3, #6
 8000e7e:	70bb      	strb	r3, [r7, #2]
    if(cl > 122) {pg++; cl = 0;}
 8000e80:	78bb      	ldrb	r3, [r7, #2]
 8000e82:	2b7a      	cmp	r3, #122	; 0x7a
 8000e84:	d904      	bls.n	8000e90 <lcd_bufwstr8x5+0x48>
 8000e86:	78fb      	ldrb	r3, [r7, #3]
 8000e88:	3301      	adds	r3, #1
 8000e8a:	70fb      	strb	r3, [r7, #3]
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	70bb      	strb	r3, [r7, #2]
    if(pg > 7) return 0;
 8000e90:	78fb      	ldrb	r3, [r7, #3]
 8000e92:	2b07      	cmp	r3, #7
 8000e94:	d901      	bls.n	8000e9a <lcd_bufwstr8x5+0x52>
 8000e96:	2300      	movs	r3, #0
 8000e98:	e009      	b.n	8000eae <lcd_bufwstr8x5+0x66>
    i++;
 8000e9a:	7bfb      	ldrb	r3, [r7, #15]
 8000e9c:	3301      	adds	r3, #1
 8000e9e:	73fb      	strb	r3, [r7, #15]
  while(str[i])
 8000ea0:	7bfb      	ldrb	r3, [r7, #15]
 8000ea2:	687a      	ldr	r2, [r7, #4]
 8000ea4:	4413      	add	r3, r2
 8000ea6:	781b      	ldrb	r3, [r3, #0]
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d1dd      	bne.n	8000e68 <lcd_bufwstr8x5+0x20>
  }
  return i;
 8000eac:	7bfb      	ldrb	r3, [r7, #15]
}
 8000eae:	4618      	mov	r0, r3
 8000eb0:	3710      	adds	r7, #16
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	bf00      	nop
 8000eb8:	20000000 	.word	0x20000000

08000ebc <lcd_buferase>:
{

}

void lcd_buferase(void)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	b083      	sub	sp, #12
 8000ec0:	af00      	add	r7, sp, #0
  for(uint8_t j = 0; j < 8; j++)
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	71fb      	strb	r3, [r7, #7]
 8000ec6:	e014      	b.n	8000ef2 <lcd_buferase+0x36>
    for(uint8_t i = 0; i < 128; i++) dispbuffer[j][i] = 0;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	71bb      	strb	r3, [r7, #6]
 8000ecc:	e00a      	b.n	8000ee4 <lcd_buferase+0x28>
 8000ece:	79fa      	ldrb	r2, [r7, #7]
 8000ed0:	79bb      	ldrb	r3, [r7, #6]
 8000ed2:	490c      	ldr	r1, [pc, #48]	; (8000f04 <lcd_buferase+0x48>)
 8000ed4:	01d2      	lsls	r2, r2, #7
 8000ed6:	440a      	add	r2, r1
 8000ed8:	4413      	add	r3, r2
 8000eda:	2200      	movs	r2, #0
 8000edc:	701a      	strb	r2, [r3, #0]
 8000ede:	79bb      	ldrb	r3, [r7, #6]
 8000ee0:	3301      	adds	r3, #1
 8000ee2:	71bb      	strb	r3, [r7, #6]
 8000ee4:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	daf0      	bge.n	8000ece <lcd_buferase+0x12>
  for(uint8_t j = 0; j < 8; j++)
 8000eec:	79fb      	ldrb	r3, [r7, #7]
 8000eee:	3301      	adds	r3, #1
 8000ef0:	71fb      	strb	r3, [r7, #7]
 8000ef2:	79fb      	ldrb	r3, [r7, #7]
 8000ef4:	2b07      	cmp	r3, #7
 8000ef6:	d9e7      	bls.n	8000ec8 <lcd_buferase+0xc>
}
 8000ef8:	bf00      	nop
 8000efa:	bf00      	nop
 8000efc:	370c      	adds	r7, #12
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bc80      	pop	{r7}
 8000f02:	4770      	bx	lr
 8000f04:	20000200 	.word	0x20000200

08000f08 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	b083      	sub	sp, #12
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000f10:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000f14:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000f18:	f003 0301 	and.w	r3, r3, #1
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d013      	beq.n	8000f48 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000f20:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000f24:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000f28:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d00b      	beq.n	8000f48 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000f30:	e000      	b.n	8000f34 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000f32:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000f34:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d0f9      	beq.n	8000f32 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000f3e:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000f42:	687a      	ldr	r2, [r7, #4]
 8000f44:	b2d2      	uxtb	r2, r2
 8000f46:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000f48:	687b      	ldr	r3, [r7, #4]
}
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	370c      	adds	r7, #12
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bc80      	pop	{r7}
 8000f52:	4770      	bx	lr

08000f54 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
  {
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b086      	sub	sp, #24
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	60f8      	str	r0, [r7, #12]
 8000f5c:	60b9      	str	r1, [r7, #8]
 8000f5e:	607a      	str	r2, [r7, #4]
  	for (int i = 0; i < len; i++)
 8000f60:	2300      	movs	r3, #0
 8000f62:	617b      	str	r3, [r7, #20]
 8000f64:	e009      	b.n	8000f7a <_write+0x26>
  	{
  		ITM_SendChar(*ptr++);
 8000f66:	68bb      	ldr	r3, [r7, #8]
 8000f68:	1c5a      	adds	r2, r3, #1
 8000f6a:	60ba      	str	r2, [r7, #8]
 8000f6c:	781b      	ldrb	r3, [r3, #0]
 8000f6e:	4618      	mov	r0, r3
 8000f70:	f7ff ffca 	bl	8000f08 <ITM_SendChar>
  	for (int i = 0; i < len; i++)
 8000f74:	697b      	ldr	r3, [r7, #20]
 8000f76:	3301      	adds	r3, #1
 8000f78:	617b      	str	r3, [r7, #20]
 8000f7a:	697a      	ldr	r2, [r7, #20]
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	429a      	cmp	r2, r3
 8000f80:	dbf1      	blt.n	8000f66 <_write+0x12>
  	}
  	return len;
 8000f82:	687b      	ldr	r3, [r7, #4]
  }
 8000f84:	4618      	mov	r0, r3
 8000f86:	3718      	adds	r7, #24
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bd80      	pop	{r7, pc}

08000f8c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b082      	sub	sp, #8
 8000f90:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f92:	f000 ff6d 	bl	8001e70 <HAL_Init>

  /* USER CODE BEGIN Init */
  RingBuf_Init(rx_buf, 1024, 1, &ringbuf);
 8000f96:	4b37      	ldr	r3, [pc, #220]	; (8001074 <main+0xe8>)
 8000f98:	2201      	movs	r2, #1
 8000f9a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f9e:	4836      	ldr	r0, [pc, #216]	; (8001078 <main+0xec>)
 8000fa0:	f7ff fd72 	bl	8000a88 <RingBuf_Init>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000fa4:	2100      	movs	r1, #0
 8000fa6:	4835      	ldr	r0, [pc, #212]	; (800107c <main+0xf0>)
 8000fa8:	f003 fb3a 	bl	8004620 <HAL_TIM_PWM_Start>
  uint16_t dutyCycle = 0xB000;
 8000fac:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 8000fb0:	807b      	strh	r3, [r7, #2]
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, dutyCycle);
 8000fb2:	4b32      	ldr	r3, [pc, #200]	; (800107c <main+0xf0>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	887a      	ldrh	r2, [r7, #2]
 8000fb8:	635a      	str	r2, [r3, #52]	; 0x34
  lcd_init();
 8000fba:	f7ff fe7d 	bl	8000cb8 <lcd_init>
  sprintf((char*)temp_str, "%d", dutyCycle);
 8000fbe:	887b      	ldrh	r3, [r7, #2]
 8000fc0:	461a      	mov	r2, r3
 8000fc2:	492f      	ldr	r1, [pc, #188]	; (8001080 <main+0xf4>)
 8000fc4:	482f      	ldr	r0, [pc, #188]	; (8001084 <main+0xf8>)
 8000fc6:	f005 f89b 	bl	8006100 <siprintf>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fca:	f000 f865 	bl	8001098 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fce:	f000 fb05 	bl	80015dc <MX_GPIO_Init>
  MX_ADC1_Init();
 8000fd2:	f000 f8c3 	bl	800115c <MX_ADC1_Init>
  MX_CAN_Init();
 8000fd6:	f000 f91d 	bl	8001214 <MX_CAN_Init>
  MX_SPI2_Init();
 8000fda:	f000 f9cf 	bl	800137c <MX_SPI2_Init>
  MX_TIM1_Init();
 8000fde:	f000 fa03 	bl	80013e8 <MX_TIM1_Init>
  MX_USB_PCD_Init();
 8000fe2:	f000 fad9 	bl	8001598 <MX_USB_PCD_Init>
  MX_RTC_Init();
 8000fe6:	f000 f949 	bl	800127c <MX_RTC_Init>
  MX_SPI1_Init();
 8000fea:	f000 f991 	bl	8001310 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8000fee:	f000 fa7f 	bl	80014f0 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8000ff2:	f000 faa7 	bl	8001544 <MX_USART3_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_UART_Receive_IT(&huart3, &temp_byte, 1);
 8000ff6:	2201      	movs	r2, #1
 8000ff8:	4923      	ldr	r1, [pc, #140]	; (8001088 <main+0xfc>)
 8000ffa:	4824      	ldr	r0, [pc, #144]	; (800108c <main+0x100>)
 8000ffc:	f003 ff7a 	bl	8004ef4 <HAL_UART_Receive_IT>
  uint16_t buf_len = 0;
 8001000:	2300      	movs	r3, #0
 8001002:	803b      	strh	r3, [r7, #0]
  while (1)
  {
	  RingBuf_Available(&buf_len, &ringbuf);
 8001004:	463b      	mov	r3, r7
 8001006:	491b      	ldr	r1, [pc, #108]	; (8001074 <main+0xe8>)
 8001008:	4618      	mov	r0, r3
 800100a:	f7ff fd71 	bl	8000af0 <RingBuf_Available>
	  if(buf_len > 10)
 800100e:	883b      	ldrh	r3, [r7, #0]
 8001010:	2b0a      	cmp	r3, #10
 8001012:	d919      	bls.n	8001048 <main+0xbc>
	  {
		  for(int i = 0; i < buf_len; i++)
 8001014:	2300      	movs	r3, #0
 8001016:	607b      	str	r3, [r7, #4]
 8001018:	e008      	b.n	800102c <main+0xa0>
		  {
			  RingBuf_DataRead(temp_str, buf_len, &ringbuf);
 800101a:	883b      	ldrh	r3, [r7, #0]
 800101c:	4a15      	ldr	r2, [pc, #84]	; (8001074 <main+0xe8>)
 800101e:	4619      	mov	r1, r3
 8001020:	4818      	ldr	r0, [pc, #96]	; (8001084 <main+0xf8>)
 8001022:	f7ff fdbb 	bl	8000b9c <RingBuf_DataRead>
		  for(int i = 0; i < buf_len; i++)
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	3301      	adds	r3, #1
 800102a:	607b      	str	r3, [r7, #4]
 800102c:	883b      	ldrh	r3, [r7, #0]
 800102e:	461a      	mov	r2, r3
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	4293      	cmp	r3, r2
 8001034:	dbf1      	blt.n	800101a <main+0x8e>
		  }
		  lcd_buferase();
 8001036:	f7ff ff41 	bl	8000ebc <lcd_buferase>
		  lcd_bufwstr8x5(temp_str, 1, 0);
 800103a:	2200      	movs	r2, #0
 800103c:	2101      	movs	r1, #1
 800103e:	4811      	ldr	r0, [pc, #68]	; (8001084 <main+0xf8>)
 8001040:	f7ff ff02 	bl	8000e48 <lcd_bufwstr8x5>
		  lcd_bufupload();
 8001044:	f7ff fe98 	bl	8000d78 <lcd_bufupload>
	  }
	  sprintf((char*)temp_str, "%ld", HAL_GetTick()/1000);
 8001048:	f000 ff6a 	bl	8001f20 <HAL_GetTick>
 800104c:	4603      	mov	r3, r0
 800104e:	4a10      	ldr	r2, [pc, #64]	; (8001090 <main+0x104>)
 8001050:	fba2 2303 	umull	r2, r3, r2, r3
 8001054:	099b      	lsrs	r3, r3, #6
 8001056:	461a      	mov	r2, r3
 8001058:	490e      	ldr	r1, [pc, #56]	; (8001094 <main+0x108>)
 800105a:	480a      	ldr	r0, [pc, #40]	; (8001084 <main+0xf8>)
 800105c:	f005 f850 	bl	8006100 <siprintf>
	  lcd_buferase();
 8001060:	f7ff ff2c 	bl	8000ebc <lcd_buferase>
		lcd_bufwstr8x5(temp_str, 1, 0);
 8001064:	2200      	movs	r2, #0
 8001066:	2101      	movs	r1, #1
 8001068:	4806      	ldr	r0, [pc, #24]	; (8001084 <main+0xf8>)
 800106a:	f7ff feed 	bl	8000e48 <lcd_bufwstr8x5>
		lcd_bufupload();
 800106e:	f7ff fe83 	bl	8000d78 <lcd_bufupload>
	  RingBuf_Available(&buf_len, &ringbuf);
 8001072:	e7c7      	b.n	8001004 <main+0x78>
 8001074:	20000600 	.word	0x20000600
 8001078:	20000614 	.word	0x20000614
 800107c:	20000f34 	.word	0x20000f34
 8001080:	08008600 	.word	0x08008600
 8001084:	20000a18 	.word	0x20000a18
 8001088:	20000a14 	.word	0x20000a14
 800108c:	20000fc0 	.word	0x20000fc0
 8001090:	10624dd3 	.word	0x10624dd3
 8001094:	08008604 	.word	0x08008604

08001098 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b094      	sub	sp, #80	; 0x50
 800109c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800109e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80010a2:	2228      	movs	r2, #40	; 0x28
 80010a4:	2100      	movs	r1, #0
 80010a6:	4618      	mov	r0, r3
 80010a8:	f004 fbc2 	bl	8005830 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010ac:	f107 0314 	add.w	r3, r7, #20
 80010b0:	2200      	movs	r2, #0
 80010b2:	601a      	str	r2, [r3, #0]
 80010b4:	605a      	str	r2, [r3, #4]
 80010b6:	609a      	str	r2, [r3, #8]
 80010b8:	60da      	str	r2, [r3, #12]
 80010ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80010bc:	1d3b      	adds	r3, r7, #4
 80010be:	2200      	movs	r2, #0
 80010c0:	601a      	str	r2, [r3, #0]
 80010c2:	605a      	str	r2, [r3, #4]
 80010c4:	609a      	str	r2, [r3, #8]
 80010c6:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 80010c8:	2305      	movs	r3, #5
 80010ca:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80010cc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80010d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80010d2:	2300      	movs	r3, #0
 80010d4:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80010d6:	2301      	movs	r3, #1
 80010d8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010da:	2301      	movs	r3, #1
 80010dc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010de:	2302      	movs	r3, #2
 80010e0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80010e2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80010e6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80010e8:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80010ec:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010ee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80010f2:	4618      	mov	r0, r3
 80010f4:	f001 fec0 	bl	8002e78 <HAL_RCC_OscConfig>
 80010f8:	4603      	mov	r3, r0
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d001      	beq.n	8001102 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 80010fe:	f000 fb1a 	bl	8001736 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001102:	230f      	movs	r3, #15
 8001104:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001106:	2302      	movs	r3, #2
 8001108:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800110a:	2300      	movs	r3, #0
 800110c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800110e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001112:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001114:	2300      	movs	r3, #0
 8001116:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001118:	f107 0314 	add.w	r3, r7, #20
 800111c:	2102      	movs	r1, #2
 800111e:	4618      	mov	r0, r3
 8001120:	f002 f92c 	bl	800337c <HAL_RCC_ClockConfig>
 8001124:	4603      	mov	r3, r0
 8001126:	2b00      	cmp	r3, #0
 8001128:	d001      	beq.n	800112e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800112a:	f000 fb04 	bl	8001736 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_ADC
 800112e:	2313      	movs	r3, #19
 8001130:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_USB;
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001132:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001136:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8001138:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800113c:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 800113e:	2300      	movs	r3, #0
 8001140:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001142:	1d3b      	adds	r3, r7, #4
 8001144:	4618      	mov	r0, r3
 8001146:	f002 fab1 	bl	80036ac <HAL_RCCEx_PeriphCLKConfig>
 800114a:	4603      	mov	r3, r0
 800114c:	2b00      	cmp	r3, #0
 800114e:	d001      	beq.n	8001154 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8001150:	f000 faf1 	bl	8001736 <Error_Handler>
  }
}
 8001154:	bf00      	nop
 8001156:	3750      	adds	r7, #80	; 0x50
 8001158:	46bd      	mov	sp, r7
 800115a:	bd80      	pop	{r7, pc}

0800115c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b084      	sub	sp, #16
 8001160:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001162:	1d3b      	adds	r3, r7, #4
 8001164:	2200      	movs	r2, #0
 8001166:	601a      	str	r2, [r3, #0]
 8001168:	605a      	str	r2, [r3, #4]
 800116a:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800116c:	4b27      	ldr	r3, [pc, #156]	; (800120c <MX_ADC1_Init+0xb0>)
 800116e:	4a28      	ldr	r2, [pc, #160]	; (8001210 <MX_ADC1_Init+0xb4>)
 8001170:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001172:	4b26      	ldr	r3, [pc, #152]	; (800120c <MX_ADC1_Init+0xb0>)
 8001174:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001178:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800117a:	4b24      	ldr	r3, [pc, #144]	; (800120c <MX_ADC1_Init+0xb0>)
 800117c:	2200      	movs	r2, #0
 800117e:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001180:	4b22      	ldr	r3, [pc, #136]	; (800120c <MX_ADC1_Init+0xb0>)
 8001182:	2200      	movs	r2, #0
 8001184:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001186:	4b21      	ldr	r3, [pc, #132]	; (800120c <MX_ADC1_Init+0xb0>)
 8001188:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800118c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800118e:	4b1f      	ldr	r3, [pc, #124]	; (800120c <MX_ADC1_Init+0xb0>)
 8001190:	2200      	movs	r2, #0
 8001192:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 3;
 8001194:	4b1d      	ldr	r3, [pc, #116]	; (800120c <MX_ADC1_Init+0xb0>)
 8001196:	2203      	movs	r2, #3
 8001198:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800119a:	481c      	ldr	r0, [pc, #112]	; (800120c <MX_ADC1_Init+0xb0>)
 800119c:	f000 feee 	bl	8001f7c <HAL_ADC_Init>
 80011a0:	4603      	mov	r3, r0
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d001      	beq.n	80011aa <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 80011a6:	f000 fac6 	bl	8001736 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80011aa:	2300      	movs	r3, #0
 80011ac:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80011ae:	2301      	movs	r3, #1
 80011b0:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 80011b2:	2301      	movs	r3, #1
 80011b4:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011b6:	1d3b      	adds	r3, r7, #4
 80011b8:	4619      	mov	r1, r3
 80011ba:	4814      	ldr	r0, [pc, #80]	; (800120c <MX_ADC1_Init+0xb0>)
 80011bc:	f000 ffb6 	bl	800212c <HAL_ADC_ConfigChannel>
 80011c0:	4603      	mov	r3, r0
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d001      	beq.n	80011ca <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80011c6:	f000 fab6 	bl	8001736 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80011ca:	2308      	movs	r3, #8
 80011cc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80011ce:	2302      	movs	r3, #2
 80011d0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011d2:	1d3b      	adds	r3, r7, #4
 80011d4:	4619      	mov	r1, r3
 80011d6:	480d      	ldr	r0, [pc, #52]	; (800120c <MX_ADC1_Init+0xb0>)
 80011d8:	f000 ffa8 	bl	800212c <HAL_ADC_ConfigChannel>
 80011dc:	4603      	mov	r3, r0
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d001      	beq.n	80011e6 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 80011e2:	f000 faa8 	bl	8001736 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80011e6:	2309      	movs	r3, #9
 80011e8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80011ea:	2303      	movs	r3, #3
 80011ec:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011ee:	1d3b      	adds	r3, r7, #4
 80011f0:	4619      	mov	r1, r3
 80011f2:	4806      	ldr	r0, [pc, #24]	; (800120c <MX_ADC1_Init+0xb0>)
 80011f4:	f000 ff9a 	bl	800212c <HAL_ADC_ConfigChannel>
 80011f8:	4603      	mov	r3, r0
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d001      	beq.n	8001202 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 80011fe:	f000 fa9a 	bl	8001736 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001202:	bf00      	nop
 8001204:	3710      	adds	r7, #16
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	20000e18 	.word	0x20000e18
 8001210:	40012400 	.word	0x40012400

08001214 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8001218:	4b16      	ldr	r3, [pc, #88]	; (8001274 <MX_CAN_Init+0x60>)
 800121a:	4a17      	ldr	r2, [pc, #92]	; (8001278 <MX_CAN_Init+0x64>)
 800121c:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 800121e:	4b15      	ldr	r3, [pc, #84]	; (8001274 <MX_CAN_Init+0x60>)
 8001220:	2210      	movs	r2, #16
 8001222:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8001224:	4b13      	ldr	r3, [pc, #76]	; (8001274 <MX_CAN_Init+0x60>)
 8001226:	2200      	movs	r2, #0
 8001228:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800122a:	4b12      	ldr	r3, [pc, #72]	; (8001274 <MX_CAN_Init+0x60>)
 800122c:	2200      	movs	r2, #0
 800122e:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 8001230:	4b10      	ldr	r3, [pc, #64]	; (8001274 <MX_CAN_Init+0x60>)
 8001232:	2200      	movs	r2, #0
 8001234:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 8001236:	4b0f      	ldr	r3, [pc, #60]	; (8001274 <MX_CAN_Init+0x60>)
 8001238:	2200      	movs	r2, #0
 800123a:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 800123c:	4b0d      	ldr	r3, [pc, #52]	; (8001274 <MX_CAN_Init+0x60>)
 800123e:	2200      	movs	r2, #0
 8001240:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8001242:	4b0c      	ldr	r3, [pc, #48]	; (8001274 <MX_CAN_Init+0x60>)
 8001244:	2200      	movs	r2, #0
 8001246:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8001248:	4b0a      	ldr	r3, [pc, #40]	; (8001274 <MX_CAN_Init+0x60>)
 800124a:	2200      	movs	r2, #0
 800124c:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 800124e:	4b09      	ldr	r3, [pc, #36]	; (8001274 <MX_CAN_Init+0x60>)
 8001250:	2200      	movs	r2, #0
 8001252:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8001254:	4b07      	ldr	r3, [pc, #28]	; (8001274 <MX_CAN_Init+0x60>)
 8001256:	2200      	movs	r2, #0
 8001258:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 800125a:	4b06      	ldr	r3, [pc, #24]	; (8001274 <MX_CAN_Init+0x60>)
 800125c:	2200      	movs	r2, #0
 800125e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8001260:	4804      	ldr	r0, [pc, #16]	; (8001274 <MX_CAN_Init+0x60>)
 8001262:	f001 f89c 	bl	800239e <HAL_CAN_Init>
 8001266:	4603      	mov	r3, r0
 8001268:	2b00      	cmp	r3, #0
 800126a:	d001      	beq.n	8001270 <MX_CAN_Init+0x5c>
  {
    Error_Handler();
 800126c:	f000 fa63 	bl	8001736 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8001270:	bf00      	nop
 8001272:	bd80      	pop	{r7, pc}
 8001274:	20000e48 	.word	0x20000e48
 8001278:	40006400 	.word	0x40006400

0800127c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b082      	sub	sp, #8
 8001280:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001282:	1d3b      	adds	r3, r7, #4
 8001284:	2100      	movs	r1, #0
 8001286:	460a      	mov	r2, r1
 8001288:	801a      	strh	r2, [r3, #0]
 800128a:	460a      	mov	r2, r1
 800128c:	709a      	strb	r2, [r3, #2]
  RTC_DateTypeDef DateToUpdate = {0};
 800128e:	2300      	movs	r3, #0
 8001290:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001292:	4b1d      	ldr	r3, [pc, #116]	; (8001308 <MX_RTC_Init+0x8c>)
 8001294:	4a1d      	ldr	r2, [pc, #116]	; (800130c <MX_RTC_Init+0x90>)
 8001296:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 8001298:	4b1b      	ldr	r3, [pc, #108]	; (8001308 <MX_RTC_Init+0x8c>)
 800129a:	f04f 32ff 	mov.w	r2, #4294967295
 800129e:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_NONE;
 80012a0:	4b19      	ldr	r3, [pc, #100]	; (8001308 <MX_RTC_Init+0x8c>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80012a6:	4818      	ldr	r0, [pc, #96]	; (8001308 <MX_RTC_Init+0x8c>)
 80012a8:	f002 fb76 	bl	8003998 <HAL_RTC_Init>
 80012ac:	4603      	mov	r3, r0
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d001      	beq.n	80012b6 <MX_RTC_Init+0x3a>
  {
    Error_Handler();
 80012b2:	f000 fa40 	bl	8001736 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 80012b6:	2300      	movs	r3, #0
 80012b8:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 80012ba:	2300      	movs	r3, #0
 80012bc:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 80012be:	2300      	movs	r3, #0
 80012c0:	71bb      	strb	r3, [r7, #6]

  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80012c2:	1d3b      	adds	r3, r7, #4
 80012c4:	2201      	movs	r2, #1
 80012c6:	4619      	mov	r1, r3
 80012c8:	480f      	ldr	r0, [pc, #60]	; (8001308 <MX_RTC_Init+0x8c>)
 80012ca:	f002 fbfb 	bl	8003ac4 <HAL_RTC_SetTime>
 80012ce:	4603      	mov	r3, r0
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d001      	beq.n	80012d8 <MX_RTC_Init+0x5c>
  {
    Error_Handler();
 80012d4:	f000 fa2f 	bl	8001736 <Error_Handler>
  }
  DateToUpdate.WeekDay = RTC_WEEKDAY_MONDAY;
 80012d8:	2301      	movs	r3, #1
 80012da:	703b      	strb	r3, [r7, #0]
  DateToUpdate.Month = RTC_MONTH_JANUARY;
 80012dc:	2301      	movs	r3, #1
 80012de:	707b      	strb	r3, [r7, #1]
  DateToUpdate.Date = 0x1;
 80012e0:	2301      	movs	r3, #1
 80012e2:	70bb      	strb	r3, [r7, #2]
  DateToUpdate.Year = 0x0;
 80012e4:	2300      	movs	r3, #0
 80012e6:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BCD) != HAL_OK)
 80012e8:	463b      	mov	r3, r7
 80012ea:	2201      	movs	r2, #1
 80012ec:	4619      	mov	r1, r3
 80012ee:	4806      	ldr	r0, [pc, #24]	; (8001308 <MX_RTC_Init+0x8c>)
 80012f0:	f002 fc80 	bl	8003bf4 <HAL_RTC_SetDate>
 80012f4:	4603      	mov	r3, r0
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d001      	beq.n	80012fe <MX_RTC_Init+0x82>
  {
    Error_Handler();
 80012fa:	f000 fa1c 	bl	8001736 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80012fe:	bf00      	nop
 8001300:	3708      	adds	r7, #8
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}
 8001306:	bf00      	nop
 8001308:	20000e70 	.word	0x20000e70
 800130c:	40002800 	.word	0x40002800

08001310 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001314:	4b17      	ldr	r3, [pc, #92]	; (8001374 <MX_SPI1_Init+0x64>)
 8001316:	4a18      	ldr	r2, [pc, #96]	; (8001378 <MX_SPI1_Init+0x68>)
 8001318:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800131a:	4b16      	ldr	r3, [pc, #88]	; (8001374 <MX_SPI1_Init+0x64>)
 800131c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001320:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001322:	4b14      	ldr	r3, [pc, #80]	; (8001374 <MX_SPI1_Init+0x64>)
 8001324:	2200      	movs	r2, #0
 8001326:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001328:	4b12      	ldr	r3, [pc, #72]	; (8001374 <MX_SPI1_Init+0x64>)
 800132a:	2200      	movs	r2, #0
 800132c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800132e:	4b11      	ldr	r3, [pc, #68]	; (8001374 <MX_SPI1_Init+0x64>)
 8001330:	2200      	movs	r2, #0
 8001332:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001334:	4b0f      	ldr	r3, [pc, #60]	; (8001374 <MX_SPI1_Init+0x64>)
 8001336:	2200      	movs	r2, #0
 8001338:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 800133a:	4b0e      	ldr	r3, [pc, #56]	; (8001374 <MX_SPI1_Init+0x64>)
 800133c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001340:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001342:	4b0c      	ldr	r3, [pc, #48]	; (8001374 <MX_SPI1_Init+0x64>)
 8001344:	2208      	movs	r2, #8
 8001346:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001348:	4b0a      	ldr	r3, [pc, #40]	; (8001374 <MX_SPI1_Init+0x64>)
 800134a:	2200      	movs	r2, #0
 800134c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800134e:	4b09      	ldr	r3, [pc, #36]	; (8001374 <MX_SPI1_Init+0x64>)
 8001350:	2200      	movs	r2, #0
 8001352:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001354:	4b07      	ldr	r3, [pc, #28]	; (8001374 <MX_SPI1_Init+0x64>)
 8001356:	2200      	movs	r2, #0
 8001358:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800135a:	4b06      	ldr	r3, [pc, #24]	; (8001374 <MX_SPI1_Init+0x64>)
 800135c:	220a      	movs	r2, #10
 800135e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001360:	4804      	ldr	r0, [pc, #16]	; (8001374 <MX_SPI1_Init+0x64>)
 8001362:	f002 fea7 	bl	80040b4 <HAL_SPI_Init>
 8001366:	4603      	mov	r3, r0
 8001368:	2b00      	cmp	r3, #0
 800136a:	d001      	beq.n	8001370 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800136c:	f000 f9e3 	bl	8001736 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001370:	bf00      	nop
 8001372:	bd80      	pop	{r7, pc}
 8001374:	20000e84 	.word	0x20000e84
 8001378:	40013000 	.word	0x40013000

0800137c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001380:	4b17      	ldr	r3, [pc, #92]	; (80013e0 <MX_SPI2_Init+0x64>)
 8001382:	4a18      	ldr	r2, [pc, #96]	; (80013e4 <MX_SPI2_Init+0x68>)
 8001384:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001386:	4b16      	ldr	r3, [pc, #88]	; (80013e0 <MX_SPI2_Init+0x64>)
 8001388:	f44f 7282 	mov.w	r2, #260	; 0x104
 800138c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800138e:	4b14      	ldr	r3, [pc, #80]	; (80013e0 <MX_SPI2_Init+0x64>)
 8001390:	2200      	movs	r2, #0
 8001392:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001394:	4b12      	ldr	r3, [pc, #72]	; (80013e0 <MX_SPI2_Init+0x64>)
 8001396:	2200      	movs	r2, #0
 8001398:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800139a:	4b11      	ldr	r3, [pc, #68]	; (80013e0 <MX_SPI2_Init+0x64>)
 800139c:	2200      	movs	r2, #0
 800139e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80013a0:	4b0f      	ldr	r3, [pc, #60]	; (80013e0 <MX_SPI2_Init+0x64>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80013a6:	4b0e      	ldr	r3, [pc, #56]	; (80013e0 <MX_SPI2_Init+0x64>)
 80013a8:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80013ac:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80013ae:	4b0c      	ldr	r3, [pc, #48]	; (80013e0 <MX_SPI2_Init+0x64>)
 80013b0:	2208      	movs	r2, #8
 80013b2:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80013b4:	4b0a      	ldr	r3, [pc, #40]	; (80013e0 <MX_SPI2_Init+0x64>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80013ba:	4b09      	ldr	r3, [pc, #36]	; (80013e0 <MX_SPI2_Init+0x64>)
 80013bc:	2200      	movs	r2, #0
 80013be:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80013c0:	4b07      	ldr	r3, [pc, #28]	; (80013e0 <MX_SPI2_Init+0x64>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80013c6:	4b06      	ldr	r3, [pc, #24]	; (80013e0 <MX_SPI2_Init+0x64>)
 80013c8:	220a      	movs	r2, #10
 80013ca:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80013cc:	4804      	ldr	r0, [pc, #16]	; (80013e0 <MX_SPI2_Init+0x64>)
 80013ce:	f002 fe71 	bl	80040b4 <HAL_SPI_Init>
 80013d2:	4603      	mov	r3, r0
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d001      	beq.n	80013dc <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80013d8:	f000 f9ad 	bl	8001736 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80013dc:	bf00      	nop
 80013de:	bd80      	pop	{r7, pc}
 80013e0:	20000edc 	.word	0x20000edc
 80013e4:	40003800 	.word	0x40003800

080013e8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b092      	sub	sp, #72	; 0x48
 80013ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013ee:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80013f2:	2200      	movs	r2, #0
 80013f4:	601a      	str	r2, [r3, #0]
 80013f6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80013f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013fc:	2200      	movs	r2, #0
 80013fe:	601a      	str	r2, [r3, #0]
 8001400:	605a      	str	r2, [r3, #4]
 8001402:	609a      	str	r2, [r3, #8]
 8001404:	60da      	str	r2, [r3, #12]
 8001406:	611a      	str	r2, [r3, #16]
 8001408:	615a      	str	r2, [r3, #20]
 800140a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800140c:	1d3b      	adds	r3, r7, #4
 800140e:	2220      	movs	r2, #32
 8001410:	2100      	movs	r1, #0
 8001412:	4618      	mov	r0, r3
 8001414:	f004 fa0c 	bl	8005830 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001418:	4b33      	ldr	r3, [pc, #204]	; (80014e8 <MX_TIM1_Init+0x100>)
 800141a:	4a34      	ldr	r2, [pc, #208]	; (80014ec <MX_TIM1_Init+0x104>)
 800141c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800141e:	4b32      	ldr	r3, [pc, #200]	; (80014e8 <MX_TIM1_Init+0x100>)
 8001420:	2200      	movs	r2, #0
 8001422:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001424:	4b30      	ldr	r3, [pc, #192]	; (80014e8 <MX_TIM1_Init+0x100>)
 8001426:	2200      	movs	r2, #0
 8001428:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800142a:	4b2f      	ldr	r3, [pc, #188]	; (80014e8 <MX_TIM1_Init+0x100>)
 800142c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001430:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001432:	4b2d      	ldr	r3, [pc, #180]	; (80014e8 <MX_TIM1_Init+0x100>)
 8001434:	2200      	movs	r2, #0
 8001436:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001438:	4b2b      	ldr	r3, [pc, #172]	; (80014e8 <MX_TIM1_Init+0x100>)
 800143a:	2200      	movs	r2, #0
 800143c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800143e:	4b2a      	ldr	r3, [pc, #168]	; (80014e8 <MX_TIM1_Init+0x100>)
 8001440:	2200      	movs	r2, #0
 8001442:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001444:	4828      	ldr	r0, [pc, #160]	; (80014e8 <MX_TIM1_Init+0x100>)
 8001446:	f003 f89b 	bl	8004580 <HAL_TIM_PWM_Init>
 800144a:	4603      	mov	r3, r0
 800144c:	2b00      	cmp	r3, #0
 800144e:	d001      	beq.n	8001454 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8001450:	f000 f971 	bl	8001736 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001454:	2300      	movs	r3, #0
 8001456:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001458:	2300      	movs	r3, #0
 800145a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800145c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001460:	4619      	mov	r1, r3
 8001462:	4821      	ldr	r0, [pc, #132]	; (80014e8 <MX_TIM1_Init+0x100>)
 8001464:	f003 fc4a 	bl	8004cfc <HAL_TIMEx_MasterConfigSynchronization>
 8001468:	4603      	mov	r3, r0
 800146a:	2b00      	cmp	r3, #0
 800146c:	d001      	beq.n	8001472 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 800146e:	f000 f962 	bl	8001736 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001472:	2360      	movs	r3, #96	; 0x60
 8001474:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 50000;
 8001476:	f24c 3350 	movw	r3, #50000	; 0xc350
 800147a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800147c:	2300      	movs	r3, #0
 800147e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001480:	2300      	movs	r3, #0
 8001482:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001484:	2300      	movs	r3, #0
 8001486:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001488:	2300      	movs	r3, #0
 800148a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800148c:	2300      	movs	r3, #0
 800148e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001490:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001494:	2200      	movs	r2, #0
 8001496:	4619      	mov	r1, r3
 8001498:	4813      	ldr	r0, [pc, #76]	; (80014e8 <MX_TIM1_Init+0x100>)
 800149a:	f003 f963 	bl	8004764 <HAL_TIM_PWM_ConfigChannel>
 800149e:	4603      	mov	r3, r0
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d001      	beq.n	80014a8 <MX_TIM1_Init+0xc0>
  {
    Error_Handler();
 80014a4:	f000 f947 	bl	8001736 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80014a8:	2300      	movs	r3, #0
 80014aa:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80014ac:	2300      	movs	r3, #0
 80014ae:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80014b0:	2300      	movs	r3, #0
 80014b2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80014b4:	2300      	movs	r3, #0
 80014b6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80014b8:	2300      	movs	r3, #0
 80014ba:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80014bc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014c0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80014c2:	2300      	movs	r3, #0
 80014c4:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80014c6:	1d3b      	adds	r3, r7, #4
 80014c8:	4619      	mov	r1, r3
 80014ca:	4807      	ldr	r0, [pc, #28]	; (80014e8 <MX_TIM1_Init+0x100>)
 80014cc:	f003 fc74 	bl	8004db8 <HAL_TIMEx_ConfigBreakDeadTime>
 80014d0:	4603      	mov	r3, r0
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d001      	beq.n	80014da <MX_TIM1_Init+0xf2>
  {
    Error_Handler();
 80014d6:	f000 f92e 	bl	8001736 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80014da:	4803      	ldr	r0, [pc, #12]	; (80014e8 <MX_TIM1_Init+0x100>)
 80014dc:	f000 fad2 	bl	8001a84 <HAL_TIM_MspPostInit>

}
 80014e0:	bf00      	nop
 80014e2:	3748      	adds	r7, #72	; 0x48
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bd80      	pop	{r7, pc}
 80014e8:	20000f34 	.word	0x20000f34
 80014ec:	40012c00 	.word	0x40012c00

080014f0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80014f4:	4b11      	ldr	r3, [pc, #68]	; (800153c <MX_USART1_UART_Init+0x4c>)
 80014f6:	4a12      	ldr	r2, [pc, #72]	; (8001540 <MX_USART1_UART_Init+0x50>)
 80014f8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80014fa:	4b10      	ldr	r3, [pc, #64]	; (800153c <MX_USART1_UART_Init+0x4c>)
 80014fc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001500:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001502:	4b0e      	ldr	r3, [pc, #56]	; (800153c <MX_USART1_UART_Init+0x4c>)
 8001504:	2200      	movs	r2, #0
 8001506:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001508:	4b0c      	ldr	r3, [pc, #48]	; (800153c <MX_USART1_UART_Init+0x4c>)
 800150a:	2200      	movs	r2, #0
 800150c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800150e:	4b0b      	ldr	r3, [pc, #44]	; (800153c <MX_USART1_UART_Init+0x4c>)
 8001510:	2200      	movs	r2, #0
 8001512:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001514:	4b09      	ldr	r3, [pc, #36]	; (800153c <MX_USART1_UART_Init+0x4c>)
 8001516:	220c      	movs	r2, #12
 8001518:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800151a:	4b08      	ldr	r3, [pc, #32]	; (800153c <MX_USART1_UART_Init+0x4c>)
 800151c:	2200      	movs	r2, #0
 800151e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001520:	4b06      	ldr	r3, [pc, #24]	; (800153c <MX_USART1_UART_Init+0x4c>)
 8001522:	2200      	movs	r2, #0
 8001524:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001526:	4805      	ldr	r0, [pc, #20]	; (800153c <MX_USART1_UART_Init+0x4c>)
 8001528:	f003 fc97 	bl	8004e5a <HAL_UART_Init>
 800152c:	4603      	mov	r3, r0
 800152e:	2b00      	cmp	r3, #0
 8001530:	d001      	beq.n	8001536 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001532:	f000 f900 	bl	8001736 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001536:	bf00      	nop
 8001538:	bd80      	pop	{r7, pc}
 800153a:	bf00      	nop
 800153c:	20000f7c 	.word	0x20000f7c
 8001540:	40013800 	.word	0x40013800

08001544 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001548:	4b11      	ldr	r3, [pc, #68]	; (8001590 <MX_USART3_UART_Init+0x4c>)
 800154a:	4a12      	ldr	r2, [pc, #72]	; (8001594 <MX_USART3_UART_Init+0x50>)
 800154c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 800154e:	4b10      	ldr	r3, [pc, #64]	; (8001590 <MX_USART3_UART_Init+0x4c>)
 8001550:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001554:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001556:	4b0e      	ldr	r3, [pc, #56]	; (8001590 <MX_USART3_UART_Init+0x4c>)
 8001558:	2200      	movs	r2, #0
 800155a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800155c:	4b0c      	ldr	r3, [pc, #48]	; (8001590 <MX_USART3_UART_Init+0x4c>)
 800155e:	2200      	movs	r2, #0
 8001560:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001562:	4b0b      	ldr	r3, [pc, #44]	; (8001590 <MX_USART3_UART_Init+0x4c>)
 8001564:	2200      	movs	r2, #0
 8001566:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001568:	4b09      	ldr	r3, [pc, #36]	; (8001590 <MX_USART3_UART_Init+0x4c>)
 800156a:	220c      	movs	r2, #12
 800156c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800156e:	4b08      	ldr	r3, [pc, #32]	; (8001590 <MX_USART3_UART_Init+0x4c>)
 8001570:	2200      	movs	r2, #0
 8001572:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001574:	4b06      	ldr	r3, [pc, #24]	; (8001590 <MX_USART3_UART_Init+0x4c>)
 8001576:	2200      	movs	r2, #0
 8001578:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800157a:	4805      	ldr	r0, [pc, #20]	; (8001590 <MX_USART3_UART_Init+0x4c>)
 800157c:	f003 fc6d 	bl	8004e5a <HAL_UART_Init>
 8001580:	4603      	mov	r3, r0
 8001582:	2b00      	cmp	r3, #0
 8001584:	d001      	beq.n	800158a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001586:	f000 f8d6 	bl	8001736 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800158a:	bf00      	nop
 800158c:	bd80      	pop	{r7, pc}
 800158e:	bf00      	nop
 8001590:	20000fc0 	.word	0x20000fc0
 8001594:	40004800 	.word	0x40004800

08001598 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 800159c:	4b0d      	ldr	r3, [pc, #52]	; (80015d4 <MX_USB_PCD_Init+0x3c>)
 800159e:	4a0e      	ldr	r2, [pc, #56]	; (80015d8 <MX_USB_PCD_Init+0x40>)
 80015a0:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80015a2:	4b0c      	ldr	r3, [pc, #48]	; (80015d4 <MX_USB_PCD_Init+0x3c>)
 80015a4:	2208      	movs	r2, #8
 80015a6:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80015a8:	4b0a      	ldr	r3, [pc, #40]	; (80015d4 <MX_USB_PCD_Init+0x3c>)
 80015aa:	2202      	movs	r2, #2
 80015ac:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80015ae:	4b09      	ldr	r3, [pc, #36]	; (80015d4 <MX_USB_PCD_Init+0x3c>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80015b4:	4b07      	ldr	r3, [pc, #28]	; (80015d4 <MX_USB_PCD_Init+0x3c>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80015ba:	4b06      	ldr	r3, [pc, #24]	; (80015d4 <MX_USB_PCD_Init+0x3c>)
 80015bc:	2200      	movs	r2, #0
 80015be:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80015c0:	4804      	ldr	r0, [pc, #16]	; (80015d4 <MX_USB_PCD_Init+0x3c>)
 80015c2:	f001 fb41 	bl	8002c48 <HAL_PCD_Init>
 80015c6:	4603      	mov	r3, r0
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d001      	beq.n	80015d0 <MX_USB_PCD_Init+0x38>
  {
    Error_Handler();
 80015cc:	f000 f8b3 	bl	8001736 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 80015d0:	bf00      	nop
 80015d2:	bd80      	pop	{r7, pc}
 80015d4:	20001004 	.word	0x20001004
 80015d8:	40005c00 	.word	0x40005c00

080015dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b088      	sub	sp, #32
 80015e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015e2:	f107 0310 	add.w	r3, r7, #16
 80015e6:	2200      	movs	r2, #0
 80015e8:	601a      	str	r2, [r3, #0]
 80015ea:	605a      	str	r2, [r3, #4]
 80015ec:	609a      	str	r2, [r3, #8]
 80015ee:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015f0:	4b39      	ldr	r3, [pc, #228]	; (80016d8 <MX_GPIO_Init+0xfc>)
 80015f2:	699b      	ldr	r3, [r3, #24]
 80015f4:	4a38      	ldr	r2, [pc, #224]	; (80016d8 <MX_GPIO_Init+0xfc>)
 80015f6:	f043 0310 	orr.w	r3, r3, #16
 80015fa:	6193      	str	r3, [r2, #24]
 80015fc:	4b36      	ldr	r3, [pc, #216]	; (80016d8 <MX_GPIO_Init+0xfc>)
 80015fe:	699b      	ldr	r3, [r3, #24]
 8001600:	f003 0310 	and.w	r3, r3, #16
 8001604:	60fb      	str	r3, [r7, #12]
 8001606:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001608:	4b33      	ldr	r3, [pc, #204]	; (80016d8 <MX_GPIO_Init+0xfc>)
 800160a:	699b      	ldr	r3, [r3, #24]
 800160c:	4a32      	ldr	r2, [pc, #200]	; (80016d8 <MX_GPIO_Init+0xfc>)
 800160e:	f043 0320 	orr.w	r3, r3, #32
 8001612:	6193      	str	r3, [r2, #24]
 8001614:	4b30      	ldr	r3, [pc, #192]	; (80016d8 <MX_GPIO_Init+0xfc>)
 8001616:	699b      	ldr	r3, [r3, #24]
 8001618:	f003 0320 	and.w	r3, r3, #32
 800161c:	60bb      	str	r3, [r7, #8]
 800161e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001620:	4b2d      	ldr	r3, [pc, #180]	; (80016d8 <MX_GPIO_Init+0xfc>)
 8001622:	699b      	ldr	r3, [r3, #24]
 8001624:	4a2c      	ldr	r2, [pc, #176]	; (80016d8 <MX_GPIO_Init+0xfc>)
 8001626:	f043 0304 	orr.w	r3, r3, #4
 800162a:	6193      	str	r3, [r2, #24]
 800162c:	4b2a      	ldr	r3, [pc, #168]	; (80016d8 <MX_GPIO_Init+0xfc>)
 800162e:	699b      	ldr	r3, [r3, #24]
 8001630:	f003 0304 	and.w	r3, r3, #4
 8001634:	607b      	str	r3, [r7, #4]
 8001636:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001638:	4b27      	ldr	r3, [pc, #156]	; (80016d8 <MX_GPIO_Init+0xfc>)
 800163a:	699b      	ldr	r3, [r3, #24]
 800163c:	4a26      	ldr	r2, [pc, #152]	; (80016d8 <MX_GPIO_Init+0xfc>)
 800163e:	f043 0308 	orr.w	r3, r3, #8
 8001642:	6193      	str	r3, [r2, #24]
 8001644:	4b24      	ldr	r3, [pc, #144]	; (80016d8 <MX_GPIO_Init+0xfc>)
 8001646:	699b      	ldr	r3, [r3, #24]
 8001648:	f003 0308 	and.w	r3, r3, #8
 800164c:	603b      	str	r3, [r7, #0]
 800164e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SHUTDOWN_GPIO_Port, SHUTDOWN_Pin, GPIO_PIN_SET);
 8001650:	2201      	movs	r2, #1
 8001652:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001656:	4821      	ldr	r0, [pc, #132]	; (80016dc <MX_GPIO_Init+0x100>)
 8001658:	f001 fade 	bl	8002c18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DISP_RS_Pin|DISP_RSE_Pin, GPIO_PIN_RESET);
 800165c:	2200      	movs	r2, #0
 800165e:	2106      	movs	r1, #6
 8001660:	481f      	ldr	r0, [pc, #124]	; (80016e0 <MX_GPIO_Init+0x104>)
 8001662:	f001 fad9 	bl	8002c18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SHUTDOWN_Pin */
  GPIO_InitStruct.Pin = SHUTDOWN_Pin;
 8001666:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800166a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800166c:	2311      	movs	r3, #17
 800166e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001670:	2300      	movs	r3, #0
 8001672:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001674:	2302      	movs	r3, #2
 8001676:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SHUTDOWN_GPIO_Port, &GPIO_InitStruct);
 8001678:	f107 0310 	add.w	r3, r7, #16
 800167c:	4619      	mov	r1, r3
 800167e:	4817      	ldr	r0, [pc, #92]	; (80016dc <MX_GPIO_Init+0x100>)
 8001680:	f001 f946 	bl	8002910 <HAL_GPIO_Init>

  /*Configure GPIO pins : DISP_RS_Pin DISP_RSE_Pin */
  GPIO_InitStruct.Pin = DISP_RS_Pin|DISP_RSE_Pin;
 8001684:	2306      	movs	r3, #6
 8001686:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001688:	2301      	movs	r3, #1
 800168a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800168c:	2300      	movs	r3, #0
 800168e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001690:	2302      	movs	r3, #2
 8001692:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001694:	f107 0310 	add.w	r3, r7, #16
 8001698:	4619      	mov	r1, r3
 800169a:	4811      	ldr	r0, [pc, #68]	; (80016e0 <MX_GPIO_Init+0x104>)
 800169c:	f001 f938 	bl	8002910 <HAL_GPIO_Init>

  /*Configure GPIO pin : JOYSTICK_BTN_Pin */
  GPIO_InitStruct.Pin = JOYSTICK_BTN_Pin;
 80016a0:	2308      	movs	r3, #8
 80016a2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016a4:	2300      	movs	r3, #0
 80016a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80016a8:	2301      	movs	r3, #1
 80016aa:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(JOYSTICK_BTN_GPIO_Port, &GPIO_InitStruct);
 80016ac:	f107 0310 	add.w	r3, r7, #16
 80016b0:	4619      	mov	r1, r3
 80016b2:	480b      	ldr	r0, [pc, #44]	; (80016e0 <MX_GPIO_Init+0x104>)
 80016b4:	f001 f92c 	bl	8002910 <HAL_GPIO_Init>

  /*Configure GPIO pins : BTN_1_Pin BTN_2_Pin BTN_3_Pin BTN_4_Pin */
  GPIO_InitStruct.Pin = BTN_1_Pin|BTN_2_Pin|BTN_3_Pin|BTN_4_Pin;
 80016b8:	23f0      	movs	r3, #240	; 0xf0
 80016ba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016bc:	2300      	movs	r3, #0
 80016be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80016c0:	2301      	movs	r3, #1
 80016c2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016c4:	f107 0310 	add.w	r3, r7, #16
 80016c8:	4619      	mov	r1, r3
 80016ca:	4806      	ldr	r0, [pc, #24]	; (80016e4 <MX_GPIO_Init+0x108>)
 80016cc:	f001 f920 	bl	8002910 <HAL_GPIO_Init>

}
 80016d0:	bf00      	nop
 80016d2:	3720      	adds	r7, #32
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bd80      	pop	{r7, pc}
 80016d8:	40021000 	.word	0x40021000
 80016dc:	40011000 	.word	0x40011000
 80016e0:	40010800 	.word	0x40010800
 80016e4:	40010c00 	.word	0x40010c00

080016e8 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b082      	sub	sp, #8
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
  if(huart == &huart3)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	4a09      	ldr	r2, [pc, #36]	; (8001718 <HAL_UART_RxCpltCallback+0x30>)
 80016f4:	4293      	cmp	r3, r2
 80016f6:	d10a      	bne.n	800170e <HAL_UART_RxCpltCallback+0x26>
  {
    RingBuf_BytePut(temp_byte, &ringbuf);
 80016f8:	4b08      	ldr	r3, [pc, #32]	; (800171c <HAL_UART_RxCpltCallback+0x34>)
 80016fa:	781b      	ldrb	r3, [r3, #0]
 80016fc:	4908      	ldr	r1, [pc, #32]	; (8001720 <HAL_UART_RxCpltCallback+0x38>)
 80016fe:	4618      	mov	r0, r3
 8001700:	f7ff fa27 	bl	8000b52 <RingBuf_BytePut>
    HAL_UART_Receive_IT (&huart3, &temp_byte, 1);
 8001704:	2201      	movs	r2, #1
 8001706:	4905      	ldr	r1, [pc, #20]	; (800171c <HAL_UART_RxCpltCallback+0x34>)
 8001708:	4803      	ldr	r0, [pc, #12]	; (8001718 <HAL_UART_RxCpltCallback+0x30>)
 800170a:	f003 fbf3 	bl	8004ef4 <HAL_UART_Receive_IT>
  }
}
 800170e:	bf00      	nop
 8001710:	3708      	adds	r7, #8
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}
 8001716:	bf00      	nop
 8001718:	20000fc0 	.word	0x20000fc0
 800171c:	20000a14 	.word	0x20000a14
 8001720:	20000600 	.word	0x20000600

08001724 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001724:	b480      	push	{r7}
 8001726:	b083      	sub	sp, #12
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
  if(huart == &huart3)
  {
  }
}
 800172c:	bf00      	nop
 800172e:	370c      	adds	r7, #12
 8001730:	46bd      	mov	sp, r7
 8001732:	bc80      	pop	{r7}
 8001734:	4770      	bx	lr

08001736 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001736:	b480      	push	{r7}
 8001738:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800173a:	b672      	cpsid	i
}
 800173c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800173e:	e7fe      	b.n	800173e <Error_Handler+0x8>

08001740 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001740:	b480      	push	{r7}
 8001742:	b085      	sub	sp, #20
 8001744:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001746:	4b15      	ldr	r3, [pc, #84]	; (800179c <HAL_MspInit+0x5c>)
 8001748:	699b      	ldr	r3, [r3, #24]
 800174a:	4a14      	ldr	r2, [pc, #80]	; (800179c <HAL_MspInit+0x5c>)
 800174c:	f043 0301 	orr.w	r3, r3, #1
 8001750:	6193      	str	r3, [r2, #24]
 8001752:	4b12      	ldr	r3, [pc, #72]	; (800179c <HAL_MspInit+0x5c>)
 8001754:	699b      	ldr	r3, [r3, #24]
 8001756:	f003 0301 	and.w	r3, r3, #1
 800175a:	60bb      	str	r3, [r7, #8]
 800175c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800175e:	4b0f      	ldr	r3, [pc, #60]	; (800179c <HAL_MspInit+0x5c>)
 8001760:	69db      	ldr	r3, [r3, #28]
 8001762:	4a0e      	ldr	r2, [pc, #56]	; (800179c <HAL_MspInit+0x5c>)
 8001764:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001768:	61d3      	str	r3, [r2, #28]
 800176a:	4b0c      	ldr	r3, [pc, #48]	; (800179c <HAL_MspInit+0x5c>)
 800176c:	69db      	ldr	r3, [r3, #28]
 800176e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001772:	607b      	str	r3, [r7, #4]
 8001774:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001776:	4b0a      	ldr	r3, [pc, #40]	; (80017a0 <HAL_MspInit+0x60>)
 8001778:	685b      	ldr	r3, [r3, #4]
 800177a:	60fb      	str	r3, [r7, #12]
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001782:	60fb      	str	r3, [r7, #12]
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800178a:	60fb      	str	r3, [r7, #12]
 800178c:	4a04      	ldr	r2, [pc, #16]	; (80017a0 <HAL_MspInit+0x60>)
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001792:	bf00      	nop
 8001794:	3714      	adds	r7, #20
 8001796:	46bd      	mov	sp, r7
 8001798:	bc80      	pop	{r7}
 800179a:	4770      	bx	lr
 800179c:	40021000 	.word	0x40021000
 80017a0:	40010000 	.word	0x40010000

080017a4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b08a      	sub	sp, #40	; 0x28
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017ac:	f107 0318 	add.w	r3, r7, #24
 80017b0:	2200      	movs	r2, #0
 80017b2:	601a      	str	r2, [r3, #0]
 80017b4:	605a      	str	r2, [r3, #4]
 80017b6:	609a      	str	r2, [r3, #8]
 80017b8:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	4a1f      	ldr	r2, [pc, #124]	; (800183c <HAL_ADC_MspInit+0x98>)
 80017c0:	4293      	cmp	r3, r2
 80017c2:	d137      	bne.n	8001834 <HAL_ADC_MspInit+0x90>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80017c4:	4b1e      	ldr	r3, [pc, #120]	; (8001840 <HAL_ADC_MspInit+0x9c>)
 80017c6:	699b      	ldr	r3, [r3, #24]
 80017c8:	4a1d      	ldr	r2, [pc, #116]	; (8001840 <HAL_ADC_MspInit+0x9c>)
 80017ca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80017ce:	6193      	str	r3, [r2, #24]
 80017d0:	4b1b      	ldr	r3, [pc, #108]	; (8001840 <HAL_ADC_MspInit+0x9c>)
 80017d2:	699b      	ldr	r3, [r3, #24]
 80017d4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80017d8:	617b      	str	r3, [r7, #20]
 80017da:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017dc:	4b18      	ldr	r3, [pc, #96]	; (8001840 <HAL_ADC_MspInit+0x9c>)
 80017de:	699b      	ldr	r3, [r3, #24]
 80017e0:	4a17      	ldr	r2, [pc, #92]	; (8001840 <HAL_ADC_MspInit+0x9c>)
 80017e2:	f043 0304 	orr.w	r3, r3, #4
 80017e6:	6193      	str	r3, [r2, #24]
 80017e8:	4b15      	ldr	r3, [pc, #84]	; (8001840 <HAL_ADC_MspInit+0x9c>)
 80017ea:	699b      	ldr	r3, [r3, #24]
 80017ec:	f003 0304 	and.w	r3, r3, #4
 80017f0:	613b      	str	r3, [r7, #16]
 80017f2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017f4:	4b12      	ldr	r3, [pc, #72]	; (8001840 <HAL_ADC_MspInit+0x9c>)
 80017f6:	699b      	ldr	r3, [r3, #24]
 80017f8:	4a11      	ldr	r2, [pc, #68]	; (8001840 <HAL_ADC_MspInit+0x9c>)
 80017fa:	f043 0308 	orr.w	r3, r3, #8
 80017fe:	6193      	str	r3, [r2, #24]
 8001800:	4b0f      	ldr	r3, [pc, #60]	; (8001840 <HAL_ADC_MspInit+0x9c>)
 8001802:	699b      	ldr	r3, [r3, #24]
 8001804:	f003 0308 	and.w	r3, r3, #8
 8001808:	60fb      	str	r3, [r7, #12]
 800180a:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = BAT_LVL_CTRL_Pin;
 800180c:	2301      	movs	r3, #1
 800180e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001810:	2303      	movs	r3, #3
 8001812:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(BAT_LVL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8001814:	f107 0318 	add.w	r3, r7, #24
 8001818:	4619      	mov	r1, r3
 800181a:	480a      	ldr	r0, [pc, #40]	; (8001844 <HAL_ADC_MspInit+0xa0>)
 800181c:	f001 f878 	bl	8002910 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = JOYSTICK_OX_Pin|JOYSTICK_OY_Pin;
 8001820:	2303      	movs	r3, #3
 8001822:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001824:	2303      	movs	r3, #3
 8001826:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001828:	f107 0318 	add.w	r3, r7, #24
 800182c:	4619      	mov	r1, r3
 800182e:	4806      	ldr	r0, [pc, #24]	; (8001848 <HAL_ADC_MspInit+0xa4>)
 8001830:	f001 f86e 	bl	8002910 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001834:	bf00      	nop
 8001836:	3728      	adds	r7, #40	; 0x28
 8001838:	46bd      	mov	sp, r7
 800183a:	bd80      	pop	{r7, pc}
 800183c:	40012400 	.word	0x40012400
 8001840:	40021000 	.word	0x40021000
 8001844:	40010800 	.word	0x40010800
 8001848:	40010c00 	.word	0x40010c00

0800184c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b08a      	sub	sp, #40	; 0x28
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001854:	f107 0314 	add.w	r3, r7, #20
 8001858:	2200      	movs	r2, #0
 800185a:	601a      	str	r2, [r3, #0]
 800185c:	605a      	str	r2, [r3, #4]
 800185e:	609a      	str	r2, [r3, #8]
 8001860:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	4a25      	ldr	r2, [pc, #148]	; (80018fc <HAL_CAN_MspInit+0xb0>)
 8001868:	4293      	cmp	r3, r2
 800186a:	d143      	bne.n	80018f4 <HAL_CAN_MspInit+0xa8>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800186c:	4b24      	ldr	r3, [pc, #144]	; (8001900 <HAL_CAN_MspInit+0xb4>)
 800186e:	69db      	ldr	r3, [r3, #28]
 8001870:	4a23      	ldr	r2, [pc, #140]	; (8001900 <HAL_CAN_MspInit+0xb4>)
 8001872:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001876:	61d3      	str	r3, [r2, #28]
 8001878:	4b21      	ldr	r3, [pc, #132]	; (8001900 <HAL_CAN_MspInit+0xb4>)
 800187a:	69db      	ldr	r3, [r3, #28]
 800187c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001880:	613b      	str	r3, [r7, #16]
 8001882:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001884:	4b1e      	ldr	r3, [pc, #120]	; (8001900 <HAL_CAN_MspInit+0xb4>)
 8001886:	699b      	ldr	r3, [r3, #24]
 8001888:	4a1d      	ldr	r2, [pc, #116]	; (8001900 <HAL_CAN_MspInit+0xb4>)
 800188a:	f043 0308 	orr.w	r3, r3, #8
 800188e:	6193      	str	r3, [r2, #24]
 8001890:	4b1b      	ldr	r3, [pc, #108]	; (8001900 <HAL_CAN_MspInit+0xb4>)
 8001892:	699b      	ldr	r3, [r3, #24]
 8001894:	f003 0308 	and.w	r3, r3, #8
 8001898:	60fb      	str	r3, [r7, #12]
 800189a:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800189c:	f44f 7380 	mov.w	r3, #256	; 0x100
 80018a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018a2:	2300      	movs	r3, #0
 80018a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a6:	2300      	movs	r3, #0
 80018a8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018aa:	f107 0314 	add.w	r3, r7, #20
 80018ae:	4619      	mov	r1, r3
 80018b0:	4814      	ldr	r0, [pc, #80]	; (8001904 <HAL_CAN_MspInit+0xb8>)
 80018b2:	f001 f82d 	bl	8002910 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80018b6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80018ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018bc:	2302      	movs	r3, #2
 80018be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80018c0:	2303      	movs	r3, #3
 80018c2:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018c4:	f107 0314 	add.w	r3, r7, #20
 80018c8:	4619      	mov	r1, r3
 80018ca:	480e      	ldr	r0, [pc, #56]	; (8001904 <HAL_CAN_MspInit+0xb8>)
 80018cc:	f001 f820 	bl	8002910 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_CAN1_2();
 80018d0:	4b0d      	ldr	r3, [pc, #52]	; (8001908 <HAL_CAN_MspInit+0xbc>)
 80018d2:	685b      	ldr	r3, [r3, #4]
 80018d4:	627b      	str	r3, [r7, #36]	; 0x24
 80018d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018d8:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 80018dc:	627b      	str	r3, [r7, #36]	; 0x24
 80018de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018e0:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80018e4:	627b      	str	r3, [r7, #36]	; 0x24
 80018e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018ec:	627b      	str	r3, [r7, #36]	; 0x24
 80018ee:	4a06      	ldr	r2, [pc, #24]	; (8001908 <HAL_CAN_MspInit+0xbc>)
 80018f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018f2:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 80018f4:	bf00      	nop
 80018f6:	3728      	adds	r7, #40	; 0x28
 80018f8:	46bd      	mov	sp, r7
 80018fa:	bd80      	pop	{r7, pc}
 80018fc:	40006400 	.word	0x40006400
 8001900:	40021000 	.word	0x40021000
 8001904:	40010c00 	.word	0x40010c00
 8001908:	40010000 	.word	0x40010000

0800190c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b084      	sub	sp, #16
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	4a0b      	ldr	r2, [pc, #44]	; (8001948 <HAL_RTC_MspInit+0x3c>)
 800191a:	4293      	cmp	r3, r2
 800191c:	d110      	bne.n	8001940 <HAL_RTC_MspInit+0x34>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 800191e:	f001 fa9f 	bl	8002e60 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 8001922:	4b0a      	ldr	r3, [pc, #40]	; (800194c <HAL_RTC_MspInit+0x40>)
 8001924:	69db      	ldr	r3, [r3, #28]
 8001926:	4a09      	ldr	r2, [pc, #36]	; (800194c <HAL_RTC_MspInit+0x40>)
 8001928:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800192c:	61d3      	str	r3, [r2, #28]
 800192e:	4b07      	ldr	r3, [pc, #28]	; (800194c <HAL_RTC_MspInit+0x40>)
 8001930:	69db      	ldr	r3, [r3, #28]
 8001932:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001936:	60fb      	str	r3, [r7, #12]
 8001938:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800193a:	4b05      	ldr	r3, [pc, #20]	; (8001950 <HAL_RTC_MspInit+0x44>)
 800193c:	2201      	movs	r2, #1
 800193e:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001940:	bf00      	nop
 8001942:	3710      	adds	r7, #16
 8001944:	46bd      	mov	sp, r7
 8001946:	bd80      	pop	{r7, pc}
 8001948:	40002800 	.word	0x40002800
 800194c:	40021000 	.word	0x40021000
 8001950:	4242043c 	.word	0x4242043c

08001954 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b08a      	sub	sp, #40	; 0x28
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800195c:	f107 0318 	add.w	r3, r7, #24
 8001960:	2200      	movs	r2, #0
 8001962:	601a      	str	r2, [r3, #0]
 8001964:	605a      	str	r2, [r3, #4]
 8001966:	609a      	str	r2, [r3, #8]
 8001968:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	4a31      	ldr	r2, [pc, #196]	; (8001a34 <HAL_SPI_MspInit+0xe0>)
 8001970:	4293      	cmp	r3, r2
 8001972:	d130      	bne.n	80019d6 <HAL_SPI_MspInit+0x82>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001974:	4b30      	ldr	r3, [pc, #192]	; (8001a38 <HAL_SPI_MspInit+0xe4>)
 8001976:	699b      	ldr	r3, [r3, #24]
 8001978:	4a2f      	ldr	r2, [pc, #188]	; (8001a38 <HAL_SPI_MspInit+0xe4>)
 800197a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800197e:	6193      	str	r3, [r2, #24]
 8001980:	4b2d      	ldr	r3, [pc, #180]	; (8001a38 <HAL_SPI_MspInit+0xe4>)
 8001982:	699b      	ldr	r3, [r3, #24]
 8001984:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001988:	617b      	str	r3, [r7, #20]
 800198a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800198c:	4b2a      	ldr	r3, [pc, #168]	; (8001a38 <HAL_SPI_MspInit+0xe4>)
 800198e:	699b      	ldr	r3, [r3, #24]
 8001990:	4a29      	ldr	r2, [pc, #164]	; (8001a38 <HAL_SPI_MspInit+0xe4>)
 8001992:	f043 0304 	orr.w	r3, r3, #4
 8001996:	6193      	str	r3, [r2, #24]
 8001998:	4b27      	ldr	r3, [pc, #156]	; (8001a38 <HAL_SPI_MspInit+0xe4>)
 800199a:	699b      	ldr	r3, [r3, #24]
 800199c:	f003 0304 	and.w	r3, r3, #4
 80019a0:	613b      	str	r3, [r7, #16]
 80019a2:	693b      	ldr	r3, [r7, #16]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
 80019a4:	23b0      	movs	r3, #176	; 0xb0
 80019a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019a8:	2302      	movs	r3, #2
 80019aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80019ac:	2303      	movs	r3, #3
 80019ae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019b0:	f107 0318 	add.w	r3, r7, #24
 80019b4:	4619      	mov	r1, r3
 80019b6:	4821      	ldr	r0, [pc, #132]	; (8001a3c <HAL_SPI_MspInit+0xe8>)
 80019b8:	f000 ffaa 	bl	8002910 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80019bc:	2340      	movs	r3, #64	; 0x40
 80019be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019c0:	2300      	movs	r3, #0
 80019c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019c4:	2300      	movs	r3, #0
 80019c6:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019c8:	f107 0318 	add.w	r3, r7, #24
 80019cc:	4619      	mov	r1, r3
 80019ce:	481b      	ldr	r0, [pc, #108]	; (8001a3c <HAL_SPI_MspInit+0xe8>)
 80019d0:	f000 ff9e 	bl	8002910 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80019d4:	e029      	b.n	8001a2a <HAL_SPI_MspInit+0xd6>
  else if(hspi->Instance==SPI2)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	4a19      	ldr	r2, [pc, #100]	; (8001a40 <HAL_SPI_MspInit+0xec>)
 80019dc:	4293      	cmp	r3, r2
 80019de:	d124      	bne.n	8001a2a <HAL_SPI_MspInit+0xd6>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80019e0:	4b15      	ldr	r3, [pc, #84]	; (8001a38 <HAL_SPI_MspInit+0xe4>)
 80019e2:	69db      	ldr	r3, [r3, #28]
 80019e4:	4a14      	ldr	r2, [pc, #80]	; (8001a38 <HAL_SPI_MspInit+0xe4>)
 80019e6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019ea:	61d3      	str	r3, [r2, #28]
 80019ec:	4b12      	ldr	r3, [pc, #72]	; (8001a38 <HAL_SPI_MspInit+0xe4>)
 80019ee:	69db      	ldr	r3, [r3, #28]
 80019f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019f4:	60fb      	str	r3, [r7, #12]
 80019f6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019f8:	4b0f      	ldr	r3, [pc, #60]	; (8001a38 <HAL_SPI_MspInit+0xe4>)
 80019fa:	699b      	ldr	r3, [r3, #24]
 80019fc:	4a0e      	ldr	r2, [pc, #56]	; (8001a38 <HAL_SPI_MspInit+0xe4>)
 80019fe:	f043 0308 	orr.w	r3, r3, #8
 8001a02:	6193      	str	r3, [r2, #24]
 8001a04:	4b0c      	ldr	r3, [pc, #48]	; (8001a38 <HAL_SPI_MspInit+0xe4>)
 8001a06:	699b      	ldr	r3, [r3, #24]
 8001a08:	f003 0308 	and.w	r3, r3, #8
 8001a0c:	60bb      	str	r3, [r7, #8]
 8001a0e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = DISP_SPI_CS_Pin|DISP_SPI_SCK_Pin|GPIO_PIN_15;
 8001a10:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 8001a14:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a16:	2302      	movs	r3, #2
 8001a18:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a1a:	2303      	movs	r3, #3
 8001a1c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a1e:	f107 0318 	add.w	r3, r7, #24
 8001a22:	4619      	mov	r1, r3
 8001a24:	4807      	ldr	r0, [pc, #28]	; (8001a44 <HAL_SPI_MspInit+0xf0>)
 8001a26:	f000 ff73 	bl	8002910 <HAL_GPIO_Init>
}
 8001a2a:	bf00      	nop
 8001a2c:	3728      	adds	r7, #40	; 0x28
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}
 8001a32:	bf00      	nop
 8001a34:	40013000 	.word	0x40013000
 8001a38:	40021000 	.word	0x40021000
 8001a3c:	40010800 	.word	0x40010800
 8001a40:	40003800 	.word	0x40003800
 8001a44:	40010c00 	.word	0x40010c00

08001a48 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	b085      	sub	sp, #20
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	4a09      	ldr	r2, [pc, #36]	; (8001a7c <HAL_TIM_PWM_MspInit+0x34>)
 8001a56:	4293      	cmp	r3, r2
 8001a58:	d10b      	bne.n	8001a72 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001a5a:	4b09      	ldr	r3, [pc, #36]	; (8001a80 <HAL_TIM_PWM_MspInit+0x38>)
 8001a5c:	699b      	ldr	r3, [r3, #24]
 8001a5e:	4a08      	ldr	r2, [pc, #32]	; (8001a80 <HAL_TIM_PWM_MspInit+0x38>)
 8001a60:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001a64:	6193      	str	r3, [r2, #24]
 8001a66:	4b06      	ldr	r3, [pc, #24]	; (8001a80 <HAL_TIM_PWM_MspInit+0x38>)
 8001a68:	699b      	ldr	r3, [r3, #24]
 8001a6a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001a6e:	60fb      	str	r3, [r7, #12]
 8001a70:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001a72:	bf00      	nop
 8001a74:	3714      	adds	r7, #20
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bc80      	pop	{r7}
 8001a7a:	4770      	bx	lr
 8001a7c:	40012c00 	.word	0x40012c00
 8001a80:	40021000 	.word	0x40021000

08001a84 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b088      	sub	sp, #32
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a8c:	f107 0310 	add.w	r3, r7, #16
 8001a90:	2200      	movs	r2, #0
 8001a92:	601a      	str	r2, [r3, #0]
 8001a94:	605a      	str	r2, [r3, #4]
 8001a96:	609a      	str	r2, [r3, #8]
 8001a98:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	4a10      	ldr	r2, [pc, #64]	; (8001ae0 <HAL_TIM_MspPostInit+0x5c>)
 8001aa0:	4293      	cmp	r3, r2
 8001aa2:	d118      	bne.n	8001ad6 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001aa4:	4b0f      	ldr	r3, [pc, #60]	; (8001ae4 <HAL_TIM_MspPostInit+0x60>)
 8001aa6:	699b      	ldr	r3, [r3, #24]
 8001aa8:	4a0e      	ldr	r2, [pc, #56]	; (8001ae4 <HAL_TIM_MspPostInit+0x60>)
 8001aaa:	f043 0304 	orr.w	r3, r3, #4
 8001aae:	6193      	str	r3, [r2, #24]
 8001ab0:	4b0c      	ldr	r3, [pc, #48]	; (8001ae4 <HAL_TIM_MspPostInit+0x60>)
 8001ab2:	699b      	ldr	r3, [r3, #24]
 8001ab4:	f003 0304 	and.w	r3, r3, #4
 8001ab8:	60fb      	str	r3, [r7, #12]
 8001aba:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = DISP_BRIGHT_PWM_Pin;
 8001abc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001ac0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ac2:	2302      	movs	r3, #2
 8001ac4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ac6:	2302      	movs	r3, #2
 8001ac8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISP_BRIGHT_PWM_GPIO_Port, &GPIO_InitStruct);
 8001aca:	f107 0310 	add.w	r3, r7, #16
 8001ace:	4619      	mov	r1, r3
 8001ad0:	4805      	ldr	r0, [pc, #20]	; (8001ae8 <HAL_TIM_MspPostInit+0x64>)
 8001ad2:	f000 ff1d 	bl	8002910 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001ad6:	bf00      	nop
 8001ad8:	3720      	adds	r7, #32
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd80      	pop	{r7, pc}
 8001ade:	bf00      	nop
 8001ae0:	40012c00 	.word	0x40012c00
 8001ae4:	40021000 	.word	0x40021000
 8001ae8:	40010800 	.word	0x40010800

08001aec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b08a      	sub	sp, #40	; 0x28
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001af4:	f107 0318 	add.w	r3, r7, #24
 8001af8:	2200      	movs	r2, #0
 8001afa:	601a      	str	r2, [r3, #0]
 8001afc:	605a      	str	r2, [r3, #4]
 8001afe:	609a      	str	r2, [r3, #8]
 8001b00:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	4a40      	ldr	r2, [pc, #256]	; (8001c08 <HAL_UART_MspInit+0x11c>)
 8001b08:	4293      	cmp	r3, r2
 8001b0a:	d13a      	bne.n	8001b82 <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001b0c:	4b3f      	ldr	r3, [pc, #252]	; (8001c0c <HAL_UART_MspInit+0x120>)
 8001b0e:	699b      	ldr	r3, [r3, #24]
 8001b10:	4a3e      	ldr	r2, [pc, #248]	; (8001c0c <HAL_UART_MspInit+0x120>)
 8001b12:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b16:	6193      	str	r3, [r2, #24]
 8001b18:	4b3c      	ldr	r3, [pc, #240]	; (8001c0c <HAL_UART_MspInit+0x120>)
 8001b1a:	699b      	ldr	r3, [r3, #24]
 8001b1c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b20:	617b      	str	r3, [r7, #20]
 8001b22:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b24:	4b39      	ldr	r3, [pc, #228]	; (8001c0c <HAL_UART_MspInit+0x120>)
 8001b26:	699b      	ldr	r3, [r3, #24]
 8001b28:	4a38      	ldr	r2, [pc, #224]	; (8001c0c <HAL_UART_MspInit+0x120>)
 8001b2a:	f043 0304 	orr.w	r3, r3, #4
 8001b2e:	6193      	str	r3, [r2, #24]
 8001b30:	4b36      	ldr	r3, [pc, #216]	; (8001c0c <HAL_UART_MspInit+0x120>)
 8001b32:	699b      	ldr	r3, [r3, #24]
 8001b34:	f003 0304 	and.w	r3, r3, #4
 8001b38:	613b      	str	r3, [r7, #16]
 8001b3a:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ESP_UART_TX_Pin;
 8001b3c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001b40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b42:	2302      	movs	r3, #2
 8001b44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b46:	2303      	movs	r3, #3
 8001b48:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ESP_UART_TX_GPIO_Port, &GPIO_InitStruct);
 8001b4a:	f107 0318 	add.w	r3, r7, #24
 8001b4e:	4619      	mov	r1, r3
 8001b50:	482f      	ldr	r0, [pc, #188]	; (8001c10 <HAL_UART_MspInit+0x124>)
 8001b52:	f000 fedd 	bl	8002910 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ESP_UART_RX_Pin;
 8001b56:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b5a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b60:	2300      	movs	r3, #0
 8001b62:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(ESP_UART_RX_GPIO_Port, &GPIO_InitStruct);
 8001b64:	f107 0318 	add.w	r3, r7, #24
 8001b68:	4619      	mov	r1, r3
 8001b6a:	4829      	ldr	r0, [pc, #164]	; (8001c10 <HAL_UART_MspInit+0x124>)
 8001b6c:	f000 fed0 	bl	8002910 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001b70:	2200      	movs	r2, #0
 8001b72:	2100      	movs	r1, #0
 8001b74:	2025      	movs	r0, #37	; 0x25
 8001b76:	f000 fde4 	bl	8002742 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001b7a:	2025      	movs	r0, #37	; 0x25
 8001b7c:	f000 fdfd 	bl	800277a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001b80:	e03e      	b.n	8001c00 <HAL_UART_MspInit+0x114>
  else if(huart->Instance==USART3)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	4a23      	ldr	r2, [pc, #140]	; (8001c14 <HAL_UART_MspInit+0x128>)
 8001b88:	4293      	cmp	r3, r2
 8001b8a:	d139      	bne.n	8001c00 <HAL_UART_MspInit+0x114>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001b8c:	4b1f      	ldr	r3, [pc, #124]	; (8001c0c <HAL_UART_MspInit+0x120>)
 8001b8e:	69db      	ldr	r3, [r3, #28]
 8001b90:	4a1e      	ldr	r2, [pc, #120]	; (8001c0c <HAL_UART_MspInit+0x120>)
 8001b92:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b96:	61d3      	str	r3, [r2, #28]
 8001b98:	4b1c      	ldr	r3, [pc, #112]	; (8001c0c <HAL_UART_MspInit+0x120>)
 8001b9a:	69db      	ldr	r3, [r3, #28]
 8001b9c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001ba0:	60fb      	str	r3, [r7, #12]
 8001ba2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ba4:	4b19      	ldr	r3, [pc, #100]	; (8001c0c <HAL_UART_MspInit+0x120>)
 8001ba6:	699b      	ldr	r3, [r3, #24]
 8001ba8:	4a18      	ldr	r2, [pc, #96]	; (8001c0c <HAL_UART_MspInit+0x120>)
 8001baa:	f043 0308 	orr.w	r3, r3, #8
 8001bae:	6193      	str	r3, [r2, #24]
 8001bb0:	4b16      	ldr	r3, [pc, #88]	; (8001c0c <HAL_UART_MspInit+0x120>)
 8001bb2:	699b      	ldr	r3, [r3, #24]
 8001bb4:	f003 0308 	and.w	r3, r3, #8
 8001bb8:	60bb      	str	r3, [r7, #8]
 8001bba:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = EXT_TX_Pin;
 8001bbc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001bc0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bc2:	2302      	movs	r3, #2
 8001bc4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001bc6:	2303      	movs	r3, #3
 8001bc8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(EXT_TX_GPIO_Port, &GPIO_InitStruct);
 8001bca:	f107 0318 	add.w	r3, r7, #24
 8001bce:	4619      	mov	r1, r3
 8001bd0:	4811      	ldr	r0, [pc, #68]	; (8001c18 <HAL_UART_MspInit+0x12c>)
 8001bd2:	f000 fe9d 	bl	8002910 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = EXT_RX_Pin;
 8001bd6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001bda:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001be0:	2300      	movs	r3, #0
 8001be2:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(EXT_RX_GPIO_Port, &GPIO_InitStruct);
 8001be4:	f107 0318 	add.w	r3, r7, #24
 8001be8:	4619      	mov	r1, r3
 8001bea:	480b      	ldr	r0, [pc, #44]	; (8001c18 <HAL_UART_MspInit+0x12c>)
 8001bec:	f000 fe90 	bl	8002910 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	2100      	movs	r1, #0
 8001bf4:	2027      	movs	r0, #39	; 0x27
 8001bf6:	f000 fda4 	bl	8002742 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001bfa:	2027      	movs	r0, #39	; 0x27
 8001bfc:	f000 fdbd 	bl	800277a <HAL_NVIC_EnableIRQ>
}
 8001c00:	bf00      	nop
 8001c02:	3728      	adds	r7, #40	; 0x28
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bd80      	pop	{r7, pc}
 8001c08:	40013800 	.word	0x40013800
 8001c0c:	40021000 	.word	0x40021000
 8001c10:	40010800 	.word	0x40010800
 8001c14:	40004800 	.word	0x40004800
 8001c18:	40010c00 	.word	0x40010c00

08001c1c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	b085      	sub	sp, #20
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
  if(hpcd->Instance==USB)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4a09      	ldr	r2, [pc, #36]	; (8001c50 <HAL_PCD_MspInit+0x34>)
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d10b      	bne.n	8001c46 <HAL_PCD_MspInit+0x2a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8001c2e:	4b09      	ldr	r3, [pc, #36]	; (8001c54 <HAL_PCD_MspInit+0x38>)
 8001c30:	69db      	ldr	r3, [r3, #28]
 8001c32:	4a08      	ldr	r2, [pc, #32]	; (8001c54 <HAL_PCD_MspInit+0x38>)
 8001c34:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001c38:	61d3      	str	r3, [r2, #28]
 8001c3a:	4b06      	ldr	r3, [pc, #24]	; (8001c54 <HAL_PCD_MspInit+0x38>)
 8001c3c:	69db      	ldr	r3, [r3, #28]
 8001c3e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001c42:	60fb      	str	r3, [r7, #12]
 8001c44:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8001c46:	bf00      	nop
 8001c48:	3714      	adds	r7, #20
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bc80      	pop	{r7}
 8001c4e:	4770      	bx	lr
 8001c50:	40005c00 	.word	0x40005c00
 8001c54:	40021000 	.word	0x40021000

08001c58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001c5c:	e7fe      	b.n	8001c5c <NMI_Handler+0x4>

08001c5e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c5e:	b480      	push	{r7}
 8001c60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c62:	e7fe      	b.n	8001c62 <HardFault_Handler+0x4>

08001c64 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c64:	b480      	push	{r7}
 8001c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c68:	e7fe      	b.n	8001c68 <MemManage_Handler+0x4>

08001c6a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c6a:	b480      	push	{r7}
 8001c6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c6e:	e7fe      	b.n	8001c6e <BusFault_Handler+0x4>

08001c70 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c70:	b480      	push	{r7}
 8001c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c74:	e7fe      	b.n	8001c74 <UsageFault_Handler+0x4>

08001c76 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c76:	b480      	push	{r7}
 8001c78:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c7a:	bf00      	nop
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	bc80      	pop	{r7}
 8001c80:	4770      	bx	lr

08001c82 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c82:	b480      	push	{r7}
 8001c84:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c86:	bf00      	nop
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	bc80      	pop	{r7}
 8001c8c:	4770      	bx	lr

08001c8e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c8e:	b480      	push	{r7}
 8001c90:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c92:	bf00      	nop
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bc80      	pop	{r7}
 8001c98:	4770      	bx	lr

08001c9a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c9a:	b580      	push	{r7, lr}
 8001c9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c9e:	f000 f92d 	bl	8001efc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ca2:	bf00      	nop
 8001ca4:	bd80      	pop	{r7, pc}
	...

08001ca8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001cac:	4802      	ldr	r0, [pc, #8]	; (8001cb8 <USART1_IRQHandler+0x10>)
 8001cae:	f003 f951 	bl	8004f54 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001cb2:	bf00      	nop
 8001cb4:	bd80      	pop	{r7, pc}
 8001cb6:	bf00      	nop
 8001cb8:	20000f7c 	.word	0x20000f7c

08001cbc <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001cc0:	4802      	ldr	r0, [pc, #8]	; (8001ccc <USART3_IRQHandler+0x10>)
 8001cc2:	f003 f947 	bl	8004f54 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001cc6:	bf00      	nop
 8001cc8:	bd80      	pop	{r7, pc}
 8001cca:	bf00      	nop
 8001ccc:	20000fc0 	.word	0x20000fc0

08001cd0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	af00      	add	r7, sp, #0
	return 1;
 8001cd4:	2301      	movs	r3, #1
}
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bc80      	pop	{r7}
 8001cdc:	4770      	bx	lr

08001cde <_kill>:

int _kill(int pid, int sig)
{
 8001cde:	b580      	push	{r7, lr}
 8001ce0:	b082      	sub	sp, #8
 8001ce2:	af00      	add	r7, sp, #0
 8001ce4:	6078      	str	r0, [r7, #4]
 8001ce6:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001ce8:	f003 fd6a 	bl	80057c0 <__errno>
 8001cec:	4603      	mov	r3, r0
 8001cee:	2216      	movs	r2, #22
 8001cf0:	601a      	str	r2, [r3, #0]
	return -1;
 8001cf2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	3708      	adds	r7, #8
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bd80      	pop	{r7, pc}

08001cfe <_exit>:

void _exit (int status)
{
 8001cfe:	b580      	push	{r7, lr}
 8001d00:	b082      	sub	sp, #8
 8001d02:	af00      	add	r7, sp, #0
 8001d04:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001d06:	f04f 31ff 	mov.w	r1, #4294967295
 8001d0a:	6878      	ldr	r0, [r7, #4]
 8001d0c:	f7ff ffe7 	bl	8001cde <_kill>
	while (1) {}		/* Make sure we hang here */
 8001d10:	e7fe      	b.n	8001d10 <_exit+0x12>

08001d12 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001d12:	b580      	push	{r7, lr}
 8001d14:	b086      	sub	sp, #24
 8001d16:	af00      	add	r7, sp, #0
 8001d18:	60f8      	str	r0, [r7, #12]
 8001d1a:	60b9      	str	r1, [r7, #8]
 8001d1c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d1e:	2300      	movs	r3, #0
 8001d20:	617b      	str	r3, [r7, #20]
 8001d22:	e00a      	b.n	8001d3a <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001d24:	f3af 8000 	nop.w
 8001d28:	4601      	mov	r1, r0
 8001d2a:	68bb      	ldr	r3, [r7, #8]
 8001d2c:	1c5a      	adds	r2, r3, #1
 8001d2e:	60ba      	str	r2, [r7, #8]
 8001d30:	b2ca      	uxtb	r2, r1
 8001d32:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d34:	697b      	ldr	r3, [r7, #20]
 8001d36:	3301      	adds	r3, #1
 8001d38:	617b      	str	r3, [r7, #20]
 8001d3a:	697a      	ldr	r2, [r7, #20]
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	429a      	cmp	r2, r3
 8001d40:	dbf0      	blt.n	8001d24 <_read+0x12>
	}

return len;
 8001d42:	687b      	ldr	r3, [r7, #4]
}
 8001d44:	4618      	mov	r0, r3
 8001d46:	3718      	adds	r7, #24
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	bd80      	pop	{r7, pc}

08001d4c <_close>:
	}
	return len;
}

int _close(int file)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	b083      	sub	sp, #12
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
	return -1;
 8001d54:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d58:	4618      	mov	r0, r3
 8001d5a:	370c      	adds	r7, #12
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	bc80      	pop	{r7}
 8001d60:	4770      	bx	lr

08001d62 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001d62:	b480      	push	{r7}
 8001d64:	b083      	sub	sp, #12
 8001d66:	af00      	add	r7, sp, #0
 8001d68:	6078      	str	r0, [r7, #4]
 8001d6a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001d72:	605a      	str	r2, [r3, #4]
	return 0;
 8001d74:	2300      	movs	r3, #0
}
 8001d76:	4618      	mov	r0, r3
 8001d78:	370c      	adds	r7, #12
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bc80      	pop	{r7}
 8001d7e:	4770      	bx	lr

08001d80 <_isatty>:

int _isatty(int file)
{
 8001d80:	b480      	push	{r7}
 8001d82:	b083      	sub	sp, #12
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
	return 1;
 8001d88:	2301      	movs	r3, #1
}
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	370c      	adds	r7, #12
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bc80      	pop	{r7}
 8001d92:	4770      	bx	lr

08001d94 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001d94:	b480      	push	{r7}
 8001d96:	b085      	sub	sp, #20
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	60f8      	str	r0, [r7, #12]
 8001d9c:	60b9      	str	r1, [r7, #8]
 8001d9e:	607a      	str	r2, [r7, #4]
	return 0;
 8001da0:	2300      	movs	r3, #0
}
 8001da2:	4618      	mov	r0, r3
 8001da4:	3714      	adds	r7, #20
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bc80      	pop	{r7}
 8001daa:	4770      	bx	lr

08001dac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b086      	sub	sp, #24
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001db4:	4a14      	ldr	r2, [pc, #80]	; (8001e08 <_sbrk+0x5c>)
 8001db6:	4b15      	ldr	r3, [pc, #84]	; (8001e0c <_sbrk+0x60>)
 8001db8:	1ad3      	subs	r3, r2, r3
 8001dba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001dbc:	697b      	ldr	r3, [r7, #20]
 8001dbe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001dc0:	4b13      	ldr	r3, [pc, #76]	; (8001e10 <_sbrk+0x64>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d102      	bne.n	8001dce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001dc8:	4b11      	ldr	r3, [pc, #68]	; (8001e10 <_sbrk+0x64>)
 8001dca:	4a12      	ldr	r2, [pc, #72]	; (8001e14 <_sbrk+0x68>)
 8001dcc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001dce:	4b10      	ldr	r3, [pc, #64]	; (8001e10 <_sbrk+0x64>)
 8001dd0:	681a      	ldr	r2, [r3, #0]
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	4413      	add	r3, r2
 8001dd6:	693a      	ldr	r2, [r7, #16]
 8001dd8:	429a      	cmp	r2, r3
 8001dda:	d207      	bcs.n	8001dec <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ddc:	f003 fcf0 	bl	80057c0 <__errno>
 8001de0:	4603      	mov	r3, r0
 8001de2:	220c      	movs	r2, #12
 8001de4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001de6:	f04f 33ff 	mov.w	r3, #4294967295
 8001dea:	e009      	b.n	8001e00 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001dec:	4b08      	ldr	r3, [pc, #32]	; (8001e10 <_sbrk+0x64>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001df2:	4b07      	ldr	r3, [pc, #28]	; (8001e10 <_sbrk+0x64>)
 8001df4:	681a      	ldr	r2, [r3, #0]
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	4413      	add	r3, r2
 8001dfa:	4a05      	ldr	r2, [pc, #20]	; (8001e10 <_sbrk+0x64>)
 8001dfc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001dfe:	68fb      	ldr	r3, [r7, #12]
}
 8001e00:	4618      	mov	r0, r3
 8001e02:	3718      	adds	r7, #24
 8001e04:	46bd      	mov	sp, r7
 8001e06:	bd80      	pop	{r7, pc}
 8001e08:	20005000 	.word	0x20005000
 8001e0c:	00000400 	.word	0x00000400
 8001e10:	200012f0 	.word	0x200012f0
 8001e14:	20001308 	.word	0x20001308

08001e18 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e1c:	bf00      	nop
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bc80      	pop	{r7}
 8001e22:	4770      	bx	lr

08001e24 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001e24:	480c      	ldr	r0, [pc, #48]	; (8001e58 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001e26:	490d      	ldr	r1, [pc, #52]	; (8001e5c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001e28:	4a0d      	ldr	r2, [pc, #52]	; (8001e60 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001e2a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e2c:	e002      	b.n	8001e34 <LoopCopyDataInit>

08001e2e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e2e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e30:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e32:	3304      	adds	r3, #4

08001e34 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e34:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e36:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e38:	d3f9      	bcc.n	8001e2e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e3a:	4a0a      	ldr	r2, [pc, #40]	; (8001e64 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001e3c:	4c0a      	ldr	r4, [pc, #40]	; (8001e68 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001e3e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e40:	e001      	b.n	8001e46 <LoopFillZerobss>

08001e42 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e42:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e44:	3204      	adds	r2, #4

08001e46 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e46:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e48:	d3fb      	bcc.n	8001e42 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001e4a:	f7ff ffe5 	bl	8001e18 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001e4e:	f003 fcbd 	bl	80057cc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001e52:	f7ff f89b 	bl	8000f8c <main>
  bx lr
 8001e56:	4770      	bx	lr
  ldr r0, =_sdata
 8001e58:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e5c:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8001e60:	08008f24 	.word	0x08008f24
  ldr r2, =_sbss
 8001e64:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8001e68:	20001308 	.word	0x20001308

08001e6c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001e6c:	e7fe      	b.n	8001e6c <ADC1_2_IRQHandler>
	...

08001e70 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e74:	4b08      	ldr	r3, [pc, #32]	; (8001e98 <HAL_Init+0x28>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	4a07      	ldr	r2, [pc, #28]	; (8001e98 <HAL_Init+0x28>)
 8001e7a:	f043 0310 	orr.w	r3, r3, #16
 8001e7e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e80:	2003      	movs	r0, #3
 8001e82:	f000 fc53 	bl	800272c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e86:	200f      	movs	r0, #15
 8001e88:	f000 f808 	bl	8001e9c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e8c:	f7ff fc58 	bl	8001740 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e90:	2300      	movs	r3, #0
}
 8001e92:	4618      	mov	r0, r3
 8001e94:	bd80      	pop	{r7, pc}
 8001e96:	bf00      	nop
 8001e98:	40022000 	.word	0x40022000

08001e9c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b082      	sub	sp, #8
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ea4:	4b12      	ldr	r3, [pc, #72]	; (8001ef0 <HAL_InitTick+0x54>)
 8001ea6:	681a      	ldr	r2, [r3, #0]
 8001ea8:	4b12      	ldr	r3, [pc, #72]	; (8001ef4 <HAL_InitTick+0x58>)
 8001eaa:	781b      	ldrb	r3, [r3, #0]
 8001eac:	4619      	mov	r1, r3
 8001eae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001eb2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001eb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001eba:	4618      	mov	r0, r3
 8001ebc:	f000 fc6b 	bl	8002796 <HAL_SYSTICK_Config>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d001      	beq.n	8001eca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001ec6:	2301      	movs	r3, #1
 8001ec8:	e00e      	b.n	8001ee8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	2b0f      	cmp	r3, #15
 8001ece:	d80a      	bhi.n	8001ee6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	6879      	ldr	r1, [r7, #4]
 8001ed4:	f04f 30ff 	mov.w	r0, #4294967295
 8001ed8:	f000 fc33 	bl	8002742 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001edc:	4a06      	ldr	r2, [pc, #24]	; (8001ef8 <HAL_InitTick+0x5c>)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	e000      	b.n	8001ee8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001ee6:	2301      	movs	r3, #1
}
 8001ee8:	4618      	mov	r0, r3
 8001eea:	3708      	adds	r7, #8
 8001eec:	46bd      	mov	sp, r7
 8001eee:	bd80      	pop	{r7, pc}
 8001ef0:	20000008 	.word	0x20000008
 8001ef4:	20000010 	.word	0x20000010
 8001ef8:	2000000c 	.word	0x2000000c

08001efc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001efc:	b480      	push	{r7}
 8001efe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f00:	4b05      	ldr	r3, [pc, #20]	; (8001f18 <HAL_IncTick+0x1c>)
 8001f02:	781b      	ldrb	r3, [r3, #0]
 8001f04:	461a      	mov	r2, r3
 8001f06:	4b05      	ldr	r3, [pc, #20]	; (8001f1c <HAL_IncTick+0x20>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	4413      	add	r3, r2
 8001f0c:	4a03      	ldr	r2, [pc, #12]	; (8001f1c <HAL_IncTick+0x20>)
 8001f0e:	6013      	str	r3, [r2, #0]
}
 8001f10:	bf00      	nop
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bc80      	pop	{r7}
 8001f16:	4770      	bx	lr
 8001f18:	20000010 	.word	0x20000010
 8001f1c:	200012f4 	.word	0x200012f4

08001f20 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f20:	b480      	push	{r7}
 8001f22:	af00      	add	r7, sp, #0
  return uwTick;
 8001f24:	4b02      	ldr	r3, [pc, #8]	; (8001f30 <HAL_GetTick+0x10>)
 8001f26:	681b      	ldr	r3, [r3, #0]
}
 8001f28:	4618      	mov	r0, r3
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bc80      	pop	{r7}
 8001f2e:	4770      	bx	lr
 8001f30:	200012f4 	.word	0x200012f4

08001f34 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b084      	sub	sp, #16
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f3c:	f7ff fff0 	bl	8001f20 <HAL_GetTick>
 8001f40:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f4c:	d005      	beq.n	8001f5a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f4e:	4b0a      	ldr	r3, [pc, #40]	; (8001f78 <HAL_Delay+0x44>)
 8001f50:	781b      	ldrb	r3, [r3, #0]
 8001f52:	461a      	mov	r2, r3
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	4413      	add	r3, r2
 8001f58:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001f5a:	bf00      	nop
 8001f5c:	f7ff ffe0 	bl	8001f20 <HAL_GetTick>
 8001f60:	4602      	mov	r2, r0
 8001f62:	68bb      	ldr	r3, [r7, #8]
 8001f64:	1ad3      	subs	r3, r2, r3
 8001f66:	68fa      	ldr	r2, [r7, #12]
 8001f68:	429a      	cmp	r2, r3
 8001f6a:	d8f7      	bhi.n	8001f5c <HAL_Delay+0x28>
  {
  }
}
 8001f6c:	bf00      	nop
 8001f6e:	bf00      	nop
 8001f70:	3710      	adds	r7, #16
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bd80      	pop	{r7, pc}
 8001f76:	bf00      	nop
 8001f78:	20000010 	.word	0x20000010

08001f7c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b086      	sub	sp, #24
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f84:	2300      	movs	r3, #0
 8001f86:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001f90:	2300      	movs	r3, #0
 8001f92:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d101      	bne.n	8001f9e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	e0be      	b.n	800211c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	689b      	ldr	r3, [r3, #8]
 8001fa2:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d109      	bne.n	8001fc0 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	2200      	movs	r2, #0
 8001fb0:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001fba:	6878      	ldr	r0, [r7, #4]
 8001fbc:	f7ff fbf2 	bl	80017a4 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001fc0:	6878      	ldr	r0, [r7, #4]
 8001fc2:	f000 f9ab 	bl	800231c <ADC_ConversionStop_Disable>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fce:	f003 0310 	and.w	r3, r3, #16
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	f040 8099 	bne.w	800210a <HAL_ADC_Init+0x18e>
 8001fd8:	7dfb      	ldrb	r3, [r7, #23]
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	f040 8095 	bne.w	800210a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fe4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001fe8:	f023 0302 	bic.w	r3, r3, #2
 8001fec:	f043 0202 	orr.w	r2, r3, #2
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001ffc:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	7b1b      	ldrb	r3, [r3, #12]
 8002002:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002004:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002006:	68ba      	ldr	r2, [r7, #8]
 8002008:	4313      	orrs	r3, r2
 800200a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	689b      	ldr	r3, [r3, #8]
 8002010:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002014:	d003      	beq.n	800201e <HAL_ADC_Init+0xa2>
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	689b      	ldr	r3, [r3, #8]
 800201a:	2b01      	cmp	r3, #1
 800201c:	d102      	bne.n	8002024 <HAL_ADC_Init+0xa8>
 800201e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002022:	e000      	b.n	8002026 <HAL_ADC_Init+0xaa>
 8002024:	2300      	movs	r3, #0
 8002026:	693a      	ldr	r2, [r7, #16]
 8002028:	4313      	orrs	r3, r2
 800202a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	7d1b      	ldrb	r3, [r3, #20]
 8002030:	2b01      	cmp	r3, #1
 8002032:	d119      	bne.n	8002068 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	7b1b      	ldrb	r3, [r3, #12]
 8002038:	2b00      	cmp	r3, #0
 800203a:	d109      	bne.n	8002050 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	699b      	ldr	r3, [r3, #24]
 8002040:	3b01      	subs	r3, #1
 8002042:	035a      	lsls	r2, r3, #13
 8002044:	693b      	ldr	r3, [r7, #16]
 8002046:	4313      	orrs	r3, r2
 8002048:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800204c:	613b      	str	r3, [r7, #16]
 800204e:	e00b      	b.n	8002068 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002054:	f043 0220 	orr.w	r2, r3, #32
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002060:	f043 0201 	orr.w	r2, r3, #1
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	685b      	ldr	r3, [r3, #4]
 800206e:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	693a      	ldr	r2, [r7, #16]
 8002078:	430a      	orrs	r2, r1
 800207a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	689a      	ldr	r2, [r3, #8]
 8002082:	4b28      	ldr	r3, [pc, #160]	; (8002124 <HAL_ADC_Init+0x1a8>)
 8002084:	4013      	ands	r3, r2
 8002086:	687a      	ldr	r2, [r7, #4]
 8002088:	6812      	ldr	r2, [r2, #0]
 800208a:	68b9      	ldr	r1, [r7, #8]
 800208c:	430b      	orrs	r3, r1
 800208e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	689b      	ldr	r3, [r3, #8]
 8002094:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002098:	d003      	beq.n	80020a2 <HAL_ADC_Init+0x126>
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	689b      	ldr	r3, [r3, #8]
 800209e:	2b01      	cmp	r3, #1
 80020a0:	d104      	bne.n	80020ac <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	691b      	ldr	r3, [r3, #16]
 80020a6:	3b01      	subs	r3, #1
 80020a8:	051b      	lsls	r3, r3, #20
 80020aa:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020b2:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	68fa      	ldr	r2, [r7, #12]
 80020bc:	430a      	orrs	r2, r1
 80020be:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	689a      	ldr	r2, [r3, #8]
 80020c6:	4b18      	ldr	r3, [pc, #96]	; (8002128 <HAL_ADC_Init+0x1ac>)
 80020c8:	4013      	ands	r3, r2
 80020ca:	68ba      	ldr	r2, [r7, #8]
 80020cc:	429a      	cmp	r2, r3
 80020ce:	d10b      	bne.n	80020e8 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2200      	movs	r2, #0
 80020d4:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020da:	f023 0303 	bic.w	r3, r3, #3
 80020de:	f043 0201 	orr.w	r2, r3, #1
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80020e6:	e018      	b.n	800211a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020ec:	f023 0312 	bic.w	r3, r3, #18
 80020f0:	f043 0210 	orr.w	r2, r3, #16
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020fc:	f043 0201 	orr.w	r2, r3, #1
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002104:	2301      	movs	r3, #1
 8002106:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002108:	e007      	b.n	800211a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800210e:	f043 0210 	orr.w	r2, r3, #16
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8002116:	2301      	movs	r3, #1
 8002118:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800211a:	7dfb      	ldrb	r3, [r7, #23]
}
 800211c:	4618      	mov	r0, r3
 800211e:	3718      	adds	r7, #24
 8002120:	46bd      	mov	sp, r7
 8002122:	bd80      	pop	{r7, pc}
 8002124:	ffe1f7fd 	.word	0xffe1f7fd
 8002128:	ff1f0efe 	.word	0xff1f0efe

0800212c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 800212c:	b480      	push	{r7}
 800212e:	b085      	sub	sp, #20
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
 8002134:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002136:	2300      	movs	r3, #0
 8002138:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800213a:	2300      	movs	r3, #0
 800213c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002144:	2b01      	cmp	r3, #1
 8002146:	d101      	bne.n	800214c <HAL_ADC_ConfigChannel+0x20>
 8002148:	2302      	movs	r3, #2
 800214a:	e0dc      	b.n	8002306 <HAL_ADC_ConfigChannel+0x1da>
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2201      	movs	r2, #1
 8002150:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	685b      	ldr	r3, [r3, #4]
 8002158:	2b06      	cmp	r3, #6
 800215a:	d81c      	bhi.n	8002196 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	685a      	ldr	r2, [r3, #4]
 8002166:	4613      	mov	r3, r2
 8002168:	009b      	lsls	r3, r3, #2
 800216a:	4413      	add	r3, r2
 800216c:	3b05      	subs	r3, #5
 800216e:	221f      	movs	r2, #31
 8002170:	fa02 f303 	lsl.w	r3, r2, r3
 8002174:	43db      	mvns	r3, r3
 8002176:	4019      	ands	r1, r3
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	6818      	ldr	r0, [r3, #0]
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	685a      	ldr	r2, [r3, #4]
 8002180:	4613      	mov	r3, r2
 8002182:	009b      	lsls	r3, r3, #2
 8002184:	4413      	add	r3, r2
 8002186:	3b05      	subs	r3, #5
 8002188:	fa00 f203 	lsl.w	r2, r0, r3
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	430a      	orrs	r2, r1
 8002192:	635a      	str	r2, [r3, #52]	; 0x34
 8002194:	e03c      	b.n	8002210 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	685b      	ldr	r3, [r3, #4]
 800219a:	2b0c      	cmp	r3, #12
 800219c:	d81c      	bhi.n	80021d8 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	685a      	ldr	r2, [r3, #4]
 80021a8:	4613      	mov	r3, r2
 80021aa:	009b      	lsls	r3, r3, #2
 80021ac:	4413      	add	r3, r2
 80021ae:	3b23      	subs	r3, #35	; 0x23
 80021b0:	221f      	movs	r2, #31
 80021b2:	fa02 f303 	lsl.w	r3, r2, r3
 80021b6:	43db      	mvns	r3, r3
 80021b8:	4019      	ands	r1, r3
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	6818      	ldr	r0, [r3, #0]
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	685a      	ldr	r2, [r3, #4]
 80021c2:	4613      	mov	r3, r2
 80021c4:	009b      	lsls	r3, r3, #2
 80021c6:	4413      	add	r3, r2
 80021c8:	3b23      	subs	r3, #35	; 0x23
 80021ca:	fa00 f203 	lsl.w	r2, r0, r3
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	430a      	orrs	r2, r1
 80021d4:	631a      	str	r2, [r3, #48]	; 0x30
 80021d6:	e01b      	b.n	8002210 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	685a      	ldr	r2, [r3, #4]
 80021e2:	4613      	mov	r3, r2
 80021e4:	009b      	lsls	r3, r3, #2
 80021e6:	4413      	add	r3, r2
 80021e8:	3b41      	subs	r3, #65	; 0x41
 80021ea:	221f      	movs	r2, #31
 80021ec:	fa02 f303 	lsl.w	r3, r2, r3
 80021f0:	43db      	mvns	r3, r3
 80021f2:	4019      	ands	r1, r3
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	6818      	ldr	r0, [r3, #0]
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	685a      	ldr	r2, [r3, #4]
 80021fc:	4613      	mov	r3, r2
 80021fe:	009b      	lsls	r3, r3, #2
 8002200:	4413      	add	r3, r2
 8002202:	3b41      	subs	r3, #65	; 0x41
 8002204:	fa00 f203 	lsl.w	r2, r0, r3
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	430a      	orrs	r2, r1
 800220e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	2b09      	cmp	r3, #9
 8002216:	d91c      	bls.n	8002252 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	68d9      	ldr	r1, [r3, #12]
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	681a      	ldr	r2, [r3, #0]
 8002222:	4613      	mov	r3, r2
 8002224:	005b      	lsls	r3, r3, #1
 8002226:	4413      	add	r3, r2
 8002228:	3b1e      	subs	r3, #30
 800222a:	2207      	movs	r2, #7
 800222c:	fa02 f303 	lsl.w	r3, r2, r3
 8002230:	43db      	mvns	r3, r3
 8002232:	4019      	ands	r1, r3
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	6898      	ldr	r0, [r3, #8]
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	681a      	ldr	r2, [r3, #0]
 800223c:	4613      	mov	r3, r2
 800223e:	005b      	lsls	r3, r3, #1
 8002240:	4413      	add	r3, r2
 8002242:	3b1e      	subs	r3, #30
 8002244:	fa00 f203 	lsl.w	r2, r0, r3
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	430a      	orrs	r2, r1
 800224e:	60da      	str	r2, [r3, #12]
 8002250:	e019      	b.n	8002286 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	6919      	ldr	r1, [r3, #16]
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	681a      	ldr	r2, [r3, #0]
 800225c:	4613      	mov	r3, r2
 800225e:	005b      	lsls	r3, r3, #1
 8002260:	4413      	add	r3, r2
 8002262:	2207      	movs	r2, #7
 8002264:	fa02 f303 	lsl.w	r3, r2, r3
 8002268:	43db      	mvns	r3, r3
 800226a:	4019      	ands	r1, r3
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	6898      	ldr	r0, [r3, #8]
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	681a      	ldr	r2, [r3, #0]
 8002274:	4613      	mov	r3, r2
 8002276:	005b      	lsls	r3, r3, #1
 8002278:	4413      	add	r3, r2
 800227a:	fa00 f203 	lsl.w	r2, r0, r3
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	430a      	orrs	r2, r1
 8002284:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	2b10      	cmp	r3, #16
 800228c:	d003      	beq.n	8002296 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002292:	2b11      	cmp	r3, #17
 8002294:	d132      	bne.n	80022fc <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	4a1d      	ldr	r2, [pc, #116]	; (8002310 <HAL_ADC_ConfigChannel+0x1e4>)
 800229c:	4293      	cmp	r3, r2
 800229e:	d125      	bne.n	80022ec <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	689b      	ldr	r3, [r3, #8]
 80022a6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d126      	bne.n	80022fc <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	689a      	ldr	r2, [r3, #8]
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80022bc:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	2b10      	cmp	r3, #16
 80022c4:	d11a      	bne.n	80022fc <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80022c6:	4b13      	ldr	r3, [pc, #76]	; (8002314 <HAL_ADC_ConfigChannel+0x1e8>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	4a13      	ldr	r2, [pc, #76]	; (8002318 <HAL_ADC_ConfigChannel+0x1ec>)
 80022cc:	fba2 2303 	umull	r2, r3, r2, r3
 80022d0:	0c9a      	lsrs	r2, r3, #18
 80022d2:	4613      	mov	r3, r2
 80022d4:	009b      	lsls	r3, r3, #2
 80022d6:	4413      	add	r3, r2
 80022d8:	005b      	lsls	r3, r3, #1
 80022da:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80022dc:	e002      	b.n	80022e4 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80022de:	68bb      	ldr	r3, [r7, #8]
 80022e0:	3b01      	subs	r3, #1
 80022e2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80022e4:	68bb      	ldr	r3, [r7, #8]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d1f9      	bne.n	80022de <HAL_ADC_ConfigChannel+0x1b2>
 80022ea:	e007      	b.n	80022fc <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022f0:	f043 0220 	orr.w	r2, r3, #32
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80022f8:	2301      	movs	r3, #1
 80022fa:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	2200      	movs	r2, #0
 8002300:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002304:	7bfb      	ldrb	r3, [r7, #15]
}
 8002306:	4618      	mov	r0, r3
 8002308:	3714      	adds	r7, #20
 800230a:	46bd      	mov	sp, r7
 800230c:	bc80      	pop	{r7}
 800230e:	4770      	bx	lr
 8002310:	40012400 	.word	0x40012400
 8002314:	20000008 	.word	0x20000008
 8002318:	431bde83 	.word	0x431bde83

0800231c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b084      	sub	sp, #16
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002324:	2300      	movs	r3, #0
 8002326:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	689b      	ldr	r3, [r3, #8]
 800232e:	f003 0301 	and.w	r3, r3, #1
 8002332:	2b01      	cmp	r3, #1
 8002334:	d12e      	bne.n	8002394 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	689a      	ldr	r2, [r3, #8]
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f022 0201 	bic.w	r2, r2, #1
 8002344:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002346:	f7ff fdeb 	bl	8001f20 <HAL_GetTick>
 800234a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 800234c:	e01b      	b.n	8002386 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800234e:	f7ff fde7 	bl	8001f20 <HAL_GetTick>
 8002352:	4602      	mov	r2, r0
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	1ad3      	subs	r3, r2, r3
 8002358:	2b02      	cmp	r3, #2
 800235a:	d914      	bls.n	8002386 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	689b      	ldr	r3, [r3, #8]
 8002362:	f003 0301 	and.w	r3, r3, #1
 8002366:	2b01      	cmp	r3, #1
 8002368:	d10d      	bne.n	8002386 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800236e:	f043 0210 	orr.w	r2, r3, #16
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800237a:	f043 0201 	orr.w	r2, r3, #1
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8002382:	2301      	movs	r3, #1
 8002384:	e007      	b.n	8002396 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	689b      	ldr	r3, [r3, #8]
 800238c:	f003 0301 	and.w	r3, r3, #1
 8002390:	2b01      	cmp	r3, #1
 8002392:	d0dc      	beq.n	800234e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002394:	2300      	movs	r3, #0
}
 8002396:	4618      	mov	r0, r3
 8002398:	3710      	adds	r7, #16
 800239a:	46bd      	mov	sp, r7
 800239c:	bd80      	pop	{r7, pc}

0800239e <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800239e:	b580      	push	{r7, lr}
 80023a0:	b084      	sub	sp, #16
 80023a2:	af00      	add	r7, sp, #0
 80023a4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d101      	bne.n	80023b0 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80023ac:	2301      	movs	r3, #1
 80023ae:	e0ed      	b.n	800258c <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80023b6:	b2db      	uxtb	r3, r3
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d102      	bne.n	80023c2 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80023bc:	6878      	ldr	r0, [r7, #4]
 80023be:	f7ff fa45 	bl	800184c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	681a      	ldr	r2, [r3, #0]
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f042 0201 	orr.w	r2, r2, #1
 80023d0:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80023d2:	f7ff fda5 	bl	8001f20 <HAL_GetTick>
 80023d6:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80023d8:	e012      	b.n	8002400 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80023da:	f7ff fda1 	bl	8001f20 <HAL_GetTick>
 80023de:	4602      	mov	r2, r0
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	1ad3      	subs	r3, r2, r3
 80023e4:	2b0a      	cmp	r3, #10
 80023e6:	d90b      	bls.n	8002400 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ec:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2205      	movs	r2, #5
 80023f8:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80023fc:	2301      	movs	r3, #1
 80023fe:	e0c5      	b.n	800258c <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	685b      	ldr	r3, [r3, #4]
 8002406:	f003 0301 	and.w	r3, r3, #1
 800240a:	2b00      	cmp	r3, #0
 800240c:	d0e5      	beq.n	80023da <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	681a      	ldr	r2, [r3, #0]
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f022 0202 	bic.w	r2, r2, #2
 800241c:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800241e:	f7ff fd7f 	bl	8001f20 <HAL_GetTick>
 8002422:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002424:	e012      	b.n	800244c <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002426:	f7ff fd7b 	bl	8001f20 <HAL_GetTick>
 800242a:	4602      	mov	r2, r0
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	1ad3      	subs	r3, r2, r3
 8002430:	2b0a      	cmp	r3, #10
 8002432:	d90b      	bls.n	800244c <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002438:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2205      	movs	r2, #5
 8002444:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002448:	2301      	movs	r3, #1
 800244a:	e09f      	b.n	800258c <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	685b      	ldr	r3, [r3, #4]
 8002452:	f003 0302 	and.w	r3, r3, #2
 8002456:	2b00      	cmp	r3, #0
 8002458:	d1e5      	bne.n	8002426 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	7e1b      	ldrb	r3, [r3, #24]
 800245e:	2b01      	cmp	r3, #1
 8002460:	d108      	bne.n	8002474 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	681a      	ldr	r2, [r3, #0]
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002470:	601a      	str	r2, [r3, #0]
 8002472:	e007      	b.n	8002484 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	681a      	ldr	r2, [r3, #0]
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002482:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	7e5b      	ldrb	r3, [r3, #25]
 8002488:	2b01      	cmp	r3, #1
 800248a:	d108      	bne.n	800249e <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	681a      	ldr	r2, [r3, #0]
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800249a:	601a      	str	r2, [r3, #0]
 800249c:	e007      	b.n	80024ae <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	681a      	ldr	r2, [r3, #0]
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80024ac:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	7e9b      	ldrb	r3, [r3, #26]
 80024b2:	2b01      	cmp	r3, #1
 80024b4:	d108      	bne.n	80024c8 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	681a      	ldr	r2, [r3, #0]
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f042 0220 	orr.w	r2, r2, #32
 80024c4:	601a      	str	r2, [r3, #0]
 80024c6:	e007      	b.n	80024d8 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	681a      	ldr	r2, [r3, #0]
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f022 0220 	bic.w	r2, r2, #32
 80024d6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	7edb      	ldrb	r3, [r3, #27]
 80024dc:	2b01      	cmp	r3, #1
 80024de:	d108      	bne.n	80024f2 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	681a      	ldr	r2, [r3, #0]
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f022 0210 	bic.w	r2, r2, #16
 80024ee:	601a      	str	r2, [r3, #0]
 80024f0:	e007      	b.n	8002502 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	681a      	ldr	r2, [r3, #0]
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f042 0210 	orr.w	r2, r2, #16
 8002500:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	7f1b      	ldrb	r3, [r3, #28]
 8002506:	2b01      	cmp	r3, #1
 8002508:	d108      	bne.n	800251c <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	681a      	ldr	r2, [r3, #0]
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f042 0208 	orr.w	r2, r2, #8
 8002518:	601a      	str	r2, [r3, #0]
 800251a:	e007      	b.n	800252c <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	681a      	ldr	r2, [r3, #0]
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f022 0208 	bic.w	r2, r2, #8
 800252a:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	7f5b      	ldrb	r3, [r3, #29]
 8002530:	2b01      	cmp	r3, #1
 8002532:	d108      	bne.n	8002546 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	681a      	ldr	r2, [r3, #0]
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f042 0204 	orr.w	r2, r2, #4
 8002542:	601a      	str	r2, [r3, #0]
 8002544:	e007      	b.n	8002556 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	681a      	ldr	r2, [r3, #0]
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f022 0204 	bic.w	r2, r2, #4
 8002554:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	689a      	ldr	r2, [r3, #8]
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	68db      	ldr	r3, [r3, #12]
 800255e:	431a      	orrs	r2, r3
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	691b      	ldr	r3, [r3, #16]
 8002564:	431a      	orrs	r2, r3
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	695b      	ldr	r3, [r3, #20]
 800256a:	ea42 0103 	orr.w	r1, r2, r3
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	685b      	ldr	r3, [r3, #4]
 8002572:	1e5a      	subs	r2, r3, #1
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	430a      	orrs	r2, r1
 800257a:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2200      	movs	r2, #0
 8002580:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	2201      	movs	r2, #1
 8002586:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800258a:	2300      	movs	r3, #0
}
 800258c:	4618      	mov	r0, r3
 800258e:	3710      	adds	r7, #16
 8002590:	46bd      	mov	sp, r7
 8002592:	bd80      	pop	{r7, pc}

08002594 <__NVIC_SetPriorityGrouping>:
{
 8002594:	b480      	push	{r7}
 8002596:	b085      	sub	sp, #20
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	f003 0307 	and.w	r3, r3, #7
 80025a2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80025a4:	4b0c      	ldr	r3, [pc, #48]	; (80025d8 <__NVIC_SetPriorityGrouping+0x44>)
 80025a6:	68db      	ldr	r3, [r3, #12]
 80025a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80025aa:	68ba      	ldr	r2, [r7, #8]
 80025ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80025b0:	4013      	ands	r3, r2
 80025b2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80025b8:	68bb      	ldr	r3, [r7, #8]
 80025ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80025bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80025c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80025c6:	4a04      	ldr	r2, [pc, #16]	; (80025d8 <__NVIC_SetPriorityGrouping+0x44>)
 80025c8:	68bb      	ldr	r3, [r7, #8]
 80025ca:	60d3      	str	r3, [r2, #12]
}
 80025cc:	bf00      	nop
 80025ce:	3714      	adds	r7, #20
 80025d0:	46bd      	mov	sp, r7
 80025d2:	bc80      	pop	{r7}
 80025d4:	4770      	bx	lr
 80025d6:	bf00      	nop
 80025d8:	e000ed00 	.word	0xe000ed00

080025dc <__NVIC_GetPriorityGrouping>:
{
 80025dc:	b480      	push	{r7}
 80025de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80025e0:	4b04      	ldr	r3, [pc, #16]	; (80025f4 <__NVIC_GetPriorityGrouping+0x18>)
 80025e2:	68db      	ldr	r3, [r3, #12]
 80025e4:	0a1b      	lsrs	r3, r3, #8
 80025e6:	f003 0307 	and.w	r3, r3, #7
}
 80025ea:	4618      	mov	r0, r3
 80025ec:	46bd      	mov	sp, r7
 80025ee:	bc80      	pop	{r7}
 80025f0:	4770      	bx	lr
 80025f2:	bf00      	nop
 80025f4:	e000ed00 	.word	0xe000ed00

080025f8 <__NVIC_EnableIRQ>:
{
 80025f8:	b480      	push	{r7}
 80025fa:	b083      	sub	sp, #12
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	4603      	mov	r3, r0
 8002600:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002602:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002606:	2b00      	cmp	r3, #0
 8002608:	db0b      	blt.n	8002622 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800260a:	79fb      	ldrb	r3, [r7, #7]
 800260c:	f003 021f 	and.w	r2, r3, #31
 8002610:	4906      	ldr	r1, [pc, #24]	; (800262c <__NVIC_EnableIRQ+0x34>)
 8002612:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002616:	095b      	lsrs	r3, r3, #5
 8002618:	2001      	movs	r0, #1
 800261a:	fa00 f202 	lsl.w	r2, r0, r2
 800261e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002622:	bf00      	nop
 8002624:	370c      	adds	r7, #12
 8002626:	46bd      	mov	sp, r7
 8002628:	bc80      	pop	{r7}
 800262a:	4770      	bx	lr
 800262c:	e000e100 	.word	0xe000e100

08002630 <__NVIC_SetPriority>:
{
 8002630:	b480      	push	{r7}
 8002632:	b083      	sub	sp, #12
 8002634:	af00      	add	r7, sp, #0
 8002636:	4603      	mov	r3, r0
 8002638:	6039      	str	r1, [r7, #0]
 800263a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800263c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002640:	2b00      	cmp	r3, #0
 8002642:	db0a      	blt.n	800265a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	b2da      	uxtb	r2, r3
 8002648:	490c      	ldr	r1, [pc, #48]	; (800267c <__NVIC_SetPriority+0x4c>)
 800264a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800264e:	0112      	lsls	r2, r2, #4
 8002650:	b2d2      	uxtb	r2, r2
 8002652:	440b      	add	r3, r1
 8002654:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002658:	e00a      	b.n	8002670 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	b2da      	uxtb	r2, r3
 800265e:	4908      	ldr	r1, [pc, #32]	; (8002680 <__NVIC_SetPriority+0x50>)
 8002660:	79fb      	ldrb	r3, [r7, #7]
 8002662:	f003 030f 	and.w	r3, r3, #15
 8002666:	3b04      	subs	r3, #4
 8002668:	0112      	lsls	r2, r2, #4
 800266a:	b2d2      	uxtb	r2, r2
 800266c:	440b      	add	r3, r1
 800266e:	761a      	strb	r2, [r3, #24]
}
 8002670:	bf00      	nop
 8002672:	370c      	adds	r7, #12
 8002674:	46bd      	mov	sp, r7
 8002676:	bc80      	pop	{r7}
 8002678:	4770      	bx	lr
 800267a:	bf00      	nop
 800267c:	e000e100 	.word	0xe000e100
 8002680:	e000ed00 	.word	0xe000ed00

08002684 <NVIC_EncodePriority>:
{
 8002684:	b480      	push	{r7}
 8002686:	b089      	sub	sp, #36	; 0x24
 8002688:	af00      	add	r7, sp, #0
 800268a:	60f8      	str	r0, [r7, #12]
 800268c:	60b9      	str	r1, [r7, #8]
 800268e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	f003 0307 	and.w	r3, r3, #7
 8002696:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002698:	69fb      	ldr	r3, [r7, #28]
 800269a:	f1c3 0307 	rsb	r3, r3, #7
 800269e:	2b04      	cmp	r3, #4
 80026a0:	bf28      	it	cs
 80026a2:	2304      	movcs	r3, #4
 80026a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80026a6:	69fb      	ldr	r3, [r7, #28]
 80026a8:	3304      	adds	r3, #4
 80026aa:	2b06      	cmp	r3, #6
 80026ac:	d902      	bls.n	80026b4 <NVIC_EncodePriority+0x30>
 80026ae:	69fb      	ldr	r3, [r7, #28]
 80026b0:	3b03      	subs	r3, #3
 80026b2:	e000      	b.n	80026b6 <NVIC_EncodePriority+0x32>
 80026b4:	2300      	movs	r3, #0
 80026b6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026b8:	f04f 32ff 	mov.w	r2, #4294967295
 80026bc:	69bb      	ldr	r3, [r7, #24]
 80026be:	fa02 f303 	lsl.w	r3, r2, r3
 80026c2:	43da      	mvns	r2, r3
 80026c4:	68bb      	ldr	r3, [r7, #8]
 80026c6:	401a      	ands	r2, r3
 80026c8:	697b      	ldr	r3, [r7, #20]
 80026ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80026cc:	f04f 31ff 	mov.w	r1, #4294967295
 80026d0:	697b      	ldr	r3, [r7, #20]
 80026d2:	fa01 f303 	lsl.w	r3, r1, r3
 80026d6:	43d9      	mvns	r1, r3
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026dc:	4313      	orrs	r3, r2
}
 80026de:	4618      	mov	r0, r3
 80026e0:	3724      	adds	r7, #36	; 0x24
 80026e2:	46bd      	mov	sp, r7
 80026e4:	bc80      	pop	{r7}
 80026e6:	4770      	bx	lr

080026e8 <SysTick_Config>:
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b082      	sub	sp, #8
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	3b01      	subs	r3, #1
 80026f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80026f8:	d301      	bcc.n	80026fe <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80026fa:	2301      	movs	r3, #1
 80026fc:	e00f      	b.n	800271e <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80026fe:	4a0a      	ldr	r2, [pc, #40]	; (8002728 <SysTick_Config+0x40>)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	3b01      	subs	r3, #1
 8002704:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002706:	210f      	movs	r1, #15
 8002708:	f04f 30ff 	mov.w	r0, #4294967295
 800270c:	f7ff ff90 	bl	8002630 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002710:	4b05      	ldr	r3, [pc, #20]	; (8002728 <SysTick_Config+0x40>)
 8002712:	2200      	movs	r2, #0
 8002714:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002716:	4b04      	ldr	r3, [pc, #16]	; (8002728 <SysTick_Config+0x40>)
 8002718:	2207      	movs	r2, #7
 800271a:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 800271c:	2300      	movs	r3, #0
}
 800271e:	4618      	mov	r0, r3
 8002720:	3708      	adds	r7, #8
 8002722:	46bd      	mov	sp, r7
 8002724:	bd80      	pop	{r7, pc}
 8002726:	bf00      	nop
 8002728:	e000e010 	.word	0xe000e010

0800272c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b082      	sub	sp, #8
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002734:	6878      	ldr	r0, [r7, #4]
 8002736:	f7ff ff2d 	bl	8002594 <__NVIC_SetPriorityGrouping>
}
 800273a:	bf00      	nop
 800273c:	3708      	adds	r7, #8
 800273e:	46bd      	mov	sp, r7
 8002740:	bd80      	pop	{r7, pc}

08002742 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002742:	b580      	push	{r7, lr}
 8002744:	b086      	sub	sp, #24
 8002746:	af00      	add	r7, sp, #0
 8002748:	4603      	mov	r3, r0
 800274a:	60b9      	str	r1, [r7, #8]
 800274c:	607a      	str	r2, [r7, #4]
 800274e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002750:	2300      	movs	r3, #0
 8002752:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002754:	f7ff ff42 	bl	80025dc <__NVIC_GetPriorityGrouping>
 8002758:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800275a:	687a      	ldr	r2, [r7, #4]
 800275c:	68b9      	ldr	r1, [r7, #8]
 800275e:	6978      	ldr	r0, [r7, #20]
 8002760:	f7ff ff90 	bl	8002684 <NVIC_EncodePriority>
 8002764:	4602      	mov	r2, r0
 8002766:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800276a:	4611      	mov	r1, r2
 800276c:	4618      	mov	r0, r3
 800276e:	f7ff ff5f 	bl	8002630 <__NVIC_SetPriority>
}
 8002772:	bf00      	nop
 8002774:	3718      	adds	r7, #24
 8002776:	46bd      	mov	sp, r7
 8002778:	bd80      	pop	{r7, pc}

0800277a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800277a:	b580      	push	{r7, lr}
 800277c:	b082      	sub	sp, #8
 800277e:	af00      	add	r7, sp, #0
 8002780:	4603      	mov	r3, r0
 8002782:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002784:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002788:	4618      	mov	r0, r3
 800278a:	f7ff ff35 	bl	80025f8 <__NVIC_EnableIRQ>
}
 800278e:	bf00      	nop
 8002790:	3708      	adds	r7, #8
 8002792:	46bd      	mov	sp, r7
 8002794:	bd80      	pop	{r7, pc}

08002796 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002796:	b580      	push	{r7, lr}
 8002798:	b082      	sub	sp, #8
 800279a:	af00      	add	r7, sp, #0
 800279c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800279e:	6878      	ldr	r0, [r7, #4]
 80027a0:	f7ff ffa2 	bl	80026e8 <SysTick_Config>
 80027a4:	4603      	mov	r3, r0
}
 80027a6:	4618      	mov	r0, r3
 80027a8:	3708      	adds	r7, #8
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bd80      	pop	{r7, pc}

080027ae <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80027ae:	b480      	push	{r7}
 80027b0:	b085      	sub	sp, #20
 80027b2:	af00      	add	r7, sp, #0
 80027b4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80027b6:	2300      	movs	r3, #0
 80027b8:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80027c0:	2b02      	cmp	r3, #2
 80027c2:	d008      	beq.n	80027d6 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2204      	movs	r2, #4
 80027c8:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	2200      	movs	r2, #0
 80027ce:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80027d2:	2301      	movs	r3, #1
 80027d4:	e020      	b.n	8002818 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	681a      	ldr	r2, [r3, #0]
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f022 020e 	bic.w	r2, r2, #14
 80027e4:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	681a      	ldr	r2, [r3, #0]
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f022 0201 	bic.w	r2, r2, #1
 80027f4:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027fe:	2101      	movs	r1, #1
 8002800:	fa01 f202 	lsl.w	r2, r1, r2
 8002804:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	2201      	movs	r2, #1
 800280a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	2200      	movs	r2, #0
 8002812:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002816:	7bfb      	ldrb	r3, [r7, #15]
}
 8002818:	4618      	mov	r0, r3
 800281a:	3714      	adds	r7, #20
 800281c:	46bd      	mov	sp, r7
 800281e:	bc80      	pop	{r7}
 8002820:	4770      	bx	lr
	...

08002824 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002824:	b580      	push	{r7, lr}
 8002826:	b084      	sub	sp, #16
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800282c:	2300      	movs	r3, #0
 800282e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002836:	2b02      	cmp	r3, #2
 8002838:	d005      	beq.n	8002846 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	2204      	movs	r2, #4
 800283e:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002840:	2301      	movs	r3, #1
 8002842:	73fb      	strb	r3, [r7, #15]
 8002844:	e051      	b.n	80028ea <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	681a      	ldr	r2, [r3, #0]
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f022 020e 	bic.w	r2, r2, #14
 8002854:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	681a      	ldr	r2, [r3, #0]
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f022 0201 	bic.w	r2, r2, #1
 8002864:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	4a22      	ldr	r2, [pc, #136]	; (80028f4 <HAL_DMA_Abort_IT+0xd0>)
 800286c:	4293      	cmp	r3, r2
 800286e:	d029      	beq.n	80028c4 <HAL_DMA_Abort_IT+0xa0>
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	4a20      	ldr	r2, [pc, #128]	; (80028f8 <HAL_DMA_Abort_IT+0xd4>)
 8002876:	4293      	cmp	r3, r2
 8002878:	d022      	beq.n	80028c0 <HAL_DMA_Abort_IT+0x9c>
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	4a1f      	ldr	r2, [pc, #124]	; (80028fc <HAL_DMA_Abort_IT+0xd8>)
 8002880:	4293      	cmp	r3, r2
 8002882:	d01a      	beq.n	80028ba <HAL_DMA_Abort_IT+0x96>
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	4a1d      	ldr	r2, [pc, #116]	; (8002900 <HAL_DMA_Abort_IT+0xdc>)
 800288a:	4293      	cmp	r3, r2
 800288c:	d012      	beq.n	80028b4 <HAL_DMA_Abort_IT+0x90>
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	4a1c      	ldr	r2, [pc, #112]	; (8002904 <HAL_DMA_Abort_IT+0xe0>)
 8002894:	4293      	cmp	r3, r2
 8002896:	d00a      	beq.n	80028ae <HAL_DMA_Abort_IT+0x8a>
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	4a1a      	ldr	r2, [pc, #104]	; (8002908 <HAL_DMA_Abort_IT+0xe4>)
 800289e:	4293      	cmp	r3, r2
 80028a0:	d102      	bne.n	80028a8 <HAL_DMA_Abort_IT+0x84>
 80028a2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80028a6:	e00e      	b.n	80028c6 <HAL_DMA_Abort_IT+0xa2>
 80028a8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80028ac:	e00b      	b.n	80028c6 <HAL_DMA_Abort_IT+0xa2>
 80028ae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80028b2:	e008      	b.n	80028c6 <HAL_DMA_Abort_IT+0xa2>
 80028b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80028b8:	e005      	b.n	80028c6 <HAL_DMA_Abort_IT+0xa2>
 80028ba:	f44f 7380 	mov.w	r3, #256	; 0x100
 80028be:	e002      	b.n	80028c6 <HAL_DMA_Abort_IT+0xa2>
 80028c0:	2310      	movs	r3, #16
 80028c2:	e000      	b.n	80028c6 <HAL_DMA_Abort_IT+0xa2>
 80028c4:	2301      	movs	r3, #1
 80028c6:	4a11      	ldr	r2, [pc, #68]	; (800290c <HAL_DMA_Abort_IT+0xe8>)
 80028c8:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	2201      	movs	r2, #1
 80028ce:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	2200      	movs	r2, #0
 80028d6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d003      	beq.n	80028ea <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028e6:	6878      	ldr	r0, [r7, #4]
 80028e8:	4798      	blx	r3
    } 
  }
  return status;
 80028ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80028ec:	4618      	mov	r0, r3
 80028ee:	3710      	adds	r7, #16
 80028f0:	46bd      	mov	sp, r7
 80028f2:	bd80      	pop	{r7, pc}
 80028f4:	40020008 	.word	0x40020008
 80028f8:	4002001c 	.word	0x4002001c
 80028fc:	40020030 	.word	0x40020030
 8002900:	40020044 	.word	0x40020044
 8002904:	40020058 	.word	0x40020058
 8002908:	4002006c 	.word	0x4002006c
 800290c:	40020000 	.word	0x40020000

08002910 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002910:	b480      	push	{r7}
 8002912:	b08b      	sub	sp, #44	; 0x2c
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
 8002918:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800291a:	2300      	movs	r3, #0
 800291c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800291e:	2300      	movs	r3, #0
 8002920:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002922:	e169      	b.n	8002bf8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002924:	2201      	movs	r2, #1
 8002926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002928:	fa02 f303 	lsl.w	r3, r2, r3
 800292c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	69fa      	ldr	r2, [r7, #28]
 8002934:	4013      	ands	r3, r2
 8002936:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002938:	69ba      	ldr	r2, [r7, #24]
 800293a:	69fb      	ldr	r3, [r7, #28]
 800293c:	429a      	cmp	r2, r3
 800293e:	f040 8158 	bne.w	8002bf2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	685b      	ldr	r3, [r3, #4]
 8002946:	4a9a      	ldr	r2, [pc, #616]	; (8002bb0 <HAL_GPIO_Init+0x2a0>)
 8002948:	4293      	cmp	r3, r2
 800294a:	d05e      	beq.n	8002a0a <HAL_GPIO_Init+0xfa>
 800294c:	4a98      	ldr	r2, [pc, #608]	; (8002bb0 <HAL_GPIO_Init+0x2a0>)
 800294e:	4293      	cmp	r3, r2
 8002950:	d875      	bhi.n	8002a3e <HAL_GPIO_Init+0x12e>
 8002952:	4a98      	ldr	r2, [pc, #608]	; (8002bb4 <HAL_GPIO_Init+0x2a4>)
 8002954:	4293      	cmp	r3, r2
 8002956:	d058      	beq.n	8002a0a <HAL_GPIO_Init+0xfa>
 8002958:	4a96      	ldr	r2, [pc, #600]	; (8002bb4 <HAL_GPIO_Init+0x2a4>)
 800295a:	4293      	cmp	r3, r2
 800295c:	d86f      	bhi.n	8002a3e <HAL_GPIO_Init+0x12e>
 800295e:	4a96      	ldr	r2, [pc, #600]	; (8002bb8 <HAL_GPIO_Init+0x2a8>)
 8002960:	4293      	cmp	r3, r2
 8002962:	d052      	beq.n	8002a0a <HAL_GPIO_Init+0xfa>
 8002964:	4a94      	ldr	r2, [pc, #592]	; (8002bb8 <HAL_GPIO_Init+0x2a8>)
 8002966:	4293      	cmp	r3, r2
 8002968:	d869      	bhi.n	8002a3e <HAL_GPIO_Init+0x12e>
 800296a:	4a94      	ldr	r2, [pc, #592]	; (8002bbc <HAL_GPIO_Init+0x2ac>)
 800296c:	4293      	cmp	r3, r2
 800296e:	d04c      	beq.n	8002a0a <HAL_GPIO_Init+0xfa>
 8002970:	4a92      	ldr	r2, [pc, #584]	; (8002bbc <HAL_GPIO_Init+0x2ac>)
 8002972:	4293      	cmp	r3, r2
 8002974:	d863      	bhi.n	8002a3e <HAL_GPIO_Init+0x12e>
 8002976:	4a92      	ldr	r2, [pc, #584]	; (8002bc0 <HAL_GPIO_Init+0x2b0>)
 8002978:	4293      	cmp	r3, r2
 800297a:	d046      	beq.n	8002a0a <HAL_GPIO_Init+0xfa>
 800297c:	4a90      	ldr	r2, [pc, #576]	; (8002bc0 <HAL_GPIO_Init+0x2b0>)
 800297e:	4293      	cmp	r3, r2
 8002980:	d85d      	bhi.n	8002a3e <HAL_GPIO_Init+0x12e>
 8002982:	2b12      	cmp	r3, #18
 8002984:	d82a      	bhi.n	80029dc <HAL_GPIO_Init+0xcc>
 8002986:	2b12      	cmp	r3, #18
 8002988:	d859      	bhi.n	8002a3e <HAL_GPIO_Init+0x12e>
 800298a:	a201      	add	r2, pc, #4	; (adr r2, 8002990 <HAL_GPIO_Init+0x80>)
 800298c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002990:	08002a0b 	.word	0x08002a0b
 8002994:	080029e5 	.word	0x080029e5
 8002998:	080029f7 	.word	0x080029f7
 800299c:	08002a39 	.word	0x08002a39
 80029a0:	08002a3f 	.word	0x08002a3f
 80029a4:	08002a3f 	.word	0x08002a3f
 80029a8:	08002a3f 	.word	0x08002a3f
 80029ac:	08002a3f 	.word	0x08002a3f
 80029b0:	08002a3f 	.word	0x08002a3f
 80029b4:	08002a3f 	.word	0x08002a3f
 80029b8:	08002a3f 	.word	0x08002a3f
 80029bc:	08002a3f 	.word	0x08002a3f
 80029c0:	08002a3f 	.word	0x08002a3f
 80029c4:	08002a3f 	.word	0x08002a3f
 80029c8:	08002a3f 	.word	0x08002a3f
 80029cc:	08002a3f 	.word	0x08002a3f
 80029d0:	08002a3f 	.word	0x08002a3f
 80029d4:	080029ed 	.word	0x080029ed
 80029d8:	08002a01 	.word	0x08002a01
 80029dc:	4a79      	ldr	r2, [pc, #484]	; (8002bc4 <HAL_GPIO_Init+0x2b4>)
 80029de:	4293      	cmp	r3, r2
 80029e0:	d013      	beq.n	8002a0a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80029e2:	e02c      	b.n	8002a3e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	68db      	ldr	r3, [r3, #12]
 80029e8:	623b      	str	r3, [r7, #32]
          break;
 80029ea:	e029      	b.n	8002a40 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	68db      	ldr	r3, [r3, #12]
 80029f0:	3304      	adds	r3, #4
 80029f2:	623b      	str	r3, [r7, #32]
          break;
 80029f4:	e024      	b.n	8002a40 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	68db      	ldr	r3, [r3, #12]
 80029fa:	3308      	adds	r3, #8
 80029fc:	623b      	str	r3, [r7, #32]
          break;
 80029fe:	e01f      	b.n	8002a40 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	68db      	ldr	r3, [r3, #12]
 8002a04:	330c      	adds	r3, #12
 8002a06:	623b      	str	r3, [r7, #32]
          break;
 8002a08:	e01a      	b.n	8002a40 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	689b      	ldr	r3, [r3, #8]
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d102      	bne.n	8002a18 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002a12:	2304      	movs	r3, #4
 8002a14:	623b      	str	r3, [r7, #32]
          break;
 8002a16:	e013      	b.n	8002a40 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	689b      	ldr	r3, [r3, #8]
 8002a1c:	2b01      	cmp	r3, #1
 8002a1e:	d105      	bne.n	8002a2c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002a20:	2308      	movs	r3, #8
 8002a22:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	69fa      	ldr	r2, [r7, #28]
 8002a28:	611a      	str	r2, [r3, #16]
          break;
 8002a2a:	e009      	b.n	8002a40 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002a2c:	2308      	movs	r3, #8
 8002a2e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	69fa      	ldr	r2, [r7, #28]
 8002a34:	615a      	str	r2, [r3, #20]
          break;
 8002a36:	e003      	b.n	8002a40 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002a38:	2300      	movs	r3, #0
 8002a3a:	623b      	str	r3, [r7, #32]
          break;
 8002a3c:	e000      	b.n	8002a40 <HAL_GPIO_Init+0x130>
          break;
 8002a3e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002a40:	69bb      	ldr	r3, [r7, #24]
 8002a42:	2bff      	cmp	r3, #255	; 0xff
 8002a44:	d801      	bhi.n	8002a4a <HAL_GPIO_Init+0x13a>
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	e001      	b.n	8002a4e <HAL_GPIO_Init+0x13e>
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	3304      	adds	r3, #4
 8002a4e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002a50:	69bb      	ldr	r3, [r7, #24]
 8002a52:	2bff      	cmp	r3, #255	; 0xff
 8002a54:	d802      	bhi.n	8002a5c <HAL_GPIO_Init+0x14c>
 8002a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a58:	009b      	lsls	r3, r3, #2
 8002a5a:	e002      	b.n	8002a62 <HAL_GPIO_Init+0x152>
 8002a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a5e:	3b08      	subs	r3, #8
 8002a60:	009b      	lsls	r3, r3, #2
 8002a62:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002a64:	697b      	ldr	r3, [r7, #20]
 8002a66:	681a      	ldr	r2, [r3, #0]
 8002a68:	210f      	movs	r1, #15
 8002a6a:	693b      	ldr	r3, [r7, #16]
 8002a6c:	fa01 f303 	lsl.w	r3, r1, r3
 8002a70:	43db      	mvns	r3, r3
 8002a72:	401a      	ands	r2, r3
 8002a74:	6a39      	ldr	r1, [r7, #32]
 8002a76:	693b      	ldr	r3, [r7, #16]
 8002a78:	fa01 f303 	lsl.w	r3, r1, r3
 8002a7c:	431a      	orrs	r2, r3
 8002a7e:	697b      	ldr	r3, [r7, #20]
 8002a80:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	685b      	ldr	r3, [r3, #4]
 8002a86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	f000 80b1 	beq.w	8002bf2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002a90:	4b4d      	ldr	r3, [pc, #308]	; (8002bc8 <HAL_GPIO_Init+0x2b8>)
 8002a92:	699b      	ldr	r3, [r3, #24]
 8002a94:	4a4c      	ldr	r2, [pc, #304]	; (8002bc8 <HAL_GPIO_Init+0x2b8>)
 8002a96:	f043 0301 	orr.w	r3, r3, #1
 8002a9a:	6193      	str	r3, [r2, #24]
 8002a9c:	4b4a      	ldr	r3, [pc, #296]	; (8002bc8 <HAL_GPIO_Init+0x2b8>)
 8002a9e:	699b      	ldr	r3, [r3, #24]
 8002aa0:	f003 0301 	and.w	r3, r3, #1
 8002aa4:	60bb      	str	r3, [r7, #8]
 8002aa6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002aa8:	4a48      	ldr	r2, [pc, #288]	; (8002bcc <HAL_GPIO_Init+0x2bc>)
 8002aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aac:	089b      	lsrs	r3, r3, #2
 8002aae:	3302      	adds	r3, #2
 8002ab0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ab4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ab8:	f003 0303 	and.w	r3, r3, #3
 8002abc:	009b      	lsls	r3, r3, #2
 8002abe:	220f      	movs	r2, #15
 8002ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac4:	43db      	mvns	r3, r3
 8002ac6:	68fa      	ldr	r2, [r7, #12]
 8002ac8:	4013      	ands	r3, r2
 8002aca:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	4a40      	ldr	r2, [pc, #256]	; (8002bd0 <HAL_GPIO_Init+0x2c0>)
 8002ad0:	4293      	cmp	r3, r2
 8002ad2:	d013      	beq.n	8002afc <HAL_GPIO_Init+0x1ec>
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	4a3f      	ldr	r2, [pc, #252]	; (8002bd4 <HAL_GPIO_Init+0x2c4>)
 8002ad8:	4293      	cmp	r3, r2
 8002ada:	d00d      	beq.n	8002af8 <HAL_GPIO_Init+0x1e8>
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	4a3e      	ldr	r2, [pc, #248]	; (8002bd8 <HAL_GPIO_Init+0x2c8>)
 8002ae0:	4293      	cmp	r3, r2
 8002ae2:	d007      	beq.n	8002af4 <HAL_GPIO_Init+0x1e4>
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	4a3d      	ldr	r2, [pc, #244]	; (8002bdc <HAL_GPIO_Init+0x2cc>)
 8002ae8:	4293      	cmp	r3, r2
 8002aea:	d101      	bne.n	8002af0 <HAL_GPIO_Init+0x1e0>
 8002aec:	2303      	movs	r3, #3
 8002aee:	e006      	b.n	8002afe <HAL_GPIO_Init+0x1ee>
 8002af0:	2304      	movs	r3, #4
 8002af2:	e004      	b.n	8002afe <HAL_GPIO_Init+0x1ee>
 8002af4:	2302      	movs	r3, #2
 8002af6:	e002      	b.n	8002afe <HAL_GPIO_Init+0x1ee>
 8002af8:	2301      	movs	r3, #1
 8002afa:	e000      	b.n	8002afe <HAL_GPIO_Init+0x1ee>
 8002afc:	2300      	movs	r3, #0
 8002afe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b00:	f002 0203 	and.w	r2, r2, #3
 8002b04:	0092      	lsls	r2, r2, #2
 8002b06:	4093      	lsls	r3, r2
 8002b08:	68fa      	ldr	r2, [r7, #12]
 8002b0a:	4313      	orrs	r3, r2
 8002b0c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002b0e:	492f      	ldr	r1, [pc, #188]	; (8002bcc <HAL_GPIO_Init+0x2bc>)
 8002b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b12:	089b      	lsrs	r3, r3, #2
 8002b14:	3302      	adds	r3, #2
 8002b16:	68fa      	ldr	r2, [r7, #12]
 8002b18:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	685b      	ldr	r3, [r3, #4]
 8002b20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d006      	beq.n	8002b36 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002b28:	4b2d      	ldr	r3, [pc, #180]	; (8002be0 <HAL_GPIO_Init+0x2d0>)
 8002b2a:	681a      	ldr	r2, [r3, #0]
 8002b2c:	492c      	ldr	r1, [pc, #176]	; (8002be0 <HAL_GPIO_Init+0x2d0>)
 8002b2e:	69bb      	ldr	r3, [r7, #24]
 8002b30:	4313      	orrs	r3, r2
 8002b32:	600b      	str	r3, [r1, #0]
 8002b34:	e006      	b.n	8002b44 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002b36:	4b2a      	ldr	r3, [pc, #168]	; (8002be0 <HAL_GPIO_Init+0x2d0>)
 8002b38:	681a      	ldr	r2, [r3, #0]
 8002b3a:	69bb      	ldr	r3, [r7, #24]
 8002b3c:	43db      	mvns	r3, r3
 8002b3e:	4928      	ldr	r1, [pc, #160]	; (8002be0 <HAL_GPIO_Init+0x2d0>)
 8002b40:	4013      	ands	r3, r2
 8002b42:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d006      	beq.n	8002b5e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002b50:	4b23      	ldr	r3, [pc, #140]	; (8002be0 <HAL_GPIO_Init+0x2d0>)
 8002b52:	685a      	ldr	r2, [r3, #4]
 8002b54:	4922      	ldr	r1, [pc, #136]	; (8002be0 <HAL_GPIO_Init+0x2d0>)
 8002b56:	69bb      	ldr	r3, [r7, #24]
 8002b58:	4313      	orrs	r3, r2
 8002b5a:	604b      	str	r3, [r1, #4]
 8002b5c:	e006      	b.n	8002b6c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002b5e:	4b20      	ldr	r3, [pc, #128]	; (8002be0 <HAL_GPIO_Init+0x2d0>)
 8002b60:	685a      	ldr	r2, [r3, #4]
 8002b62:	69bb      	ldr	r3, [r7, #24]
 8002b64:	43db      	mvns	r3, r3
 8002b66:	491e      	ldr	r1, [pc, #120]	; (8002be0 <HAL_GPIO_Init+0x2d0>)
 8002b68:	4013      	ands	r3, r2
 8002b6a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	685b      	ldr	r3, [r3, #4]
 8002b70:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d006      	beq.n	8002b86 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002b78:	4b19      	ldr	r3, [pc, #100]	; (8002be0 <HAL_GPIO_Init+0x2d0>)
 8002b7a:	689a      	ldr	r2, [r3, #8]
 8002b7c:	4918      	ldr	r1, [pc, #96]	; (8002be0 <HAL_GPIO_Init+0x2d0>)
 8002b7e:	69bb      	ldr	r3, [r7, #24]
 8002b80:	4313      	orrs	r3, r2
 8002b82:	608b      	str	r3, [r1, #8]
 8002b84:	e006      	b.n	8002b94 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002b86:	4b16      	ldr	r3, [pc, #88]	; (8002be0 <HAL_GPIO_Init+0x2d0>)
 8002b88:	689a      	ldr	r2, [r3, #8]
 8002b8a:	69bb      	ldr	r3, [r7, #24]
 8002b8c:	43db      	mvns	r3, r3
 8002b8e:	4914      	ldr	r1, [pc, #80]	; (8002be0 <HAL_GPIO_Init+0x2d0>)
 8002b90:	4013      	ands	r3, r2
 8002b92:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	685b      	ldr	r3, [r3, #4]
 8002b98:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d021      	beq.n	8002be4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002ba0:	4b0f      	ldr	r3, [pc, #60]	; (8002be0 <HAL_GPIO_Init+0x2d0>)
 8002ba2:	68da      	ldr	r2, [r3, #12]
 8002ba4:	490e      	ldr	r1, [pc, #56]	; (8002be0 <HAL_GPIO_Init+0x2d0>)
 8002ba6:	69bb      	ldr	r3, [r7, #24]
 8002ba8:	4313      	orrs	r3, r2
 8002baa:	60cb      	str	r3, [r1, #12]
 8002bac:	e021      	b.n	8002bf2 <HAL_GPIO_Init+0x2e2>
 8002bae:	bf00      	nop
 8002bb0:	10320000 	.word	0x10320000
 8002bb4:	10310000 	.word	0x10310000
 8002bb8:	10220000 	.word	0x10220000
 8002bbc:	10210000 	.word	0x10210000
 8002bc0:	10120000 	.word	0x10120000
 8002bc4:	10110000 	.word	0x10110000
 8002bc8:	40021000 	.word	0x40021000
 8002bcc:	40010000 	.word	0x40010000
 8002bd0:	40010800 	.word	0x40010800
 8002bd4:	40010c00 	.word	0x40010c00
 8002bd8:	40011000 	.word	0x40011000
 8002bdc:	40011400 	.word	0x40011400
 8002be0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002be4:	4b0b      	ldr	r3, [pc, #44]	; (8002c14 <HAL_GPIO_Init+0x304>)
 8002be6:	68da      	ldr	r2, [r3, #12]
 8002be8:	69bb      	ldr	r3, [r7, #24]
 8002bea:	43db      	mvns	r3, r3
 8002bec:	4909      	ldr	r1, [pc, #36]	; (8002c14 <HAL_GPIO_Init+0x304>)
 8002bee:	4013      	ands	r3, r2
 8002bf0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bf4:	3301      	adds	r3, #1
 8002bf6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	681a      	ldr	r2, [r3, #0]
 8002bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bfe:	fa22 f303 	lsr.w	r3, r2, r3
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	f47f ae8e 	bne.w	8002924 <HAL_GPIO_Init+0x14>
  }
}
 8002c08:	bf00      	nop
 8002c0a:	bf00      	nop
 8002c0c:	372c      	adds	r7, #44	; 0x2c
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	bc80      	pop	{r7}
 8002c12:	4770      	bx	lr
 8002c14:	40010400 	.word	0x40010400

08002c18 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c18:	b480      	push	{r7}
 8002c1a:	b083      	sub	sp, #12
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
 8002c20:	460b      	mov	r3, r1
 8002c22:	807b      	strh	r3, [r7, #2]
 8002c24:	4613      	mov	r3, r2
 8002c26:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002c28:	787b      	ldrb	r3, [r7, #1]
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d003      	beq.n	8002c36 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002c2e:	887a      	ldrh	r2, [r7, #2]
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002c34:	e003      	b.n	8002c3e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002c36:	887b      	ldrh	r3, [r7, #2]
 8002c38:	041a      	lsls	r2, r3, #16
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	611a      	str	r2, [r3, #16]
}
 8002c3e:	bf00      	nop
 8002c40:	370c      	adds	r7, #12
 8002c42:	46bd      	mov	sp, r7
 8002c44:	bc80      	pop	{r7}
 8002c46:	4770      	bx	lr

08002c48 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002c48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002c4a:	b08b      	sub	sp, #44	; 0x2c
 8002c4c:	af06      	add	r7, sp, #24
 8002c4e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d101      	bne.n	8002c5a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002c56:	2301      	movs	r3, #1
 8002c58:	e0fd      	b.n	8002e56 <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8002c60:	b2db      	uxtb	r3, r3
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d106      	bne.n	8002c74 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2200      	movs	r2, #0
 8002c6a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002c6e:	6878      	ldr	r0, [r7, #4]
 8002c70:	f7fe ffd4 	bl	8001c1c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2203      	movs	r2, #3
 8002c78:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4618      	mov	r0, r3
 8002c82:	f002 fd4d 	bl	8005720 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	603b      	str	r3, [r7, #0]
 8002c8c:	687e      	ldr	r6, [r7, #4]
 8002c8e:	466d      	mov	r5, sp
 8002c90:	f106 0410 	add.w	r4, r6, #16
 8002c94:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002c96:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002c98:	6823      	ldr	r3, [r4, #0]
 8002c9a:	602b      	str	r3, [r5, #0]
 8002c9c:	1d33      	adds	r3, r6, #4
 8002c9e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002ca0:	6838      	ldr	r0, [r7, #0]
 8002ca2:	f002 fd2d 	bl	8005700 <USB_CoreInit>
 8002ca6:	4603      	mov	r3, r0
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d005      	beq.n	8002cb8 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2202      	movs	r2, #2
 8002cb0:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8002cb4:	2301      	movs	r3, #1
 8002cb6:	e0ce      	b.n	8002e56 <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	2100      	movs	r1, #0
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	f002 fd48 	bl	8005754 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	73fb      	strb	r3, [r7, #15]
 8002cc8:	e04c      	b.n	8002d64 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002cca:	7bfb      	ldrb	r3, [r7, #15]
 8002ccc:	6879      	ldr	r1, [r7, #4]
 8002cce:	1c5a      	adds	r2, r3, #1
 8002cd0:	4613      	mov	r3, r2
 8002cd2:	009b      	lsls	r3, r3, #2
 8002cd4:	4413      	add	r3, r2
 8002cd6:	00db      	lsls	r3, r3, #3
 8002cd8:	440b      	add	r3, r1
 8002cda:	3301      	adds	r3, #1
 8002cdc:	2201      	movs	r2, #1
 8002cde:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002ce0:	7bfb      	ldrb	r3, [r7, #15]
 8002ce2:	6879      	ldr	r1, [r7, #4]
 8002ce4:	1c5a      	adds	r2, r3, #1
 8002ce6:	4613      	mov	r3, r2
 8002ce8:	009b      	lsls	r3, r3, #2
 8002cea:	4413      	add	r3, r2
 8002cec:	00db      	lsls	r3, r3, #3
 8002cee:	440b      	add	r3, r1
 8002cf0:	7bfa      	ldrb	r2, [r7, #15]
 8002cf2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002cf4:	7bfa      	ldrb	r2, [r7, #15]
 8002cf6:	7bfb      	ldrb	r3, [r7, #15]
 8002cf8:	b298      	uxth	r0, r3
 8002cfa:	6879      	ldr	r1, [r7, #4]
 8002cfc:	4613      	mov	r3, r2
 8002cfe:	009b      	lsls	r3, r3, #2
 8002d00:	4413      	add	r3, r2
 8002d02:	00db      	lsls	r3, r3, #3
 8002d04:	440b      	add	r3, r1
 8002d06:	3336      	adds	r3, #54	; 0x36
 8002d08:	4602      	mov	r2, r0
 8002d0a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002d0c:	7bfb      	ldrb	r3, [r7, #15]
 8002d0e:	6879      	ldr	r1, [r7, #4]
 8002d10:	1c5a      	adds	r2, r3, #1
 8002d12:	4613      	mov	r3, r2
 8002d14:	009b      	lsls	r3, r3, #2
 8002d16:	4413      	add	r3, r2
 8002d18:	00db      	lsls	r3, r3, #3
 8002d1a:	440b      	add	r3, r1
 8002d1c:	3303      	adds	r3, #3
 8002d1e:	2200      	movs	r2, #0
 8002d20:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002d22:	7bfa      	ldrb	r2, [r7, #15]
 8002d24:	6879      	ldr	r1, [r7, #4]
 8002d26:	4613      	mov	r3, r2
 8002d28:	009b      	lsls	r3, r3, #2
 8002d2a:	4413      	add	r3, r2
 8002d2c:	00db      	lsls	r3, r3, #3
 8002d2e:	440b      	add	r3, r1
 8002d30:	3338      	adds	r3, #56	; 0x38
 8002d32:	2200      	movs	r2, #0
 8002d34:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002d36:	7bfa      	ldrb	r2, [r7, #15]
 8002d38:	6879      	ldr	r1, [r7, #4]
 8002d3a:	4613      	mov	r3, r2
 8002d3c:	009b      	lsls	r3, r3, #2
 8002d3e:	4413      	add	r3, r2
 8002d40:	00db      	lsls	r3, r3, #3
 8002d42:	440b      	add	r3, r1
 8002d44:	333c      	adds	r3, #60	; 0x3c
 8002d46:	2200      	movs	r2, #0
 8002d48:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002d4a:	7bfa      	ldrb	r2, [r7, #15]
 8002d4c:	6879      	ldr	r1, [r7, #4]
 8002d4e:	4613      	mov	r3, r2
 8002d50:	009b      	lsls	r3, r3, #2
 8002d52:	4413      	add	r3, r2
 8002d54:	00db      	lsls	r3, r3, #3
 8002d56:	440b      	add	r3, r1
 8002d58:	3340      	adds	r3, #64	; 0x40
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d5e:	7bfb      	ldrb	r3, [r7, #15]
 8002d60:	3301      	adds	r3, #1
 8002d62:	73fb      	strb	r3, [r7, #15]
 8002d64:	7bfa      	ldrb	r2, [r7, #15]
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	685b      	ldr	r3, [r3, #4]
 8002d6a:	429a      	cmp	r2, r3
 8002d6c:	d3ad      	bcc.n	8002cca <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d6e:	2300      	movs	r3, #0
 8002d70:	73fb      	strb	r3, [r7, #15]
 8002d72:	e044      	b.n	8002dfe <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002d74:	7bfa      	ldrb	r2, [r7, #15]
 8002d76:	6879      	ldr	r1, [r7, #4]
 8002d78:	4613      	mov	r3, r2
 8002d7a:	009b      	lsls	r3, r3, #2
 8002d7c:	4413      	add	r3, r2
 8002d7e:	00db      	lsls	r3, r3, #3
 8002d80:	440b      	add	r3, r1
 8002d82:	f203 1369 	addw	r3, r3, #361	; 0x169
 8002d86:	2200      	movs	r2, #0
 8002d88:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002d8a:	7bfa      	ldrb	r2, [r7, #15]
 8002d8c:	6879      	ldr	r1, [r7, #4]
 8002d8e:	4613      	mov	r3, r2
 8002d90:	009b      	lsls	r3, r3, #2
 8002d92:	4413      	add	r3, r2
 8002d94:	00db      	lsls	r3, r3, #3
 8002d96:	440b      	add	r3, r1
 8002d98:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002d9c:	7bfa      	ldrb	r2, [r7, #15]
 8002d9e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002da0:	7bfa      	ldrb	r2, [r7, #15]
 8002da2:	6879      	ldr	r1, [r7, #4]
 8002da4:	4613      	mov	r3, r2
 8002da6:	009b      	lsls	r3, r3, #2
 8002da8:	4413      	add	r3, r2
 8002daa:	00db      	lsls	r3, r3, #3
 8002dac:	440b      	add	r3, r1
 8002dae:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8002db2:	2200      	movs	r2, #0
 8002db4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002db6:	7bfa      	ldrb	r2, [r7, #15]
 8002db8:	6879      	ldr	r1, [r7, #4]
 8002dba:	4613      	mov	r3, r2
 8002dbc:	009b      	lsls	r3, r3, #2
 8002dbe:	4413      	add	r3, r2
 8002dc0:	00db      	lsls	r3, r3, #3
 8002dc2:	440b      	add	r3, r1
 8002dc4:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8002dc8:	2200      	movs	r2, #0
 8002dca:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002dcc:	7bfa      	ldrb	r2, [r7, #15]
 8002dce:	6879      	ldr	r1, [r7, #4]
 8002dd0:	4613      	mov	r3, r2
 8002dd2:	009b      	lsls	r3, r3, #2
 8002dd4:	4413      	add	r3, r2
 8002dd6:	00db      	lsls	r3, r3, #3
 8002dd8:	440b      	add	r3, r1
 8002dda:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8002dde:	2200      	movs	r2, #0
 8002de0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002de2:	7bfa      	ldrb	r2, [r7, #15]
 8002de4:	6879      	ldr	r1, [r7, #4]
 8002de6:	4613      	mov	r3, r2
 8002de8:	009b      	lsls	r3, r3, #2
 8002dea:	4413      	add	r3, r2
 8002dec:	00db      	lsls	r3, r3, #3
 8002dee:	440b      	add	r3, r1
 8002df0:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8002df4:	2200      	movs	r2, #0
 8002df6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002df8:	7bfb      	ldrb	r3, [r7, #15]
 8002dfa:	3301      	adds	r3, #1
 8002dfc:	73fb      	strb	r3, [r7, #15]
 8002dfe:	7bfa      	ldrb	r2, [r7, #15]
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	685b      	ldr	r3, [r3, #4]
 8002e04:	429a      	cmp	r2, r3
 8002e06:	d3b5      	bcc.n	8002d74 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	603b      	str	r3, [r7, #0]
 8002e0e:	687e      	ldr	r6, [r7, #4]
 8002e10:	466d      	mov	r5, sp
 8002e12:	f106 0410 	add.w	r4, r6, #16
 8002e16:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e18:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002e1a:	6823      	ldr	r3, [r4, #0]
 8002e1c:	602b      	str	r3, [r5, #0]
 8002e1e:	1d33      	adds	r3, r6, #4
 8002e20:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002e22:	6838      	ldr	r0, [r7, #0]
 8002e24:	f002 fca2 	bl	800576c <USB_DevInit>
 8002e28:	4603      	mov	r3, r0
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d005      	beq.n	8002e3a <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	2202      	movs	r2, #2
 8002e32:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8002e36:	2301      	movs	r3, #1
 8002e38:	e00d      	b.n	8002e56 <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	2201      	movs	r2, #1
 8002e46:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	4618      	mov	r0, r3
 8002e50:	f002 fcac 	bl	80057ac <USB_DevDisconnect>

  return HAL_OK;
 8002e54:	2300      	movs	r3, #0
}
 8002e56:	4618      	mov	r0, r3
 8002e58:	3714      	adds	r7, #20
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08002e60 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002e60:	b480      	push	{r7}
 8002e62:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8002e64:	4b03      	ldr	r3, [pc, #12]	; (8002e74 <HAL_PWR_EnableBkUpAccess+0x14>)
 8002e66:	2201      	movs	r2, #1
 8002e68:	601a      	str	r2, [r3, #0]
}
 8002e6a:	bf00      	nop
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	bc80      	pop	{r7}
 8002e70:	4770      	bx	lr
 8002e72:	bf00      	nop
 8002e74:	420e0020 	.word	0x420e0020

08002e78 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b086      	sub	sp, #24
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d101      	bne.n	8002e8a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002e86:	2301      	movs	r3, #1
 8002e88:	e272      	b.n	8003370 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f003 0301 	and.w	r3, r3, #1
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	f000 8087 	beq.w	8002fa6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002e98:	4b92      	ldr	r3, [pc, #584]	; (80030e4 <HAL_RCC_OscConfig+0x26c>)
 8002e9a:	685b      	ldr	r3, [r3, #4]
 8002e9c:	f003 030c 	and.w	r3, r3, #12
 8002ea0:	2b04      	cmp	r3, #4
 8002ea2:	d00c      	beq.n	8002ebe <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002ea4:	4b8f      	ldr	r3, [pc, #572]	; (80030e4 <HAL_RCC_OscConfig+0x26c>)
 8002ea6:	685b      	ldr	r3, [r3, #4]
 8002ea8:	f003 030c 	and.w	r3, r3, #12
 8002eac:	2b08      	cmp	r3, #8
 8002eae:	d112      	bne.n	8002ed6 <HAL_RCC_OscConfig+0x5e>
 8002eb0:	4b8c      	ldr	r3, [pc, #560]	; (80030e4 <HAL_RCC_OscConfig+0x26c>)
 8002eb2:	685b      	ldr	r3, [r3, #4]
 8002eb4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002eb8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ebc:	d10b      	bne.n	8002ed6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ebe:	4b89      	ldr	r3, [pc, #548]	; (80030e4 <HAL_RCC_OscConfig+0x26c>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d06c      	beq.n	8002fa4 <HAL_RCC_OscConfig+0x12c>
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	685b      	ldr	r3, [r3, #4]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d168      	bne.n	8002fa4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	e24c      	b.n	8003370 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	685b      	ldr	r3, [r3, #4]
 8002eda:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ede:	d106      	bne.n	8002eee <HAL_RCC_OscConfig+0x76>
 8002ee0:	4b80      	ldr	r3, [pc, #512]	; (80030e4 <HAL_RCC_OscConfig+0x26c>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4a7f      	ldr	r2, [pc, #508]	; (80030e4 <HAL_RCC_OscConfig+0x26c>)
 8002ee6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002eea:	6013      	str	r3, [r2, #0]
 8002eec:	e02e      	b.n	8002f4c <HAL_RCC_OscConfig+0xd4>
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	685b      	ldr	r3, [r3, #4]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d10c      	bne.n	8002f10 <HAL_RCC_OscConfig+0x98>
 8002ef6:	4b7b      	ldr	r3, [pc, #492]	; (80030e4 <HAL_RCC_OscConfig+0x26c>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	4a7a      	ldr	r2, [pc, #488]	; (80030e4 <HAL_RCC_OscConfig+0x26c>)
 8002efc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f00:	6013      	str	r3, [r2, #0]
 8002f02:	4b78      	ldr	r3, [pc, #480]	; (80030e4 <HAL_RCC_OscConfig+0x26c>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	4a77      	ldr	r2, [pc, #476]	; (80030e4 <HAL_RCC_OscConfig+0x26c>)
 8002f08:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f0c:	6013      	str	r3, [r2, #0]
 8002f0e:	e01d      	b.n	8002f4c <HAL_RCC_OscConfig+0xd4>
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	685b      	ldr	r3, [r3, #4]
 8002f14:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002f18:	d10c      	bne.n	8002f34 <HAL_RCC_OscConfig+0xbc>
 8002f1a:	4b72      	ldr	r3, [pc, #456]	; (80030e4 <HAL_RCC_OscConfig+0x26c>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	4a71      	ldr	r2, [pc, #452]	; (80030e4 <HAL_RCC_OscConfig+0x26c>)
 8002f20:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f24:	6013      	str	r3, [r2, #0]
 8002f26:	4b6f      	ldr	r3, [pc, #444]	; (80030e4 <HAL_RCC_OscConfig+0x26c>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	4a6e      	ldr	r2, [pc, #440]	; (80030e4 <HAL_RCC_OscConfig+0x26c>)
 8002f2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f30:	6013      	str	r3, [r2, #0]
 8002f32:	e00b      	b.n	8002f4c <HAL_RCC_OscConfig+0xd4>
 8002f34:	4b6b      	ldr	r3, [pc, #428]	; (80030e4 <HAL_RCC_OscConfig+0x26c>)
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4a6a      	ldr	r2, [pc, #424]	; (80030e4 <HAL_RCC_OscConfig+0x26c>)
 8002f3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f3e:	6013      	str	r3, [r2, #0]
 8002f40:	4b68      	ldr	r3, [pc, #416]	; (80030e4 <HAL_RCC_OscConfig+0x26c>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	4a67      	ldr	r2, [pc, #412]	; (80030e4 <HAL_RCC_OscConfig+0x26c>)
 8002f46:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f4a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	685b      	ldr	r3, [r3, #4]
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d013      	beq.n	8002f7c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f54:	f7fe ffe4 	bl	8001f20 <HAL_GetTick>
 8002f58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f5a:	e008      	b.n	8002f6e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f5c:	f7fe ffe0 	bl	8001f20 <HAL_GetTick>
 8002f60:	4602      	mov	r2, r0
 8002f62:	693b      	ldr	r3, [r7, #16]
 8002f64:	1ad3      	subs	r3, r2, r3
 8002f66:	2b64      	cmp	r3, #100	; 0x64
 8002f68:	d901      	bls.n	8002f6e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002f6a:	2303      	movs	r3, #3
 8002f6c:	e200      	b.n	8003370 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f6e:	4b5d      	ldr	r3, [pc, #372]	; (80030e4 <HAL_RCC_OscConfig+0x26c>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d0f0      	beq.n	8002f5c <HAL_RCC_OscConfig+0xe4>
 8002f7a:	e014      	b.n	8002fa6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f7c:	f7fe ffd0 	bl	8001f20 <HAL_GetTick>
 8002f80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f82:	e008      	b.n	8002f96 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f84:	f7fe ffcc 	bl	8001f20 <HAL_GetTick>
 8002f88:	4602      	mov	r2, r0
 8002f8a:	693b      	ldr	r3, [r7, #16]
 8002f8c:	1ad3      	subs	r3, r2, r3
 8002f8e:	2b64      	cmp	r3, #100	; 0x64
 8002f90:	d901      	bls.n	8002f96 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002f92:	2303      	movs	r3, #3
 8002f94:	e1ec      	b.n	8003370 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f96:	4b53      	ldr	r3, [pc, #332]	; (80030e4 <HAL_RCC_OscConfig+0x26c>)
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d1f0      	bne.n	8002f84 <HAL_RCC_OscConfig+0x10c>
 8002fa2:	e000      	b.n	8002fa6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fa4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f003 0302 	and.w	r3, r3, #2
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d063      	beq.n	800307a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002fb2:	4b4c      	ldr	r3, [pc, #304]	; (80030e4 <HAL_RCC_OscConfig+0x26c>)
 8002fb4:	685b      	ldr	r3, [r3, #4]
 8002fb6:	f003 030c 	and.w	r3, r3, #12
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d00b      	beq.n	8002fd6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002fbe:	4b49      	ldr	r3, [pc, #292]	; (80030e4 <HAL_RCC_OscConfig+0x26c>)
 8002fc0:	685b      	ldr	r3, [r3, #4]
 8002fc2:	f003 030c 	and.w	r3, r3, #12
 8002fc6:	2b08      	cmp	r3, #8
 8002fc8:	d11c      	bne.n	8003004 <HAL_RCC_OscConfig+0x18c>
 8002fca:	4b46      	ldr	r3, [pc, #280]	; (80030e4 <HAL_RCC_OscConfig+0x26c>)
 8002fcc:	685b      	ldr	r3, [r3, #4]
 8002fce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d116      	bne.n	8003004 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002fd6:	4b43      	ldr	r3, [pc, #268]	; (80030e4 <HAL_RCC_OscConfig+0x26c>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f003 0302 	and.w	r3, r3, #2
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d005      	beq.n	8002fee <HAL_RCC_OscConfig+0x176>
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	691b      	ldr	r3, [r3, #16]
 8002fe6:	2b01      	cmp	r3, #1
 8002fe8:	d001      	beq.n	8002fee <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002fea:	2301      	movs	r3, #1
 8002fec:	e1c0      	b.n	8003370 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fee:	4b3d      	ldr	r3, [pc, #244]	; (80030e4 <HAL_RCC_OscConfig+0x26c>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	695b      	ldr	r3, [r3, #20]
 8002ffa:	00db      	lsls	r3, r3, #3
 8002ffc:	4939      	ldr	r1, [pc, #228]	; (80030e4 <HAL_RCC_OscConfig+0x26c>)
 8002ffe:	4313      	orrs	r3, r2
 8003000:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003002:	e03a      	b.n	800307a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	691b      	ldr	r3, [r3, #16]
 8003008:	2b00      	cmp	r3, #0
 800300a:	d020      	beq.n	800304e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800300c:	4b36      	ldr	r3, [pc, #216]	; (80030e8 <HAL_RCC_OscConfig+0x270>)
 800300e:	2201      	movs	r2, #1
 8003010:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003012:	f7fe ff85 	bl	8001f20 <HAL_GetTick>
 8003016:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003018:	e008      	b.n	800302c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800301a:	f7fe ff81 	bl	8001f20 <HAL_GetTick>
 800301e:	4602      	mov	r2, r0
 8003020:	693b      	ldr	r3, [r7, #16]
 8003022:	1ad3      	subs	r3, r2, r3
 8003024:	2b02      	cmp	r3, #2
 8003026:	d901      	bls.n	800302c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003028:	2303      	movs	r3, #3
 800302a:	e1a1      	b.n	8003370 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800302c:	4b2d      	ldr	r3, [pc, #180]	; (80030e4 <HAL_RCC_OscConfig+0x26c>)
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f003 0302 	and.w	r3, r3, #2
 8003034:	2b00      	cmp	r3, #0
 8003036:	d0f0      	beq.n	800301a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003038:	4b2a      	ldr	r3, [pc, #168]	; (80030e4 <HAL_RCC_OscConfig+0x26c>)
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	695b      	ldr	r3, [r3, #20]
 8003044:	00db      	lsls	r3, r3, #3
 8003046:	4927      	ldr	r1, [pc, #156]	; (80030e4 <HAL_RCC_OscConfig+0x26c>)
 8003048:	4313      	orrs	r3, r2
 800304a:	600b      	str	r3, [r1, #0]
 800304c:	e015      	b.n	800307a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800304e:	4b26      	ldr	r3, [pc, #152]	; (80030e8 <HAL_RCC_OscConfig+0x270>)
 8003050:	2200      	movs	r2, #0
 8003052:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003054:	f7fe ff64 	bl	8001f20 <HAL_GetTick>
 8003058:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800305a:	e008      	b.n	800306e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800305c:	f7fe ff60 	bl	8001f20 <HAL_GetTick>
 8003060:	4602      	mov	r2, r0
 8003062:	693b      	ldr	r3, [r7, #16]
 8003064:	1ad3      	subs	r3, r2, r3
 8003066:	2b02      	cmp	r3, #2
 8003068:	d901      	bls.n	800306e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800306a:	2303      	movs	r3, #3
 800306c:	e180      	b.n	8003370 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800306e:	4b1d      	ldr	r3, [pc, #116]	; (80030e4 <HAL_RCC_OscConfig+0x26c>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f003 0302 	and.w	r3, r3, #2
 8003076:	2b00      	cmp	r3, #0
 8003078:	d1f0      	bne.n	800305c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f003 0308 	and.w	r3, r3, #8
 8003082:	2b00      	cmp	r3, #0
 8003084:	d03a      	beq.n	80030fc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	699b      	ldr	r3, [r3, #24]
 800308a:	2b00      	cmp	r3, #0
 800308c:	d019      	beq.n	80030c2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800308e:	4b17      	ldr	r3, [pc, #92]	; (80030ec <HAL_RCC_OscConfig+0x274>)
 8003090:	2201      	movs	r2, #1
 8003092:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003094:	f7fe ff44 	bl	8001f20 <HAL_GetTick>
 8003098:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800309a:	e008      	b.n	80030ae <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800309c:	f7fe ff40 	bl	8001f20 <HAL_GetTick>
 80030a0:	4602      	mov	r2, r0
 80030a2:	693b      	ldr	r3, [r7, #16]
 80030a4:	1ad3      	subs	r3, r2, r3
 80030a6:	2b02      	cmp	r3, #2
 80030a8:	d901      	bls.n	80030ae <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80030aa:	2303      	movs	r3, #3
 80030ac:	e160      	b.n	8003370 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030ae:	4b0d      	ldr	r3, [pc, #52]	; (80030e4 <HAL_RCC_OscConfig+0x26c>)
 80030b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030b2:	f003 0302 	and.w	r3, r3, #2
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d0f0      	beq.n	800309c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80030ba:	2001      	movs	r0, #1
 80030bc:	f000 fad8 	bl	8003670 <RCC_Delay>
 80030c0:	e01c      	b.n	80030fc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80030c2:	4b0a      	ldr	r3, [pc, #40]	; (80030ec <HAL_RCC_OscConfig+0x274>)
 80030c4:	2200      	movs	r2, #0
 80030c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030c8:	f7fe ff2a 	bl	8001f20 <HAL_GetTick>
 80030cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030ce:	e00f      	b.n	80030f0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80030d0:	f7fe ff26 	bl	8001f20 <HAL_GetTick>
 80030d4:	4602      	mov	r2, r0
 80030d6:	693b      	ldr	r3, [r7, #16]
 80030d8:	1ad3      	subs	r3, r2, r3
 80030da:	2b02      	cmp	r3, #2
 80030dc:	d908      	bls.n	80030f0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80030de:	2303      	movs	r3, #3
 80030e0:	e146      	b.n	8003370 <HAL_RCC_OscConfig+0x4f8>
 80030e2:	bf00      	nop
 80030e4:	40021000 	.word	0x40021000
 80030e8:	42420000 	.word	0x42420000
 80030ec:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030f0:	4b92      	ldr	r3, [pc, #584]	; (800333c <HAL_RCC_OscConfig+0x4c4>)
 80030f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030f4:	f003 0302 	and.w	r3, r3, #2
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d1e9      	bne.n	80030d0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f003 0304 	and.w	r3, r3, #4
 8003104:	2b00      	cmp	r3, #0
 8003106:	f000 80a6 	beq.w	8003256 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800310a:	2300      	movs	r3, #0
 800310c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800310e:	4b8b      	ldr	r3, [pc, #556]	; (800333c <HAL_RCC_OscConfig+0x4c4>)
 8003110:	69db      	ldr	r3, [r3, #28]
 8003112:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003116:	2b00      	cmp	r3, #0
 8003118:	d10d      	bne.n	8003136 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800311a:	4b88      	ldr	r3, [pc, #544]	; (800333c <HAL_RCC_OscConfig+0x4c4>)
 800311c:	69db      	ldr	r3, [r3, #28]
 800311e:	4a87      	ldr	r2, [pc, #540]	; (800333c <HAL_RCC_OscConfig+0x4c4>)
 8003120:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003124:	61d3      	str	r3, [r2, #28]
 8003126:	4b85      	ldr	r3, [pc, #532]	; (800333c <HAL_RCC_OscConfig+0x4c4>)
 8003128:	69db      	ldr	r3, [r3, #28]
 800312a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800312e:	60bb      	str	r3, [r7, #8]
 8003130:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003132:	2301      	movs	r3, #1
 8003134:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003136:	4b82      	ldr	r3, [pc, #520]	; (8003340 <HAL_RCC_OscConfig+0x4c8>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800313e:	2b00      	cmp	r3, #0
 8003140:	d118      	bne.n	8003174 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003142:	4b7f      	ldr	r3, [pc, #508]	; (8003340 <HAL_RCC_OscConfig+0x4c8>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	4a7e      	ldr	r2, [pc, #504]	; (8003340 <HAL_RCC_OscConfig+0x4c8>)
 8003148:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800314c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800314e:	f7fe fee7 	bl	8001f20 <HAL_GetTick>
 8003152:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003154:	e008      	b.n	8003168 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003156:	f7fe fee3 	bl	8001f20 <HAL_GetTick>
 800315a:	4602      	mov	r2, r0
 800315c:	693b      	ldr	r3, [r7, #16]
 800315e:	1ad3      	subs	r3, r2, r3
 8003160:	2b64      	cmp	r3, #100	; 0x64
 8003162:	d901      	bls.n	8003168 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003164:	2303      	movs	r3, #3
 8003166:	e103      	b.n	8003370 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003168:	4b75      	ldr	r3, [pc, #468]	; (8003340 <HAL_RCC_OscConfig+0x4c8>)
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003170:	2b00      	cmp	r3, #0
 8003172:	d0f0      	beq.n	8003156 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	68db      	ldr	r3, [r3, #12]
 8003178:	2b01      	cmp	r3, #1
 800317a:	d106      	bne.n	800318a <HAL_RCC_OscConfig+0x312>
 800317c:	4b6f      	ldr	r3, [pc, #444]	; (800333c <HAL_RCC_OscConfig+0x4c4>)
 800317e:	6a1b      	ldr	r3, [r3, #32]
 8003180:	4a6e      	ldr	r2, [pc, #440]	; (800333c <HAL_RCC_OscConfig+0x4c4>)
 8003182:	f043 0301 	orr.w	r3, r3, #1
 8003186:	6213      	str	r3, [r2, #32]
 8003188:	e02d      	b.n	80031e6 <HAL_RCC_OscConfig+0x36e>
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	68db      	ldr	r3, [r3, #12]
 800318e:	2b00      	cmp	r3, #0
 8003190:	d10c      	bne.n	80031ac <HAL_RCC_OscConfig+0x334>
 8003192:	4b6a      	ldr	r3, [pc, #424]	; (800333c <HAL_RCC_OscConfig+0x4c4>)
 8003194:	6a1b      	ldr	r3, [r3, #32]
 8003196:	4a69      	ldr	r2, [pc, #420]	; (800333c <HAL_RCC_OscConfig+0x4c4>)
 8003198:	f023 0301 	bic.w	r3, r3, #1
 800319c:	6213      	str	r3, [r2, #32]
 800319e:	4b67      	ldr	r3, [pc, #412]	; (800333c <HAL_RCC_OscConfig+0x4c4>)
 80031a0:	6a1b      	ldr	r3, [r3, #32]
 80031a2:	4a66      	ldr	r2, [pc, #408]	; (800333c <HAL_RCC_OscConfig+0x4c4>)
 80031a4:	f023 0304 	bic.w	r3, r3, #4
 80031a8:	6213      	str	r3, [r2, #32]
 80031aa:	e01c      	b.n	80031e6 <HAL_RCC_OscConfig+0x36e>
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	68db      	ldr	r3, [r3, #12]
 80031b0:	2b05      	cmp	r3, #5
 80031b2:	d10c      	bne.n	80031ce <HAL_RCC_OscConfig+0x356>
 80031b4:	4b61      	ldr	r3, [pc, #388]	; (800333c <HAL_RCC_OscConfig+0x4c4>)
 80031b6:	6a1b      	ldr	r3, [r3, #32]
 80031b8:	4a60      	ldr	r2, [pc, #384]	; (800333c <HAL_RCC_OscConfig+0x4c4>)
 80031ba:	f043 0304 	orr.w	r3, r3, #4
 80031be:	6213      	str	r3, [r2, #32]
 80031c0:	4b5e      	ldr	r3, [pc, #376]	; (800333c <HAL_RCC_OscConfig+0x4c4>)
 80031c2:	6a1b      	ldr	r3, [r3, #32]
 80031c4:	4a5d      	ldr	r2, [pc, #372]	; (800333c <HAL_RCC_OscConfig+0x4c4>)
 80031c6:	f043 0301 	orr.w	r3, r3, #1
 80031ca:	6213      	str	r3, [r2, #32]
 80031cc:	e00b      	b.n	80031e6 <HAL_RCC_OscConfig+0x36e>
 80031ce:	4b5b      	ldr	r3, [pc, #364]	; (800333c <HAL_RCC_OscConfig+0x4c4>)
 80031d0:	6a1b      	ldr	r3, [r3, #32]
 80031d2:	4a5a      	ldr	r2, [pc, #360]	; (800333c <HAL_RCC_OscConfig+0x4c4>)
 80031d4:	f023 0301 	bic.w	r3, r3, #1
 80031d8:	6213      	str	r3, [r2, #32]
 80031da:	4b58      	ldr	r3, [pc, #352]	; (800333c <HAL_RCC_OscConfig+0x4c4>)
 80031dc:	6a1b      	ldr	r3, [r3, #32]
 80031de:	4a57      	ldr	r2, [pc, #348]	; (800333c <HAL_RCC_OscConfig+0x4c4>)
 80031e0:	f023 0304 	bic.w	r3, r3, #4
 80031e4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	68db      	ldr	r3, [r3, #12]
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d015      	beq.n	800321a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031ee:	f7fe fe97 	bl	8001f20 <HAL_GetTick>
 80031f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031f4:	e00a      	b.n	800320c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031f6:	f7fe fe93 	bl	8001f20 <HAL_GetTick>
 80031fa:	4602      	mov	r2, r0
 80031fc:	693b      	ldr	r3, [r7, #16]
 80031fe:	1ad3      	subs	r3, r2, r3
 8003200:	f241 3288 	movw	r2, #5000	; 0x1388
 8003204:	4293      	cmp	r3, r2
 8003206:	d901      	bls.n	800320c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003208:	2303      	movs	r3, #3
 800320a:	e0b1      	b.n	8003370 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800320c:	4b4b      	ldr	r3, [pc, #300]	; (800333c <HAL_RCC_OscConfig+0x4c4>)
 800320e:	6a1b      	ldr	r3, [r3, #32]
 8003210:	f003 0302 	and.w	r3, r3, #2
 8003214:	2b00      	cmp	r3, #0
 8003216:	d0ee      	beq.n	80031f6 <HAL_RCC_OscConfig+0x37e>
 8003218:	e014      	b.n	8003244 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800321a:	f7fe fe81 	bl	8001f20 <HAL_GetTick>
 800321e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003220:	e00a      	b.n	8003238 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003222:	f7fe fe7d 	bl	8001f20 <HAL_GetTick>
 8003226:	4602      	mov	r2, r0
 8003228:	693b      	ldr	r3, [r7, #16]
 800322a:	1ad3      	subs	r3, r2, r3
 800322c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003230:	4293      	cmp	r3, r2
 8003232:	d901      	bls.n	8003238 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003234:	2303      	movs	r3, #3
 8003236:	e09b      	b.n	8003370 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003238:	4b40      	ldr	r3, [pc, #256]	; (800333c <HAL_RCC_OscConfig+0x4c4>)
 800323a:	6a1b      	ldr	r3, [r3, #32]
 800323c:	f003 0302 	and.w	r3, r3, #2
 8003240:	2b00      	cmp	r3, #0
 8003242:	d1ee      	bne.n	8003222 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003244:	7dfb      	ldrb	r3, [r7, #23]
 8003246:	2b01      	cmp	r3, #1
 8003248:	d105      	bne.n	8003256 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800324a:	4b3c      	ldr	r3, [pc, #240]	; (800333c <HAL_RCC_OscConfig+0x4c4>)
 800324c:	69db      	ldr	r3, [r3, #28]
 800324e:	4a3b      	ldr	r2, [pc, #236]	; (800333c <HAL_RCC_OscConfig+0x4c4>)
 8003250:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003254:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	69db      	ldr	r3, [r3, #28]
 800325a:	2b00      	cmp	r3, #0
 800325c:	f000 8087 	beq.w	800336e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003260:	4b36      	ldr	r3, [pc, #216]	; (800333c <HAL_RCC_OscConfig+0x4c4>)
 8003262:	685b      	ldr	r3, [r3, #4]
 8003264:	f003 030c 	and.w	r3, r3, #12
 8003268:	2b08      	cmp	r3, #8
 800326a:	d061      	beq.n	8003330 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	69db      	ldr	r3, [r3, #28]
 8003270:	2b02      	cmp	r3, #2
 8003272:	d146      	bne.n	8003302 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003274:	4b33      	ldr	r3, [pc, #204]	; (8003344 <HAL_RCC_OscConfig+0x4cc>)
 8003276:	2200      	movs	r2, #0
 8003278:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800327a:	f7fe fe51 	bl	8001f20 <HAL_GetTick>
 800327e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003280:	e008      	b.n	8003294 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003282:	f7fe fe4d 	bl	8001f20 <HAL_GetTick>
 8003286:	4602      	mov	r2, r0
 8003288:	693b      	ldr	r3, [r7, #16]
 800328a:	1ad3      	subs	r3, r2, r3
 800328c:	2b02      	cmp	r3, #2
 800328e:	d901      	bls.n	8003294 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003290:	2303      	movs	r3, #3
 8003292:	e06d      	b.n	8003370 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003294:	4b29      	ldr	r3, [pc, #164]	; (800333c <HAL_RCC_OscConfig+0x4c4>)
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800329c:	2b00      	cmp	r3, #0
 800329e:	d1f0      	bne.n	8003282 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6a1b      	ldr	r3, [r3, #32]
 80032a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032a8:	d108      	bne.n	80032bc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80032aa:	4b24      	ldr	r3, [pc, #144]	; (800333c <HAL_RCC_OscConfig+0x4c4>)
 80032ac:	685b      	ldr	r3, [r3, #4]
 80032ae:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	689b      	ldr	r3, [r3, #8]
 80032b6:	4921      	ldr	r1, [pc, #132]	; (800333c <HAL_RCC_OscConfig+0x4c4>)
 80032b8:	4313      	orrs	r3, r2
 80032ba:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80032bc:	4b1f      	ldr	r3, [pc, #124]	; (800333c <HAL_RCC_OscConfig+0x4c4>)
 80032be:	685b      	ldr	r3, [r3, #4]
 80032c0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6a19      	ldr	r1, [r3, #32]
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032cc:	430b      	orrs	r3, r1
 80032ce:	491b      	ldr	r1, [pc, #108]	; (800333c <HAL_RCC_OscConfig+0x4c4>)
 80032d0:	4313      	orrs	r3, r2
 80032d2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80032d4:	4b1b      	ldr	r3, [pc, #108]	; (8003344 <HAL_RCC_OscConfig+0x4cc>)
 80032d6:	2201      	movs	r2, #1
 80032d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032da:	f7fe fe21 	bl	8001f20 <HAL_GetTick>
 80032de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80032e0:	e008      	b.n	80032f4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032e2:	f7fe fe1d 	bl	8001f20 <HAL_GetTick>
 80032e6:	4602      	mov	r2, r0
 80032e8:	693b      	ldr	r3, [r7, #16]
 80032ea:	1ad3      	subs	r3, r2, r3
 80032ec:	2b02      	cmp	r3, #2
 80032ee:	d901      	bls.n	80032f4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80032f0:	2303      	movs	r3, #3
 80032f2:	e03d      	b.n	8003370 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80032f4:	4b11      	ldr	r3, [pc, #68]	; (800333c <HAL_RCC_OscConfig+0x4c4>)
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d0f0      	beq.n	80032e2 <HAL_RCC_OscConfig+0x46a>
 8003300:	e035      	b.n	800336e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003302:	4b10      	ldr	r3, [pc, #64]	; (8003344 <HAL_RCC_OscConfig+0x4cc>)
 8003304:	2200      	movs	r2, #0
 8003306:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003308:	f7fe fe0a 	bl	8001f20 <HAL_GetTick>
 800330c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800330e:	e008      	b.n	8003322 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003310:	f7fe fe06 	bl	8001f20 <HAL_GetTick>
 8003314:	4602      	mov	r2, r0
 8003316:	693b      	ldr	r3, [r7, #16]
 8003318:	1ad3      	subs	r3, r2, r3
 800331a:	2b02      	cmp	r3, #2
 800331c:	d901      	bls.n	8003322 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800331e:	2303      	movs	r3, #3
 8003320:	e026      	b.n	8003370 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003322:	4b06      	ldr	r3, [pc, #24]	; (800333c <HAL_RCC_OscConfig+0x4c4>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800332a:	2b00      	cmp	r3, #0
 800332c:	d1f0      	bne.n	8003310 <HAL_RCC_OscConfig+0x498>
 800332e:	e01e      	b.n	800336e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	69db      	ldr	r3, [r3, #28]
 8003334:	2b01      	cmp	r3, #1
 8003336:	d107      	bne.n	8003348 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003338:	2301      	movs	r3, #1
 800333a:	e019      	b.n	8003370 <HAL_RCC_OscConfig+0x4f8>
 800333c:	40021000 	.word	0x40021000
 8003340:	40007000 	.word	0x40007000
 8003344:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003348:	4b0b      	ldr	r3, [pc, #44]	; (8003378 <HAL_RCC_OscConfig+0x500>)
 800334a:	685b      	ldr	r3, [r3, #4]
 800334c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6a1b      	ldr	r3, [r3, #32]
 8003358:	429a      	cmp	r2, r3
 800335a:	d106      	bne.n	800336a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003366:	429a      	cmp	r2, r3
 8003368:	d001      	beq.n	800336e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800336a:	2301      	movs	r3, #1
 800336c:	e000      	b.n	8003370 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800336e:	2300      	movs	r3, #0
}
 8003370:	4618      	mov	r0, r3
 8003372:	3718      	adds	r7, #24
 8003374:	46bd      	mov	sp, r7
 8003376:	bd80      	pop	{r7, pc}
 8003378:	40021000 	.word	0x40021000

0800337c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	b084      	sub	sp, #16
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
 8003384:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	2b00      	cmp	r3, #0
 800338a:	d101      	bne.n	8003390 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800338c:	2301      	movs	r3, #1
 800338e:	e0d0      	b.n	8003532 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003390:	4b6a      	ldr	r3, [pc, #424]	; (800353c <HAL_RCC_ClockConfig+0x1c0>)
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f003 0307 	and.w	r3, r3, #7
 8003398:	683a      	ldr	r2, [r7, #0]
 800339a:	429a      	cmp	r2, r3
 800339c:	d910      	bls.n	80033c0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800339e:	4b67      	ldr	r3, [pc, #412]	; (800353c <HAL_RCC_ClockConfig+0x1c0>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f023 0207 	bic.w	r2, r3, #7
 80033a6:	4965      	ldr	r1, [pc, #404]	; (800353c <HAL_RCC_ClockConfig+0x1c0>)
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	4313      	orrs	r3, r2
 80033ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80033ae:	4b63      	ldr	r3, [pc, #396]	; (800353c <HAL_RCC_ClockConfig+0x1c0>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f003 0307 	and.w	r3, r3, #7
 80033b6:	683a      	ldr	r2, [r7, #0]
 80033b8:	429a      	cmp	r2, r3
 80033ba:	d001      	beq.n	80033c0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80033bc:	2301      	movs	r3, #1
 80033be:	e0b8      	b.n	8003532 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f003 0302 	and.w	r3, r3, #2
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d020      	beq.n	800340e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f003 0304 	and.w	r3, r3, #4
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d005      	beq.n	80033e4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80033d8:	4b59      	ldr	r3, [pc, #356]	; (8003540 <HAL_RCC_ClockConfig+0x1c4>)
 80033da:	685b      	ldr	r3, [r3, #4]
 80033dc:	4a58      	ldr	r2, [pc, #352]	; (8003540 <HAL_RCC_ClockConfig+0x1c4>)
 80033de:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80033e2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f003 0308 	and.w	r3, r3, #8
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d005      	beq.n	80033fc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80033f0:	4b53      	ldr	r3, [pc, #332]	; (8003540 <HAL_RCC_ClockConfig+0x1c4>)
 80033f2:	685b      	ldr	r3, [r3, #4]
 80033f4:	4a52      	ldr	r2, [pc, #328]	; (8003540 <HAL_RCC_ClockConfig+0x1c4>)
 80033f6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80033fa:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80033fc:	4b50      	ldr	r3, [pc, #320]	; (8003540 <HAL_RCC_ClockConfig+0x1c4>)
 80033fe:	685b      	ldr	r3, [r3, #4]
 8003400:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	689b      	ldr	r3, [r3, #8]
 8003408:	494d      	ldr	r1, [pc, #308]	; (8003540 <HAL_RCC_ClockConfig+0x1c4>)
 800340a:	4313      	orrs	r3, r2
 800340c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f003 0301 	and.w	r3, r3, #1
 8003416:	2b00      	cmp	r3, #0
 8003418:	d040      	beq.n	800349c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	685b      	ldr	r3, [r3, #4]
 800341e:	2b01      	cmp	r3, #1
 8003420:	d107      	bne.n	8003432 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003422:	4b47      	ldr	r3, [pc, #284]	; (8003540 <HAL_RCC_ClockConfig+0x1c4>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800342a:	2b00      	cmp	r3, #0
 800342c:	d115      	bne.n	800345a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800342e:	2301      	movs	r3, #1
 8003430:	e07f      	b.n	8003532 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	685b      	ldr	r3, [r3, #4]
 8003436:	2b02      	cmp	r3, #2
 8003438:	d107      	bne.n	800344a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800343a:	4b41      	ldr	r3, [pc, #260]	; (8003540 <HAL_RCC_ClockConfig+0x1c4>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003442:	2b00      	cmp	r3, #0
 8003444:	d109      	bne.n	800345a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003446:	2301      	movs	r3, #1
 8003448:	e073      	b.n	8003532 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800344a:	4b3d      	ldr	r3, [pc, #244]	; (8003540 <HAL_RCC_ClockConfig+0x1c4>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f003 0302 	and.w	r3, r3, #2
 8003452:	2b00      	cmp	r3, #0
 8003454:	d101      	bne.n	800345a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003456:	2301      	movs	r3, #1
 8003458:	e06b      	b.n	8003532 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800345a:	4b39      	ldr	r3, [pc, #228]	; (8003540 <HAL_RCC_ClockConfig+0x1c4>)
 800345c:	685b      	ldr	r3, [r3, #4]
 800345e:	f023 0203 	bic.w	r2, r3, #3
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	685b      	ldr	r3, [r3, #4]
 8003466:	4936      	ldr	r1, [pc, #216]	; (8003540 <HAL_RCC_ClockConfig+0x1c4>)
 8003468:	4313      	orrs	r3, r2
 800346a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800346c:	f7fe fd58 	bl	8001f20 <HAL_GetTick>
 8003470:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003472:	e00a      	b.n	800348a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003474:	f7fe fd54 	bl	8001f20 <HAL_GetTick>
 8003478:	4602      	mov	r2, r0
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	1ad3      	subs	r3, r2, r3
 800347e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003482:	4293      	cmp	r3, r2
 8003484:	d901      	bls.n	800348a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003486:	2303      	movs	r3, #3
 8003488:	e053      	b.n	8003532 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800348a:	4b2d      	ldr	r3, [pc, #180]	; (8003540 <HAL_RCC_ClockConfig+0x1c4>)
 800348c:	685b      	ldr	r3, [r3, #4]
 800348e:	f003 020c 	and.w	r2, r3, #12
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	685b      	ldr	r3, [r3, #4]
 8003496:	009b      	lsls	r3, r3, #2
 8003498:	429a      	cmp	r2, r3
 800349a:	d1eb      	bne.n	8003474 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800349c:	4b27      	ldr	r3, [pc, #156]	; (800353c <HAL_RCC_ClockConfig+0x1c0>)
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f003 0307 	and.w	r3, r3, #7
 80034a4:	683a      	ldr	r2, [r7, #0]
 80034a6:	429a      	cmp	r2, r3
 80034a8:	d210      	bcs.n	80034cc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034aa:	4b24      	ldr	r3, [pc, #144]	; (800353c <HAL_RCC_ClockConfig+0x1c0>)
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f023 0207 	bic.w	r2, r3, #7
 80034b2:	4922      	ldr	r1, [pc, #136]	; (800353c <HAL_RCC_ClockConfig+0x1c0>)
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	4313      	orrs	r3, r2
 80034b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80034ba:	4b20      	ldr	r3, [pc, #128]	; (800353c <HAL_RCC_ClockConfig+0x1c0>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f003 0307 	and.w	r3, r3, #7
 80034c2:	683a      	ldr	r2, [r7, #0]
 80034c4:	429a      	cmp	r2, r3
 80034c6:	d001      	beq.n	80034cc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80034c8:	2301      	movs	r3, #1
 80034ca:	e032      	b.n	8003532 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f003 0304 	and.w	r3, r3, #4
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d008      	beq.n	80034ea <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80034d8:	4b19      	ldr	r3, [pc, #100]	; (8003540 <HAL_RCC_ClockConfig+0x1c4>)
 80034da:	685b      	ldr	r3, [r3, #4]
 80034dc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	68db      	ldr	r3, [r3, #12]
 80034e4:	4916      	ldr	r1, [pc, #88]	; (8003540 <HAL_RCC_ClockConfig+0x1c4>)
 80034e6:	4313      	orrs	r3, r2
 80034e8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f003 0308 	and.w	r3, r3, #8
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d009      	beq.n	800350a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80034f6:	4b12      	ldr	r3, [pc, #72]	; (8003540 <HAL_RCC_ClockConfig+0x1c4>)
 80034f8:	685b      	ldr	r3, [r3, #4]
 80034fa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	691b      	ldr	r3, [r3, #16]
 8003502:	00db      	lsls	r3, r3, #3
 8003504:	490e      	ldr	r1, [pc, #56]	; (8003540 <HAL_RCC_ClockConfig+0x1c4>)
 8003506:	4313      	orrs	r3, r2
 8003508:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800350a:	f000 f821 	bl	8003550 <HAL_RCC_GetSysClockFreq>
 800350e:	4602      	mov	r2, r0
 8003510:	4b0b      	ldr	r3, [pc, #44]	; (8003540 <HAL_RCC_ClockConfig+0x1c4>)
 8003512:	685b      	ldr	r3, [r3, #4]
 8003514:	091b      	lsrs	r3, r3, #4
 8003516:	f003 030f 	and.w	r3, r3, #15
 800351a:	490a      	ldr	r1, [pc, #40]	; (8003544 <HAL_RCC_ClockConfig+0x1c8>)
 800351c:	5ccb      	ldrb	r3, [r1, r3]
 800351e:	fa22 f303 	lsr.w	r3, r2, r3
 8003522:	4a09      	ldr	r2, [pc, #36]	; (8003548 <HAL_RCC_ClockConfig+0x1cc>)
 8003524:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003526:	4b09      	ldr	r3, [pc, #36]	; (800354c <HAL_RCC_ClockConfig+0x1d0>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	4618      	mov	r0, r3
 800352c:	f7fe fcb6 	bl	8001e9c <HAL_InitTick>

  return HAL_OK;
 8003530:	2300      	movs	r3, #0
}
 8003532:	4618      	mov	r0, r3
 8003534:	3710      	adds	r7, #16
 8003536:	46bd      	mov	sp, r7
 8003538:	bd80      	pop	{r7, pc}
 800353a:	bf00      	nop
 800353c:	40022000 	.word	0x40022000
 8003540:	40021000 	.word	0x40021000
 8003544:	08008b28 	.word	0x08008b28
 8003548:	20000008 	.word	0x20000008
 800354c:	2000000c 	.word	0x2000000c

08003550 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003550:	b490      	push	{r4, r7}
 8003552:	b08a      	sub	sp, #40	; 0x28
 8003554:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003556:	4b29      	ldr	r3, [pc, #164]	; (80035fc <HAL_RCC_GetSysClockFreq+0xac>)
 8003558:	1d3c      	adds	r4, r7, #4
 800355a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800355c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003560:	f240 2301 	movw	r3, #513	; 0x201
 8003564:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003566:	2300      	movs	r3, #0
 8003568:	61fb      	str	r3, [r7, #28]
 800356a:	2300      	movs	r3, #0
 800356c:	61bb      	str	r3, [r7, #24]
 800356e:	2300      	movs	r3, #0
 8003570:	627b      	str	r3, [r7, #36]	; 0x24
 8003572:	2300      	movs	r3, #0
 8003574:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003576:	2300      	movs	r3, #0
 8003578:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800357a:	4b21      	ldr	r3, [pc, #132]	; (8003600 <HAL_RCC_GetSysClockFreq+0xb0>)
 800357c:	685b      	ldr	r3, [r3, #4]
 800357e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003580:	69fb      	ldr	r3, [r7, #28]
 8003582:	f003 030c 	and.w	r3, r3, #12
 8003586:	2b04      	cmp	r3, #4
 8003588:	d002      	beq.n	8003590 <HAL_RCC_GetSysClockFreq+0x40>
 800358a:	2b08      	cmp	r3, #8
 800358c:	d003      	beq.n	8003596 <HAL_RCC_GetSysClockFreq+0x46>
 800358e:	e02b      	b.n	80035e8 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003590:	4b1c      	ldr	r3, [pc, #112]	; (8003604 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003592:	623b      	str	r3, [r7, #32]
      break;
 8003594:	e02b      	b.n	80035ee <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003596:	69fb      	ldr	r3, [r7, #28]
 8003598:	0c9b      	lsrs	r3, r3, #18
 800359a:	f003 030f 	and.w	r3, r3, #15
 800359e:	3328      	adds	r3, #40	; 0x28
 80035a0:	443b      	add	r3, r7
 80035a2:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80035a6:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80035a8:	69fb      	ldr	r3, [r7, #28]
 80035aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d012      	beq.n	80035d8 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80035b2:	4b13      	ldr	r3, [pc, #76]	; (8003600 <HAL_RCC_GetSysClockFreq+0xb0>)
 80035b4:	685b      	ldr	r3, [r3, #4]
 80035b6:	0c5b      	lsrs	r3, r3, #17
 80035b8:	f003 0301 	and.w	r3, r3, #1
 80035bc:	3328      	adds	r3, #40	; 0x28
 80035be:	443b      	add	r3, r7
 80035c0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80035c4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80035c6:	697b      	ldr	r3, [r7, #20]
 80035c8:	4a0e      	ldr	r2, [pc, #56]	; (8003604 <HAL_RCC_GetSysClockFreq+0xb4>)
 80035ca:	fb03 f202 	mul.w	r2, r3, r2
 80035ce:	69bb      	ldr	r3, [r7, #24]
 80035d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80035d4:	627b      	str	r3, [r7, #36]	; 0x24
 80035d6:	e004      	b.n	80035e2 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80035d8:	697b      	ldr	r3, [r7, #20]
 80035da:	4a0b      	ldr	r2, [pc, #44]	; (8003608 <HAL_RCC_GetSysClockFreq+0xb8>)
 80035dc:	fb02 f303 	mul.w	r3, r2, r3
 80035e0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80035e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035e4:	623b      	str	r3, [r7, #32]
      break;
 80035e6:	e002      	b.n	80035ee <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80035e8:	4b06      	ldr	r3, [pc, #24]	; (8003604 <HAL_RCC_GetSysClockFreq+0xb4>)
 80035ea:	623b      	str	r3, [r7, #32]
      break;
 80035ec:	bf00      	nop
    }
  }
  return sysclockfreq;
 80035ee:	6a3b      	ldr	r3, [r7, #32]
}
 80035f0:	4618      	mov	r0, r3
 80035f2:	3728      	adds	r7, #40	; 0x28
 80035f4:	46bd      	mov	sp, r7
 80035f6:	bc90      	pop	{r4, r7}
 80035f8:	4770      	bx	lr
 80035fa:	bf00      	nop
 80035fc:	08008608 	.word	0x08008608
 8003600:	40021000 	.word	0x40021000
 8003604:	007a1200 	.word	0x007a1200
 8003608:	003d0900 	.word	0x003d0900

0800360c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800360c:	b480      	push	{r7}
 800360e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003610:	4b02      	ldr	r3, [pc, #8]	; (800361c <HAL_RCC_GetHCLKFreq+0x10>)
 8003612:	681b      	ldr	r3, [r3, #0]
}
 8003614:	4618      	mov	r0, r3
 8003616:	46bd      	mov	sp, r7
 8003618:	bc80      	pop	{r7}
 800361a:	4770      	bx	lr
 800361c:	20000008 	.word	0x20000008

08003620 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003620:	b580      	push	{r7, lr}
 8003622:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003624:	f7ff fff2 	bl	800360c <HAL_RCC_GetHCLKFreq>
 8003628:	4602      	mov	r2, r0
 800362a:	4b05      	ldr	r3, [pc, #20]	; (8003640 <HAL_RCC_GetPCLK1Freq+0x20>)
 800362c:	685b      	ldr	r3, [r3, #4]
 800362e:	0a1b      	lsrs	r3, r3, #8
 8003630:	f003 0307 	and.w	r3, r3, #7
 8003634:	4903      	ldr	r1, [pc, #12]	; (8003644 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003636:	5ccb      	ldrb	r3, [r1, r3]
 8003638:	fa22 f303 	lsr.w	r3, r2, r3
}
 800363c:	4618      	mov	r0, r3
 800363e:	bd80      	pop	{r7, pc}
 8003640:	40021000 	.word	0x40021000
 8003644:	08008b38 	.word	0x08008b38

08003648 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003648:	b580      	push	{r7, lr}
 800364a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800364c:	f7ff ffde 	bl	800360c <HAL_RCC_GetHCLKFreq>
 8003650:	4602      	mov	r2, r0
 8003652:	4b05      	ldr	r3, [pc, #20]	; (8003668 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003654:	685b      	ldr	r3, [r3, #4]
 8003656:	0adb      	lsrs	r3, r3, #11
 8003658:	f003 0307 	and.w	r3, r3, #7
 800365c:	4903      	ldr	r1, [pc, #12]	; (800366c <HAL_RCC_GetPCLK2Freq+0x24>)
 800365e:	5ccb      	ldrb	r3, [r1, r3]
 8003660:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003664:	4618      	mov	r0, r3
 8003666:	bd80      	pop	{r7, pc}
 8003668:	40021000 	.word	0x40021000
 800366c:	08008b38 	.word	0x08008b38

08003670 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003670:	b480      	push	{r7}
 8003672:	b085      	sub	sp, #20
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003678:	4b0a      	ldr	r3, [pc, #40]	; (80036a4 <RCC_Delay+0x34>)
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	4a0a      	ldr	r2, [pc, #40]	; (80036a8 <RCC_Delay+0x38>)
 800367e:	fba2 2303 	umull	r2, r3, r2, r3
 8003682:	0a5b      	lsrs	r3, r3, #9
 8003684:	687a      	ldr	r2, [r7, #4]
 8003686:	fb02 f303 	mul.w	r3, r2, r3
 800368a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800368c:	bf00      	nop
  }
  while (Delay --);
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	1e5a      	subs	r2, r3, #1
 8003692:	60fa      	str	r2, [r7, #12]
 8003694:	2b00      	cmp	r3, #0
 8003696:	d1f9      	bne.n	800368c <RCC_Delay+0x1c>
}
 8003698:	bf00      	nop
 800369a:	bf00      	nop
 800369c:	3714      	adds	r7, #20
 800369e:	46bd      	mov	sp, r7
 80036a0:	bc80      	pop	{r7}
 80036a2:	4770      	bx	lr
 80036a4:	20000008 	.word	0x20000008
 80036a8:	10624dd3 	.word	0x10624dd3

080036ac <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b086      	sub	sp, #24
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80036b4:	2300      	movs	r3, #0
 80036b6:	613b      	str	r3, [r7, #16]
 80036b8:	2300      	movs	r3, #0
 80036ba:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f003 0301 	and.w	r3, r3, #1
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d07d      	beq.n	80037c4 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80036c8:	2300      	movs	r3, #0
 80036ca:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80036cc:	4b4f      	ldr	r3, [pc, #316]	; (800380c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036ce:	69db      	ldr	r3, [r3, #28]
 80036d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d10d      	bne.n	80036f4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80036d8:	4b4c      	ldr	r3, [pc, #304]	; (800380c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036da:	69db      	ldr	r3, [r3, #28]
 80036dc:	4a4b      	ldr	r2, [pc, #300]	; (800380c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036e2:	61d3      	str	r3, [r2, #28]
 80036e4:	4b49      	ldr	r3, [pc, #292]	; (800380c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036e6:	69db      	ldr	r3, [r3, #28]
 80036e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036ec:	60bb      	str	r3, [r7, #8]
 80036ee:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80036f0:	2301      	movs	r3, #1
 80036f2:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036f4:	4b46      	ldr	r3, [pc, #280]	; (8003810 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d118      	bne.n	8003732 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003700:	4b43      	ldr	r3, [pc, #268]	; (8003810 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	4a42      	ldr	r2, [pc, #264]	; (8003810 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003706:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800370a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800370c:	f7fe fc08 	bl	8001f20 <HAL_GetTick>
 8003710:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003712:	e008      	b.n	8003726 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003714:	f7fe fc04 	bl	8001f20 <HAL_GetTick>
 8003718:	4602      	mov	r2, r0
 800371a:	693b      	ldr	r3, [r7, #16]
 800371c:	1ad3      	subs	r3, r2, r3
 800371e:	2b64      	cmp	r3, #100	; 0x64
 8003720:	d901      	bls.n	8003726 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003722:	2303      	movs	r3, #3
 8003724:	e06d      	b.n	8003802 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003726:	4b3a      	ldr	r3, [pc, #232]	; (8003810 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800372e:	2b00      	cmp	r3, #0
 8003730:	d0f0      	beq.n	8003714 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003732:	4b36      	ldr	r3, [pc, #216]	; (800380c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003734:	6a1b      	ldr	r3, [r3, #32]
 8003736:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800373a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	2b00      	cmp	r3, #0
 8003740:	d02e      	beq.n	80037a0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	685b      	ldr	r3, [r3, #4]
 8003746:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800374a:	68fa      	ldr	r2, [r7, #12]
 800374c:	429a      	cmp	r2, r3
 800374e:	d027      	beq.n	80037a0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003750:	4b2e      	ldr	r3, [pc, #184]	; (800380c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003752:	6a1b      	ldr	r3, [r3, #32]
 8003754:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003758:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800375a:	4b2e      	ldr	r3, [pc, #184]	; (8003814 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800375c:	2201      	movs	r2, #1
 800375e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003760:	4b2c      	ldr	r3, [pc, #176]	; (8003814 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003762:	2200      	movs	r2, #0
 8003764:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003766:	4a29      	ldr	r2, [pc, #164]	; (800380c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	f003 0301 	and.w	r3, r3, #1
 8003772:	2b00      	cmp	r3, #0
 8003774:	d014      	beq.n	80037a0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003776:	f7fe fbd3 	bl	8001f20 <HAL_GetTick>
 800377a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800377c:	e00a      	b.n	8003794 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800377e:	f7fe fbcf 	bl	8001f20 <HAL_GetTick>
 8003782:	4602      	mov	r2, r0
 8003784:	693b      	ldr	r3, [r7, #16]
 8003786:	1ad3      	subs	r3, r2, r3
 8003788:	f241 3288 	movw	r2, #5000	; 0x1388
 800378c:	4293      	cmp	r3, r2
 800378e:	d901      	bls.n	8003794 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003790:	2303      	movs	r3, #3
 8003792:	e036      	b.n	8003802 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003794:	4b1d      	ldr	r3, [pc, #116]	; (800380c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003796:	6a1b      	ldr	r3, [r3, #32]
 8003798:	f003 0302 	and.w	r3, r3, #2
 800379c:	2b00      	cmp	r3, #0
 800379e:	d0ee      	beq.n	800377e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80037a0:	4b1a      	ldr	r3, [pc, #104]	; (800380c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037a2:	6a1b      	ldr	r3, [r3, #32]
 80037a4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	685b      	ldr	r3, [r3, #4]
 80037ac:	4917      	ldr	r1, [pc, #92]	; (800380c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037ae:	4313      	orrs	r3, r2
 80037b0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80037b2:	7dfb      	ldrb	r3, [r7, #23]
 80037b4:	2b01      	cmp	r3, #1
 80037b6:	d105      	bne.n	80037c4 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80037b8:	4b14      	ldr	r3, [pc, #80]	; (800380c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037ba:	69db      	ldr	r3, [r3, #28]
 80037bc:	4a13      	ldr	r2, [pc, #76]	; (800380c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037be:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80037c2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f003 0302 	and.w	r3, r3, #2
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d008      	beq.n	80037e2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80037d0:	4b0e      	ldr	r3, [pc, #56]	; (800380c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037d2:	685b      	ldr	r3, [r3, #4]
 80037d4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	689b      	ldr	r3, [r3, #8]
 80037dc:	490b      	ldr	r1, [pc, #44]	; (800380c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037de:	4313      	orrs	r3, r2
 80037e0:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f003 0310 	and.w	r3, r3, #16
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d008      	beq.n	8003800 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80037ee:	4b07      	ldr	r3, [pc, #28]	; (800380c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037f0:	685b      	ldr	r3, [r3, #4]
 80037f2:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	68db      	ldr	r3, [r3, #12]
 80037fa:	4904      	ldr	r1, [pc, #16]	; (800380c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037fc:	4313      	orrs	r3, r2
 80037fe:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003800:	2300      	movs	r3, #0
}
 8003802:	4618      	mov	r0, r3
 8003804:	3718      	adds	r7, #24
 8003806:	46bd      	mov	sp, r7
 8003808:	bd80      	pop	{r7, pc}
 800380a:	bf00      	nop
 800380c:	40021000 	.word	0x40021000
 8003810:	40007000 	.word	0x40007000
 8003814:	42420440 	.word	0x42420440

08003818 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003818:	b590      	push	{r4, r7, lr}
 800381a:	b08d      	sub	sp, #52	; 0x34
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003820:	4b58      	ldr	r3, [pc, #352]	; (8003984 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 8003822:	f107 040c 	add.w	r4, r7, #12
 8003826:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003828:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800382c:	f240 2301 	movw	r3, #513	; 0x201
 8003830:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8003832:	2300      	movs	r3, #0
 8003834:	627b      	str	r3, [r7, #36]	; 0x24
 8003836:	2300      	movs	r3, #0
 8003838:	62fb      	str	r3, [r7, #44]	; 0x2c
 800383a:	2300      	movs	r3, #0
 800383c:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 800383e:	2300      	movs	r3, #0
 8003840:	61fb      	str	r3, [r7, #28]
 8003842:	2300      	movs	r3, #0
 8003844:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	2b10      	cmp	r3, #16
 800384a:	d00a      	beq.n	8003862 <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2b10      	cmp	r3, #16
 8003850:	f200 808e 	bhi.w	8003970 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2b01      	cmp	r3, #1
 8003858:	d049      	beq.n	80038ee <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2b02      	cmp	r3, #2
 800385e:	d079      	beq.n	8003954 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8003860:	e086      	b.n	8003970 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
      temp_reg = RCC->CFGR;
 8003862:	4b49      	ldr	r3, [pc, #292]	; (8003988 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8003864:	685b      	ldr	r3, [r3, #4]
 8003866:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8003868:	4b47      	ldr	r3, [pc, #284]	; (8003988 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003870:	2b00      	cmp	r3, #0
 8003872:	d07f      	beq.n	8003974 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003874:	69fb      	ldr	r3, [r7, #28]
 8003876:	0c9b      	lsrs	r3, r3, #18
 8003878:	f003 030f 	and.w	r3, r3, #15
 800387c:	3330      	adds	r3, #48	; 0x30
 800387e:	443b      	add	r3, r7
 8003880:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003884:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003886:	69fb      	ldr	r3, [r7, #28]
 8003888:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800388c:	2b00      	cmp	r3, #0
 800388e:	d017      	beq.n	80038c0 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003890:	4b3d      	ldr	r3, [pc, #244]	; (8003988 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8003892:	685b      	ldr	r3, [r3, #4]
 8003894:	0c5b      	lsrs	r3, r3, #17
 8003896:	f003 0301 	and.w	r3, r3, #1
 800389a:	3330      	adds	r3, #48	; 0x30
 800389c:	443b      	add	r3, r7
 800389e:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80038a2:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80038a4:	69fb      	ldr	r3, [r7, #28]
 80038a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d00d      	beq.n	80038ca <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80038ae:	4a37      	ldr	r2, [pc, #220]	; (800398c <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 80038b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038b2:	fbb2 f2f3 	udiv	r2, r2, r3
 80038b6:	6a3b      	ldr	r3, [r7, #32]
 80038b8:	fb02 f303 	mul.w	r3, r2, r3
 80038bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80038be:	e004      	b.n	80038ca <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80038c0:	6a3b      	ldr	r3, [r7, #32]
 80038c2:	4a33      	ldr	r2, [pc, #204]	; (8003990 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80038c4:	fb02 f303 	mul.w	r3, r2, r3
 80038c8:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80038ca:	4b2f      	ldr	r3, [pc, #188]	; (8003988 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80038cc:	685b      	ldr	r3, [r3, #4]
 80038ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038d2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80038d6:	d102      	bne.n	80038de <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
          frequency = pllclk;
 80038d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038da:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80038dc:	e04a      	b.n	8003974 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
          frequency = (pllclk * 2) / 3;
 80038de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038e0:	005b      	lsls	r3, r3, #1
 80038e2:	4a2c      	ldr	r2, [pc, #176]	; (8003994 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 80038e4:	fba2 2303 	umull	r2, r3, r2, r3
 80038e8:	085b      	lsrs	r3, r3, #1
 80038ea:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80038ec:	e042      	b.n	8003974 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
      temp_reg = RCC->BDCR;
 80038ee:	4b26      	ldr	r3, [pc, #152]	; (8003988 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80038f0:	6a1b      	ldr	r3, [r3, #32]
 80038f2:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80038f4:	69fb      	ldr	r3, [r7, #28]
 80038f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80038fe:	d108      	bne.n	8003912 <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
 8003900:	69fb      	ldr	r3, [r7, #28]
 8003902:	f003 0302 	and.w	r3, r3, #2
 8003906:	2b00      	cmp	r3, #0
 8003908:	d003      	beq.n	8003912 <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
        frequency = LSE_VALUE;
 800390a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800390e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003910:	e01f      	b.n	8003952 <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8003912:	69fb      	ldr	r3, [r7, #28]
 8003914:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003918:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800391c:	d109      	bne.n	8003932 <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
 800391e:	4b1a      	ldr	r3, [pc, #104]	; (8003988 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8003920:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003922:	f003 0302 	and.w	r3, r3, #2
 8003926:	2b00      	cmp	r3, #0
 8003928:	d003      	beq.n	8003932 <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
        frequency = LSI_VALUE;
 800392a:	f649 4340 	movw	r3, #40000	; 0x9c40
 800392e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003930:	e00f      	b.n	8003952 <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8003932:	69fb      	ldr	r3, [r7, #28]
 8003934:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003938:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800393c:	d11c      	bne.n	8003978 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 800393e:	4b12      	ldr	r3, [pc, #72]	; (8003988 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003946:	2b00      	cmp	r3, #0
 8003948:	d016      	beq.n	8003978 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
        frequency = HSE_VALUE / 128U;
 800394a:	f24f 4324 	movw	r3, #62500	; 0xf424
 800394e:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003950:	e012      	b.n	8003978 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 8003952:	e011      	b.n	8003978 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8003954:	f7ff fe78 	bl	8003648 <HAL_RCC_GetPCLK2Freq>
 8003958:	4602      	mov	r2, r0
 800395a:	4b0b      	ldr	r3, [pc, #44]	; (8003988 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 800395c:	685b      	ldr	r3, [r3, #4]
 800395e:	0b9b      	lsrs	r3, r3, #14
 8003960:	f003 0303 	and.w	r3, r3, #3
 8003964:	3301      	adds	r3, #1
 8003966:	005b      	lsls	r3, r3, #1
 8003968:	fbb2 f3f3 	udiv	r3, r2, r3
 800396c:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800396e:	e004      	b.n	800397a <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8003970:	bf00      	nop
 8003972:	e002      	b.n	800397a <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8003974:	bf00      	nop
 8003976:	e000      	b.n	800397a <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8003978:	bf00      	nop
    }
  }
  return (frequency);
 800397a:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 800397c:	4618      	mov	r0, r3
 800397e:	3734      	adds	r7, #52	; 0x34
 8003980:	46bd      	mov	sp, r7
 8003982:	bd90      	pop	{r4, r7, pc}
 8003984:	08008618 	.word	0x08008618
 8003988:	40021000 	.word	0x40021000
 800398c:	007a1200 	.word	0x007a1200
 8003990:	003d0900 	.word	0x003d0900
 8003994:	aaaaaaab 	.word	0xaaaaaaab

08003998 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003998:	b580      	push	{r7, lr}
 800399a:	b084      	sub	sp, #16
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 80039a0:	2300      	movs	r3, #0
 80039a2:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d101      	bne.n	80039ae <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80039aa:	2301      	movs	r3, #1
 80039ac:	e084      	b.n	8003ab8 <HAL_RTC_Init+0x120>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	7c5b      	ldrb	r3, [r3, #17]
 80039b2:	b2db      	uxtb	r3, r3
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d105      	bne.n	80039c4 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2200      	movs	r2, #0
 80039bc:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80039be:	6878      	ldr	r0, [r7, #4]
 80039c0:	f7fd ffa4 	bl	800190c <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2202      	movs	r2, #2
 80039c8:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80039ca:	6878      	ldr	r0, [r7, #4]
 80039cc:	f000 f9c8 	bl	8003d60 <HAL_RTC_WaitForSynchro>
 80039d0:	4603      	mov	r3, r0
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d004      	beq.n	80039e0 <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	2204      	movs	r2, #4
 80039da:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 80039dc:	2301      	movs	r3, #1
 80039de:	e06b      	b.n	8003ab8 <HAL_RTC_Init+0x120>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80039e0:	6878      	ldr	r0, [r7, #4]
 80039e2:	f000 fa81 	bl	8003ee8 <RTC_EnterInitMode>
 80039e6:	4603      	mov	r3, r0
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d004      	beq.n	80039f6 <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2204      	movs	r2, #4
 80039f0:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 80039f2:	2301      	movs	r3, #1
 80039f4:	e060      	b.n	8003ab8 <HAL_RTC_Init+0x120>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	685a      	ldr	r2, [r3, #4]
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f022 0207 	bic.w	r2, r2, #7
 8003a04:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	689b      	ldr	r3, [r3, #8]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d005      	beq.n	8003a1a <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 8003a0e:	4b2c      	ldr	r3, [pc, #176]	; (8003ac0 <HAL_RTC_Init+0x128>)
 8003a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a12:	4a2b      	ldr	r2, [pc, #172]	; (8003ac0 <HAL_RTC_Init+0x128>)
 8003a14:	f023 0301 	bic.w	r3, r3, #1
 8003a18:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 8003a1a:	4b29      	ldr	r3, [pc, #164]	; (8003ac0 <HAL_RTC_Init+0x128>)
 8003a1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a1e:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	689b      	ldr	r3, [r3, #8]
 8003a26:	4926      	ldr	r1, [pc, #152]	; (8003ac0 <HAL_RTC_Init+0x128>)
 8003a28:	4313      	orrs	r3, r2
 8003a2a:	62cb      	str	r3, [r1, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	685b      	ldr	r3, [r3, #4]
 8003a30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a34:	d003      	beq.n	8003a3e <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	685b      	ldr	r3, [r3, #4]
 8003a3a:	60fb      	str	r3, [r7, #12]
 8003a3c:	e00e      	b.n	8003a5c <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 8003a3e:	2001      	movs	r0, #1
 8003a40:	f7ff feea 	bl	8003818 <HAL_RCCEx_GetPeriphCLKFreq>
 8003a44:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d104      	bne.n	8003a56 <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2204      	movs	r2, #4
 8003a50:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 8003a52:	2301      	movs	r3, #1
 8003a54:	e030      	b.n	8003ab8 <HAL_RTC_Init+0x120>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	3b01      	subs	r3, #1
 8003a5a:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    MODIFY_REG(hrtc->Instance->PRLH, RTC_PRLH_PRL, (prescaler >> 16U));
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	689b      	ldr	r3, [r3, #8]
 8003a62:	f023 010f 	bic.w	r1, r3, #15
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	0c1a      	lsrs	r2, r3, #16
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	430a      	orrs	r2, r1
 8003a70:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hrtc->Instance->PRLL, RTC_PRLL_PRL, (prescaler & RTC_PRLL_PRL));
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	68db      	ldr	r3, [r3, #12]
 8003a78:	0c1b      	lsrs	r3, r3, #16
 8003a7a:	041b      	lsls	r3, r3, #16
 8003a7c:	68fa      	ldr	r2, [r7, #12]
 8003a7e:	b291      	uxth	r1, r2
 8003a80:	687a      	ldr	r2, [r7, #4]
 8003a82:	6812      	ldr	r2, [r2, #0]
 8003a84:	430b      	orrs	r3, r1
 8003a86:	60d3      	str	r3, [r2, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8003a88:	6878      	ldr	r0, [r7, #4]
 8003a8a:	f000 fa55 	bl	8003f38 <RTC_ExitInitMode>
 8003a8e:	4603      	mov	r3, r0
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d004      	beq.n	8003a9e <HAL_RTC_Init+0x106>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2204      	movs	r2, #4
 8003a98:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 8003a9a:	2301      	movs	r3, #1
 8003a9c:	e00c      	b.n	8003ab8 <HAL_RTC_Init+0x120>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2201      	movs	r2, #1
 8003aa8:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	2201      	movs	r2, #1
 8003aae:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2201      	movs	r2, #1
 8003ab4:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 8003ab6:	2300      	movs	r3, #0
  }
}
 8003ab8:	4618      	mov	r0, r3
 8003aba:	3710      	adds	r7, #16
 8003abc:	46bd      	mov	sp, r7
 8003abe:	bd80      	pop	{r7, pc}
 8003ac0:	40006c00 	.word	0x40006c00

08003ac4 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003ac4:	b590      	push	{r4, r7, lr}
 8003ac6:	b087      	sub	sp, #28
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	60f8      	str	r0, [r7, #12]
 8003acc:	60b9      	str	r1, [r7, #8]
 8003ace:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U;
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	617b      	str	r3, [r7, #20]
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d002      	beq.n	8003ae4 <HAL_RTC_SetTime+0x20>
 8003ade:	68bb      	ldr	r3, [r7, #8]
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d101      	bne.n	8003ae8 <HAL_RTC_SetTime+0x24>
  {
    return HAL_ERROR;
 8003ae4:	2301      	movs	r3, #1
 8003ae6:	e080      	b.n	8003bea <HAL_RTC_SetTime+0x126>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	7c1b      	ldrb	r3, [r3, #16]
 8003aec:	2b01      	cmp	r3, #1
 8003aee:	d101      	bne.n	8003af4 <HAL_RTC_SetTime+0x30>
 8003af0:	2302      	movs	r3, #2
 8003af2:	e07a      	b.n	8003bea <HAL_RTC_SetTime+0x126>
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	2201      	movs	r2, #1
 8003af8:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	2202      	movs	r2, #2
 8003afe:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d113      	bne.n	8003b2e <HAL_RTC_SetTime+0x6a>
  {
    assert_param(IS_RTC_HOUR24(sTime->Hours));
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8003b06:	68bb      	ldr	r3, [r7, #8]
 8003b08:	781b      	ldrb	r3, [r3, #0]
 8003b0a:	461a      	mov	r2, r3
 8003b0c:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8003b10:	fb03 f202 	mul.w	r2, r3, r2
                              ((uint32_t)sTime->Minutes * 60U) + \
 8003b14:	68bb      	ldr	r3, [r7, #8]
 8003b16:	785b      	ldrb	r3, [r3, #1]
 8003b18:	4619      	mov	r1, r3
 8003b1a:	460b      	mov	r3, r1
 8003b1c:	011b      	lsls	r3, r3, #4
 8003b1e:	1a5b      	subs	r3, r3, r1
 8003b20:	009b      	lsls	r3, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8003b22:	4413      	add	r3, r2
                              ((uint32_t)sTime->Seconds));
 8003b24:	68ba      	ldr	r2, [r7, #8]
 8003b26:	7892      	ldrb	r2, [r2, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8003b28:	4413      	add	r3, r2
 8003b2a:	617b      	str	r3, [r7, #20]
 8003b2c:	e01e      	b.n	8003b6c <HAL_RTC_SetTime+0xa8>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));

    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8003b2e:	68bb      	ldr	r3, [r7, #8]
 8003b30:	781b      	ldrb	r3, [r3, #0]
 8003b32:	4618      	mov	r0, r3
 8003b34:	f000 fa28 	bl	8003f88 <RTC_Bcd2ToByte>
 8003b38:	4603      	mov	r3, r0
 8003b3a:	461a      	mov	r2, r3
 8003b3c:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8003b40:	fb03 f402 	mul.w	r4, r3, r2
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 8003b44:	68bb      	ldr	r3, [r7, #8]
 8003b46:	785b      	ldrb	r3, [r3, #1]
 8003b48:	4618      	mov	r0, r3
 8003b4a:	f000 fa1d 	bl	8003f88 <RTC_Bcd2ToByte>
 8003b4e:	4603      	mov	r3, r0
 8003b50:	461a      	mov	r2, r3
 8003b52:	4613      	mov	r3, r2
 8003b54:	011b      	lsls	r3, r3, #4
 8003b56:	1a9b      	subs	r3, r3, r2
 8003b58:	009b      	lsls	r3, r3, #2
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8003b5a:	441c      	add	r4, r3
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 8003b5c:	68bb      	ldr	r3, [r7, #8]
 8003b5e:	789b      	ldrb	r3, [r3, #2]
 8003b60:	4618      	mov	r0, r3
 8003b62:	f000 fa11 	bl	8003f88 <RTC_Bcd2ToByte>
 8003b66:	4603      	mov	r3, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8003b68:	4423      	add	r3, r4
 8003b6a:	617b      	str	r3, [r7, #20]
  }

  /* Write time counter in RTC registers */
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8003b6c:	6979      	ldr	r1, [r7, #20]
 8003b6e:	68f8      	ldr	r0, [r7, #12]
 8003b70:	f000 f953 	bl	8003e1a <RTC_WriteTimeCounter>
 8003b74:	4603      	mov	r3, r0
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d007      	beq.n	8003b8a <HAL_RTC_SetTime+0xc6>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	2204      	movs	r2, #4
 8003b7e:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	2200      	movs	r2, #0
 8003b84:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 8003b86:	2301      	movs	r3, #1
 8003b88:	e02f      	b.n	8003bea <HAL_RTC_SetTime+0x126>
  }
  else
  {
    /* Clear Second and overflow flags */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	685a      	ldr	r2, [r3, #4]
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f022 0205 	bic.w	r2, r2, #5
 8003b98:	605a      	str	r2, [r3, #4]

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8003b9a:	68f8      	ldr	r0, [r7, #12]
 8003b9c:	f000 f964 	bl	8003e68 <RTC_ReadAlarmCounter>
 8003ba0:	6138      	str	r0, [r7, #16]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8003ba2:	693b      	ldr	r3, [r7, #16]
 8003ba4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ba8:	d018      	beq.n	8003bdc <HAL_RTC_SetTime+0x118>
    {
      if (counter_alarm < counter_time)
 8003baa:	693a      	ldr	r2, [r7, #16]
 8003bac:	697b      	ldr	r3, [r7, #20]
 8003bae:	429a      	cmp	r2, r3
 8003bb0:	d214      	bcs.n	8003bdc <HAL_RTC_SetTime+0x118>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8003bb2:	693b      	ldr	r3, [r7, #16]
 8003bb4:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8003bb8:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8003bbc:	613b      	str	r3, [r7, #16]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8003bbe:	6939      	ldr	r1, [r7, #16]
 8003bc0:	68f8      	ldr	r0, [r7, #12]
 8003bc2:	f000 f96a 	bl	8003e9a <RTC_WriteAlarmCounter>
 8003bc6:	4603      	mov	r3, r0
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d007      	beq.n	8003bdc <HAL_RTC_SetTime+0x118>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	2204      	movs	r2, #4
 8003bd0:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8003bd8:	2301      	movs	r3, #1
 8003bda:	e006      	b.n	8003bea <HAL_RTC_SetTime+0x126>
        }
      }
    }

    hrtc->State = HAL_RTC_STATE_READY;
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	2201      	movs	r2, #1
 8003be0:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	2200      	movs	r2, #0
 8003be6:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 8003be8:	2300      	movs	r3, #0
  }
}
 8003bea:	4618      	mov	r0, r3
 8003bec:	371c      	adds	r7, #28
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	bd90      	pop	{r4, r7, pc}
	...

08003bf4 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b088      	sub	sp, #32
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	60f8      	str	r0, [r7, #12]
 8003bfc:	60b9      	str	r1, [r7, #8]
 8003bfe:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, hours = 0U;
 8003c00:	2300      	movs	r3, #0
 8003c02:	61fb      	str	r3, [r7, #28]
 8003c04:	2300      	movs	r3, #0
 8003c06:	61bb      	str	r3, [r7, #24]
 8003c08:	2300      	movs	r3, #0
 8003c0a:	617b      	str	r3, [r7, #20]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d002      	beq.n	8003c18 <HAL_RTC_SetDate+0x24>
 8003c12:	68bb      	ldr	r3, [r7, #8]
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d101      	bne.n	8003c1c <HAL_RTC_SetDate+0x28>
  {
    return HAL_ERROR;
 8003c18:	2301      	movs	r3, #1
 8003c1a:	e097      	b.n	8003d4c <HAL_RTC_SetDate+0x158>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	7c1b      	ldrb	r3, [r3, #16]
 8003c20:	2b01      	cmp	r3, #1
 8003c22:	d101      	bne.n	8003c28 <HAL_RTC_SetDate+0x34>
 8003c24:	2302      	movs	r3, #2
 8003c26:	e091      	b.n	8003d4c <HAL_RTC_SetDate+0x158>
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	2201      	movs	r2, #1
 8003c2c:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	2202      	movs	r2, #2
 8003c32:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d10c      	bne.n	8003c54 <HAL_RTC_SetDate+0x60>
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = sDate->Year;
 8003c3a:	68bb      	ldr	r3, [r7, #8]
 8003c3c:	78da      	ldrb	r2, [r3, #3]
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 8003c42:	68bb      	ldr	r3, [r7, #8]
 8003c44:	785a      	ldrb	r2, [r3, #1]
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 8003c4a:	68bb      	ldr	r3, [r7, #8]
 8003c4c:	789a      	ldrb	r2, [r3, #2]
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	739a      	strb	r2, [r3, #14]
 8003c52:	e01a      	b.n	8003c8a <HAL_RTC_SetDate+0x96>
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 8003c54:	68bb      	ldr	r3, [r7, #8]
 8003c56:	78db      	ldrb	r3, [r3, #3]
 8003c58:	4618      	mov	r0, r3
 8003c5a:	f000 f995 	bl	8003f88 <RTC_Bcd2ToByte>
 8003c5e:	4603      	mov	r3, r0
 8003c60:	461a      	mov	r2, r3
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 8003c66:	68bb      	ldr	r3, [r7, #8]
 8003c68:	785b      	ldrb	r3, [r3, #1]
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	f000 f98c 	bl	8003f88 <RTC_Bcd2ToByte>
 8003c70:	4603      	mov	r3, r0
 8003c72:	461a      	mov	r2, r3
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 8003c78:	68bb      	ldr	r3, [r7, #8]
 8003c7a:	789b      	ldrb	r3, [r3, #2]
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	f000 f983 	bl	8003f88 <RTC_Bcd2ToByte>
 8003c82:	4603      	mov	r3, r0
 8003c84:	461a      	mov	r2, r3
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	739a      	strb	r2, [r3, #14]
  }

  /* WeekDay set by user can be ignored because automatically calculated */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	7bdb      	ldrb	r3, [r3, #15]
 8003c8e:	4618      	mov	r0, r3
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	7b59      	ldrb	r1, [r3, #13]
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	7b9b      	ldrb	r3, [r3, #14]
 8003c98:	461a      	mov	r2, r3
 8003c9a:	f000 f993 	bl	8003fc4 <RTC_WeekDayNum>
 8003c9e:	4603      	mov	r3, r0
 8003ca0:	461a      	mov	r2, r3
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	731a      	strb	r2, [r3, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	7b1a      	ldrb	r2, [r3, #12]
 8003caa:	68bb      	ldr	r3, [r7, #8]
 8003cac:	701a      	strb	r2, [r3, #0]

  /* Reset time to be aligned on the same day */
  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 8003cae:	68f8      	ldr	r0, [r7, #12]
 8003cb0:	f000 f883 	bl	8003dba <RTC_ReadTimeCounter>
 8003cb4:	61f8      	str	r0, [r7, #28]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 8003cb6:	69fb      	ldr	r3, [r7, #28]
 8003cb8:	4a26      	ldr	r2, [pc, #152]	; (8003d54 <HAL_RTC_SetDate+0x160>)
 8003cba:	fba2 2303 	umull	r2, r3, r2, r3
 8003cbe:	0adb      	lsrs	r3, r3, #11
 8003cc0:	617b      	str	r3, [r7, #20]
  if (hours > 24U)
 8003cc2:	697b      	ldr	r3, [r7, #20]
 8003cc4:	2b18      	cmp	r3, #24
 8003cc6:	d93a      	bls.n	8003d3e <HAL_RTC_SetDate+0x14a>
  {
    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= ((hours / 24U) * 24U * 3600U);
 8003cc8:	697b      	ldr	r3, [r7, #20]
 8003cca:	4a23      	ldr	r2, [pc, #140]	; (8003d58 <HAL_RTC_SetDate+0x164>)
 8003ccc:	fba2 2303 	umull	r2, r3, r2, r3
 8003cd0:	091b      	lsrs	r3, r3, #4
 8003cd2:	4a22      	ldr	r2, [pc, #136]	; (8003d5c <HAL_RTC_SetDate+0x168>)
 8003cd4:	fb02 f303 	mul.w	r3, r2, r3
 8003cd8:	69fa      	ldr	r2, [r7, #28]
 8003cda:	1ad3      	subs	r3, r2, r3
 8003cdc:	61fb      	str	r3, [r7, #28]
    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8003cde:	69f9      	ldr	r1, [r7, #28]
 8003ce0:	68f8      	ldr	r0, [r7, #12]
 8003ce2:	f000 f89a 	bl	8003e1a <RTC_WriteTimeCounter>
 8003ce6:	4603      	mov	r3, r0
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d007      	beq.n	8003cfc <HAL_RTC_SetDate+0x108>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	2204      	movs	r2, #4
 8003cf0:	745a      	strb	r2, [r3, #17]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	741a      	strb	r2, [r3, #16]

      return HAL_ERROR;
 8003cf8:	2301      	movs	r3, #1
 8003cfa:	e027      	b.n	8003d4c <HAL_RTC_SetDate+0x158>
    }

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8003cfc:	68f8      	ldr	r0, [r7, #12]
 8003cfe:	f000 f8b3 	bl	8003e68 <RTC_ReadAlarmCounter>
 8003d02:	61b8      	str	r0, [r7, #24]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8003d04:	69bb      	ldr	r3, [r7, #24]
 8003d06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d0a:	d018      	beq.n	8003d3e <HAL_RTC_SetDate+0x14a>
    {
      if (counter_alarm < counter_time)
 8003d0c:	69ba      	ldr	r2, [r7, #24]
 8003d0e:	69fb      	ldr	r3, [r7, #28]
 8003d10:	429a      	cmp	r2, r3
 8003d12:	d214      	bcs.n	8003d3e <HAL_RTC_SetDate+0x14a>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8003d14:	69bb      	ldr	r3, [r7, #24]
 8003d16:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8003d1a:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8003d1e:	61bb      	str	r3, [r7, #24]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8003d20:	69b9      	ldr	r1, [r7, #24]
 8003d22:	68f8      	ldr	r0, [r7, #12]
 8003d24:	f000 f8b9 	bl	8003e9a <RTC_WriteAlarmCounter>
 8003d28:	4603      	mov	r3, r0
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d007      	beq.n	8003d3e <HAL_RTC_SetDate+0x14a>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	2204      	movs	r2, #4
 8003d32:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	2200      	movs	r2, #0
 8003d38:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8003d3a:	2301      	movs	r3, #1
 8003d3c:	e006      	b.n	8003d4c <HAL_RTC_SetDate+0x158>
    }


  }

  hrtc->State = HAL_RTC_STATE_READY ;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	2201      	movs	r2, #1
 8003d42:	745a      	strb	r2, [r3, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	2200      	movs	r2, #0
 8003d48:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8003d4a:	2300      	movs	r3, #0
}
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	3720      	adds	r7, #32
 8003d50:	46bd      	mov	sp, r7
 8003d52:	bd80      	pop	{r7, pc}
 8003d54:	91a2b3c5 	.word	0x91a2b3c5
 8003d58:	aaaaaaab 	.word	0xaaaaaaab
 8003d5c:	00015180 	.word	0x00015180

08003d60 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b084      	sub	sp, #16
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003d68:	2300      	movs	r3, #0
 8003d6a:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d101      	bne.n	8003d76 <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 8003d72:	2301      	movs	r3, #1
 8003d74:	e01d      	b.n	8003db2 <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	685a      	ldr	r2, [r3, #4]
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f022 0208 	bic.w	r2, r2, #8
 8003d84:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8003d86:	f7fe f8cb 	bl	8001f20 <HAL_GetTick>
 8003d8a:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8003d8c:	e009      	b.n	8003da2 <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8003d8e:	f7fe f8c7 	bl	8001f20 <HAL_GetTick>
 8003d92:	4602      	mov	r2, r0
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	1ad3      	subs	r3, r2, r3
 8003d98:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003d9c:	d901      	bls.n	8003da2 <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 8003d9e:	2303      	movs	r3, #3
 8003da0:	e007      	b.n	8003db2 <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	685b      	ldr	r3, [r3, #4]
 8003da8:	f003 0308 	and.w	r3, r3, #8
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d0ee      	beq.n	8003d8e <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 8003db0:	2300      	movs	r3, #0
}
 8003db2:	4618      	mov	r0, r3
 8003db4:	3710      	adds	r7, #16
 8003db6:	46bd      	mov	sp, r7
 8003db8:	bd80      	pop	{r7, pc}

08003dba <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 8003dba:	b480      	push	{r7}
 8003dbc:	b087      	sub	sp, #28
 8003dbe:	af00      	add	r7, sp, #0
 8003dc0:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 8003dc2:	2300      	movs	r3, #0
 8003dc4:	827b      	strh	r3, [r7, #18]
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	823b      	strh	r3, [r7, #16]
 8003dca:	2300      	movs	r3, #0
 8003dcc:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 8003dce:	2300      	movs	r3, #0
 8003dd0:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	699b      	ldr	r3, [r3, #24]
 8003dd8:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	69db      	ldr	r3, [r3, #28]
 8003de0:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	699b      	ldr	r3, [r3, #24]
 8003de8:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 8003dea:	8a7a      	ldrh	r2, [r7, #18]
 8003dec:	8a3b      	ldrh	r3, [r7, #16]
 8003dee:	429a      	cmp	r2, r3
 8003df0:	d008      	beq.n	8003e04 <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 8003df2:	8a3b      	ldrh	r3, [r7, #16]
 8003df4:	041a      	lsls	r2, r3, #16
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	69db      	ldr	r3, [r3, #28]
 8003dfc:	b29b      	uxth	r3, r3
 8003dfe:	4313      	orrs	r3, r2
 8003e00:	617b      	str	r3, [r7, #20]
 8003e02:	e004      	b.n	8003e0e <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 8003e04:	8a7b      	ldrh	r3, [r7, #18]
 8003e06:	041a      	lsls	r2, r3, #16
 8003e08:	89fb      	ldrh	r3, [r7, #14]
 8003e0a:	4313      	orrs	r3, r2
 8003e0c:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 8003e0e:	697b      	ldr	r3, [r7, #20]
}
 8003e10:	4618      	mov	r0, r3
 8003e12:	371c      	adds	r7, #28
 8003e14:	46bd      	mov	sp, r7
 8003e16:	bc80      	pop	{r7}
 8003e18:	4770      	bx	lr

08003e1a <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 8003e1a:	b580      	push	{r7, lr}
 8003e1c:	b084      	sub	sp, #16
 8003e1e:	af00      	add	r7, sp, #0
 8003e20:	6078      	str	r0, [r7, #4]
 8003e22:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003e24:	2300      	movs	r3, #0
 8003e26:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8003e28:	6878      	ldr	r0, [r7, #4]
 8003e2a:	f000 f85d 	bl	8003ee8 <RTC_EnterInitMode>
 8003e2e:	4603      	mov	r3, r0
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d002      	beq.n	8003e3a <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 8003e34:	2301      	movs	r3, #1
 8003e36:	73fb      	strb	r3, [r7, #15]
 8003e38:	e011      	b.n	8003e5e <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	683a      	ldr	r2, [r7, #0]
 8003e40:	0c12      	lsrs	r2, r2, #16
 8003e42:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	683a      	ldr	r2, [r7, #0]
 8003e4a:	b292      	uxth	r2, r2
 8003e4c:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8003e4e:	6878      	ldr	r0, [r7, #4]
 8003e50:	f000 f872 	bl	8003f38 <RTC_ExitInitMode>
 8003e54:	4603      	mov	r3, r0
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d001      	beq.n	8003e5e <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 8003e5a:	2301      	movs	r3, #1
 8003e5c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8003e5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e60:	4618      	mov	r0, r3
 8003e62:	3710      	adds	r7, #16
 8003e64:	46bd      	mov	sp, r7
 8003e66:	bd80      	pop	{r7, pc}

08003e68 <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 8003e68:	b480      	push	{r7}
 8003e6a:	b085      	sub	sp, #20
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 8003e70:	2300      	movs	r3, #0
 8003e72:	81fb      	strh	r3, [r7, #14]
 8003e74:	2300      	movs	r3, #0
 8003e76:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	6a1b      	ldr	r3, [r3, #32]
 8003e7e:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e86:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 8003e88:	89fb      	ldrh	r3, [r7, #14]
 8003e8a:	041a      	lsls	r2, r3, #16
 8003e8c:	89bb      	ldrh	r3, [r7, #12]
 8003e8e:	4313      	orrs	r3, r2
}
 8003e90:	4618      	mov	r0, r3
 8003e92:	3714      	adds	r7, #20
 8003e94:	46bd      	mov	sp, r7
 8003e96:	bc80      	pop	{r7}
 8003e98:	4770      	bx	lr

08003e9a <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 8003e9a:	b580      	push	{r7, lr}
 8003e9c:	b084      	sub	sp, #16
 8003e9e:	af00      	add	r7, sp, #0
 8003ea0:	6078      	str	r0, [r7, #4]
 8003ea2:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003ea4:	2300      	movs	r3, #0
 8003ea6:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8003ea8:	6878      	ldr	r0, [r7, #4]
 8003eaa:	f000 f81d 	bl	8003ee8 <RTC_EnterInitMode>
 8003eae:	4603      	mov	r3, r0
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d002      	beq.n	8003eba <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 8003eb4:	2301      	movs	r3, #1
 8003eb6:	73fb      	strb	r3, [r7, #15]
 8003eb8:	e011      	b.n	8003ede <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	683a      	ldr	r2, [r7, #0]
 8003ec0:	0c12      	lsrs	r2, r2, #16
 8003ec2:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	683a      	ldr	r2, [r7, #0]
 8003eca:	b292      	uxth	r2, r2
 8003ecc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8003ece:	6878      	ldr	r0, [r7, #4]
 8003ed0:	f000 f832 	bl	8003f38 <RTC_ExitInitMode>
 8003ed4:	4603      	mov	r3, r0
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d001      	beq.n	8003ede <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 8003eda:	2301      	movs	r3, #1
 8003edc:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8003ede:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	3710      	adds	r7, #16
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	bd80      	pop	{r7, pc}

08003ee8 <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	b084      	sub	sp, #16
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003ef0:	2300      	movs	r3, #0
 8003ef2:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 8003ef4:	f7fe f814 	bl	8001f20 <HAL_GetTick>
 8003ef8:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8003efa:	e009      	b.n	8003f10 <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8003efc:	f7fe f810 	bl	8001f20 <HAL_GetTick>
 8003f00:	4602      	mov	r2, r0
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	1ad3      	subs	r3, r2, r3
 8003f06:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003f0a:	d901      	bls.n	8003f10 <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 8003f0c:	2303      	movs	r3, #3
 8003f0e:	e00f      	b.n	8003f30 <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	685b      	ldr	r3, [r3, #4]
 8003f16:	f003 0320 	and.w	r3, r3, #32
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d0ee      	beq.n	8003efc <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	685a      	ldr	r2, [r3, #4]
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f042 0210 	orr.w	r2, r2, #16
 8003f2c:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 8003f2e:	2300      	movs	r3, #0
}
 8003f30:	4618      	mov	r0, r3
 8003f32:	3710      	adds	r7, #16
 8003f34:	46bd      	mov	sp, r7
 8003f36:	bd80      	pop	{r7, pc}

08003f38 <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b084      	sub	sp, #16
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003f40:	2300      	movs	r3, #0
 8003f42:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	685a      	ldr	r2, [r3, #4]
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f022 0210 	bic.w	r2, r2, #16
 8003f52:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8003f54:	f7fd ffe4 	bl	8001f20 <HAL_GetTick>
 8003f58:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8003f5a:	e009      	b.n	8003f70 <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8003f5c:	f7fd ffe0 	bl	8001f20 <HAL_GetTick>
 8003f60:	4602      	mov	r2, r0
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	1ad3      	subs	r3, r2, r3
 8003f66:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003f6a:	d901      	bls.n	8003f70 <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 8003f6c:	2303      	movs	r3, #3
 8003f6e:	e007      	b.n	8003f80 <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	685b      	ldr	r3, [r3, #4]
 8003f76:	f003 0320 	and.w	r3, r3, #32
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d0ee      	beq.n	8003f5c <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 8003f7e:	2300      	movs	r3, #0
}
 8003f80:	4618      	mov	r0, r3
 8003f82:	3710      	adds	r7, #16
 8003f84:	46bd      	mov	sp, r7
 8003f86:	bd80      	pop	{r7, pc}

08003f88 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8003f88:	b480      	push	{r7}
 8003f8a:	b085      	sub	sp, #20
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	4603      	mov	r3, r0
 8003f90:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8003f92:	2300      	movs	r3, #0
 8003f94:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 8003f96:	79fb      	ldrb	r3, [r7, #7]
 8003f98:	091b      	lsrs	r3, r3, #4
 8003f9a:	b2db      	uxtb	r3, r3
 8003f9c:	461a      	mov	r2, r3
 8003f9e:	4613      	mov	r3, r2
 8003fa0:	009b      	lsls	r3, r3, #2
 8003fa2:	4413      	add	r3, r2
 8003fa4:	005b      	lsls	r3, r3, #1
 8003fa6:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8003fa8:	79fb      	ldrb	r3, [r7, #7]
 8003faa:	f003 030f 	and.w	r3, r3, #15
 8003fae:	b2da      	uxtb	r2, r3
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	b2db      	uxtb	r3, r3
 8003fb4:	4413      	add	r3, r2
 8003fb6:	b2db      	uxtb	r3, r3
}
 8003fb8:	4618      	mov	r0, r3
 8003fba:	3714      	adds	r7, #20
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	bc80      	pop	{r7}
 8003fc0:	4770      	bx	lr
	...

08003fc4 <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 8003fc4:	b480      	push	{r7}
 8003fc6:	b085      	sub	sp, #20
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
 8003fcc:	460b      	mov	r3, r1
 8003fce:	70fb      	strb	r3, [r7, #3]
 8003fd0:	4613      	mov	r3, r2
 8003fd2:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 8003fd4:	2300      	movs	r3, #0
 8003fd6:	60bb      	str	r3, [r7, #8]
 8003fd8:	2300      	movs	r3, #0
 8003fda:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8003fe2:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 8003fe4:	78fb      	ldrb	r3, [r7, #3]
 8003fe6:	2b02      	cmp	r3, #2
 8003fe8:	d82d      	bhi.n	8004046 <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 8003fea:	78fa      	ldrb	r2, [r7, #3]
 8003fec:	4613      	mov	r3, r2
 8003fee:	005b      	lsls	r3, r3, #1
 8003ff0:	4413      	add	r3, r2
 8003ff2:	00db      	lsls	r3, r3, #3
 8003ff4:	1a9b      	subs	r3, r3, r2
 8003ff6:	4a2c      	ldr	r2, [pc, #176]	; (80040a8 <RTC_WeekDayNum+0xe4>)
 8003ff8:	fba2 2303 	umull	r2, r3, r2, r3
 8003ffc:	085a      	lsrs	r2, r3, #1
 8003ffe:	78bb      	ldrb	r3, [r7, #2]
 8004000:	441a      	add	r2, r3
 8004002:	68bb      	ldr	r3, [r7, #8]
 8004004:	441a      	add	r2, r3
 8004006:	68bb      	ldr	r3, [r7, #8]
 8004008:	3b01      	subs	r3, #1
 800400a:	089b      	lsrs	r3, r3, #2
 800400c:	441a      	add	r2, r3
 800400e:	68bb      	ldr	r3, [r7, #8]
 8004010:	3b01      	subs	r3, #1
 8004012:	4926      	ldr	r1, [pc, #152]	; (80040ac <RTC_WeekDayNum+0xe8>)
 8004014:	fba1 1303 	umull	r1, r3, r1, r3
 8004018:	095b      	lsrs	r3, r3, #5
 800401a:	1ad2      	subs	r2, r2, r3
 800401c:	68bb      	ldr	r3, [r7, #8]
 800401e:	3b01      	subs	r3, #1
 8004020:	4922      	ldr	r1, [pc, #136]	; (80040ac <RTC_WeekDayNum+0xe8>)
 8004022:	fba1 1303 	umull	r1, r3, r1, r3
 8004026:	09db      	lsrs	r3, r3, #7
 8004028:	4413      	add	r3, r2
 800402a:	1d1a      	adds	r2, r3, #4
 800402c:	4b20      	ldr	r3, [pc, #128]	; (80040b0 <RTC_WeekDayNum+0xec>)
 800402e:	fba3 1302 	umull	r1, r3, r3, r2
 8004032:	1ad1      	subs	r1, r2, r3
 8004034:	0849      	lsrs	r1, r1, #1
 8004036:	440b      	add	r3, r1
 8004038:	0899      	lsrs	r1, r3, #2
 800403a:	460b      	mov	r3, r1
 800403c:	00db      	lsls	r3, r3, #3
 800403e:	1a5b      	subs	r3, r3, r1
 8004040:	1ad3      	subs	r3, r2, r3
 8004042:	60fb      	str	r3, [r7, #12]
 8004044:	e029      	b.n	800409a <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 8004046:	78fa      	ldrb	r2, [r7, #3]
 8004048:	4613      	mov	r3, r2
 800404a:	005b      	lsls	r3, r3, #1
 800404c:	4413      	add	r3, r2
 800404e:	00db      	lsls	r3, r3, #3
 8004050:	1a9b      	subs	r3, r3, r2
 8004052:	4a15      	ldr	r2, [pc, #84]	; (80040a8 <RTC_WeekDayNum+0xe4>)
 8004054:	fba2 2303 	umull	r2, r3, r2, r3
 8004058:	085a      	lsrs	r2, r3, #1
 800405a:	78bb      	ldrb	r3, [r7, #2]
 800405c:	441a      	add	r2, r3
 800405e:	68bb      	ldr	r3, [r7, #8]
 8004060:	441a      	add	r2, r3
 8004062:	68bb      	ldr	r3, [r7, #8]
 8004064:	089b      	lsrs	r3, r3, #2
 8004066:	441a      	add	r2, r3
 8004068:	68bb      	ldr	r3, [r7, #8]
 800406a:	4910      	ldr	r1, [pc, #64]	; (80040ac <RTC_WeekDayNum+0xe8>)
 800406c:	fba1 1303 	umull	r1, r3, r1, r3
 8004070:	095b      	lsrs	r3, r3, #5
 8004072:	1ad2      	subs	r2, r2, r3
 8004074:	68bb      	ldr	r3, [r7, #8]
 8004076:	490d      	ldr	r1, [pc, #52]	; (80040ac <RTC_WeekDayNum+0xe8>)
 8004078:	fba1 1303 	umull	r1, r3, r1, r3
 800407c:	09db      	lsrs	r3, r3, #7
 800407e:	4413      	add	r3, r2
 8004080:	1c9a      	adds	r2, r3, #2
 8004082:	4b0b      	ldr	r3, [pc, #44]	; (80040b0 <RTC_WeekDayNum+0xec>)
 8004084:	fba3 1302 	umull	r1, r3, r3, r2
 8004088:	1ad1      	subs	r1, r2, r3
 800408a:	0849      	lsrs	r1, r1, #1
 800408c:	440b      	add	r3, r1
 800408e:	0899      	lsrs	r1, r3, #2
 8004090:	460b      	mov	r3, r1
 8004092:	00db      	lsls	r3, r3, #3
 8004094:	1a5b      	subs	r3, r3, r1
 8004096:	1ad3      	subs	r3, r2, r3
 8004098:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	b2db      	uxtb	r3, r3
}
 800409e:	4618      	mov	r0, r3
 80040a0:	3714      	adds	r7, #20
 80040a2:	46bd      	mov	sp, r7
 80040a4:	bc80      	pop	{r7}
 80040a6:	4770      	bx	lr
 80040a8:	38e38e39 	.word	0x38e38e39
 80040ac:	51eb851f 	.word	0x51eb851f
 80040b0:	24924925 	.word	0x24924925

080040b4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80040b4:	b580      	push	{r7, lr}
 80040b6:	b082      	sub	sp, #8
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d101      	bne.n	80040c6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80040c2:	2301      	movs	r3, #1
 80040c4:	e076      	b.n	80041b4 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d108      	bne.n	80040e0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	685b      	ldr	r3, [r3, #4]
 80040d2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80040d6:	d009      	beq.n	80040ec <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2200      	movs	r2, #0
 80040dc:	61da      	str	r2, [r3, #28]
 80040de:	e005      	b.n	80040ec <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2200      	movs	r2, #0
 80040e4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	2200      	movs	r2, #0
 80040ea:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2200      	movs	r2, #0
 80040f0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80040f8:	b2db      	uxtb	r3, r3
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d106      	bne.n	800410c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	2200      	movs	r2, #0
 8004102:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004106:	6878      	ldr	r0, [r7, #4]
 8004108:	f7fd fc24 	bl	8001954 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2202      	movs	r2, #2
 8004110:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	681a      	ldr	r2, [r3, #0]
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004122:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	685b      	ldr	r3, [r3, #4]
 8004128:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	689b      	ldr	r3, [r3, #8]
 8004130:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004134:	431a      	orrs	r2, r3
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	68db      	ldr	r3, [r3, #12]
 800413a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800413e:	431a      	orrs	r2, r3
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	691b      	ldr	r3, [r3, #16]
 8004144:	f003 0302 	and.w	r3, r3, #2
 8004148:	431a      	orrs	r2, r3
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	695b      	ldr	r3, [r3, #20]
 800414e:	f003 0301 	and.w	r3, r3, #1
 8004152:	431a      	orrs	r2, r3
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	699b      	ldr	r3, [r3, #24]
 8004158:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800415c:	431a      	orrs	r2, r3
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	69db      	ldr	r3, [r3, #28]
 8004162:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004166:	431a      	orrs	r2, r3
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6a1b      	ldr	r3, [r3, #32]
 800416c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004170:	ea42 0103 	orr.w	r1, r2, r3
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004178:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	430a      	orrs	r2, r1
 8004182:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	699b      	ldr	r3, [r3, #24]
 8004188:	0c1a      	lsrs	r2, r3, #16
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f002 0204 	and.w	r2, r2, #4
 8004192:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	69da      	ldr	r2, [r3, #28]
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80041a2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2200      	movs	r2, #0
 80041a8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	2201      	movs	r2, #1
 80041ae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80041b2:	2300      	movs	r3, #0
}
 80041b4:	4618      	mov	r0, r3
 80041b6:	3708      	adds	r7, #8
 80041b8:	46bd      	mov	sp, r7
 80041ba:	bd80      	pop	{r7, pc}

080041bc <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	b088      	sub	sp, #32
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	60f8      	str	r0, [r7, #12]
 80041c4:	60b9      	str	r1, [r7, #8]
 80041c6:	603b      	str	r3, [r7, #0]
 80041c8:	4613      	mov	r3, r2
 80041ca:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80041cc:	2300      	movs	r3, #0
 80041ce:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80041d6:	2b01      	cmp	r3, #1
 80041d8:	d101      	bne.n	80041de <HAL_SPI_Transmit+0x22>
 80041da:	2302      	movs	r3, #2
 80041dc:	e126      	b.n	800442c <HAL_SPI_Transmit+0x270>
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	2201      	movs	r2, #1
 80041e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80041e6:	f7fd fe9b 	bl	8001f20 <HAL_GetTick>
 80041ea:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80041ec:	88fb      	ldrh	r3, [r7, #6]
 80041ee:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80041f6:	b2db      	uxtb	r3, r3
 80041f8:	2b01      	cmp	r3, #1
 80041fa:	d002      	beq.n	8004202 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80041fc:	2302      	movs	r3, #2
 80041fe:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004200:	e10b      	b.n	800441a <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004202:	68bb      	ldr	r3, [r7, #8]
 8004204:	2b00      	cmp	r3, #0
 8004206:	d002      	beq.n	800420e <HAL_SPI_Transmit+0x52>
 8004208:	88fb      	ldrh	r3, [r7, #6]
 800420a:	2b00      	cmp	r3, #0
 800420c:	d102      	bne.n	8004214 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800420e:	2301      	movs	r3, #1
 8004210:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004212:	e102      	b.n	800441a <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	2203      	movs	r2, #3
 8004218:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	2200      	movs	r2, #0
 8004220:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	68ba      	ldr	r2, [r7, #8]
 8004226:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	88fa      	ldrh	r2, [r7, #6]
 800422c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	88fa      	ldrh	r2, [r7, #6]
 8004232:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	2200      	movs	r2, #0
 8004238:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	2200      	movs	r2, #0
 800423e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	2200      	movs	r2, #0
 8004244:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	2200      	movs	r2, #0
 800424a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	2200      	movs	r2, #0
 8004250:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	689b      	ldr	r3, [r3, #8]
 8004256:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800425a:	d10f      	bne.n	800427c <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	681a      	ldr	r2, [r3, #0]
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800426a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	681a      	ldr	r2, [r3, #0]
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800427a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004286:	2b40      	cmp	r3, #64	; 0x40
 8004288:	d007      	beq.n	800429a <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	681a      	ldr	r2, [r3, #0]
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004298:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	68db      	ldr	r3, [r3, #12]
 800429e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80042a2:	d14b      	bne.n	800433c <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	685b      	ldr	r3, [r3, #4]
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d002      	beq.n	80042b2 <HAL_SPI_Transmit+0xf6>
 80042ac:	8afb      	ldrh	r3, [r7, #22]
 80042ae:	2b01      	cmp	r3, #1
 80042b0:	d13e      	bne.n	8004330 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042b6:	881a      	ldrh	r2, [r3, #0]
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042c2:	1c9a      	adds	r2, r3, #2
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80042cc:	b29b      	uxth	r3, r3
 80042ce:	3b01      	subs	r3, #1
 80042d0:	b29a      	uxth	r2, r3
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80042d6:	e02b      	b.n	8004330 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	689b      	ldr	r3, [r3, #8]
 80042de:	f003 0302 	and.w	r3, r3, #2
 80042e2:	2b02      	cmp	r3, #2
 80042e4:	d112      	bne.n	800430c <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042ea:	881a      	ldrh	r2, [r3, #0]
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042f6:	1c9a      	adds	r2, r3, #2
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004300:	b29b      	uxth	r3, r3
 8004302:	3b01      	subs	r3, #1
 8004304:	b29a      	uxth	r2, r3
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	86da      	strh	r2, [r3, #54]	; 0x36
 800430a:	e011      	b.n	8004330 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800430c:	f7fd fe08 	bl	8001f20 <HAL_GetTick>
 8004310:	4602      	mov	r2, r0
 8004312:	69bb      	ldr	r3, [r7, #24]
 8004314:	1ad3      	subs	r3, r2, r3
 8004316:	683a      	ldr	r2, [r7, #0]
 8004318:	429a      	cmp	r2, r3
 800431a:	d803      	bhi.n	8004324 <HAL_SPI_Transmit+0x168>
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004322:	d102      	bne.n	800432a <HAL_SPI_Transmit+0x16e>
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	2b00      	cmp	r3, #0
 8004328:	d102      	bne.n	8004330 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800432a:	2303      	movs	r3, #3
 800432c:	77fb      	strb	r3, [r7, #31]
          goto error;
 800432e:	e074      	b.n	800441a <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004334:	b29b      	uxth	r3, r3
 8004336:	2b00      	cmp	r3, #0
 8004338:	d1ce      	bne.n	80042d8 <HAL_SPI_Transmit+0x11c>
 800433a:	e04c      	b.n	80043d6 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	685b      	ldr	r3, [r3, #4]
 8004340:	2b00      	cmp	r3, #0
 8004342:	d002      	beq.n	800434a <HAL_SPI_Transmit+0x18e>
 8004344:	8afb      	ldrh	r3, [r7, #22]
 8004346:	2b01      	cmp	r3, #1
 8004348:	d140      	bne.n	80043cc <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	330c      	adds	r3, #12
 8004354:	7812      	ldrb	r2, [r2, #0]
 8004356:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800435c:	1c5a      	adds	r2, r3, #1
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004366:	b29b      	uxth	r3, r3
 8004368:	3b01      	subs	r3, #1
 800436a:	b29a      	uxth	r2, r3
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004370:	e02c      	b.n	80043cc <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	689b      	ldr	r3, [r3, #8]
 8004378:	f003 0302 	and.w	r3, r3, #2
 800437c:	2b02      	cmp	r3, #2
 800437e:	d113      	bne.n	80043a8 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	330c      	adds	r3, #12
 800438a:	7812      	ldrb	r2, [r2, #0]
 800438c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004392:	1c5a      	adds	r2, r3, #1
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800439c:	b29b      	uxth	r3, r3
 800439e:	3b01      	subs	r3, #1
 80043a0:	b29a      	uxth	r2, r3
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	86da      	strh	r2, [r3, #54]	; 0x36
 80043a6:	e011      	b.n	80043cc <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80043a8:	f7fd fdba 	bl	8001f20 <HAL_GetTick>
 80043ac:	4602      	mov	r2, r0
 80043ae:	69bb      	ldr	r3, [r7, #24]
 80043b0:	1ad3      	subs	r3, r2, r3
 80043b2:	683a      	ldr	r2, [r7, #0]
 80043b4:	429a      	cmp	r2, r3
 80043b6:	d803      	bhi.n	80043c0 <HAL_SPI_Transmit+0x204>
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043be:	d102      	bne.n	80043c6 <HAL_SPI_Transmit+0x20a>
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d102      	bne.n	80043cc <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80043c6:	2303      	movs	r3, #3
 80043c8:	77fb      	strb	r3, [r7, #31]
          goto error;
 80043ca:	e026      	b.n	800441a <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80043d0:	b29b      	uxth	r3, r3
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d1cd      	bne.n	8004372 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80043d6:	69ba      	ldr	r2, [r7, #24]
 80043d8:	6839      	ldr	r1, [r7, #0]
 80043da:	68f8      	ldr	r0, [r7, #12]
 80043dc:	f000 f8b2 	bl	8004544 <SPI_EndRxTxTransaction>
 80043e0:	4603      	mov	r3, r0
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d002      	beq.n	80043ec <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	2220      	movs	r2, #32
 80043ea:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	689b      	ldr	r3, [r3, #8]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d10a      	bne.n	800440a <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80043f4:	2300      	movs	r3, #0
 80043f6:	613b      	str	r3, [r7, #16]
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	68db      	ldr	r3, [r3, #12]
 80043fe:	613b      	str	r3, [r7, #16]
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	689b      	ldr	r3, [r3, #8]
 8004406:	613b      	str	r3, [r7, #16]
 8004408:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800440e:	2b00      	cmp	r3, #0
 8004410:	d002      	beq.n	8004418 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8004412:	2301      	movs	r3, #1
 8004414:	77fb      	strb	r3, [r7, #31]
 8004416:	e000      	b.n	800441a <HAL_SPI_Transmit+0x25e>
  }

error:
 8004418:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	2201      	movs	r2, #1
 800441e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	2200      	movs	r2, #0
 8004426:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800442a:	7ffb      	ldrb	r3, [r7, #31]
}
 800442c:	4618      	mov	r0, r3
 800442e:	3720      	adds	r7, #32
 8004430:	46bd      	mov	sp, r7
 8004432:	bd80      	pop	{r7, pc}

08004434 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004434:	b580      	push	{r7, lr}
 8004436:	b088      	sub	sp, #32
 8004438:	af00      	add	r7, sp, #0
 800443a:	60f8      	str	r0, [r7, #12]
 800443c:	60b9      	str	r1, [r7, #8]
 800443e:	603b      	str	r3, [r7, #0]
 8004440:	4613      	mov	r3, r2
 8004442:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004444:	f7fd fd6c 	bl	8001f20 <HAL_GetTick>
 8004448:	4602      	mov	r2, r0
 800444a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800444c:	1a9b      	subs	r3, r3, r2
 800444e:	683a      	ldr	r2, [r7, #0]
 8004450:	4413      	add	r3, r2
 8004452:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004454:	f7fd fd64 	bl	8001f20 <HAL_GetTick>
 8004458:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800445a:	4b39      	ldr	r3, [pc, #228]	; (8004540 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	015b      	lsls	r3, r3, #5
 8004460:	0d1b      	lsrs	r3, r3, #20
 8004462:	69fa      	ldr	r2, [r7, #28]
 8004464:	fb02 f303 	mul.w	r3, r2, r3
 8004468:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800446a:	e054      	b.n	8004516 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004472:	d050      	beq.n	8004516 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004474:	f7fd fd54 	bl	8001f20 <HAL_GetTick>
 8004478:	4602      	mov	r2, r0
 800447a:	69bb      	ldr	r3, [r7, #24]
 800447c:	1ad3      	subs	r3, r2, r3
 800447e:	69fa      	ldr	r2, [r7, #28]
 8004480:	429a      	cmp	r2, r3
 8004482:	d902      	bls.n	800448a <SPI_WaitFlagStateUntilTimeout+0x56>
 8004484:	69fb      	ldr	r3, [r7, #28]
 8004486:	2b00      	cmp	r3, #0
 8004488:	d13d      	bne.n	8004506 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	685a      	ldr	r2, [r3, #4]
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004498:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	685b      	ldr	r3, [r3, #4]
 800449e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80044a2:	d111      	bne.n	80044c8 <SPI_WaitFlagStateUntilTimeout+0x94>
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	689b      	ldr	r3, [r3, #8]
 80044a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80044ac:	d004      	beq.n	80044b8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	689b      	ldr	r3, [r3, #8]
 80044b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80044b6:	d107      	bne.n	80044c8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	681a      	ldr	r2, [r3, #0]
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80044c6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80044d0:	d10f      	bne.n	80044f2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	681a      	ldr	r2, [r3, #0]
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80044e0:	601a      	str	r2, [r3, #0]
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	681a      	ldr	r2, [r3, #0]
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80044f0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	2201      	movs	r2, #1
 80044f6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	2200      	movs	r2, #0
 80044fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004502:	2303      	movs	r3, #3
 8004504:	e017      	b.n	8004536 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8004506:	697b      	ldr	r3, [r7, #20]
 8004508:	2b00      	cmp	r3, #0
 800450a:	d101      	bne.n	8004510 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800450c:	2300      	movs	r3, #0
 800450e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004510:	697b      	ldr	r3, [r7, #20]
 8004512:	3b01      	subs	r3, #1
 8004514:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	689a      	ldr	r2, [r3, #8]
 800451c:	68bb      	ldr	r3, [r7, #8]
 800451e:	4013      	ands	r3, r2
 8004520:	68ba      	ldr	r2, [r7, #8]
 8004522:	429a      	cmp	r2, r3
 8004524:	bf0c      	ite	eq
 8004526:	2301      	moveq	r3, #1
 8004528:	2300      	movne	r3, #0
 800452a:	b2db      	uxtb	r3, r3
 800452c:	461a      	mov	r2, r3
 800452e:	79fb      	ldrb	r3, [r7, #7]
 8004530:	429a      	cmp	r2, r3
 8004532:	d19b      	bne.n	800446c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004534:	2300      	movs	r3, #0
}
 8004536:	4618      	mov	r0, r3
 8004538:	3720      	adds	r7, #32
 800453a:	46bd      	mov	sp, r7
 800453c:	bd80      	pop	{r7, pc}
 800453e:	bf00      	nop
 8004540:	20000008 	.word	0x20000008

08004544 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004544:	b580      	push	{r7, lr}
 8004546:	b086      	sub	sp, #24
 8004548:	af02      	add	r7, sp, #8
 800454a:	60f8      	str	r0, [r7, #12]
 800454c:	60b9      	str	r1, [r7, #8]
 800454e:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	9300      	str	r3, [sp, #0]
 8004554:	68bb      	ldr	r3, [r7, #8]
 8004556:	2200      	movs	r2, #0
 8004558:	2180      	movs	r1, #128	; 0x80
 800455a:	68f8      	ldr	r0, [r7, #12]
 800455c:	f7ff ff6a 	bl	8004434 <SPI_WaitFlagStateUntilTimeout>
 8004560:	4603      	mov	r3, r0
 8004562:	2b00      	cmp	r3, #0
 8004564:	d007      	beq.n	8004576 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800456a:	f043 0220 	orr.w	r2, r3, #32
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8004572:	2303      	movs	r3, #3
 8004574:	e000      	b.n	8004578 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8004576:	2300      	movs	r3, #0
}
 8004578:	4618      	mov	r0, r3
 800457a:	3710      	adds	r7, #16
 800457c:	46bd      	mov	sp, r7
 800457e:	bd80      	pop	{r7, pc}

08004580 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004580:	b580      	push	{r7, lr}
 8004582:	b082      	sub	sp, #8
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2b00      	cmp	r3, #0
 800458c:	d101      	bne.n	8004592 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800458e:	2301      	movs	r3, #1
 8004590:	e041      	b.n	8004616 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004598:	b2db      	uxtb	r3, r3
 800459a:	2b00      	cmp	r3, #0
 800459c:	d106      	bne.n	80045ac <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	2200      	movs	r2, #0
 80045a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80045a6:	6878      	ldr	r0, [r7, #4]
 80045a8:	f7fd fa4e 	bl	8001a48 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2202      	movs	r2, #2
 80045b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681a      	ldr	r2, [r3, #0]
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	3304      	adds	r3, #4
 80045bc:	4619      	mov	r1, r3
 80045be:	4610      	mov	r0, r2
 80045c0:	f000 f98e 	bl	80048e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2201      	movs	r2, #1
 80045c8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2201      	movs	r2, #1
 80045d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2201      	movs	r2, #1
 80045d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2201      	movs	r2, #1
 80045e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2201      	movs	r2, #1
 80045e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2201      	movs	r2, #1
 80045f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	2201      	movs	r2, #1
 80045f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2201      	movs	r2, #1
 8004600:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2201      	movs	r2, #1
 8004608:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2201      	movs	r2, #1
 8004610:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004614:	2300      	movs	r3, #0
}
 8004616:	4618      	mov	r0, r3
 8004618:	3708      	adds	r7, #8
 800461a:	46bd      	mov	sp, r7
 800461c:	bd80      	pop	{r7, pc}
	...

08004620 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004620:	b580      	push	{r7, lr}
 8004622:	b084      	sub	sp, #16
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
 8004628:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800462a:	683b      	ldr	r3, [r7, #0]
 800462c:	2b00      	cmp	r3, #0
 800462e:	d109      	bne.n	8004644 <HAL_TIM_PWM_Start+0x24>
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004636:	b2db      	uxtb	r3, r3
 8004638:	2b01      	cmp	r3, #1
 800463a:	bf14      	ite	ne
 800463c:	2301      	movne	r3, #1
 800463e:	2300      	moveq	r3, #0
 8004640:	b2db      	uxtb	r3, r3
 8004642:	e022      	b.n	800468a <HAL_TIM_PWM_Start+0x6a>
 8004644:	683b      	ldr	r3, [r7, #0]
 8004646:	2b04      	cmp	r3, #4
 8004648:	d109      	bne.n	800465e <HAL_TIM_PWM_Start+0x3e>
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004650:	b2db      	uxtb	r3, r3
 8004652:	2b01      	cmp	r3, #1
 8004654:	bf14      	ite	ne
 8004656:	2301      	movne	r3, #1
 8004658:	2300      	moveq	r3, #0
 800465a:	b2db      	uxtb	r3, r3
 800465c:	e015      	b.n	800468a <HAL_TIM_PWM_Start+0x6a>
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	2b08      	cmp	r3, #8
 8004662:	d109      	bne.n	8004678 <HAL_TIM_PWM_Start+0x58>
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800466a:	b2db      	uxtb	r3, r3
 800466c:	2b01      	cmp	r3, #1
 800466e:	bf14      	ite	ne
 8004670:	2301      	movne	r3, #1
 8004672:	2300      	moveq	r3, #0
 8004674:	b2db      	uxtb	r3, r3
 8004676:	e008      	b.n	800468a <HAL_TIM_PWM_Start+0x6a>
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800467e:	b2db      	uxtb	r3, r3
 8004680:	2b01      	cmp	r3, #1
 8004682:	bf14      	ite	ne
 8004684:	2301      	movne	r3, #1
 8004686:	2300      	moveq	r3, #0
 8004688:	b2db      	uxtb	r3, r3
 800468a:	2b00      	cmp	r3, #0
 800468c:	d001      	beq.n	8004692 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800468e:	2301      	movs	r3, #1
 8004690:	e05e      	b.n	8004750 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	2b00      	cmp	r3, #0
 8004696:	d104      	bne.n	80046a2 <HAL_TIM_PWM_Start+0x82>
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2202      	movs	r2, #2
 800469c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80046a0:	e013      	b.n	80046ca <HAL_TIM_PWM_Start+0xaa>
 80046a2:	683b      	ldr	r3, [r7, #0]
 80046a4:	2b04      	cmp	r3, #4
 80046a6:	d104      	bne.n	80046b2 <HAL_TIM_PWM_Start+0x92>
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2202      	movs	r2, #2
 80046ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80046b0:	e00b      	b.n	80046ca <HAL_TIM_PWM_Start+0xaa>
 80046b2:	683b      	ldr	r3, [r7, #0]
 80046b4:	2b08      	cmp	r3, #8
 80046b6:	d104      	bne.n	80046c2 <HAL_TIM_PWM_Start+0xa2>
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2202      	movs	r2, #2
 80046bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80046c0:	e003      	b.n	80046ca <HAL_TIM_PWM_Start+0xaa>
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	2202      	movs	r2, #2
 80046c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	2201      	movs	r2, #1
 80046d0:	6839      	ldr	r1, [r7, #0]
 80046d2:	4618      	mov	r0, r3
 80046d4:	f000 faee 	bl	8004cb4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	4a1e      	ldr	r2, [pc, #120]	; (8004758 <HAL_TIM_PWM_Start+0x138>)
 80046de:	4293      	cmp	r3, r2
 80046e0:	d107      	bne.n	80046f2 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80046f0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	4a18      	ldr	r2, [pc, #96]	; (8004758 <HAL_TIM_PWM_Start+0x138>)
 80046f8:	4293      	cmp	r3, r2
 80046fa:	d00e      	beq.n	800471a <HAL_TIM_PWM_Start+0xfa>
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004704:	d009      	beq.n	800471a <HAL_TIM_PWM_Start+0xfa>
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	4a14      	ldr	r2, [pc, #80]	; (800475c <HAL_TIM_PWM_Start+0x13c>)
 800470c:	4293      	cmp	r3, r2
 800470e:	d004      	beq.n	800471a <HAL_TIM_PWM_Start+0xfa>
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	4a12      	ldr	r2, [pc, #72]	; (8004760 <HAL_TIM_PWM_Start+0x140>)
 8004716:	4293      	cmp	r3, r2
 8004718:	d111      	bne.n	800473e <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	689b      	ldr	r3, [r3, #8]
 8004720:	f003 0307 	and.w	r3, r3, #7
 8004724:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	2b06      	cmp	r3, #6
 800472a:	d010      	beq.n	800474e <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	681a      	ldr	r2, [r3, #0]
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f042 0201 	orr.w	r2, r2, #1
 800473a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800473c:	e007      	b.n	800474e <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	681a      	ldr	r2, [r3, #0]
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f042 0201 	orr.w	r2, r2, #1
 800474c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800474e:	2300      	movs	r3, #0
}
 8004750:	4618      	mov	r0, r3
 8004752:	3710      	adds	r7, #16
 8004754:	46bd      	mov	sp, r7
 8004756:	bd80      	pop	{r7, pc}
 8004758:	40012c00 	.word	0x40012c00
 800475c:	40000400 	.word	0x40000400
 8004760:	40000800 	.word	0x40000800

08004764 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004764:	b580      	push	{r7, lr}
 8004766:	b084      	sub	sp, #16
 8004768:	af00      	add	r7, sp, #0
 800476a:	60f8      	str	r0, [r7, #12]
 800476c:	60b9      	str	r1, [r7, #8]
 800476e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004776:	2b01      	cmp	r3, #1
 8004778:	d101      	bne.n	800477e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800477a:	2302      	movs	r3, #2
 800477c:	e0ac      	b.n	80048d8 <HAL_TIM_PWM_ConfigChannel+0x174>
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	2201      	movs	r2, #1
 8004782:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	2b0c      	cmp	r3, #12
 800478a:	f200 809f 	bhi.w	80048cc <HAL_TIM_PWM_ConfigChannel+0x168>
 800478e:	a201      	add	r2, pc, #4	; (adr r2, 8004794 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8004790:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004794:	080047c9 	.word	0x080047c9
 8004798:	080048cd 	.word	0x080048cd
 800479c:	080048cd 	.word	0x080048cd
 80047a0:	080048cd 	.word	0x080048cd
 80047a4:	08004809 	.word	0x08004809
 80047a8:	080048cd 	.word	0x080048cd
 80047ac:	080048cd 	.word	0x080048cd
 80047b0:	080048cd 	.word	0x080048cd
 80047b4:	0800484b 	.word	0x0800484b
 80047b8:	080048cd 	.word	0x080048cd
 80047bc:	080048cd 	.word	0x080048cd
 80047c0:	080048cd 	.word	0x080048cd
 80047c4:	0800488b 	.word	0x0800488b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	68b9      	ldr	r1, [r7, #8]
 80047ce:	4618      	mov	r0, r3
 80047d0:	f000 f8e8 	bl	80049a4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	699a      	ldr	r2, [r3, #24]
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f042 0208 	orr.w	r2, r2, #8
 80047e2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	699a      	ldr	r2, [r3, #24]
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f022 0204 	bic.w	r2, r2, #4
 80047f2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	6999      	ldr	r1, [r3, #24]
 80047fa:	68bb      	ldr	r3, [r7, #8]
 80047fc:	691a      	ldr	r2, [r3, #16]
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	430a      	orrs	r2, r1
 8004804:	619a      	str	r2, [r3, #24]
      break;
 8004806:	e062      	b.n	80048ce <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	68b9      	ldr	r1, [r7, #8]
 800480e:	4618      	mov	r0, r3
 8004810:	f000 f92e 	bl	8004a70 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	699a      	ldr	r2, [r3, #24]
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004822:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	699a      	ldr	r2, [r3, #24]
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004832:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	6999      	ldr	r1, [r3, #24]
 800483a:	68bb      	ldr	r3, [r7, #8]
 800483c:	691b      	ldr	r3, [r3, #16]
 800483e:	021a      	lsls	r2, r3, #8
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	430a      	orrs	r2, r1
 8004846:	619a      	str	r2, [r3, #24]
      break;
 8004848:	e041      	b.n	80048ce <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	68b9      	ldr	r1, [r7, #8]
 8004850:	4618      	mov	r0, r3
 8004852:	f000 f977 	bl	8004b44 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	69da      	ldr	r2, [r3, #28]
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f042 0208 	orr.w	r2, r2, #8
 8004864:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	69da      	ldr	r2, [r3, #28]
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f022 0204 	bic.w	r2, r2, #4
 8004874:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	69d9      	ldr	r1, [r3, #28]
 800487c:	68bb      	ldr	r3, [r7, #8]
 800487e:	691a      	ldr	r2, [r3, #16]
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	430a      	orrs	r2, r1
 8004886:	61da      	str	r2, [r3, #28]
      break;
 8004888:	e021      	b.n	80048ce <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	68b9      	ldr	r1, [r7, #8]
 8004890:	4618      	mov	r0, r3
 8004892:	f000 f9c1 	bl	8004c18 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	69da      	ldr	r2, [r3, #28]
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80048a4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	69da      	ldr	r2, [r3, #28]
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80048b4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	69d9      	ldr	r1, [r3, #28]
 80048bc:	68bb      	ldr	r3, [r7, #8]
 80048be:	691b      	ldr	r3, [r3, #16]
 80048c0:	021a      	lsls	r2, r3, #8
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	430a      	orrs	r2, r1
 80048c8:	61da      	str	r2, [r3, #28]
      break;
 80048ca:	e000      	b.n	80048ce <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 80048cc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	2200      	movs	r2, #0
 80048d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80048d6:	2300      	movs	r3, #0
}
 80048d8:	4618      	mov	r0, r3
 80048da:	3710      	adds	r7, #16
 80048dc:	46bd      	mov	sp, r7
 80048de:	bd80      	pop	{r7, pc}

080048e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80048e0:	b480      	push	{r7}
 80048e2:	b085      	sub	sp, #20
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	6078      	str	r0, [r7, #4]
 80048e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	4a29      	ldr	r2, [pc, #164]	; (8004998 <TIM_Base_SetConfig+0xb8>)
 80048f4:	4293      	cmp	r3, r2
 80048f6:	d00b      	beq.n	8004910 <TIM_Base_SetConfig+0x30>
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048fe:	d007      	beq.n	8004910 <TIM_Base_SetConfig+0x30>
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	4a26      	ldr	r2, [pc, #152]	; (800499c <TIM_Base_SetConfig+0xbc>)
 8004904:	4293      	cmp	r3, r2
 8004906:	d003      	beq.n	8004910 <TIM_Base_SetConfig+0x30>
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	4a25      	ldr	r2, [pc, #148]	; (80049a0 <TIM_Base_SetConfig+0xc0>)
 800490c:	4293      	cmp	r3, r2
 800490e:	d108      	bne.n	8004922 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004916:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	685b      	ldr	r3, [r3, #4]
 800491c:	68fa      	ldr	r2, [r7, #12]
 800491e:	4313      	orrs	r3, r2
 8004920:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	4a1c      	ldr	r2, [pc, #112]	; (8004998 <TIM_Base_SetConfig+0xb8>)
 8004926:	4293      	cmp	r3, r2
 8004928:	d00b      	beq.n	8004942 <TIM_Base_SetConfig+0x62>
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004930:	d007      	beq.n	8004942 <TIM_Base_SetConfig+0x62>
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	4a19      	ldr	r2, [pc, #100]	; (800499c <TIM_Base_SetConfig+0xbc>)
 8004936:	4293      	cmp	r3, r2
 8004938:	d003      	beq.n	8004942 <TIM_Base_SetConfig+0x62>
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	4a18      	ldr	r2, [pc, #96]	; (80049a0 <TIM_Base_SetConfig+0xc0>)
 800493e:	4293      	cmp	r3, r2
 8004940:	d108      	bne.n	8004954 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004948:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800494a:	683b      	ldr	r3, [r7, #0]
 800494c:	68db      	ldr	r3, [r3, #12]
 800494e:	68fa      	ldr	r2, [r7, #12]
 8004950:	4313      	orrs	r3, r2
 8004952:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800495a:	683b      	ldr	r3, [r7, #0]
 800495c:	695b      	ldr	r3, [r3, #20]
 800495e:	4313      	orrs	r3, r2
 8004960:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	68fa      	ldr	r2, [r7, #12]
 8004966:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004968:	683b      	ldr	r3, [r7, #0]
 800496a:	689a      	ldr	r2, [r3, #8]
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	681a      	ldr	r2, [r3, #0]
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	4a07      	ldr	r2, [pc, #28]	; (8004998 <TIM_Base_SetConfig+0xb8>)
 800497c:	4293      	cmp	r3, r2
 800497e:	d103      	bne.n	8004988 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004980:	683b      	ldr	r3, [r7, #0]
 8004982:	691a      	ldr	r2, [r3, #16]
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2201      	movs	r2, #1
 800498c:	615a      	str	r2, [r3, #20]
}
 800498e:	bf00      	nop
 8004990:	3714      	adds	r7, #20
 8004992:	46bd      	mov	sp, r7
 8004994:	bc80      	pop	{r7}
 8004996:	4770      	bx	lr
 8004998:	40012c00 	.word	0x40012c00
 800499c:	40000400 	.word	0x40000400
 80049a0:	40000800 	.word	0x40000800

080049a4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80049a4:	b480      	push	{r7}
 80049a6:	b087      	sub	sp, #28
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
 80049ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	6a1b      	ldr	r3, [r3, #32]
 80049b2:	f023 0201 	bic.w	r2, r3, #1
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	6a1b      	ldr	r3, [r3, #32]
 80049be:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	685b      	ldr	r3, [r3, #4]
 80049c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	699b      	ldr	r3, [r3, #24]
 80049ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	f023 0303 	bic.w	r3, r3, #3
 80049da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80049dc:	683b      	ldr	r3, [r7, #0]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	68fa      	ldr	r2, [r7, #12]
 80049e2:	4313      	orrs	r3, r2
 80049e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80049e6:	697b      	ldr	r3, [r7, #20]
 80049e8:	f023 0302 	bic.w	r3, r3, #2
 80049ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80049ee:	683b      	ldr	r3, [r7, #0]
 80049f0:	689b      	ldr	r3, [r3, #8]
 80049f2:	697a      	ldr	r2, [r7, #20]
 80049f4:	4313      	orrs	r3, r2
 80049f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	4a1c      	ldr	r2, [pc, #112]	; (8004a6c <TIM_OC1_SetConfig+0xc8>)
 80049fc:	4293      	cmp	r3, r2
 80049fe:	d10c      	bne.n	8004a1a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004a00:	697b      	ldr	r3, [r7, #20]
 8004a02:	f023 0308 	bic.w	r3, r3, #8
 8004a06:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004a08:	683b      	ldr	r3, [r7, #0]
 8004a0a:	68db      	ldr	r3, [r3, #12]
 8004a0c:	697a      	ldr	r2, [r7, #20]
 8004a0e:	4313      	orrs	r3, r2
 8004a10:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004a12:	697b      	ldr	r3, [r7, #20]
 8004a14:	f023 0304 	bic.w	r3, r3, #4
 8004a18:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	4a13      	ldr	r2, [pc, #76]	; (8004a6c <TIM_OC1_SetConfig+0xc8>)
 8004a1e:	4293      	cmp	r3, r2
 8004a20:	d111      	bne.n	8004a46 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004a22:	693b      	ldr	r3, [r7, #16]
 8004a24:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004a28:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004a2a:	693b      	ldr	r3, [r7, #16]
 8004a2c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004a30:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004a32:	683b      	ldr	r3, [r7, #0]
 8004a34:	695b      	ldr	r3, [r3, #20]
 8004a36:	693a      	ldr	r2, [r7, #16]
 8004a38:	4313      	orrs	r3, r2
 8004a3a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004a3c:	683b      	ldr	r3, [r7, #0]
 8004a3e:	699b      	ldr	r3, [r3, #24]
 8004a40:	693a      	ldr	r2, [r7, #16]
 8004a42:	4313      	orrs	r3, r2
 8004a44:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	693a      	ldr	r2, [r7, #16]
 8004a4a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	68fa      	ldr	r2, [r7, #12]
 8004a50:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004a52:	683b      	ldr	r3, [r7, #0]
 8004a54:	685a      	ldr	r2, [r3, #4]
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	697a      	ldr	r2, [r7, #20]
 8004a5e:	621a      	str	r2, [r3, #32]
}
 8004a60:	bf00      	nop
 8004a62:	371c      	adds	r7, #28
 8004a64:	46bd      	mov	sp, r7
 8004a66:	bc80      	pop	{r7}
 8004a68:	4770      	bx	lr
 8004a6a:	bf00      	nop
 8004a6c:	40012c00 	.word	0x40012c00

08004a70 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004a70:	b480      	push	{r7}
 8004a72:	b087      	sub	sp, #28
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]
 8004a78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	6a1b      	ldr	r3, [r3, #32]
 8004a7e:	f023 0210 	bic.w	r2, r3, #16
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6a1b      	ldr	r3, [r3, #32]
 8004a8a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	685b      	ldr	r3, [r3, #4]
 8004a90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	699b      	ldr	r3, [r3, #24]
 8004a96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004aa6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	021b      	lsls	r3, r3, #8
 8004aae:	68fa      	ldr	r2, [r7, #12]
 8004ab0:	4313      	orrs	r3, r2
 8004ab2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004ab4:	697b      	ldr	r3, [r7, #20]
 8004ab6:	f023 0320 	bic.w	r3, r3, #32
 8004aba:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004abc:	683b      	ldr	r3, [r7, #0]
 8004abe:	689b      	ldr	r3, [r3, #8]
 8004ac0:	011b      	lsls	r3, r3, #4
 8004ac2:	697a      	ldr	r2, [r7, #20]
 8004ac4:	4313      	orrs	r3, r2
 8004ac6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	4a1d      	ldr	r2, [pc, #116]	; (8004b40 <TIM_OC2_SetConfig+0xd0>)
 8004acc:	4293      	cmp	r3, r2
 8004ace:	d10d      	bne.n	8004aec <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004ad0:	697b      	ldr	r3, [r7, #20]
 8004ad2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004ad6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004ad8:	683b      	ldr	r3, [r7, #0]
 8004ada:	68db      	ldr	r3, [r3, #12]
 8004adc:	011b      	lsls	r3, r3, #4
 8004ade:	697a      	ldr	r2, [r7, #20]
 8004ae0:	4313      	orrs	r3, r2
 8004ae2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004ae4:	697b      	ldr	r3, [r7, #20]
 8004ae6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004aea:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	4a14      	ldr	r2, [pc, #80]	; (8004b40 <TIM_OC2_SetConfig+0xd0>)
 8004af0:	4293      	cmp	r3, r2
 8004af2:	d113      	bne.n	8004b1c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004af4:	693b      	ldr	r3, [r7, #16]
 8004af6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004afa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004afc:	693b      	ldr	r3, [r7, #16]
 8004afe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004b02:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004b04:	683b      	ldr	r3, [r7, #0]
 8004b06:	695b      	ldr	r3, [r3, #20]
 8004b08:	009b      	lsls	r3, r3, #2
 8004b0a:	693a      	ldr	r2, [r7, #16]
 8004b0c:	4313      	orrs	r3, r2
 8004b0e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004b10:	683b      	ldr	r3, [r7, #0]
 8004b12:	699b      	ldr	r3, [r3, #24]
 8004b14:	009b      	lsls	r3, r3, #2
 8004b16:	693a      	ldr	r2, [r7, #16]
 8004b18:	4313      	orrs	r3, r2
 8004b1a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	693a      	ldr	r2, [r7, #16]
 8004b20:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	68fa      	ldr	r2, [r7, #12]
 8004b26:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004b28:	683b      	ldr	r3, [r7, #0]
 8004b2a:	685a      	ldr	r2, [r3, #4]
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	697a      	ldr	r2, [r7, #20]
 8004b34:	621a      	str	r2, [r3, #32]
}
 8004b36:	bf00      	nop
 8004b38:	371c      	adds	r7, #28
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	bc80      	pop	{r7}
 8004b3e:	4770      	bx	lr
 8004b40:	40012c00 	.word	0x40012c00

08004b44 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004b44:	b480      	push	{r7}
 8004b46:	b087      	sub	sp, #28
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
 8004b4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	6a1b      	ldr	r3, [r3, #32]
 8004b52:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	6a1b      	ldr	r3, [r3, #32]
 8004b5e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	685b      	ldr	r3, [r3, #4]
 8004b64:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	69db      	ldr	r3, [r3, #28]
 8004b6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	f023 0303 	bic.w	r3, r3, #3
 8004b7a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	68fa      	ldr	r2, [r7, #12]
 8004b82:	4313      	orrs	r3, r2
 8004b84:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004b86:	697b      	ldr	r3, [r7, #20]
 8004b88:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004b8c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004b8e:	683b      	ldr	r3, [r7, #0]
 8004b90:	689b      	ldr	r3, [r3, #8]
 8004b92:	021b      	lsls	r3, r3, #8
 8004b94:	697a      	ldr	r2, [r7, #20]
 8004b96:	4313      	orrs	r3, r2
 8004b98:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	4a1d      	ldr	r2, [pc, #116]	; (8004c14 <TIM_OC3_SetConfig+0xd0>)
 8004b9e:	4293      	cmp	r3, r2
 8004ba0:	d10d      	bne.n	8004bbe <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004ba2:	697b      	ldr	r3, [r7, #20]
 8004ba4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004ba8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004baa:	683b      	ldr	r3, [r7, #0]
 8004bac:	68db      	ldr	r3, [r3, #12]
 8004bae:	021b      	lsls	r3, r3, #8
 8004bb0:	697a      	ldr	r2, [r7, #20]
 8004bb2:	4313      	orrs	r3, r2
 8004bb4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004bb6:	697b      	ldr	r3, [r7, #20]
 8004bb8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004bbc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	4a14      	ldr	r2, [pc, #80]	; (8004c14 <TIM_OC3_SetConfig+0xd0>)
 8004bc2:	4293      	cmp	r3, r2
 8004bc4:	d113      	bne.n	8004bee <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004bc6:	693b      	ldr	r3, [r7, #16]
 8004bc8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004bcc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004bce:	693b      	ldr	r3, [r7, #16]
 8004bd0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004bd4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004bd6:	683b      	ldr	r3, [r7, #0]
 8004bd8:	695b      	ldr	r3, [r3, #20]
 8004bda:	011b      	lsls	r3, r3, #4
 8004bdc:	693a      	ldr	r2, [r7, #16]
 8004bde:	4313      	orrs	r3, r2
 8004be0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004be2:	683b      	ldr	r3, [r7, #0]
 8004be4:	699b      	ldr	r3, [r3, #24]
 8004be6:	011b      	lsls	r3, r3, #4
 8004be8:	693a      	ldr	r2, [r7, #16]
 8004bea:	4313      	orrs	r3, r2
 8004bec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	693a      	ldr	r2, [r7, #16]
 8004bf2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	68fa      	ldr	r2, [r7, #12]
 8004bf8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004bfa:	683b      	ldr	r3, [r7, #0]
 8004bfc:	685a      	ldr	r2, [r3, #4]
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	697a      	ldr	r2, [r7, #20]
 8004c06:	621a      	str	r2, [r3, #32]
}
 8004c08:	bf00      	nop
 8004c0a:	371c      	adds	r7, #28
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	bc80      	pop	{r7}
 8004c10:	4770      	bx	lr
 8004c12:	bf00      	nop
 8004c14:	40012c00 	.word	0x40012c00

08004c18 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004c18:	b480      	push	{r7}
 8004c1a:	b087      	sub	sp, #28
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	6078      	str	r0, [r7, #4]
 8004c20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	6a1b      	ldr	r3, [r3, #32]
 8004c26:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6a1b      	ldr	r3, [r3, #32]
 8004c32:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	685b      	ldr	r3, [r3, #4]
 8004c38:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	69db      	ldr	r3, [r3, #28]
 8004c3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c4e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004c50:	683b      	ldr	r3, [r7, #0]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	021b      	lsls	r3, r3, #8
 8004c56:	68fa      	ldr	r2, [r7, #12]
 8004c58:	4313      	orrs	r3, r2
 8004c5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004c5c:	693b      	ldr	r3, [r7, #16]
 8004c5e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004c62:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004c64:	683b      	ldr	r3, [r7, #0]
 8004c66:	689b      	ldr	r3, [r3, #8]
 8004c68:	031b      	lsls	r3, r3, #12
 8004c6a:	693a      	ldr	r2, [r7, #16]
 8004c6c:	4313      	orrs	r3, r2
 8004c6e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	4a0f      	ldr	r2, [pc, #60]	; (8004cb0 <TIM_OC4_SetConfig+0x98>)
 8004c74:	4293      	cmp	r3, r2
 8004c76:	d109      	bne.n	8004c8c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004c78:	697b      	ldr	r3, [r7, #20]
 8004c7a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004c7e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004c80:	683b      	ldr	r3, [r7, #0]
 8004c82:	695b      	ldr	r3, [r3, #20]
 8004c84:	019b      	lsls	r3, r3, #6
 8004c86:	697a      	ldr	r2, [r7, #20]
 8004c88:	4313      	orrs	r3, r2
 8004c8a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	697a      	ldr	r2, [r7, #20]
 8004c90:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	68fa      	ldr	r2, [r7, #12]
 8004c96:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004c98:	683b      	ldr	r3, [r7, #0]
 8004c9a:	685a      	ldr	r2, [r3, #4]
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	693a      	ldr	r2, [r7, #16]
 8004ca4:	621a      	str	r2, [r3, #32]
}
 8004ca6:	bf00      	nop
 8004ca8:	371c      	adds	r7, #28
 8004caa:	46bd      	mov	sp, r7
 8004cac:	bc80      	pop	{r7}
 8004cae:	4770      	bx	lr
 8004cb0:	40012c00 	.word	0x40012c00

08004cb4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004cb4:	b480      	push	{r7}
 8004cb6:	b087      	sub	sp, #28
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	60f8      	str	r0, [r7, #12]
 8004cbc:	60b9      	str	r1, [r7, #8]
 8004cbe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004cc0:	68bb      	ldr	r3, [r7, #8]
 8004cc2:	f003 031f 	and.w	r3, r3, #31
 8004cc6:	2201      	movs	r2, #1
 8004cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8004ccc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	6a1a      	ldr	r2, [r3, #32]
 8004cd2:	697b      	ldr	r3, [r7, #20]
 8004cd4:	43db      	mvns	r3, r3
 8004cd6:	401a      	ands	r2, r3
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	6a1a      	ldr	r2, [r3, #32]
 8004ce0:	68bb      	ldr	r3, [r7, #8]
 8004ce2:	f003 031f 	and.w	r3, r3, #31
 8004ce6:	6879      	ldr	r1, [r7, #4]
 8004ce8:	fa01 f303 	lsl.w	r3, r1, r3
 8004cec:	431a      	orrs	r2, r3
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	621a      	str	r2, [r3, #32]
}
 8004cf2:	bf00      	nop
 8004cf4:	371c      	adds	r7, #28
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	bc80      	pop	{r7}
 8004cfa:	4770      	bx	lr

08004cfc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004cfc:	b480      	push	{r7}
 8004cfe:	b085      	sub	sp, #20
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6078      	str	r0, [r7, #4]
 8004d04:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d0c:	2b01      	cmp	r3, #1
 8004d0e:	d101      	bne.n	8004d14 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004d10:	2302      	movs	r3, #2
 8004d12:	e046      	b.n	8004da2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2201      	movs	r2, #1
 8004d18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2202      	movs	r2, #2
 8004d20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	685b      	ldr	r3, [r3, #4]
 8004d2a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	689b      	ldr	r3, [r3, #8]
 8004d32:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d3a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004d3c:	683b      	ldr	r3, [r7, #0]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	68fa      	ldr	r2, [r7, #12]
 8004d42:	4313      	orrs	r3, r2
 8004d44:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	68fa      	ldr	r2, [r7, #12]
 8004d4c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	4a16      	ldr	r2, [pc, #88]	; (8004dac <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004d54:	4293      	cmp	r3, r2
 8004d56:	d00e      	beq.n	8004d76 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d60:	d009      	beq.n	8004d76 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	4a12      	ldr	r2, [pc, #72]	; (8004db0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004d68:	4293      	cmp	r3, r2
 8004d6a:	d004      	beq.n	8004d76 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	4a10      	ldr	r2, [pc, #64]	; (8004db4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004d72:	4293      	cmp	r3, r2
 8004d74:	d10c      	bne.n	8004d90 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004d76:	68bb      	ldr	r3, [r7, #8]
 8004d78:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004d7c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004d7e:	683b      	ldr	r3, [r7, #0]
 8004d80:	685b      	ldr	r3, [r3, #4]
 8004d82:	68ba      	ldr	r2, [r7, #8]
 8004d84:	4313      	orrs	r3, r2
 8004d86:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	68ba      	ldr	r2, [r7, #8]
 8004d8e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2201      	movs	r2, #1
 8004d94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004da0:	2300      	movs	r3, #0
}
 8004da2:	4618      	mov	r0, r3
 8004da4:	3714      	adds	r7, #20
 8004da6:	46bd      	mov	sp, r7
 8004da8:	bc80      	pop	{r7}
 8004daa:	4770      	bx	lr
 8004dac:	40012c00 	.word	0x40012c00
 8004db0:	40000400 	.word	0x40000400
 8004db4:	40000800 	.word	0x40000800

08004db8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004db8:	b480      	push	{r7}
 8004dba:	b085      	sub	sp, #20
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	6078      	str	r0, [r7, #4]
 8004dc0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004dc2:	2300      	movs	r3, #0
 8004dc4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004dcc:	2b01      	cmp	r3, #1
 8004dce:	d101      	bne.n	8004dd4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004dd0:	2302      	movs	r3, #2
 8004dd2:	e03d      	b.n	8004e50 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2201      	movs	r2, #1
 8004dd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004de2:	683b      	ldr	r3, [r7, #0]
 8004de4:	68db      	ldr	r3, [r3, #12]
 8004de6:	4313      	orrs	r3, r2
 8004de8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004df0:	683b      	ldr	r3, [r7, #0]
 8004df2:	689b      	ldr	r3, [r3, #8]
 8004df4:	4313      	orrs	r3, r2
 8004df6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004dfe:	683b      	ldr	r3, [r7, #0]
 8004e00:	685b      	ldr	r3, [r3, #4]
 8004e02:	4313      	orrs	r3, r2
 8004e04:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004e0c:	683b      	ldr	r3, [r7, #0]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	4313      	orrs	r3, r2
 8004e12:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004e1a:	683b      	ldr	r3, [r7, #0]
 8004e1c:	691b      	ldr	r3, [r3, #16]
 8004e1e:	4313      	orrs	r3, r2
 8004e20:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004e28:	683b      	ldr	r3, [r7, #0]
 8004e2a:	695b      	ldr	r3, [r3, #20]
 8004e2c:	4313      	orrs	r3, r2
 8004e2e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004e36:	683b      	ldr	r3, [r7, #0]
 8004e38:	69db      	ldr	r3, [r3, #28]
 8004e3a:	4313      	orrs	r3, r2
 8004e3c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	68fa      	ldr	r2, [r7, #12]
 8004e44:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	2200      	movs	r2, #0
 8004e4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004e4e:	2300      	movs	r3, #0
}
 8004e50:	4618      	mov	r0, r3
 8004e52:	3714      	adds	r7, #20
 8004e54:	46bd      	mov	sp, r7
 8004e56:	bc80      	pop	{r7}
 8004e58:	4770      	bx	lr

08004e5a <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004e5a:	b580      	push	{r7, lr}
 8004e5c:	b082      	sub	sp, #8
 8004e5e:	af00      	add	r7, sp, #0
 8004e60:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d101      	bne.n	8004e6c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004e68:	2301      	movs	r3, #1
 8004e6a:	e03f      	b.n	8004eec <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e72:	b2db      	uxtb	r3, r3
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d106      	bne.n	8004e86 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004e80:	6878      	ldr	r0, [r7, #4]
 8004e82:	f7fc fe33 	bl	8001aec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	2224      	movs	r2, #36	; 0x24
 8004e8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	68da      	ldr	r2, [r3, #12]
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004e9c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004e9e:	6878      	ldr	r0, [r7, #4]
 8004ea0:	f000 fba0 	bl	80055e4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	691a      	ldr	r2, [r3, #16]
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004eb2:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	695a      	ldr	r2, [r3, #20]
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004ec2:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	68da      	ldr	r2, [r3, #12]
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004ed2:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2200      	movs	r2, #0
 8004ed8:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	2220      	movs	r2, #32
 8004ede:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	2220      	movs	r2, #32
 8004ee6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004eea:	2300      	movs	r3, #0
}
 8004eec:	4618      	mov	r0, r3
 8004eee:	3708      	adds	r7, #8
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	bd80      	pop	{r7, pc}

08004ef4 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004ef4:	b580      	push	{r7, lr}
 8004ef6:	b084      	sub	sp, #16
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	60f8      	str	r0, [r7, #12]
 8004efc:	60b9      	str	r1, [r7, #8]
 8004efe:	4613      	mov	r3, r2
 8004f00:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004f08:	b2db      	uxtb	r3, r3
 8004f0a:	2b20      	cmp	r3, #32
 8004f0c:	d11d      	bne.n	8004f4a <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8004f0e:	68bb      	ldr	r3, [r7, #8]
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d002      	beq.n	8004f1a <HAL_UART_Receive_IT+0x26>
 8004f14:	88fb      	ldrh	r3, [r7, #6]
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d101      	bne.n	8004f1e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004f1a:	2301      	movs	r3, #1
 8004f1c:	e016      	b.n	8004f4c <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f24:	2b01      	cmp	r3, #1
 8004f26:	d101      	bne.n	8004f2c <HAL_UART_Receive_IT+0x38>
 8004f28:	2302      	movs	r3, #2
 8004f2a:	e00f      	b.n	8004f4c <HAL_UART_Receive_IT+0x58>
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	2201      	movs	r2, #1
 8004f30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	2200      	movs	r2, #0
 8004f38:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8004f3a:	88fb      	ldrh	r3, [r7, #6]
 8004f3c:	461a      	mov	r2, r3
 8004f3e:	68b9      	ldr	r1, [r7, #8]
 8004f40:	68f8      	ldr	r0, [r7, #12]
 8004f42:	f000 f9c5 	bl	80052d0 <UART_Start_Receive_IT>
 8004f46:	4603      	mov	r3, r0
 8004f48:	e000      	b.n	8004f4c <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8004f4a:	2302      	movs	r3, #2
  }
}
 8004f4c:	4618      	mov	r0, r3
 8004f4e:	3710      	adds	r7, #16
 8004f50:	46bd      	mov	sp, r7
 8004f52:	bd80      	pop	{r7, pc}

08004f54 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004f54:	b580      	push	{r7, lr}
 8004f56:	b08a      	sub	sp, #40	; 0x28
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	68db      	ldr	r3, [r3, #12]
 8004f6a:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	695b      	ldr	r3, [r3, #20]
 8004f72:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8004f74:	2300      	movs	r3, #0
 8004f76:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8004f78:	2300      	movs	r3, #0
 8004f7a:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f7e:	f003 030f 	and.w	r3, r3, #15
 8004f82:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8004f84:	69bb      	ldr	r3, [r7, #24]
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d10d      	bne.n	8004fa6 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f8c:	f003 0320 	and.w	r3, r3, #32
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d008      	beq.n	8004fa6 <HAL_UART_IRQHandler+0x52>
 8004f94:	6a3b      	ldr	r3, [r7, #32]
 8004f96:	f003 0320 	and.w	r3, r3, #32
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d003      	beq.n	8004fa6 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8004f9e:	6878      	ldr	r0, [r7, #4]
 8004fa0:	f000 fa76 	bl	8005490 <UART_Receive_IT>
      return;
 8004fa4:	e17b      	b.n	800529e <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004fa6:	69bb      	ldr	r3, [r7, #24]
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	f000 80b1 	beq.w	8005110 <HAL_UART_IRQHandler+0x1bc>
 8004fae:	69fb      	ldr	r3, [r7, #28]
 8004fb0:	f003 0301 	and.w	r3, r3, #1
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d105      	bne.n	8004fc4 <HAL_UART_IRQHandler+0x70>
 8004fb8:	6a3b      	ldr	r3, [r7, #32]
 8004fba:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	f000 80a6 	beq.w	8005110 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fc6:	f003 0301 	and.w	r3, r3, #1
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d00a      	beq.n	8004fe4 <HAL_UART_IRQHandler+0x90>
 8004fce:	6a3b      	ldr	r3, [r7, #32]
 8004fd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d005      	beq.n	8004fe4 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fdc:	f043 0201 	orr.w	r2, r3, #1
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fe6:	f003 0304 	and.w	r3, r3, #4
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d00a      	beq.n	8005004 <HAL_UART_IRQHandler+0xb0>
 8004fee:	69fb      	ldr	r3, [r7, #28]
 8004ff0:	f003 0301 	and.w	r3, r3, #1
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d005      	beq.n	8005004 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ffc:	f043 0202 	orr.w	r2, r3, #2
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005006:	f003 0302 	and.w	r3, r3, #2
 800500a:	2b00      	cmp	r3, #0
 800500c:	d00a      	beq.n	8005024 <HAL_UART_IRQHandler+0xd0>
 800500e:	69fb      	ldr	r3, [r7, #28]
 8005010:	f003 0301 	and.w	r3, r3, #1
 8005014:	2b00      	cmp	r3, #0
 8005016:	d005      	beq.n	8005024 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800501c:	f043 0204 	orr.w	r2, r3, #4
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8005024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005026:	f003 0308 	and.w	r3, r3, #8
 800502a:	2b00      	cmp	r3, #0
 800502c:	d00f      	beq.n	800504e <HAL_UART_IRQHandler+0xfa>
 800502e:	6a3b      	ldr	r3, [r7, #32]
 8005030:	f003 0320 	and.w	r3, r3, #32
 8005034:	2b00      	cmp	r3, #0
 8005036:	d104      	bne.n	8005042 <HAL_UART_IRQHandler+0xee>
 8005038:	69fb      	ldr	r3, [r7, #28]
 800503a:	f003 0301 	and.w	r3, r3, #1
 800503e:	2b00      	cmp	r3, #0
 8005040:	d005      	beq.n	800504e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005046:	f043 0208 	orr.w	r2, r3, #8
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005052:	2b00      	cmp	r3, #0
 8005054:	f000 811e 	beq.w	8005294 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800505a:	f003 0320 	and.w	r3, r3, #32
 800505e:	2b00      	cmp	r3, #0
 8005060:	d007      	beq.n	8005072 <HAL_UART_IRQHandler+0x11e>
 8005062:	6a3b      	ldr	r3, [r7, #32]
 8005064:	f003 0320 	and.w	r3, r3, #32
 8005068:	2b00      	cmp	r3, #0
 800506a:	d002      	beq.n	8005072 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 800506c:	6878      	ldr	r0, [r7, #4]
 800506e:	f000 fa0f 	bl	8005490 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	695b      	ldr	r3, [r3, #20]
 8005078:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800507c:	2b00      	cmp	r3, #0
 800507e:	bf14      	ite	ne
 8005080:	2301      	movne	r3, #1
 8005082:	2300      	moveq	r3, #0
 8005084:	b2db      	uxtb	r3, r3
 8005086:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800508c:	f003 0308 	and.w	r3, r3, #8
 8005090:	2b00      	cmp	r3, #0
 8005092:	d102      	bne.n	800509a <HAL_UART_IRQHandler+0x146>
 8005094:	697b      	ldr	r3, [r7, #20]
 8005096:	2b00      	cmp	r3, #0
 8005098:	d031      	beq.n	80050fe <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800509a:	6878      	ldr	r0, [r7, #4]
 800509c:	f000 f951 	bl	8005342 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	695b      	ldr	r3, [r3, #20]
 80050a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d023      	beq.n	80050f6 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	695a      	ldr	r2, [r3, #20]
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80050bc:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d013      	beq.n	80050ee <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050ca:	4a76      	ldr	r2, [pc, #472]	; (80052a4 <HAL_UART_IRQHandler+0x350>)
 80050cc:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050d2:	4618      	mov	r0, r3
 80050d4:	f7fd fba6 	bl	8002824 <HAL_DMA_Abort_IT>
 80050d8:	4603      	mov	r3, r0
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d016      	beq.n	800510c <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050e4:	687a      	ldr	r2, [r7, #4]
 80050e6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80050e8:	4610      	mov	r0, r2
 80050ea:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050ec:	e00e      	b.n	800510c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80050ee:	6878      	ldr	r0, [r7, #4]
 80050f0:	f000 f8da 	bl	80052a8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050f4:	e00a      	b.n	800510c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80050f6:	6878      	ldr	r0, [r7, #4]
 80050f8:	f000 f8d6 	bl	80052a8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050fc:	e006      	b.n	800510c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80050fe:	6878      	ldr	r0, [r7, #4]
 8005100:	f000 f8d2 	bl	80052a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2200      	movs	r2, #0
 8005108:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800510a:	e0c3      	b.n	8005294 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800510c:	bf00      	nop
    return;
 800510e:	e0c1      	b.n	8005294 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005114:	2b01      	cmp	r3, #1
 8005116:	f040 80a1 	bne.w	800525c <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 800511a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800511c:	f003 0310 	and.w	r3, r3, #16
 8005120:	2b00      	cmp	r3, #0
 8005122:	f000 809b 	beq.w	800525c <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8005126:	6a3b      	ldr	r3, [r7, #32]
 8005128:	f003 0310 	and.w	r3, r3, #16
 800512c:	2b00      	cmp	r3, #0
 800512e:	f000 8095 	beq.w	800525c <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005132:	2300      	movs	r3, #0
 8005134:	60fb      	str	r3, [r7, #12]
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	60fb      	str	r3, [r7, #12]
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	685b      	ldr	r3, [r3, #4]
 8005144:	60fb      	str	r3, [r7, #12]
 8005146:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	695b      	ldr	r3, [r3, #20]
 800514e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005152:	2b00      	cmp	r3, #0
 8005154:	d04e      	beq.n	80051f4 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	685b      	ldr	r3, [r3, #4]
 800515e:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8005160:	8a3b      	ldrh	r3, [r7, #16]
 8005162:	2b00      	cmp	r3, #0
 8005164:	f000 8098 	beq.w	8005298 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800516c:	8a3a      	ldrh	r2, [r7, #16]
 800516e:	429a      	cmp	r2, r3
 8005170:	f080 8092 	bcs.w	8005298 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	8a3a      	ldrh	r2, [r7, #16]
 8005178:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800517e:	699b      	ldr	r3, [r3, #24]
 8005180:	2b20      	cmp	r3, #32
 8005182:	d02b      	beq.n	80051dc <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	68da      	ldr	r2, [r3, #12]
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005192:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	695a      	ldr	r2, [r3, #20]
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f022 0201 	bic.w	r2, r2, #1
 80051a2:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	695a      	ldr	r2, [r3, #20]
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80051b2:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	2220      	movs	r2, #32
 80051b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2200      	movs	r2, #0
 80051c0:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	68da      	ldr	r2, [r3, #12]
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f022 0210 	bic.w	r2, r2, #16
 80051d0:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051d6:	4618      	mov	r0, r3
 80051d8:	f7fd fae9 	bl	80027ae <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80051e4:	b29b      	uxth	r3, r3
 80051e6:	1ad3      	subs	r3, r2, r3
 80051e8:	b29b      	uxth	r3, r3
 80051ea:	4619      	mov	r1, r3
 80051ec:	6878      	ldr	r0, [r7, #4]
 80051ee:	f000 f864 	bl	80052ba <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80051f2:	e051      	b.n	8005298 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80051fc:	b29b      	uxth	r3, r3
 80051fe:	1ad3      	subs	r3, r2, r3
 8005200:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005206:	b29b      	uxth	r3, r3
 8005208:	2b00      	cmp	r3, #0
 800520a:	d047      	beq.n	800529c <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 800520c:	8a7b      	ldrh	r3, [r7, #18]
 800520e:	2b00      	cmp	r3, #0
 8005210:	d044      	beq.n	800529c <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	68da      	ldr	r2, [r3, #12]
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005220:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	695a      	ldr	r2, [r3, #20]
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f022 0201 	bic.w	r2, r2, #1
 8005230:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	2220      	movs	r2, #32
 8005236:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	2200      	movs	r2, #0
 800523e:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	68da      	ldr	r2, [r3, #12]
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	f022 0210 	bic.w	r2, r2, #16
 800524e:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005250:	8a7b      	ldrh	r3, [r7, #18]
 8005252:	4619      	mov	r1, r3
 8005254:	6878      	ldr	r0, [r7, #4]
 8005256:	f000 f830 	bl	80052ba <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800525a:	e01f      	b.n	800529c <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800525c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800525e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005262:	2b00      	cmp	r3, #0
 8005264:	d008      	beq.n	8005278 <HAL_UART_IRQHandler+0x324>
 8005266:	6a3b      	ldr	r3, [r7, #32]
 8005268:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800526c:	2b00      	cmp	r3, #0
 800526e:	d003      	beq.n	8005278 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8005270:	6878      	ldr	r0, [r7, #4]
 8005272:	f000 f8a6 	bl	80053c2 <UART_Transmit_IT>
    return;
 8005276:	e012      	b.n	800529e <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800527a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800527e:	2b00      	cmp	r3, #0
 8005280:	d00d      	beq.n	800529e <HAL_UART_IRQHandler+0x34a>
 8005282:	6a3b      	ldr	r3, [r7, #32]
 8005284:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005288:	2b00      	cmp	r3, #0
 800528a:	d008      	beq.n	800529e <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 800528c:	6878      	ldr	r0, [r7, #4]
 800528e:	f000 f8e7 	bl	8005460 <UART_EndTransmit_IT>
    return;
 8005292:	e004      	b.n	800529e <HAL_UART_IRQHandler+0x34a>
    return;
 8005294:	bf00      	nop
 8005296:	e002      	b.n	800529e <HAL_UART_IRQHandler+0x34a>
      return;
 8005298:	bf00      	nop
 800529a:	e000      	b.n	800529e <HAL_UART_IRQHandler+0x34a>
      return;
 800529c:	bf00      	nop
  }
}
 800529e:	3728      	adds	r7, #40	; 0x28
 80052a0:	46bd      	mov	sp, r7
 80052a2:	bd80      	pop	{r7, pc}
 80052a4:	0800539b 	.word	0x0800539b

080052a8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80052a8:	b480      	push	{r7}
 80052aa:	b083      	sub	sp, #12
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80052b0:	bf00      	nop
 80052b2:	370c      	adds	r7, #12
 80052b4:	46bd      	mov	sp, r7
 80052b6:	bc80      	pop	{r7}
 80052b8:	4770      	bx	lr

080052ba <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80052ba:	b480      	push	{r7}
 80052bc:	b083      	sub	sp, #12
 80052be:	af00      	add	r7, sp, #0
 80052c0:	6078      	str	r0, [r7, #4]
 80052c2:	460b      	mov	r3, r1
 80052c4:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80052c6:	bf00      	nop
 80052c8:	370c      	adds	r7, #12
 80052ca:	46bd      	mov	sp, r7
 80052cc:	bc80      	pop	{r7}
 80052ce:	4770      	bx	lr

080052d0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80052d0:	b480      	push	{r7}
 80052d2:	b085      	sub	sp, #20
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	60f8      	str	r0, [r7, #12]
 80052d8:	60b9      	str	r1, [r7, #8]
 80052da:	4613      	mov	r3, r2
 80052dc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	68ba      	ldr	r2, [r7, #8]
 80052e2:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	88fa      	ldrh	r2, [r7, #6]
 80052e8:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	88fa      	ldrh	r2, [r7, #6]
 80052ee:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	2200      	movs	r2, #0
 80052f4:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	2222      	movs	r2, #34	; 0x22
 80052fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	2200      	movs	r2, #0
 8005302:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	68da      	ldr	r2, [r3, #12]
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005314:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	695a      	ldr	r2, [r3, #20]
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f042 0201 	orr.w	r2, r2, #1
 8005324:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	68da      	ldr	r2, [r3, #12]
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f042 0220 	orr.w	r2, r2, #32
 8005334:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005336:	2300      	movs	r3, #0
}
 8005338:	4618      	mov	r0, r3
 800533a:	3714      	adds	r7, #20
 800533c:	46bd      	mov	sp, r7
 800533e:	bc80      	pop	{r7}
 8005340:	4770      	bx	lr

08005342 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005342:	b480      	push	{r7}
 8005344:	b083      	sub	sp, #12
 8005346:	af00      	add	r7, sp, #0
 8005348:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	68da      	ldr	r2, [r3, #12]
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005358:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	695a      	ldr	r2, [r3, #20]
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f022 0201 	bic.w	r2, r2, #1
 8005368:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800536e:	2b01      	cmp	r3, #1
 8005370:	d107      	bne.n	8005382 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	68da      	ldr	r2, [r3, #12]
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f022 0210 	bic.w	r2, r2, #16
 8005380:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	2220      	movs	r2, #32
 8005386:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	2200      	movs	r2, #0
 800538e:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005390:	bf00      	nop
 8005392:	370c      	adds	r7, #12
 8005394:	46bd      	mov	sp, r7
 8005396:	bc80      	pop	{r7}
 8005398:	4770      	bx	lr

0800539a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800539a:	b580      	push	{r7, lr}
 800539c:	b084      	sub	sp, #16
 800539e:	af00      	add	r7, sp, #0
 80053a0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053a6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	2200      	movs	r2, #0
 80053ac:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	2200      	movs	r2, #0
 80053b2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80053b4:	68f8      	ldr	r0, [r7, #12]
 80053b6:	f7ff ff77 	bl	80052a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80053ba:	bf00      	nop
 80053bc:	3710      	adds	r7, #16
 80053be:	46bd      	mov	sp, r7
 80053c0:	bd80      	pop	{r7, pc}

080053c2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80053c2:	b480      	push	{r7}
 80053c4:	b085      	sub	sp, #20
 80053c6:	af00      	add	r7, sp, #0
 80053c8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053d0:	b2db      	uxtb	r3, r3
 80053d2:	2b21      	cmp	r3, #33	; 0x21
 80053d4:	d13e      	bne.n	8005454 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	689b      	ldr	r3, [r3, #8]
 80053da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80053de:	d114      	bne.n	800540a <UART_Transmit_IT+0x48>
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	691b      	ldr	r3, [r3, #16]
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d110      	bne.n	800540a <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	6a1b      	ldr	r3, [r3, #32]
 80053ec:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	881b      	ldrh	r3, [r3, #0]
 80053f2:	461a      	mov	r2, r3
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80053fc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	6a1b      	ldr	r3, [r3, #32]
 8005402:	1c9a      	adds	r2, r3, #2
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	621a      	str	r2, [r3, #32]
 8005408:	e008      	b.n	800541c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	6a1b      	ldr	r3, [r3, #32]
 800540e:	1c59      	adds	r1, r3, #1
 8005410:	687a      	ldr	r2, [r7, #4]
 8005412:	6211      	str	r1, [r2, #32]
 8005414:	781a      	ldrb	r2, [r3, #0]
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005420:	b29b      	uxth	r3, r3
 8005422:	3b01      	subs	r3, #1
 8005424:	b29b      	uxth	r3, r3
 8005426:	687a      	ldr	r2, [r7, #4]
 8005428:	4619      	mov	r1, r3
 800542a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800542c:	2b00      	cmp	r3, #0
 800542e:	d10f      	bne.n	8005450 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	68da      	ldr	r2, [r3, #12]
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800543e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	68da      	ldr	r2, [r3, #12]
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800544e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005450:	2300      	movs	r3, #0
 8005452:	e000      	b.n	8005456 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005454:	2302      	movs	r3, #2
  }
}
 8005456:	4618      	mov	r0, r3
 8005458:	3714      	adds	r7, #20
 800545a:	46bd      	mov	sp, r7
 800545c:	bc80      	pop	{r7}
 800545e:	4770      	bx	lr

08005460 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005460:	b580      	push	{r7, lr}
 8005462:	b082      	sub	sp, #8
 8005464:	af00      	add	r7, sp, #0
 8005466:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	68da      	ldr	r2, [r3, #12]
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005476:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	2220      	movs	r2, #32
 800547c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005480:	6878      	ldr	r0, [r7, #4]
 8005482:	f7fc f94f 	bl	8001724 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005486:	2300      	movs	r3, #0
}
 8005488:	4618      	mov	r0, r3
 800548a:	3708      	adds	r7, #8
 800548c:	46bd      	mov	sp, r7
 800548e:	bd80      	pop	{r7, pc}

08005490 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005490:	b580      	push	{r7, lr}
 8005492:	b086      	sub	sp, #24
 8005494:	af00      	add	r7, sp, #0
 8005496:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800549e:	b2db      	uxtb	r3, r3
 80054a0:	2b22      	cmp	r3, #34	; 0x22
 80054a2:	f040 8099 	bne.w	80055d8 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	689b      	ldr	r3, [r3, #8]
 80054aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054ae:	d117      	bne.n	80054e0 <UART_Receive_IT+0x50>
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	691b      	ldr	r3, [r3, #16]
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d113      	bne.n	80054e0 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80054b8:	2300      	movs	r3, #0
 80054ba:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054c0:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	685b      	ldr	r3, [r3, #4]
 80054c8:	b29b      	uxth	r3, r3
 80054ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80054ce:	b29a      	uxth	r2, r3
 80054d0:	693b      	ldr	r3, [r7, #16]
 80054d2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054d8:	1c9a      	adds	r2, r3, #2
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	629a      	str	r2, [r3, #40]	; 0x28
 80054de:	e026      	b.n	800552e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054e4:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 80054e6:	2300      	movs	r3, #0
 80054e8:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	689b      	ldr	r3, [r3, #8]
 80054ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054f2:	d007      	beq.n	8005504 <UART_Receive_IT+0x74>
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	689b      	ldr	r3, [r3, #8]
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d10a      	bne.n	8005512 <UART_Receive_IT+0x82>
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	691b      	ldr	r3, [r3, #16]
 8005500:	2b00      	cmp	r3, #0
 8005502:	d106      	bne.n	8005512 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	685b      	ldr	r3, [r3, #4]
 800550a:	b2da      	uxtb	r2, r3
 800550c:	697b      	ldr	r3, [r7, #20]
 800550e:	701a      	strb	r2, [r3, #0]
 8005510:	e008      	b.n	8005524 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	685b      	ldr	r3, [r3, #4]
 8005518:	b2db      	uxtb	r3, r3
 800551a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800551e:	b2da      	uxtb	r2, r3
 8005520:	697b      	ldr	r3, [r7, #20]
 8005522:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005528:	1c5a      	adds	r2, r3, #1
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005532:	b29b      	uxth	r3, r3
 8005534:	3b01      	subs	r3, #1
 8005536:	b29b      	uxth	r3, r3
 8005538:	687a      	ldr	r2, [r7, #4]
 800553a:	4619      	mov	r1, r3
 800553c:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800553e:	2b00      	cmp	r3, #0
 8005540:	d148      	bne.n	80055d4 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	68da      	ldr	r2, [r3, #12]
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f022 0220 	bic.w	r2, r2, #32
 8005550:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	68da      	ldr	r2, [r3, #12]
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005560:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	695a      	ldr	r2, [r3, #20]
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f022 0201 	bic.w	r2, r2, #1
 8005570:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	2220      	movs	r2, #32
 8005576:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800557e:	2b01      	cmp	r3, #1
 8005580:	d123      	bne.n	80055ca <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	2200      	movs	r2, #0
 8005586:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	68da      	ldr	r2, [r3, #12]
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f022 0210 	bic.w	r2, r2, #16
 8005596:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	f003 0310 	and.w	r3, r3, #16
 80055a2:	2b10      	cmp	r3, #16
 80055a4:	d10a      	bne.n	80055bc <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80055a6:	2300      	movs	r3, #0
 80055a8:	60fb      	str	r3, [r7, #12]
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	60fb      	str	r3, [r7, #12]
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	685b      	ldr	r3, [r3, #4]
 80055b8:	60fb      	str	r3, [r7, #12]
 80055ba:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80055c0:	4619      	mov	r1, r3
 80055c2:	6878      	ldr	r0, [r7, #4]
 80055c4:	f7ff fe79 	bl	80052ba <HAL_UARTEx_RxEventCallback>
 80055c8:	e002      	b.n	80055d0 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 80055ca:	6878      	ldr	r0, [r7, #4]
 80055cc:	f7fc f88c 	bl	80016e8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80055d0:	2300      	movs	r3, #0
 80055d2:	e002      	b.n	80055da <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 80055d4:	2300      	movs	r3, #0
 80055d6:	e000      	b.n	80055da <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 80055d8:	2302      	movs	r3, #2
  }
}
 80055da:	4618      	mov	r0, r3
 80055dc:	3718      	adds	r7, #24
 80055de:	46bd      	mov	sp, r7
 80055e0:	bd80      	pop	{r7, pc}
	...

080055e4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80055e4:	b580      	push	{r7, lr}
 80055e6:	b084      	sub	sp, #16
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	691b      	ldr	r3, [r3, #16]
 80055f2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	68da      	ldr	r2, [r3, #12]
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	430a      	orrs	r2, r1
 8005600:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	689a      	ldr	r2, [r3, #8]
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	691b      	ldr	r3, [r3, #16]
 800560a:	431a      	orrs	r2, r3
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	695b      	ldr	r3, [r3, #20]
 8005610:	4313      	orrs	r3, r2
 8005612:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	68db      	ldr	r3, [r3, #12]
 800561a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800561e:	f023 030c 	bic.w	r3, r3, #12
 8005622:	687a      	ldr	r2, [r7, #4]
 8005624:	6812      	ldr	r2, [r2, #0]
 8005626:	68b9      	ldr	r1, [r7, #8]
 8005628:	430b      	orrs	r3, r1
 800562a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	695b      	ldr	r3, [r3, #20]
 8005632:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	699a      	ldr	r2, [r3, #24]
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	430a      	orrs	r2, r1
 8005640:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	4a2c      	ldr	r2, [pc, #176]	; (80056f8 <UART_SetConfig+0x114>)
 8005648:	4293      	cmp	r3, r2
 800564a:	d103      	bne.n	8005654 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800564c:	f7fd fffc 	bl	8003648 <HAL_RCC_GetPCLK2Freq>
 8005650:	60f8      	str	r0, [r7, #12]
 8005652:	e002      	b.n	800565a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005654:	f7fd ffe4 	bl	8003620 <HAL_RCC_GetPCLK1Freq>
 8005658:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800565a:	68fa      	ldr	r2, [r7, #12]
 800565c:	4613      	mov	r3, r2
 800565e:	009b      	lsls	r3, r3, #2
 8005660:	4413      	add	r3, r2
 8005662:	009a      	lsls	r2, r3, #2
 8005664:	441a      	add	r2, r3
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	685b      	ldr	r3, [r3, #4]
 800566a:	009b      	lsls	r3, r3, #2
 800566c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005670:	4a22      	ldr	r2, [pc, #136]	; (80056fc <UART_SetConfig+0x118>)
 8005672:	fba2 2303 	umull	r2, r3, r2, r3
 8005676:	095b      	lsrs	r3, r3, #5
 8005678:	0119      	lsls	r1, r3, #4
 800567a:	68fa      	ldr	r2, [r7, #12]
 800567c:	4613      	mov	r3, r2
 800567e:	009b      	lsls	r3, r3, #2
 8005680:	4413      	add	r3, r2
 8005682:	009a      	lsls	r2, r3, #2
 8005684:	441a      	add	r2, r3
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	685b      	ldr	r3, [r3, #4]
 800568a:	009b      	lsls	r3, r3, #2
 800568c:	fbb2 f2f3 	udiv	r2, r2, r3
 8005690:	4b1a      	ldr	r3, [pc, #104]	; (80056fc <UART_SetConfig+0x118>)
 8005692:	fba3 0302 	umull	r0, r3, r3, r2
 8005696:	095b      	lsrs	r3, r3, #5
 8005698:	2064      	movs	r0, #100	; 0x64
 800569a:	fb00 f303 	mul.w	r3, r0, r3
 800569e:	1ad3      	subs	r3, r2, r3
 80056a0:	011b      	lsls	r3, r3, #4
 80056a2:	3332      	adds	r3, #50	; 0x32
 80056a4:	4a15      	ldr	r2, [pc, #84]	; (80056fc <UART_SetConfig+0x118>)
 80056a6:	fba2 2303 	umull	r2, r3, r2, r3
 80056aa:	095b      	lsrs	r3, r3, #5
 80056ac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80056b0:	4419      	add	r1, r3
 80056b2:	68fa      	ldr	r2, [r7, #12]
 80056b4:	4613      	mov	r3, r2
 80056b6:	009b      	lsls	r3, r3, #2
 80056b8:	4413      	add	r3, r2
 80056ba:	009a      	lsls	r2, r3, #2
 80056bc:	441a      	add	r2, r3
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	685b      	ldr	r3, [r3, #4]
 80056c2:	009b      	lsls	r3, r3, #2
 80056c4:	fbb2 f2f3 	udiv	r2, r2, r3
 80056c8:	4b0c      	ldr	r3, [pc, #48]	; (80056fc <UART_SetConfig+0x118>)
 80056ca:	fba3 0302 	umull	r0, r3, r3, r2
 80056ce:	095b      	lsrs	r3, r3, #5
 80056d0:	2064      	movs	r0, #100	; 0x64
 80056d2:	fb00 f303 	mul.w	r3, r0, r3
 80056d6:	1ad3      	subs	r3, r2, r3
 80056d8:	011b      	lsls	r3, r3, #4
 80056da:	3332      	adds	r3, #50	; 0x32
 80056dc:	4a07      	ldr	r2, [pc, #28]	; (80056fc <UART_SetConfig+0x118>)
 80056de:	fba2 2303 	umull	r2, r3, r2, r3
 80056e2:	095b      	lsrs	r3, r3, #5
 80056e4:	f003 020f 	and.w	r2, r3, #15
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	440a      	add	r2, r1
 80056ee:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80056f0:	bf00      	nop
 80056f2:	3710      	adds	r7, #16
 80056f4:	46bd      	mov	sp, r7
 80056f6:	bd80      	pop	{r7, pc}
 80056f8:	40013800 	.word	0x40013800
 80056fc:	51eb851f 	.word	0x51eb851f

08005700 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005700:	b084      	sub	sp, #16
 8005702:	b480      	push	{r7}
 8005704:	b083      	sub	sp, #12
 8005706:	af00      	add	r7, sp, #0
 8005708:	6078      	str	r0, [r7, #4]
 800570a:	f107 0014 	add.w	r0, r7, #20
 800570e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8005712:	2300      	movs	r3, #0
}
 8005714:	4618      	mov	r0, r3
 8005716:	370c      	adds	r7, #12
 8005718:	46bd      	mov	sp, r7
 800571a:	bc80      	pop	{r7}
 800571c:	b004      	add	sp, #16
 800571e:	4770      	bx	lr

08005720 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8005720:	b480      	push	{r7}
 8005722:	b085      	sub	sp, #20
 8005724:	af00      	add	r7, sp, #0
 8005726:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005728:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 800572c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005734:	b29a      	uxth	r2, r3
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	b29b      	uxth	r3, r3
 800573a:	43db      	mvns	r3, r3
 800573c:	b29b      	uxth	r3, r3
 800573e:	4013      	ands	r3, r2
 8005740:	b29a      	uxth	r2, r3
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005748:	2300      	movs	r3, #0
}
 800574a:	4618      	mov	r0, r3
 800574c:	3714      	adds	r7, #20
 800574e:	46bd      	mov	sp, r7
 8005750:	bc80      	pop	{r7}
 8005752:	4770      	bx	lr

08005754 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8005754:	b480      	push	{r7}
 8005756:	b083      	sub	sp, #12
 8005758:	af00      	add	r7, sp, #0
 800575a:	6078      	str	r0, [r7, #4]
 800575c:	460b      	mov	r3, r1
 800575e:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8005760:	2300      	movs	r3, #0
}
 8005762:	4618      	mov	r0, r3
 8005764:	370c      	adds	r7, #12
 8005766:	46bd      	mov	sp, r7
 8005768:	bc80      	pop	{r7}
 800576a:	4770      	bx	lr

0800576c <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800576c:	b084      	sub	sp, #16
 800576e:	b480      	push	{r7}
 8005770:	b083      	sub	sp, #12
 8005772:	af00      	add	r7, sp, #0
 8005774:	6078      	str	r0, [r7, #4]
 8005776:	f107 0014 	add.w	r0, r7, #20
 800577a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	2201      	movs	r2, #1
 8005782:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	2200      	movs	r2, #0
 800578a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	2200      	movs	r2, #0
 8005792:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	2200      	movs	r2, #0
 800579a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800579e:	2300      	movs	r3, #0
}
 80057a0:	4618      	mov	r0, r3
 80057a2:	370c      	adds	r7, #12
 80057a4:	46bd      	mov	sp, r7
 80057a6:	bc80      	pop	{r7}
 80057a8:	b004      	add	sp, #16
 80057aa:	4770      	bx	lr

080057ac <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 80057ac:	b480      	push	{r7}
 80057ae:	b083      	sub	sp, #12
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80057b4:	2300      	movs	r3, #0
}
 80057b6:	4618      	mov	r0, r3
 80057b8:	370c      	adds	r7, #12
 80057ba:	46bd      	mov	sp, r7
 80057bc:	bc80      	pop	{r7}
 80057be:	4770      	bx	lr

080057c0 <__errno>:
 80057c0:	4b01      	ldr	r3, [pc, #4]	; (80057c8 <__errno+0x8>)
 80057c2:	6818      	ldr	r0, [r3, #0]
 80057c4:	4770      	bx	lr
 80057c6:	bf00      	nop
 80057c8:	20000014 	.word	0x20000014

080057cc <__libc_init_array>:
 80057cc:	b570      	push	{r4, r5, r6, lr}
 80057ce:	2600      	movs	r6, #0
 80057d0:	4d0c      	ldr	r5, [pc, #48]	; (8005804 <__libc_init_array+0x38>)
 80057d2:	4c0d      	ldr	r4, [pc, #52]	; (8005808 <__libc_init_array+0x3c>)
 80057d4:	1b64      	subs	r4, r4, r5
 80057d6:	10a4      	asrs	r4, r4, #2
 80057d8:	42a6      	cmp	r6, r4
 80057da:	d109      	bne.n	80057f0 <__libc_init_array+0x24>
 80057dc:	f002 fefa 	bl	80085d4 <_init>
 80057e0:	2600      	movs	r6, #0
 80057e2:	4d0a      	ldr	r5, [pc, #40]	; (800580c <__libc_init_array+0x40>)
 80057e4:	4c0a      	ldr	r4, [pc, #40]	; (8005810 <__libc_init_array+0x44>)
 80057e6:	1b64      	subs	r4, r4, r5
 80057e8:	10a4      	asrs	r4, r4, #2
 80057ea:	42a6      	cmp	r6, r4
 80057ec:	d105      	bne.n	80057fa <__libc_init_array+0x2e>
 80057ee:	bd70      	pop	{r4, r5, r6, pc}
 80057f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80057f4:	4798      	blx	r3
 80057f6:	3601      	adds	r6, #1
 80057f8:	e7ee      	b.n	80057d8 <__libc_init_array+0xc>
 80057fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80057fe:	4798      	blx	r3
 8005800:	3601      	adds	r6, #1
 8005802:	e7f2      	b.n	80057ea <__libc_init_array+0x1e>
 8005804:	08008f1c 	.word	0x08008f1c
 8005808:	08008f1c 	.word	0x08008f1c
 800580c:	08008f1c 	.word	0x08008f1c
 8005810:	08008f20 	.word	0x08008f20

08005814 <memcpy>:
 8005814:	440a      	add	r2, r1
 8005816:	4291      	cmp	r1, r2
 8005818:	f100 33ff 	add.w	r3, r0, #4294967295
 800581c:	d100      	bne.n	8005820 <memcpy+0xc>
 800581e:	4770      	bx	lr
 8005820:	b510      	push	{r4, lr}
 8005822:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005826:	4291      	cmp	r1, r2
 8005828:	f803 4f01 	strb.w	r4, [r3, #1]!
 800582c:	d1f9      	bne.n	8005822 <memcpy+0xe>
 800582e:	bd10      	pop	{r4, pc}

08005830 <memset>:
 8005830:	4603      	mov	r3, r0
 8005832:	4402      	add	r2, r0
 8005834:	4293      	cmp	r3, r2
 8005836:	d100      	bne.n	800583a <memset+0xa>
 8005838:	4770      	bx	lr
 800583a:	f803 1b01 	strb.w	r1, [r3], #1
 800583e:	e7f9      	b.n	8005834 <memset+0x4>

08005840 <__cvt>:
 8005840:	2b00      	cmp	r3, #0
 8005842:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005846:	461f      	mov	r7, r3
 8005848:	bfbb      	ittet	lt
 800584a:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800584e:	461f      	movlt	r7, r3
 8005850:	2300      	movge	r3, #0
 8005852:	232d      	movlt	r3, #45	; 0x2d
 8005854:	b088      	sub	sp, #32
 8005856:	4614      	mov	r4, r2
 8005858:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800585a:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800585c:	7013      	strb	r3, [r2, #0]
 800585e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005860:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8005864:	f023 0820 	bic.w	r8, r3, #32
 8005868:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800586c:	d005      	beq.n	800587a <__cvt+0x3a>
 800586e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005872:	d100      	bne.n	8005876 <__cvt+0x36>
 8005874:	3501      	adds	r5, #1
 8005876:	2302      	movs	r3, #2
 8005878:	e000      	b.n	800587c <__cvt+0x3c>
 800587a:	2303      	movs	r3, #3
 800587c:	aa07      	add	r2, sp, #28
 800587e:	9204      	str	r2, [sp, #16]
 8005880:	aa06      	add	r2, sp, #24
 8005882:	e9cd a202 	strd	sl, r2, [sp, #8]
 8005886:	e9cd 3500 	strd	r3, r5, [sp]
 800588a:	4622      	mov	r2, r4
 800588c:	463b      	mov	r3, r7
 800588e:	f000 fce3 	bl	8006258 <_dtoa_r>
 8005892:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005896:	4606      	mov	r6, r0
 8005898:	d102      	bne.n	80058a0 <__cvt+0x60>
 800589a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800589c:	07db      	lsls	r3, r3, #31
 800589e:	d522      	bpl.n	80058e6 <__cvt+0xa6>
 80058a0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80058a4:	eb06 0905 	add.w	r9, r6, r5
 80058a8:	d110      	bne.n	80058cc <__cvt+0x8c>
 80058aa:	7833      	ldrb	r3, [r6, #0]
 80058ac:	2b30      	cmp	r3, #48	; 0x30
 80058ae:	d10a      	bne.n	80058c6 <__cvt+0x86>
 80058b0:	2200      	movs	r2, #0
 80058b2:	2300      	movs	r3, #0
 80058b4:	4620      	mov	r0, r4
 80058b6:	4639      	mov	r1, r7
 80058b8:	f7fb f876 	bl	80009a8 <__aeabi_dcmpeq>
 80058bc:	b918      	cbnz	r0, 80058c6 <__cvt+0x86>
 80058be:	f1c5 0501 	rsb	r5, r5, #1
 80058c2:	f8ca 5000 	str.w	r5, [sl]
 80058c6:	f8da 3000 	ldr.w	r3, [sl]
 80058ca:	4499      	add	r9, r3
 80058cc:	2200      	movs	r2, #0
 80058ce:	2300      	movs	r3, #0
 80058d0:	4620      	mov	r0, r4
 80058d2:	4639      	mov	r1, r7
 80058d4:	f7fb f868 	bl	80009a8 <__aeabi_dcmpeq>
 80058d8:	b108      	cbz	r0, 80058de <__cvt+0x9e>
 80058da:	f8cd 901c 	str.w	r9, [sp, #28]
 80058de:	2230      	movs	r2, #48	; 0x30
 80058e0:	9b07      	ldr	r3, [sp, #28]
 80058e2:	454b      	cmp	r3, r9
 80058e4:	d307      	bcc.n	80058f6 <__cvt+0xb6>
 80058e6:	4630      	mov	r0, r6
 80058e8:	9b07      	ldr	r3, [sp, #28]
 80058ea:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80058ec:	1b9b      	subs	r3, r3, r6
 80058ee:	6013      	str	r3, [r2, #0]
 80058f0:	b008      	add	sp, #32
 80058f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80058f6:	1c59      	adds	r1, r3, #1
 80058f8:	9107      	str	r1, [sp, #28]
 80058fa:	701a      	strb	r2, [r3, #0]
 80058fc:	e7f0      	b.n	80058e0 <__cvt+0xa0>

080058fe <__exponent>:
 80058fe:	4603      	mov	r3, r0
 8005900:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005902:	2900      	cmp	r1, #0
 8005904:	f803 2b02 	strb.w	r2, [r3], #2
 8005908:	bfb6      	itet	lt
 800590a:	222d      	movlt	r2, #45	; 0x2d
 800590c:	222b      	movge	r2, #43	; 0x2b
 800590e:	4249      	neglt	r1, r1
 8005910:	2909      	cmp	r1, #9
 8005912:	7042      	strb	r2, [r0, #1]
 8005914:	dd2b      	ble.n	800596e <__exponent+0x70>
 8005916:	f10d 0407 	add.w	r4, sp, #7
 800591a:	46a4      	mov	ip, r4
 800591c:	270a      	movs	r7, #10
 800591e:	fb91 f6f7 	sdiv	r6, r1, r7
 8005922:	460a      	mov	r2, r1
 8005924:	46a6      	mov	lr, r4
 8005926:	fb07 1516 	mls	r5, r7, r6, r1
 800592a:	2a63      	cmp	r2, #99	; 0x63
 800592c:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8005930:	4631      	mov	r1, r6
 8005932:	f104 34ff 	add.w	r4, r4, #4294967295
 8005936:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800593a:	dcf0      	bgt.n	800591e <__exponent+0x20>
 800593c:	3130      	adds	r1, #48	; 0x30
 800593e:	f1ae 0502 	sub.w	r5, lr, #2
 8005942:	f804 1c01 	strb.w	r1, [r4, #-1]
 8005946:	4629      	mov	r1, r5
 8005948:	1c44      	adds	r4, r0, #1
 800594a:	4561      	cmp	r1, ip
 800594c:	d30a      	bcc.n	8005964 <__exponent+0x66>
 800594e:	f10d 0209 	add.w	r2, sp, #9
 8005952:	eba2 020e 	sub.w	r2, r2, lr
 8005956:	4565      	cmp	r5, ip
 8005958:	bf88      	it	hi
 800595a:	2200      	movhi	r2, #0
 800595c:	4413      	add	r3, r2
 800595e:	1a18      	subs	r0, r3, r0
 8005960:	b003      	add	sp, #12
 8005962:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005964:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005968:	f804 2f01 	strb.w	r2, [r4, #1]!
 800596c:	e7ed      	b.n	800594a <__exponent+0x4c>
 800596e:	2330      	movs	r3, #48	; 0x30
 8005970:	3130      	adds	r1, #48	; 0x30
 8005972:	7083      	strb	r3, [r0, #2]
 8005974:	70c1      	strb	r1, [r0, #3]
 8005976:	1d03      	adds	r3, r0, #4
 8005978:	e7f1      	b.n	800595e <__exponent+0x60>
	...

0800597c <_printf_float>:
 800597c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005980:	b091      	sub	sp, #68	; 0x44
 8005982:	460c      	mov	r4, r1
 8005984:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8005988:	4616      	mov	r6, r2
 800598a:	461f      	mov	r7, r3
 800598c:	4605      	mov	r5, r0
 800598e:	f001 fa51 	bl	8006e34 <_localeconv_r>
 8005992:	6803      	ldr	r3, [r0, #0]
 8005994:	4618      	mov	r0, r3
 8005996:	9309      	str	r3, [sp, #36]	; 0x24
 8005998:	f7fa fbda 	bl	8000150 <strlen>
 800599c:	2300      	movs	r3, #0
 800599e:	930e      	str	r3, [sp, #56]	; 0x38
 80059a0:	f8d8 3000 	ldr.w	r3, [r8]
 80059a4:	900a      	str	r0, [sp, #40]	; 0x28
 80059a6:	3307      	adds	r3, #7
 80059a8:	f023 0307 	bic.w	r3, r3, #7
 80059ac:	f103 0208 	add.w	r2, r3, #8
 80059b0:	f894 9018 	ldrb.w	r9, [r4, #24]
 80059b4:	f8d4 b000 	ldr.w	fp, [r4]
 80059b8:	f8c8 2000 	str.w	r2, [r8]
 80059bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059c0:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80059c4:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 80059c8:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 80059cc:	930b      	str	r3, [sp, #44]	; 0x2c
 80059ce:	f04f 32ff 	mov.w	r2, #4294967295
 80059d2:	4640      	mov	r0, r8
 80059d4:	4b9c      	ldr	r3, [pc, #624]	; (8005c48 <_printf_float+0x2cc>)
 80059d6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80059d8:	f7fb f818 	bl	8000a0c <__aeabi_dcmpun>
 80059dc:	bb70      	cbnz	r0, 8005a3c <_printf_float+0xc0>
 80059de:	f04f 32ff 	mov.w	r2, #4294967295
 80059e2:	4640      	mov	r0, r8
 80059e4:	4b98      	ldr	r3, [pc, #608]	; (8005c48 <_printf_float+0x2cc>)
 80059e6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80059e8:	f7fa fff2 	bl	80009d0 <__aeabi_dcmple>
 80059ec:	bb30      	cbnz	r0, 8005a3c <_printf_float+0xc0>
 80059ee:	2200      	movs	r2, #0
 80059f0:	2300      	movs	r3, #0
 80059f2:	4640      	mov	r0, r8
 80059f4:	4651      	mov	r1, sl
 80059f6:	f7fa ffe1 	bl	80009bc <__aeabi_dcmplt>
 80059fa:	b110      	cbz	r0, 8005a02 <_printf_float+0x86>
 80059fc:	232d      	movs	r3, #45	; 0x2d
 80059fe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005a02:	4b92      	ldr	r3, [pc, #584]	; (8005c4c <_printf_float+0x2d0>)
 8005a04:	4892      	ldr	r0, [pc, #584]	; (8005c50 <_printf_float+0x2d4>)
 8005a06:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8005a0a:	bf94      	ite	ls
 8005a0c:	4698      	movls	r8, r3
 8005a0e:	4680      	movhi	r8, r0
 8005a10:	2303      	movs	r3, #3
 8005a12:	f04f 0a00 	mov.w	sl, #0
 8005a16:	6123      	str	r3, [r4, #16]
 8005a18:	f02b 0304 	bic.w	r3, fp, #4
 8005a1c:	6023      	str	r3, [r4, #0]
 8005a1e:	4633      	mov	r3, r6
 8005a20:	4621      	mov	r1, r4
 8005a22:	4628      	mov	r0, r5
 8005a24:	9700      	str	r7, [sp, #0]
 8005a26:	aa0f      	add	r2, sp, #60	; 0x3c
 8005a28:	f000 f9d4 	bl	8005dd4 <_printf_common>
 8005a2c:	3001      	adds	r0, #1
 8005a2e:	f040 8090 	bne.w	8005b52 <_printf_float+0x1d6>
 8005a32:	f04f 30ff 	mov.w	r0, #4294967295
 8005a36:	b011      	add	sp, #68	; 0x44
 8005a38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a3c:	4642      	mov	r2, r8
 8005a3e:	4653      	mov	r3, sl
 8005a40:	4640      	mov	r0, r8
 8005a42:	4651      	mov	r1, sl
 8005a44:	f7fa ffe2 	bl	8000a0c <__aeabi_dcmpun>
 8005a48:	b148      	cbz	r0, 8005a5e <_printf_float+0xe2>
 8005a4a:	f1ba 0f00 	cmp.w	sl, #0
 8005a4e:	bfb8      	it	lt
 8005a50:	232d      	movlt	r3, #45	; 0x2d
 8005a52:	4880      	ldr	r0, [pc, #512]	; (8005c54 <_printf_float+0x2d8>)
 8005a54:	bfb8      	it	lt
 8005a56:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005a5a:	4b7f      	ldr	r3, [pc, #508]	; (8005c58 <_printf_float+0x2dc>)
 8005a5c:	e7d3      	b.n	8005a06 <_printf_float+0x8a>
 8005a5e:	6863      	ldr	r3, [r4, #4]
 8005a60:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8005a64:	1c5a      	adds	r2, r3, #1
 8005a66:	d142      	bne.n	8005aee <_printf_float+0x172>
 8005a68:	2306      	movs	r3, #6
 8005a6a:	6063      	str	r3, [r4, #4]
 8005a6c:	2200      	movs	r2, #0
 8005a6e:	9206      	str	r2, [sp, #24]
 8005a70:	aa0e      	add	r2, sp, #56	; 0x38
 8005a72:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8005a76:	aa0d      	add	r2, sp, #52	; 0x34
 8005a78:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8005a7c:	9203      	str	r2, [sp, #12]
 8005a7e:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8005a82:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8005a86:	6023      	str	r3, [r4, #0]
 8005a88:	6863      	ldr	r3, [r4, #4]
 8005a8a:	4642      	mov	r2, r8
 8005a8c:	9300      	str	r3, [sp, #0]
 8005a8e:	4628      	mov	r0, r5
 8005a90:	4653      	mov	r3, sl
 8005a92:	910b      	str	r1, [sp, #44]	; 0x2c
 8005a94:	f7ff fed4 	bl	8005840 <__cvt>
 8005a98:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005a9a:	4680      	mov	r8, r0
 8005a9c:	2947      	cmp	r1, #71	; 0x47
 8005a9e:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005aa0:	d108      	bne.n	8005ab4 <_printf_float+0x138>
 8005aa2:	1cc8      	adds	r0, r1, #3
 8005aa4:	db02      	blt.n	8005aac <_printf_float+0x130>
 8005aa6:	6863      	ldr	r3, [r4, #4]
 8005aa8:	4299      	cmp	r1, r3
 8005aaa:	dd40      	ble.n	8005b2e <_printf_float+0x1b2>
 8005aac:	f1a9 0902 	sub.w	r9, r9, #2
 8005ab0:	fa5f f989 	uxtb.w	r9, r9
 8005ab4:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8005ab8:	d81f      	bhi.n	8005afa <_printf_float+0x17e>
 8005aba:	464a      	mov	r2, r9
 8005abc:	3901      	subs	r1, #1
 8005abe:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005ac2:	910d      	str	r1, [sp, #52]	; 0x34
 8005ac4:	f7ff ff1b 	bl	80058fe <__exponent>
 8005ac8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005aca:	4682      	mov	sl, r0
 8005acc:	1813      	adds	r3, r2, r0
 8005ace:	2a01      	cmp	r2, #1
 8005ad0:	6123      	str	r3, [r4, #16]
 8005ad2:	dc02      	bgt.n	8005ada <_printf_float+0x15e>
 8005ad4:	6822      	ldr	r2, [r4, #0]
 8005ad6:	07d2      	lsls	r2, r2, #31
 8005ad8:	d501      	bpl.n	8005ade <_printf_float+0x162>
 8005ada:	3301      	adds	r3, #1
 8005adc:	6123      	str	r3, [r4, #16]
 8005ade:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d09b      	beq.n	8005a1e <_printf_float+0xa2>
 8005ae6:	232d      	movs	r3, #45	; 0x2d
 8005ae8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005aec:	e797      	b.n	8005a1e <_printf_float+0xa2>
 8005aee:	2947      	cmp	r1, #71	; 0x47
 8005af0:	d1bc      	bne.n	8005a6c <_printf_float+0xf0>
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d1ba      	bne.n	8005a6c <_printf_float+0xf0>
 8005af6:	2301      	movs	r3, #1
 8005af8:	e7b7      	b.n	8005a6a <_printf_float+0xee>
 8005afa:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8005afe:	d118      	bne.n	8005b32 <_printf_float+0x1b6>
 8005b00:	2900      	cmp	r1, #0
 8005b02:	6863      	ldr	r3, [r4, #4]
 8005b04:	dd0b      	ble.n	8005b1e <_printf_float+0x1a2>
 8005b06:	6121      	str	r1, [r4, #16]
 8005b08:	b913      	cbnz	r3, 8005b10 <_printf_float+0x194>
 8005b0a:	6822      	ldr	r2, [r4, #0]
 8005b0c:	07d0      	lsls	r0, r2, #31
 8005b0e:	d502      	bpl.n	8005b16 <_printf_float+0x19a>
 8005b10:	3301      	adds	r3, #1
 8005b12:	440b      	add	r3, r1
 8005b14:	6123      	str	r3, [r4, #16]
 8005b16:	f04f 0a00 	mov.w	sl, #0
 8005b1a:	65a1      	str	r1, [r4, #88]	; 0x58
 8005b1c:	e7df      	b.n	8005ade <_printf_float+0x162>
 8005b1e:	b913      	cbnz	r3, 8005b26 <_printf_float+0x1aa>
 8005b20:	6822      	ldr	r2, [r4, #0]
 8005b22:	07d2      	lsls	r2, r2, #31
 8005b24:	d501      	bpl.n	8005b2a <_printf_float+0x1ae>
 8005b26:	3302      	adds	r3, #2
 8005b28:	e7f4      	b.n	8005b14 <_printf_float+0x198>
 8005b2a:	2301      	movs	r3, #1
 8005b2c:	e7f2      	b.n	8005b14 <_printf_float+0x198>
 8005b2e:	f04f 0967 	mov.w	r9, #103	; 0x67
 8005b32:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005b34:	4299      	cmp	r1, r3
 8005b36:	db05      	blt.n	8005b44 <_printf_float+0x1c8>
 8005b38:	6823      	ldr	r3, [r4, #0]
 8005b3a:	6121      	str	r1, [r4, #16]
 8005b3c:	07d8      	lsls	r0, r3, #31
 8005b3e:	d5ea      	bpl.n	8005b16 <_printf_float+0x19a>
 8005b40:	1c4b      	adds	r3, r1, #1
 8005b42:	e7e7      	b.n	8005b14 <_printf_float+0x198>
 8005b44:	2900      	cmp	r1, #0
 8005b46:	bfcc      	ite	gt
 8005b48:	2201      	movgt	r2, #1
 8005b4a:	f1c1 0202 	rsble	r2, r1, #2
 8005b4e:	4413      	add	r3, r2
 8005b50:	e7e0      	b.n	8005b14 <_printf_float+0x198>
 8005b52:	6823      	ldr	r3, [r4, #0]
 8005b54:	055a      	lsls	r2, r3, #21
 8005b56:	d407      	bmi.n	8005b68 <_printf_float+0x1ec>
 8005b58:	6923      	ldr	r3, [r4, #16]
 8005b5a:	4642      	mov	r2, r8
 8005b5c:	4631      	mov	r1, r6
 8005b5e:	4628      	mov	r0, r5
 8005b60:	47b8      	blx	r7
 8005b62:	3001      	adds	r0, #1
 8005b64:	d12b      	bne.n	8005bbe <_printf_float+0x242>
 8005b66:	e764      	b.n	8005a32 <_printf_float+0xb6>
 8005b68:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8005b6c:	f240 80dd 	bls.w	8005d2a <_printf_float+0x3ae>
 8005b70:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005b74:	2200      	movs	r2, #0
 8005b76:	2300      	movs	r3, #0
 8005b78:	f7fa ff16 	bl	80009a8 <__aeabi_dcmpeq>
 8005b7c:	2800      	cmp	r0, #0
 8005b7e:	d033      	beq.n	8005be8 <_printf_float+0x26c>
 8005b80:	2301      	movs	r3, #1
 8005b82:	4631      	mov	r1, r6
 8005b84:	4628      	mov	r0, r5
 8005b86:	4a35      	ldr	r2, [pc, #212]	; (8005c5c <_printf_float+0x2e0>)
 8005b88:	47b8      	blx	r7
 8005b8a:	3001      	adds	r0, #1
 8005b8c:	f43f af51 	beq.w	8005a32 <_printf_float+0xb6>
 8005b90:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005b94:	429a      	cmp	r2, r3
 8005b96:	db02      	blt.n	8005b9e <_printf_float+0x222>
 8005b98:	6823      	ldr	r3, [r4, #0]
 8005b9a:	07d8      	lsls	r0, r3, #31
 8005b9c:	d50f      	bpl.n	8005bbe <_printf_float+0x242>
 8005b9e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005ba2:	4631      	mov	r1, r6
 8005ba4:	4628      	mov	r0, r5
 8005ba6:	47b8      	blx	r7
 8005ba8:	3001      	adds	r0, #1
 8005baa:	f43f af42 	beq.w	8005a32 <_printf_float+0xb6>
 8005bae:	f04f 0800 	mov.w	r8, #0
 8005bb2:	f104 091a 	add.w	r9, r4, #26
 8005bb6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005bb8:	3b01      	subs	r3, #1
 8005bba:	4543      	cmp	r3, r8
 8005bbc:	dc09      	bgt.n	8005bd2 <_printf_float+0x256>
 8005bbe:	6823      	ldr	r3, [r4, #0]
 8005bc0:	079b      	lsls	r3, r3, #30
 8005bc2:	f100 8102 	bmi.w	8005dca <_printf_float+0x44e>
 8005bc6:	68e0      	ldr	r0, [r4, #12]
 8005bc8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005bca:	4298      	cmp	r0, r3
 8005bcc:	bfb8      	it	lt
 8005bce:	4618      	movlt	r0, r3
 8005bd0:	e731      	b.n	8005a36 <_printf_float+0xba>
 8005bd2:	2301      	movs	r3, #1
 8005bd4:	464a      	mov	r2, r9
 8005bd6:	4631      	mov	r1, r6
 8005bd8:	4628      	mov	r0, r5
 8005bda:	47b8      	blx	r7
 8005bdc:	3001      	adds	r0, #1
 8005bde:	f43f af28 	beq.w	8005a32 <_printf_float+0xb6>
 8005be2:	f108 0801 	add.w	r8, r8, #1
 8005be6:	e7e6      	b.n	8005bb6 <_printf_float+0x23a>
 8005be8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	dc38      	bgt.n	8005c60 <_printf_float+0x2e4>
 8005bee:	2301      	movs	r3, #1
 8005bf0:	4631      	mov	r1, r6
 8005bf2:	4628      	mov	r0, r5
 8005bf4:	4a19      	ldr	r2, [pc, #100]	; (8005c5c <_printf_float+0x2e0>)
 8005bf6:	47b8      	blx	r7
 8005bf8:	3001      	adds	r0, #1
 8005bfa:	f43f af1a 	beq.w	8005a32 <_printf_float+0xb6>
 8005bfe:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005c02:	4313      	orrs	r3, r2
 8005c04:	d102      	bne.n	8005c0c <_printf_float+0x290>
 8005c06:	6823      	ldr	r3, [r4, #0]
 8005c08:	07d9      	lsls	r1, r3, #31
 8005c0a:	d5d8      	bpl.n	8005bbe <_printf_float+0x242>
 8005c0c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005c10:	4631      	mov	r1, r6
 8005c12:	4628      	mov	r0, r5
 8005c14:	47b8      	blx	r7
 8005c16:	3001      	adds	r0, #1
 8005c18:	f43f af0b 	beq.w	8005a32 <_printf_float+0xb6>
 8005c1c:	f04f 0900 	mov.w	r9, #0
 8005c20:	f104 0a1a 	add.w	sl, r4, #26
 8005c24:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005c26:	425b      	negs	r3, r3
 8005c28:	454b      	cmp	r3, r9
 8005c2a:	dc01      	bgt.n	8005c30 <_printf_float+0x2b4>
 8005c2c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005c2e:	e794      	b.n	8005b5a <_printf_float+0x1de>
 8005c30:	2301      	movs	r3, #1
 8005c32:	4652      	mov	r2, sl
 8005c34:	4631      	mov	r1, r6
 8005c36:	4628      	mov	r0, r5
 8005c38:	47b8      	blx	r7
 8005c3a:	3001      	adds	r0, #1
 8005c3c:	f43f aef9 	beq.w	8005a32 <_printf_float+0xb6>
 8005c40:	f109 0901 	add.w	r9, r9, #1
 8005c44:	e7ee      	b.n	8005c24 <_printf_float+0x2a8>
 8005c46:	bf00      	nop
 8005c48:	7fefffff 	.word	0x7fefffff
 8005c4c:	08008b44 	.word	0x08008b44
 8005c50:	08008b48 	.word	0x08008b48
 8005c54:	08008b50 	.word	0x08008b50
 8005c58:	08008b4c 	.word	0x08008b4c
 8005c5c:	08008b54 	.word	0x08008b54
 8005c60:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005c62:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005c64:	429a      	cmp	r2, r3
 8005c66:	bfa8      	it	ge
 8005c68:	461a      	movge	r2, r3
 8005c6a:	2a00      	cmp	r2, #0
 8005c6c:	4691      	mov	r9, r2
 8005c6e:	dc37      	bgt.n	8005ce0 <_printf_float+0x364>
 8005c70:	f04f 0b00 	mov.w	fp, #0
 8005c74:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005c78:	f104 021a 	add.w	r2, r4, #26
 8005c7c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8005c80:	ebaa 0309 	sub.w	r3, sl, r9
 8005c84:	455b      	cmp	r3, fp
 8005c86:	dc33      	bgt.n	8005cf0 <_printf_float+0x374>
 8005c88:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005c8c:	429a      	cmp	r2, r3
 8005c8e:	db3b      	blt.n	8005d08 <_printf_float+0x38c>
 8005c90:	6823      	ldr	r3, [r4, #0]
 8005c92:	07da      	lsls	r2, r3, #31
 8005c94:	d438      	bmi.n	8005d08 <_printf_float+0x38c>
 8005c96:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005c98:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005c9a:	eba3 020a 	sub.w	r2, r3, sl
 8005c9e:	eba3 0901 	sub.w	r9, r3, r1
 8005ca2:	4591      	cmp	r9, r2
 8005ca4:	bfa8      	it	ge
 8005ca6:	4691      	movge	r9, r2
 8005ca8:	f1b9 0f00 	cmp.w	r9, #0
 8005cac:	dc34      	bgt.n	8005d18 <_printf_float+0x39c>
 8005cae:	f04f 0800 	mov.w	r8, #0
 8005cb2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005cb6:	f104 0a1a 	add.w	sl, r4, #26
 8005cba:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005cbe:	1a9b      	subs	r3, r3, r2
 8005cc0:	eba3 0309 	sub.w	r3, r3, r9
 8005cc4:	4543      	cmp	r3, r8
 8005cc6:	f77f af7a 	ble.w	8005bbe <_printf_float+0x242>
 8005cca:	2301      	movs	r3, #1
 8005ccc:	4652      	mov	r2, sl
 8005cce:	4631      	mov	r1, r6
 8005cd0:	4628      	mov	r0, r5
 8005cd2:	47b8      	blx	r7
 8005cd4:	3001      	adds	r0, #1
 8005cd6:	f43f aeac 	beq.w	8005a32 <_printf_float+0xb6>
 8005cda:	f108 0801 	add.w	r8, r8, #1
 8005cde:	e7ec      	b.n	8005cba <_printf_float+0x33e>
 8005ce0:	4613      	mov	r3, r2
 8005ce2:	4631      	mov	r1, r6
 8005ce4:	4642      	mov	r2, r8
 8005ce6:	4628      	mov	r0, r5
 8005ce8:	47b8      	blx	r7
 8005cea:	3001      	adds	r0, #1
 8005cec:	d1c0      	bne.n	8005c70 <_printf_float+0x2f4>
 8005cee:	e6a0      	b.n	8005a32 <_printf_float+0xb6>
 8005cf0:	2301      	movs	r3, #1
 8005cf2:	4631      	mov	r1, r6
 8005cf4:	4628      	mov	r0, r5
 8005cf6:	920b      	str	r2, [sp, #44]	; 0x2c
 8005cf8:	47b8      	blx	r7
 8005cfa:	3001      	adds	r0, #1
 8005cfc:	f43f ae99 	beq.w	8005a32 <_printf_float+0xb6>
 8005d00:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005d02:	f10b 0b01 	add.w	fp, fp, #1
 8005d06:	e7b9      	b.n	8005c7c <_printf_float+0x300>
 8005d08:	4631      	mov	r1, r6
 8005d0a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005d0e:	4628      	mov	r0, r5
 8005d10:	47b8      	blx	r7
 8005d12:	3001      	adds	r0, #1
 8005d14:	d1bf      	bne.n	8005c96 <_printf_float+0x31a>
 8005d16:	e68c      	b.n	8005a32 <_printf_float+0xb6>
 8005d18:	464b      	mov	r3, r9
 8005d1a:	4631      	mov	r1, r6
 8005d1c:	4628      	mov	r0, r5
 8005d1e:	eb08 020a 	add.w	r2, r8, sl
 8005d22:	47b8      	blx	r7
 8005d24:	3001      	adds	r0, #1
 8005d26:	d1c2      	bne.n	8005cae <_printf_float+0x332>
 8005d28:	e683      	b.n	8005a32 <_printf_float+0xb6>
 8005d2a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005d2c:	2a01      	cmp	r2, #1
 8005d2e:	dc01      	bgt.n	8005d34 <_printf_float+0x3b8>
 8005d30:	07db      	lsls	r3, r3, #31
 8005d32:	d537      	bpl.n	8005da4 <_printf_float+0x428>
 8005d34:	2301      	movs	r3, #1
 8005d36:	4642      	mov	r2, r8
 8005d38:	4631      	mov	r1, r6
 8005d3a:	4628      	mov	r0, r5
 8005d3c:	47b8      	blx	r7
 8005d3e:	3001      	adds	r0, #1
 8005d40:	f43f ae77 	beq.w	8005a32 <_printf_float+0xb6>
 8005d44:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005d48:	4631      	mov	r1, r6
 8005d4a:	4628      	mov	r0, r5
 8005d4c:	47b8      	blx	r7
 8005d4e:	3001      	adds	r0, #1
 8005d50:	f43f ae6f 	beq.w	8005a32 <_printf_float+0xb6>
 8005d54:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005d58:	2200      	movs	r2, #0
 8005d5a:	2300      	movs	r3, #0
 8005d5c:	f7fa fe24 	bl	80009a8 <__aeabi_dcmpeq>
 8005d60:	b9d8      	cbnz	r0, 8005d9a <_printf_float+0x41e>
 8005d62:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005d64:	f108 0201 	add.w	r2, r8, #1
 8005d68:	3b01      	subs	r3, #1
 8005d6a:	4631      	mov	r1, r6
 8005d6c:	4628      	mov	r0, r5
 8005d6e:	47b8      	blx	r7
 8005d70:	3001      	adds	r0, #1
 8005d72:	d10e      	bne.n	8005d92 <_printf_float+0x416>
 8005d74:	e65d      	b.n	8005a32 <_printf_float+0xb6>
 8005d76:	2301      	movs	r3, #1
 8005d78:	464a      	mov	r2, r9
 8005d7a:	4631      	mov	r1, r6
 8005d7c:	4628      	mov	r0, r5
 8005d7e:	47b8      	blx	r7
 8005d80:	3001      	adds	r0, #1
 8005d82:	f43f ae56 	beq.w	8005a32 <_printf_float+0xb6>
 8005d86:	f108 0801 	add.w	r8, r8, #1
 8005d8a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005d8c:	3b01      	subs	r3, #1
 8005d8e:	4543      	cmp	r3, r8
 8005d90:	dcf1      	bgt.n	8005d76 <_printf_float+0x3fa>
 8005d92:	4653      	mov	r3, sl
 8005d94:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005d98:	e6e0      	b.n	8005b5c <_printf_float+0x1e0>
 8005d9a:	f04f 0800 	mov.w	r8, #0
 8005d9e:	f104 091a 	add.w	r9, r4, #26
 8005da2:	e7f2      	b.n	8005d8a <_printf_float+0x40e>
 8005da4:	2301      	movs	r3, #1
 8005da6:	4642      	mov	r2, r8
 8005da8:	e7df      	b.n	8005d6a <_printf_float+0x3ee>
 8005daa:	2301      	movs	r3, #1
 8005dac:	464a      	mov	r2, r9
 8005dae:	4631      	mov	r1, r6
 8005db0:	4628      	mov	r0, r5
 8005db2:	47b8      	blx	r7
 8005db4:	3001      	adds	r0, #1
 8005db6:	f43f ae3c 	beq.w	8005a32 <_printf_float+0xb6>
 8005dba:	f108 0801 	add.w	r8, r8, #1
 8005dbe:	68e3      	ldr	r3, [r4, #12]
 8005dc0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8005dc2:	1a5b      	subs	r3, r3, r1
 8005dc4:	4543      	cmp	r3, r8
 8005dc6:	dcf0      	bgt.n	8005daa <_printf_float+0x42e>
 8005dc8:	e6fd      	b.n	8005bc6 <_printf_float+0x24a>
 8005dca:	f04f 0800 	mov.w	r8, #0
 8005dce:	f104 0919 	add.w	r9, r4, #25
 8005dd2:	e7f4      	b.n	8005dbe <_printf_float+0x442>

08005dd4 <_printf_common>:
 8005dd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005dd8:	4616      	mov	r6, r2
 8005dda:	4699      	mov	r9, r3
 8005ddc:	688a      	ldr	r2, [r1, #8]
 8005dde:	690b      	ldr	r3, [r1, #16]
 8005de0:	4607      	mov	r7, r0
 8005de2:	4293      	cmp	r3, r2
 8005de4:	bfb8      	it	lt
 8005de6:	4613      	movlt	r3, r2
 8005de8:	6033      	str	r3, [r6, #0]
 8005dea:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005dee:	460c      	mov	r4, r1
 8005df0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005df4:	b10a      	cbz	r2, 8005dfa <_printf_common+0x26>
 8005df6:	3301      	adds	r3, #1
 8005df8:	6033      	str	r3, [r6, #0]
 8005dfa:	6823      	ldr	r3, [r4, #0]
 8005dfc:	0699      	lsls	r1, r3, #26
 8005dfe:	bf42      	ittt	mi
 8005e00:	6833      	ldrmi	r3, [r6, #0]
 8005e02:	3302      	addmi	r3, #2
 8005e04:	6033      	strmi	r3, [r6, #0]
 8005e06:	6825      	ldr	r5, [r4, #0]
 8005e08:	f015 0506 	ands.w	r5, r5, #6
 8005e0c:	d106      	bne.n	8005e1c <_printf_common+0x48>
 8005e0e:	f104 0a19 	add.w	sl, r4, #25
 8005e12:	68e3      	ldr	r3, [r4, #12]
 8005e14:	6832      	ldr	r2, [r6, #0]
 8005e16:	1a9b      	subs	r3, r3, r2
 8005e18:	42ab      	cmp	r3, r5
 8005e1a:	dc28      	bgt.n	8005e6e <_printf_common+0x9a>
 8005e1c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005e20:	1e13      	subs	r3, r2, #0
 8005e22:	6822      	ldr	r2, [r4, #0]
 8005e24:	bf18      	it	ne
 8005e26:	2301      	movne	r3, #1
 8005e28:	0692      	lsls	r2, r2, #26
 8005e2a:	d42d      	bmi.n	8005e88 <_printf_common+0xb4>
 8005e2c:	4649      	mov	r1, r9
 8005e2e:	4638      	mov	r0, r7
 8005e30:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005e34:	47c0      	blx	r8
 8005e36:	3001      	adds	r0, #1
 8005e38:	d020      	beq.n	8005e7c <_printf_common+0xa8>
 8005e3a:	6823      	ldr	r3, [r4, #0]
 8005e3c:	68e5      	ldr	r5, [r4, #12]
 8005e3e:	f003 0306 	and.w	r3, r3, #6
 8005e42:	2b04      	cmp	r3, #4
 8005e44:	bf18      	it	ne
 8005e46:	2500      	movne	r5, #0
 8005e48:	6832      	ldr	r2, [r6, #0]
 8005e4a:	f04f 0600 	mov.w	r6, #0
 8005e4e:	68a3      	ldr	r3, [r4, #8]
 8005e50:	bf08      	it	eq
 8005e52:	1aad      	subeq	r5, r5, r2
 8005e54:	6922      	ldr	r2, [r4, #16]
 8005e56:	bf08      	it	eq
 8005e58:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005e5c:	4293      	cmp	r3, r2
 8005e5e:	bfc4      	itt	gt
 8005e60:	1a9b      	subgt	r3, r3, r2
 8005e62:	18ed      	addgt	r5, r5, r3
 8005e64:	341a      	adds	r4, #26
 8005e66:	42b5      	cmp	r5, r6
 8005e68:	d11a      	bne.n	8005ea0 <_printf_common+0xcc>
 8005e6a:	2000      	movs	r0, #0
 8005e6c:	e008      	b.n	8005e80 <_printf_common+0xac>
 8005e6e:	2301      	movs	r3, #1
 8005e70:	4652      	mov	r2, sl
 8005e72:	4649      	mov	r1, r9
 8005e74:	4638      	mov	r0, r7
 8005e76:	47c0      	blx	r8
 8005e78:	3001      	adds	r0, #1
 8005e7a:	d103      	bne.n	8005e84 <_printf_common+0xb0>
 8005e7c:	f04f 30ff 	mov.w	r0, #4294967295
 8005e80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e84:	3501      	adds	r5, #1
 8005e86:	e7c4      	b.n	8005e12 <_printf_common+0x3e>
 8005e88:	2030      	movs	r0, #48	; 0x30
 8005e8a:	18e1      	adds	r1, r4, r3
 8005e8c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005e90:	1c5a      	adds	r2, r3, #1
 8005e92:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005e96:	4422      	add	r2, r4
 8005e98:	3302      	adds	r3, #2
 8005e9a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005e9e:	e7c5      	b.n	8005e2c <_printf_common+0x58>
 8005ea0:	2301      	movs	r3, #1
 8005ea2:	4622      	mov	r2, r4
 8005ea4:	4649      	mov	r1, r9
 8005ea6:	4638      	mov	r0, r7
 8005ea8:	47c0      	blx	r8
 8005eaa:	3001      	adds	r0, #1
 8005eac:	d0e6      	beq.n	8005e7c <_printf_common+0xa8>
 8005eae:	3601      	adds	r6, #1
 8005eb0:	e7d9      	b.n	8005e66 <_printf_common+0x92>
	...

08005eb4 <_printf_i>:
 8005eb4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005eb8:	7e0f      	ldrb	r7, [r1, #24]
 8005eba:	4691      	mov	r9, r2
 8005ebc:	2f78      	cmp	r7, #120	; 0x78
 8005ebe:	4680      	mov	r8, r0
 8005ec0:	460c      	mov	r4, r1
 8005ec2:	469a      	mov	sl, r3
 8005ec4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005ec6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005eca:	d807      	bhi.n	8005edc <_printf_i+0x28>
 8005ecc:	2f62      	cmp	r7, #98	; 0x62
 8005ece:	d80a      	bhi.n	8005ee6 <_printf_i+0x32>
 8005ed0:	2f00      	cmp	r7, #0
 8005ed2:	f000 80d9 	beq.w	8006088 <_printf_i+0x1d4>
 8005ed6:	2f58      	cmp	r7, #88	; 0x58
 8005ed8:	f000 80a4 	beq.w	8006024 <_printf_i+0x170>
 8005edc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005ee0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005ee4:	e03a      	b.n	8005f5c <_printf_i+0xa8>
 8005ee6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005eea:	2b15      	cmp	r3, #21
 8005eec:	d8f6      	bhi.n	8005edc <_printf_i+0x28>
 8005eee:	a101      	add	r1, pc, #4	; (adr r1, 8005ef4 <_printf_i+0x40>)
 8005ef0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005ef4:	08005f4d 	.word	0x08005f4d
 8005ef8:	08005f61 	.word	0x08005f61
 8005efc:	08005edd 	.word	0x08005edd
 8005f00:	08005edd 	.word	0x08005edd
 8005f04:	08005edd 	.word	0x08005edd
 8005f08:	08005edd 	.word	0x08005edd
 8005f0c:	08005f61 	.word	0x08005f61
 8005f10:	08005edd 	.word	0x08005edd
 8005f14:	08005edd 	.word	0x08005edd
 8005f18:	08005edd 	.word	0x08005edd
 8005f1c:	08005edd 	.word	0x08005edd
 8005f20:	0800606f 	.word	0x0800606f
 8005f24:	08005f91 	.word	0x08005f91
 8005f28:	08006051 	.word	0x08006051
 8005f2c:	08005edd 	.word	0x08005edd
 8005f30:	08005edd 	.word	0x08005edd
 8005f34:	08006091 	.word	0x08006091
 8005f38:	08005edd 	.word	0x08005edd
 8005f3c:	08005f91 	.word	0x08005f91
 8005f40:	08005edd 	.word	0x08005edd
 8005f44:	08005edd 	.word	0x08005edd
 8005f48:	08006059 	.word	0x08006059
 8005f4c:	682b      	ldr	r3, [r5, #0]
 8005f4e:	1d1a      	adds	r2, r3, #4
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	602a      	str	r2, [r5, #0]
 8005f54:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005f58:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005f5c:	2301      	movs	r3, #1
 8005f5e:	e0a4      	b.n	80060aa <_printf_i+0x1f6>
 8005f60:	6820      	ldr	r0, [r4, #0]
 8005f62:	6829      	ldr	r1, [r5, #0]
 8005f64:	0606      	lsls	r6, r0, #24
 8005f66:	f101 0304 	add.w	r3, r1, #4
 8005f6a:	d50a      	bpl.n	8005f82 <_printf_i+0xce>
 8005f6c:	680e      	ldr	r6, [r1, #0]
 8005f6e:	602b      	str	r3, [r5, #0]
 8005f70:	2e00      	cmp	r6, #0
 8005f72:	da03      	bge.n	8005f7c <_printf_i+0xc8>
 8005f74:	232d      	movs	r3, #45	; 0x2d
 8005f76:	4276      	negs	r6, r6
 8005f78:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005f7c:	230a      	movs	r3, #10
 8005f7e:	485e      	ldr	r0, [pc, #376]	; (80060f8 <_printf_i+0x244>)
 8005f80:	e019      	b.n	8005fb6 <_printf_i+0x102>
 8005f82:	680e      	ldr	r6, [r1, #0]
 8005f84:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005f88:	602b      	str	r3, [r5, #0]
 8005f8a:	bf18      	it	ne
 8005f8c:	b236      	sxthne	r6, r6
 8005f8e:	e7ef      	b.n	8005f70 <_printf_i+0xbc>
 8005f90:	682b      	ldr	r3, [r5, #0]
 8005f92:	6820      	ldr	r0, [r4, #0]
 8005f94:	1d19      	adds	r1, r3, #4
 8005f96:	6029      	str	r1, [r5, #0]
 8005f98:	0601      	lsls	r1, r0, #24
 8005f9a:	d501      	bpl.n	8005fa0 <_printf_i+0xec>
 8005f9c:	681e      	ldr	r6, [r3, #0]
 8005f9e:	e002      	b.n	8005fa6 <_printf_i+0xf2>
 8005fa0:	0646      	lsls	r6, r0, #25
 8005fa2:	d5fb      	bpl.n	8005f9c <_printf_i+0xe8>
 8005fa4:	881e      	ldrh	r6, [r3, #0]
 8005fa6:	2f6f      	cmp	r7, #111	; 0x6f
 8005fa8:	bf0c      	ite	eq
 8005faa:	2308      	moveq	r3, #8
 8005fac:	230a      	movne	r3, #10
 8005fae:	4852      	ldr	r0, [pc, #328]	; (80060f8 <_printf_i+0x244>)
 8005fb0:	2100      	movs	r1, #0
 8005fb2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005fb6:	6865      	ldr	r5, [r4, #4]
 8005fb8:	2d00      	cmp	r5, #0
 8005fba:	bfa8      	it	ge
 8005fbc:	6821      	ldrge	r1, [r4, #0]
 8005fbe:	60a5      	str	r5, [r4, #8]
 8005fc0:	bfa4      	itt	ge
 8005fc2:	f021 0104 	bicge.w	r1, r1, #4
 8005fc6:	6021      	strge	r1, [r4, #0]
 8005fc8:	b90e      	cbnz	r6, 8005fce <_printf_i+0x11a>
 8005fca:	2d00      	cmp	r5, #0
 8005fcc:	d04d      	beq.n	800606a <_printf_i+0x1b6>
 8005fce:	4615      	mov	r5, r2
 8005fd0:	fbb6 f1f3 	udiv	r1, r6, r3
 8005fd4:	fb03 6711 	mls	r7, r3, r1, r6
 8005fd8:	5dc7      	ldrb	r7, [r0, r7]
 8005fda:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005fde:	4637      	mov	r7, r6
 8005fe0:	42bb      	cmp	r3, r7
 8005fe2:	460e      	mov	r6, r1
 8005fe4:	d9f4      	bls.n	8005fd0 <_printf_i+0x11c>
 8005fe6:	2b08      	cmp	r3, #8
 8005fe8:	d10b      	bne.n	8006002 <_printf_i+0x14e>
 8005fea:	6823      	ldr	r3, [r4, #0]
 8005fec:	07de      	lsls	r6, r3, #31
 8005fee:	d508      	bpl.n	8006002 <_printf_i+0x14e>
 8005ff0:	6923      	ldr	r3, [r4, #16]
 8005ff2:	6861      	ldr	r1, [r4, #4]
 8005ff4:	4299      	cmp	r1, r3
 8005ff6:	bfde      	ittt	le
 8005ff8:	2330      	movle	r3, #48	; 0x30
 8005ffa:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005ffe:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006002:	1b52      	subs	r2, r2, r5
 8006004:	6122      	str	r2, [r4, #16]
 8006006:	464b      	mov	r3, r9
 8006008:	4621      	mov	r1, r4
 800600a:	4640      	mov	r0, r8
 800600c:	f8cd a000 	str.w	sl, [sp]
 8006010:	aa03      	add	r2, sp, #12
 8006012:	f7ff fedf 	bl	8005dd4 <_printf_common>
 8006016:	3001      	adds	r0, #1
 8006018:	d14c      	bne.n	80060b4 <_printf_i+0x200>
 800601a:	f04f 30ff 	mov.w	r0, #4294967295
 800601e:	b004      	add	sp, #16
 8006020:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006024:	4834      	ldr	r0, [pc, #208]	; (80060f8 <_printf_i+0x244>)
 8006026:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800602a:	6829      	ldr	r1, [r5, #0]
 800602c:	6823      	ldr	r3, [r4, #0]
 800602e:	f851 6b04 	ldr.w	r6, [r1], #4
 8006032:	6029      	str	r1, [r5, #0]
 8006034:	061d      	lsls	r5, r3, #24
 8006036:	d514      	bpl.n	8006062 <_printf_i+0x1ae>
 8006038:	07df      	lsls	r7, r3, #31
 800603a:	bf44      	itt	mi
 800603c:	f043 0320 	orrmi.w	r3, r3, #32
 8006040:	6023      	strmi	r3, [r4, #0]
 8006042:	b91e      	cbnz	r6, 800604c <_printf_i+0x198>
 8006044:	6823      	ldr	r3, [r4, #0]
 8006046:	f023 0320 	bic.w	r3, r3, #32
 800604a:	6023      	str	r3, [r4, #0]
 800604c:	2310      	movs	r3, #16
 800604e:	e7af      	b.n	8005fb0 <_printf_i+0xfc>
 8006050:	6823      	ldr	r3, [r4, #0]
 8006052:	f043 0320 	orr.w	r3, r3, #32
 8006056:	6023      	str	r3, [r4, #0]
 8006058:	2378      	movs	r3, #120	; 0x78
 800605a:	4828      	ldr	r0, [pc, #160]	; (80060fc <_printf_i+0x248>)
 800605c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006060:	e7e3      	b.n	800602a <_printf_i+0x176>
 8006062:	0659      	lsls	r1, r3, #25
 8006064:	bf48      	it	mi
 8006066:	b2b6      	uxthmi	r6, r6
 8006068:	e7e6      	b.n	8006038 <_printf_i+0x184>
 800606a:	4615      	mov	r5, r2
 800606c:	e7bb      	b.n	8005fe6 <_printf_i+0x132>
 800606e:	682b      	ldr	r3, [r5, #0]
 8006070:	6826      	ldr	r6, [r4, #0]
 8006072:	1d18      	adds	r0, r3, #4
 8006074:	6961      	ldr	r1, [r4, #20]
 8006076:	6028      	str	r0, [r5, #0]
 8006078:	0635      	lsls	r5, r6, #24
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	d501      	bpl.n	8006082 <_printf_i+0x1ce>
 800607e:	6019      	str	r1, [r3, #0]
 8006080:	e002      	b.n	8006088 <_printf_i+0x1d4>
 8006082:	0670      	lsls	r0, r6, #25
 8006084:	d5fb      	bpl.n	800607e <_printf_i+0x1ca>
 8006086:	8019      	strh	r1, [r3, #0]
 8006088:	2300      	movs	r3, #0
 800608a:	4615      	mov	r5, r2
 800608c:	6123      	str	r3, [r4, #16]
 800608e:	e7ba      	b.n	8006006 <_printf_i+0x152>
 8006090:	682b      	ldr	r3, [r5, #0]
 8006092:	2100      	movs	r1, #0
 8006094:	1d1a      	adds	r2, r3, #4
 8006096:	602a      	str	r2, [r5, #0]
 8006098:	681d      	ldr	r5, [r3, #0]
 800609a:	6862      	ldr	r2, [r4, #4]
 800609c:	4628      	mov	r0, r5
 800609e:	f000 fed5 	bl	8006e4c <memchr>
 80060a2:	b108      	cbz	r0, 80060a8 <_printf_i+0x1f4>
 80060a4:	1b40      	subs	r0, r0, r5
 80060a6:	6060      	str	r0, [r4, #4]
 80060a8:	6863      	ldr	r3, [r4, #4]
 80060aa:	6123      	str	r3, [r4, #16]
 80060ac:	2300      	movs	r3, #0
 80060ae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80060b2:	e7a8      	b.n	8006006 <_printf_i+0x152>
 80060b4:	462a      	mov	r2, r5
 80060b6:	4649      	mov	r1, r9
 80060b8:	4640      	mov	r0, r8
 80060ba:	6923      	ldr	r3, [r4, #16]
 80060bc:	47d0      	blx	sl
 80060be:	3001      	adds	r0, #1
 80060c0:	d0ab      	beq.n	800601a <_printf_i+0x166>
 80060c2:	6823      	ldr	r3, [r4, #0]
 80060c4:	079b      	lsls	r3, r3, #30
 80060c6:	d413      	bmi.n	80060f0 <_printf_i+0x23c>
 80060c8:	68e0      	ldr	r0, [r4, #12]
 80060ca:	9b03      	ldr	r3, [sp, #12]
 80060cc:	4298      	cmp	r0, r3
 80060ce:	bfb8      	it	lt
 80060d0:	4618      	movlt	r0, r3
 80060d2:	e7a4      	b.n	800601e <_printf_i+0x16a>
 80060d4:	2301      	movs	r3, #1
 80060d6:	4632      	mov	r2, r6
 80060d8:	4649      	mov	r1, r9
 80060da:	4640      	mov	r0, r8
 80060dc:	47d0      	blx	sl
 80060de:	3001      	adds	r0, #1
 80060e0:	d09b      	beq.n	800601a <_printf_i+0x166>
 80060e2:	3501      	adds	r5, #1
 80060e4:	68e3      	ldr	r3, [r4, #12]
 80060e6:	9903      	ldr	r1, [sp, #12]
 80060e8:	1a5b      	subs	r3, r3, r1
 80060ea:	42ab      	cmp	r3, r5
 80060ec:	dcf2      	bgt.n	80060d4 <_printf_i+0x220>
 80060ee:	e7eb      	b.n	80060c8 <_printf_i+0x214>
 80060f0:	2500      	movs	r5, #0
 80060f2:	f104 0619 	add.w	r6, r4, #25
 80060f6:	e7f5      	b.n	80060e4 <_printf_i+0x230>
 80060f8:	08008b56 	.word	0x08008b56
 80060fc:	08008b67 	.word	0x08008b67

08006100 <siprintf>:
 8006100:	b40e      	push	{r1, r2, r3}
 8006102:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006106:	b500      	push	{lr}
 8006108:	b09c      	sub	sp, #112	; 0x70
 800610a:	ab1d      	add	r3, sp, #116	; 0x74
 800610c:	9002      	str	r0, [sp, #8]
 800610e:	9006      	str	r0, [sp, #24]
 8006110:	9107      	str	r1, [sp, #28]
 8006112:	9104      	str	r1, [sp, #16]
 8006114:	4808      	ldr	r0, [pc, #32]	; (8006138 <siprintf+0x38>)
 8006116:	4909      	ldr	r1, [pc, #36]	; (800613c <siprintf+0x3c>)
 8006118:	f853 2b04 	ldr.w	r2, [r3], #4
 800611c:	9105      	str	r1, [sp, #20]
 800611e:	6800      	ldr	r0, [r0, #0]
 8006120:	a902      	add	r1, sp, #8
 8006122:	9301      	str	r3, [sp, #4]
 8006124:	f001 fb6e 	bl	8007804 <_svfiprintf_r>
 8006128:	2200      	movs	r2, #0
 800612a:	9b02      	ldr	r3, [sp, #8]
 800612c:	701a      	strb	r2, [r3, #0]
 800612e:	b01c      	add	sp, #112	; 0x70
 8006130:	f85d eb04 	ldr.w	lr, [sp], #4
 8006134:	b003      	add	sp, #12
 8006136:	4770      	bx	lr
 8006138:	20000014 	.word	0x20000014
 800613c:	ffff0208 	.word	0xffff0208

08006140 <quorem>:
 8006140:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006144:	6903      	ldr	r3, [r0, #16]
 8006146:	690c      	ldr	r4, [r1, #16]
 8006148:	4607      	mov	r7, r0
 800614a:	42a3      	cmp	r3, r4
 800614c:	f2c0 8082 	blt.w	8006254 <quorem+0x114>
 8006150:	3c01      	subs	r4, #1
 8006152:	f100 0514 	add.w	r5, r0, #20
 8006156:	f101 0814 	add.w	r8, r1, #20
 800615a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800615e:	9301      	str	r3, [sp, #4]
 8006160:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006164:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006168:	3301      	adds	r3, #1
 800616a:	429a      	cmp	r2, r3
 800616c:	fbb2 f6f3 	udiv	r6, r2, r3
 8006170:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006174:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006178:	d331      	bcc.n	80061de <quorem+0x9e>
 800617a:	f04f 0e00 	mov.w	lr, #0
 800617e:	4640      	mov	r0, r8
 8006180:	46ac      	mov	ip, r5
 8006182:	46f2      	mov	sl, lr
 8006184:	f850 2b04 	ldr.w	r2, [r0], #4
 8006188:	b293      	uxth	r3, r2
 800618a:	fb06 e303 	mla	r3, r6, r3, lr
 800618e:	0c12      	lsrs	r2, r2, #16
 8006190:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8006194:	b29b      	uxth	r3, r3
 8006196:	fb06 e202 	mla	r2, r6, r2, lr
 800619a:	ebaa 0303 	sub.w	r3, sl, r3
 800619e:	f8dc a000 	ldr.w	sl, [ip]
 80061a2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80061a6:	fa1f fa8a 	uxth.w	sl, sl
 80061aa:	4453      	add	r3, sl
 80061ac:	f8dc a000 	ldr.w	sl, [ip]
 80061b0:	b292      	uxth	r2, r2
 80061b2:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80061b6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80061ba:	b29b      	uxth	r3, r3
 80061bc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80061c0:	4581      	cmp	r9, r0
 80061c2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80061c6:	f84c 3b04 	str.w	r3, [ip], #4
 80061ca:	d2db      	bcs.n	8006184 <quorem+0x44>
 80061cc:	f855 300b 	ldr.w	r3, [r5, fp]
 80061d0:	b92b      	cbnz	r3, 80061de <quorem+0x9e>
 80061d2:	9b01      	ldr	r3, [sp, #4]
 80061d4:	3b04      	subs	r3, #4
 80061d6:	429d      	cmp	r5, r3
 80061d8:	461a      	mov	r2, r3
 80061da:	d32f      	bcc.n	800623c <quorem+0xfc>
 80061dc:	613c      	str	r4, [r7, #16]
 80061de:	4638      	mov	r0, r7
 80061e0:	f001 f8c0 	bl	8007364 <__mcmp>
 80061e4:	2800      	cmp	r0, #0
 80061e6:	db25      	blt.n	8006234 <quorem+0xf4>
 80061e8:	4628      	mov	r0, r5
 80061ea:	f04f 0c00 	mov.w	ip, #0
 80061ee:	3601      	adds	r6, #1
 80061f0:	f858 1b04 	ldr.w	r1, [r8], #4
 80061f4:	f8d0 e000 	ldr.w	lr, [r0]
 80061f8:	b28b      	uxth	r3, r1
 80061fa:	ebac 0303 	sub.w	r3, ip, r3
 80061fe:	fa1f f28e 	uxth.w	r2, lr
 8006202:	4413      	add	r3, r2
 8006204:	0c0a      	lsrs	r2, r1, #16
 8006206:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800620a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800620e:	b29b      	uxth	r3, r3
 8006210:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006214:	45c1      	cmp	r9, r8
 8006216:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800621a:	f840 3b04 	str.w	r3, [r0], #4
 800621e:	d2e7      	bcs.n	80061f0 <quorem+0xb0>
 8006220:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006224:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006228:	b922      	cbnz	r2, 8006234 <quorem+0xf4>
 800622a:	3b04      	subs	r3, #4
 800622c:	429d      	cmp	r5, r3
 800622e:	461a      	mov	r2, r3
 8006230:	d30a      	bcc.n	8006248 <quorem+0x108>
 8006232:	613c      	str	r4, [r7, #16]
 8006234:	4630      	mov	r0, r6
 8006236:	b003      	add	sp, #12
 8006238:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800623c:	6812      	ldr	r2, [r2, #0]
 800623e:	3b04      	subs	r3, #4
 8006240:	2a00      	cmp	r2, #0
 8006242:	d1cb      	bne.n	80061dc <quorem+0x9c>
 8006244:	3c01      	subs	r4, #1
 8006246:	e7c6      	b.n	80061d6 <quorem+0x96>
 8006248:	6812      	ldr	r2, [r2, #0]
 800624a:	3b04      	subs	r3, #4
 800624c:	2a00      	cmp	r2, #0
 800624e:	d1f0      	bne.n	8006232 <quorem+0xf2>
 8006250:	3c01      	subs	r4, #1
 8006252:	e7eb      	b.n	800622c <quorem+0xec>
 8006254:	2000      	movs	r0, #0
 8006256:	e7ee      	b.n	8006236 <quorem+0xf6>

08006258 <_dtoa_r>:
 8006258:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800625c:	4616      	mov	r6, r2
 800625e:	461f      	mov	r7, r3
 8006260:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8006262:	b099      	sub	sp, #100	; 0x64
 8006264:	4605      	mov	r5, r0
 8006266:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800626a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800626e:	b974      	cbnz	r4, 800628e <_dtoa_r+0x36>
 8006270:	2010      	movs	r0, #16
 8006272:	f000 fde3 	bl	8006e3c <malloc>
 8006276:	4602      	mov	r2, r0
 8006278:	6268      	str	r0, [r5, #36]	; 0x24
 800627a:	b920      	cbnz	r0, 8006286 <_dtoa_r+0x2e>
 800627c:	21ea      	movs	r1, #234	; 0xea
 800627e:	4ba8      	ldr	r3, [pc, #672]	; (8006520 <_dtoa_r+0x2c8>)
 8006280:	48a8      	ldr	r0, [pc, #672]	; (8006524 <_dtoa_r+0x2cc>)
 8006282:	f001 fbcf 	bl	8007a24 <__assert_func>
 8006286:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800628a:	6004      	str	r4, [r0, #0]
 800628c:	60c4      	str	r4, [r0, #12]
 800628e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006290:	6819      	ldr	r1, [r3, #0]
 8006292:	b151      	cbz	r1, 80062aa <_dtoa_r+0x52>
 8006294:	685a      	ldr	r2, [r3, #4]
 8006296:	2301      	movs	r3, #1
 8006298:	4093      	lsls	r3, r2
 800629a:	604a      	str	r2, [r1, #4]
 800629c:	608b      	str	r3, [r1, #8]
 800629e:	4628      	mov	r0, r5
 80062a0:	f000 fe22 	bl	8006ee8 <_Bfree>
 80062a4:	2200      	movs	r2, #0
 80062a6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80062a8:	601a      	str	r2, [r3, #0]
 80062aa:	1e3b      	subs	r3, r7, #0
 80062ac:	bfaf      	iteee	ge
 80062ae:	2300      	movge	r3, #0
 80062b0:	2201      	movlt	r2, #1
 80062b2:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80062b6:	9305      	strlt	r3, [sp, #20]
 80062b8:	bfa8      	it	ge
 80062ba:	f8c8 3000 	strge.w	r3, [r8]
 80062be:	f8dd 9014 	ldr.w	r9, [sp, #20]
 80062c2:	4b99      	ldr	r3, [pc, #612]	; (8006528 <_dtoa_r+0x2d0>)
 80062c4:	bfb8      	it	lt
 80062c6:	f8c8 2000 	strlt.w	r2, [r8]
 80062ca:	ea33 0309 	bics.w	r3, r3, r9
 80062ce:	d119      	bne.n	8006304 <_dtoa_r+0xac>
 80062d0:	f242 730f 	movw	r3, #9999	; 0x270f
 80062d4:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80062d6:	6013      	str	r3, [r2, #0]
 80062d8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80062dc:	4333      	orrs	r3, r6
 80062de:	f000 857f 	beq.w	8006de0 <_dtoa_r+0xb88>
 80062e2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80062e4:	b953      	cbnz	r3, 80062fc <_dtoa_r+0xa4>
 80062e6:	4b91      	ldr	r3, [pc, #580]	; (800652c <_dtoa_r+0x2d4>)
 80062e8:	e022      	b.n	8006330 <_dtoa_r+0xd8>
 80062ea:	4b91      	ldr	r3, [pc, #580]	; (8006530 <_dtoa_r+0x2d8>)
 80062ec:	9303      	str	r3, [sp, #12]
 80062ee:	3308      	adds	r3, #8
 80062f0:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80062f2:	6013      	str	r3, [r2, #0]
 80062f4:	9803      	ldr	r0, [sp, #12]
 80062f6:	b019      	add	sp, #100	; 0x64
 80062f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80062fc:	4b8b      	ldr	r3, [pc, #556]	; (800652c <_dtoa_r+0x2d4>)
 80062fe:	9303      	str	r3, [sp, #12]
 8006300:	3303      	adds	r3, #3
 8006302:	e7f5      	b.n	80062f0 <_dtoa_r+0x98>
 8006304:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8006308:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800630c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006310:	2200      	movs	r2, #0
 8006312:	2300      	movs	r3, #0
 8006314:	f7fa fb48 	bl	80009a8 <__aeabi_dcmpeq>
 8006318:	4680      	mov	r8, r0
 800631a:	b158      	cbz	r0, 8006334 <_dtoa_r+0xdc>
 800631c:	2301      	movs	r3, #1
 800631e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006320:	6013      	str	r3, [r2, #0]
 8006322:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006324:	2b00      	cmp	r3, #0
 8006326:	f000 8558 	beq.w	8006dda <_dtoa_r+0xb82>
 800632a:	4882      	ldr	r0, [pc, #520]	; (8006534 <_dtoa_r+0x2dc>)
 800632c:	6018      	str	r0, [r3, #0]
 800632e:	1e43      	subs	r3, r0, #1
 8006330:	9303      	str	r3, [sp, #12]
 8006332:	e7df      	b.n	80062f4 <_dtoa_r+0x9c>
 8006334:	ab16      	add	r3, sp, #88	; 0x58
 8006336:	9301      	str	r3, [sp, #4]
 8006338:	ab17      	add	r3, sp, #92	; 0x5c
 800633a:	9300      	str	r3, [sp, #0]
 800633c:	4628      	mov	r0, r5
 800633e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8006342:	f001 f8b7 	bl	80074b4 <__d2b>
 8006346:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800634a:	4683      	mov	fp, r0
 800634c:	2c00      	cmp	r4, #0
 800634e:	d07f      	beq.n	8006450 <_dtoa_r+0x1f8>
 8006350:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006354:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006356:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800635a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800635e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8006362:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8006366:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800636a:	2200      	movs	r2, #0
 800636c:	4b72      	ldr	r3, [pc, #456]	; (8006538 <_dtoa_r+0x2e0>)
 800636e:	f7f9 fefb 	bl	8000168 <__aeabi_dsub>
 8006372:	a365      	add	r3, pc, #404	; (adr r3, 8006508 <_dtoa_r+0x2b0>)
 8006374:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006378:	f7fa f8ae 	bl	80004d8 <__aeabi_dmul>
 800637c:	a364      	add	r3, pc, #400	; (adr r3, 8006510 <_dtoa_r+0x2b8>)
 800637e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006382:	f7f9 fef3 	bl	800016c <__adddf3>
 8006386:	4606      	mov	r6, r0
 8006388:	4620      	mov	r0, r4
 800638a:	460f      	mov	r7, r1
 800638c:	f7fa f83a 	bl	8000404 <__aeabi_i2d>
 8006390:	a361      	add	r3, pc, #388	; (adr r3, 8006518 <_dtoa_r+0x2c0>)
 8006392:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006396:	f7fa f89f 	bl	80004d8 <__aeabi_dmul>
 800639a:	4602      	mov	r2, r0
 800639c:	460b      	mov	r3, r1
 800639e:	4630      	mov	r0, r6
 80063a0:	4639      	mov	r1, r7
 80063a2:	f7f9 fee3 	bl	800016c <__adddf3>
 80063a6:	4606      	mov	r6, r0
 80063a8:	460f      	mov	r7, r1
 80063aa:	f7fa fb45 	bl	8000a38 <__aeabi_d2iz>
 80063ae:	2200      	movs	r2, #0
 80063b0:	4682      	mov	sl, r0
 80063b2:	2300      	movs	r3, #0
 80063b4:	4630      	mov	r0, r6
 80063b6:	4639      	mov	r1, r7
 80063b8:	f7fa fb00 	bl	80009bc <__aeabi_dcmplt>
 80063bc:	b148      	cbz	r0, 80063d2 <_dtoa_r+0x17a>
 80063be:	4650      	mov	r0, sl
 80063c0:	f7fa f820 	bl	8000404 <__aeabi_i2d>
 80063c4:	4632      	mov	r2, r6
 80063c6:	463b      	mov	r3, r7
 80063c8:	f7fa faee 	bl	80009a8 <__aeabi_dcmpeq>
 80063cc:	b908      	cbnz	r0, 80063d2 <_dtoa_r+0x17a>
 80063ce:	f10a 3aff 	add.w	sl, sl, #4294967295
 80063d2:	f1ba 0f16 	cmp.w	sl, #22
 80063d6:	d858      	bhi.n	800648a <_dtoa_r+0x232>
 80063d8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80063dc:	4b57      	ldr	r3, [pc, #348]	; (800653c <_dtoa_r+0x2e4>)
 80063de:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80063e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063e6:	f7fa fae9 	bl	80009bc <__aeabi_dcmplt>
 80063ea:	2800      	cmp	r0, #0
 80063ec:	d04f      	beq.n	800648e <_dtoa_r+0x236>
 80063ee:	2300      	movs	r3, #0
 80063f0:	f10a 3aff 	add.w	sl, sl, #4294967295
 80063f4:	930f      	str	r3, [sp, #60]	; 0x3c
 80063f6:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80063f8:	1b1c      	subs	r4, r3, r4
 80063fa:	1e63      	subs	r3, r4, #1
 80063fc:	9309      	str	r3, [sp, #36]	; 0x24
 80063fe:	bf49      	itett	mi
 8006400:	f1c4 0301 	rsbmi	r3, r4, #1
 8006404:	2300      	movpl	r3, #0
 8006406:	9306      	strmi	r3, [sp, #24]
 8006408:	2300      	movmi	r3, #0
 800640a:	bf54      	ite	pl
 800640c:	9306      	strpl	r3, [sp, #24]
 800640e:	9309      	strmi	r3, [sp, #36]	; 0x24
 8006410:	f1ba 0f00 	cmp.w	sl, #0
 8006414:	db3d      	blt.n	8006492 <_dtoa_r+0x23a>
 8006416:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006418:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800641c:	4453      	add	r3, sl
 800641e:	9309      	str	r3, [sp, #36]	; 0x24
 8006420:	2300      	movs	r3, #0
 8006422:	930a      	str	r3, [sp, #40]	; 0x28
 8006424:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006426:	2b09      	cmp	r3, #9
 8006428:	f200 808c 	bhi.w	8006544 <_dtoa_r+0x2ec>
 800642c:	2b05      	cmp	r3, #5
 800642e:	bfc4      	itt	gt
 8006430:	3b04      	subgt	r3, #4
 8006432:	9322      	strgt	r3, [sp, #136]	; 0x88
 8006434:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006436:	bfc8      	it	gt
 8006438:	2400      	movgt	r4, #0
 800643a:	f1a3 0302 	sub.w	r3, r3, #2
 800643e:	bfd8      	it	le
 8006440:	2401      	movle	r4, #1
 8006442:	2b03      	cmp	r3, #3
 8006444:	f200 808a 	bhi.w	800655c <_dtoa_r+0x304>
 8006448:	e8df f003 	tbb	[pc, r3]
 800644c:	5b4d4f2d 	.word	0x5b4d4f2d
 8006450:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8006454:	441c      	add	r4, r3
 8006456:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800645a:	2b20      	cmp	r3, #32
 800645c:	bfc3      	ittte	gt
 800645e:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006462:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8006466:	fa09 f303 	lslgt.w	r3, r9, r3
 800646a:	f1c3 0320 	rsble	r3, r3, #32
 800646e:	bfc6      	itte	gt
 8006470:	fa26 f000 	lsrgt.w	r0, r6, r0
 8006474:	4318      	orrgt	r0, r3
 8006476:	fa06 f003 	lslle.w	r0, r6, r3
 800647a:	f7f9 ffb3 	bl	80003e4 <__aeabi_ui2d>
 800647e:	2301      	movs	r3, #1
 8006480:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8006484:	3c01      	subs	r4, #1
 8006486:	9313      	str	r3, [sp, #76]	; 0x4c
 8006488:	e76f      	b.n	800636a <_dtoa_r+0x112>
 800648a:	2301      	movs	r3, #1
 800648c:	e7b2      	b.n	80063f4 <_dtoa_r+0x19c>
 800648e:	900f      	str	r0, [sp, #60]	; 0x3c
 8006490:	e7b1      	b.n	80063f6 <_dtoa_r+0x19e>
 8006492:	9b06      	ldr	r3, [sp, #24]
 8006494:	eba3 030a 	sub.w	r3, r3, sl
 8006498:	9306      	str	r3, [sp, #24]
 800649a:	f1ca 0300 	rsb	r3, sl, #0
 800649e:	930a      	str	r3, [sp, #40]	; 0x28
 80064a0:	2300      	movs	r3, #0
 80064a2:	930e      	str	r3, [sp, #56]	; 0x38
 80064a4:	e7be      	b.n	8006424 <_dtoa_r+0x1cc>
 80064a6:	2300      	movs	r3, #0
 80064a8:	930b      	str	r3, [sp, #44]	; 0x2c
 80064aa:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	dc58      	bgt.n	8006562 <_dtoa_r+0x30a>
 80064b0:	f04f 0901 	mov.w	r9, #1
 80064b4:	464b      	mov	r3, r9
 80064b6:	f8cd 9020 	str.w	r9, [sp, #32]
 80064ba:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 80064be:	2200      	movs	r2, #0
 80064c0:	6a68      	ldr	r0, [r5, #36]	; 0x24
 80064c2:	6042      	str	r2, [r0, #4]
 80064c4:	2204      	movs	r2, #4
 80064c6:	f102 0614 	add.w	r6, r2, #20
 80064ca:	429e      	cmp	r6, r3
 80064cc:	6841      	ldr	r1, [r0, #4]
 80064ce:	d94e      	bls.n	800656e <_dtoa_r+0x316>
 80064d0:	4628      	mov	r0, r5
 80064d2:	f000 fcc9 	bl	8006e68 <_Balloc>
 80064d6:	9003      	str	r0, [sp, #12]
 80064d8:	2800      	cmp	r0, #0
 80064da:	d14c      	bne.n	8006576 <_dtoa_r+0x31e>
 80064dc:	4602      	mov	r2, r0
 80064de:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80064e2:	4b17      	ldr	r3, [pc, #92]	; (8006540 <_dtoa_r+0x2e8>)
 80064e4:	e6cc      	b.n	8006280 <_dtoa_r+0x28>
 80064e6:	2301      	movs	r3, #1
 80064e8:	e7de      	b.n	80064a8 <_dtoa_r+0x250>
 80064ea:	2300      	movs	r3, #0
 80064ec:	930b      	str	r3, [sp, #44]	; 0x2c
 80064ee:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80064f0:	eb0a 0903 	add.w	r9, sl, r3
 80064f4:	f109 0301 	add.w	r3, r9, #1
 80064f8:	2b01      	cmp	r3, #1
 80064fa:	9308      	str	r3, [sp, #32]
 80064fc:	bfb8      	it	lt
 80064fe:	2301      	movlt	r3, #1
 8006500:	e7dd      	b.n	80064be <_dtoa_r+0x266>
 8006502:	2301      	movs	r3, #1
 8006504:	e7f2      	b.n	80064ec <_dtoa_r+0x294>
 8006506:	bf00      	nop
 8006508:	636f4361 	.word	0x636f4361
 800650c:	3fd287a7 	.word	0x3fd287a7
 8006510:	8b60c8b3 	.word	0x8b60c8b3
 8006514:	3fc68a28 	.word	0x3fc68a28
 8006518:	509f79fb 	.word	0x509f79fb
 800651c:	3fd34413 	.word	0x3fd34413
 8006520:	08008b85 	.word	0x08008b85
 8006524:	08008b9c 	.word	0x08008b9c
 8006528:	7ff00000 	.word	0x7ff00000
 800652c:	08008b81 	.word	0x08008b81
 8006530:	08008b78 	.word	0x08008b78
 8006534:	08008b55 	.word	0x08008b55
 8006538:	3ff80000 	.word	0x3ff80000
 800653c:	08008c90 	.word	0x08008c90
 8006540:	08008bf7 	.word	0x08008bf7
 8006544:	2401      	movs	r4, #1
 8006546:	2300      	movs	r3, #0
 8006548:	940b      	str	r4, [sp, #44]	; 0x2c
 800654a:	9322      	str	r3, [sp, #136]	; 0x88
 800654c:	f04f 39ff 	mov.w	r9, #4294967295
 8006550:	2200      	movs	r2, #0
 8006552:	2312      	movs	r3, #18
 8006554:	f8cd 9020 	str.w	r9, [sp, #32]
 8006558:	9223      	str	r2, [sp, #140]	; 0x8c
 800655a:	e7b0      	b.n	80064be <_dtoa_r+0x266>
 800655c:	2301      	movs	r3, #1
 800655e:	930b      	str	r3, [sp, #44]	; 0x2c
 8006560:	e7f4      	b.n	800654c <_dtoa_r+0x2f4>
 8006562:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 8006566:	464b      	mov	r3, r9
 8006568:	f8cd 9020 	str.w	r9, [sp, #32]
 800656c:	e7a7      	b.n	80064be <_dtoa_r+0x266>
 800656e:	3101      	adds	r1, #1
 8006570:	6041      	str	r1, [r0, #4]
 8006572:	0052      	lsls	r2, r2, #1
 8006574:	e7a7      	b.n	80064c6 <_dtoa_r+0x26e>
 8006576:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006578:	9a03      	ldr	r2, [sp, #12]
 800657a:	601a      	str	r2, [r3, #0]
 800657c:	9b08      	ldr	r3, [sp, #32]
 800657e:	2b0e      	cmp	r3, #14
 8006580:	f200 80a8 	bhi.w	80066d4 <_dtoa_r+0x47c>
 8006584:	2c00      	cmp	r4, #0
 8006586:	f000 80a5 	beq.w	80066d4 <_dtoa_r+0x47c>
 800658a:	f1ba 0f00 	cmp.w	sl, #0
 800658e:	dd34      	ble.n	80065fa <_dtoa_r+0x3a2>
 8006590:	4a9a      	ldr	r2, [pc, #616]	; (80067fc <_dtoa_r+0x5a4>)
 8006592:	f00a 030f 	and.w	r3, sl, #15
 8006596:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800659a:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800659e:	e9d3 3400 	ldrd	r3, r4, [r3]
 80065a2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80065a6:	ea4f 142a 	mov.w	r4, sl, asr #4
 80065aa:	d016      	beq.n	80065da <_dtoa_r+0x382>
 80065ac:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80065b0:	4b93      	ldr	r3, [pc, #588]	; (8006800 <_dtoa_r+0x5a8>)
 80065b2:	2703      	movs	r7, #3
 80065b4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80065b8:	f7fa f8b8 	bl	800072c <__aeabi_ddiv>
 80065bc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80065c0:	f004 040f 	and.w	r4, r4, #15
 80065c4:	4e8e      	ldr	r6, [pc, #568]	; (8006800 <_dtoa_r+0x5a8>)
 80065c6:	b954      	cbnz	r4, 80065de <_dtoa_r+0x386>
 80065c8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80065cc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80065d0:	f7fa f8ac 	bl	800072c <__aeabi_ddiv>
 80065d4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80065d8:	e029      	b.n	800662e <_dtoa_r+0x3d6>
 80065da:	2702      	movs	r7, #2
 80065dc:	e7f2      	b.n	80065c4 <_dtoa_r+0x36c>
 80065de:	07e1      	lsls	r1, r4, #31
 80065e0:	d508      	bpl.n	80065f4 <_dtoa_r+0x39c>
 80065e2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80065e6:	e9d6 2300 	ldrd	r2, r3, [r6]
 80065ea:	f7f9 ff75 	bl	80004d8 <__aeabi_dmul>
 80065ee:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80065f2:	3701      	adds	r7, #1
 80065f4:	1064      	asrs	r4, r4, #1
 80065f6:	3608      	adds	r6, #8
 80065f8:	e7e5      	b.n	80065c6 <_dtoa_r+0x36e>
 80065fa:	f000 80a5 	beq.w	8006748 <_dtoa_r+0x4f0>
 80065fe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006602:	f1ca 0400 	rsb	r4, sl, #0
 8006606:	4b7d      	ldr	r3, [pc, #500]	; (80067fc <_dtoa_r+0x5a4>)
 8006608:	f004 020f 	and.w	r2, r4, #15
 800660c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006610:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006614:	f7f9 ff60 	bl	80004d8 <__aeabi_dmul>
 8006618:	2702      	movs	r7, #2
 800661a:	2300      	movs	r3, #0
 800661c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006620:	4e77      	ldr	r6, [pc, #476]	; (8006800 <_dtoa_r+0x5a8>)
 8006622:	1124      	asrs	r4, r4, #4
 8006624:	2c00      	cmp	r4, #0
 8006626:	f040 8084 	bne.w	8006732 <_dtoa_r+0x4da>
 800662a:	2b00      	cmp	r3, #0
 800662c:	d1d2      	bne.n	80065d4 <_dtoa_r+0x37c>
 800662e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006630:	2b00      	cmp	r3, #0
 8006632:	f000 808b 	beq.w	800674c <_dtoa_r+0x4f4>
 8006636:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800663a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800663e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006642:	2200      	movs	r2, #0
 8006644:	4b6f      	ldr	r3, [pc, #444]	; (8006804 <_dtoa_r+0x5ac>)
 8006646:	f7fa f9b9 	bl	80009bc <__aeabi_dcmplt>
 800664a:	2800      	cmp	r0, #0
 800664c:	d07e      	beq.n	800674c <_dtoa_r+0x4f4>
 800664e:	9b08      	ldr	r3, [sp, #32]
 8006650:	2b00      	cmp	r3, #0
 8006652:	d07b      	beq.n	800674c <_dtoa_r+0x4f4>
 8006654:	f1b9 0f00 	cmp.w	r9, #0
 8006658:	dd38      	ble.n	80066cc <_dtoa_r+0x474>
 800665a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800665e:	2200      	movs	r2, #0
 8006660:	4b69      	ldr	r3, [pc, #420]	; (8006808 <_dtoa_r+0x5b0>)
 8006662:	f7f9 ff39 	bl	80004d8 <__aeabi_dmul>
 8006666:	464c      	mov	r4, r9
 8006668:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800666c:	f10a 38ff 	add.w	r8, sl, #4294967295
 8006670:	3701      	adds	r7, #1
 8006672:	4638      	mov	r0, r7
 8006674:	f7f9 fec6 	bl	8000404 <__aeabi_i2d>
 8006678:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800667c:	f7f9 ff2c 	bl	80004d8 <__aeabi_dmul>
 8006680:	2200      	movs	r2, #0
 8006682:	4b62      	ldr	r3, [pc, #392]	; (800680c <_dtoa_r+0x5b4>)
 8006684:	f7f9 fd72 	bl	800016c <__adddf3>
 8006688:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800668c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006690:	9611      	str	r6, [sp, #68]	; 0x44
 8006692:	2c00      	cmp	r4, #0
 8006694:	d15d      	bne.n	8006752 <_dtoa_r+0x4fa>
 8006696:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800669a:	2200      	movs	r2, #0
 800669c:	4b5c      	ldr	r3, [pc, #368]	; (8006810 <_dtoa_r+0x5b8>)
 800669e:	f7f9 fd63 	bl	8000168 <__aeabi_dsub>
 80066a2:	4602      	mov	r2, r0
 80066a4:	460b      	mov	r3, r1
 80066a6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80066aa:	4633      	mov	r3, r6
 80066ac:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80066ae:	f7fa f9a3 	bl	80009f8 <__aeabi_dcmpgt>
 80066b2:	2800      	cmp	r0, #0
 80066b4:	f040 829c 	bne.w	8006bf0 <_dtoa_r+0x998>
 80066b8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80066bc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80066be:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80066c2:	f7fa f97b 	bl	80009bc <__aeabi_dcmplt>
 80066c6:	2800      	cmp	r0, #0
 80066c8:	f040 8290 	bne.w	8006bec <_dtoa_r+0x994>
 80066cc:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 80066d0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80066d4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	f2c0 8152 	blt.w	8006980 <_dtoa_r+0x728>
 80066dc:	f1ba 0f0e 	cmp.w	sl, #14
 80066e0:	f300 814e 	bgt.w	8006980 <_dtoa_r+0x728>
 80066e4:	4b45      	ldr	r3, [pc, #276]	; (80067fc <_dtoa_r+0x5a4>)
 80066e6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80066ea:	e9d3 3400 	ldrd	r3, r4, [r3]
 80066ee:	e9cd 3406 	strd	r3, r4, [sp, #24]
 80066f2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	f280 80db 	bge.w	80068b0 <_dtoa_r+0x658>
 80066fa:	9b08      	ldr	r3, [sp, #32]
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	f300 80d7 	bgt.w	80068b0 <_dtoa_r+0x658>
 8006702:	f040 8272 	bne.w	8006bea <_dtoa_r+0x992>
 8006706:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800670a:	2200      	movs	r2, #0
 800670c:	4b40      	ldr	r3, [pc, #256]	; (8006810 <_dtoa_r+0x5b8>)
 800670e:	f7f9 fee3 	bl	80004d8 <__aeabi_dmul>
 8006712:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006716:	f7fa f965 	bl	80009e4 <__aeabi_dcmpge>
 800671a:	9c08      	ldr	r4, [sp, #32]
 800671c:	4626      	mov	r6, r4
 800671e:	2800      	cmp	r0, #0
 8006720:	f040 8248 	bne.w	8006bb4 <_dtoa_r+0x95c>
 8006724:	2331      	movs	r3, #49	; 0x31
 8006726:	9f03      	ldr	r7, [sp, #12]
 8006728:	f10a 0a01 	add.w	sl, sl, #1
 800672c:	f807 3b01 	strb.w	r3, [r7], #1
 8006730:	e244      	b.n	8006bbc <_dtoa_r+0x964>
 8006732:	07e2      	lsls	r2, r4, #31
 8006734:	d505      	bpl.n	8006742 <_dtoa_r+0x4ea>
 8006736:	e9d6 2300 	ldrd	r2, r3, [r6]
 800673a:	f7f9 fecd 	bl	80004d8 <__aeabi_dmul>
 800673e:	2301      	movs	r3, #1
 8006740:	3701      	adds	r7, #1
 8006742:	1064      	asrs	r4, r4, #1
 8006744:	3608      	adds	r6, #8
 8006746:	e76d      	b.n	8006624 <_dtoa_r+0x3cc>
 8006748:	2702      	movs	r7, #2
 800674a:	e770      	b.n	800662e <_dtoa_r+0x3d6>
 800674c:	46d0      	mov	r8, sl
 800674e:	9c08      	ldr	r4, [sp, #32]
 8006750:	e78f      	b.n	8006672 <_dtoa_r+0x41a>
 8006752:	9903      	ldr	r1, [sp, #12]
 8006754:	4b29      	ldr	r3, [pc, #164]	; (80067fc <_dtoa_r+0x5a4>)
 8006756:	4421      	add	r1, r4
 8006758:	9112      	str	r1, [sp, #72]	; 0x48
 800675a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800675c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006760:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8006764:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006768:	2900      	cmp	r1, #0
 800676a:	d055      	beq.n	8006818 <_dtoa_r+0x5c0>
 800676c:	2000      	movs	r0, #0
 800676e:	4929      	ldr	r1, [pc, #164]	; (8006814 <_dtoa_r+0x5bc>)
 8006770:	f7f9 ffdc 	bl	800072c <__aeabi_ddiv>
 8006774:	463b      	mov	r3, r7
 8006776:	4632      	mov	r2, r6
 8006778:	f7f9 fcf6 	bl	8000168 <__aeabi_dsub>
 800677c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006780:	9f03      	ldr	r7, [sp, #12]
 8006782:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006786:	f7fa f957 	bl	8000a38 <__aeabi_d2iz>
 800678a:	4604      	mov	r4, r0
 800678c:	f7f9 fe3a 	bl	8000404 <__aeabi_i2d>
 8006790:	4602      	mov	r2, r0
 8006792:	460b      	mov	r3, r1
 8006794:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006798:	f7f9 fce6 	bl	8000168 <__aeabi_dsub>
 800679c:	4602      	mov	r2, r0
 800679e:	460b      	mov	r3, r1
 80067a0:	3430      	adds	r4, #48	; 0x30
 80067a2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80067a6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80067aa:	f807 4b01 	strb.w	r4, [r7], #1
 80067ae:	f7fa f905 	bl	80009bc <__aeabi_dcmplt>
 80067b2:	2800      	cmp	r0, #0
 80067b4:	d174      	bne.n	80068a0 <_dtoa_r+0x648>
 80067b6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80067ba:	2000      	movs	r0, #0
 80067bc:	4911      	ldr	r1, [pc, #68]	; (8006804 <_dtoa_r+0x5ac>)
 80067be:	f7f9 fcd3 	bl	8000168 <__aeabi_dsub>
 80067c2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80067c6:	f7fa f8f9 	bl	80009bc <__aeabi_dcmplt>
 80067ca:	2800      	cmp	r0, #0
 80067cc:	f040 80b7 	bne.w	800693e <_dtoa_r+0x6e6>
 80067d0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80067d2:	429f      	cmp	r7, r3
 80067d4:	f43f af7a 	beq.w	80066cc <_dtoa_r+0x474>
 80067d8:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80067dc:	2200      	movs	r2, #0
 80067de:	4b0a      	ldr	r3, [pc, #40]	; (8006808 <_dtoa_r+0x5b0>)
 80067e0:	f7f9 fe7a 	bl	80004d8 <__aeabi_dmul>
 80067e4:	2200      	movs	r2, #0
 80067e6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80067ea:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80067ee:	4b06      	ldr	r3, [pc, #24]	; (8006808 <_dtoa_r+0x5b0>)
 80067f0:	f7f9 fe72 	bl	80004d8 <__aeabi_dmul>
 80067f4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80067f8:	e7c3      	b.n	8006782 <_dtoa_r+0x52a>
 80067fa:	bf00      	nop
 80067fc:	08008c90 	.word	0x08008c90
 8006800:	08008c68 	.word	0x08008c68
 8006804:	3ff00000 	.word	0x3ff00000
 8006808:	40240000 	.word	0x40240000
 800680c:	401c0000 	.word	0x401c0000
 8006810:	40140000 	.word	0x40140000
 8006814:	3fe00000 	.word	0x3fe00000
 8006818:	4630      	mov	r0, r6
 800681a:	4639      	mov	r1, r7
 800681c:	f7f9 fe5c 	bl	80004d8 <__aeabi_dmul>
 8006820:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006822:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006826:	9c03      	ldr	r4, [sp, #12]
 8006828:	9314      	str	r3, [sp, #80]	; 0x50
 800682a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800682e:	f7fa f903 	bl	8000a38 <__aeabi_d2iz>
 8006832:	9015      	str	r0, [sp, #84]	; 0x54
 8006834:	f7f9 fde6 	bl	8000404 <__aeabi_i2d>
 8006838:	4602      	mov	r2, r0
 800683a:	460b      	mov	r3, r1
 800683c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006840:	f7f9 fc92 	bl	8000168 <__aeabi_dsub>
 8006844:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006846:	4606      	mov	r6, r0
 8006848:	3330      	adds	r3, #48	; 0x30
 800684a:	f804 3b01 	strb.w	r3, [r4], #1
 800684e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006850:	460f      	mov	r7, r1
 8006852:	429c      	cmp	r4, r3
 8006854:	f04f 0200 	mov.w	r2, #0
 8006858:	d124      	bne.n	80068a4 <_dtoa_r+0x64c>
 800685a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800685e:	4bb0      	ldr	r3, [pc, #704]	; (8006b20 <_dtoa_r+0x8c8>)
 8006860:	f7f9 fc84 	bl	800016c <__adddf3>
 8006864:	4602      	mov	r2, r0
 8006866:	460b      	mov	r3, r1
 8006868:	4630      	mov	r0, r6
 800686a:	4639      	mov	r1, r7
 800686c:	f7fa f8c4 	bl	80009f8 <__aeabi_dcmpgt>
 8006870:	2800      	cmp	r0, #0
 8006872:	d163      	bne.n	800693c <_dtoa_r+0x6e4>
 8006874:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006878:	2000      	movs	r0, #0
 800687a:	49a9      	ldr	r1, [pc, #676]	; (8006b20 <_dtoa_r+0x8c8>)
 800687c:	f7f9 fc74 	bl	8000168 <__aeabi_dsub>
 8006880:	4602      	mov	r2, r0
 8006882:	460b      	mov	r3, r1
 8006884:	4630      	mov	r0, r6
 8006886:	4639      	mov	r1, r7
 8006888:	f7fa f898 	bl	80009bc <__aeabi_dcmplt>
 800688c:	2800      	cmp	r0, #0
 800688e:	f43f af1d 	beq.w	80066cc <_dtoa_r+0x474>
 8006892:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8006894:	1e7b      	subs	r3, r7, #1
 8006896:	9314      	str	r3, [sp, #80]	; 0x50
 8006898:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800689c:	2b30      	cmp	r3, #48	; 0x30
 800689e:	d0f8      	beq.n	8006892 <_dtoa_r+0x63a>
 80068a0:	46c2      	mov	sl, r8
 80068a2:	e03b      	b.n	800691c <_dtoa_r+0x6c4>
 80068a4:	4b9f      	ldr	r3, [pc, #636]	; (8006b24 <_dtoa_r+0x8cc>)
 80068a6:	f7f9 fe17 	bl	80004d8 <__aeabi_dmul>
 80068aa:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80068ae:	e7bc      	b.n	800682a <_dtoa_r+0x5d2>
 80068b0:	9f03      	ldr	r7, [sp, #12]
 80068b2:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80068b6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80068ba:	4640      	mov	r0, r8
 80068bc:	4649      	mov	r1, r9
 80068be:	f7f9 ff35 	bl	800072c <__aeabi_ddiv>
 80068c2:	f7fa f8b9 	bl	8000a38 <__aeabi_d2iz>
 80068c6:	4604      	mov	r4, r0
 80068c8:	f7f9 fd9c 	bl	8000404 <__aeabi_i2d>
 80068cc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80068d0:	f7f9 fe02 	bl	80004d8 <__aeabi_dmul>
 80068d4:	4602      	mov	r2, r0
 80068d6:	460b      	mov	r3, r1
 80068d8:	4640      	mov	r0, r8
 80068da:	4649      	mov	r1, r9
 80068dc:	f7f9 fc44 	bl	8000168 <__aeabi_dsub>
 80068e0:	f104 0630 	add.w	r6, r4, #48	; 0x30
 80068e4:	f807 6b01 	strb.w	r6, [r7], #1
 80068e8:	9e03      	ldr	r6, [sp, #12]
 80068ea:	f8dd c020 	ldr.w	ip, [sp, #32]
 80068ee:	1bbe      	subs	r6, r7, r6
 80068f0:	45b4      	cmp	ip, r6
 80068f2:	4602      	mov	r2, r0
 80068f4:	460b      	mov	r3, r1
 80068f6:	d136      	bne.n	8006966 <_dtoa_r+0x70e>
 80068f8:	f7f9 fc38 	bl	800016c <__adddf3>
 80068fc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006900:	4680      	mov	r8, r0
 8006902:	4689      	mov	r9, r1
 8006904:	f7fa f878 	bl	80009f8 <__aeabi_dcmpgt>
 8006908:	bb58      	cbnz	r0, 8006962 <_dtoa_r+0x70a>
 800690a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800690e:	4640      	mov	r0, r8
 8006910:	4649      	mov	r1, r9
 8006912:	f7fa f849 	bl	80009a8 <__aeabi_dcmpeq>
 8006916:	b108      	cbz	r0, 800691c <_dtoa_r+0x6c4>
 8006918:	07e1      	lsls	r1, r4, #31
 800691a:	d422      	bmi.n	8006962 <_dtoa_r+0x70a>
 800691c:	4628      	mov	r0, r5
 800691e:	4659      	mov	r1, fp
 8006920:	f000 fae2 	bl	8006ee8 <_Bfree>
 8006924:	2300      	movs	r3, #0
 8006926:	703b      	strb	r3, [r7, #0]
 8006928:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800692a:	f10a 0001 	add.w	r0, sl, #1
 800692e:	6018      	str	r0, [r3, #0]
 8006930:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006932:	2b00      	cmp	r3, #0
 8006934:	f43f acde 	beq.w	80062f4 <_dtoa_r+0x9c>
 8006938:	601f      	str	r7, [r3, #0]
 800693a:	e4db      	b.n	80062f4 <_dtoa_r+0x9c>
 800693c:	4627      	mov	r7, r4
 800693e:	463b      	mov	r3, r7
 8006940:	461f      	mov	r7, r3
 8006942:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006946:	2a39      	cmp	r2, #57	; 0x39
 8006948:	d107      	bne.n	800695a <_dtoa_r+0x702>
 800694a:	9a03      	ldr	r2, [sp, #12]
 800694c:	429a      	cmp	r2, r3
 800694e:	d1f7      	bne.n	8006940 <_dtoa_r+0x6e8>
 8006950:	2230      	movs	r2, #48	; 0x30
 8006952:	9903      	ldr	r1, [sp, #12]
 8006954:	f108 0801 	add.w	r8, r8, #1
 8006958:	700a      	strb	r2, [r1, #0]
 800695a:	781a      	ldrb	r2, [r3, #0]
 800695c:	3201      	adds	r2, #1
 800695e:	701a      	strb	r2, [r3, #0]
 8006960:	e79e      	b.n	80068a0 <_dtoa_r+0x648>
 8006962:	46d0      	mov	r8, sl
 8006964:	e7eb      	b.n	800693e <_dtoa_r+0x6e6>
 8006966:	2200      	movs	r2, #0
 8006968:	4b6e      	ldr	r3, [pc, #440]	; (8006b24 <_dtoa_r+0x8cc>)
 800696a:	f7f9 fdb5 	bl	80004d8 <__aeabi_dmul>
 800696e:	2200      	movs	r2, #0
 8006970:	2300      	movs	r3, #0
 8006972:	4680      	mov	r8, r0
 8006974:	4689      	mov	r9, r1
 8006976:	f7fa f817 	bl	80009a8 <__aeabi_dcmpeq>
 800697a:	2800      	cmp	r0, #0
 800697c:	d09b      	beq.n	80068b6 <_dtoa_r+0x65e>
 800697e:	e7cd      	b.n	800691c <_dtoa_r+0x6c4>
 8006980:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006982:	2a00      	cmp	r2, #0
 8006984:	f000 80d0 	beq.w	8006b28 <_dtoa_r+0x8d0>
 8006988:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800698a:	2a01      	cmp	r2, #1
 800698c:	f300 80ae 	bgt.w	8006aec <_dtoa_r+0x894>
 8006990:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006992:	2a00      	cmp	r2, #0
 8006994:	f000 80a6 	beq.w	8006ae4 <_dtoa_r+0x88c>
 8006998:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800699c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800699e:	9f06      	ldr	r7, [sp, #24]
 80069a0:	9a06      	ldr	r2, [sp, #24]
 80069a2:	2101      	movs	r1, #1
 80069a4:	441a      	add	r2, r3
 80069a6:	9206      	str	r2, [sp, #24]
 80069a8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80069aa:	4628      	mov	r0, r5
 80069ac:	441a      	add	r2, r3
 80069ae:	9209      	str	r2, [sp, #36]	; 0x24
 80069b0:	f000 fb50 	bl	8007054 <__i2b>
 80069b4:	4606      	mov	r6, r0
 80069b6:	2f00      	cmp	r7, #0
 80069b8:	dd0c      	ble.n	80069d4 <_dtoa_r+0x77c>
 80069ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80069bc:	2b00      	cmp	r3, #0
 80069be:	dd09      	ble.n	80069d4 <_dtoa_r+0x77c>
 80069c0:	42bb      	cmp	r3, r7
 80069c2:	bfa8      	it	ge
 80069c4:	463b      	movge	r3, r7
 80069c6:	9a06      	ldr	r2, [sp, #24]
 80069c8:	1aff      	subs	r7, r7, r3
 80069ca:	1ad2      	subs	r2, r2, r3
 80069cc:	9206      	str	r2, [sp, #24]
 80069ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80069d0:	1ad3      	subs	r3, r2, r3
 80069d2:	9309      	str	r3, [sp, #36]	; 0x24
 80069d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80069d6:	b1f3      	cbz	r3, 8006a16 <_dtoa_r+0x7be>
 80069d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80069da:	2b00      	cmp	r3, #0
 80069dc:	f000 80a8 	beq.w	8006b30 <_dtoa_r+0x8d8>
 80069e0:	2c00      	cmp	r4, #0
 80069e2:	dd10      	ble.n	8006a06 <_dtoa_r+0x7ae>
 80069e4:	4631      	mov	r1, r6
 80069e6:	4622      	mov	r2, r4
 80069e8:	4628      	mov	r0, r5
 80069ea:	f000 fbf1 	bl	80071d0 <__pow5mult>
 80069ee:	465a      	mov	r2, fp
 80069f0:	4601      	mov	r1, r0
 80069f2:	4606      	mov	r6, r0
 80069f4:	4628      	mov	r0, r5
 80069f6:	f000 fb43 	bl	8007080 <__multiply>
 80069fa:	4680      	mov	r8, r0
 80069fc:	4659      	mov	r1, fp
 80069fe:	4628      	mov	r0, r5
 8006a00:	f000 fa72 	bl	8006ee8 <_Bfree>
 8006a04:	46c3      	mov	fp, r8
 8006a06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006a08:	1b1a      	subs	r2, r3, r4
 8006a0a:	d004      	beq.n	8006a16 <_dtoa_r+0x7be>
 8006a0c:	4659      	mov	r1, fp
 8006a0e:	4628      	mov	r0, r5
 8006a10:	f000 fbde 	bl	80071d0 <__pow5mult>
 8006a14:	4683      	mov	fp, r0
 8006a16:	2101      	movs	r1, #1
 8006a18:	4628      	mov	r0, r5
 8006a1a:	f000 fb1b 	bl	8007054 <__i2b>
 8006a1e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006a20:	4604      	mov	r4, r0
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	f340 8086 	ble.w	8006b34 <_dtoa_r+0x8dc>
 8006a28:	461a      	mov	r2, r3
 8006a2a:	4601      	mov	r1, r0
 8006a2c:	4628      	mov	r0, r5
 8006a2e:	f000 fbcf 	bl	80071d0 <__pow5mult>
 8006a32:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006a34:	4604      	mov	r4, r0
 8006a36:	2b01      	cmp	r3, #1
 8006a38:	dd7f      	ble.n	8006b3a <_dtoa_r+0x8e2>
 8006a3a:	f04f 0800 	mov.w	r8, #0
 8006a3e:	6923      	ldr	r3, [r4, #16]
 8006a40:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006a44:	6918      	ldr	r0, [r3, #16]
 8006a46:	f000 fab7 	bl	8006fb8 <__hi0bits>
 8006a4a:	f1c0 0020 	rsb	r0, r0, #32
 8006a4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a50:	4418      	add	r0, r3
 8006a52:	f010 001f 	ands.w	r0, r0, #31
 8006a56:	f000 8092 	beq.w	8006b7e <_dtoa_r+0x926>
 8006a5a:	f1c0 0320 	rsb	r3, r0, #32
 8006a5e:	2b04      	cmp	r3, #4
 8006a60:	f340 808a 	ble.w	8006b78 <_dtoa_r+0x920>
 8006a64:	f1c0 001c 	rsb	r0, r0, #28
 8006a68:	9b06      	ldr	r3, [sp, #24]
 8006a6a:	4407      	add	r7, r0
 8006a6c:	4403      	add	r3, r0
 8006a6e:	9306      	str	r3, [sp, #24]
 8006a70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a72:	4403      	add	r3, r0
 8006a74:	9309      	str	r3, [sp, #36]	; 0x24
 8006a76:	9b06      	ldr	r3, [sp, #24]
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	dd05      	ble.n	8006a88 <_dtoa_r+0x830>
 8006a7c:	4659      	mov	r1, fp
 8006a7e:	461a      	mov	r2, r3
 8006a80:	4628      	mov	r0, r5
 8006a82:	f000 fbff 	bl	8007284 <__lshift>
 8006a86:	4683      	mov	fp, r0
 8006a88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	dd05      	ble.n	8006a9a <_dtoa_r+0x842>
 8006a8e:	4621      	mov	r1, r4
 8006a90:	461a      	mov	r2, r3
 8006a92:	4628      	mov	r0, r5
 8006a94:	f000 fbf6 	bl	8007284 <__lshift>
 8006a98:	4604      	mov	r4, r0
 8006a9a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d070      	beq.n	8006b82 <_dtoa_r+0x92a>
 8006aa0:	4621      	mov	r1, r4
 8006aa2:	4658      	mov	r0, fp
 8006aa4:	f000 fc5e 	bl	8007364 <__mcmp>
 8006aa8:	2800      	cmp	r0, #0
 8006aaa:	da6a      	bge.n	8006b82 <_dtoa_r+0x92a>
 8006aac:	2300      	movs	r3, #0
 8006aae:	4659      	mov	r1, fp
 8006ab0:	220a      	movs	r2, #10
 8006ab2:	4628      	mov	r0, r5
 8006ab4:	f000 fa3a 	bl	8006f2c <__multadd>
 8006ab8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006aba:	4683      	mov	fp, r0
 8006abc:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	f000 8194 	beq.w	8006dee <_dtoa_r+0xb96>
 8006ac6:	4631      	mov	r1, r6
 8006ac8:	2300      	movs	r3, #0
 8006aca:	220a      	movs	r2, #10
 8006acc:	4628      	mov	r0, r5
 8006ace:	f000 fa2d 	bl	8006f2c <__multadd>
 8006ad2:	f1b9 0f00 	cmp.w	r9, #0
 8006ad6:	4606      	mov	r6, r0
 8006ad8:	f300 8093 	bgt.w	8006c02 <_dtoa_r+0x9aa>
 8006adc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006ade:	2b02      	cmp	r3, #2
 8006ae0:	dc57      	bgt.n	8006b92 <_dtoa_r+0x93a>
 8006ae2:	e08e      	b.n	8006c02 <_dtoa_r+0x9aa>
 8006ae4:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8006ae6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006aea:	e757      	b.n	800699c <_dtoa_r+0x744>
 8006aec:	9b08      	ldr	r3, [sp, #32]
 8006aee:	1e5c      	subs	r4, r3, #1
 8006af0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006af2:	42a3      	cmp	r3, r4
 8006af4:	bfb7      	itett	lt
 8006af6:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8006af8:	1b1c      	subge	r4, r3, r4
 8006afa:	1ae2      	sublt	r2, r4, r3
 8006afc:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8006afe:	bfbe      	ittt	lt
 8006b00:	940a      	strlt	r4, [sp, #40]	; 0x28
 8006b02:	189b      	addlt	r3, r3, r2
 8006b04:	930e      	strlt	r3, [sp, #56]	; 0x38
 8006b06:	9b08      	ldr	r3, [sp, #32]
 8006b08:	bfb8      	it	lt
 8006b0a:	2400      	movlt	r4, #0
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	bfbb      	ittet	lt
 8006b10:	9b06      	ldrlt	r3, [sp, #24]
 8006b12:	9a08      	ldrlt	r2, [sp, #32]
 8006b14:	9f06      	ldrge	r7, [sp, #24]
 8006b16:	1a9f      	sublt	r7, r3, r2
 8006b18:	bfac      	ite	ge
 8006b1a:	9b08      	ldrge	r3, [sp, #32]
 8006b1c:	2300      	movlt	r3, #0
 8006b1e:	e73f      	b.n	80069a0 <_dtoa_r+0x748>
 8006b20:	3fe00000 	.word	0x3fe00000
 8006b24:	40240000 	.word	0x40240000
 8006b28:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006b2a:	9f06      	ldr	r7, [sp, #24]
 8006b2c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8006b2e:	e742      	b.n	80069b6 <_dtoa_r+0x75e>
 8006b30:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006b32:	e76b      	b.n	8006a0c <_dtoa_r+0x7b4>
 8006b34:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006b36:	2b01      	cmp	r3, #1
 8006b38:	dc19      	bgt.n	8006b6e <_dtoa_r+0x916>
 8006b3a:	9b04      	ldr	r3, [sp, #16]
 8006b3c:	b9bb      	cbnz	r3, 8006b6e <_dtoa_r+0x916>
 8006b3e:	9b05      	ldr	r3, [sp, #20]
 8006b40:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006b44:	b99b      	cbnz	r3, 8006b6e <_dtoa_r+0x916>
 8006b46:	9b05      	ldr	r3, [sp, #20]
 8006b48:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006b4c:	0d1b      	lsrs	r3, r3, #20
 8006b4e:	051b      	lsls	r3, r3, #20
 8006b50:	b183      	cbz	r3, 8006b74 <_dtoa_r+0x91c>
 8006b52:	f04f 0801 	mov.w	r8, #1
 8006b56:	9b06      	ldr	r3, [sp, #24]
 8006b58:	3301      	adds	r3, #1
 8006b5a:	9306      	str	r3, [sp, #24]
 8006b5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b5e:	3301      	adds	r3, #1
 8006b60:	9309      	str	r3, [sp, #36]	; 0x24
 8006b62:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	f47f af6a 	bne.w	8006a3e <_dtoa_r+0x7e6>
 8006b6a:	2001      	movs	r0, #1
 8006b6c:	e76f      	b.n	8006a4e <_dtoa_r+0x7f6>
 8006b6e:	f04f 0800 	mov.w	r8, #0
 8006b72:	e7f6      	b.n	8006b62 <_dtoa_r+0x90a>
 8006b74:	4698      	mov	r8, r3
 8006b76:	e7f4      	b.n	8006b62 <_dtoa_r+0x90a>
 8006b78:	f43f af7d 	beq.w	8006a76 <_dtoa_r+0x81e>
 8006b7c:	4618      	mov	r0, r3
 8006b7e:	301c      	adds	r0, #28
 8006b80:	e772      	b.n	8006a68 <_dtoa_r+0x810>
 8006b82:	9b08      	ldr	r3, [sp, #32]
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	dc36      	bgt.n	8006bf6 <_dtoa_r+0x99e>
 8006b88:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006b8a:	2b02      	cmp	r3, #2
 8006b8c:	dd33      	ble.n	8006bf6 <_dtoa_r+0x99e>
 8006b8e:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006b92:	f1b9 0f00 	cmp.w	r9, #0
 8006b96:	d10d      	bne.n	8006bb4 <_dtoa_r+0x95c>
 8006b98:	4621      	mov	r1, r4
 8006b9a:	464b      	mov	r3, r9
 8006b9c:	2205      	movs	r2, #5
 8006b9e:	4628      	mov	r0, r5
 8006ba0:	f000 f9c4 	bl	8006f2c <__multadd>
 8006ba4:	4601      	mov	r1, r0
 8006ba6:	4604      	mov	r4, r0
 8006ba8:	4658      	mov	r0, fp
 8006baa:	f000 fbdb 	bl	8007364 <__mcmp>
 8006bae:	2800      	cmp	r0, #0
 8006bb0:	f73f adb8 	bgt.w	8006724 <_dtoa_r+0x4cc>
 8006bb4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006bb6:	9f03      	ldr	r7, [sp, #12]
 8006bb8:	ea6f 0a03 	mvn.w	sl, r3
 8006bbc:	f04f 0800 	mov.w	r8, #0
 8006bc0:	4621      	mov	r1, r4
 8006bc2:	4628      	mov	r0, r5
 8006bc4:	f000 f990 	bl	8006ee8 <_Bfree>
 8006bc8:	2e00      	cmp	r6, #0
 8006bca:	f43f aea7 	beq.w	800691c <_dtoa_r+0x6c4>
 8006bce:	f1b8 0f00 	cmp.w	r8, #0
 8006bd2:	d005      	beq.n	8006be0 <_dtoa_r+0x988>
 8006bd4:	45b0      	cmp	r8, r6
 8006bd6:	d003      	beq.n	8006be0 <_dtoa_r+0x988>
 8006bd8:	4641      	mov	r1, r8
 8006bda:	4628      	mov	r0, r5
 8006bdc:	f000 f984 	bl	8006ee8 <_Bfree>
 8006be0:	4631      	mov	r1, r6
 8006be2:	4628      	mov	r0, r5
 8006be4:	f000 f980 	bl	8006ee8 <_Bfree>
 8006be8:	e698      	b.n	800691c <_dtoa_r+0x6c4>
 8006bea:	2400      	movs	r4, #0
 8006bec:	4626      	mov	r6, r4
 8006bee:	e7e1      	b.n	8006bb4 <_dtoa_r+0x95c>
 8006bf0:	46c2      	mov	sl, r8
 8006bf2:	4626      	mov	r6, r4
 8006bf4:	e596      	b.n	8006724 <_dtoa_r+0x4cc>
 8006bf6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006bf8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	f000 80fd 	beq.w	8006dfc <_dtoa_r+0xba4>
 8006c02:	2f00      	cmp	r7, #0
 8006c04:	dd05      	ble.n	8006c12 <_dtoa_r+0x9ba>
 8006c06:	4631      	mov	r1, r6
 8006c08:	463a      	mov	r2, r7
 8006c0a:	4628      	mov	r0, r5
 8006c0c:	f000 fb3a 	bl	8007284 <__lshift>
 8006c10:	4606      	mov	r6, r0
 8006c12:	f1b8 0f00 	cmp.w	r8, #0
 8006c16:	d05c      	beq.n	8006cd2 <_dtoa_r+0xa7a>
 8006c18:	4628      	mov	r0, r5
 8006c1a:	6871      	ldr	r1, [r6, #4]
 8006c1c:	f000 f924 	bl	8006e68 <_Balloc>
 8006c20:	4607      	mov	r7, r0
 8006c22:	b928      	cbnz	r0, 8006c30 <_dtoa_r+0x9d8>
 8006c24:	4602      	mov	r2, r0
 8006c26:	f240 21ea 	movw	r1, #746	; 0x2ea
 8006c2a:	4b7f      	ldr	r3, [pc, #508]	; (8006e28 <_dtoa_r+0xbd0>)
 8006c2c:	f7ff bb28 	b.w	8006280 <_dtoa_r+0x28>
 8006c30:	6932      	ldr	r2, [r6, #16]
 8006c32:	f106 010c 	add.w	r1, r6, #12
 8006c36:	3202      	adds	r2, #2
 8006c38:	0092      	lsls	r2, r2, #2
 8006c3a:	300c      	adds	r0, #12
 8006c3c:	f7fe fdea 	bl	8005814 <memcpy>
 8006c40:	2201      	movs	r2, #1
 8006c42:	4639      	mov	r1, r7
 8006c44:	4628      	mov	r0, r5
 8006c46:	f000 fb1d 	bl	8007284 <__lshift>
 8006c4a:	46b0      	mov	r8, r6
 8006c4c:	4606      	mov	r6, r0
 8006c4e:	9b03      	ldr	r3, [sp, #12]
 8006c50:	3301      	adds	r3, #1
 8006c52:	9308      	str	r3, [sp, #32]
 8006c54:	9b03      	ldr	r3, [sp, #12]
 8006c56:	444b      	add	r3, r9
 8006c58:	930a      	str	r3, [sp, #40]	; 0x28
 8006c5a:	9b04      	ldr	r3, [sp, #16]
 8006c5c:	f003 0301 	and.w	r3, r3, #1
 8006c60:	9309      	str	r3, [sp, #36]	; 0x24
 8006c62:	9b08      	ldr	r3, [sp, #32]
 8006c64:	4621      	mov	r1, r4
 8006c66:	3b01      	subs	r3, #1
 8006c68:	4658      	mov	r0, fp
 8006c6a:	9304      	str	r3, [sp, #16]
 8006c6c:	f7ff fa68 	bl	8006140 <quorem>
 8006c70:	4603      	mov	r3, r0
 8006c72:	4641      	mov	r1, r8
 8006c74:	3330      	adds	r3, #48	; 0x30
 8006c76:	9006      	str	r0, [sp, #24]
 8006c78:	4658      	mov	r0, fp
 8006c7a:	930b      	str	r3, [sp, #44]	; 0x2c
 8006c7c:	f000 fb72 	bl	8007364 <__mcmp>
 8006c80:	4632      	mov	r2, r6
 8006c82:	4681      	mov	r9, r0
 8006c84:	4621      	mov	r1, r4
 8006c86:	4628      	mov	r0, r5
 8006c88:	f000 fb88 	bl	800739c <__mdiff>
 8006c8c:	68c2      	ldr	r2, [r0, #12]
 8006c8e:	4607      	mov	r7, r0
 8006c90:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006c92:	bb02      	cbnz	r2, 8006cd6 <_dtoa_r+0xa7e>
 8006c94:	4601      	mov	r1, r0
 8006c96:	4658      	mov	r0, fp
 8006c98:	f000 fb64 	bl	8007364 <__mcmp>
 8006c9c:	4602      	mov	r2, r0
 8006c9e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006ca0:	4639      	mov	r1, r7
 8006ca2:	4628      	mov	r0, r5
 8006ca4:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8006ca8:	f000 f91e 	bl	8006ee8 <_Bfree>
 8006cac:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006cae:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006cb0:	9f08      	ldr	r7, [sp, #32]
 8006cb2:	ea43 0102 	orr.w	r1, r3, r2
 8006cb6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006cb8:	430b      	orrs	r3, r1
 8006cba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006cbc:	d10d      	bne.n	8006cda <_dtoa_r+0xa82>
 8006cbe:	2b39      	cmp	r3, #57	; 0x39
 8006cc0:	d029      	beq.n	8006d16 <_dtoa_r+0xabe>
 8006cc2:	f1b9 0f00 	cmp.w	r9, #0
 8006cc6:	dd01      	ble.n	8006ccc <_dtoa_r+0xa74>
 8006cc8:	9b06      	ldr	r3, [sp, #24]
 8006cca:	3331      	adds	r3, #49	; 0x31
 8006ccc:	9a04      	ldr	r2, [sp, #16]
 8006cce:	7013      	strb	r3, [r2, #0]
 8006cd0:	e776      	b.n	8006bc0 <_dtoa_r+0x968>
 8006cd2:	4630      	mov	r0, r6
 8006cd4:	e7b9      	b.n	8006c4a <_dtoa_r+0x9f2>
 8006cd6:	2201      	movs	r2, #1
 8006cd8:	e7e2      	b.n	8006ca0 <_dtoa_r+0xa48>
 8006cda:	f1b9 0f00 	cmp.w	r9, #0
 8006cde:	db06      	blt.n	8006cee <_dtoa_r+0xa96>
 8006ce0:	9922      	ldr	r1, [sp, #136]	; 0x88
 8006ce2:	ea41 0909 	orr.w	r9, r1, r9
 8006ce6:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006ce8:	ea59 0101 	orrs.w	r1, r9, r1
 8006cec:	d120      	bne.n	8006d30 <_dtoa_r+0xad8>
 8006cee:	2a00      	cmp	r2, #0
 8006cf0:	ddec      	ble.n	8006ccc <_dtoa_r+0xa74>
 8006cf2:	4659      	mov	r1, fp
 8006cf4:	2201      	movs	r2, #1
 8006cf6:	4628      	mov	r0, r5
 8006cf8:	9308      	str	r3, [sp, #32]
 8006cfa:	f000 fac3 	bl	8007284 <__lshift>
 8006cfe:	4621      	mov	r1, r4
 8006d00:	4683      	mov	fp, r0
 8006d02:	f000 fb2f 	bl	8007364 <__mcmp>
 8006d06:	2800      	cmp	r0, #0
 8006d08:	9b08      	ldr	r3, [sp, #32]
 8006d0a:	dc02      	bgt.n	8006d12 <_dtoa_r+0xaba>
 8006d0c:	d1de      	bne.n	8006ccc <_dtoa_r+0xa74>
 8006d0e:	07da      	lsls	r2, r3, #31
 8006d10:	d5dc      	bpl.n	8006ccc <_dtoa_r+0xa74>
 8006d12:	2b39      	cmp	r3, #57	; 0x39
 8006d14:	d1d8      	bne.n	8006cc8 <_dtoa_r+0xa70>
 8006d16:	2339      	movs	r3, #57	; 0x39
 8006d18:	9a04      	ldr	r2, [sp, #16]
 8006d1a:	7013      	strb	r3, [r2, #0]
 8006d1c:	463b      	mov	r3, r7
 8006d1e:	461f      	mov	r7, r3
 8006d20:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8006d24:	3b01      	subs	r3, #1
 8006d26:	2a39      	cmp	r2, #57	; 0x39
 8006d28:	d050      	beq.n	8006dcc <_dtoa_r+0xb74>
 8006d2a:	3201      	adds	r2, #1
 8006d2c:	701a      	strb	r2, [r3, #0]
 8006d2e:	e747      	b.n	8006bc0 <_dtoa_r+0x968>
 8006d30:	2a00      	cmp	r2, #0
 8006d32:	dd03      	ble.n	8006d3c <_dtoa_r+0xae4>
 8006d34:	2b39      	cmp	r3, #57	; 0x39
 8006d36:	d0ee      	beq.n	8006d16 <_dtoa_r+0xabe>
 8006d38:	3301      	adds	r3, #1
 8006d3a:	e7c7      	b.n	8006ccc <_dtoa_r+0xa74>
 8006d3c:	9a08      	ldr	r2, [sp, #32]
 8006d3e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006d40:	f802 3c01 	strb.w	r3, [r2, #-1]
 8006d44:	428a      	cmp	r2, r1
 8006d46:	d02a      	beq.n	8006d9e <_dtoa_r+0xb46>
 8006d48:	4659      	mov	r1, fp
 8006d4a:	2300      	movs	r3, #0
 8006d4c:	220a      	movs	r2, #10
 8006d4e:	4628      	mov	r0, r5
 8006d50:	f000 f8ec 	bl	8006f2c <__multadd>
 8006d54:	45b0      	cmp	r8, r6
 8006d56:	4683      	mov	fp, r0
 8006d58:	f04f 0300 	mov.w	r3, #0
 8006d5c:	f04f 020a 	mov.w	r2, #10
 8006d60:	4641      	mov	r1, r8
 8006d62:	4628      	mov	r0, r5
 8006d64:	d107      	bne.n	8006d76 <_dtoa_r+0xb1e>
 8006d66:	f000 f8e1 	bl	8006f2c <__multadd>
 8006d6a:	4680      	mov	r8, r0
 8006d6c:	4606      	mov	r6, r0
 8006d6e:	9b08      	ldr	r3, [sp, #32]
 8006d70:	3301      	adds	r3, #1
 8006d72:	9308      	str	r3, [sp, #32]
 8006d74:	e775      	b.n	8006c62 <_dtoa_r+0xa0a>
 8006d76:	f000 f8d9 	bl	8006f2c <__multadd>
 8006d7a:	4631      	mov	r1, r6
 8006d7c:	4680      	mov	r8, r0
 8006d7e:	2300      	movs	r3, #0
 8006d80:	220a      	movs	r2, #10
 8006d82:	4628      	mov	r0, r5
 8006d84:	f000 f8d2 	bl	8006f2c <__multadd>
 8006d88:	4606      	mov	r6, r0
 8006d8a:	e7f0      	b.n	8006d6e <_dtoa_r+0xb16>
 8006d8c:	f1b9 0f00 	cmp.w	r9, #0
 8006d90:	bfcc      	ite	gt
 8006d92:	464f      	movgt	r7, r9
 8006d94:	2701      	movle	r7, #1
 8006d96:	f04f 0800 	mov.w	r8, #0
 8006d9a:	9a03      	ldr	r2, [sp, #12]
 8006d9c:	4417      	add	r7, r2
 8006d9e:	4659      	mov	r1, fp
 8006da0:	2201      	movs	r2, #1
 8006da2:	4628      	mov	r0, r5
 8006da4:	9308      	str	r3, [sp, #32]
 8006da6:	f000 fa6d 	bl	8007284 <__lshift>
 8006daa:	4621      	mov	r1, r4
 8006dac:	4683      	mov	fp, r0
 8006dae:	f000 fad9 	bl	8007364 <__mcmp>
 8006db2:	2800      	cmp	r0, #0
 8006db4:	dcb2      	bgt.n	8006d1c <_dtoa_r+0xac4>
 8006db6:	d102      	bne.n	8006dbe <_dtoa_r+0xb66>
 8006db8:	9b08      	ldr	r3, [sp, #32]
 8006dba:	07db      	lsls	r3, r3, #31
 8006dbc:	d4ae      	bmi.n	8006d1c <_dtoa_r+0xac4>
 8006dbe:	463b      	mov	r3, r7
 8006dc0:	461f      	mov	r7, r3
 8006dc2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006dc6:	2a30      	cmp	r2, #48	; 0x30
 8006dc8:	d0fa      	beq.n	8006dc0 <_dtoa_r+0xb68>
 8006dca:	e6f9      	b.n	8006bc0 <_dtoa_r+0x968>
 8006dcc:	9a03      	ldr	r2, [sp, #12]
 8006dce:	429a      	cmp	r2, r3
 8006dd0:	d1a5      	bne.n	8006d1e <_dtoa_r+0xac6>
 8006dd2:	2331      	movs	r3, #49	; 0x31
 8006dd4:	f10a 0a01 	add.w	sl, sl, #1
 8006dd8:	e779      	b.n	8006cce <_dtoa_r+0xa76>
 8006dda:	4b14      	ldr	r3, [pc, #80]	; (8006e2c <_dtoa_r+0xbd4>)
 8006ddc:	f7ff baa8 	b.w	8006330 <_dtoa_r+0xd8>
 8006de0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	f47f aa81 	bne.w	80062ea <_dtoa_r+0x92>
 8006de8:	4b11      	ldr	r3, [pc, #68]	; (8006e30 <_dtoa_r+0xbd8>)
 8006dea:	f7ff baa1 	b.w	8006330 <_dtoa_r+0xd8>
 8006dee:	f1b9 0f00 	cmp.w	r9, #0
 8006df2:	dc03      	bgt.n	8006dfc <_dtoa_r+0xba4>
 8006df4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006df6:	2b02      	cmp	r3, #2
 8006df8:	f73f aecb 	bgt.w	8006b92 <_dtoa_r+0x93a>
 8006dfc:	9f03      	ldr	r7, [sp, #12]
 8006dfe:	4621      	mov	r1, r4
 8006e00:	4658      	mov	r0, fp
 8006e02:	f7ff f99d 	bl	8006140 <quorem>
 8006e06:	9a03      	ldr	r2, [sp, #12]
 8006e08:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8006e0c:	f807 3b01 	strb.w	r3, [r7], #1
 8006e10:	1aba      	subs	r2, r7, r2
 8006e12:	4591      	cmp	r9, r2
 8006e14:	ddba      	ble.n	8006d8c <_dtoa_r+0xb34>
 8006e16:	4659      	mov	r1, fp
 8006e18:	2300      	movs	r3, #0
 8006e1a:	220a      	movs	r2, #10
 8006e1c:	4628      	mov	r0, r5
 8006e1e:	f000 f885 	bl	8006f2c <__multadd>
 8006e22:	4683      	mov	fp, r0
 8006e24:	e7eb      	b.n	8006dfe <_dtoa_r+0xba6>
 8006e26:	bf00      	nop
 8006e28:	08008bf7 	.word	0x08008bf7
 8006e2c:	08008b54 	.word	0x08008b54
 8006e30:	08008b78 	.word	0x08008b78

08006e34 <_localeconv_r>:
 8006e34:	4800      	ldr	r0, [pc, #0]	; (8006e38 <_localeconv_r+0x4>)
 8006e36:	4770      	bx	lr
 8006e38:	20000168 	.word	0x20000168

08006e3c <malloc>:
 8006e3c:	4b02      	ldr	r3, [pc, #8]	; (8006e48 <malloc+0xc>)
 8006e3e:	4601      	mov	r1, r0
 8006e40:	6818      	ldr	r0, [r3, #0]
 8006e42:	f000 bc0f 	b.w	8007664 <_malloc_r>
 8006e46:	bf00      	nop
 8006e48:	20000014 	.word	0x20000014

08006e4c <memchr>:
 8006e4c:	4603      	mov	r3, r0
 8006e4e:	b510      	push	{r4, lr}
 8006e50:	b2c9      	uxtb	r1, r1
 8006e52:	4402      	add	r2, r0
 8006e54:	4293      	cmp	r3, r2
 8006e56:	4618      	mov	r0, r3
 8006e58:	d101      	bne.n	8006e5e <memchr+0x12>
 8006e5a:	2000      	movs	r0, #0
 8006e5c:	e003      	b.n	8006e66 <memchr+0x1a>
 8006e5e:	7804      	ldrb	r4, [r0, #0]
 8006e60:	3301      	adds	r3, #1
 8006e62:	428c      	cmp	r4, r1
 8006e64:	d1f6      	bne.n	8006e54 <memchr+0x8>
 8006e66:	bd10      	pop	{r4, pc}

08006e68 <_Balloc>:
 8006e68:	b570      	push	{r4, r5, r6, lr}
 8006e6a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006e6c:	4604      	mov	r4, r0
 8006e6e:	460d      	mov	r5, r1
 8006e70:	b976      	cbnz	r6, 8006e90 <_Balloc+0x28>
 8006e72:	2010      	movs	r0, #16
 8006e74:	f7ff ffe2 	bl	8006e3c <malloc>
 8006e78:	4602      	mov	r2, r0
 8006e7a:	6260      	str	r0, [r4, #36]	; 0x24
 8006e7c:	b920      	cbnz	r0, 8006e88 <_Balloc+0x20>
 8006e7e:	2166      	movs	r1, #102	; 0x66
 8006e80:	4b17      	ldr	r3, [pc, #92]	; (8006ee0 <_Balloc+0x78>)
 8006e82:	4818      	ldr	r0, [pc, #96]	; (8006ee4 <_Balloc+0x7c>)
 8006e84:	f000 fdce 	bl	8007a24 <__assert_func>
 8006e88:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006e8c:	6006      	str	r6, [r0, #0]
 8006e8e:	60c6      	str	r6, [r0, #12]
 8006e90:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006e92:	68f3      	ldr	r3, [r6, #12]
 8006e94:	b183      	cbz	r3, 8006eb8 <_Balloc+0x50>
 8006e96:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006e98:	68db      	ldr	r3, [r3, #12]
 8006e9a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006e9e:	b9b8      	cbnz	r0, 8006ed0 <_Balloc+0x68>
 8006ea0:	2101      	movs	r1, #1
 8006ea2:	fa01 f605 	lsl.w	r6, r1, r5
 8006ea6:	1d72      	adds	r2, r6, #5
 8006ea8:	4620      	mov	r0, r4
 8006eaa:	0092      	lsls	r2, r2, #2
 8006eac:	f000 fb5e 	bl	800756c <_calloc_r>
 8006eb0:	b160      	cbz	r0, 8006ecc <_Balloc+0x64>
 8006eb2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006eb6:	e00e      	b.n	8006ed6 <_Balloc+0x6e>
 8006eb8:	2221      	movs	r2, #33	; 0x21
 8006eba:	2104      	movs	r1, #4
 8006ebc:	4620      	mov	r0, r4
 8006ebe:	f000 fb55 	bl	800756c <_calloc_r>
 8006ec2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006ec4:	60f0      	str	r0, [r6, #12]
 8006ec6:	68db      	ldr	r3, [r3, #12]
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d1e4      	bne.n	8006e96 <_Balloc+0x2e>
 8006ecc:	2000      	movs	r0, #0
 8006ece:	bd70      	pop	{r4, r5, r6, pc}
 8006ed0:	6802      	ldr	r2, [r0, #0]
 8006ed2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006ed6:	2300      	movs	r3, #0
 8006ed8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006edc:	e7f7      	b.n	8006ece <_Balloc+0x66>
 8006ede:	bf00      	nop
 8006ee0:	08008b85 	.word	0x08008b85
 8006ee4:	08008c08 	.word	0x08008c08

08006ee8 <_Bfree>:
 8006ee8:	b570      	push	{r4, r5, r6, lr}
 8006eea:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006eec:	4605      	mov	r5, r0
 8006eee:	460c      	mov	r4, r1
 8006ef0:	b976      	cbnz	r6, 8006f10 <_Bfree+0x28>
 8006ef2:	2010      	movs	r0, #16
 8006ef4:	f7ff ffa2 	bl	8006e3c <malloc>
 8006ef8:	4602      	mov	r2, r0
 8006efa:	6268      	str	r0, [r5, #36]	; 0x24
 8006efc:	b920      	cbnz	r0, 8006f08 <_Bfree+0x20>
 8006efe:	218a      	movs	r1, #138	; 0x8a
 8006f00:	4b08      	ldr	r3, [pc, #32]	; (8006f24 <_Bfree+0x3c>)
 8006f02:	4809      	ldr	r0, [pc, #36]	; (8006f28 <_Bfree+0x40>)
 8006f04:	f000 fd8e 	bl	8007a24 <__assert_func>
 8006f08:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006f0c:	6006      	str	r6, [r0, #0]
 8006f0e:	60c6      	str	r6, [r0, #12]
 8006f10:	b13c      	cbz	r4, 8006f22 <_Bfree+0x3a>
 8006f12:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006f14:	6862      	ldr	r2, [r4, #4]
 8006f16:	68db      	ldr	r3, [r3, #12]
 8006f18:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006f1c:	6021      	str	r1, [r4, #0]
 8006f1e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006f22:	bd70      	pop	{r4, r5, r6, pc}
 8006f24:	08008b85 	.word	0x08008b85
 8006f28:	08008c08 	.word	0x08008c08

08006f2c <__multadd>:
 8006f2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f30:	4607      	mov	r7, r0
 8006f32:	460c      	mov	r4, r1
 8006f34:	461e      	mov	r6, r3
 8006f36:	2000      	movs	r0, #0
 8006f38:	690d      	ldr	r5, [r1, #16]
 8006f3a:	f101 0c14 	add.w	ip, r1, #20
 8006f3e:	f8dc 3000 	ldr.w	r3, [ip]
 8006f42:	3001      	adds	r0, #1
 8006f44:	b299      	uxth	r1, r3
 8006f46:	fb02 6101 	mla	r1, r2, r1, r6
 8006f4a:	0c1e      	lsrs	r6, r3, #16
 8006f4c:	0c0b      	lsrs	r3, r1, #16
 8006f4e:	fb02 3306 	mla	r3, r2, r6, r3
 8006f52:	b289      	uxth	r1, r1
 8006f54:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006f58:	4285      	cmp	r5, r0
 8006f5a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006f5e:	f84c 1b04 	str.w	r1, [ip], #4
 8006f62:	dcec      	bgt.n	8006f3e <__multadd+0x12>
 8006f64:	b30e      	cbz	r6, 8006faa <__multadd+0x7e>
 8006f66:	68a3      	ldr	r3, [r4, #8]
 8006f68:	42ab      	cmp	r3, r5
 8006f6a:	dc19      	bgt.n	8006fa0 <__multadd+0x74>
 8006f6c:	6861      	ldr	r1, [r4, #4]
 8006f6e:	4638      	mov	r0, r7
 8006f70:	3101      	adds	r1, #1
 8006f72:	f7ff ff79 	bl	8006e68 <_Balloc>
 8006f76:	4680      	mov	r8, r0
 8006f78:	b928      	cbnz	r0, 8006f86 <__multadd+0x5a>
 8006f7a:	4602      	mov	r2, r0
 8006f7c:	21b5      	movs	r1, #181	; 0xb5
 8006f7e:	4b0c      	ldr	r3, [pc, #48]	; (8006fb0 <__multadd+0x84>)
 8006f80:	480c      	ldr	r0, [pc, #48]	; (8006fb4 <__multadd+0x88>)
 8006f82:	f000 fd4f 	bl	8007a24 <__assert_func>
 8006f86:	6922      	ldr	r2, [r4, #16]
 8006f88:	f104 010c 	add.w	r1, r4, #12
 8006f8c:	3202      	adds	r2, #2
 8006f8e:	0092      	lsls	r2, r2, #2
 8006f90:	300c      	adds	r0, #12
 8006f92:	f7fe fc3f 	bl	8005814 <memcpy>
 8006f96:	4621      	mov	r1, r4
 8006f98:	4638      	mov	r0, r7
 8006f9a:	f7ff ffa5 	bl	8006ee8 <_Bfree>
 8006f9e:	4644      	mov	r4, r8
 8006fa0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006fa4:	3501      	adds	r5, #1
 8006fa6:	615e      	str	r6, [r3, #20]
 8006fa8:	6125      	str	r5, [r4, #16]
 8006faa:	4620      	mov	r0, r4
 8006fac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006fb0:	08008bf7 	.word	0x08008bf7
 8006fb4:	08008c08 	.word	0x08008c08

08006fb8 <__hi0bits>:
 8006fb8:	0c02      	lsrs	r2, r0, #16
 8006fba:	0412      	lsls	r2, r2, #16
 8006fbc:	4603      	mov	r3, r0
 8006fbe:	b9ca      	cbnz	r2, 8006ff4 <__hi0bits+0x3c>
 8006fc0:	0403      	lsls	r3, r0, #16
 8006fc2:	2010      	movs	r0, #16
 8006fc4:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8006fc8:	bf04      	itt	eq
 8006fca:	021b      	lsleq	r3, r3, #8
 8006fcc:	3008      	addeq	r0, #8
 8006fce:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8006fd2:	bf04      	itt	eq
 8006fd4:	011b      	lsleq	r3, r3, #4
 8006fd6:	3004      	addeq	r0, #4
 8006fd8:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8006fdc:	bf04      	itt	eq
 8006fde:	009b      	lsleq	r3, r3, #2
 8006fe0:	3002      	addeq	r0, #2
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	db05      	blt.n	8006ff2 <__hi0bits+0x3a>
 8006fe6:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8006fea:	f100 0001 	add.w	r0, r0, #1
 8006fee:	bf08      	it	eq
 8006ff0:	2020      	moveq	r0, #32
 8006ff2:	4770      	bx	lr
 8006ff4:	2000      	movs	r0, #0
 8006ff6:	e7e5      	b.n	8006fc4 <__hi0bits+0xc>

08006ff8 <__lo0bits>:
 8006ff8:	6803      	ldr	r3, [r0, #0]
 8006ffa:	4602      	mov	r2, r0
 8006ffc:	f013 0007 	ands.w	r0, r3, #7
 8007000:	d00b      	beq.n	800701a <__lo0bits+0x22>
 8007002:	07d9      	lsls	r1, r3, #31
 8007004:	d421      	bmi.n	800704a <__lo0bits+0x52>
 8007006:	0798      	lsls	r0, r3, #30
 8007008:	bf49      	itett	mi
 800700a:	085b      	lsrmi	r3, r3, #1
 800700c:	089b      	lsrpl	r3, r3, #2
 800700e:	2001      	movmi	r0, #1
 8007010:	6013      	strmi	r3, [r2, #0]
 8007012:	bf5c      	itt	pl
 8007014:	2002      	movpl	r0, #2
 8007016:	6013      	strpl	r3, [r2, #0]
 8007018:	4770      	bx	lr
 800701a:	b299      	uxth	r1, r3
 800701c:	b909      	cbnz	r1, 8007022 <__lo0bits+0x2a>
 800701e:	2010      	movs	r0, #16
 8007020:	0c1b      	lsrs	r3, r3, #16
 8007022:	b2d9      	uxtb	r1, r3
 8007024:	b909      	cbnz	r1, 800702a <__lo0bits+0x32>
 8007026:	3008      	adds	r0, #8
 8007028:	0a1b      	lsrs	r3, r3, #8
 800702a:	0719      	lsls	r1, r3, #28
 800702c:	bf04      	itt	eq
 800702e:	091b      	lsreq	r3, r3, #4
 8007030:	3004      	addeq	r0, #4
 8007032:	0799      	lsls	r1, r3, #30
 8007034:	bf04      	itt	eq
 8007036:	089b      	lsreq	r3, r3, #2
 8007038:	3002      	addeq	r0, #2
 800703a:	07d9      	lsls	r1, r3, #31
 800703c:	d403      	bmi.n	8007046 <__lo0bits+0x4e>
 800703e:	085b      	lsrs	r3, r3, #1
 8007040:	f100 0001 	add.w	r0, r0, #1
 8007044:	d003      	beq.n	800704e <__lo0bits+0x56>
 8007046:	6013      	str	r3, [r2, #0]
 8007048:	4770      	bx	lr
 800704a:	2000      	movs	r0, #0
 800704c:	4770      	bx	lr
 800704e:	2020      	movs	r0, #32
 8007050:	4770      	bx	lr
	...

08007054 <__i2b>:
 8007054:	b510      	push	{r4, lr}
 8007056:	460c      	mov	r4, r1
 8007058:	2101      	movs	r1, #1
 800705a:	f7ff ff05 	bl	8006e68 <_Balloc>
 800705e:	4602      	mov	r2, r0
 8007060:	b928      	cbnz	r0, 800706e <__i2b+0x1a>
 8007062:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8007066:	4b04      	ldr	r3, [pc, #16]	; (8007078 <__i2b+0x24>)
 8007068:	4804      	ldr	r0, [pc, #16]	; (800707c <__i2b+0x28>)
 800706a:	f000 fcdb 	bl	8007a24 <__assert_func>
 800706e:	2301      	movs	r3, #1
 8007070:	6144      	str	r4, [r0, #20]
 8007072:	6103      	str	r3, [r0, #16]
 8007074:	bd10      	pop	{r4, pc}
 8007076:	bf00      	nop
 8007078:	08008bf7 	.word	0x08008bf7
 800707c:	08008c08 	.word	0x08008c08

08007080 <__multiply>:
 8007080:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007084:	4691      	mov	r9, r2
 8007086:	690a      	ldr	r2, [r1, #16]
 8007088:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800708c:	460c      	mov	r4, r1
 800708e:	429a      	cmp	r2, r3
 8007090:	bfbe      	ittt	lt
 8007092:	460b      	movlt	r3, r1
 8007094:	464c      	movlt	r4, r9
 8007096:	4699      	movlt	r9, r3
 8007098:	6927      	ldr	r7, [r4, #16]
 800709a:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800709e:	68a3      	ldr	r3, [r4, #8]
 80070a0:	6861      	ldr	r1, [r4, #4]
 80070a2:	eb07 060a 	add.w	r6, r7, sl
 80070a6:	42b3      	cmp	r3, r6
 80070a8:	b085      	sub	sp, #20
 80070aa:	bfb8      	it	lt
 80070ac:	3101      	addlt	r1, #1
 80070ae:	f7ff fedb 	bl	8006e68 <_Balloc>
 80070b2:	b930      	cbnz	r0, 80070c2 <__multiply+0x42>
 80070b4:	4602      	mov	r2, r0
 80070b6:	f240 115d 	movw	r1, #349	; 0x15d
 80070ba:	4b43      	ldr	r3, [pc, #268]	; (80071c8 <__multiply+0x148>)
 80070bc:	4843      	ldr	r0, [pc, #268]	; (80071cc <__multiply+0x14c>)
 80070be:	f000 fcb1 	bl	8007a24 <__assert_func>
 80070c2:	f100 0514 	add.w	r5, r0, #20
 80070c6:	462b      	mov	r3, r5
 80070c8:	2200      	movs	r2, #0
 80070ca:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80070ce:	4543      	cmp	r3, r8
 80070d0:	d321      	bcc.n	8007116 <__multiply+0x96>
 80070d2:	f104 0314 	add.w	r3, r4, #20
 80070d6:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80070da:	f109 0314 	add.w	r3, r9, #20
 80070de:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80070e2:	9202      	str	r2, [sp, #8]
 80070e4:	1b3a      	subs	r2, r7, r4
 80070e6:	3a15      	subs	r2, #21
 80070e8:	f022 0203 	bic.w	r2, r2, #3
 80070ec:	3204      	adds	r2, #4
 80070ee:	f104 0115 	add.w	r1, r4, #21
 80070f2:	428f      	cmp	r7, r1
 80070f4:	bf38      	it	cc
 80070f6:	2204      	movcc	r2, #4
 80070f8:	9201      	str	r2, [sp, #4]
 80070fa:	9a02      	ldr	r2, [sp, #8]
 80070fc:	9303      	str	r3, [sp, #12]
 80070fe:	429a      	cmp	r2, r3
 8007100:	d80c      	bhi.n	800711c <__multiply+0x9c>
 8007102:	2e00      	cmp	r6, #0
 8007104:	dd03      	ble.n	800710e <__multiply+0x8e>
 8007106:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800710a:	2b00      	cmp	r3, #0
 800710c:	d059      	beq.n	80071c2 <__multiply+0x142>
 800710e:	6106      	str	r6, [r0, #16]
 8007110:	b005      	add	sp, #20
 8007112:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007116:	f843 2b04 	str.w	r2, [r3], #4
 800711a:	e7d8      	b.n	80070ce <__multiply+0x4e>
 800711c:	f8b3 a000 	ldrh.w	sl, [r3]
 8007120:	f1ba 0f00 	cmp.w	sl, #0
 8007124:	d023      	beq.n	800716e <__multiply+0xee>
 8007126:	46a9      	mov	r9, r5
 8007128:	f04f 0c00 	mov.w	ip, #0
 800712c:	f104 0e14 	add.w	lr, r4, #20
 8007130:	f85e 2b04 	ldr.w	r2, [lr], #4
 8007134:	f8d9 1000 	ldr.w	r1, [r9]
 8007138:	fa1f fb82 	uxth.w	fp, r2
 800713c:	b289      	uxth	r1, r1
 800713e:	fb0a 110b 	mla	r1, sl, fp, r1
 8007142:	4461      	add	r1, ip
 8007144:	f8d9 c000 	ldr.w	ip, [r9]
 8007148:	0c12      	lsrs	r2, r2, #16
 800714a:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800714e:	fb0a c202 	mla	r2, sl, r2, ip
 8007152:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007156:	b289      	uxth	r1, r1
 8007158:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800715c:	4577      	cmp	r7, lr
 800715e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007162:	f849 1b04 	str.w	r1, [r9], #4
 8007166:	d8e3      	bhi.n	8007130 <__multiply+0xb0>
 8007168:	9a01      	ldr	r2, [sp, #4]
 800716a:	f845 c002 	str.w	ip, [r5, r2]
 800716e:	9a03      	ldr	r2, [sp, #12]
 8007170:	3304      	adds	r3, #4
 8007172:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007176:	f1b9 0f00 	cmp.w	r9, #0
 800717a:	d020      	beq.n	80071be <__multiply+0x13e>
 800717c:	46ae      	mov	lr, r5
 800717e:	f04f 0a00 	mov.w	sl, #0
 8007182:	6829      	ldr	r1, [r5, #0]
 8007184:	f104 0c14 	add.w	ip, r4, #20
 8007188:	f8bc b000 	ldrh.w	fp, [ip]
 800718c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007190:	b289      	uxth	r1, r1
 8007192:	fb09 220b 	mla	r2, r9, fp, r2
 8007196:	4492      	add	sl, r2
 8007198:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800719c:	f84e 1b04 	str.w	r1, [lr], #4
 80071a0:	f85c 2b04 	ldr.w	r2, [ip], #4
 80071a4:	f8be 1000 	ldrh.w	r1, [lr]
 80071a8:	0c12      	lsrs	r2, r2, #16
 80071aa:	fb09 1102 	mla	r1, r9, r2, r1
 80071ae:	4567      	cmp	r7, ip
 80071b0:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80071b4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80071b8:	d8e6      	bhi.n	8007188 <__multiply+0x108>
 80071ba:	9a01      	ldr	r2, [sp, #4]
 80071bc:	50a9      	str	r1, [r5, r2]
 80071be:	3504      	adds	r5, #4
 80071c0:	e79b      	b.n	80070fa <__multiply+0x7a>
 80071c2:	3e01      	subs	r6, #1
 80071c4:	e79d      	b.n	8007102 <__multiply+0x82>
 80071c6:	bf00      	nop
 80071c8:	08008bf7 	.word	0x08008bf7
 80071cc:	08008c08 	.word	0x08008c08

080071d0 <__pow5mult>:
 80071d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80071d4:	4615      	mov	r5, r2
 80071d6:	f012 0203 	ands.w	r2, r2, #3
 80071da:	4606      	mov	r6, r0
 80071dc:	460f      	mov	r7, r1
 80071de:	d007      	beq.n	80071f0 <__pow5mult+0x20>
 80071e0:	4c25      	ldr	r4, [pc, #148]	; (8007278 <__pow5mult+0xa8>)
 80071e2:	3a01      	subs	r2, #1
 80071e4:	2300      	movs	r3, #0
 80071e6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80071ea:	f7ff fe9f 	bl	8006f2c <__multadd>
 80071ee:	4607      	mov	r7, r0
 80071f0:	10ad      	asrs	r5, r5, #2
 80071f2:	d03d      	beq.n	8007270 <__pow5mult+0xa0>
 80071f4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80071f6:	b97c      	cbnz	r4, 8007218 <__pow5mult+0x48>
 80071f8:	2010      	movs	r0, #16
 80071fa:	f7ff fe1f 	bl	8006e3c <malloc>
 80071fe:	4602      	mov	r2, r0
 8007200:	6270      	str	r0, [r6, #36]	; 0x24
 8007202:	b928      	cbnz	r0, 8007210 <__pow5mult+0x40>
 8007204:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8007208:	4b1c      	ldr	r3, [pc, #112]	; (800727c <__pow5mult+0xac>)
 800720a:	481d      	ldr	r0, [pc, #116]	; (8007280 <__pow5mult+0xb0>)
 800720c:	f000 fc0a 	bl	8007a24 <__assert_func>
 8007210:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007214:	6004      	str	r4, [r0, #0]
 8007216:	60c4      	str	r4, [r0, #12]
 8007218:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800721c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007220:	b94c      	cbnz	r4, 8007236 <__pow5mult+0x66>
 8007222:	f240 2171 	movw	r1, #625	; 0x271
 8007226:	4630      	mov	r0, r6
 8007228:	f7ff ff14 	bl	8007054 <__i2b>
 800722c:	2300      	movs	r3, #0
 800722e:	4604      	mov	r4, r0
 8007230:	f8c8 0008 	str.w	r0, [r8, #8]
 8007234:	6003      	str	r3, [r0, #0]
 8007236:	f04f 0900 	mov.w	r9, #0
 800723a:	07eb      	lsls	r3, r5, #31
 800723c:	d50a      	bpl.n	8007254 <__pow5mult+0x84>
 800723e:	4639      	mov	r1, r7
 8007240:	4622      	mov	r2, r4
 8007242:	4630      	mov	r0, r6
 8007244:	f7ff ff1c 	bl	8007080 <__multiply>
 8007248:	4680      	mov	r8, r0
 800724a:	4639      	mov	r1, r7
 800724c:	4630      	mov	r0, r6
 800724e:	f7ff fe4b 	bl	8006ee8 <_Bfree>
 8007252:	4647      	mov	r7, r8
 8007254:	106d      	asrs	r5, r5, #1
 8007256:	d00b      	beq.n	8007270 <__pow5mult+0xa0>
 8007258:	6820      	ldr	r0, [r4, #0]
 800725a:	b938      	cbnz	r0, 800726c <__pow5mult+0x9c>
 800725c:	4622      	mov	r2, r4
 800725e:	4621      	mov	r1, r4
 8007260:	4630      	mov	r0, r6
 8007262:	f7ff ff0d 	bl	8007080 <__multiply>
 8007266:	6020      	str	r0, [r4, #0]
 8007268:	f8c0 9000 	str.w	r9, [r0]
 800726c:	4604      	mov	r4, r0
 800726e:	e7e4      	b.n	800723a <__pow5mult+0x6a>
 8007270:	4638      	mov	r0, r7
 8007272:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007276:	bf00      	nop
 8007278:	08008d58 	.word	0x08008d58
 800727c:	08008b85 	.word	0x08008b85
 8007280:	08008c08 	.word	0x08008c08

08007284 <__lshift>:
 8007284:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007288:	460c      	mov	r4, r1
 800728a:	4607      	mov	r7, r0
 800728c:	4691      	mov	r9, r2
 800728e:	6923      	ldr	r3, [r4, #16]
 8007290:	6849      	ldr	r1, [r1, #4]
 8007292:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007296:	68a3      	ldr	r3, [r4, #8]
 8007298:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800729c:	f108 0601 	add.w	r6, r8, #1
 80072a0:	42b3      	cmp	r3, r6
 80072a2:	db0b      	blt.n	80072bc <__lshift+0x38>
 80072a4:	4638      	mov	r0, r7
 80072a6:	f7ff fddf 	bl	8006e68 <_Balloc>
 80072aa:	4605      	mov	r5, r0
 80072ac:	b948      	cbnz	r0, 80072c2 <__lshift+0x3e>
 80072ae:	4602      	mov	r2, r0
 80072b0:	f240 11d9 	movw	r1, #473	; 0x1d9
 80072b4:	4b29      	ldr	r3, [pc, #164]	; (800735c <__lshift+0xd8>)
 80072b6:	482a      	ldr	r0, [pc, #168]	; (8007360 <__lshift+0xdc>)
 80072b8:	f000 fbb4 	bl	8007a24 <__assert_func>
 80072bc:	3101      	adds	r1, #1
 80072be:	005b      	lsls	r3, r3, #1
 80072c0:	e7ee      	b.n	80072a0 <__lshift+0x1c>
 80072c2:	2300      	movs	r3, #0
 80072c4:	f100 0114 	add.w	r1, r0, #20
 80072c8:	f100 0210 	add.w	r2, r0, #16
 80072cc:	4618      	mov	r0, r3
 80072ce:	4553      	cmp	r3, sl
 80072d0:	db37      	blt.n	8007342 <__lshift+0xbe>
 80072d2:	6920      	ldr	r0, [r4, #16]
 80072d4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80072d8:	f104 0314 	add.w	r3, r4, #20
 80072dc:	f019 091f 	ands.w	r9, r9, #31
 80072e0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80072e4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80072e8:	d02f      	beq.n	800734a <__lshift+0xc6>
 80072ea:	468a      	mov	sl, r1
 80072ec:	f04f 0c00 	mov.w	ip, #0
 80072f0:	f1c9 0e20 	rsb	lr, r9, #32
 80072f4:	681a      	ldr	r2, [r3, #0]
 80072f6:	fa02 f209 	lsl.w	r2, r2, r9
 80072fa:	ea42 020c 	orr.w	r2, r2, ip
 80072fe:	f84a 2b04 	str.w	r2, [sl], #4
 8007302:	f853 2b04 	ldr.w	r2, [r3], #4
 8007306:	4298      	cmp	r0, r3
 8007308:	fa22 fc0e 	lsr.w	ip, r2, lr
 800730c:	d8f2      	bhi.n	80072f4 <__lshift+0x70>
 800730e:	1b03      	subs	r3, r0, r4
 8007310:	3b15      	subs	r3, #21
 8007312:	f023 0303 	bic.w	r3, r3, #3
 8007316:	3304      	adds	r3, #4
 8007318:	f104 0215 	add.w	r2, r4, #21
 800731c:	4290      	cmp	r0, r2
 800731e:	bf38      	it	cc
 8007320:	2304      	movcc	r3, #4
 8007322:	f841 c003 	str.w	ip, [r1, r3]
 8007326:	f1bc 0f00 	cmp.w	ip, #0
 800732a:	d001      	beq.n	8007330 <__lshift+0xac>
 800732c:	f108 0602 	add.w	r6, r8, #2
 8007330:	3e01      	subs	r6, #1
 8007332:	4638      	mov	r0, r7
 8007334:	4621      	mov	r1, r4
 8007336:	612e      	str	r6, [r5, #16]
 8007338:	f7ff fdd6 	bl	8006ee8 <_Bfree>
 800733c:	4628      	mov	r0, r5
 800733e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007342:	f842 0f04 	str.w	r0, [r2, #4]!
 8007346:	3301      	adds	r3, #1
 8007348:	e7c1      	b.n	80072ce <__lshift+0x4a>
 800734a:	3904      	subs	r1, #4
 800734c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007350:	4298      	cmp	r0, r3
 8007352:	f841 2f04 	str.w	r2, [r1, #4]!
 8007356:	d8f9      	bhi.n	800734c <__lshift+0xc8>
 8007358:	e7ea      	b.n	8007330 <__lshift+0xac>
 800735a:	bf00      	nop
 800735c:	08008bf7 	.word	0x08008bf7
 8007360:	08008c08 	.word	0x08008c08

08007364 <__mcmp>:
 8007364:	4603      	mov	r3, r0
 8007366:	690a      	ldr	r2, [r1, #16]
 8007368:	6900      	ldr	r0, [r0, #16]
 800736a:	b530      	push	{r4, r5, lr}
 800736c:	1a80      	subs	r0, r0, r2
 800736e:	d10d      	bne.n	800738c <__mcmp+0x28>
 8007370:	3314      	adds	r3, #20
 8007372:	3114      	adds	r1, #20
 8007374:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007378:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800737c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007380:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007384:	4295      	cmp	r5, r2
 8007386:	d002      	beq.n	800738e <__mcmp+0x2a>
 8007388:	d304      	bcc.n	8007394 <__mcmp+0x30>
 800738a:	2001      	movs	r0, #1
 800738c:	bd30      	pop	{r4, r5, pc}
 800738e:	42a3      	cmp	r3, r4
 8007390:	d3f4      	bcc.n	800737c <__mcmp+0x18>
 8007392:	e7fb      	b.n	800738c <__mcmp+0x28>
 8007394:	f04f 30ff 	mov.w	r0, #4294967295
 8007398:	e7f8      	b.n	800738c <__mcmp+0x28>
	...

0800739c <__mdiff>:
 800739c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073a0:	460d      	mov	r5, r1
 80073a2:	4607      	mov	r7, r0
 80073a4:	4611      	mov	r1, r2
 80073a6:	4628      	mov	r0, r5
 80073a8:	4614      	mov	r4, r2
 80073aa:	f7ff ffdb 	bl	8007364 <__mcmp>
 80073ae:	1e06      	subs	r6, r0, #0
 80073b0:	d111      	bne.n	80073d6 <__mdiff+0x3a>
 80073b2:	4631      	mov	r1, r6
 80073b4:	4638      	mov	r0, r7
 80073b6:	f7ff fd57 	bl	8006e68 <_Balloc>
 80073ba:	4602      	mov	r2, r0
 80073bc:	b928      	cbnz	r0, 80073ca <__mdiff+0x2e>
 80073be:	f240 2132 	movw	r1, #562	; 0x232
 80073c2:	4b3a      	ldr	r3, [pc, #232]	; (80074ac <__mdiff+0x110>)
 80073c4:	483a      	ldr	r0, [pc, #232]	; (80074b0 <__mdiff+0x114>)
 80073c6:	f000 fb2d 	bl	8007a24 <__assert_func>
 80073ca:	2301      	movs	r3, #1
 80073cc:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80073d0:	4610      	mov	r0, r2
 80073d2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073d6:	bfa4      	itt	ge
 80073d8:	4623      	movge	r3, r4
 80073da:	462c      	movge	r4, r5
 80073dc:	4638      	mov	r0, r7
 80073de:	6861      	ldr	r1, [r4, #4]
 80073e0:	bfa6      	itte	ge
 80073e2:	461d      	movge	r5, r3
 80073e4:	2600      	movge	r6, #0
 80073e6:	2601      	movlt	r6, #1
 80073e8:	f7ff fd3e 	bl	8006e68 <_Balloc>
 80073ec:	4602      	mov	r2, r0
 80073ee:	b918      	cbnz	r0, 80073f8 <__mdiff+0x5c>
 80073f0:	f44f 7110 	mov.w	r1, #576	; 0x240
 80073f4:	4b2d      	ldr	r3, [pc, #180]	; (80074ac <__mdiff+0x110>)
 80073f6:	e7e5      	b.n	80073c4 <__mdiff+0x28>
 80073f8:	f102 0814 	add.w	r8, r2, #20
 80073fc:	46c2      	mov	sl, r8
 80073fe:	f04f 0c00 	mov.w	ip, #0
 8007402:	6927      	ldr	r7, [r4, #16]
 8007404:	60c6      	str	r6, [r0, #12]
 8007406:	692e      	ldr	r6, [r5, #16]
 8007408:	f104 0014 	add.w	r0, r4, #20
 800740c:	f105 0914 	add.w	r9, r5, #20
 8007410:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8007414:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007418:	3410      	adds	r4, #16
 800741a:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800741e:	f859 3b04 	ldr.w	r3, [r9], #4
 8007422:	fa1f f18b 	uxth.w	r1, fp
 8007426:	448c      	add	ip, r1
 8007428:	b299      	uxth	r1, r3
 800742a:	0c1b      	lsrs	r3, r3, #16
 800742c:	ebac 0101 	sub.w	r1, ip, r1
 8007430:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007434:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8007438:	b289      	uxth	r1, r1
 800743a:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800743e:	454e      	cmp	r6, r9
 8007440:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8007444:	f84a 3b04 	str.w	r3, [sl], #4
 8007448:	d8e7      	bhi.n	800741a <__mdiff+0x7e>
 800744a:	1b73      	subs	r3, r6, r5
 800744c:	3b15      	subs	r3, #21
 800744e:	f023 0303 	bic.w	r3, r3, #3
 8007452:	3515      	adds	r5, #21
 8007454:	3304      	adds	r3, #4
 8007456:	42ae      	cmp	r6, r5
 8007458:	bf38      	it	cc
 800745a:	2304      	movcc	r3, #4
 800745c:	4418      	add	r0, r3
 800745e:	4443      	add	r3, r8
 8007460:	461e      	mov	r6, r3
 8007462:	4605      	mov	r5, r0
 8007464:	4575      	cmp	r5, lr
 8007466:	d30e      	bcc.n	8007486 <__mdiff+0xea>
 8007468:	f10e 0103 	add.w	r1, lr, #3
 800746c:	1a09      	subs	r1, r1, r0
 800746e:	f021 0103 	bic.w	r1, r1, #3
 8007472:	3803      	subs	r0, #3
 8007474:	4586      	cmp	lr, r0
 8007476:	bf38      	it	cc
 8007478:	2100      	movcc	r1, #0
 800747a:	4419      	add	r1, r3
 800747c:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8007480:	b18b      	cbz	r3, 80074a6 <__mdiff+0x10a>
 8007482:	6117      	str	r7, [r2, #16]
 8007484:	e7a4      	b.n	80073d0 <__mdiff+0x34>
 8007486:	f855 8b04 	ldr.w	r8, [r5], #4
 800748a:	fa1f f188 	uxth.w	r1, r8
 800748e:	4461      	add	r1, ip
 8007490:	140c      	asrs	r4, r1, #16
 8007492:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8007496:	b289      	uxth	r1, r1
 8007498:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800749c:	ea4f 4c24 	mov.w	ip, r4, asr #16
 80074a0:	f846 1b04 	str.w	r1, [r6], #4
 80074a4:	e7de      	b.n	8007464 <__mdiff+0xc8>
 80074a6:	3f01      	subs	r7, #1
 80074a8:	e7e8      	b.n	800747c <__mdiff+0xe0>
 80074aa:	bf00      	nop
 80074ac:	08008bf7 	.word	0x08008bf7
 80074b0:	08008c08 	.word	0x08008c08

080074b4 <__d2b>:
 80074b4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80074b8:	2101      	movs	r1, #1
 80074ba:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 80074be:	4690      	mov	r8, r2
 80074c0:	461d      	mov	r5, r3
 80074c2:	f7ff fcd1 	bl	8006e68 <_Balloc>
 80074c6:	4604      	mov	r4, r0
 80074c8:	b930      	cbnz	r0, 80074d8 <__d2b+0x24>
 80074ca:	4602      	mov	r2, r0
 80074cc:	f240 310a 	movw	r1, #778	; 0x30a
 80074d0:	4b24      	ldr	r3, [pc, #144]	; (8007564 <__d2b+0xb0>)
 80074d2:	4825      	ldr	r0, [pc, #148]	; (8007568 <__d2b+0xb4>)
 80074d4:	f000 faa6 	bl	8007a24 <__assert_func>
 80074d8:	f3c5 0313 	ubfx	r3, r5, #0, #20
 80074dc:	f3c5 550a 	ubfx	r5, r5, #20, #11
 80074e0:	bb2d      	cbnz	r5, 800752e <__d2b+0x7a>
 80074e2:	9301      	str	r3, [sp, #4]
 80074e4:	f1b8 0300 	subs.w	r3, r8, #0
 80074e8:	d026      	beq.n	8007538 <__d2b+0x84>
 80074ea:	4668      	mov	r0, sp
 80074ec:	9300      	str	r3, [sp, #0]
 80074ee:	f7ff fd83 	bl	8006ff8 <__lo0bits>
 80074f2:	9900      	ldr	r1, [sp, #0]
 80074f4:	b1f0      	cbz	r0, 8007534 <__d2b+0x80>
 80074f6:	9a01      	ldr	r2, [sp, #4]
 80074f8:	f1c0 0320 	rsb	r3, r0, #32
 80074fc:	fa02 f303 	lsl.w	r3, r2, r3
 8007500:	430b      	orrs	r3, r1
 8007502:	40c2      	lsrs	r2, r0
 8007504:	6163      	str	r3, [r4, #20]
 8007506:	9201      	str	r2, [sp, #4]
 8007508:	9b01      	ldr	r3, [sp, #4]
 800750a:	2b00      	cmp	r3, #0
 800750c:	bf14      	ite	ne
 800750e:	2102      	movne	r1, #2
 8007510:	2101      	moveq	r1, #1
 8007512:	61a3      	str	r3, [r4, #24]
 8007514:	6121      	str	r1, [r4, #16]
 8007516:	b1c5      	cbz	r5, 800754a <__d2b+0x96>
 8007518:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800751c:	4405      	add	r5, r0
 800751e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007522:	603d      	str	r5, [r7, #0]
 8007524:	6030      	str	r0, [r6, #0]
 8007526:	4620      	mov	r0, r4
 8007528:	b002      	add	sp, #8
 800752a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800752e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007532:	e7d6      	b.n	80074e2 <__d2b+0x2e>
 8007534:	6161      	str	r1, [r4, #20]
 8007536:	e7e7      	b.n	8007508 <__d2b+0x54>
 8007538:	a801      	add	r0, sp, #4
 800753a:	f7ff fd5d 	bl	8006ff8 <__lo0bits>
 800753e:	2101      	movs	r1, #1
 8007540:	9b01      	ldr	r3, [sp, #4]
 8007542:	6121      	str	r1, [r4, #16]
 8007544:	6163      	str	r3, [r4, #20]
 8007546:	3020      	adds	r0, #32
 8007548:	e7e5      	b.n	8007516 <__d2b+0x62>
 800754a:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800754e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007552:	6038      	str	r0, [r7, #0]
 8007554:	6918      	ldr	r0, [r3, #16]
 8007556:	f7ff fd2f 	bl	8006fb8 <__hi0bits>
 800755a:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800755e:	6031      	str	r1, [r6, #0]
 8007560:	e7e1      	b.n	8007526 <__d2b+0x72>
 8007562:	bf00      	nop
 8007564:	08008bf7 	.word	0x08008bf7
 8007568:	08008c08 	.word	0x08008c08

0800756c <_calloc_r>:
 800756c:	b570      	push	{r4, r5, r6, lr}
 800756e:	fba1 5402 	umull	r5, r4, r1, r2
 8007572:	b934      	cbnz	r4, 8007582 <_calloc_r+0x16>
 8007574:	4629      	mov	r1, r5
 8007576:	f000 f875 	bl	8007664 <_malloc_r>
 800757a:	4606      	mov	r6, r0
 800757c:	b928      	cbnz	r0, 800758a <_calloc_r+0x1e>
 800757e:	4630      	mov	r0, r6
 8007580:	bd70      	pop	{r4, r5, r6, pc}
 8007582:	220c      	movs	r2, #12
 8007584:	2600      	movs	r6, #0
 8007586:	6002      	str	r2, [r0, #0]
 8007588:	e7f9      	b.n	800757e <_calloc_r+0x12>
 800758a:	462a      	mov	r2, r5
 800758c:	4621      	mov	r1, r4
 800758e:	f7fe f94f 	bl	8005830 <memset>
 8007592:	e7f4      	b.n	800757e <_calloc_r+0x12>

08007594 <_free_r>:
 8007594:	b538      	push	{r3, r4, r5, lr}
 8007596:	4605      	mov	r5, r0
 8007598:	2900      	cmp	r1, #0
 800759a:	d040      	beq.n	800761e <_free_r+0x8a>
 800759c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80075a0:	1f0c      	subs	r4, r1, #4
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	bfb8      	it	lt
 80075a6:	18e4      	addlt	r4, r4, r3
 80075a8:	f000 fa98 	bl	8007adc <__malloc_lock>
 80075ac:	4a1c      	ldr	r2, [pc, #112]	; (8007620 <_free_r+0x8c>)
 80075ae:	6813      	ldr	r3, [r2, #0]
 80075b0:	b933      	cbnz	r3, 80075c0 <_free_r+0x2c>
 80075b2:	6063      	str	r3, [r4, #4]
 80075b4:	6014      	str	r4, [r2, #0]
 80075b6:	4628      	mov	r0, r5
 80075b8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80075bc:	f000 ba94 	b.w	8007ae8 <__malloc_unlock>
 80075c0:	42a3      	cmp	r3, r4
 80075c2:	d908      	bls.n	80075d6 <_free_r+0x42>
 80075c4:	6820      	ldr	r0, [r4, #0]
 80075c6:	1821      	adds	r1, r4, r0
 80075c8:	428b      	cmp	r3, r1
 80075ca:	bf01      	itttt	eq
 80075cc:	6819      	ldreq	r1, [r3, #0]
 80075ce:	685b      	ldreq	r3, [r3, #4]
 80075d0:	1809      	addeq	r1, r1, r0
 80075d2:	6021      	streq	r1, [r4, #0]
 80075d4:	e7ed      	b.n	80075b2 <_free_r+0x1e>
 80075d6:	461a      	mov	r2, r3
 80075d8:	685b      	ldr	r3, [r3, #4]
 80075da:	b10b      	cbz	r3, 80075e0 <_free_r+0x4c>
 80075dc:	42a3      	cmp	r3, r4
 80075de:	d9fa      	bls.n	80075d6 <_free_r+0x42>
 80075e0:	6811      	ldr	r1, [r2, #0]
 80075e2:	1850      	adds	r0, r2, r1
 80075e4:	42a0      	cmp	r0, r4
 80075e6:	d10b      	bne.n	8007600 <_free_r+0x6c>
 80075e8:	6820      	ldr	r0, [r4, #0]
 80075ea:	4401      	add	r1, r0
 80075ec:	1850      	adds	r0, r2, r1
 80075ee:	4283      	cmp	r3, r0
 80075f0:	6011      	str	r1, [r2, #0]
 80075f2:	d1e0      	bne.n	80075b6 <_free_r+0x22>
 80075f4:	6818      	ldr	r0, [r3, #0]
 80075f6:	685b      	ldr	r3, [r3, #4]
 80075f8:	4401      	add	r1, r0
 80075fa:	6011      	str	r1, [r2, #0]
 80075fc:	6053      	str	r3, [r2, #4]
 80075fe:	e7da      	b.n	80075b6 <_free_r+0x22>
 8007600:	d902      	bls.n	8007608 <_free_r+0x74>
 8007602:	230c      	movs	r3, #12
 8007604:	602b      	str	r3, [r5, #0]
 8007606:	e7d6      	b.n	80075b6 <_free_r+0x22>
 8007608:	6820      	ldr	r0, [r4, #0]
 800760a:	1821      	adds	r1, r4, r0
 800760c:	428b      	cmp	r3, r1
 800760e:	bf01      	itttt	eq
 8007610:	6819      	ldreq	r1, [r3, #0]
 8007612:	685b      	ldreq	r3, [r3, #4]
 8007614:	1809      	addeq	r1, r1, r0
 8007616:	6021      	streq	r1, [r4, #0]
 8007618:	6063      	str	r3, [r4, #4]
 800761a:	6054      	str	r4, [r2, #4]
 800761c:	e7cb      	b.n	80075b6 <_free_r+0x22>
 800761e:	bd38      	pop	{r3, r4, r5, pc}
 8007620:	200012f8 	.word	0x200012f8

08007624 <sbrk_aligned>:
 8007624:	b570      	push	{r4, r5, r6, lr}
 8007626:	4e0e      	ldr	r6, [pc, #56]	; (8007660 <sbrk_aligned+0x3c>)
 8007628:	460c      	mov	r4, r1
 800762a:	6831      	ldr	r1, [r6, #0]
 800762c:	4605      	mov	r5, r0
 800762e:	b911      	cbnz	r1, 8007636 <sbrk_aligned+0x12>
 8007630:	f000 f9e8 	bl	8007a04 <_sbrk_r>
 8007634:	6030      	str	r0, [r6, #0]
 8007636:	4621      	mov	r1, r4
 8007638:	4628      	mov	r0, r5
 800763a:	f000 f9e3 	bl	8007a04 <_sbrk_r>
 800763e:	1c43      	adds	r3, r0, #1
 8007640:	d00a      	beq.n	8007658 <sbrk_aligned+0x34>
 8007642:	1cc4      	adds	r4, r0, #3
 8007644:	f024 0403 	bic.w	r4, r4, #3
 8007648:	42a0      	cmp	r0, r4
 800764a:	d007      	beq.n	800765c <sbrk_aligned+0x38>
 800764c:	1a21      	subs	r1, r4, r0
 800764e:	4628      	mov	r0, r5
 8007650:	f000 f9d8 	bl	8007a04 <_sbrk_r>
 8007654:	3001      	adds	r0, #1
 8007656:	d101      	bne.n	800765c <sbrk_aligned+0x38>
 8007658:	f04f 34ff 	mov.w	r4, #4294967295
 800765c:	4620      	mov	r0, r4
 800765e:	bd70      	pop	{r4, r5, r6, pc}
 8007660:	200012fc 	.word	0x200012fc

08007664 <_malloc_r>:
 8007664:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007668:	1ccd      	adds	r5, r1, #3
 800766a:	f025 0503 	bic.w	r5, r5, #3
 800766e:	3508      	adds	r5, #8
 8007670:	2d0c      	cmp	r5, #12
 8007672:	bf38      	it	cc
 8007674:	250c      	movcc	r5, #12
 8007676:	2d00      	cmp	r5, #0
 8007678:	4607      	mov	r7, r0
 800767a:	db01      	blt.n	8007680 <_malloc_r+0x1c>
 800767c:	42a9      	cmp	r1, r5
 800767e:	d905      	bls.n	800768c <_malloc_r+0x28>
 8007680:	230c      	movs	r3, #12
 8007682:	2600      	movs	r6, #0
 8007684:	603b      	str	r3, [r7, #0]
 8007686:	4630      	mov	r0, r6
 8007688:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800768c:	4e2e      	ldr	r6, [pc, #184]	; (8007748 <_malloc_r+0xe4>)
 800768e:	f000 fa25 	bl	8007adc <__malloc_lock>
 8007692:	6833      	ldr	r3, [r6, #0]
 8007694:	461c      	mov	r4, r3
 8007696:	bb34      	cbnz	r4, 80076e6 <_malloc_r+0x82>
 8007698:	4629      	mov	r1, r5
 800769a:	4638      	mov	r0, r7
 800769c:	f7ff ffc2 	bl	8007624 <sbrk_aligned>
 80076a0:	1c43      	adds	r3, r0, #1
 80076a2:	4604      	mov	r4, r0
 80076a4:	d14d      	bne.n	8007742 <_malloc_r+0xde>
 80076a6:	6834      	ldr	r4, [r6, #0]
 80076a8:	4626      	mov	r6, r4
 80076aa:	2e00      	cmp	r6, #0
 80076ac:	d140      	bne.n	8007730 <_malloc_r+0xcc>
 80076ae:	6823      	ldr	r3, [r4, #0]
 80076b0:	4631      	mov	r1, r6
 80076b2:	4638      	mov	r0, r7
 80076b4:	eb04 0803 	add.w	r8, r4, r3
 80076b8:	f000 f9a4 	bl	8007a04 <_sbrk_r>
 80076bc:	4580      	cmp	r8, r0
 80076be:	d13a      	bne.n	8007736 <_malloc_r+0xd2>
 80076c0:	6821      	ldr	r1, [r4, #0]
 80076c2:	3503      	adds	r5, #3
 80076c4:	1a6d      	subs	r5, r5, r1
 80076c6:	f025 0503 	bic.w	r5, r5, #3
 80076ca:	3508      	adds	r5, #8
 80076cc:	2d0c      	cmp	r5, #12
 80076ce:	bf38      	it	cc
 80076d0:	250c      	movcc	r5, #12
 80076d2:	4638      	mov	r0, r7
 80076d4:	4629      	mov	r1, r5
 80076d6:	f7ff ffa5 	bl	8007624 <sbrk_aligned>
 80076da:	3001      	adds	r0, #1
 80076dc:	d02b      	beq.n	8007736 <_malloc_r+0xd2>
 80076de:	6823      	ldr	r3, [r4, #0]
 80076e0:	442b      	add	r3, r5
 80076e2:	6023      	str	r3, [r4, #0]
 80076e4:	e00e      	b.n	8007704 <_malloc_r+0xa0>
 80076e6:	6822      	ldr	r2, [r4, #0]
 80076e8:	1b52      	subs	r2, r2, r5
 80076ea:	d41e      	bmi.n	800772a <_malloc_r+0xc6>
 80076ec:	2a0b      	cmp	r2, #11
 80076ee:	d916      	bls.n	800771e <_malloc_r+0xba>
 80076f0:	1961      	adds	r1, r4, r5
 80076f2:	42a3      	cmp	r3, r4
 80076f4:	6025      	str	r5, [r4, #0]
 80076f6:	bf18      	it	ne
 80076f8:	6059      	strne	r1, [r3, #4]
 80076fa:	6863      	ldr	r3, [r4, #4]
 80076fc:	bf08      	it	eq
 80076fe:	6031      	streq	r1, [r6, #0]
 8007700:	5162      	str	r2, [r4, r5]
 8007702:	604b      	str	r3, [r1, #4]
 8007704:	4638      	mov	r0, r7
 8007706:	f104 060b 	add.w	r6, r4, #11
 800770a:	f000 f9ed 	bl	8007ae8 <__malloc_unlock>
 800770e:	f026 0607 	bic.w	r6, r6, #7
 8007712:	1d23      	adds	r3, r4, #4
 8007714:	1af2      	subs	r2, r6, r3
 8007716:	d0b6      	beq.n	8007686 <_malloc_r+0x22>
 8007718:	1b9b      	subs	r3, r3, r6
 800771a:	50a3      	str	r3, [r4, r2]
 800771c:	e7b3      	b.n	8007686 <_malloc_r+0x22>
 800771e:	6862      	ldr	r2, [r4, #4]
 8007720:	42a3      	cmp	r3, r4
 8007722:	bf0c      	ite	eq
 8007724:	6032      	streq	r2, [r6, #0]
 8007726:	605a      	strne	r2, [r3, #4]
 8007728:	e7ec      	b.n	8007704 <_malloc_r+0xa0>
 800772a:	4623      	mov	r3, r4
 800772c:	6864      	ldr	r4, [r4, #4]
 800772e:	e7b2      	b.n	8007696 <_malloc_r+0x32>
 8007730:	4634      	mov	r4, r6
 8007732:	6876      	ldr	r6, [r6, #4]
 8007734:	e7b9      	b.n	80076aa <_malloc_r+0x46>
 8007736:	230c      	movs	r3, #12
 8007738:	4638      	mov	r0, r7
 800773a:	603b      	str	r3, [r7, #0]
 800773c:	f000 f9d4 	bl	8007ae8 <__malloc_unlock>
 8007740:	e7a1      	b.n	8007686 <_malloc_r+0x22>
 8007742:	6025      	str	r5, [r4, #0]
 8007744:	e7de      	b.n	8007704 <_malloc_r+0xa0>
 8007746:	bf00      	nop
 8007748:	200012f8 	.word	0x200012f8

0800774c <__ssputs_r>:
 800774c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007750:	688e      	ldr	r6, [r1, #8]
 8007752:	4682      	mov	sl, r0
 8007754:	429e      	cmp	r6, r3
 8007756:	460c      	mov	r4, r1
 8007758:	4690      	mov	r8, r2
 800775a:	461f      	mov	r7, r3
 800775c:	d838      	bhi.n	80077d0 <__ssputs_r+0x84>
 800775e:	898a      	ldrh	r2, [r1, #12]
 8007760:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007764:	d032      	beq.n	80077cc <__ssputs_r+0x80>
 8007766:	6825      	ldr	r5, [r4, #0]
 8007768:	6909      	ldr	r1, [r1, #16]
 800776a:	3301      	adds	r3, #1
 800776c:	eba5 0901 	sub.w	r9, r5, r1
 8007770:	6965      	ldr	r5, [r4, #20]
 8007772:	444b      	add	r3, r9
 8007774:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007778:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800777c:	106d      	asrs	r5, r5, #1
 800777e:	429d      	cmp	r5, r3
 8007780:	bf38      	it	cc
 8007782:	461d      	movcc	r5, r3
 8007784:	0553      	lsls	r3, r2, #21
 8007786:	d531      	bpl.n	80077ec <__ssputs_r+0xa0>
 8007788:	4629      	mov	r1, r5
 800778a:	f7ff ff6b 	bl	8007664 <_malloc_r>
 800778e:	4606      	mov	r6, r0
 8007790:	b950      	cbnz	r0, 80077a8 <__ssputs_r+0x5c>
 8007792:	230c      	movs	r3, #12
 8007794:	f04f 30ff 	mov.w	r0, #4294967295
 8007798:	f8ca 3000 	str.w	r3, [sl]
 800779c:	89a3      	ldrh	r3, [r4, #12]
 800779e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80077a2:	81a3      	strh	r3, [r4, #12]
 80077a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80077a8:	464a      	mov	r2, r9
 80077aa:	6921      	ldr	r1, [r4, #16]
 80077ac:	f7fe f832 	bl	8005814 <memcpy>
 80077b0:	89a3      	ldrh	r3, [r4, #12]
 80077b2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80077b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80077ba:	81a3      	strh	r3, [r4, #12]
 80077bc:	6126      	str	r6, [r4, #16]
 80077be:	444e      	add	r6, r9
 80077c0:	6026      	str	r6, [r4, #0]
 80077c2:	463e      	mov	r6, r7
 80077c4:	6165      	str	r5, [r4, #20]
 80077c6:	eba5 0509 	sub.w	r5, r5, r9
 80077ca:	60a5      	str	r5, [r4, #8]
 80077cc:	42be      	cmp	r6, r7
 80077ce:	d900      	bls.n	80077d2 <__ssputs_r+0x86>
 80077d0:	463e      	mov	r6, r7
 80077d2:	4632      	mov	r2, r6
 80077d4:	4641      	mov	r1, r8
 80077d6:	6820      	ldr	r0, [r4, #0]
 80077d8:	f000 f966 	bl	8007aa8 <memmove>
 80077dc:	68a3      	ldr	r3, [r4, #8]
 80077de:	2000      	movs	r0, #0
 80077e0:	1b9b      	subs	r3, r3, r6
 80077e2:	60a3      	str	r3, [r4, #8]
 80077e4:	6823      	ldr	r3, [r4, #0]
 80077e6:	4433      	add	r3, r6
 80077e8:	6023      	str	r3, [r4, #0]
 80077ea:	e7db      	b.n	80077a4 <__ssputs_r+0x58>
 80077ec:	462a      	mov	r2, r5
 80077ee:	f000 f981 	bl	8007af4 <_realloc_r>
 80077f2:	4606      	mov	r6, r0
 80077f4:	2800      	cmp	r0, #0
 80077f6:	d1e1      	bne.n	80077bc <__ssputs_r+0x70>
 80077f8:	4650      	mov	r0, sl
 80077fa:	6921      	ldr	r1, [r4, #16]
 80077fc:	f7ff feca 	bl	8007594 <_free_r>
 8007800:	e7c7      	b.n	8007792 <__ssputs_r+0x46>
	...

08007804 <_svfiprintf_r>:
 8007804:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007808:	4698      	mov	r8, r3
 800780a:	898b      	ldrh	r3, [r1, #12]
 800780c:	4607      	mov	r7, r0
 800780e:	061b      	lsls	r3, r3, #24
 8007810:	460d      	mov	r5, r1
 8007812:	4614      	mov	r4, r2
 8007814:	b09d      	sub	sp, #116	; 0x74
 8007816:	d50e      	bpl.n	8007836 <_svfiprintf_r+0x32>
 8007818:	690b      	ldr	r3, [r1, #16]
 800781a:	b963      	cbnz	r3, 8007836 <_svfiprintf_r+0x32>
 800781c:	2140      	movs	r1, #64	; 0x40
 800781e:	f7ff ff21 	bl	8007664 <_malloc_r>
 8007822:	6028      	str	r0, [r5, #0]
 8007824:	6128      	str	r0, [r5, #16]
 8007826:	b920      	cbnz	r0, 8007832 <_svfiprintf_r+0x2e>
 8007828:	230c      	movs	r3, #12
 800782a:	603b      	str	r3, [r7, #0]
 800782c:	f04f 30ff 	mov.w	r0, #4294967295
 8007830:	e0d1      	b.n	80079d6 <_svfiprintf_r+0x1d2>
 8007832:	2340      	movs	r3, #64	; 0x40
 8007834:	616b      	str	r3, [r5, #20]
 8007836:	2300      	movs	r3, #0
 8007838:	9309      	str	r3, [sp, #36]	; 0x24
 800783a:	2320      	movs	r3, #32
 800783c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007840:	2330      	movs	r3, #48	; 0x30
 8007842:	f04f 0901 	mov.w	r9, #1
 8007846:	f8cd 800c 	str.w	r8, [sp, #12]
 800784a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80079f0 <_svfiprintf_r+0x1ec>
 800784e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007852:	4623      	mov	r3, r4
 8007854:	469a      	mov	sl, r3
 8007856:	f813 2b01 	ldrb.w	r2, [r3], #1
 800785a:	b10a      	cbz	r2, 8007860 <_svfiprintf_r+0x5c>
 800785c:	2a25      	cmp	r2, #37	; 0x25
 800785e:	d1f9      	bne.n	8007854 <_svfiprintf_r+0x50>
 8007860:	ebba 0b04 	subs.w	fp, sl, r4
 8007864:	d00b      	beq.n	800787e <_svfiprintf_r+0x7a>
 8007866:	465b      	mov	r3, fp
 8007868:	4622      	mov	r2, r4
 800786a:	4629      	mov	r1, r5
 800786c:	4638      	mov	r0, r7
 800786e:	f7ff ff6d 	bl	800774c <__ssputs_r>
 8007872:	3001      	adds	r0, #1
 8007874:	f000 80aa 	beq.w	80079cc <_svfiprintf_r+0x1c8>
 8007878:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800787a:	445a      	add	r2, fp
 800787c:	9209      	str	r2, [sp, #36]	; 0x24
 800787e:	f89a 3000 	ldrb.w	r3, [sl]
 8007882:	2b00      	cmp	r3, #0
 8007884:	f000 80a2 	beq.w	80079cc <_svfiprintf_r+0x1c8>
 8007888:	2300      	movs	r3, #0
 800788a:	f04f 32ff 	mov.w	r2, #4294967295
 800788e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007892:	f10a 0a01 	add.w	sl, sl, #1
 8007896:	9304      	str	r3, [sp, #16]
 8007898:	9307      	str	r3, [sp, #28]
 800789a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800789e:	931a      	str	r3, [sp, #104]	; 0x68
 80078a0:	4654      	mov	r4, sl
 80078a2:	2205      	movs	r2, #5
 80078a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80078a8:	4851      	ldr	r0, [pc, #324]	; (80079f0 <_svfiprintf_r+0x1ec>)
 80078aa:	f7ff facf 	bl	8006e4c <memchr>
 80078ae:	9a04      	ldr	r2, [sp, #16]
 80078b0:	b9d8      	cbnz	r0, 80078ea <_svfiprintf_r+0xe6>
 80078b2:	06d0      	lsls	r0, r2, #27
 80078b4:	bf44      	itt	mi
 80078b6:	2320      	movmi	r3, #32
 80078b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80078bc:	0711      	lsls	r1, r2, #28
 80078be:	bf44      	itt	mi
 80078c0:	232b      	movmi	r3, #43	; 0x2b
 80078c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80078c6:	f89a 3000 	ldrb.w	r3, [sl]
 80078ca:	2b2a      	cmp	r3, #42	; 0x2a
 80078cc:	d015      	beq.n	80078fa <_svfiprintf_r+0xf6>
 80078ce:	4654      	mov	r4, sl
 80078d0:	2000      	movs	r0, #0
 80078d2:	f04f 0c0a 	mov.w	ip, #10
 80078d6:	9a07      	ldr	r2, [sp, #28]
 80078d8:	4621      	mov	r1, r4
 80078da:	f811 3b01 	ldrb.w	r3, [r1], #1
 80078de:	3b30      	subs	r3, #48	; 0x30
 80078e0:	2b09      	cmp	r3, #9
 80078e2:	d94e      	bls.n	8007982 <_svfiprintf_r+0x17e>
 80078e4:	b1b0      	cbz	r0, 8007914 <_svfiprintf_r+0x110>
 80078e6:	9207      	str	r2, [sp, #28]
 80078e8:	e014      	b.n	8007914 <_svfiprintf_r+0x110>
 80078ea:	eba0 0308 	sub.w	r3, r0, r8
 80078ee:	fa09 f303 	lsl.w	r3, r9, r3
 80078f2:	4313      	orrs	r3, r2
 80078f4:	46a2      	mov	sl, r4
 80078f6:	9304      	str	r3, [sp, #16]
 80078f8:	e7d2      	b.n	80078a0 <_svfiprintf_r+0x9c>
 80078fa:	9b03      	ldr	r3, [sp, #12]
 80078fc:	1d19      	adds	r1, r3, #4
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	9103      	str	r1, [sp, #12]
 8007902:	2b00      	cmp	r3, #0
 8007904:	bfbb      	ittet	lt
 8007906:	425b      	neglt	r3, r3
 8007908:	f042 0202 	orrlt.w	r2, r2, #2
 800790c:	9307      	strge	r3, [sp, #28]
 800790e:	9307      	strlt	r3, [sp, #28]
 8007910:	bfb8      	it	lt
 8007912:	9204      	strlt	r2, [sp, #16]
 8007914:	7823      	ldrb	r3, [r4, #0]
 8007916:	2b2e      	cmp	r3, #46	; 0x2e
 8007918:	d10c      	bne.n	8007934 <_svfiprintf_r+0x130>
 800791a:	7863      	ldrb	r3, [r4, #1]
 800791c:	2b2a      	cmp	r3, #42	; 0x2a
 800791e:	d135      	bne.n	800798c <_svfiprintf_r+0x188>
 8007920:	9b03      	ldr	r3, [sp, #12]
 8007922:	3402      	adds	r4, #2
 8007924:	1d1a      	adds	r2, r3, #4
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	9203      	str	r2, [sp, #12]
 800792a:	2b00      	cmp	r3, #0
 800792c:	bfb8      	it	lt
 800792e:	f04f 33ff 	movlt.w	r3, #4294967295
 8007932:	9305      	str	r3, [sp, #20]
 8007934:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 80079f4 <_svfiprintf_r+0x1f0>
 8007938:	2203      	movs	r2, #3
 800793a:	4650      	mov	r0, sl
 800793c:	7821      	ldrb	r1, [r4, #0]
 800793e:	f7ff fa85 	bl	8006e4c <memchr>
 8007942:	b140      	cbz	r0, 8007956 <_svfiprintf_r+0x152>
 8007944:	2340      	movs	r3, #64	; 0x40
 8007946:	eba0 000a 	sub.w	r0, r0, sl
 800794a:	fa03 f000 	lsl.w	r0, r3, r0
 800794e:	9b04      	ldr	r3, [sp, #16]
 8007950:	3401      	adds	r4, #1
 8007952:	4303      	orrs	r3, r0
 8007954:	9304      	str	r3, [sp, #16]
 8007956:	f814 1b01 	ldrb.w	r1, [r4], #1
 800795a:	2206      	movs	r2, #6
 800795c:	4826      	ldr	r0, [pc, #152]	; (80079f8 <_svfiprintf_r+0x1f4>)
 800795e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007962:	f7ff fa73 	bl	8006e4c <memchr>
 8007966:	2800      	cmp	r0, #0
 8007968:	d038      	beq.n	80079dc <_svfiprintf_r+0x1d8>
 800796a:	4b24      	ldr	r3, [pc, #144]	; (80079fc <_svfiprintf_r+0x1f8>)
 800796c:	bb1b      	cbnz	r3, 80079b6 <_svfiprintf_r+0x1b2>
 800796e:	9b03      	ldr	r3, [sp, #12]
 8007970:	3307      	adds	r3, #7
 8007972:	f023 0307 	bic.w	r3, r3, #7
 8007976:	3308      	adds	r3, #8
 8007978:	9303      	str	r3, [sp, #12]
 800797a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800797c:	4433      	add	r3, r6
 800797e:	9309      	str	r3, [sp, #36]	; 0x24
 8007980:	e767      	b.n	8007852 <_svfiprintf_r+0x4e>
 8007982:	460c      	mov	r4, r1
 8007984:	2001      	movs	r0, #1
 8007986:	fb0c 3202 	mla	r2, ip, r2, r3
 800798a:	e7a5      	b.n	80078d8 <_svfiprintf_r+0xd4>
 800798c:	2300      	movs	r3, #0
 800798e:	f04f 0c0a 	mov.w	ip, #10
 8007992:	4619      	mov	r1, r3
 8007994:	3401      	adds	r4, #1
 8007996:	9305      	str	r3, [sp, #20]
 8007998:	4620      	mov	r0, r4
 800799a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800799e:	3a30      	subs	r2, #48	; 0x30
 80079a0:	2a09      	cmp	r2, #9
 80079a2:	d903      	bls.n	80079ac <_svfiprintf_r+0x1a8>
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d0c5      	beq.n	8007934 <_svfiprintf_r+0x130>
 80079a8:	9105      	str	r1, [sp, #20]
 80079aa:	e7c3      	b.n	8007934 <_svfiprintf_r+0x130>
 80079ac:	4604      	mov	r4, r0
 80079ae:	2301      	movs	r3, #1
 80079b0:	fb0c 2101 	mla	r1, ip, r1, r2
 80079b4:	e7f0      	b.n	8007998 <_svfiprintf_r+0x194>
 80079b6:	ab03      	add	r3, sp, #12
 80079b8:	9300      	str	r3, [sp, #0]
 80079ba:	462a      	mov	r2, r5
 80079bc:	4638      	mov	r0, r7
 80079be:	4b10      	ldr	r3, [pc, #64]	; (8007a00 <_svfiprintf_r+0x1fc>)
 80079c0:	a904      	add	r1, sp, #16
 80079c2:	f7fd ffdb 	bl	800597c <_printf_float>
 80079c6:	1c42      	adds	r2, r0, #1
 80079c8:	4606      	mov	r6, r0
 80079ca:	d1d6      	bne.n	800797a <_svfiprintf_r+0x176>
 80079cc:	89ab      	ldrh	r3, [r5, #12]
 80079ce:	065b      	lsls	r3, r3, #25
 80079d0:	f53f af2c 	bmi.w	800782c <_svfiprintf_r+0x28>
 80079d4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80079d6:	b01d      	add	sp, #116	; 0x74
 80079d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80079dc:	ab03      	add	r3, sp, #12
 80079de:	9300      	str	r3, [sp, #0]
 80079e0:	462a      	mov	r2, r5
 80079e2:	4638      	mov	r0, r7
 80079e4:	4b06      	ldr	r3, [pc, #24]	; (8007a00 <_svfiprintf_r+0x1fc>)
 80079e6:	a904      	add	r1, sp, #16
 80079e8:	f7fe fa64 	bl	8005eb4 <_printf_i>
 80079ec:	e7eb      	b.n	80079c6 <_svfiprintf_r+0x1c2>
 80079ee:	bf00      	nop
 80079f0:	08008d64 	.word	0x08008d64
 80079f4:	08008d6a 	.word	0x08008d6a
 80079f8:	08008d6e 	.word	0x08008d6e
 80079fc:	0800597d 	.word	0x0800597d
 8007a00:	0800774d 	.word	0x0800774d

08007a04 <_sbrk_r>:
 8007a04:	b538      	push	{r3, r4, r5, lr}
 8007a06:	2300      	movs	r3, #0
 8007a08:	4d05      	ldr	r5, [pc, #20]	; (8007a20 <_sbrk_r+0x1c>)
 8007a0a:	4604      	mov	r4, r0
 8007a0c:	4608      	mov	r0, r1
 8007a0e:	602b      	str	r3, [r5, #0]
 8007a10:	f7fa f9cc 	bl	8001dac <_sbrk>
 8007a14:	1c43      	adds	r3, r0, #1
 8007a16:	d102      	bne.n	8007a1e <_sbrk_r+0x1a>
 8007a18:	682b      	ldr	r3, [r5, #0]
 8007a1a:	b103      	cbz	r3, 8007a1e <_sbrk_r+0x1a>
 8007a1c:	6023      	str	r3, [r4, #0]
 8007a1e:	bd38      	pop	{r3, r4, r5, pc}
 8007a20:	20001300 	.word	0x20001300

08007a24 <__assert_func>:
 8007a24:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007a26:	4614      	mov	r4, r2
 8007a28:	461a      	mov	r2, r3
 8007a2a:	4b09      	ldr	r3, [pc, #36]	; (8007a50 <__assert_func+0x2c>)
 8007a2c:	4605      	mov	r5, r0
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	68d8      	ldr	r0, [r3, #12]
 8007a32:	b14c      	cbz	r4, 8007a48 <__assert_func+0x24>
 8007a34:	4b07      	ldr	r3, [pc, #28]	; (8007a54 <__assert_func+0x30>)
 8007a36:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007a3a:	9100      	str	r1, [sp, #0]
 8007a3c:	462b      	mov	r3, r5
 8007a3e:	4906      	ldr	r1, [pc, #24]	; (8007a58 <__assert_func+0x34>)
 8007a40:	f000 f80e 	bl	8007a60 <fiprintf>
 8007a44:	f000 faaa 	bl	8007f9c <abort>
 8007a48:	4b04      	ldr	r3, [pc, #16]	; (8007a5c <__assert_func+0x38>)
 8007a4a:	461c      	mov	r4, r3
 8007a4c:	e7f3      	b.n	8007a36 <__assert_func+0x12>
 8007a4e:	bf00      	nop
 8007a50:	20000014 	.word	0x20000014
 8007a54:	08008d75 	.word	0x08008d75
 8007a58:	08008d82 	.word	0x08008d82
 8007a5c:	08008db0 	.word	0x08008db0

08007a60 <fiprintf>:
 8007a60:	b40e      	push	{r1, r2, r3}
 8007a62:	b503      	push	{r0, r1, lr}
 8007a64:	4601      	mov	r1, r0
 8007a66:	ab03      	add	r3, sp, #12
 8007a68:	4805      	ldr	r0, [pc, #20]	; (8007a80 <fiprintf+0x20>)
 8007a6a:	f853 2b04 	ldr.w	r2, [r3], #4
 8007a6e:	6800      	ldr	r0, [r0, #0]
 8007a70:	9301      	str	r3, [sp, #4]
 8007a72:	f000 f895 	bl	8007ba0 <_vfiprintf_r>
 8007a76:	b002      	add	sp, #8
 8007a78:	f85d eb04 	ldr.w	lr, [sp], #4
 8007a7c:	b003      	add	sp, #12
 8007a7e:	4770      	bx	lr
 8007a80:	20000014 	.word	0x20000014

08007a84 <__ascii_mbtowc>:
 8007a84:	b082      	sub	sp, #8
 8007a86:	b901      	cbnz	r1, 8007a8a <__ascii_mbtowc+0x6>
 8007a88:	a901      	add	r1, sp, #4
 8007a8a:	b142      	cbz	r2, 8007a9e <__ascii_mbtowc+0x1a>
 8007a8c:	b14b      	cbz	r3, 8007aa2 <__ascii_mbtowc+0x1e>
 8007a8e:	7813      	ldrb	r3, [r2, #0]
 8007a90:	600b      	str	r3, [r1, #0]
 8007a92:	7812      	ldrb	r2, [r2, #0]
 8007a94:	1e10      	subs	r0, r2, #0
 8007a96:	bf18      	it	ne
 8007a98:	2001      	movne	r0, #1
 8007a9a:	b002      	add	sp, #8
 8007a9c:	4770      	bx	lr
 8007a9e:	4610      	mov	r0, r2
 8007aa0:	e7fb      	b.n	8007a9a <__ascii_mbtowc+0x16>
 8007aa2:	f06f 0001 	mvn.w	r0, #1
 8007aa6:	e7f8      	b.n	8007a9a <__ascii_mbtowc+0x16>

08007aa8 <memmove>:
 8007aa8:	4288      	cmp	r0, r1
 8007aaa:	b510      	push	{r4, lr}
 8007aac:	eb01 0402 	add.w	r4, r1, r2
 8007ab0:	d902      	bls.n	8007ab8 <memmove+0x10>
 8007ab2:	4284      	cmp	r4, r0
 8007ab4:	4623      	mov	r3, r4
 8007ab6:	d807      	bhi.n	8007ac8 <memmove+0x20>
 8007ab8:	1e43      	subs	r3, r0, #1
 8007aba:	42a1      	cmp	r1, r4
 8007abc:	d008      	beq.n	8007ad0 <memmove+0x28>
 8007abe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007ac2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007ac6:	e7f8      	b.n	8007aba <memmove+0x12>
 8007ac8:	4601      	mov	r1, r0
 8007aca:	4402      	add	r2, r0
 8007acc:	428a      	cmp	r2, r1
 8007ace:	d100      	bne.n	8007ad2 <memmove+0x2a>
 8007ad0:	bd10      	pop	{r4, pc}
 8007ad2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007ad6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007ada:	e7f7      	b.n	8007acc <memmove+0x24>

08007adc <__malloc_lock>:
 8007adc:	4801      	ldr	r0, [pc, #4]	; (8007ae4 <__malloc_lock+0x8>)
 8007ade:	f000 bc19 	b.w	8008314 <__retarget_lock_acquire_recursive>
 8007ae2:	bf00      	nop
 8007ae4:	20001304 	.word	0x20001304

08007ae8 <__malloc_unlock>:
 8007ae8:	4801      	ldr	r0, [pc, #4]	; (8007af0 <__malloc_unlock+0x8>)
 8007aea:	f000 bc14 	b.w	8008316 <__retarget_lock_release_recursive>
 8007aee:	bf00      	nop
 8007af0:	20001304 	.word	0x20001304

08007af4 <_realloc_r>:
 8007af4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007af8:	4680      	mov	r8, r0
 8007afa:	4614      	mov	r4, r2
 8007afc:	460e      	mov	r6, r1
 8007afe:	b921      	cbnz	r1, 8007b0a <_realloc_r+0x16>
 8007b00:	4611      	mov	r1, r2
 8007b02:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007b06:	f7ff bdad 	b.w	8007664 <_malloc_r>
 8007b0a:	b92a      	cbnz	r2, 8007b18 <_realloc_r+0x24>
 8007b0c:	f7ff fd42 	bl	8007594 <_free_r>
 8007b10:	4625      	mov	r5, r4
 8007b12:	4628      	mov	r0, r5
 8007b14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007b18:	f000 fc64 	bl	80083e4 <_malloc_usable_size_r>
 8007b1c:	4284      	cmp	r4, r0
 8007b1e:	4607      	mov	r7, r0
 8007b20:	d802      	bhi.n	8007b28 <_realloc_r+0x34>
 8007b22:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007b26:	d812      	bhi.n	8007b4e <_realloc_r+0x5a>
 8007b28:	4621      	mov	r1, r4
 8007b2a:	4640      	mov	r0, r8
 8007b2c:	f7ff fd9a 	bl	8007664 <_malloc_r>
 8007b30:	4605      	mov	r5, r0
 8007b32:	2800      	cmp	r0, #0
 8007b34:	d0ed      	beq.n	8007b12 <_realloc_r+0x1e>
 8007b36:	42bc      	cmp	r4, r7
 8007b38:	4622      	mov	r2, r4
 8007b3a:	4631      	mov	r1, r6
 8007b3c:	bf28      	it	cs
 8007b3e:	463a      	movcs	r2, r7
 8007b40:	f7fd fe68 	bl	8005814 <memcpy>
 8007b44:	4631      	mov	r1, r6
 8007b46:	4640      	mov	r0, r8
 8007b48:	f7ff fd24 	bl	8007594 <_free_r>
 8007b4c:	e7e1      	b.n	8007b12 <_realloc_r+0x1e>
 8007b4e:	4635      	mov	r5, r6
 8007b50:	e7df      	b.n	8007b12 <_realloc_r+0x1e>

08007b52 <__sfputc_r>:
 8007b52:	6893      	ldr	r3, [r2, #8]
 8007b54:	b410      	push	{r4}
 8007b56:	3b01      	subs	r3, #1
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	6093      	str	r3, [r2, #8]
 8007b5c:	da07      	bge.n	8007b6e <__sfputc_r+0x1c>
 8007b5e:	6994      	ldr	r4, [r2, #24]
 8007b60:	42a3      	cmp	r3, r4
 8007b62:	db01      	blt.n	8007b68 <__sfputc_r+0x16>
 8007b64:	290a      	cmp	r1, #10
 8007b66:	d102      	bne.n	8007b6e <__sfputc_r+0x1c>
 8007b68:	bc10      	pop	{r4}
 8007b6a:	f000 b949 	b.w	8007e00 <__swbuf_r>
 8007b6e:	6813      	ldr	r3, [r2, #0]
 8007b70:	1c58      	adds	r0, r3, #1
 8007b72:	6010      	str	r0, [r2, #0]
 8007b74:	7019      	strb	r1, [r3, #0]
 8007b76:	4608      	mov	r0, r1
 8007b78:	bc10      	pop	{r4}
 8007b7a:	4770      	bx	lr

08007b7c <__sfputs_r>:
 8007b7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b7e:	4606      	mov	r6, r0
 8007b80:	460f      	mov	r7, r1
 8007b82:	4614      	mov	r4, r2
 8007b84:	18d5      	adds	r5, r2, r3
 8007b86:	42ac      	cmp	r4, r5
 8007b88:	d101      	bne.n	8007b8e <__sfputs_r+0x12>
 8007b8a:	2000      	movs	r0, #0
 8007b8c:	e007      	b.n	8007b9e <__sfputs_r+0x22>
 8007b8e:	463a      	mov	r2, r7
 8007b90:	4630      	mov	r0, r6
 8007b92:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007b96:	f7ff ffdc 	bl	8007b52 <__sfputc_r>
 8007b9a:	1c43      	adds	r3, r0, #1
 8007b9c:	d1f3      	bne.n	8007b86 <__sfputs_r+0xa>
 8007b9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007ba0 <_vfiprintf_r>:
 8007ba0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ba4:	460d      	mov	r5, r1
 8007ba6:	4614      	mov	r4, r2
 8007ba8:	4698      	mov	r8, r3
 8007baa:	4606      	mov	r6, r0
 8007bac:	b09d      	sub	sp, #116	; 0x74
 8007bae:	b118      	cbz	r0, 8007bb8 <_vfiprintf_r+0x18>
 8007bb0:	6983      	ldr	r3, [r0, #24]
 8007bb2:	b90b      	cbnz	r3, 8007bb8 <_vfiprintf_r+0x18>
 8007bb4:	f000 fb10 	bl	80081d8 <__sinit>
 8007bb8:	4b89      	ldr	r3, [pc, #548]	; (8007de0 <_vfiprintf_r+0x240>)
 8007bba:	429d      	cmp	r5, r3
 8007bbc:	d11b      	bne.n	8007bf6 <_vfiprintf_r+0x56>
 8007bbe:	6875      	ldr	r5, [r6, #4]
 8007bc0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007bc2:	07d9      	lsls	r1, r3, #31
 8007bc4:	d405      	bmi.n	8007bd2 <_vfiprintf_r+0x32>
 8007bc6:	89ab      	ldrh	r3, [r5, #12]
 8007bc8:	059a      	lsls	r2, r3, #22
 8007bca:	d402      	bmi.n	8007bd2 <_vfiprintf_r+0x32>
 8007bcc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007bce:	f000 fba1 	bl	8008314 <__retarget_lock_acquire_recursive>
 8007bd2:	89ab      	ldrh	r3, [r5, #12]
 8007bd4:	071b      	lsls	r3, r3, #28
 8007bd6:	d501      	bpl.n	8007bdc <_vfiprintf_r+0x3c>
 8007bd8:	692b      	ldr	r3, [r5, #16]
 8007bda:	b9eb      	cbnz	r3, 8007c18 <_vfiprintf_r+0x78>
 8007bdc:	4629      	mov	r1, r5
 8007bde:	4630      	mov	r0, r6
 8007be0:	f000 f96e 	bl	8007ec0 <__swsetup_r>
 8007be4:	b1c0      	cbz	r0, 8007c18 <_vfiprintf_r+0x78>
 8007be6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007be8:	07dc      	lsls	r4, r3, #31
 8007bea:	d50e      	bpl.n	8007c0a <_vfiprintf_r+0x6a>
 8007bec:	f04f 30ff 	mov.w	r0, #4294967295
 8007bf0:	b01d      	add	sp, #116	; 0x74
 8007bf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007bf6:	4b7b      	ldr	r3, [pc, #492]	; (8007de4 <_vfiprintf_r+0x244>)
 8007bf8:	429d      	cmp	r5, r3
 8007bfa:	d101      	bne.n	8007c00 <_vfiprintf_r+0x60>
 8007bfc:	68b5      	ldr	r5, [r6, #8]
 8007bfe:	e7df      	b.n	8007bc0 <_vfiprintf_r+0x20>
 8007c00:	4b79      	ldr	r3, [pc, #484]	; (8007de8 <_vfiprintf_r+0x248>)
 8007c02:	429d      	cmp	r5, r3
 8007c04:	bf08      	it	eq
 8007c06:	68f5      	ldreq	r5, [r6, #12]
 8007c08:	e7da      	b.n	8007bc0 <_vfiprintf_r+0x20>
 8007c0a:	89ab      	ldrh	r3, [r5, #12]
 8007c0c:	0598      	lsls	r0, r3, #22
 8007c0e:	d4ed      	bmi.n	8007bec <_vfiprintf_r+0x4c>
 8007c10:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007c12:	f000 fb80 	bl	8008316 <__retarget_lock_release_recursive>
 8007c16:	e7e9      	b.n	8007bec <_vfiprintf_r+0x4c>
 8007c18:	2300      	movs	r3, #0
 8007c1a:	9309      	str	r3, [sp, #36]	; 0x24
 8007c1c:	2320      	movs	r3, #32
 8007c1e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007c22:	2330      	movs	r3, #48	; 0x30
 8007c24:	f04f 0901 	mov.w	r9, #1
 8007c28:	f8cd 800c 	str.w	r8, [sp, #12]
 8007c2c:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8007dec <_vfiprintf_r+0x24c>
 8007c30:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007c34:	4623      	mov	r3, r4
 8007c36:	469a      	mov	sl, r3
 8007c38:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007c3c:	b10a      	cbz	r2, 8007c42 <_vfiprintf_r+0xa2>
 8007c3e:	2a25      	cmp	r2, #37	; 0x25
 8007c40:	d1f9      	bne.n	8007c36 <_vfiprintf_r+0x96>
 8007c42:	ebba 0b04 	subs.w	fp, sl, r4
 8007c46:	d00b      	beq.n	8007c60 <_vfiprintf_r+0xc0>
 8007c48:	465b      	mov	r3, fp
 8007c4a:	4622      	mov	r2, r4
 8007c4c:	4629      	mov	r1, r5
 8007c4e:	4630      	mov	r0, r6
 8007c50:	f7ff ff94 	bl	8007b7c <__sfputs_r>
 8007c54:	3001      	adds	r0, #1
 8007c56:	f000 80aa 	beq.w	8007dae <_vfiprintf_r+0x20e>
 8007c5a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007c5c:	445a      	add	r2, fp
 8007c5e:	9209      	str	r2, [sp, #36]	; 0x24
 8007c60:	f89a 3000 	ldrb.w	r3, [sl]
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	f000 80a2 	beq.w	8007dae <_vfiprintf_r+0x20e>
 8007c6a:	2300      	movs	r3, #0
 8007c6c:	f04f 32ff 	mov.w	r2, #4294967295
 8007c70:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007c74:	f10a 0a01 	add.w	sl, sl, #1
 8007c78:	9304      	str	r3, [sp, #16]
 8007c7a:	9307      	str	r3, [sp, #28]
 8007c7c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007c80:	931a      	str	r3, [sp, #104]	; 0x68
 8007c82:	4654      	mov	r4, sl
 8007c84:	2205      	movs	r2, #5
 8007c86:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007c8a:	4858      	ldr	r0, [pc, #352]	; (8007dec <_vfiprintf_r+0x24c>)
 8007c8c:	f7ff f8de 	bl	8006e4c <memchr>
 8007c90:	9a04      	ldr	r2, [sp, #16]
 8007c92:	b9d8      	cbnz	r0, 8007ccc <_vfiprintf_r+0x12c>
 8007c94:	06d1      	lsls	r1, r2, #27
 8007c96:	bf44      	itt	mi
 8007c98:	2320      	movmi	r3, #32
 8007c9a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007c9e:	0713      	lsls	r3, r2, #28
 8007ca0:	bf44      	itt	mi
 8007ca2:	232b      	movmi	r3, #43	; 0x2b
 8007ca4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007ca8:	f89a 3000 	ldrb.w	r3, [sl]
 8007cac:	2b2a      	cmp	r3, #42	; 0x2a
 8007cae:	d015      	beq.n	8007cdc <_vfiprintf_r+0x13c>
 8007cb0:	4654      	mov	r4, sl
 8007cb2:	2000      	movs	r0, #0
 8007cb4:	f04f 0c0a 	mov.w	ip, #10
 8007cb8:	9a07      	ldr	r2, [sp, #28]
 8007cba:	4621      	mov	r1, r4
 8007cbc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007cc0:	3b30      	subs	r3, #48	; 0x30
 8007cc2:	2b09      	cmp	r3, #9
 8007cc4:	d94e      	bls.n	8007d64 <_vfiprintf_r+0x1c4>
 8007cc6:	b1b0      	cbz	r0, 8007cf6 <_vfiprintf_r+0x156>
 8007cc8:	9207      	str	r2, [sp, #28]
 8007cca:	e014      	b.n	8007cf6 <_vfiprintf_r+0x156>
 8007ccc:	eba0 0308 	sub.w	r3, r0, r8
 8007cd0:	fa09 f303 	lsl.w	r3, r9, r3
 8007cd4:	4313      	orrs	r3, r2
 8007cd6:	46a2      	mov	sl, r4
 8007cd8:	9304      	str	r3, [sp, #16]
 8007cda:	e7d2      	b.n	8007c82 <_vfiprintf_r+0xe2>
 8007cdc:	9b03      	ldr	r3, [sp, #12]
 8007cde:	1d19      	adds	r1, r3, #4
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	9103      	str	r1, [sp, #12]
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	bfbb      	ittet	lt
 8007ce8:	425b      	neglt	r3, r3
 8007cea:	f042 0202 	orrlt.w	r2, r2, #2
 8007cee:	9307      	strge	r3, [sp, #28]
 8007cf0:	9307      	strlt	r3, [sp, #28]
 8007cf2:	bfb8      	it	lt
 8007cf4:	9204      	strlt	r2, [sp, #16]
 8007cf6:	7823      	ldrb	r3, [r4, #0]
 8007cf8:	2b2e      	cmp	r3, #46	; 0x2e
 8007cfa:	d10c      	bne.n	8007d16 <_vfiprintf_r+0x176>
 8007cfc:	7863      	ldrb	r3, [r4, #1]
 8007cfe:	2b2a      	cmp	r3, #42	; 0x2a
 8007d00:	d135      	bne.n	8007d6e <_vfiprintf_r+0x1ce>
 8007d02:	9b03      	ldr	r3, [sp, #12]
 8007d04:	3402      	adds	r4, #2
 8007d06:	1d1a      	adds	r2, r3, #4
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	9203      	str	r2, [sp, #12]
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	bfb8      	it	lt
 8007d10:	f04f 33ff 	movlt.w	r3, #4294967295
 8007d14:	9305      	str	r3, [sp, #20]
 8007d16:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8007df0 <_vfiprintf_r+0x250>
 8007d1a:	2203      	movs	r2, #3
 8007d1c:	4650      	mov	r0, sl
 8007d1e:	7821      	ldrb	r1, [r4, #0]
 8007d20:	f7ff f894 	bl	8006e4c <memchr>
 8007d24:	b140      	cbz	r0, 8007d38 <_vfiprintf_r+0x198>
 8007d26:	2340      	movs	r3, #64	; 0x40
 8007d28:	eba0 000a 	sub.w	r0, r0, sl
 8007d2c:	fa03 f000 	lsl.w	r0, r3, r0
 8007d30:	9b04      	ldr	r3, [sp, #16]
 8007d32:	3401      	adds	r4, #1
 8007d34:	4303      	orrs	r3, r0
 8007d36:	9304      	str	r3, [sp, #16]
 8007d38:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007d3c:	2206      	movs	r2, #6
 8007d3e:	482d      	ldr	r0, [pc, #180]	; (8007df4 <_vfiprintf_r+0x254>)
 8007d40:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007d44:	f7ff f882 	bl	8006e4c <memchr>
 8007d48:	2800      	cmp	r0, #0
 8007d4a:	d03f      	beq.n	8007dcc <_vfiprintf_r+0x22c>
 8007d4c:	4b2a      	ldr	r3, [pc, #168]	; (8007df8 <_vfiprintf_r+0x258>)
 8007d4e:	bb1b      	cbnz	r3, 8007d98 <_vfiprintf_r+0x1f8>
 8007d50:	9b03      	ldr	r3, [sp, #12]
 8007d52:	3307      	adds	r3, #7
 8007d54:	f023 0307 	bic.w	r3, r3, #7
 8007d58:	3308      	adds	r3, #8
 8007d5a:	9303      	str	r3, [sp, #12]
 8007d5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d5e:	443b      	add	r3, r7
 8007d60:	9309      	str	r3, [sp, #36]	; 0x24
 8007d62:	e767      	b.n	8007c34 <_vfiprintf_r+0x94>
 8007d64:	460c      	mov	r4, r1
 8007d66:	2001      	movs	r0, #1
 8007d68:	fb0c 3202 	mla	r2, ip, r2, r3
 8007d6c:	e7a5      	b.n	8007cba <_vfiprintf_r+0x11a>
 8007d6e:	2300      	movs	r3, #0
 8007d70:	f04f 0c0a 	mov.w	ip, #10
 8007d74:	4619      	mov	r1, r3
 8007d76:	3401      	adds	r4, #1
 8007d78:	9305      	str	r3, [sp, #20]
 8007d7a:	4620      	mov	r0, r4
 8007d7c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007d80:	3a30      	subs	r2, #48	; 0x30
 8007d82:	2a09      	cmp	r2, #9
 8007d84:	d903      	bls.n	8007d8e <_vfiprintf_r+0x1ee>
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d0c5      	beq.n	8007d16 <_vfiprintf_r+0x176>
 8007d8a:	9105      	str	r1, [sp, #20]
 8007d8c:	e7c3      	b.n	8007d16 <_vfiprintf_r+0x176>
 8007d8e:	4604      	mov	r4, r0
 8007d90:	2301      	movs	r3, #1
 8007d92:	fb0c 2101 	mla	r1, ip, r1, r2
 8007d96:	e7f0      	b.n	8007d7a <_vfiprintf_r+0x1da>
 8007d98:	ab03      	add	r3, sp, #12
 8007d9a:	9300      	str	r3, [sp, #0]
 8007d9c:	462a      	mov	r2, r5
 8007d9e:	4630      	mov	r0, r6
 8007da0:	4b16      	ldr	r3, [pc, #88]	; (8007dfc <_vfiprintf_r+0x25c>)
 8007da2:	a904      	add	r1, sp, #16
 8007da4:	f7fd fdea 	bl	800597c <_printf_float>
 8007da8:	4607      	mov	r7, r0
 8007daa:	1c78      	adds	r0, r7, #1
 8007dac:	d1d6      	bne.n	8007d5c <_vfiprintf_r+0x1bc>
 8007dae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007db0:	07d9      	lsls	r1, r3, #31
 8007db2:	d405      	bmi.n	8007dc0 <_vfiprintf_r+0x220>
 8007db4:	89ab      	ldrh	r3, [r5, #12]
 8007db6:	059a      	lsls	r2, r3, #22
 8007db8:	d402      	bmi.n	8007dc0 <_vfiprintf_r+0x220>
 8007dba:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007dbc:	f000 faab 	bl	8008316 <__retarget_lock_release_recursive>
 8007dc0:	89ab      	ldrh	r3, [r5, #12]
 8007dc2:	065b      	lsls	r3, r3, #25
 8007dc4:	f53f af12 	bmi.w	8007bec <_vfiprintf_r+0x4c>
 8007dc8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007dca:	e711      	b.n	8007bf0 <_vfiprintf_r+0x50>
 8007dcc:	ab03      	add	r3, sp, #12
 8007dce:	9300      	str	r3, [sp, #0]
 8007dd0:	462a      	mov	r2, r5
 8007dd2:	4630      	mov	r0, r6
 8007dd4:	4b09      	ldr	r3, [pc, #36]	; (8007dfc <_vfiprintf_r+0x25c>)
 8007dd6:	a904      	add	r1, sp, #16
 8007dd8:	f7fe f86c 	bl	8005eb4 <_printf_i>
 8007ddc:	e7e4      	b.n	8007da8 <_vfiprintf_r+0x208>
 8007dde:	bf00      	nop
 8007de0:	08008edc 	.word	0x08008edc
 8007de4:	08008efc 	.word	0x08008efc
 8007de8:	08008ebc 	.word	0x08008ebc
 8007dec:	08008d64 	.word	0x08008d64
 8007df0:	08008d6a 	.word	0x08008d6a
 8007df4:	08008d6e 	.word	0x08008d6e
 8007df8:	0800597d 	.word	0x0800597d
 8007dfc:	08007b7d 	.word	0x08007b7d

08007e00 <__swbuf_r>:
 8007e00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e02:	460e      	mov	r6, r1
 8007e04:	4614      	mov	r4, r2
 8007e06:	4605      	mov	r5, r0
 8007e08:	b118      	cbz	r0, 8007e12 <__swbuf_r+0x12>
 8007e0a:	6983      	ldr	r3, [r0, #24]
 8007e0c:	b90b      	cbnz	r3, 8007e12 <__swbuf_r+0x12>
 8007e0e:	f000 f9e3 	bl	80081d8 <__sinit>
 8007e12:	4b21      	ldr	r3, [pc, #132]	; (8007e98 <__swbuf_r+0x98>)
 8007e14:	429c      	cmp	r4, r3
 8007e16:	d12b      	bne.n	8007e70 <__swbuf_r+0x70>
 8007e18:	686c      	ldr	r4, [r5, #4]
 8007e1a:	69a3      	ldr	r3, [r4, #24]
 8007e1c:	60a3      	str	r3, [r4, #8]
 8007e1e:	89a3      	ldrh	r3, [r4, #12]
 8007e20:	071a      	lsls	r2, r3, #28
 8007e22:	d52f      	bpl.n	8007e84 <__swbuf_r+0x84>
 8007e24:	6923      	ldr	r3, [r4, #16]
 8007e26:	b36b      	cbz	r3, 8007e84 <__swbuf_r+0x84>
 8007e28:	6923      	ldr	r3, [r4, #16]
 8007e2a:	6820      	ldr	r0, [r4, #0]
 8007e2c:	b2f6      	uxtb	r6, r6
 8007e2e:	1ac0      	subs	r0, r0, r3
 8007e30:	6963      	ldr	r3, [r4, #20]
 8007e32:	4637      	mov	r7, r6
 8007e34:	4283      	cmp	r3, r0
 8007e36:	dc04      	bgt.n	8007e42 <__swbuf_r+0x42>
 8007e38:	4621      	mov	r1, r4
 8007e3a:	4628      	mov	r0, r5
 8007e3c:	f000 f938 	bl	80080b0 <_fflush_r>
 8007e40:	bb30      	cbnz	r0, 8007e90 <__swbuf_r+0x90>
 8007e42:	68a3      	ldr	r3, [r4, #8]
 8007e44:	3001      	adds	r0, #1
 8007e46:	3b01      	subs	r3, #1
 8007e48:	60a3      	str	r3, [r4, #8]
 8007e4a:	6823      	ldr	r3, [r4, #0]
 8007e4c:	1c5a      	adds	r2, r3, #1
 8007e4e:	6022      	str	r2, [r4, #0]
 8007e50:	701e      	strb	r6, [r3, #0]
 8007e52:	6963      	ldr	r3, [r4, #20]
 8007e54:	4283      	cmp	r3, r0
 8007e56:	d004      	beq.n	8007e62 <__swbuf_r+0x62>
 8007e58:	89a3      	ldrh	r3, [r4, #12]
 8007e5a:	07db      	lsls	r3, r3, #31
 8007e5c:	d506      	bpl.n	8007e6c <__swbuf_r+0x6c>
 8007e5e:	2e0a      	cmp	r6, #10
 8007e60:	d104      	bne.n	8007e6c <__swbuf_r+0x6c>
 8007e62:	4621      	mov	r1, r4
 8007e64:	4628      	mov	r0, r5
 8007e66:	f000 f923 	bl	80080b0 <_fflush_r>
 8007e6a:	b988      	cbnz	r0, 8007e90 <__swbuf_r+0x90>
 8007e6c:	4638      	mov	r0, r7
 8007e6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007e70:	4b0a      	ldr	r3, [pc, #40]	; (8007e9c <__swbuf_r+0x9c>)
 8007e72:	429c      	cmp	r4, r3
 8007e74:	d101      	bne.n	8007e7a <__swbuf_r+0x7a>
 8007e76:	68ac      	ldr	r4, [r5, #8]
 8007e78:	e7cf      	b.n	8007e1a <__swbuf_r+0x1a>
 8007e7a:	4b09      	ldr	r3, [pc, #36]	; (8007ea0 <__swbuf_r+0xa0>)
 8007e7c:	429c      	cmp	r4, r3
 8007e7e:	bf08      	it	eq
 8007e80:	68ec      	ldreq	r4, [r5, #12]
 8007e82:	e7ca      	b.n	8007e1a <__swbuf_r+0x1a>
 8007e84:	4621      	mov	r1, r4
 8007e86:	4628      	mov	r0, r5
 8007e88:	f000 f81a 	bl	8007ec0 <__swsetup_r>
 8007e8c:	2800      	cmp	r0, #0
 8007e8e:	d0cb      	beq.n	8007e28 <__swbuf_r+0x28>
 8007e90:	f04f 37ff 	mov.w	r7, #4294967295
 8007e94:	e7ea      	b.n	8007e6c <__swbuf_r+0x6c>
 8007e96:	bf00      	nop
 8007e98:	08008edc 	.word	0x08008edc
 8007e9c:	08008efc 	.word	0x08008efc
 8007ea0:	08008ebc 	.word	0x08008ebc

08007ea4 <__ascii_wctomb>:
 8007ea4:	4603      	mov	r3, r0
 8007ea6:	4608      	mov	r0, r1
 8007ea8:	b141      	cbz	r1, 8007ebc <__ascii_wctomb+0x18>
 8007eaa:	2aff      	cmp	r2, #255	; 0xff
 8007eac:	d904      	bls.n	8007eb8 <__ascii_wctomb+0x14>
 8007eae:	228a      	movs	r2, #138	; 0x8a
 8007eb0:	f04f 30ff 	mov.w	r0, #4294967295
 8007eb4:	601a      	str	r2, [r3, #0]
 8007eb6:	4770      	bx	lr
 8007eb8:	2001      	movs	r0, #1
 8007eba:	700a      	strb	r2, [r1, #0]
 8007ebc:	4770      	bx	lr
	...

08007ec0 <__swsetup_r>:
 8007ec0:	4b32      	ldr	r3, [pc, #200]	; (8007f8c <__swsetup_r+0xcc>)
 8007ec2:	b570      	push	{r4, r5, r6, lr}
 8007ec4:	681d      	ldr	r5, [r3, #0]
 8007ec6:	4606      	mov	r6, r0
 8007ec8:	460c      	mov	r4, r1
 8007eca:	b125      	cbz	r5, 8007ed6 <__swsetup_r+0x16>
 8007ecc:	69ab      	ldr	r3, [r5, #24]
 8007ece:	b913      	cbnz	r3, 8007ed6 <__swsetup_r+0x16>
 8007ed0:	4628      	mov	r0, r5
 8007ed2:	f000 f981 	bl	80081d8 <__sinit>
 8007ed6:	4b2e      	ldr	r3, [pc, #184]	; (8007f90 <__swsetup_r+0xd0>)
 8007ed8:	429c      	cmp	r4, r3
 8007eda:	d10f      	bne.n	8007efc <__swsetup_r+0x3c>
 8007edc:	686c      	ldr	r4, [r5, #4]
 8007ede:	89a3      	ldrh	r3, [r4, #12]
 8007ee0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007ee4:	0719      	lsls	r1, r3, #28
 8007ee6:	d42c      	bmi.n	8007f42 <__swsetup_r+0x82>
 8007ee8:	06dd      	lsls	r5, r3, #27
 8007eea:	d411      	bmi.n	8007f10 <__swsetup_r+0x50>
 8007eec:	2309      	movs	r3, #9
 8007eee:	6033      	str	r3, [r6, #0]
 8007ef0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007ef4:	f04f 30ff 	mov.w	r0, #4294967295
 8007ef8:	81a3      	strh	r3, [r4, #12]
 8007efa:	e03e      	b.n	8007f7a <__swsetup_r+0xba>
 8007efc:	4b25      	ldr	r3, [pc, #148]	; (8007f94 <__swsetup_r+0xd4>)
 8007efe:	429c      	cmp	r4, r3
 8007f00:	d101      	bne.n	8007f06 <__swsetup_r+0x46>
 8007f02:	68ac      	ldr	r4, [r5, #8]
 8007f04:	e7eb      	b.n	8007ede <__swsetup_r+0x1e>
 8007f06:	4b24      	ldr	r3, [pc, #144]	; (8007f98 <__swsetup_r+0xd8>)
 8007f08:	429c      	cmp	r4, r3
 8007f0a:	bf08      	it	eq
 8007f0c:	68ec      	ldreq	r4, [r5, #12]
 8007f0e:	e7e6      	b.n	8007ede <__swsetup_r+0x1e>
 8007f10:	0758      	lsls	r0, r3, #29
 8007f12:	d512      	bpl.n	8007f3a <__swsetup_r+0x7a>
 8007f14:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007f16:	b141      	cbz	r1, 8007f2a <__swsetup_r+0x6a>
 8007f18:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007f1c:	4299      	cmp	r1, r3
 8007f1e:	d002      	beq.n	8007f26 <__swsetup_r+0x66>
 8007f20:	4630      	mov	r0, r6
 8007f22:	f7ff fb37 	bl	8007594 <_free_r>
 8007f26:	2300      	movs	r3, #0
 8007f28:	6363      	str	r3, [r4, #52]	; 0x34
 8007f2a:	89a3      	ldrh	r3, [r4, #12]
 8007f2c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007f30:	81a3      	strh	r3, [r4, #12]
 8007f32:	2300      	movs	r3, #0
 8007f34:	6063      	str	r3, [r4, #4]
 8007f36:	6923      	ldr	r3, [r4, #16]
 8007f38:	6023      	str	r3, [r4, #0]
 8007f3a:	89a3      	ldrh	r3, [r4, #12]
 8007f3c:	f043 0308 	orr.w	r3, r3, #8
 8007f40:	81a3      	strh	r3, [r4, #12]
 8007f42:	6923      	ldr	r3, [r4, #16]
 8007f44:	b94b      	cbnz	r3, 8007f5a <__swsetup_r+0x9a>
 8007f46:	89a3      	ldrh	r3, [r4, #12]
 8007f48:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007f4c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007f50:	d003      	beq.n	8007f5a <__swsetup_r+0x9a>
 8007f52:	4621      	mov	r1, r4
 8007f54:	4630      	mov	r0, r6
 8007f56:	f000 fa05 	bl	8008364 <__smakebuf_r>
 8007f5a:	89a0      	ldrh	r0, [r4, #12]
 8007f5c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007f60:	f010 0301 	ands.w	r3, r0, #1
 8007f64:	d00a      	beq.n	8007f7c <__swsetup_r+0xbc>
 8007f66:	2300      	movs	r3, #0
 8007f68:	60a3      	str	r3, [r4, #8]
 8007f6a:	6963      	ldr	r3, [r4, #20]
 8007f6c:	425b      	negs	r3, r3
 8007f6e:	61a3      	str	r3, [r4, #24]
 8007f70:	6923      	ldr	r3, [r4, #16]
 8007f72:	b943      	cbnz	r3, 8007f86 <__swsetup_r+0xc6>
 8007f74:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007f78:	d1ba      	bne.n	8007ef0 <__swsetup_r+0x30>
 8007f7a:	bd70      	pop	{r4, r5, r6, pc}
 8007f7c:	0781      	lsls	r1, r0, #30
 8007f7e:	bf58      	it	pl
 8007f80:	6963      	ldrpl	r3, [r4, #20]
 8007f82:	60a3      	str	r3, [r4, #8]
 8007f84:	e7f4      	b.n	8007f70 <__swsetup_r+0xb0>
 8007f86:	2000      	movs	r0, #0
 8007f88:	e7f7      	b.n	8007f7a <__swsetup_r+0xba>
 8007f8a:	bf00      	nop
 8007f8c:	20000014 	.word	0x20000014
 8007f90:	08008edc 	.word	0x08008edc
 8007f94:	08008efc 	.word	0x08008efc
 8007f98:	08008ebc 	.word	0x08008ebc

08007f9c <abort>:
 8007f9c:	2006      	movs	r0, #6
 8007f9e:	b508      	push	{r3, lr}
 8007fa0:	f000 fa50 	bl	8008444 <raise>
 8007fa4:	2001      	movs	r0, #1
 8007fa6:	f7f9 feaa 	bl	8001cfe <_exit>
	...

08007fac <__sflush_r>:
 8007fac:	898a      	ldrh	r2, [r1, #12]
 8007fae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007fb0:	4605      	mov	r5, r0
 8007fb2:	0710      	lsls	r0, r2, #28
 8007fb4:	460c      	mov	r4, r1
 8007fb6:	d457      	bmi.n	8008068 <__sflush_r+0xbc>
 8007fb8:	684b      	ldr	r3, [r1, #4]
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	dc04      	bgt.n	8007fc8 <__sflush_r+0x1c>
 8007fbe:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	dc01      	bgt.n	8007fc8 <__sflush_r+0x1c>
 8007fc4:	2000      	movs	r0, #0
 8007fc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007fc8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007fca:	2e00      	cmp	r6, #0
 8007fcc:	d0fa      	beq.n	8007fc4 <__sflush_r+0x18>
 8007fce:	2300      	movs	r3, #0
 8007fd0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007fd4:	682f      	ldr	r7, [r5, #0]
 8007fd6:	602b      	str	r3, [r5, #0]
 8007fd8:	d032      	beq.n	8008040 <__sflush_r+0x94>
 8007fda:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007fdc:	89a3      	ldrh	r3, [r4, #12]
 8007fde:	075a      	lsls	r2, r3, #29
 8007fe0:	d505      	bpl.n	8007fee <__sflush_r+0x42>
 8007fe2:	6863      	ldr	r3, [r4, #4]
 8007fe4:	1ac0      	subs	r0, r0, r3
 8007fe6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007fe8:	b10b      	cbz	r3, 8007fee <__sflush_r+0x42>
 8007fea:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007fec:	1ac0      	subs	r0, r0, r3
 8007fee:	2300      	movs	r3, #0
 8007ff0:	4602      	mov	r2, r0
 8007ff2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007ff4:	4628      	mov	r0, r5
 8007ff6:	6a21      	ldr	r1, [r4, #32]
 8007ff8:	47b0      	blx	r6
 8007ffa:	1c43      	adds	r3, r0, #1
 8007ffc:	89a3      	ldrh	r3, [r4, #12]
 8007ffe:	d106      	bne.n	800800e <__sflush_r+0x62>
 8008000:	6829      	ldr	r1, [r5, #0]
 8008002:	291d      	cmp	r1, #29
 8008004:	d82c      	bhi.n	8008060 <__sflush_r+0xb4>
 8008006:	4a29      	ldr	r2, [pc, #164]	; (80080ac <__sflush_r+0x100>)
 8008008:	40ca      	lsrs	r2, r1
 800800a:	07d6      	lsls	r6, r2, #31
 800800c:	d528      	bpl.n	8008060 <__sflush_r+0xb4>
 800800e:	2200      	movs	r2, #0
 8008010:	6062      	str	r2, [r4, #4]
 8008012:	6922      	ldr	r2, [r4, #16]
 8008014:	04d9      	lsls	r1, r3, #19
 8008016:	6022      	str	r2, [r4, #0]
 8008018:	d504      	bpl.n	8008024 <__sflush_r+0x78>
 800801a:	1c42      	adds	r2, r0, #1
 800801c:	d101      	bne.n	8008022 <__sflush_r+0x76>
 800801e:	682b      	ldr	r3, [r5, #0]
 8008020:	b903      	cbnz	r3, 8008024 <__sflush_r+0x78>
 8008022:	6560      	str	r0, [r4, #84]	; 0x54
 8008024:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008026:	602f      	str	r7, [r5, #0]
 8008028:	2900      	cmp	r1, #0
 800802a:	d0cb      	beq.n	8007fc4 <__sflush_r+0x18>
 800802c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008030:	4299      	cmp	r1, r3
 8008032:	d002      	beq.n	800803a <__sflush_r+0x8e>
 8008034:	4628      	mov	r0, r5
 8008036:	f7ff faad 	bl	8007594 <_free_r>
 800803a:	2000      	movs	r0, #0
 800803c:	6360      	str	r0, [r4, #52]	; 0x34
 800803e:	e7c2      	b.n	8007fc6 <__sflush_r+0x1a>
 8008040:	6a21      	ldr	r1, [r4, #32]
 8008042:	2301      	movs	r3, #1
 8008044:	4628      	mov	r0, r5
 8008046:	47b0      	blx	r6
 8008048:	1c41      	adds	r1, r0, #1
 800804a:	d1c7      	bne.n	8007fdc <__sflush_r+0x30>
 800804c:	682b      	ldr	r3, [r5, #0]
 800804e:	2b00      	cmp	r3, #0
 8008050:	d0c4      	beq.n	8007fdc <__sflush_r+0x30>
 8008052:	2b1d      	cmp	r3, #29
 8008054:	d001      	beq.n	800805a <__sflush_r+0xae>
 8008056:	2b16      	cmp	r3, #22
 8008058:	d101      	bne.n	800805e <__sflush_r+0xb2>
 800805a:	602f      	str	r7, [r5, #0]
 800805c:	e7b2      	b.n	8007fc4 <__sflush_r+0x18>
 800805e:	89a3      	ldrh	r3, [r4, #12]
 8008060:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008064:	81a3      	strh	r3, [r4, #12]
 8008066:	e7ae      	b.n	8007fc6 <__sflush_r+0x1a>
 8008068:	690f      	ldr	r7, [r1, #16]
 800806a:	2f00      	cmp	r7, #0
 800806c:	d0aa      	beq.n	8007fc4 <__sflush_r+0x18>
 800806e:	0793      	lsls	r3, r2, #30
 8008070:	bf18      	it	ne
 8008072:	2300      	movne	r3, #0
 8008074:	680e      	ldr	r6, [r1, #0]
 8008076:	bf08      	it	eq
 8008078:	694b      	ldreq	r3, [r1, #20]
 800807a:	1bf6      	subs	r6, r6, r7
 800807c:	600f      	str	r7, [r1, #0]
 800807e:	608b      	str	r3, [r1, #8]
 8008080:	2e00      	cmp	r6, #0
 8008082:	dd9f      	ble.n	8007fc4 <__sflush_r+0x18>
 8008084:	4633      	mov	r3, r6
 8008086:	463a      	mov	r2, r7
 8008088:	4628      	mov	r0, r5
 800808a:	6a21      	ldr	r1, [r4, #32]
 800808c:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8008090:	47e0      	blx	ip
 8008092:	2800      	cmp	r0, #0
 8008094:	dc06      	bgt.n	80080a4 <__sflush_r+0xf8>
 8008096:	89a3      	ldrh	r3, [r4, #12]
 8008098:	f04f 30ff 	mov.w	r0, #4294967295
 800809c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80080a0:	81a3      	strh	r3, [r4, #12]
 80080a2:	e790      	b.n	8007fc6 <__sflush_r+0x1a>
 80080a4:	4407      	add	r7, r0
 80080a6:	1a36      	subs	r6, r6, r0
 80080a8:	e7ea      	b.n	8008080 <__sflush_r+0xd4>
 80080aa:	bf00      	nop
 80080ac:	20400001 	.word	0x20400001

080080b0 <_fflush_r>:
 80080b0:	b538      	push	{r3, r4, r5, lr}
 80080b2:	690b      	ldr	r3, [r1, #16]
 80080b4:	4605      	mov	r5, r0
 80080b6:	460c      	mov	r4, r1
 80080b8:	b913      	cbnz	r3, 80080c0 <_fflush_r+0x10>
 80080ba:	2500      	movs	r5, #0
 80080bc:	4628      	mov	r0, r5
 80080be:	bd38      	pop	{r3, r4, r5, pc}
 80080c0:	b118      	cbz	r0, 80080ca <_fflush_r+0x1a>
 80080c2:	6983      	ldr	r3, [r0, #24]
 80080c4:	b90b      	cbnz	r3, 80080ca <_fflush_r+0x1a>
 80080c6:	f000 f887 	bl	80081d8 <__sinit>
 80080ca:	4b14      	ldr	r3, [pc, #80]	; (800811c <_fflush_r+0x6c>)
 80080cc:	429c      	cmp	r4, r3
 80080ce:	d11b      	bne.n	8008108 <_fflush_r+0x58>
 80080d0:	686c      	ldr	r4, [r5, #4]
 80080d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d0ef      	beq.n	80080ba <_fflush_r+0xa>
 80080da:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80080dc:	07d0      	lsls	r0, r2, #31
 80080de:	d404      	bmi.n	80080ea <_fflush_r+0x3a>
 80080e0:	0599      	lsls	r1, r3, #22
 80080e2:	d402      	bmi.n	80080ea <_fflush_r+0x3a>
 80080e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80080e6:	f000 f915 	bl	8008314 <__retarget_lock_acquire_recursive>
 80080ea:	4628      	mov	r0, r5
 80080ec:	4621      	mov	r1, r4
 80080ee:	f7ff ff5d 	bl	8007fac <__sflush_r>
 80080f2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80080f4:	4605      	mov	r5, r0
 80080f6:	07da      	lsls	r2, r3, #31
 80080f8:	d4e0      	bmi.n	80080bc <_fflush_r+0xc>
 80080fa:	89a3      	ldrh	r3, [r4, #12]
 80080fc:	059b      	lsls	r3, r3, #22
 80080fe:	d4dd      	bmi.n	80080bc <_fflush_r+0xc>
 8008100:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008102:	f000 f908 	bl	8008316 <__retarget_lock_release_recursive>
 8008106:	e7d9      	b.n	80080bc <_fflush_r+0xc>
 8008108:	4b05      	ldr	r3, [pc, #20]	; (8008120 <_fflush_r+0x70>)
 800810a:	429c      	cmp	r4, r3
 800810c:	d101      	bne.n	8008112 <_fflush_r+0x62>
 800810e:	68ac      	ldr	r4, [r5, #8]
 8008110:	e7df      	b.n	80080d2 <_fflush_r+0x22>
 8008112:	4b04      	ldr	r3, [pc, #16]	; (8008124 <_fflush_r+0x74>)
 8008114:	429c      	cmp	r4, r3
 8008116:	bf08      	it	eq
 8008118:	68ec      	ldreq	r4, [r5, #12]
 800811a:	e7da      	b.n	80080d2 <_fflush_r+0x22>
 800811c:	08008edc 	.word	0x08008edc
 8008120:	08008efc 	.word	0x08008efc
 8008124:	08008ebc 	.word	0x08008ebc

08008128 <std>:
 8008128:	2300      	movs	r3, #0
 800812a:	b510      	push	{r4, lr}
 800812c:	4604      	mov	r4, r0
 800812e:	e9c0 3300 	strd	r3, r3, [r0]
 8008132:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008136:	6083      	str	r3, [r0, #8]
 8008138:	8181      	strh	r1, [r0, #12]
 800813a:	6643      	str	r3, [r0, #100]	; 0x64
 800813c:	81c2      	strh	r2, [r0, #14]
 800813e:	6183      	str	r3, [r0, #24]
 8008140:	4619      	mov	r1, r3
 8008142:	2208      	movs	r2, #8
 8008144:	305c      	adds	r0, #92	; 0x5c
 8008146:	f7fd fb73 	bl	8005830 <memset>
 800814a:	4b05      	ldr	r3, [pc, #20]	; (8008160 <std+0x38>)
 800814c:	6224      	str	r4, [r4, #32]
 800814e:	6263      	str	r3, [r4, #36]	; 0x24
 8008150:	4b04      	ldr	r3, [pc, #16]	; (8008164 <std+0x3c>)
 8008152:	62a3      	str	r3, [r4, #40]	; 0x28
 8008154:	4b04      	ldr	r3, [pc, #16]	; (8008168 <std+0x40>)
 8008156:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008158:	4b04      	ldr	r3, [pc, #16]	; (800816c <std+0x44>)
 800815a:	6323      	str	r3, [r4, #48]	; 0x30
 800815c:	bd10      	pop	{r4, pc}
 800815e:	bf00      	nop
 8008160:	0800847d 	.word	0x0800847d
 8008164:	0800849f 	.word	0x0800849f
 8008168:	080084d7 	.word	0x080084d7
 800816c:	080084fb 	.word	0x080084fb

08008170 <_cleanup_r>:
 8008170:	4901      	ldr	r1, [pc, #4]	; (8008178 <_cleanup_r+0x8>)
 8008172:	f000 b8af 	b.w	80082d4 <_fwalk_reent>
 8008176:	bf00      	nop
 8008178:	080080b1 	.word	0x080080b1

0800817c <__sfmoreglue>:
 800817c:	2268      	movs	r2, #104	; 0x68
 800817e:	b570      	push	{r4, r5, r6, lr}
 8008180:	1e4d      	subs	r5, r1, #1
 8008182:	4355      	muls	r5, r2
 8008184:	460e      	mov	r6, r1
 8008186:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800818a:	f7ff fa6b 	bl	8007664 <_malloc_r>
 800818e:	4604      	mov	r4, r0
 8008190:	b140      	cbz	r0, 80081a4 <__sfmoreglue+0x28>
 8008192:	2100      	movs	r1, #0
 8008194:	e9c0 1600 	strd	r1, r6, [r0]
 8008198:	300c      	adds	r0, #12
 800819a:	60a0      	str	r0, [r4, #8]
 800819c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80081a0:	f7fd fb46 	bl	8005830 <memset>
 80081a4:	4620      	mov	r0, r4
 80081a6:	bd70      	pop	{r4, r5, r6, pc}

080081a8 <__sfp_lock_acquire>:
 80081a8:	4801      	ldr	r0, [pc, #4]	; (80081b0 <__sfp_lock_acquire+0x8>)
 80081aa:	f000 b8b3 	b.w	8008314 <__retarget_lock_acquire_recursive>
 80081ae:	bf00      	nop
 80081b0:	20001305 	.word	0x20001305

080081b4 <__sfp_lock_release>:
 80081b4:	4801      	ldr	r0, [pc, #4]	; (80081bc <__sfp_lock_release+0x8>)
 80081b6:	f000 b8ae 	b.w	8008316 <__retarget_lock_release_recursive>
 80081ba:	bf00      	nop
 80081bc:	20001305 	.word	0x20001305

080081c0 <__sinit_lock_acquire>:
 80081c0:	4801      	ldr	r0, [pc, #4]	; (80081c8 <__sinit_lock_acquire+0x8>)
 80081c2:	f000 b8a7 	b.w	8008314 <__retarget_lock_acquire_recursive>
 80081c6:	bf00      	nop
 80081c8:	20001306 	.word	0x20001306

080081cc <__sinit_lock_release>:
 80081cc:	4801      	ldr	r0, [pc, #4]	; (80081d4 <__sinit_lock_release+0x8>)
 80081ce:	f000 b8a2 	b.w	8008316 <__retarget_lock_release_recursive>
 80081d2:	bf00      	nop
 80081d4:	20001306 	.word	0x20001306

080081d8 <__sinit>:
 80081d8:	b510      	push	{r4, lr}
 80081da:	4604      	mov	r4, r0
 80081dc:	f7ff fff0 	bl	80081c0 <__sinit_lock_acquire>
 80081e0:	69a3      	ldr	r3, [r4, #24]
 80081e2:	b11b      	cbz	r3, 80081ec <__sinit+0x14>
 80081e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80081e8:	f7ff bff0 	b.w	80081cc <__sinit_lock_release>
 80081ec:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80081f0:	6523      	str	r3, [r4, #80]	; 0x50
 80081f2:	4b13      	ldr	r3, [pc, #76]	; (8008240 <__sinit+0x68>)
 80081f4:	4a13      	ldr	r2, [pc, #76]	; (8008244 <__sinit+0x6c>)
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	62a2      	str	r2, [r4, #40]	; 0x28
 80081fa:	42a3      	cmp	r3, r4
 80081fc:	bf08      	it	eq
 80081fe:	2301      	moveq	r3, #1
 8008200:	4620      	mov	r0, r4
 8008202:	bf08      	it	eq
 8008204:	61a3      	streq	r3, [r4, #24]
 8008206:	f000 f81f 	bl	8008248 <__sfp>
 800820a:	6060      	str	r0, [r4, #4]
 800820c:	4620      	mov	r0, r4
 800820e:	f000 f81b 	bl	8008248 <__sfp>
 8008212:	60a0      	str	r0, [r4, #8]
 8008214:	4620      	mov	r0, r4
 8008216:	f000 f817 	bl	8008248 <__sfp>
 800821a:	2200      	movs	r2, #0
 800821c:	2104      	movs	r1, #4
 800821e:	60e0      	str	r0, [r4, #12]
 8008220:	6860      	ldr	r0, [r4, #4]
 8008222:	f7ff ff81 	bl	8008128 <std>
 8008226:	2201      	movs	r2, #1
 8008228:	2109      	movs	r1, #9
 800822a:	68a0      	ldr	r0, [r4, #8]
 800822c:	f7ff ff7c 	bl	8008128 <std>
 8008230:	2202      	movs	r2, #2
 8008232:	2112      	movs	r1, #18
 8008234:	68e0      	ldr	r0, [r4, #12]
 8008236:	f7ff ff77 	bl	8008128 <std>
 800823a:	2301      	movs	r3, #1
 800823c:	61a3      	str	r3, [r4, #24]
 800823e:	e7d1      	b.n	80081e4 <__sinit+0xc>
 8008240:	08008b40 	.word	0x08008b40
 8008244:	08008171 	.word	0x08008171

08008248 <__sfp>:
 8008248:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800824a:	4607      	mov	r7, r0
 800824c:	f7ff ffac 	bl	80081a8 <__sfp_lock_acquire>
 8008250:	4b1e      	ldr	r3, [pc, #120]	; (80082cc <__sfp+0x84>)
 8008252:	681e      	ldr	r6, [r3, #0]
 8008254:	69b3      	ldr	r3, [r6, #24]
 8008256:	b913      	cbnz	r3, 800825e <__sfp+0x16>
 8008258:	4630      	mov	r0, r6
 800825a:	f7ff ffbd 	bl	80081d8 <__sinit>
 800825e:	3648      	adds	r6, #72	; 0x48
 8008260:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008264:	3b01      	subs	r3, #1
 8008266:	d503      	bpl.n	8008270 <__sfp+0x28>
 8008268:	6833      	ldr	r3, [r6, #0]
 800826a:	b30b      	cbz	r3, 80082b0 <__sfp+0x68>
 800826c:	6836      	ldr	r6, [r6, #0]
 800826e:	e7f7      	b.n	8008260 <__sfp+0x18>
 8008270:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008274:	b9d5      	cbnz	r5, 80082ac <__sfp+0x64>
 8008276:	4b16      	ldr	r3, [pc, #88]	; (80082d0 <__sfp+0x88>)
 8008278:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800827c:	60e3      	str	r3, [r4, #12]
 800827e:	6665      	str	r5, [r4, #100]	; 0x64
 8008280:	f000 f847 	bl	8008312 <__retarget_lock_init_recursive>
 8008284:	f7ff ff96 	bl	80081b4 <__sfp_lock_release>
 8008288:	2208      	movs	r2, #8
 800828a:	4629      	mov	r1, r5
 800828c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008290:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008294:	6025      	str	r5, [r4, #0]
 8008296:	61a5      	str	r5, [r4, #24]
 8008298:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800829c:	f7fd fac8 	bl	8005830 <memset>
 80082a0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80082a4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80082a8:	4620      	mov	r0, r4
 80082aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80082ac:	3468      	adds	r4, #104	; 0x68
 80082ae:	e7d9      	b.n	8008264 <__sfp+0x1c>
 80082b0:	2104      	movs	r1, #4
 80082b2:	4638      	mov	r0, r7
 80082b4:	f7ff ff62 	bl	800817c <__sfmoreglue>
 80082b8:	4604      	mov	r4, r0
 80082ba:	6030      	str	r0, [r6, #0]
 80082bc:	2800      	cmp	r0, #0
 80082be:	d1d5      	bne.n	800826c <__sfp+0x24>
 80082c0:	f7ff ff78 	bl	80081b4 <__sfp_lock_release>
 80082c4:	230c      	movs	r3, #12
 80082c6:	603b      	str	r3, [r7, #0]
 80082c8:	e7ee      	b.n	80082a8 <__sfp+0x60>
 80082ca:	bf00      	nop
 80082cc:	08008b40 	.word	0x08008b40
 80082d0:	ffff0001 	.word	0xffff0001

080082d4 <_fwalk_reent>:
 80082d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80082d8:	4606      	mov	r6, r0
 80082da:	4688      	mov	r8, r1
 80082dc:	2700      	movs	r7, #0
 80082de:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80082e2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80082e6:	f1b9 0901 	subs.w	r9, r9, #1
 80082ea:	d505      	bpl.n	80082f8 <_fwalk_reent+0x24>
 80082ec:	6824      	ldr	r4, [r4, #0]
 80082ee:	2c00      	cmp	r4, #0
 80082f0:	d1f7      	bne.n	80082e2 <_fwalk_reent+0xe>
 80082f2:	4638      	mov	r0, r7
 80082f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80082f8:	89ab      	ldrh	r3, [r5, #12]
 80082fa:	2b01      	cmp	r3, #1
 80082fc:	d907      	bls.n	800830e <_fwalk_reent+0x3a>
 80082fe:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008302:	3301      	adds	r3, #1
 8008304:	d003      	beq.n	800830e <_fwalk_reent+0x3a>
 8008306:	4629      	mov	r1, r5
 8008308:	4630      	mov	r0, r6
 800830a:	47c0      	blx	r8
 800830c:	4307      	orrs	r7, r0
 800830e:	3568      	adds	r5, #104	; 0x68
 8008310:	e7e9      	b.n	80082e6 <_fwalk_reent+0x12>

08008312 <__retarget_lock_init_recursive>:
 8008312:	4770      	bx	lr

08008314 <__retarget_lock_acquire_recursive>:
 8008314:	4770      	bx	lr

08008316 <__retarget_lock_release_recursive>:
 8008316:	4770      	bx	lr

08008318 <__swhatbuf_r>:
 8008318:	b570      	push	{r4, r5, r6, lr}
 800831a:	460e      	mov	r6, r1
 800831c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008320:	4614      	mov	r4, r2
 8008322:	2900      	cmp	r1, #0
 8008324:	461d      	mov	r5, r3
 8008326:	b096      	sub	sp, #88	; 0x58
 8008328:	da08      	bge.n	800833c <__swhatbuf_r+0x24>
 800832a:	2200      	movs	r2, #0
 800832c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8008330:	602a      	str	r2, [r5, #0]
 8008332:	061a      	lsls	r2, r3, #24
 8008334:	d410      	bmi.n	8008358 <__swhatbuf_r+0x40>
 8008336:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800833a:	e00e      	b.n	800835a <__swhatbuf_r+0x42>
 800833c:	466a      	mov	r2, sp
 800833e:	f000 f903 	bl	8008548 <_fstat_r>
 8008342:	2800      	cmp	r0, #0
 8008344:	dbf1      	blt.n	800832a <__swhatbuf_r+0x12>
 8008346:	9a01      	ldr	r2, [sp, #4]
 8008348:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800834c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008350:	425a      	negs	r2, r3
 8008352:	415a      	adcs	r2, r3
 8008354:	602a      	str	r2, [r5, #0]
 8008356:	e7ee      	b.n	8008336 <__swhatbuf_r+0x1e>
 8008358:	2340      	movs	r3, #64	; 0x40
 800835a:	2000      	movs	r0, #0
 800835c:	6023      	str	r3, [r4, #0]
 800835e:	b016      	add	sp, #88	; 0x58
 8008360:	bd70      	pop	{r4, r5, r6, pc}
	...

08008364 <__smakebuf_r>:
 8008364:	898b      	ldrh	r3, [r1, #12]
 8008366:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008368:	079d      	lsls	r5, r3, #30
 800836a:	4606      	mov	r6, r0
 800836c:	460c      	mov	r4, r1
 800836e:	d507      	bpl.n	8008380 <__smakebuf_r+0x1c>
 8008370:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008374:	6023      	str	r3, [r4, #0]
 8008376:	6123      	str	r3, [r4, #16]
 8008378:	2301      	movs	r3, #1
 800837a:	6163      	str	r3, [r4, #20]
 800837c:	b002      	add	sp, #8
 800837e:	bd70      	pop	{r4, r5, r6, pc}
 8008380:	466a      	mov	r2, sp
 8008382:	ab01      	add	r3, sp, #4
 8008384:	f7ff ffc8 	bl	8008318 <__swhatbuf_r>
 8008388:	9900      	ldr	r1, [sp, #0]
 800838a:	4605      	mov	r5, r0
 800838c:	4630      	mov	r0, r6
 800838e:	f7ff f969 	bl	8007664 <_malloc_r>
 8008392:	b948      	cbnz	r0, 80083a8 <__smakebuf_r+0x44>
 8008394:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008398:	059a      	lsls	r2, r3, #22
 800839a:	d4ef      	bmi.n	800837c <__smakebuf_r+0x18>
 800839c:	f023 0303 	bic.w	r3, r3, #3
 80083a0:	f043 0302 	orr.w	r3, r3, #2
 80083a4:	81a3      	strh	r3, [r4, #12]
 80083a6:	e7e3      	b.n	8008370 <__smakebuf_r+0xc>
 80083a8:	4b0d      	ldr	r3, [pc, #52]	; (80083e0 <__smakebuf_r+0x7c>)
 80083aa:	62b3      	str	r3, [r6, #40]	; 0x28
 80083ac:	89a3      	ldrh	r3, [r4, #12]
 80083ae:	6020      	str	r0, [r4, #0]
 80083b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80083b4:	81a3      	strh	r3, [r4, #12]
 80083b6:	9b00      	ldr	r3, [sp, #0]
 80083b8:	6120      	str	r0, [r4, #16]
 80083ba:	6163      	str	r3, [r4, #20]
 80083bc:	9b01      	ldr	r3, [sp, #4]
 80083be:	b15b      	cbz	r3, 80083d8 <__smakebuf_r+0x74>
 80083c0:	4630      	mov	r0, r6
 80083c2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80083c6:	f000 f8d1 	bl	800856c <_isatty_r>
 80083ca:	b128      	cbz	r0, 80083d8 <__smakebuf_r+0x74>
 80083cc:	89a3      	ldrh	r3, [r4, #12]
 80083ce:	f023 0303 	bic.w	r3, r3, #3
 80083d2:	f043 0301 	orr.w	r3, r3, #1
 80083d6:	81a3      	strh	r3, [r4, #12]
 80083d8:	89a0      	ldrh	r0, [r4, #12]
 80083da:	4305      	orrs	r5, r0
 80083dc:	81a5      	strh	r5, [r4, #12]
 80083de:	e7cd      	b.n	800837c <__smakebuf_r+0x18>
 80083e0:	08008171 	.word	0x08008171

080083e4 <_malloc_usable_size_r>:
 80083e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80083e8:	1f18      	subs	r0, r3, #4
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	bfbc      	itt	lt
 80083ee:	580b      	ldrlt	r3, [r1, r0]
 80083f0:	18c0      	addlt	r0, r0, r3
 80083f2:	4770      	bx	lr

080083f4 <_raise_r>:
 80083f4:	291f      	cmp	r1, #31
 80083f6:	b538      	push	{r3, r4, r5, lr}
 80083f8:	4604      	mov	r4, r0
 80083fa:	460d      	mov	r5, r1
 80083fc:	d904      	bls.n	8008408 <_raise_r+0x14>
 80083fe:	2316      	movs	r3, #22
 8008400:	6003      	str	r3, [r0, #0]
 8008402:	f04f 30ff 	mov.w	r0, #4294967295
 8008406:	bd38      	pop	{r3, r4, r5, pc}
 8008408:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800840a:	b112      	cbz	r2, 8008412 <_raise_r+0x1e>
 800840c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008410:	b94b      	cbnz	r3, 8008426 <_raise_r+0x32>
 8008412:	4620      	mov	r0, r4
 8008414:	f000 f830 	bl	8008478 <_getpid_r>
 8008418:	462a      	mov	r2, r5
 800841a:	4601      	mov	r1, r0
 800841c:	4620      	mov	r0, r4
 800841e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008422:	f000 b817 	b.w	8008454 <_kill_r>
 8008426:	2b01      	cmp	r3, #1
 8008428:	d00a      	beq.n	8008440 <_raise_r+0x4c>
 800842a:	1c59      	adds	r1, r3, #1
 800842c:	d103      	bne.n	8008436 <_raise_r+0x42>
 800842e:	2316      	movs	r3, #22
 8008430:	6003      	str	r3, [r0, #0]
 8008432:	2001      	movs	r0, #1
 8008434:	e7e7      	b.n	8008406 <_raise_r+0x12>
 8008436:	2400      	movs	r4, #0
 8008438:	4628      	mov	r0, r5
 800843a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800843e:	4798      	blx	r3
 8008440:	2000      	movs	r0, #0
 8008442:	e7e0      	b.n	8008406 <_raise_r+0x12>

08008444 <raise>:
 8008444:	4b02      	ldr	r3, [pc, #8]	; (8008450 <raise+0xc>)
 8008446:	4601      	mov	r1, r0
 8008448:	6818      	ldr	r0, [r3, #0]
 800844a:	f7ff bfd3 	b.w	80083f4 <_raise_r>
 800844e:	bf00      	nop
 8008450:	20000014 	.word	0x20000014

08008454 <_kill_r>:
 8008454:	b538      	push	{r3, r4, r5, lr}
 8008456:	2300      	movs	r3, #0
 8008458:	4d06      	ldr	r5, [pc, #24]	; (8008474 <_kill_r+0x20>)
 800845a:	4604      	mov	r4, r0
 800845c:	4608      	mov	r0, r1
 800845e:	4611      	mov	r1, r2
 8008460:	602b      	str	r3, [r5, #0]
 8008462:	f7f9 fc3c 	bl	8001cde <_kill>
 8008466:	1c43      	adds	r3, r0, #1
 8008468:	d102      	bne.n	8008470 <_kill_r+0x1c>
 800846a:	682b      	ldr	r3, [r5, #0]
 800846c:	b103      	cbz	r3, 8008470 <_kill_r+0x1c>
 800846e:	6023      	str	r3, [r4, #0]
 8008470:	bd38      	pop	{r3, r4, r5, pc}
 8008472:	bf00      	nop
 8008474:	20001300 	.word	0x20001300

08008478 <_getpid_r>:
 8008478:	f7f9 bc2a 	b.w	8001cd0 <_getpid>

0800847c <__sread>:
 800847c:	b510      	push	{r4, lr}
 800847e:	460c      	mov	r4, r1
 8008480:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008484:	f000 f894 	bl	80085b0 <_read_r>
 8008488:	2800      	cmp	r0, #0
 800848a:	bfab      	itete	ge
 800848c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800848e:	89a3      	ldrhlt	r3, [r4, #12]
 8008490:	181b      	addge	r3, r3, r0
 8008492:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008496:	bfac      	ite	ge
 8008498:	6563      	strge	r3, [r4, #84]	; 0x54
 800849a:	81a3      	strhlt	r3, [r4, #12]
 800849c:	bd10      	pop	{r4, pc}

0800849e <__swrite>:
 800849e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80084a2:	461f      	mov	r7, r3
 80084a4:	898b      	ldrh	r3, [r1, #12]
 80084a6:	4605      	mov	r5, r0
 80084a8:	05db      	lsls	r3, r3, #23
 80084aa:	460c      	mov	r4, r1
 80084ac:	4616      	mov	r6, r2
 80084ae:	d505      	bpl.n	80084bc <__swrite+0x1e>
 80084b0:	2302      	movs	r3, #2
 80084b2:	2200      	movs	r2, #0
 80084b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80084b8:	f000 f868 	bl	800858c <_lseek_r>
 80084bc:	89a3      	ldrh	r3, [r4, #12]
 80084be:	4632      	mov	r2, r6
 80084c0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80084c4:	81a3      	strh	r3, [r4, #12]
 80084c6:	4628      	mov	r0, r5
 80084c8:	463b      	mov	r3, r7
 80084ca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80084ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80084d2:	f000 b817 	b.w	8008504 <_write_r>

080084d6 <__sseek>:
 80084d6:	b510      	push	{r4, lr}
 80084d8:	460c      	mov	r4, r1
 80084da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80084de:	f000 f855 	bl	800858c <_lseek_r>
 80084e2:	1c43      	adds	r3, r0, #1
 80084e4:	89a3      	ldrh	r3, [r4, #12]
 80084e6:	bf15      	itete	ne
 80084e8:	6560      	strne	r0, [r4, #84]	; 0x54
 80084ea:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80084ee:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80084f2:	81a3      	strheq	r3, [r4, #12]
 80084f4:	bf18      	it	ne
 80084f6:	81a3      	strhne	r3, [r4, #12]
 80084f8:	bd10      	pop	{r4, pc}

080084fa <__sclose>:
 80084fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80084fe:	f000 b813 	b.w	8008528 <_close_r>
	...

08008504 <_write_r>:
 8008504:	b538      	push	{r3, r4, r5, lr}
 8008506:	4604      	mov	r4, r0
 8008508:	4608      	mov	r0, r1
 800850a:	4611      	mov	r1, r2
 800850c:	2200      	movs	r2, #0
 800850e:	4d05      	ldr	r5, [pc, #20]	; (8008524 <_write_r+0x20>)
 8008510:	602a      	str	r2, [r5, #0]
 8008512:	461a      	mov	r2, r3
 8008514:	f7f8 fd1e 	bl	8000f54 <_write>
 8008518:	1c43      	adds	r3, r0, #1
 800851a:	d102      	bne.n	8008522 <_write_r+0x1e>
 800851c:	682b      	ldr	r3, [r5, #0]
 800851e:	b103      	cbz	r3, 8008522 <_write_r+0x1e>
 8008520:	6023      	str	r3, [r4, #0]
 8008522:	bd38      	pop	{r3, r4, r5, pc}
 8008524:	20001300 	.word	0x20001300

08008528 <_close_r>:
 8008528:	b538      	push	{r3, r4, r5, lr}
 800852a:	2300      	movs	r3, #0
 800852c:	4d05      	ldr	r5, [pc, #20]	; (8008544 <_close_r+0x1c>)
 800852e:	4604      	mov	r4, r0
 8008530:	4608      	mov	r0, r1
 8008532:	602b      	str	r3, [r5, #0]
 8008534:	f7f9 fc0a 	bl	8001d4c <_close>
 8008538:	1c43      	adds	r3, r0, #1
 800853a:	d102      	bne.n	8008542 <_close_r+0x1a>
 800853c:	682b      	ldr	r3, [r5, #0]
 800853e:	b103      	cbz	r3, 8008542 <_close_r+0x1a>
 8008540:	6023      	str	r3, [r4, #0]
 8008542:	bd38      	pop	{r3, r4, r5, pc}
 8008544:	20001300 	.word	0x20001300

08008548 <_fstat_r>:
 8008548:	b538      	push	{r3, r4, r5, lr}
 800854a:	2300      	movs	r3, #0
 800854c:	4d06      	ldr	r5, [pc, #24]	; (8008568 <_fstat_r+0x20>)
 800854e:	4604      	mov	r4, r0
 8008550:	4608      	mov	r0, r1
 8008552:	4611      	mov	r1, r2
 8008554:	602b      	str	r3, [r5, #0]
 8008556:	f7f9 fc04 	bl	8001d62 <_fstat>
 800855a:	1c43      	adds	r3, r0, #1
 800855c:	d102      	bne.n	8008564 <_fstat_r+0x1c>
 800855e:	682b      	ldr	r3, [r5, #0]
 8008560:	b103      	cbz	r3, 8008564 <_fstat_r+0x1c>
 8008562:	6023      	str	r3, [r4, #0]
 8008564:	bd38      	pop	{r3, r4, r5, pc}
 8008566:	bf00      	nop
 8008568:	20001300 	.word	0x20001300

0800856c <_isatty_r>:
 800856c:	b538      	push	{r3, r4, r5, lr}
 800856e:	2300      	movs	r3, #0
 8008570:	4d05      	ldr	r5, [pc, #20]	; (8008588 <_isatty_r+0x1c>)
 8008572:	4604      	mov	r4, r0
 8008574:	4608      	mov	r0, r1
 8008576:	602b      	str	r3, [r5, #0]
 8008578:	f7f9 fc02 	bl	8001d80 <_isatty>
 800857c:	1c43      	adds	r3, r0, #1
 800857e:	d102      	bne.n	8008586 <_isatty_r+0x1a>
 8008580:	682b      	ldr	r3, [r5, #0]
 8008582:	b103      	cbz	r3, 8008586 <_isatty_r+0x1a>
 8008584:	6023      	str	r3, [r4, #0]
 8008586:	bd38      	pop	{r3, r4, r5, pc}
 8008588:	20001300 	.word	0x20001300

0800858c <_lseek_r>:
 800858c:	b538      	push	{r3, r4, r5, lr}
 800858e:	4604      	mov	r4, r0
 8008590:	4608      	mov	r0, r1
 8008592:	4611      	mov	r1, r2
 8008594:	2200      	movs	r2, #0
 8008596:	4d05      	ldr	r5, [pc, #20]	; (80085ac <_lseek_r+0x20>)
 8008598:	602a      	str	r2, [r5, #0]
 800859a:	461a      	mov	r2, r3
 800859c:	f7f9 fbfa 	bl	8001d94 <_lseek>
 80085a0:	1c43      	adds	r3, r0, #1
 80085a2:	d102      	bne.n	80085aa <_lseek_r+0x1e>
 80085a4:	682b      	ldr	r3, [r5, #0]
 80085a6:	b103      	cbz	r3, 80085aa <_lseek_r+0x1e>
 80085a8:	6023      	str	r3, [r4, #0]
 80085aa:	bd38      	pop	{r3, r4, r5, pc}
 80085ac:	20001300 	.word	0x20001300

080085b0 <_read_r>:
 80085b0:	b538      	push	{r3, r4, r5, lr}
 80085b2:	4604      	mov	r4, r0
 80085b4:	4608      	mov	r0, r1
 80085b6:	4611      	mov	r1, r2
 80085b8:	2200      	movs	r2, #0
 80085ba:	4d05      	ldr	r5, [pc, #20]	; (80085d0 <_read_r+0x20>)
 80085bc:	602a      	str	r2, [r5, #0]
 80085be:	461a      	mov	r2, r3
 80085c0:	f7f9 fba7 	bl	8001d12 <_read>
 80085c4:	1c43      	adds	r3, r0, #1
 80085c6:	d102      	bne.n	80085ce <_read_r+0x1e>
 80085c8:	682b      	ldr	r3, [r5, #0]
 80085ca:	b103      	cbz	r3, 80085ce <_read_r+0x1e>
 80085cc:	6023      	str	r3, [r4, #0]
 80085ce:	bd38      	pop	{r3, r4, r5, pc}
 80085d0:	20001300 	.word	0x20001300

080085d4 <_init>:
 80085d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085d6:	bf00      	nop
 80085d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80085da:	bc08      	pop	{r3}
 80085dc:	469e      	mov	lr, r3
 80085de:	4770      	bx	lr

080085e0 <_fini>:
 80085e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085e2:	bf00      	nop
 80085e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80085e6:	bc08      	pop	{r3}
 80085e8:	469e      	mov	lr, r3
 80085ea:	4770      	bx	lr
