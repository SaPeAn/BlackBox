
130c8t6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000810c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b38  08008220  08008220  00018220  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008d58  08008d58  000201e4  2**0
                  CONTENTS
  4 .ARM          00000000  08008d58  08008d58  000201e4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008d58  08008d58  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008d58  08008d58  00018d58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008d5c  08008d5c  00018d5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  08008d60  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000830  200001e4  08008f44  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000a14  08008f44  00020a14  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012c4a  00000000  00000000  0002020d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b6e  00000000  00000000  00032e57  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012b0  00000000  00000000  000359c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001158  00000000  00000000  00036c78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a963  00000000  00000000  00037dd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013cd3  00000000  00000000  00052733  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009895e  00000000  00000000  00066406  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000fed64  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000612c  00000000  00000000  000fedb4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e4 	.word	0x200001e4
 800012c:	00000000 	.word	0x00000000
 8000130:	08008204 	.word	0x08008204

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e8 	.word	0x200001e8
 800014c:	08008204 	.word	0x08008204

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <lcd_init>:
uint8_t str_null[] = "NULL";

extern SPI_HandleTypeDef hspi2;

void lcd_init(void)
{
 8000a88:	b590      	push	{r4, r7, lr}
 8000a8a:	b085      	sub	sp, #20
 8000a8c:	af00      	add	r7, sp, #0
  DISP_RESET_OFF;
 8000a8e:	2201      	movs	r2, #1
 8000a90:	2104      	movs	r1, #4
 8000a92:	4818      	ldr	r0, [pc, #96]	; (8000af4 <lcd_init+0x6c>)
 8000a94:	f001 fcb2 	bl	80023fc <HAL_GPIO_WritePin>
  DISP_INIT_SEND_DAT;
 8000a98:	2201      	movs	r2, #1
 8000a9a:	2102      	movs	r1, #2
 8000a9c:	4815      	ldr	r0, [pc, #84]	; (8000af4 <lcd_init+0x6c>)
 8000a9e:	f001 fcad 	bl	80023fc <HAL_GPIO_WritePin>
  HAL_Delay(2);
 8000aa2:	2002      	movs	r0, #2
 8000aa4:	f000 ff12 	bl	80018cc <HAL_Delay>
  DISP_RESET_ON;
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	2104      	movs	r1, #4
 8000aac:	4811      	ldr	r0, [pc, #68]	; (8000af4 <lcd_init+0x6c>)
 8000aae:	f001 fca5 	bl	80023fc <HAL_GPIO_WritePin>
  HAL_Delay(2);
 8000ab2:	2002      	movs	r0, #2
 8000ab4:	f000 ff0a 	bl	80018cc <HAL_Delay>
  DISP_RESET_OFF;
 8000ab8:	2201      	movs	r2, #1
 8000aba:	2104      	movs	r1, #4
 8000abc:	480d      	ldr	r0, [pc, #52]	; (8000af4 <lcd_init+0x6c>)
 8000abe:	f001 fc9d 	bl	80023fc <HAL_GPIO_WritePin>
  DISP_INIT_SEND_COM;
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	2102      	movs	r1, #2
 8000ac6:	480b      	ldr	r0, [pc, #44]	; (8000af4 <lcd_init+0x6c>)
 8000ac8:	f001 fc98 	bl	80023fc <HAL_GPIO_WritePin>
  uint8_t init_data_array[13] = {
 8000acc:	4b0a      	ldr	r3, [pc, #40]	; (8000af8 <lcd_init+0x70>)
 8000ace:	463c      	mov	r4, r7
 8000ad0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000ad2:	c407      	stmia	r4!, {r0, r1, r2}
 8000ad4:	7023      	strb	r3, [r4, #0]
	(0x10 | 0),       // Column Address Set - first byte (0-15)
	(0x00 | 0),       // Column Address Set - second byte (0-15)
	(0xAE | 1),       // Display on(1) / Display off (0)
	(0xA6 | 0),       // Display Normal(0) / Display Reverse(1)
  };
  HAL_SPI_Transmit(&hspi2, init_data_array, 13, 20);
 8000ad6:	4639      	mov	r1, r7
 8000ad8:	2314      	movs	r3, #20
 8000ada:	220d      	movs	r2, #13
 8000adc:	4807      	ldr	r0, [pc, #28]	; (8000afc <lcd_init+0x74>)
 8000ade:	f002 ff4b 	bl	8003978 <HAL_SPI_Transmit>
  DISP_INIT_SEND_DAT;
 8000ae2:	2201      	movs	r2, #1
 8000ae4:	2102      	movs	r1, #2
 8000ae6:	4803      	ldr	r0, [pc, #12]	; (8000af4 <lcd_init+0x6c>)
 8000ae8:	f001 fc88 	bl	80023fc <HAL_GPIO_WritePin>
}
 8000aec:	bf00      	nop
 8000aee:	3714      	adds	r7, #20
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bd90      	pop	{r4, r7, pc}
 8000af4:	40010800 	.word	0x40010800
 8000af8:	08008220 	.word	0x08008220
 8000afc:	20000670 	.word	0x20000670

08000b00 <lcd_sendcommands>:

void lcd_sendcommands(uint8_t* data, uint8_t N)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b082      	sub	sp, #8
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
 8000b08:	460b      	mov	r3, r1
 8000b0a:	70fb      	strb	r3, [r7, #3]
  DISP_INIT_SEND_COM;
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	2102      	movs	r1, #2
 8000b10:	4809      	ldr	r0, [pc, #36]	; (8000b38 <lcd_sendcommands+0x38>)
 8000b12:	f001 fc73 	bl	80023fc <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi2, data, N, 20);
 8000b16:	78fb      	ldrb	r3, [r7, #3]
 8000b18:	b29a      	uxth	r2, r3
 8000b1a:	2314      	movs	r3, #20
 8000b1c:	6879      	ldr	r1, [r7, #4]
 8000b1e:	4807      	ldr	r0, [pc, #28]	; (8000b3c <lcd_sendcommands+0x3c>)
 8000b20:	f002 ff2a 	bl	8003978 <HAL_SPI_Transmit>
  DISP_INIT_SEND_DAT;
 8000b24:	2201      	movs	r2, #1
 8000b26:	2102      	movs	r1, #2
 8000b28:	4803      	ldr	r0, [pc, #12]	; (8000b38 <lcd_sendcommands+0x38>)
 8000b2a:	f001 fc67 	bl	80023fc <HAL_GPIO_WritePin>
}
 8000b2e:	bf00      	nop
 8000b30:	3708      	adds	r7, #8
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	bf00      	nop
 8000b38:	40010800 	.word	0x40010800
 8000b3c:	20000670 	.word	0x20000670

08000b40 <lcd_bufupload>:

void lcd_bufupload(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b082      	sub	sp, #8
 8000b44:	af00      	add	r7, sp, #0
  for(uint8_t j = 0; j < 8; j++)
 8000b46:	2300      	movs	r3, #0
 8000b48:	71fb      	strb	r3, [r7, #7]
 8000b4a:	e018      	b.n	8000b7e <lcd_bufupload+0x3e>
  {
	uint8_t tmp_arr[] = {(0xB0 + j), 0x10, 0x00};
 8000b4c:	79fb      	ldrb	r3, [r7, #7]
 8000b4e:	3b50      	subs	r3, #80	; 0x50
 8000b50:	b2db      	uxtb	r3, r3
 8000b52:	713b      	strb	r3, [r7, #4]
 8000b54:	2310      	movs	r3, #16
 8000b56:	717b      	strb	r3, [r7, #5]
 8000b58:	2300      	movs	r3, #0
 8000b5a:	71bb      	strb	r3, [r7, #6]
    lcd_sendcommands(tmp_arr, 3);
 8000b5c:	1d3b      	adds	r3, r7, #4
 8000b5e:	2103      	movs	r1, #3
 8000b60:	4618      	mov	r0, r3
 8000b62:	f7ff ffcd 	bl	8000b00 <lcd_sendcommands>
    HAL_SPI_Transmit(&hspi2, dispbuffer[j], 128, 20);
 8000b66:	79fb      	ldrb	r3, [r7, #7]
 8000b68:	01db      	lsls	r3, r3, #7
 8000b6a:	4a09      	ldr	r2, [pc, #36]	; (8000b90 <lcd_bufupload+0x50>)
 8000b6c:	1899      	adds	r1, r3, r2
 8000b6e:	2314      	movs	r3, #20
 8000b70:	2280      	movs	r2, #128	; 0x80
 8000b72:	4808      	ldr	r0, [pc, #32]	; (8000b94 <lcd_bufupload+0x54>)
 8000b74:	f002 ff00 	bl	8003978 <HAL_SPI_Transmit>
  for(uint8_t j = 0; j < 8; j++)
 8000b78:	79fb      	ldrb	r3, [r7, #7]
 8000b7a:	3301      	adds	r3, #1
 8000b7c:	71fb      	strb	r3, [r7, #7]
 8000b7e:	79fb      	ldrb	r3, [r7, #7]
 8000b80:	2b07      	cmp	r3, #7
 8000b82:	d9e3      	bls.n	8000b4c <lcd_bufupload+0xc>
  }
}
 8000b84:	bf00      	nop
 8000b86:	bf00      	nop
 8000b88:	3708      	adds	r7, #8
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	bf00      	nop
 8000b90:	20000200 	.word	0x20000200
 8000b94:	20000670 	.word	0x20000670

08000b98 <buf_writesmb8x5>:


/******************************************/
void buf_writesmb8x5(const uint8_t ch, uint8_t pg, uint8_t cl)
{
 8000b98:	b4b0      	push	{r4, r5, r7}
 8000b9a:	b085      	sub	sp, #20
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	71fb      	strb	r3, [r7, #7]
 8000ba2:	460b      	mov	r3, r1
 8000ba4:	71bb      	strb	r3, [r7, #6]
 8000ba6:	4613      	mov	r3, r2
 8000ba8:	717b      	strb	r3, [r7, #5]
	bufpg = pg;
 8000baa:	4a21      	ldr	r2, [pc, #132]	; (8000c30 <buf_writesmb8x5+0x98>)
 8000bac:	79bb      	ldrb	r3, [r7, #6]
 8000bae:	7013      	strb	r3, [r2, #0]
	bufcl = cl;
 8000bb0:	4a20      	ldr	r2, [pc, #128]	; (8000c34 <buf_writesmb8x5+0x9c>)
 8000bb2:	797b      	ldrb	r3, [r7, #5]
 8000bb4:	7013      	strb	r3, [r2, #0]
	for(uint8_t i = 0; i < 5; i++)
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	73fb      	strb	r3, [r7, #15]
 8000bba:	e019      	b.n	8000bf0 <buf_writesmb8x5+0x58>
	  {
	    dispbuffer[bufpg][bufcl + i] = char_8x5[ch][i];
 8000bbc:	79fa      	ldrb	r2, [r7, #7]
 8000bbe:	7bf8      	ldrb	r0, [r7, #15]
 8000bc0:	4b1b      	ldr	r3, [pc, #108]	; (8000c30 <buf_writesmb8x5+0x98>)
 8000bc2:	781b      	ldrb	r3, [r3, #0]
 8000bc4:	461d      	mov	r5, r3
 8000bc6:	4b1b      	ldr	r3, [pc, #108]	; (8000c34 <buf_writesmb8x5+0x9c>)
 8000bc8:	781b      	ldrb	r3, [r3, #0]
 8000bca:	4619      	mov	r1, r3
 8000bcc:	7bfb      	ldrb	r3, [r7, #15]
 8000bce:	4419      	add	r1, r3
 8000bd0:	4c19      	ldr	r4, [pc, #100]	; (8000c38 <buf_writesmb8x5+0xa0>)
 8000bd2:	4613      	mov	r3, r2
 8000bd4:	009b      	lsls	r3, r3, #2
 8000bd6:	4413      	add	r3, r2
 8000bd8:	4423      	add	r3, r4
 8000bda:	4403      	add	r3, r0
 8000bdc:	7818      	ldrb	r0, [r3, #0]
 8000bde:	4a17      	ldr	r2, [pc, #92]	; (8000c3c <buf_writesmb8x5+0xa4>)
 8000be0:	01eb      	lsls	r3, r5, #7
 8000be2:	4413      	add	r3, r2
 8000be4:	440b      	add	r3, r1
 8000be6:	4602      	mov	r2, r0
 8000be8:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 0; i < 5; i++)
 8000bea:	7bfb      	ldrb	r3, [r7, #15]
 8000bec:	3301      	adds	r3, #1
 8000bee:	73fb      	strb	r3, [r7, #15]
 8000bf0:	7bfb      	ldrb	r3, [r7, #15]
 8000bf2:	2b04      	cmp	r3, #4
 8000bf4:	d9e2      	bls.n	8000bbc <buf_writesmb8x5+0x24>
	  }
	bufcl = cl+5;
 8000bf6:	797b      	ldrb	r3, [r7, #5]
 8000bf8:	3305      	adds	r3, #5
 8000bfa:	b2da      	uxtb	r2, r3
 8000bfc:	4b0d      	ldr	r3, [pc, #52]	; (8000c34 <buf_writesmb8x5+0x9c>)
 8000bfe:	701a      	strb	r2, [r3, #0]
	dispbuffer[bufpg][bufcl] = 0x00;
 8000c00:	4b0b      	ldr	r3, [pc, #44]	; (8000c30 <buf_writesmb8x5+0x98>)
 8000c02:	781b      	ldrb	r3, [r3, #0]
 8000c04:	4618      	mov	r0, r3
 8000c06:	4b0b      	ldr	r3, [pc, #44]	; (8000c34 <buf_writesmb8x5+0x9c>)
 8000c08:	781b      	ldrb	r3, [r3, #0]
 8000c0a:	4619      	mov	r1, r3
 8000c0c:	4a0b      	ldr	r2, [pc, #44]	; (8000c3c <buf_writesmb8x5+0xa4>)
 8000c0e:	01c3      	lsls	r3, r0, #7
 8000c10:	4413      	add	r3, r2
 8000c12:	440b      	add	r3, r1
 8000c14:	2200      	movs	r2, #0
 8000c16:	701a      	strb	r2, [r3, #0]
	bufcl++;
 8000c18:	4b06      	ldr	r3, [pc, #24]	; (8000c34 <buf_writesmb8x5+0x9c>)
 8000c1a:	781b      	ldrb	r3, [r3, #0]
 8000c1c:	3301      	adds	r3, #1
 8000c1e:	b2da      	uxtb	r2, r3
 8000c20:	4b04      	ldr	r3, [pc, #16]	; (8000c34 <buf_writesmb8x5+0x9c>)
 8000c22:	701a      	strb	r2, [r3, #0]
}
 8000c24:	bf00      	nop
 8000c26:	3714      	adds	r7, #20
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bcb0      	pop	{r4, r5, r7}
 8000c2c:	4770      	bx	lr
 8000c2e:	bf00      	nop
 8000c30:	20000600 	.word	0x20000600
 8000c34:	20000601 	.word	0x20000601
 8000c38:	08008288 	.word	0x08008288
 8000c3c:	20000200 	.word	0x20000200

08000c40 <buf_writestr8x5>:

uint8_t buf_writestr8x5(uint8_t *str, uint8_t pg, uint8_t cl)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b084      	sub	sp, #16
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
 8000c48:	460b      	mov	r3, r1
 8000c4a:	70fb      	strb	r3, [r7, #3]
 8000c4c:	4613      	mov	r3, r2
 8000c4e:	70bb      	strb	r3, [r7, #2]
  if(str == NULL) str = str_null;
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d101      	bne.n	8000c5a <buf_writestr8x5+0x1a>
 8000c56:	4b16      	ldr	r3, [pc, #88]	; (8000cb0 <buf_writestr8x5+0x70>)
 8000c58:	607b      	str	r3, [r7, #4]
  uint8_t i = 0;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	73fb      	strb	r3, [r7, #15]
  while(str[i])
 8000c5e:	e01b      	b.n	8000c98 <buf_writestr8x5+0x58>
  {
	  buf_writesmb8x5(str[i], pg, cl);
 8000c60:	7bfb      	ldrb	r3, [r7, #15]
 8000c62:	687a      	ldr	r2, [r7, #4]
 8000c64:	4413      	add	r3, r2
 8000c66:	781b      	ldrb	r3, [r3, #0]
 8000c68:	78ba      	ldrb	r2, [r7, #2]
 8000c6a:	78f9      	ldrb	r1, [r7, #3]
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	f7ff ff93 	bl	8000b98 <buf_writesmb8x5>
    cl += 6;
 8000c72:	78bb      	ldrb	r3, [r7, #2]
 8000c74:	3306      	adds	r3, #6
 8000c76:	70bb      	strb	r3, [r7, #2]
    if(cl > 122) {pg++; cl = 0;}
 8000c78:	78bb      	ldrb	r3, [r7, #2]
 8000c7a:	2b7a      	cmp	r3, #122	; 0x7a
 8000c7c:	d904      	bls.n	8000c88 <buf_writestr8x5+0x48>
 8000c7e:	78fb      	ldrb	r3, [r7, #3]
 8000c80:	3301      	adds	r3, #1
 8000c82:	70fb      	strb	r3, [r7, #3]
 8000c84:	2300      	movs	r3, #0
 8000c86:	70bb      	strb	r3, [r7, #2]
    if(pg > 7) return 0;
 8000c88:	78fb      	ldrb	r3, [r7, #3]
 8000c8a:	2b07      	cmp	r3, #7
 8000c8c:	d901      	bls.n	8000c92 <buf_writestr8x5+0x52>
 8000c8e:	2300      	movs	r3, #0
 8000c90:	e009      	b.n	8000ca6 <buf_writestr8x5+0x66>
    i++;
 8000c92:	7bfb      	ldrb	r3, [r7, #15]
 8000c94:	3301      	adds	r3, #1
 8000c96:	73fb      	strb	r3, [r7, #15]
  while(str[i])
 8000c98:	7bfb      	ldrb	r3, [r7, #15]
 8000c9a:	687a      	ldr	r2, [r7, #4]
 8000c9c:	4413      	add	r3, r2
 8000c9e:	781b      	ldrb	r3, [r3, #0]
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d1dd      	bne.n	8000c60 <buf_writestr8x5+0x20>
  }
  return i;
 8000ca4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	3710      	adds	r7, #16
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bd80      	pop	{r7, pc}
 8000cae:	bf00      	nop
 8000cb0:	20000000 	.word	0x20000000

08000cb4 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	b083      	sub	sp, #12
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000cbc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000cc0:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000cc4:	f003 0301 	and.w	r3, r3, #1
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d013      	beq.n	8000cf4 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000ccc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000cd0:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000cd4:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d00b      	beq.n	8000cf4 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000cdc:	e000      	b.n	8000ce0 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000cde:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000ce0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d0f9      	beq.n	8000cde <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000cea:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000cee:	687a      	ldr	r2, [r7, #4]
 8000cf0:	b2d2      	uxtb	r2, r2
 8000cf2:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000cf4:	687b      	ldr	r3, [r7, #4]
}
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	370c      	adds	r7, #12
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bc80      	pop	{r7}
 8000cfe:	4770      	bx	lr

08000d00 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
  {
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b086      	sub	sp, #24
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	60f8      	str	r0, [r7, #12]
 8000d08:	60b9      	str	r1, [r7, #8]
 8000d0a:	607a      	str	r2, [r7, #4]
  	for (int i = 0; i < len; i++)
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	617b      	str	r3, [r7, #20]
 8000d10:	e009      	b.n	8000d26 <_write+0x26>
  	{
  		ITM_SendChar(*ptr++);
 8000d12:	68bb      	ldr	r3, [r7, #8]
 8000d14:	1c5a      	adds	r2, r3, #1
 8000d16:	60ba      	str	r2, [r7, #8]
 8000d18:	781b      	ldrb	r3, [r3, #0]
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	f7ff ffca 	bl	8000cb4 <ITM_SendChar>
  	for (int i = 0; i < len; i++)
 8000d20:	697b      	ldr	r3, [r7, #20]
 8000d22:	3301      	adds	r3, #1
 8000d24:	617b      	str	r3, [r7, #20]
 8000d26:	697a      	ldr	r2, [r7, #20]
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	429a      	cmp	r2, r3
 8000d2c:	dbf1      	blt.n	8000d12 <_write+0x12>
  	}
  	return len;
 8000d2e:	687b      	ldr	r3, [r7, #4]
  }
 8000d30:	4618      	mov	r0, r3
 8000d32:	3718      	adds	r7, #24
 8000d34:	46bd      	mov	sp, r7
 8000d36:	bd80      	pop	{r7, pc}

08000d38 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d38:	b5b0      	push	{r4, r5, r7, lr}
 8000d3a:	b090      	sub	sp, #64	; 0x40
 8000d3c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d3e:	f000 fd63 	bl	8001808 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d42:	f000 f85b 	bl	8000dfc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d46:	f000 fa53 	bl	80011f0 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000d4a:	f000 f8b9 	bl	8000ec0 <MX_ADC1_Init>
  MX_CAN_Init();
 8000d4e:	f000 f8f5 	bl	8000f3c <MX_CAN_Init>
  MX_SPI2_Init();
 8000d52:	f000 f971 	bl	8001038 <MX_SPI2_Init>
  MX_TIM1_Init();
 8000d56:	f000 f9a5 	bl	80010a4 <MX_TIM1_Init>
  MX_USB_PCD_Init();
 8000d5a:	f000 fa27 	bl	80011ac <MX_USB_PCD_Init>
  MX_RTC_Init();
 8000d5e:	f000 f921 	bl	8000fa4 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000d62:	2100      	movs	r1, #0
 8000d64:	4821      	ldr	r0, [pc, #132]	; (8000dec <main+0xb4>)
 8000d66:	f003 f839 	bl	8003ddc <HAL_TIM_PWM_Start>
  lcd_init();
 8000d6a:	f7ff fe8d 	bl	8000a88 <lcd_init>
  uint16_t dutyCycle = HAL_TIM_ReadCapturedValue(&htim1, TIM_CHANNEL_1);
 8000d6e:	2100      	movs	r1, #0
 8000d70:	481e      	ldr	r0, [pc, #120]	; (8000dec <main+0xb4>)
 8000d72:	f003 f993 	bl	800409c <HAL_TIM_ReadCapturedValue>
 8000d76:	4603      	mov	r3, r0
 8000d78:	86fb      	strh	r3, [r7, #54]	; 0x36

  uint8_t temp_str[] = "Hello, World!!! Привет, Мир!!!";
 8000d7a:	4b1d      	ldr	r3, [pc, #116]	; (8000df0 <main+0xb8>)
 8000d7c:	1d3c      	adds	r4, r7, #4
 8000d7e:	461d      	mov	r5, r3
 8000d80:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d82:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d84:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d86:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d88:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000d8c:	e884 0003 	stmia.w	r4, {r0, r1}
  short A = 0;
 8000d90:	2300      	movs	r3, #0
 8000d92:	86bb      	strh	r3, [r7, #52]	; 0x34
  int B = 0;
 8000d94:	2300      	movs	r3, #0
 8000d96:	633b      	str	r3, [r7, #48]	; 0x30
  long C = 0;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  double D = 0.0f;
 8000d9c:	f04f 0200 	mov.w	r2, #0
 8000da0:	f04f 0300 	mov.w	r3, #0
 8000da4:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, dutyCycle-=100);
	  HAL_Delay(1);
    }
#endif

	buf_writestr8x5(temp_str, 1, 10);
 8000da8:	1d3b      	adds	r3, r7, #4
 8000daa:	220a      	movs	r2, #10
 8000dac:	2101      	movs	r1, #1
 8000dae:	4618      	mov	r0, r3
 8000db0:	f7ff ff46 	bl	8000c40 <buf_writestr8x5>
	lcd_bufupload();
 8000db4:	f7ff fec4 	bl	8000b40 <lcd_bufupload>
	D = sin((double)(D + 1));
 8000db8:	f04f 0200 	mov.w	r2, #0
 8000dbc:	4b0d      	ldr	r3, [pc, #52]	; (8000df4 <main+0xbc>)
 8000dbe:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8000dc2:	f7ff f9d3 	bl	800016c <__adddf3>
 8000dc6:	4602      	mov	r2, r0
 8000dc8:	460b      	mov	r3, r1
 8000dca:	4610      	mov	r0, r2
 8000dcc:	4619      	mov	r1, r3
 8000dce:	f006 fa1f 	bl	8007210 <sin>
 8000dd2:	e9c7 010e 	strd	r0, r1, [r7, #56]	; 0x38
    printf("sin = %.3f\n\r", D);
 8000dd6:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8000dda:	4807      	ldr	r0, [pc, #28]	; (8000df8 <main+0xc0>)
 8000ddc:	f004 f952 	bl	8005084 <iprintf>
    HAL_Delay(1000);
 8000de0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000de4:	f000 fd72 	bl	80018cc <HAL_Delay>
	buf_writestr8x5(temp_str, 1, 10);
 8000de8:	e7de      	b.n	8000da8 <main+0x70>
 8000dea:	bf00      	nop
 8000dec:	200006c8 	.word	0x200006c8
 8000df0:	08008240 	.word	0x08008240
 8000df4:	3ff00000 	.word	0x3ff00000
 8000df8:	08008230 	.word	0x08008230

08000dfc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b094      	sub	sp, #80	; 0x50
 8000e00:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e02:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e06:	2228      	movs	r2, #40	; 0x28
 8000e08:	2100      	movs	r1, #0
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	f003 fcd2 	bl	80047b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e10:	f107 0314 	add.w	r3, r7, #20
 8000e14:	2200      	movs	r2, #0
 8000e16:	601a      	str	r2, [r3, #0]
 8000e18:	605a      	str	r2, [r3, #4]
 8000e1a:	609a      	str	r2, [r3, #8]
 8000e1c:	60da      	str	r2, [r3, #12]
 8000e1e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e20:	1d3b      	adds	r3, r7, #4
 8000e22:	2200      	movs	r2, #0
 8000e24:	601a      	str	r2, [r3, #0]
 8000e26:	605a      	str	r2, [r3, #4]
 8000e28:	609a      	str	r2, [r3, #8]
 8000e2a:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8000e2c:	2305      	movs	r3, #5
 8000e2e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e30:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e34:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000e36:	2300      	movs	r3, #0
 8000e38:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000e3a:	2301      	movs	r3, #1
 8000e3c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e3e:	2301      	movs	r3, #1
 8000e40:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e42:	2302      	movs	r3, #2
 8000e44:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e46:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e4a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000e4c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000e50:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e52:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e56:	4618      	mov	r0, r3
 8000e58:	f001 fc00 	bl	800265c <HAL_RCC_OscConfig>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d001      	beq.n	8000e66 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8000e62:	f000 fa31 	bl	80012c8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e66:	230f      	movs	r3, #15
 8000e68:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e6a:	2302      	movs	r3, #2
 8000e6c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e72:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e76:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000e7c:	f107 0314 	add.w	r3, r7, #20
 8000e80:	2102      	movs	r1, #2
 8000e82:	4618      	mov	r0, r3
 8000e84:	f001 fe6c 	bl	8002b60 <HAL_RCC_ClockConfig>
 8000e88:	4603      	mov	r3, r0
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d001      	beq.n	8000e92 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000e8e:	f000 fa1b 	bl	80012c8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_ADC
 8000e92:	2313      	movs	r3, #19
 8000e94:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_USB;
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000e96:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e9a:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000e9c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000ea0:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ea6:	1d3b      	adds	r3, r7, #4
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	f001 ffdd 	bl	8002e68 <HAL_RCCEx_PeriphCLKConfig>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d001      	beq.n	8000eb8 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8000eb4:	f000 fa08 	bl	80012c8 <Error_Handler>
  }
}
 8000eb8:	bf00      	nop
 8000eba:	3750      	adds	r7, #80	; 0x50
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bd80      	pop	{r7, pc}

08000ec0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b084      	sub	sp, #16
 8000ec4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000ec6:	1d3b      	adds	r3, r7, #4
 8000ec8:	2200      	movs	r2, #0
 8000eca:	601a      	str	r2, [r3, #0]
 8000ecc:	605a      	str	r2, [r3, #4]
 8000ece:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000ed0:	4b18      	ldr	r3, [pc, #96]	; (8000f34 <MX_ADC1_Init+0x74>)
 8000ed2:	4a19      	ldr	r2, [pc, #100]	; (8000f38 <MX_ADC1_Init+0x78>)
 8000ed4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000ed6:	4b17      	ldr	r3, [pc, #92]	; (8000f34 <MX_ADC1_Init+0x74>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000edc:	4b15      	ldr	r3, [pc, #84]	; (8000f34 <MX_ADC1_Init+0x74>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000ee2:	4b14      	ldr	r3, [pc, #80]	; (8000f34 <MX_ADC1_Init+0x74>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ee8:	4b12      	ldr	r3, [pc, #72]	; (8000f34 <MX_ADC1_Init+0x74>)
 8000eea:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000eee:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ef0:	4b10      	ldr	r3, [pc, #64]	; (8000f34 <MX_ADC1_Init+0x74>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000ef6:	4b0f      	ldr	r3, [pc, #60]	; (8000f34 <MX_ADC1_Init+0x74>)
 8000ef8:	2201      	movs	r2, #1
 8000efa:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000efc:	480d      	ldr	r0, [pc, #52]	; (8000f34 <MX_ADC1_Init+0x74>)
 8000efe:	f000 fd09 	bl	8001914 <HAL_ADC_Init>
 8000f02:	4603      	mov	r3, r0
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d001      	beq.n	8000f0c <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000f08:	f000 f9de 	bl	80012c8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000f10:	2301      	movs	r3, #1
 8000f12:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000f14:	2300      	movs	r3, #0
 8000f16:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f18:	1d3b      	adds	r3, r7, #4
 8000f1a:	4619      	mov	r1, r3
 8000f1c:	4805      	ldr	r0, [pc, #20]	; (8000f34 <MX_ADC1_Init+0x74>)
 8000f1e:	f000 fdd1 	bl	8001ac4 <HAL_ADC_ConfigChannel>
 8000f22:	4603      	mov	r3, r0
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d001      	beq.n	8000f2c <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000f28:	f000 f9ce 	bl	80012c8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000f2c:	bf00      	nop
 8000f2e:	3710      	adds	r7, #16
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bd80      	pop	{r7, pc}
 8000f34:	20000604 	.word	0x20000604
 8000f38:	40012400 	.word	0x40012400

08000f3c <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8000f40:	4b16      	ldr	r3, [pc, #88]	; (8000f9c <MX_CAN_Init+0x60>)
 8000f42:	4a17      	ldr	r2, [pc, #92]	; (8000fa0 <MX_CAN_Init+0x64>)
 8000f44:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 8000f46:	4b15      	ldr	r3, [pc, #84]	; (8000f9c <MX_CAN_Init+0x60>)
 8000f48:	2210      	movs	r2, #16
 8000f4a:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000f4c:	4b13      	ldr	r3, [pc, #76]	; (8000f9c <MX_CAN_Init+0x60>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000f52:	4b12      	ldr	r3, [pc, #72]	; (8000f9c <MX_CAN_Init+0x60>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 8000f58:	4b10      	ldr	r3, [pc, #64]	; (8000f9c <MX_CAN_Init+0x60>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000f5e:	4b0f      	ldr	r3, [pc, #60]	; (8000f9c <MX_CAN_Init+0x60>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000f64:	4b0d      	ldr	r3, [pc, #52]	; (8000f9c <MX_CAN_Init+0x60>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8000f6a:	4b0c      	ldr	r3, [pc, #48]	; (8000f9c <MX_CAN_Init+0x60>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000f70:	4b0a      	ldr	r3, [pc, #40]	; (8000f9c <MX_CAN_Init+0x60>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8000f76:	4b09      	ldr	r3, [pc, #36]	; (8000f9c <MX_CAN_Init+0x60>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000f7c:	4b07      	ldr	r3, [pc, #28]	; (8000f9c <MX_CAN_Init+0x60>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000f82:	4b06      	ldr	r3, [pc, #24]	; (8000f9c <MX_CAN_Init+0x60>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000f88:	4804      	ldr	r0, [pc, #16]	; (8000f9c <MX_CAN_Init+0x60>)
 8000f8a:	f000 fed4 	bl	8001d36 <HAL_CAN_Init>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d001      	beq.n	8000f98 <MX_CAN_Init+0x5c>
  {
    Error_Handler();
 8000f94:	f000 f998 	bl	80012c8 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8000f98:	bf00      	nop
 8000f9a:	bd80      	pop	{r7, pc}
 8000f9c:	20000634 	.word	0x20000634
 8000fa0:	40006400 	.word	0x40006400

08000fa4 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b082      	sub	sp, #8
 8000fa8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000faa:	1d3b      	adds	r3, r7, #4
 8000fac:	2100      	movs	r1, #0
 8000fae:	460a      	mov	r2, r1
 8000fb0:	801a      	strh	r2, [r3, #0]
 8000fb2:	460a      	mov	r2, r1
 8000fb4:	709a      	strb	r2, [r3, #2]
  RTC_DateTypeDef DateToUpdate = {0};
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000fba:	4b1d      	ldr	r3, [pc, #116]	; (8001030 <MX_RTC_Init+0x8c>)
 8000fbc:	4a1d      	ldr	r2, [pc, #116]	; (8001034 <MX_RTC_Init+0x90>)
 8000fbe:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 8000fc0:	4b1b      	ldr	r3, [pc, #108]	; (8001030 <MX_RTC_Init+0x8c>)
 8000fc2:	f04f 32ff 	mov.w	r2, #4294967295
 8000fc6:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_NONE;
 8000fc8:	4b19      	ldr	r3, [pc, #100]	; (8001030 <MX_RTC_Init+0x8c>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000fce:	4818      	ldr	r0, [pc, #96]	; (8001030 <MX_RTC_Init+0x8c>)
 8000fd0:	f002 f8c0 	bl	8003154 <HAL_RTC_Init>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d001      	beq.n	8000fde <MX_RTC_Init+0x3a>
  {
    Error_Handler();
 8000fda:	f000 f975 	bl	80012c8 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	71bb      	strb	r3, [r7, #6]

  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000fea:	1d3b      	adds	r3, r7, #4
 8000fec:	2201      	movs	r2, #1
 8000fee:	4619      	mov	r1, r3
 8000ff0:	480f      	ldr	r0, [pc, #60]	; (8001030 <MX_RTC_Init+0x8c>)
 8000ff2:	f002 f945 	bl	8003280 <HAL_RTC_SetTime>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d001      	beq.n	8001000 <MX_RTC_Init+0x5c>
  {
    Error_Handler();
 8000ffc:	f000 f964 	bl	80012c8 <Error_Handler>
  }
  DateToUpdate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001000:	2301      	movs	r3, #1
 8001002:	703b      	strb	r3, [r7, #0]
  DateToUpdate.Month = RTC_MONTH_JANUARY;
 8001004:	2301      	movs	r3, #1
 8001006:	707b      	strb	r3, [r7, #1]
  DateToUpdate.Date = 0x1;
 8001008:	2301      	movs	r3, #1
 800100a:	70bb      	strb	r3, [r7, #2]
  DateToUpdate.Year = 0x0;
 800100c:	2300      	movs	r3, #0
 800100e:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BCD) != HAL_OK)
 8001010:	463b      	mov	r3, r7
 8001012:	2201      	movs	r2, #1
 8001014:	4619      	mov	r1, r3
 8001016:	4806      	ldr	r0, [pc, #24]	; (8001030 <MX_RTC_Init+0x8c>)
 8001018:	f002 f9ca 	bl	80033b0 <HAL_RTC_SetDate>
 800101c:	4603      	mov	r3, r0
 800101e:	2b00      	cmp	r3, #0
 8001020:	d001      	beq.n	8001026 <MX_RTC_Init+0x82>
  {
    Error_Handler();
 8001022:	f000 f951 	bl	80012c8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001026:	bf00      	nop
 8001028:	3708      	adds	r7, #8
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	2000065c 	.word	0x2000065c
 8001034:	40002800 	.word	0x40002800

08001038 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800103c:	4b17      	ldr	r3, [pc, #92]	; (800109c <MX_SPI2_Init+0x64>)
 800103e:	4a18      	ldr	r2, [pc, #96]	; (80010a0 <MX_SPI2_Init+0x68>)
 8001040:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001042:	4b16      	ldr	r3, [pc, #88]	; (800109c <MX_SPI2_Init+0x64>)
 8001044:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001048:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800104a:	4b14      	ldr	r3, [pc, #80]	; (800109c <MX_SPI2_Init+0x64>)
 800104c:	2200      	movs	r2, #0
 800104e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001050:	4b12      	ldr	r3, [pc, #72]	; (800109c <MX_SPI2_Init+0x64>)
 8001052:	2200      	movs	r2, #0
 8001054:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001056:	4b11      	ldr	r3, [pc, #68]	; (800109c <MX_SPI2_Init+0x64>)
 8001058:	2200      	movs	r2, #0
 800105a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800105c:	4b0f      	ldr	r3, [pc, #60]	; (800109c <MX_SPI2_Init+0x64>)
 800105e:	2200      	movs	r2, #0
 8001060:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8001062:	4b0e      	ldr	r3, [pc, #56]	; (800109c <MX_SPI2_Init+0x64>)
 8001064:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001068:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800106a:	4b0c      	ldr	r3, [pc, #48]	; (800109c <MX_SPI2_Init+0x64>)
 800106c:	2208      	movs	r2, #8
 800106e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001070:	4b0a      	ldr	r3, [pc, #40]	; (800109c <MX_SPI2_Init+0x64>)
 8001072:	2200      	movs	r2, #0
 8001074:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001076:	4b09      	ldr	r3, [pc, #36]	; (800109c <MX_SPI2_Init+0x64>)
 8001078:	2200      	movs	r2, #0
 800107a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800107c:	4b07      	ldr	r3, [pc, #28]	; (800109c <MX_SPI2_Init+0x64>)
 800107e:	2200      	movs	r2, #0
 8001080:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001082:	4b06      	ldr	r3, [pc, #24]	; (800109c <MX_SPI2_Init+0x64>)
 8001084:	220a      	movs	r2, #10
 8001086:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001088:	4804      	ldr	r0, [pc, #16]	; (800109c <MX_SPI2_Init+0x64>)
 800108a:	f002 fbf1 	bl	8003870 <HAL_SPI_Init>
 800108e:	4603      	mov	r3, r0
 8001090:	2b00      	cmp	r3, #0
 8001092:	d001      	beq.n	8001098 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001094:	f000 f918 	bl	80012c8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001098:	bf00      	nop
 800109a:	bd80      	pop	{r7, pc}
 800109c:	20000670 	.word	0x20000670
 80010a0:	40003800 	.word	0x40003800

080010a4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b092      	sub	sp, #72	; 0x48
 80010a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010aa:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80010ae:	2200      	movs	r2, #0
 80010b0:	601a      	str	r2, [r3, #0]
 80010b2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80010b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010b8:	2200      	movs	r2, #0
 80010ba:	601a      	str	r2, [r3, #0]
 80010bc:	605a      	str	r2, [r3, #4]
 80010be:	609a      	str	r2, [r3, #8]
 80010c0:	60da      	str	r2, [r3, #12]
 80010c2:	611a      	str	r2, [r3, #16]
 80010c4:	615a      	str	r2, [r3, #20]
 80010c6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80010c8:	1d3b      	adds	r3, r7, #4
 80010ca:	2220      	movs	r2, #32
 80010cc:	2100      	movs	r1, #0
 80010ce:	4618      	mov	r0, r3
 80010d0:	f003 fb70 	bl	80047b4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80010d4:	4b33      	ldr	r3, [pc, #204]	; (80011a4 <MX_TIM1_Init+0x100>)
 80010d6:	4a34      	ldr	r2, [pc, #208]	; (80011a8 <MX_TIM1_Init+0x104>)
 80010d8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80010da:	4b32      	ldr	r3, [pc, #200]	; (80011a4 <MX_TIM1_Init+0x100>)
 80010dc:	2200      	movs	r2, #0
 80010de:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010e0:	4b30      	ldr	r3, [pc, #192]	; (80011a4 <MX_TIM1_Init+0x100>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80010e6:	4b2f      	ldr	r3, [pc, #188]	; (80011a4 <MX_TIM1_Init+0x100>)
 80010e8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80010ec:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010ee:	4b2d      	ldr	r3, [pc, #180]	; (80011a4 <MX_TIM1_Init+0x100>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80010f4:	4b2b      	ldr	r3, [pc, #172]	; (80011a4 <MX_TIM1_Init+0x100>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010fa:	4b2a      	ldr	r3, [pc, #168]	; (80011a4 <MX_TIM1_Init+0x100>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001100:	4828      	ldr	r0, [pc, #160]	; (80011a4 <MX_TIM1_Init+0x100>)
 8001102:	f002 fe1b 	bl	8003d3c <HAL_TIM_PWM_Init>
 8001106:	4603      	mov	r3, r0
 8001108:	2b00      	cmp	r3, #0
 800110a:	d001      	beq.n	8001110 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 800110c:	f000 f8dc 	bl	80012c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001110:	2300      	movs	r3, #0
 8001112:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001114:	2300      	movs	r3, #0
 8001116:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001118:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800111c:	4619      	mov	r1, r3
 800111e:	4821      	ldr	r0, [pc, #132]	; (80011a4 <MX_TIM1_Init+0x100>)
 8001120:	f003 fa0e 	bl	8004540 <HAL_TIMEx_MasterConfigSynchronization>
 8001124:	4603      	mov	r3, r0
 8001126:	2b00      	cmp	r3, #0
 8001128:	d001      	beq.n	800112e <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 800112a:	f000 f8cd 	bl	80012c8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800112e:	2360      	movs	r3, #96	; 0x60
 8001130:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001132:	2300      	movs	r3, #0
 8001134:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001136:	2300      	movs	r3, #0
 8001138:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800113a:	2300      	movs	r3, #0
 800113c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800113e:	2300      	movs	r3, #0
 8001140:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001142:	2300      	movs	r3, #0
 8001144:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001146:	2300      	movs	r3, #0
 8001148:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800114a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800114e:	2200      	movs	r2, #0
 8001150:	4619      	mov	r1, r3
 8001152:	4814      	ldr	r0, [pc, #80]	; (80011a4 <MX_TIM1_Init+0x100>)
 8001154:	f002 fee4 	bl	8003f20 <HAL_TIM_PWM_ConfigChannel>
 8001158:	4603      	mov	r3, r0
 800115a:	2b00      	cmp	r3, #0
 800115c:	d001      	beq.n	8001162 <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 800115e:	f000 f8b3 	bl	80012c8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001162:	2300      	movs	r3, #0
 8001164:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001166:	2300      	movs	r3, #0
 8001168:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800116a:	2300      	movs	r3, #0
 800116c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800116e:	2300      	movs	r3, #0
 8001170:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001172:	2300      	movs	r3, #0
 8001174:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001176:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800117a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800117c:	2300      	movs	r3, #0
 800117e:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001180:	1d3b      	adds	r3, r7, #4
 8001182:	4619      	mov	r1, r3
 8001184:	4807      	ldr	r0, [pc, #28]	; (80011a4 <MX_TIM1_Init+0x100>)
 8001186:	f003 fa39 	bl	80045fc <HAL_TIMEx_ConfigBreakDeadTime>
 800118a:	4603      	mov	r3, r0
 800118c:	2b00      	cmp	r3, #0
 800118e:	d001      	beq.n	8001194 <MX_TIM1_Init+0xf0>
  {
    Error_Handler();
 8001190:	f000 f89a 	bl	80012c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001194:	4803      	ldr	r0, [pc, #12]	; (80011a4 <MX_TIM1_Init+0x100>)
 8001196:	f000 f9ed 	bl	8001574 <HAL_TIM_MspPostInit>

}
 800119a:	bf00      	nop
 800119c:	3748      	adds	r7, #72	; 0x48
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	200006c8 	.word	0x200006c8
 80011a8:	40012c00 	.word	0x40012c00

080011ac <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 80011b0:	4b0d      	ldr	r3, [pc, #52]	; (80011e8 <MX_USB_PCD_Init+0x3c>)
 80011b2:	4a0e      	ldr	r2, [pc, #56]	; (80011ec <MX_USB_PCD_Init+0x40>)
 80011b4:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80011b6:	4b0c      	ldr	r3, [pc, #48]	; (80011e8 <MX_USB_PCD_Init+0x3c>)
 80011b8:	2208      	movs	r2, #8
 80011ba:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80011bc:	4b0a      	ldr	r3, [pc, #40]	; (80011e8 <MX_USB_PCD_Init+0x3c>)
 80011be:	2202      	movs	r2, #2
 80011c0:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80011c2:	4b09      	ldr	r3, [pc, #36]	; (80011e8 <MX_USB_PCD_Init+0x3c>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80011c8:	4b07      	ldr	r3, [pc, #28]	; (80011e8 <MX_USB_PCD_Init+0x3c>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80011ce:	4b06      	ldr	r3, [pc, #24]	; (80011e8 <MX_USB_PCD_Init+0x3c>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80011d4:	4804      	ldr	r0, [pc, #16]	; (80011e8 <MX_USB_PCD_Init+0x3c>)
 80011d6:	f001 f929 	bl	800242c <HAL_PCD_Init>
 80011da:	4603      	mov	r3, r0
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d001      	beq.n	80011e4 <MX_USB_PCD_Init+0x38>
  {
    Error_Handler();
 80011e0:	f000 f872 	bl	80012c8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 80011e4:	bf00      	nop
 80011e6:	bd80      	pop	{r7, pc}
 80011e8:	20000710 	.word	0x20000710
 80011ec:	40005c00 	.word	0x40005c00

080011f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b088      	sub	sp, #32
 80011f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011f6:	f107 0310 	add.w	r3, r7, #16
 80011fa:	2200      	movs	r2, #0
 80011fc:	601a      	str	r2, [r3, #0]
 80011fe:	605a      	str	r2, [r3, #4]
 8001200:	609a      	str	r2, [r3, #8]
 8001202:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001204:	4b2d      	ldr	r3, [pc, #180]	; (80012bc <MX_GPIO_Init+0xcc>)
 8001206:	699b      	ldr	r3, [r3, #24]
 8001208:	4a2c      	ldr	r2, [pc, #176]	; (80012bc <MX_GPIO_Init+0xcc>)
 800120a:	f043 0310 	orr.w	r3, r3, #16
 800120e:	6193      	str	r3, [r2, #24]
 8001210:	4b2a      	ldr	r3, [pc, #168]	; (80012bc <MX_GPIO_Init+0xcc>)
 8001212:	699b      	ldr	r3, [r3, #24]
 8001214:	f003 0310 	and.w	r3, r3, #16
 8001218:	60fb      	str	r3, [r7, #12]
 800121a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800121c:	4b27      	ldr	r3, [pc, #156]	; (80012bc <MX_GPIO_Init+0xcc>)
 800121e:	699b      	ldr	r3, [r3, #24]
 8001220:	4a26      	ldr	r2, [pc, #152]	; (80012bc <MX_GPIO_Init+0xcc>)
 8001222:	f043 0320 	orr.w	r3, r3, #32
 8001226:	6193      	str	r3, [r2, #24]
 8001228:	4b24      	ldr	r3, [pc, #144]	; (80012bc <MX_GPIO_Init+0xcc>)
 800122a:	699b      	ldr	r3, [r3, #24]
 800122c:	f003 0320 	and.w	r3, r3, #32
 8001230:	60bb      	str	r3, [r7, #8]
 8001232:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001234:	4b21      	ldr	r3, [pc, #132]	; (80012bc <MX_GPIO_Init+0xcc>)
 8001236:	699b      	ldr	r3, [r3, #24]
 8001238:	4a20      	ldr	r2, [pc, #128]	; (80012bc <MX_GPIO_Init+0xcc>)
 800123a:	f043 0304 	orr.w	r3, r3, #4
 800123e:	6193      	str	r3, [r2, #24]
 8001240:	4b1e      	ldr	r3, [pc, #120]	; (80012bc <MX_GPIO_Init+0xcc>)
 8001242:	699b      	ldr	r3, [r3, #24]
 8001244:	f003 0304 	and.w	r3, r3, #4
 8001248:	607b      	str	r3, [r7, #4]
 800124a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800124c:	4b1b      	ldr	r3, [pc, #108]	; (80012bc <MX_GPIO_Init+0xcc>)
 800124e:	699b      	ldr	r3, [r3, #24]
 8001250:	4a1a      	ldr	r2, [pc, #104]	; (80012bc <MX_GPIO_Init+0xcc>)
 8001252:	f043 0308 	orr.w	r3, r3, #8
 8001256:	6193      	str	r3, [r2, #24]
 8001258:	4b18      	ldr	r3, [pc, #96]	; (80012bc <MX_GPIO_Init+0xcc>)
 800125a:	699b      	ldr	r3, [r3, #24]
 800125c:	f003 0308 	and.w	r3, r3, #8
 8001260:	603b      	str	r3, [r7, #0]
 8001262:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SHUTDOWN_GPIO_Port, SHUTDOWN_Pin, GPIO_PIN_SET);
 8001264:	2201      	movs	r2, #1
 8001266:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800126a:	4815      	ldr	r0, [pc, #84]	; (80012c0 <MX_GPIO_Init+0xd0>)
 800126c:	f001 f8c6 	bl	80023fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DISP_RS_Pin|DISP_RSE_Pin, GPIO_PIN_RESET);
 8001270:	2200      	movs	r2, #0
 8001272:	2106      	movs	r1, #6
 8001274:	4813      	ldr	r0, [pc, #76]	; (80012c4 <MX_GPIO_Init+0xd4>)
 8001276:	f001 f8c1 	bl	80023fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SHUTDOWN_Pin */
  GPIO_InitStruct.Pin = SHUTDOWN_Pin;
 800127a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800127e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001280:	2311      	movs	r3, #17
 8001282:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001284:	2300      	movs	r3, #0
 8001286:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001288:	2302      	movs	r3, #2
 800128a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SHUTDOWN_GPIO_Port, &GPIO_InitStruct);
 800128c:	f107 0310 	add.w	r3, r7, #16
 8001290:	4619      	mov	r1, r3
 8001292:	480b      	ldr	r0, [pc, #44]	; (80012c0 <MX_GPIO_Init+0xd0>)
 8001294:	f000 ff2e 	bl	80020f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : DISP_RS_Pin DISP_RSE_Pin */
  GPIO_InitStruct.Pin = DISP_RS_Pin|DISP_RSE_Pin;
 8001298:	2306      	movs	r3, #6
 800129a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800129c:	2301      	movs	r3, #1
 800129e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a0:	2300      	movs	r3, #0
 80012a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012a4:	2302      	movs	r3, #2
 80012a6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012a8:	f107 0310 	add.w	r3, r7, #16
 80012ac:	4619      	mov	r1, r3
 80012ae:	4805      	ldr	r0, [pc, #20]	; (80012c4 <MX_GPIO_Init+0xd4>)
 80012b0:	f000 ff20 	bl	80020f4 <HAL_GPIO_Init>

}
 80012b4:	bf00      	nop
 80012b6:	3720      	adds	r7, #32
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bd80      	pop	{r7, pc}
 80012bc:	40021000 	.word	0x40021000
 80012c0:	40011000 	.word	0x40011000
 80012c4:	40010800 	.word	0x40010800

080012c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012c8:	b480      	push	{r7}
 80012ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012cc:	b672      	cpsid	i
}
 80012ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012d0:	e7fe      	b.n	80012d0 <Error_Handler+0x8>
	...

080012d4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012d4:	b480      	push	{r7}
 80012d6:	b085      	sub	sp, #20
 80012d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80012da:	4b15      	ldr	r3, [pc, #84]	; (8001330 <HAL_MspInit+0x5c>)
 80012dc:	699b      	ldr	r3, [r3, #24]
 80012de:	4a14      	ldr	r2, [pc, #80]	; (8001330 <HAL_MspInit+0x5c>)
 80012e0:	f043 0301 	orr.w	r3, r3, #1
 80012e4:	6193      	str	r3, [r2, #24]
 80012e6:	4b12      	ldr	r3, [pc, #72]	; (8001330 <HAL_MspInit+0x5c>)
 80012e8:	699b      	ldr	r3, [r3, #24]
 80012ea:	f003 0301 	and.w	r3, r3, #1
 80012ee:	60bb      	str	r3, [r7, #8]
 80012f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012f2:	4b0f      	ldr	r3, [pc, #60]	; (8001330 <HAL_MspInit+0x5c>)
 80012f4:	69db      	ldr	r3, [r3, #28]
 80012f6:	4a0e      	ldr	r2, [pc, #56]	; (8001330 <HAL_MspInit+0x5c>)
 80012f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012fc:	61d3      	str	r3, [r2, #28]
 80012fe:	4b0c      	ldr	r3, [pc, #48]	; (8001330 <HAL_MspInit+0x5c>)
 8001300:	69db      	ldr	r3, [r3, #28]
 8001302:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001306:	607b      	str	r3, [r7, #4]
 8001308:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800130a:	4b0a      	ldr	r3, [pc, #40]	; (8001334 <HAL_MspInit+0x60>)
 800130c:	685b      	ldr	r3, [r3, #4]
 800130e:	60fb      	str	r3, [r7, #12]
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001316:	60fb      	str	r3, [r7, #12]
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800131e:	60fb      	str	r3, [r7, #12]
 8001320:	4a04      	ldr	r2, [pc, #16]	; (8001334 <HAL_MspInit+0x60>)
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001326:	bf00      	nop
 8001328:	3714      	adds	r7, #20
 800132a:	46bd      	mov	sp, r7
 800132c:	bc80      	pop	{r7}
 800132e:	4770      	bx	lr
 8001330:	40021000 	.word	0x40021000
 8001334:	40010000 	.word	0x40010000

08001338 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b088      	sub	sp, #32
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001340:	f107 0310 	add.w	r3, r7, #16
 8001344:	2200      	movs	r2, #0
 8001346:	601a      	str	r2, [r3, #0]
 8001348:	605a      	str	r2, [r3, #4]
 800134a:	609a      	str	r2, [r3, #8]
 800134c:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	4a14      	ldr	r2, [pc, #80]	; (80013a4 <HAL_ADC_MspInit+0x6c>)
 8001354:	4293      	cmp	r3, r2
 8001356:	d121      	bne.n	800139c <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001358:	4b13      	ldr	r3, [pc, #76]	; (80013a8 <HAL_ADC_MspInit+0x70>)
 800135a:	699b      	ldr	r3, [r3, #24]
 800135c:	4a12      	ldr	r2, [pc, #72]	; (80013a8 <HAL_ADC_MspInit+0x70>)
 800135e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001362:	6193      	str	r3, [r2, #24]
 8001364:	4b10      	ldr	r3, [pc, #64]	; (80013a8 <HAL_ADC_MspInit+0x70>)
 8001366:	699b      	ldr	r3, [r3, #24]
 8001368:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800136c:	60fb      	str	r3, [r7, #12]
 800136e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001370:	4b0d      	ldr	r3, [pc, #52]	; (80013a8 <HAL_ADC_MspInit+0x70>)
 8001372:	699b      	ldr	r3, [r3, #24]
 8001374:	4a0c      	ldr	r2, [pc, #48]	; (80013a8 <HAL_ADC_MspInit+0x70>)
 8001376:	f043 0304 	orr.w	r3, r3, #4
 800137a:	6193      	str	r3, [r2, #24]
 800137c:	4b0a      	ldr	r3, [pc, #40]	; (80013a8 <HAL_ADC_MspInit+0x70>)
 800137e:	699b      	ldr	r3, [r3, #24]
 8001380:	f003 0304 	and.w	r3, r3, #4
 8001384:	60bb      	str	r3, [r7, #8]
 8001386:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001388:	2301      	movs	r3, #1
 800138a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800138c:	2303      	movs	r3, #3
 800138e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001390:	f107 0310 	add.w	r3, r7, #16
 8001394:	4619      	mov	r1, r3
 8001396:	4805      	ldr	r0, [pc, #20]	; (80013ac <HAL_ADC_MspInit+0x74>)
 8001398:	f000 feac 	bl	80020f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800139c:	bf00      	nop
 800139e:	3720      	adds	r7, #32
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bd80      	pop	{r7, pc}
 80013a4:	40012400 	.word	0x40012400
 80013a8:	40021000 	.word	0x40021000
 80013ac:	40010800 	.word	0x40010800

080013b0 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b08a      	sub	sp, #40	; 0x28
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013b8:	f107 0314 	add.w	r3, r7, #20
 80013bc:	2200      	movs	r2, #0
 80013be:	601a      	str	r2, [r3, #0]
 80013c0:	605a      	str	r2, [r3, #4]
 80013c2:	609a      	str	r2, [r3, #8]
 80013c4:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	4a25      	ldr	r2, [pc, #148]	; (8001460 <HAL_CAN_MspInit+0xb0>)
 80013cc:	4293      	cmp	r3, r2
 80013ce:	d143      	bne.n	8001458 <HAL_CAN_MspInit+0xa8>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80013d0:	4b24      	ldr	r3, [pc, #144]	; (8001464 <HAL_CAN_MspInit+0xb4>)
 80013d2:	69db      	ldr	r3, [r3, #28]
 80013d4:	4a23      	ldr	r2, [pc, #140]	; (8001464 <HAL_CAN_MspInit+0xb4>)
 80013d6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80013da:	61d3      	str	r3, [r2, #28]
 80013dc:	4b21      	ldr	r3, [pc, #132]	; (8001464 <HAL_CAN_MspInit+0xb4>)
 80013de:	69db      	ldr	r3, [r3, #28]
 80013e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013e4:	613b      	str	r3, [r7, #16]
 80013e6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013e8:	4b1e      	ldr	r3, [pc, #120]	; (8001464 <HAL_CAN_MspInit+0xb4>)
 80013ea:	699b      	ldr	r3, [r3, #24]
 80013ec:	4a1d      	ldr	r2, [pc, #116]	; (8001464 <HAL_CAN_MspInit+0xb4>)
 80013ee:	f043 0308 	orr.w	r3, r3, #8
 80013f2:	6193      	str	r3, [r2, #24]
 80013f4:	4b1b      	ldr	r3, [pc, #108]	; (8001464 <HAL_CAN_MspInit+0xb4>)
 80013f6:	699b      	ldr	r3, [r3, #24]
 80013f8:	f003 0308 	and.w	r3, r3, #8
 80013fc:	60fb      	str	r3, [r7, #12]
 80013fe:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001400:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001404:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001406:	2300      	movs	r3, #0
 8001408:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800140a:	2300      	movs	r3, #0
 800140c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800140e:	f107 0314 	add.w	r3, r7, #20
 8001412:	4619      	mov	r1, r3
 8001414:	4814      	ldr	r0, [pc, #80]	; (8001468 <HAL_CAN_MspInit+0xb8>)
 8001416:	f000 fe6d 	bl	80020f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800141a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800141e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001420:	2302      	movs	r3, #2
 8001422:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001424:	2303      	movs	r3, #3
 8001426:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001428:	f107 0314 	add.w	r3, r7, #20
 800142c:	4619      	mov	r1, r3
 800142e:	480e      	ldr	r0, [pc, #56]	; (8001468 <HAL_CAN_MspInit+0xb8>)
 8001430:	f000 fe60 	bl	80020f4 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_CAN1_2();
 8001434:	4b0d      	ldr	r3, [pc, #52]	; (800146c <HAL_CAN_MspInit+0xbc>)
 8001436:	685b      	ldr	r3, [r3, #4]
 8001438:	627b      	str	r3, [r7, #36]	; 0x24
 800143a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800143c:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8001440:	627b      	str	r3, [r7, #36]	; 0x24
 8001442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001444:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001448:	627b      	str	r3, [r7, #36]	; 0x24
 800144a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800144c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001450:	627b      	str	r3, [r7, #36]	; 0x24
 8001452:	4a06      	ldr	r2, [pc, #24]	; (800146c <HAL_CAN_MspInit+0xbc>)
 8001454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001456:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8001458:	bf00      	nop
 800145a:	3728      	adds	r7, #40	; 0x28
 800145c:	46bd      	mov	sp, r7
 800145e:	bd80      	pop	{r7, pc}
 8001460:	40006400 	.word	0x40006400
 8001464:	40021000 	.word	0x40021000
 8001468:	40010c00 	.word	0x40010c00
 800146c:	40010000 	.word	0x40010000

08001470 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b084      	sub	sp, #16
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	4a0b      	ldr	r2, [pc, #44]	; (80014ac <HAL_RTC_MspInit+0x3c>)
 800147e:	4293      	cmp	r3, r2
 8001480:	d110      	bne.n	80014a4 <HAL_RTC_MspInit+0x34>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 8001482:	f001 f8df 	bl	8002644 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 8001486:	4b0a      	ldr	r3, [pc, #40]	; (80014b0 <HAL_RTC_MspInit+0x40>)
 8001488:	69db      	ldr	r3, [r3, #28]
 800148a:	4a09      	ldr	r2, [pc, #36]	; (80014b0 <HAL_RTC_MspInit+0x40>)
 800148c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001490:	61d3      	str	r3, [r2, #28]
 8001492:	4b07      	ldr	r3, [pc, #28]	; (80014b0 <HAL_RTC_MspInit+0x40>)
 8001494:	69db      	ldr	r3, [r3, #28]
 8001496:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800149a:	60fb      	str	r3, [r7, #12]
 800149c:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800149e:	4b05      	ldr	r3, [pc, #20]	; (80014b4 <HAL_RTC_MspInit+0x44>)
 80014a0:	2201      	movs	r2, #1
 80014a2:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80014a4:	bf00      	nop
 80014a6:	3710      	adds	r7, #16
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bd80      	pop	{r7, pc}
 80014ac:	40002800 	.word	0x40002800
 80014b0:	40021000 	.word	0x40021000
 80014b4:	4242043c 	.word	0x4242043c

080014b8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b088      	sub	sp, #32
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014c0:	f107 0310 	add.w	r3, r7, #16
 80014c4:	2200      	movs	r2, #0
 80014c6:	601a      	str	r2, [r3, #0]
 80014c8:	605a      	str	r2, [r3, #4]
 80014ca:	609a      	str	r2, [r3, #8]
 80014cc:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI2)
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	4a16      	ldr	r2, [pc, #88]	; (800152c <HAL_SPI_MspInit+0x74>)
 80014d4:	4293      	cmp	r3, r2
 80014d6:	d124      	bne.n	8001522 <HAL_SPI_MspInit+0x6a>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80014d8:	4b15      	ldr	r3, [pc, #84]	; (8001530 <HAL_SPI_MspInit+0x78>)
 80014da:	69db      	ldr	r3, [r3, #28]
 80014dc:	4a14      	ldr	r2, [pc, #80]	; (8001530 <HAL_SPI_MspInit+0x78>)
 80014de:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014e2:	61d3      	str	r3, [r2, #28]
 80014e4:	4b12      	ldr	r3, [pc, #72]	; (8001530 <HAL_SPI_MspInit+0x78>)
 80014e6:	69db      	ldr	r3, [r3, #28]
 80014e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014ec:	60fb      	str	r3, [r7, #12]
 80014ee:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014f0:	4b0f      	ldr	r3, [pc, #60]	; (8001530 <HAL_SPI_MspInit+0x78>)
 80014f2:	699b      	ldr	r3, [r3, #24]
 80014f4:	4a0e      	ldr	r2, [pc, #56]	; (8001530 <HAL_SPI_MspInit+0x78>)
 80014f6:	f043 0308 	orr.w	r3, r3, #8
 80014fa:	6193      	str	r3, [r2, #24]
 80014fc:	4b0c      	ldr	r3, [pc, #48]	; (8001530 <HAL_SPI_MspInit+0x78>)
 80014fe:	699b      	ldr	r3, [r3, #24]
 8001500:	f003 0308 	and.w	r3, r3, #8
 8001504:	60bb      	str	r3, [r7, #8]
 8001506:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB12     ------> SPI2_NSS
    PB13     ------> SPI2_SCK
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = DISP_SPI_CS_Pin|DISP_SPI_SCK_Pin|GPIO_PIN_15;
 8001508:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 800150c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800150e:	2302      	movs	r3, #2
 8001510:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001512:	2303      	movs	r3, #3
 8001514:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001516:	f107 0310 	add.w	r3, r7, #16
 800151a:	4619      	mov	r1, r3
 800151c:	4805      	ldr	r0, [pc, #20]	; (8001534 <HAL_SPI_MspInit+0x7c>)
 800151e:	f000 fde9 	bl	80020f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001522:	bf00      	nop
 8001524:	3720      	adds	r7, #32
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}
 800152a:	bf00      	nop
 800152c:	40003800 	.word	0x40003800
 8001530:	40021000 	.word	0x40021000
 8001534:	40010c00 	.word	0x40010c00

08001538 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001538:	b480      	push	{r7}
 800153a:	b085      	sub	sp, #20
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	4a09      	ldr	r2, [pc, #36]	; (800156c <HAL_TIM_PWM_MspInit+0x34>)
 8001546:	4293      	cmp	r3, r2
 8001548:	d10b      	bne.n	8001562 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800154a:	4b09      	ldr	r3, [pc, #36]	; (8001570 <HAL_TIM_PWM_MspInit+0x38>)
 800154c:	699b      	ldr	r3, [r3, #24]
 800154e:	4a08      	ldr	r2, [pc, #32]	; (8001570 <HAL_TIM_PWM_MspInit+0x38>)
 8001550:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001554:	6193      	str	r3, [r2, #24]
 8001556:	4b06      	ldr	r3, [pc, #24]	; (8001570 <HAL_TIM_PWM_MspInit+0x38>)
 8001558:	699b      	ldr	r3, [r3, #24]
 800155a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800155e:	60fb      	str	r3, [r7, #12]
 8001560:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001562:	bf00      	nop
 8001564:	3714      	adds	r7, #20
 8001566:	46bd      	mov	sp, r7
 8001568:	bc80      	pop	{r7}
 800156a:	4770      	bx	lr
 800156c:	40012c00 	.word	0x40012c00
 8001570:	40021000 	.word	0x40021000

08001574 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b088      	sub	sp, #32
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800157c:	f107 0310 	add.w	r3, r7, #16
 8001580:	2200      	movs	r2, #0
 8001582:	601a      	str	r2, [r3, #0]
 8001584:	605a      	str	r2, [r3, #4]
 8001586:	609a      	str	r2, [r3, #8]
 8001588:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	4a10      	ldr	r2, [pc, #64]	; (80015d0 <HAL_TIM_MspPostInit+0x5c>)
 8001590:	4293      	cmp	r3, r2
 8001592:	d118      	bne.n	80015c6 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001594:	4b0f      	ldr	r3, [pc, #60]	; (80015d4 <HAL_TIM_MspPostInit+0x60>)
 8001596:	699b      	ldr	r3, [r3, #24]
 8001598:	4a0e      	ldr	r2, [pc, #56]	; (80015d4 <HAL_TIM_MspPostInit+0x60>)
 800159a:	f043 0304 	orr.w	r3, r3, #4
 800159e:	6193      	str	r3, [r2, #24]
 80015a0:	4b0c      	ldr	r3, [pc, #48]	; (80015d4 <HAL_TIM_MspPostInit+0x60>)
 80015a2:	699b      	ldr	r3, [r3, #24]
 80015a4:	f003 0304 	and.w	r3, r3, #4
 80015a8:	60fb      	str	r3, [r7, #12]
 80015aa:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = DISP_BRIGHT_PWM_Pin;
 80015ac:	f44f 7380 	mov.w	r3, #256	; 0x100
 80015b0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015b2:	2302      	movs	r3, #2
 80015b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015b6:	2302      	movs	r3, #2
 80015b8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISP_BRIGHT_PWM_GPIO_Port, &GPIO_InitStruct);
 80015ba:	f107 0310 	add.w	r3, r7, #16
 80015be:	4619      	mov	r1, r3
 80015c0:	4805      	ldr	r0, [pc, #20]	; (80015d8 <HAL_TIM_MspPostInit+0x64>)
 80015c2:	f000 fd97 	bl	80020f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80015c6:	bf00      	nop
 80015c8:	3720      	adds	r7, #32
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	bf00      	nop
 80015d0:	40012c00 	.word	0x40012c00
 80015d4:	40021000 	.word	0x40021000
 80015d8:	40010800 	.word	0x40010800

080015dc <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80015dc:	b480      	push	{r7}
 80015de:	b085      	sub	sp, #20
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  if(hpcd->Instance==USB)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	4a09      	ldr	r2, [pc, #36]	; (8001610 <HAL_PCD_MspInit+0x34>)
 80015ea:	4293      	cmp	r3, r2
 80015ec:	d10b      	bne.n	8001606 <HAL_PCD_MspInit+0x2a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80015ee:	4b09      	ldr	r3, [pc, #36]	; (8001614 <HAL_PCD_MspInit+0x38>)
 80015f0:	69db      	ldr	r3, [r3, #28]
 80015f2:	4a08      	ldr	r2, [pc, #32]	; (8001614 <HAL_PCD_MspInit+0x38>)
 80015f4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80015f8:	61d3      	str	r3, [r2, #28]
 80015fa:	4b06      	ldr	r3, [pc, #24]	; (8001614 <HAL_PCD_MspInit+0x38>)
 80015fc:	69db      	ldr	r3, [r3, #28]
 80015fe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001602:	60fb      	str	r3, [r7, #12]
 8001604:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8001606:	bf00      	nop
 8001608:	3714      	adds	r7, #20
 800160a:	46bd      	mov	sp, r7
 800160c:	bc80      	pop	{r7}
 800160e:	4770      	bx	lr
 8001610:	40005c00 	.word	0x40005c00
 8001614:	40021000 	.word	0x40021000

08001618 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001618:	b480      	push	{r7}
 800161a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800161c:	e7fe      	b.n	800161c <NMI_Handler+0x4>

0800161e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800161e:	b480      	push	{r7}
 8001620:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001622:	e7fe      	b.n	8001622 <HardFault_Handler+0x4>

08001624 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001624:	b480      	push	{r7}
 8001626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001628:	e7fe      	b.n	8001628 <MemManage_Handler+0x4>

0800162a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800162a:	b480      	push	{r7}
 800162c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800162e:	e7fe      	b.n	800162e <BusFault_Handler+0x4>

08001630 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001630:	b480      	push	{r7}
 8001632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001634:	e7fe      	b.n	8001634 <UsageFault_Handler+0x4>

08001636 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001636:	b480      	push	{r7}
 8001638:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800163a:	bf00      	nop
 800163c:	46bd      	mov	sp, r7
 800163e:	bc80      	pop	{r7}
 8001640:	4770      	bx	lr

08001642 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001642:	b480      	push	{r7}
 8001644:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001646:	bf00      	nop
 8001648:	46bd      	mov	sp, r7
 800164a:	bc80      	pop	{r7}
 800164c:	4770      	bx	lr

0800164e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800164e:	b480      	push	{r7}
 8001650:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001652:	bf00      	nop
 8001654:	46bd      	mov	sp, r7
 8001656:	bc80      	pop	{r7}
 8001658:	4770      	bx	lr

0800165a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800165a:	b580      	push	{r7, lr}
 800165c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800165e:	f000 f919 	bl	8001894 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001662:	bf00      	nop
 8001664:	bd80      	pop	{r7, pc}

08001666 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001666:	b480      	push	{r7}
 8001668:	af00      	add	r7, sp, #0
	return 1;
 800166a:	2301      	movs	r3, #1
}
 800166c:	4618      	mov	r0, r3
 800166e:	46bd      	mov	sp, r7
 8001670:	bc80      	pop	{r7}
 8001672:	4770      	bx	lr

08001674 <_kill>:

int _kill(int pid, int sig)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b082      	sub	sp, #8
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
 800167c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800167e:	f003 f86f 	bl	8004760 <__errno>
 8001682:	4603      	mov	r3, r0
 8001684:	2216      	movs	r2, #22
 8001686:	601a      	str	r2, [r3, #0]
	return -1;
 8001688:	f04f 33ff 	mov.w	r3, #4294967295
}
 800168c:	4618      	mov	r0, r3
 800168e:	3708      	adds	r7, #8
 8001690:	46bd      	mov	sp, r7
 8001692:	bd80      	pop	{r7, pc}

08001694 <_exit>:

void _exit (int status)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b082      	sub	sp, #8
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800169c:	f04f 31ff 	mov.w	r1, #4294967295
 80016a0:	6878      	ldr	r0, [r7, #4]
 80016a2:	f7ff ffe7 	bl	8001674 <_kill>
	while (1) {}		/* Make sure we hang here */
 80016a6:	e7fe      	b.n	80016a6 <_exit+0x12>

080016a8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b086      	sub	sp, #24
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	60f8      	str	r0, [r7, #12]
 80016b0:	60b9      	str	r1, [r7, #8]
 80016b2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016b4:	2300      	movs	r3, #0
 80016b6:	617b      	str	r3, [r7, #20]
 80016b8:	e00a      	b.n	80016d0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80016ba:	f3af 8000 	nop.w
 80016be:	4601      	mov	r1, r0
 80016c0:	68bb      	ldr	r3, [r7, #8]
 80016c2:	1c5a      	adds	r2, r3, #1
 80016c4:	60ba      	str	r2, [r7, #8]
 80016c6:	b2ca      	uxtb	r2, r1
 80016c8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016ca:	697b      	ldr	r3, [r7, #20]
 80016cc:	3301      	adds	r3, #1
 80016ce:	617b      	str	r3, [r7, #20]
 80016d0:	697a      	ldr	r2, [r7, #20]
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	429a      	cmp	r2, r3
 80016d6:	dbf0      	blt.n	80016ba <_read+0x12>
	}

return len;
 80016d8:	687b      	ldr	r3, [r7, #4]
}
 80016da:	4618      	mov	r0, r3
 80016dc:	3718      	adds	r7, #24
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}

080016e2 <_close>:
	}
	return len;
}

int _close(int file)
{
 80016e2:	b480      	push	{r7}
 80016e4:	b083      	sub	sp, #12
 80016e6:	af00      	add	r7, sp, #0
 80016e8:	6078      	str	r0, [r7, #4]
	return -1;
 80016ea:	f04f 33ff 	mov.w	r3, #4294967295
}
 80016ee:	4618      	mov	r0, r3
 80016f0:	370c      	adds	r7, #12
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bc80      	pop	{r7}
 80016f6:	4770      	bx	lr

080016f8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80016f8:	b480      	push	{r7}
 80016fa:	b083      	sub	sp, #12
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
 8001700:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001702:	683b      	ldr	r3, [r7, #0]
 8001704:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001708:	605a      	str	r2, [r3, #4]
	return 0;
 800170a:	2300      	movs	r3, #0
}
 800170c:	4618      	mov	r0, r3
 800170e:	370c      	adds	r7, #12
 8001710:	46bd      	mov	sp, r7
 8001712:	bc80      	pop	{r7}
 8001714:	4770      	bx	lr

08001716 <_isatty>:

int _isatty(int file)
{
 8001716:	b480      	push	{r7}
 8001718:	b083      	sub	sp, #12
 800171a:	af00      	add	r7, sp, #0
 800171c:	6078      	str	r0, [r7, #4]
	return 1;
 800171e:	2301      	movs	r3, #1
}
 8001720:	4618      	mov	r0, r3
 8001722:	370c      	adds	r7, #12
 8001724:	46bd      	mov	sp, r7
 8001726:	bc80      	pop	{r7}
 8001728:	4770      	bx	lr

0800172a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800172a:	b480      	push	{r7}
 800172c:	b085      	sub	sp, #20
 800172e:	af00      	add	r7, sp, #0
 8001730:	60f8      	str	r0, [r7, #12]
 8001732:	60b9      	str	r1, [r7, #8]
 8001734:	607a      	str	r2, [r7, #4]
	return 0;
 8001736:	2300      	movs	r3, #0
}
 8001738:	4618      	mov	r0, r3
 800173a:	3714      	adds	r7, #20
 800173c:	46bd      	mov	sp, r7
 800173e:	bc80      	pop	{r7}
 8001740:	4770      	bx	lr
	...

08001744 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b086      	sub	sp, #24
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800174c:	4a14      	ldr	r2, [pc, #80]	; (80017a0 <_sbrk+0x5c>)
 800174e:	4b15      	ldr	r3, [pc, #84]	; (80017a4 <_sbrk+0x60>)
 8001750:	1ad3      	subs	r3, r2, r3
 8001752:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001754:	697b      	ldr	r3, [r7, #20]
 8001756:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001758:	4b13      	ldr	r3, [pc, #76]	; (80017a8 <_sbrk+0x64>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	2b00      	cmp	r3, #0
 800175e:	d102      	bne.n	8001766 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001760:	4b11      	ldr	r3, [pc, #68]	; (80017a8 <_sbrk+0x64>)
 8001762:	4a12      	ldr	r2, [pc, #72]	; (80017ac <_sbrk+0x68>)
 8001764:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001766:	4b10      	ldr	r3, [pc, #64]	; (80017a8 <_sbrk+0x64>)
 8001768:	681a      	ldr	r2, [r3, #0]
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	4413      	add	r3, r2
 800176e:	693a      	ldr	r2, [r7, #16]
 8001770:	429a      	cmp	r2, r3
 8001772:	d207      	bcs.n	8001784 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001774:	f002 fff4 	bl	8004760 <__errno>
 8001778:	4603      	mov	r3, r0
 800177a:	220c      	movs	r2, #12
 800177c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800177e:	f04f 33ff 	mov.w	r3, #4294967295
 8001782:	e009      	b.n	8001798 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001784:	4b08      	ldr	r3, [pc, #32]	; (80017a8 <_sbrk+0x64>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800178a:	4b07      	ldr	r3, [pc, #28]	; (80017a8 <_sbrk+0x64>)
 800178c:	681a      	ldr	r2, [r3, #0]
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	4413      	add	r3, r2
 8001792:	4a05      	ldr	r2, [pc, #20]	; (80017a8 <_sbrk+0x64>)
 8001794:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001796:	68fb      	ldr	r3, [r7, #12]
}
 8001798:	4618      	mov	r0, r3
 800179a:	3718      	adds	r7, #24
 800179c:	46bd      	mov	sp, r7
 800179e:	bd80      	pop	{r7, pc}
 80017a0:	20005000 	.word	0x20005000
 80017a4:	00000400 	.word	0x00000400
 80017a8:	200009fc 	.word	0x200009fc
 80017ac:	20000a18 	.word	0x20000a18

080017b0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80017b0:	b480      	push	{r7}
 80017b2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017b4:	bf00      	nop
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bc80      	pop	{r7}
 80017ba:	4770      	bx	lr

080017bc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80017bc:	480c      	ldr	r0, [pc, #48]	; (80017f0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80017be:	490d      	ldr	r1, [pc, #52]	; (80017f4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80017c0:	4a0d      	ldr	r2, [pc, #52]	; (80017f8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80017c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017c4:	e002      	b.n	80017cc <LoopCopyDataInit>

080017c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017ca:	3304      	adds	r3, #4

080017cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017d0:	d3f9      	bcc.n	80017c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017d2:	4a0a      	ldr	r2, [pc, #40]	; (80017fc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80017d4:	4c0a      	ldr	r4, [pc, #40]	; (8001800 <LoopFillZerobss+0x22>)
  movs r3, #0
 80017d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017d8:	e001      	b.n	80017de <LoopFillZerobss>

080017da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017dc:	3204      	adds	r2, #4

080017de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017e0:	d3fb      	bcc.n	80017da <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80017e2:	f7ff ffe5 	bl	80017b0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80017e6:	f002 ffc1 	bl	800476c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80017ea:	f7ff faa5 	bl	8000d38 <main>
  bx lr
 80017ee:	4770      	bx	lr
  ldr r0, =_sdata
 80017f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017f4:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 80017f8:	08008d60 	.word	0x08008d60
  ldr r2, =_sbss
 80017fc:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8001800:	20000a14 	.word	0x20000a14

08001804 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001804:	e7fe      	b.n	8001804 <ADC1_2_IRQHandler>
	...

08001808 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800180c:	4b08      	ldr	r3, [pc, #32]	; (8001830 <HAL_Init+0x28>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	4a07      	ldr	r2, [pc, #28]	; (8001830 <HAL_Init+0x28>)
 8001812:	f043 0310 	orr.w	r3, r3, #16
 8001816:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001818:	2003      	movs	r0, #3
 800181a:	f000 fc37 	bl	800208c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800181e:	200f      	movs	r0, #15
 8001820:	f000 f808 	bl	8001834 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001824:	f7ff fd56 	bl	80012d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001828:	2300      	movs	r3, #0
}
 800182a:	4618      	mov	r0, r3
 800182c:	bd80      	pop	{r7, pc}
 800182e:	bf00      	nop
 8001830:	40022000 	.word	0x40022000

08001834 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b082      	sub	sp, #8
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800183c:	4b12      	ldr	r3, [pc, #72]	; (8001888 <HAL_InitTick+0x54>)
 800183e:	681a      	ldr	r2, [r3, #0]
 8001840:	4b12      	ldr	r3, [pc, #72]	; (800188c <HAL_InitTick+0x58>)
 8001842:	781b      	ldrb	r3, [r3, #0]
 8001844:	4619      	mov	r1, r3
 8001846:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800184a:	fbb3 f3f1 	udiv	r3, r3, r1
 800184e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001852:	4618      	mov	r0, r3
 8001854:	f000 fc41 	bl	80020da <HAL_SYSTICK_Config>
 8001858:	4603      	mov	r3, r0
 800185a:	2b00      	cmp	r3, #0
 800185c:	d001      	beq.n	8001862 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800185e:	2301      	movs	r3, #1
 8001860:	e00e      	b.n	8001880 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	2b0f      	cmp	r3, #15
 8001866:	d80a      	bhi.n	800187e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001868:	2200      	movs	r2, #0
 800186a:	6879      	ldr	r1, [r7, #4]
 800186c:	f04f 30ff 	mov.w	r0, #4294967295
 8001870:	f000 fc17 	bl	80020a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001874:	4a06      	ldr	r2, [pc, #24]	; (8001890 <HAL_InitTick+0x5c>)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800187a:	2300      	movs	r3, #0
 800187c:	e000      	b.n	8001880 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800187e:	2301      	movs	r3, #1
}
 8001880:	4618      	mov	r0, r3
 8001882:	3708      	adds	r7, #8
 8001884:	46bd      	mov	sp, r7
 8001886:	bd80      	pop	{r7, pc}
 8001888:	20000008 	.word	0x20000008
 800188c:	20000010 	.word	0x20000010
 8001890:	2000000c 	.word	0x2000000c

08001894 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001894:	b480      	push	{r7}
 8001896:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001898:	4b05      	ldr	r3, [pc, #20]	; (80018b0 <HAL_IncTick+0x1c>)
 800189a:	781b      	ldrb	r3, [r3, #0]
 800189c:	461a      	mov	r2, r3
 800189e:	4b05      	ldr	r3, [pc, #20]	; (80018b4 <HAL_IncTick+0x20>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	4413      	add	r3, r2
 80018a4:	4a03      	ldr	r2, [pc, #12]	; (80018b4 <HAL_IncTick+0x20>)
 80018a6:	6013      	str	r3, [r2, #0]
}
 80018a8:	bf00      	nop
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bc80      	pop	{r7}
 80018ae:	4770      	bx	lr
 80018b0:	20000010 	.word	0x20000010
 80018b4:	20000a00 	.word	0x20000a00

080018b8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018b8:	b480      	push	{r7}
 80018ba:	af00      	add	r7, sp, #0
  return uwTick;
 80018bc:	4b02      	ldr	r3, [pc, #8]	; (80018c8 <HAL_GetTick+0x10>)
 80018be:	681b      	ldr	r3, [r3, #0]
}
 80018c0:	4618      	mov	r0, r3
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bc80      	pop	{r7}
 80018c6:	4770      	bx	lr
 80018c8:	20000a00 	.word	0x20000a00

080018cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b084      	sub	sp, #16
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80018d4:	f7ff fff0 	bl	80018b8 <HAL_GetTick>
 80018d8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018e4:	d005      	beq.n	80018f2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80018e6:	4b0a      	ldr	r3, [pc, #40]	; (8001910 <HAL_Delay+0x44>)
 80018e8:	781b      	ldrb	r3, [r3, #0]
 80018ea:	461a      	mov	r2, r3
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	4413      	add	r3, r2
 80018f0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80018f2:	bf00      	nop
 80018f4:	f7ff ffe0 	bl	80018b8 <HAL_GetTick>
 80018f8:	4602      	mov	r2, r0
 80018fa:	68bb      	ldr	r3, [r7, #8]
 80018fc:	1ad3      	subs	r3, r2, r3
 80018fe:	68fa      	ldr	r2, [r7, #12]
 8001900:	429a      	cmp	r2, r3
 8001902:	d8f7      	bhi.n	80018f4 <HAL_Delay+0x28>
  {
  }
}
 8001904:	bf00      	nop
 8001906:	bf00      	nop
 8001908:	3710      	adds	r7, #16
 800190a:	46bd      	mov	sp, r7
 800190c:	bd80      	pop	{r7, pc}
 800190e:	bf00      	nop
 8001910:	20000010 	.word	0x20000010

08001914 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b086      	sub	sp, #24
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800191c:	2300      	movs	r3, #0
 800191e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001920:	2300      	movs	r3, #0
 8001922:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001924:	2300      	movs	r3, #0
 8001926:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001928:	2300      	movs	r3, #0
 800192a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	2b00      	cmp	r3, #0
 8001930:	d101      	bne.n	8001936 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001932:	2301      	movs	r3, #1
 8001934:	e0be      	b.n	8001ab4 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	689b      	ldr	r3, [r3, #8]
 800193a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001940:	2b00      	cmp	r3, #0
 8001942:	d109      	bne.n	8001958 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	2200      	movs	r2, #0
 8001948:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	2200      	movs	r2, #0
 800194e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001952:	6878      	ldr	r0, [r7, #4]
 8001954:	f7ff fcf0 	bl	8001338 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001958:	6878      	ldr	r0, [r7, #4]
 800195a:	f000 f9ab 	bl	8001cb4 <ADC_ConversionStop_Disable>
 800195e:	4603      	mov	r3, r0
 8001960:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001966:	f003 0310 	and.w	r3, r3, #16
 800196a:	2b00      	cmp	r3, #0
 800196c:	f040 8099 	bne.w	8001aa2 <HAL_ADC_Init+0x18e>
 8001970:	7dfb      	ldrb	r3, [r7, #23]
 8001972:	2b00      	cmp	r3, #0
 8001974:	f040 8095 	bne.w	8001aa2 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800197c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001980:	f023 0302 	bic.w	r3, r3, #2
 8001984:	f043 0202 	orr.w	r2, r3, #2
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001994:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	7b1b      	ldrb	r3, [r3, #12]
 800199a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800199c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800199e:	68ba      	ldr	r2, [r7, #8]
 80019a0:	4313      	orrs	r3, r2
 80019a2:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	689b      	ldr	r3, [r3, #8]
 80019a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80019ac:	d003      	beq.n	80019b6 <HAL_ADC_Init+0xa2>
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	689b      	ldr	r3, [r3, #8]
 80019b2:	2b01      	cmp	r3, #1
 80019b4:	d102      	bne.n	80019bc <HAL_ADC_Init+0xa8>
 80019b6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80019ba:	e000      	b.n	80019be <HAL_ADC_Init+0xaa>
 80019bc:	2300      	movs	r3, #0
 80019be:	693a      	ldr	r2, [r7, #16]
 80019c0:	4313      	orrs	r3, r2
 80019c2:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	7d1b      	ldrb	r3, [r3, #20]
 80019c8:	2b01      	cmp	r3, #1
 80019ca:	d119      	bne.n	8001a00 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	7b1b      	ldrb	r3, [r3, #12]
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d109      	bne.n	80019e8 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	699b      	ldr	r3, [r3, #24]
 80019d8:	3b01      	subs	r3, #1
 80019da:	035a      	lsls	r2, r3, #13
 80019dc:	693b      	ldr	r3, [r7, #16]
 80019de:	4313      	orrs	r3, r2
 80019e0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80019e4:	613b      	str	r3, [r7, #16]
 80019e6:	e00b      	b.n	8001a00 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019ec:	f043 0220 	orr.w	r2, r3, #32
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019f8:	f043 0201 	orr.w	r2, r3, #1
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	685b      	ldr	r3, [r3, #4]
 8001a06:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	693a      	ldr	r2, [r7, #16]
 8001a10:	430a      	orrs	r2, r1
 8001a12:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	689a      	ldr	r2, [r3, #8]
 8001a1a:	4b28      	ldr	r3, [pc, #160]	; (8001abc <HAL_ADC_Init+0x1a8>)
 8001a1c:	4013      	ands	r3, r2
 8001a1e:	687a      	ldr	r2, [r7, #4]
 8001a20:	6812      	ldr	r2, [r2, #0]
 8001a22:	68b9      	ldr	r1, [r7, #8]
 8001a24:	430b      	orrs	r3, r1
 8001a26:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	689b      	ldr	r3, [r3, #8]
 8001a2c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001a30:	d003      	beq.n	8001a3a <HAL_ADC_Init+0x126>
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	689b      	ldr	r3, [r3, #8]
 8001a36:	2b01      	cmp	r3, #1
 8001a38:	d104      	bne.n	8001a44 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	691b      	ldr	r3, [r3, #16]
 8001a3e:	3b01      	subs	r3, #1
 8001a40:	051b      	lsls	r3, r3, #20
 8001a42:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a4a:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	68fa      	ldr	r2, [r7, #12]
 8001a54:	430a      	orrs	r2, r1
 8001a56:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	689a      	ldr	r2, [r3, #8]
 8001a5e:	4b18      	ldr	r3, [pc, #96]	; (8001ac0 <HAL_ADC_Init+0x1ac>)
 8001a60:	4013      	ands	r3, r2
 8001a62:	68ba      	ldr	r2, [r7, #8]
 8001a64:	429a      	cmp	r2, r3
 8001a66:	d10b      	bne.n	8001a80 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a72:	f023 0303 	bic.w	r3, r3, #3
 8001a76:	f043 0201 	orr.w	r2, r3, #1
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001a7e:	e018      	b.n	8001ab2 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a84:	f023 0312 	bic.w	r3, r3, #18
 8001a88:	f043 0210 	orr.w	r2, r3, #16
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a94:	f043 0201 	orr.w	r2, r3, #1
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001a9c:	2301      	movs	r3, #1
 8001a9e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001aa0:	e007      	b.n	8001ab2 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001aa6:	f043 0210 	orr.w	r2, r3, #16
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001aae:	2301      	movs	r3, #1
 8001ab0:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001ab2:	7dfb      	ldrb	r3, [r7, #23]
}
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	3718      	adds	r7, #24
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bd80      	pop	{r7, pc}
 8001abc:	ffe1f7fd 	.word	0xffe1f7fd
 8001ac0:	ff1f0efe 	.word	0xff1f0efe

08001ac4 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001ac4:	b480      	push	{r7}
 8001ac6:	b085      	sub	sp, #20
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
 8001acc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001adc:	2b01      	cmp	r3, #1
 8001ade:	d101      	bne.n	8001ae4 <HAL_ADC_ConfigChannel+0x20>
 8001ae0:	2302      	movs	r3, #2
 8001ae2:	e0dc      	b.n	8001c9e <HAL_ADC_ConfigChannel+0x1da>
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	2201      	movs	r2, #1
 8001ae8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	685b      	ldr	r3, [r3, #4]
 8001af0:	2b06      	cmp	r3, #6
 8001af2:	d81c      	bhi.n	8001b2e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	685a      	ldr	r2, [r3, #4]
 8001afe:	4613      	mov	r3, r2
 8001b00:	009b      	lsls	r3, r3, #2
 8001b02:	4413      	add	r3, r2
 8001b04:	3b05      	subs	r3, #5
 8001b06:	221f      	movs	r2, #31
 8001b08:	fa02 f303 	lsl.w	r3, r2, r3
 8001b0c:	43db      	mvns	r3, r3
 8001b0e:	4019      	ands	r1, r3
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	6818      	ldr	r0, [r3, #0]
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	685a      	ldr	r2, [r3, #4]
 8001b18:	4613      	mov	r3, r2
 8001b1a:	009b      	lsls	r3, r3, #2
 8001b1c:	4413      	add	r3, r2
 8001b1e:	3b05      	subs	r3, #5
 8001b20:	fa00 f203 	lsl.w	r2, r0, r3
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	430a      	orrs	r2, r1
 8001b2a:	635a      	str	r2, [r3, #52]	; 0x34
 8001b2c:	e03c      	b.n	8001ba8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	685b      	ldr	r3, [r3, #4]
 8001b32:	2b0c      	cmp	r3, #12
 8001b34:	d81c      	bhi.n	8001b70 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	685a      	ldr	r2, [r3, #4]
 8001b40:	4613      	mov	r3, r2
 8001b42:	009b      	lsls	r3, r3, #2
 8001b44:	4413      	add	r3, r2
 8001b46:	3b23      	subs	r3, #35	; 0x23
 8001b48:	221f      	movs	r2, #31
 8001b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b4e:	43db      	mvns	r3, r3
 8001b50:	4019      	ands	r1, r3
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	6818      	ldr	r0, [r3, #0]
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	685a      	ldr	r2, [r3, #4]
 8001b5a:	4613      	mov	r3, r2
 8001b5c:	009b      	lsls	r3, r3, #2
 8001b5e:	4413      	add	r3, r2
 8001b60:	3b23      	subs	r3, #35	; 0x23
 8001b62:	fa00 f203 	lsl.w	r2, r0, r3
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	430a      	orrs	r2, r1
 8001b6c:	631a      	str	r2, [r3, #48]	; 0x30
 8001b6e:	e01b      	b.n	8001ba8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	685a      	ldr	r2, [r3, #4]
 8001b7a:	4613      	mov	r3, r2
 8001b7c:	009b      	lsls	r3, r3, #2
 8001b7e:	4413      	add	r3, r2
 8001b80:	3b41      	subs	r3, #65	; 0x41
 8001b82:	221f      	movs	r2, #31
 8001b84:	fa02 f303 	lsl.w	r3, r2, r3
 8001b88:	43db      	mvns	r3, r3
 8001b8a:	4019      	ands	r1, r3
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	6818      	ldr	r0, [r3, #0]
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	685a      	ldr	r2, [r3, #4]
 8001b94:	4613      	mov	r3, r2
 8001b96:	009b      	lsls	r3, r3, #2
 8001b98:	4413      	add	r3, r2
 8001b9a:	3b41      	subs	r3, #65	; 0x41
 8001b9c:	fa00 f203 	lsl.w	r2, r0, r3
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	430a      	orrs	r2, r1
 8001ba6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	2b09      	cmp	r3, #9
 8001bae:	d91c      	bls.n	8001bea <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	68d9      	ldr	r1, [r3, #12]
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	681a      	ldr	r2, [r3, #0]
 8001bba:	4613      	mov	r3, r2
 8001bbc:	005b      	lsls	r3, r3, #1
 8001bbe:	4413      	add	r3, r2
 8001bc0:	3b1e      	subs	r3, #30
 8001bc2:	2207      	movs	r2, #7
 8001bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc8:	43db      	mvns	r3, r3
 8001bca:	4019      	ands	r1, r3
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	6898      	ldr	r0, [r3, #8]
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	681a      	ldr	r2, [r3, #0]
 8001bd4:	4613      	mov	r3, r2
 8001bd6:	005b      	lsls	r3, r3, #1
 8001bd8:	4413      	add	r3, r2
 8001bda:	3b1e      	subs	r3, #30
 8001bdc:	fa00 f203 	lsl.w	r2, r0, r3
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	430a      	orrs	r2, r1
 8001be6:	60da      	str	r2, [r3, #12]
 8001be8:	e019      	b.n	8001c1e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	6919      	ldr	r1, [r3, #16]
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	681a      	ldr	r2, [r3, #0]
 8001bf4:	4613      	mov	r3, r2
 8001bf6:	005b      	lsls	r3, r3, #1
 8001bf8:	4413      	add	r3, r2
 8001bfa:	2207      	movs	r2, #7
 8001bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8001c00:	43db      	mvns	r3, r3
 8001c02:	4019      	ands	r1, r3
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	6898      	ldr	r0, [r3, #8]
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	681a      	ldr	r2, [r3, #0]
 8001c0c:	4613      	mov	r3, r2
 8001c0e:	005b      	lsls	r3, r3, #1
 8001c10:	4413      	add	r3, r2
 8001c12:	fa00 f203 	lsl.w	r2, r0, r3
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	430a      	orrs	r2, r1
 8001c1c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	2b10      	cmp	r3, #16
 8001c24:	d003      	beq.n	8001c2e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001c2a:	2b11      	cmp	r3, #17
 8001c2c:	d132      	bne.n	8001c94 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4a1d      	ldr	r2, [pc, #116]	; (8001ca8 <HAL_ADC_ConfigChannel+0x1e4>)
 8001c34:	4293      	cmp	r3, r2
 8001c36:	d125      	bne.n	8001c84 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	689b      	ldr	r3, [r3, #8]
 8001c3e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d126      	bne.n	8001c94 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	689a      	ldr	r2, [r3, #8]
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001c54:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	2b10      	cmp	r3, #16
 8001c5c:	d11a      	bne.n	8001c94 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001c5e:	4b13      	ldr	r3, [pc, #76]	; (8001cac <HAL_ADC_ConfigChannel+0x1e8>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	4a13      	ldr	r2, [pc, #76]	; (8001cb0 <HAL_ADC_ConfigChannel+0x1ec>)
 8001c64:	fba2 2303 	umull	r2, r3, r2, r3
 8001c68:	0c9a      	lsrs	r2, r3, #18
 8001c6a:	4613      	mov	r3, r2
 8001c6c:	009b      	lsls	r3, r3, #2
 8001c6e:	4413      	add	r3, r2
 8001c70:	005b      	lsls	r3, r3, #1
 8001c72:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001c74:	e002      	b.n	8001c7c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001c76:	68bb      	ldr	r3, [r7, #8]
 8001c78:	3b01      	subs	r3, #1
 8001c7a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001c7c:	68bb      	ldr	r3, [r7, #8]
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d1f9      	bne.n	8001c76 <HAL_ADC_ConfigChannel+0x1b2>
 8001c82:	e007      	b.n	8001c94 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c88:	f043 0220 	orr.w	r2, r3, #32
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001c90:	2301      	movs	r3, #1
 8001c92:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	2200      	movs	r2, #0
 8001c98:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001c9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	3714      	adds	r7, #20
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bc80      	pop	{r7}
 8001ca6:	4770      	bx	lr
 8001ca8:	40012400 	.word	0x40012400
 8001cac:	20000008 	.word	0x20000008
 8001cb0:	431bde83 	.word	0x431bde83

08001cb4 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b084      	sub	sp, #16
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	689b      	ldr	r3, [r3, #8]
 8001cc6:	f003 0301 	and.w	r3, r3, #1
 8001cca:	2b01      	cmp	r3, #1
 8001ccc:	d12e      	bne.n	8001d2c <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	689a      	ldr	r2, [r3, #8]
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f022 0201 	bic.w	r2, r2, #1
 8001cdc:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001cde:	f7ff fdeb 	bl	80018b8 <HAL_GetTick>
 8001ce2:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001ce4:	e01b      	b.n	8001d1e <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001ce6:	f7ff fde7 	bl	80018b8 <HAL_GetTick>
 8001cea:	4602      	mov	r2, r0
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	1ad3      	subs	r3, r2, r3
 8001cf0:	2b02      	cmp	r3, #2
 8001cf2:	d914      	bls.n	8001d1e <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	689b      	ldr	r3, [r3, #8]
 8001cfa:	f003 0301 	and.w	r3, r3, #1
 8001cfe:	2b01      	cmp	r3, #1
 8001d00:	d10d      	bne.n	8001d1e <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d06:	f043 0210 	orr.w	r2, r3, #16
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d12:	f043 0201 	orr.w	r2, r3, #1
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	e007      	b.n	8001d2e <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	689b      	ldr	r3, [r3, #8]
 8001d24:	f003 0301 	and.w	r3, r3, #1
 8001d28:	2b01      	cmp	r3, #1
 8001d2a:	d0dc      	beq.n	8001ce6 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001d2c:	2300      	movs	r3, #0
}
 8001d2e:	4618      	mov	r0, r3
 8001d30:	3710      	adds	r7, #16
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bd80      	pop	{r7, pc}

08001d36 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001d36:	b580      	push	{r7, lr}
 8001d38:	b084      	sub	sp, #16
 8001d3a:	af00      	add	r7, sp, #0
 8001d3c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d101      	bne.n	8001d48 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001d44:	2301      	movs	r3, #1
 8001d46:	e0ed      	b.n	8001f24 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d4e:	b2db      	uxtb	r3, r3
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d102      	bne.n	8001d5a <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001d54:	6878      	ldr	r0, [r7, #4]
 8001d56:	f7ff fb2b 	bl	80013b0 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	681a      	ldr	r2, [r3, #0]
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f042 0201 	orr.w	r2, r2, #1
 8001d68:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001d6a:	f7ff fda5 	bl	80018b8 <HAL_GetTick>
 8001d6e:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001d70:	e012      	b.n	8001d98 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001d72:	f7ff fda1 	bl	80018b8 <HAL_GetTick>
 8001d76:	4602      	mov	r2, r0
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	1ad3      	subs	r3, r2, r3
 8001d7c:	2b0a      	cmp	r3, #10
 8001d7e:	d90b      	bls.n	8001d98 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d84:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2205      	movs	r2, #5
 8001d90:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001d94:	2301      	movs	r3, #1
 8001d96:	e0c5      	b.n	8001f24 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	685b      	ldr	r3, [r3, #4]
 8001d9e:	f003 0301 	and.w	r3, r3, #1
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d0e5      	beq.n	8001d72 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	681a      	ldr	r2, [r3, #0]
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f022 0202 	bic.w	r2, r2, #2
 8001db4:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001db6:	f7ff fd7f 	bl	80018b8 <HAL_GetTick>
 8001dba:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001dbc:	e012      	b.n	8001de4 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001dbe:	f7ff fd7b 	bl	80018b8 <HAL_GetTick>
 8001dc2:	4602      	mov	r2, r0
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	1ad3      	subs	r3, r2, r3
 8001dc8:	2b0a      	cmp	r3, #10
 8001dca:	d90b      	bls.n	8001de4 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dd0:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2205      	movs	r2, #5
 8001ddc:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001de0:	2301      	movs	r3, #1
 8001de2:	e09f      	b.n	8001f24 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	685b      	ldr	r3, [r3, #4]
 8001dea:	f003 0302 	and.w	r3, r3, #2
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d1e5      	bne.n	8001dbe <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	7e1b      	ldrb	r3, [r3, #24]
 8001df6:	2b01      	cmp	r3, #1
 8001df8:	d108      	bne.n	8001e0c <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	681a      	ldr	r2, [r3, #0]
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001e08:	601a      	str	r2, [r3, #0]
 8001e0a:	e007      	b.n	8001e1c <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	681a      	ldr	r2, [r3, #0]
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001e1a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	7e5b      	ldrb	r3, [r3, #25]
 8001e20:	2b01      	cmp	r3, #1
 8001e22:	d108      	bne.n	8001e36 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	681a      	ldr	r2, [r3, #0]
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001e32:	601a      	str	r2, [r3, #0]
 8001e34:	e007      	b.n	8001e46 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	681a      	ldr	r2, [r3, #0]
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001e44:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	7e9b      	ldrb	r3, [r3, #26]
 8001e4a:	2b01      	cmp	r3, #1
 8001e4c:	d108      	bne.n	8001e60 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	681a      	ldr	r2, [r3, #0]
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f042 0220 	orr.w	r2, r2, #32
 8001e5c:	601a      	str	r2, [r3, #0]
 8001e5e:	e007      	b.n	8001e70 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	681a      	ldr	r2, [r3, #0]
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f022 0220 	bic.w	r2, r2, #32
 8001e6e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	7edb      	ldrb	r3, [r3, #27]
 8001e74:	2b01      	cmp	r3, #1
 8001e76:	d108      	bne.n	8001e8a <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	681a      	ldr	r2, [r3, #0]
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f022 0210 	bic.w	r2, r2, #16
 8001e86:	601a      	str	r2, [r3, #0]
 8001e88:	e007      	b.n	8001e9a <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	681a      	ldr	r2, [r3, #0]
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f042 0210 	orr.w	r2, r2, #16
 8001e98:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	7f1b      	ldrb	r3, [r3, #28]
 8001e9e:	2b01      	cmp	r3, #1
 8001ea0:	d108      	bne.n	8001eb4 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	681a      	ldr	r2, [r3, #0]
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f042 0208 	orr.w	r2, r2, #8
 8001eb0:	601a      	str	r2, [r3, #0]
 8001eb2:	e007      	b.n	8001ec4 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	681a      	ldr	r2, [r3, #0]
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f022 0208 	bic.w	r2, r2, #8
 8001ec2:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	7f5b      	ldrb	r3, [r3, #29]
 8001ec8:	2b01      	cmp	r3, #1
 8001eca:	d108      	bne.n	8001ede <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	681a      	ldr	r2, [r3, #0]
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f042 0204 	orr.w	r2, r2, #4
 8001eda:	601a      	str	r2, [r3, #0]
 8001edc:	e007      	b.n	8001eee <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	681a      	ldr	r2, [r3, #0]
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f022 0204 	bic.w	r2, r2, #4
 8001eec:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	689a      	ldr	r2, [r3, #8]
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	68db      	ldr	r3, [r3, #12]
 8001ef6:	431a      	orrs	r2, r3
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	691b      	ldr	r3, [r3, #16]
 8001efc:	431a      	orrs	r2, r3
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	695b      	ldr	r3, [r3, #20]
 8001f02:	ea42 0103 	orr.w	r1, r2, r3
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	1e5a      	subs	r2, r3, #1
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	430a      	orrs	r2, r1
 8001f12:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	2200      	movs	r2, #0
 8001f18:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	2201      	movs	r2, #1
 8001f1e:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001f22:	2300      	movs	r3, #0
}
 8001f24:	4618      	mov	r0, r3
 8001f26:	3710      	adds	r7, #16
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	bd80      	pop	{r7, pc}

08001f2c <__NVIC_SetPriorityGrouping>:
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	b085      	sub	sp, #20
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	f003 0307 	and.w	r3, r3, #7
 8001f3a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f3c:	4b0c      	ldr	r3, [pc, #48]	; (8001f70 <__NVIC_SetPriorityGrouping+0x44>)
 8001f3e:	68db      	ldr	r3, [r3, #12]
 8001f40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f42:	68ba      	ldr	r2, [r7, #8]
 8001f44:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f48:	4013      	ands	r3, r2
 8001f4a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f50:	68bb      	ldr	r3, [r7, #8]
 8001f52:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f54:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f5e:	4a04      	ldr	r2, [pc, #16]	; (8001f70 <__NVIC_SetPriorityGrouping+0x44>)
 8001f60:	68bb      	ldr	r3, [r7, #8]
 8001f62:	60d3      	str	r3, [r2, #12]
}
 8001f64:	bf00      	nop
 8001f66:	3714      	adds	r7, #20
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	bc80      	pop	{r7}
 8001f6c:	4770      	bx	lr
 8001f6e:	bf00      	nop
 8001f70:	e000ed00 	.word	0xe000ed00

08001f74 <__NVIC_GetPriorityGrouping>:
{
 8001f74:	b480      	push	{r7}
 8001f76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f78:	4b04      	ldr	r3, [pc, #16]	; (8001f8c <__NVIC_GetPriorityGrouping+0x18>)
 8001f7a:	68db      	ldr	r3, [r3, #12]
 8001f7c:	0a1b      	lsrs	r3, r3, #8
 8001f7e:	f003 0307 	and.w	r3, r3, #7
}
 8001f82:	4618      	mov	r0, r3
 8001f84:	46bd      	mov	sp, r7
 8001f86:	bc80      	pop	{r7}
 8001f88:	4770      	bx	lr
 8001f8a:	bf00      	nop
 8001f8c:	e000ed00 	.word	0xe000ed00

08001f90 <__NVIC_SetPriority>:
{
 8001f90:	b480      	push	{r7}
 8001f92:	b083      	sub	sp, #12
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	4603      	mov	r3, r0
 8001f98:	6039      	str	r1, [r7, #0]
 8001f9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	db0a      	blt.n	8001fba <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	b2da      	uxtb	r2, r3
 8001fa8:	490c      	ldr	r1, [pc, #48]	; (8001fdc <__NVIC_SetPriority+0x4c>)
 8001faa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fae:	0112      	lsls	r2, r2, #4
 8001fb0:	b2d2      	uxtb	r2, r2
 8001fb2:	440b      	add	r3, r1
 8001fb4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001fb8:	e00a      	b.n	8001fd0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	b2da      	uxtb	r2, r3
 8001fbe:	4908      	ldr	r1, [pc, #32]	; (8001fe0 <__NVIC_SetPriority+0x50>)
 8001fc0:	79fb      	ldrb	r3, [r7, #7]
 8001fc2:	f003 030f 	and.w	r3, r3, #15
 8001fc6:	3b04      	subs	r3, #4
 8001fc8:	0112      	lsls	r2, r2, #4
 8001fca:	b2d2      	uxtb	r2, r2
 8001fcc:	440b      	add	r3, r1
 8001fce:	761a      	strb	r2, [r3, #24]
}
 8001fd0:	bf00      	nop
 8001fd2:	370c      	adds	r7, #12
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	bc80      	pop	{r7}
 8001fd8:	4770      	bx	lr
 8001fda:	bf00      	nop
 8001fdc:	e000e100 	.word	0xe000e100
 8001fe0:	e000ed00 	.word	0xe000ed00

08001fe4 <NVIC_EncodePriority>:
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	b089      	sub	sp, #36	; 0x24
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	60f8      	str	r0, [r7, #12]
 8001fec:	60b9      	str	r1, [r7, #8]
 8001fee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	f003 0307 	and.w	r3, r3, #7
 8001ff6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ff8:	69fb      	ldr	r3, [r7, #28]
 8001ffa:	f1c3 0307 	rsb	r3, r3, #7
 8001ffe:	2b04      	cmp	r3, #4
 8002000:	bf28      	it	cs
 8002002:	2304      	movcs	r3, #4
 8002004:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002006:	69fb      	ldr	r3, [r7, #28]
 8002008:	3304      	adds	r3, #4
 800200a:	2b06      	cmp	r3, #6
 800200c:	d902      	bls.n	8002014 <NVIC_EncodePriority+0x30>
 800200e:	69fb      	ldr	r3, [r7, #28]
 8002010:	3b03      	subs	r3, #3
 8002012:	e000      	b.n	8002016 <NVIC_EncodePriority+0x32>
 8002014:	2300      	movs	r3, #0
 8002016:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002018:	f04f 32ff 	mov.w	r2, #4294967295
 800201c:	69bb      	ldr	r3, [r7, #24]
 800201e:	fa02 f303 	lsl.w	r3, r2, r3
 8002022:	43da      	mvns	r2, r3
 8002024:	68bb      	ldr	r3, [r7, #8]
 8002026:	401a      	ands	r2, r3
 8002028:	697b      	ldr	r3, [r7, #20]
 800202a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800202c:	f04f 31ff 	mov.w	r1, #4294967295
 8002030:	697b      	ldr	r3, [r7, #20]
 8002032:	fa01 f303 	lsl.w	r3, r1, r3
 8002036:	43d9      	mvns	r1, r3
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800203c:	4313      	orrs	r3, r2
}
 800203e:	4618      	mov	r0, r3
 8002040:	3724      	adds	r7, #36	; 0x24
 8002042:	46bd      	mov	sp, r7
 8002044:	bc80      	pop	{r7}
 8002046:	4770      	bx	lr

08002048 <SysTick_Config>:
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b082      	sub	sp, #8
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	3b01      	subs	r3, #1
 8002054:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002058:	d301      	bcc.n	800205e <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 800205a:	2301      	movs	r3, #1
 800205c:	e00f      	b.n	800207e <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800205e:	4a0a      	ldr	r2, [pc, #40]	; (8002088 <SysTick_Config+0x40>)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	3b01      	subs	r3, #1
 8002064:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002066:	210f      	movs	r1, #15
 8002068:	f04f 30ff 	mov.w	r0, #4294967295
 800206c:	f7ff ff90 	bl	8001f90 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002070:	4b05      	ldr	r3, [pc, #20]	; (8002088 <SysTick_Config+0x40>)
 8002072:	2200      	movs	r2, #0
 8002074:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002076:	4b04      	ldr	r3, [pc, #16]	; (8002088 <SysTick_Config+0x40>)
 8002078:	2207      	movs	r2, #7
 800207a:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 800207c:	2300      	movs	r3, #0
}
 800207e:	4618      	mov	r0, r3
 8002080:	3708      	adds	r7, #8
 8002082:	46bd      	mov	sp, r7
 8002084:	bd80      	pop	{r7, pc}
 8002086:	bf00      	nop
 8002088:	e000e010 	.word	0xe000e010

0800208c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b082      	sub	sp, #8
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002094:	6878      	ldr	r0, [r7, #4]
 8002096:	f7ff ff49 	bl	8001f2c <__NVIC_SetPriorityGrouping>
}
 800209a:	bf00      	nop
 800209c:	3708      	adds	r7, #8
 800209e:	46bd      	mov	sp, r7
 80020a0:	bd80      	pop	{r7, pc}

080020a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80020a2:	b580      	push	{r7, lr}
 80020a4:	b086      	sub	sp, #24
 80020a6:	af00      	add	r7, sp, #0
 80020a8:	4603      	mov	r3, r0
 80020aa:	60b9      	str	r1, [r7, #8]
 80020ac:	607a      	str	r2, [r7, #4]
 80020ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80020b0:	2300      	movs	r3, #0
 80020b2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80020b4:	f7ff ff5e 	bl	8001f74 <__NVIC_GetPriorityGrouping>
 80020b8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020ba:	687a      	ldr	r2, [r7, #4]
 80020bc:	68b9      	ldr	r1, [r7, #8]
 80020be:	6978      	ldr	r0, [r7, #20]
 80020c0:	f7ff ff90 	bl	8001fe4 <NVIC_EncodePriority>
 80020c4:	4602      	mov	r2, r0
 80020c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020ca:	4611      	mov	r1, r2
 80020cc:	4618      	mov	r0, r3
 80020ce:	f7ff ff5f 	bl	8001f90 <__NVIC_SetPriority>
}
 80020d2:	bf00      	nop
 80020d4:	3718      	adds	r7, #24
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bd80      	pop	{r7, pc}

080020da <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80020da:	b580      	push	{r7, lr}
 80020dc:	b082      	sub	sp, #8
 80020de:	af00      	add	r7, sp, #0
 80020e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80020e2:	6878      	ldr	r0, [r7, #4]
 80020e4:	f7ff ffb0 	bl	8002048 <SysTick_Config>
 80020e8:	4603      	mov	r3, r0
}
 80020ea:	4618      	mov	r0, r3
 80020ec:	3708      	adds	r7, #8
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bd80      	pop	{r7, pc}
	...

080020f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020f4:	b480      	push	{r7}
 80020f6:	b08b      	sub	sp, #44	; 0x2c
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
 80020fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80020fe:	2300      	movs	r3, #0
 8002100:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002102:	2300      	movs	r3, #0
 8002104:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002106:	e169      	b.n	80023dc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002108:	2201      	movs	r2, #1
 800210a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800210c:	fa02 f303 	lsl.w	r3, r2, r3
 8002110:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	69fa      	ldr	r2, [r7, #28]
 8002118:	4013      	ands	r3, r2
 800211a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800211c:	69ba      	ldr	r2, [r7, #24]
 800211e:	69fb      	ldr	r3, [r7, #28]
 8002120:	429a      	cmp	r2, r3
 8002122:	f040 8158 	bne.w	80023d6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	685b      	ldr	r3, [r3, #4]
 800212a:	4a9a      	ldr	r2, [pc, #616]	; (8002394 <HAL_GPIO_Init+0x2a0>)
 800212c:	4293      	cmp	r3, r2
 800212e:	d05e      	beq.n	80021ee <HAL_GPIO_Init+0xfa>
 8002130:	4a98      	ldr	r2, [pc, #608]	; (8002394 <HAL_GPIO_Init+0x2a0>)
 8002132:	4293      	cmp	r3, r2
 8002134:	d875      	bhi.n	8002222 <HAL_GPIO_Init+0x12e>
 8002136:	4a98      	ldr	r2, [pc, #608]	; (8002398 <HAL_GPIO_Init+0x2a4>)
 8002138:	4293      	cmp	r3, r2
 800213a:	d058      	beq.n	80021ee <HAL_GPIO_Init+0xfa>
 800213c:	4a96      	ldr	r2, [pc, #600]	; (8002398 <HAL_GPIO_Init+0x2a4>)
 800213e:	4293      	cmp	r3, r2
 8002140:	d86f      	bhi.n	8002222 <HAL_GPIO_Init+0x12e>
 8002142:	4a96      	ldr	r2, [pc, #600]	; (800239c <HAL_GPIO_Init+0x2a8>)
 8002144:	4293      	cmp	r3, r2
 8002146:	d052      	beq.n	80021ee <HAL_GPIO_Init+0xfa>
 8002148:	4a94      	ldr	r2, [pc, #592]	; (800239c <HAL_GPIO_Init+0x2a8>)
 800214a:	4293      	cmp	r3, r2
 800214c:	d869      	bhi.n	8002222 <HAL_GPIO_Init+0x12e>
 800214e:	4a94      	ldr	r2, [pc, #592]	; (80023a0 <HAL_GPIO_Init+0x2ac>)
 8002150:	4293      	cmp	r3, r2
 8002152:	d04c      	beq.n	80021ee <HAL_GPIO_Init+0xfa>
 8002154:	4a92      	ldr	r2, [pc, #584]	; (80023a0 <HAL_GPIO_Init+0x2ac>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d863      	bhi.n	8002222 <HAL_GPIO_Init+0x12e>
 800215a:	4a92      	ldr	r2, [pc, #584]	; (80023a4 <HAL_GPIO_Init+0x2b0>)
 800215c:	4293      	cmp	r3, r2
 800215e:	d046      	beq.n	80021ee <HAL_GPIO_Init+0xfa>
 8002160:	4a90      	ldr	r2, [pc, #576]	; (80023a4 <HAL_GPIO_Init+0x2b0>)
 8002162:	4293      	cmp	r3, r2
 8002164:	d85d      	bhi.n	8002222 <HAL_GPIO_Init+0x12e>
 8002166:	2b12      	cmp	r3, #18
 8002168:	d82a      	bhi.n	80021c0 <HAL_GPIO_Init+0xcc>
 800216a:	2b12      	cmp	r3, #18
 800216c:	d859      	bhi.n	8002222 <HAL_GPIO_Init+0x12e>
 800216e:	a201      	add	r2, pc, #4	; (adr r2, 8002174 <HAL_GPIO_Init+0x80>)
 8002170:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002174:	080021ef 	.word	0x080021ef
 8002178:	080021c9 	.word	0x080021c9
 800217c:	080021db 	.word	0x080021db
 8002180:	0800221d 	.word	0x0800221d
 8002184:	08002223 	.word	0x08002223
 8002188:	08002223 	.word	0x08002223
 800218c:	08002223 	.word	0x08002223
 8002190:	08002223 	.word	0x08002223
 8002194:	08002223 	.word	0x08002223
 8002198:	08002223 	.word	0x08002223
 800219c:	08002223 	.word	0x08002223
 80021a0:	08002223 	.word	0x08002223
 80021a4:	08002223 	.word	0x08002223
 80021a8:	08002223 	.word	0x08002223
 80021ac:	08002223 	.word	0x08002223
 80021b0:	08002223 	.word	0x08002223
 80021b4:	08002223 	.word	0x08002223
 80021b8:	080021d1 	.word	0x080021d1
 80021bc:	080021e5 	.word	0x080021e5
 80021c0:	4a79      	ldr	r2, [pc, #484]	; (80023a8 <HAL_GPIO_Init+0x2b4>)
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d013      	beq.n	80021ee <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80021c6:	e02c      	b.n	8002222 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	68db      	ldr	r3, [r3, #12]
 80021cc:	623b      	str	r3, [r7, #32]
          break;
 80021ce:	e029      	b.n	8002224 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	68db      	ldr	r3, [r3, #12]
 80021d4:	3304      	adds	r3, #4
 80021d6:	623b      	str	r3, [r7, #32]
          break;
 80021d8:	e024      	b.n	8002224 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	68db      	ldr	r3, [r3, #12]
 80021de:	3308      	adds	r3, #8
 80021e0:	623b      	str	r3, [r7, #32]
          break;
 80021e2:	e01f      	b.n	8002224 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	68db      	ldr	r3, [r3, #12]
 80021e8:	330c      	adds	r3, #12
 80021ea:	623b      	str	r3, [r7, #32]
          break;
 80021ec:	e01a      	b.n	8002224 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	689b      	ldr	r3, [r3, #8]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d102      	bne.n	80021fc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80021f6:	2304      	movs	r3, #4
 80021f8:	623b      	str	r3, [r7, #32]
          break;
 80021fa:	e013      	b.n	8002224 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	689b      	ldr	r3, [r3, #8]
 8002200:	2b01      	cmp	r3, #1
 8002202:	d105      	bne.n	8002210 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002204:	2308      	movs	r3, #8
 8002206:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	69fa      	ldr	r2, [r7, #28]
 800220c:	611a      	str	r2, [r3, #16]
          break;
 800220e:	e009      	b.n	8002224 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002210:	2308      	movs	r3, #8
 8002212:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	69fa      	ldr	r2, [r7, #28]
 8002218:	615a      	str	r2, [r3, #20]
          break;
 800221a:	e003      	b.n	8002224 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800221c:	2300      	movs	r3, #0
 800221e:	623b      	str	r3, [r7, #32]
          break;
 8002220:	e000      	b.n	8002224 <HAL_GPIO_Init+0x130>
          break;
 8002222:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002224:	69bb      	ldr	r3, [r7, #24]
 8002226:	2bff      	cmp	r3, #255	; 0xff
 8002228:	d801      	bhi.n	800222e <HAL_GPIO_Init+0x13a>
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	e001      	b.n	8002232 <HAL_GPIO_Init+0x13e>
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	3304      	adds	r3, #4
 8002232:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002234:	69bb      	ldr	r3, [r7, #24]
 8002236:	2bff      	cmp	r3, #255	; 0xff
 8002238:	d802      	bhi.n	8002240 <HAL_GPIO_Init+0x14c>
 800223a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800223c:	009b      	lsls	r3, r3, #2
 800223e:	e002      	b.n	8002246 <HAL_GPIO_Init+0x152>
 8002240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002242:	3b08      	subs	r3, #8
 8002244:	009b      	lsls	r3, r3, #2
 8002246:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002248:	697b      	ldr	r3, [r7, #20]
 800224a:	681a      	ldr	r2, [r3, #0]
 800224c:	210f      	movs	r1, #15
 800224e:	693b      	ldr	r3, [r7, #16]
 8002250:	fa01 f303 	lsl.w	r3, r1, r3
 8002254:	43db      	mvns	r3, r3
 8002256:	401a      	ands	r2, r3
 8002258:	6a39      	ldr	r1, [r7, #32]
 800225a:	693b      	ldr	r3, [r7, #16]
 800225c:	fa01 f303 	lsl.w	r3, r1, r3
 8002260:	431a      	orrs	r2, r3
 8002262:	697b      	ldr	r3, [r7, #20]
 8002264:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800226e:	2b00      	cmp	r3, #0
 8002270:	f000 80b1 	beq.w	80023d6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002274:	4b4d      	ldr	r3, [pc, #308]	; (80023ac <HAL_GPIO_Init+0x2b8>)
 8002276:	699b      	ldr	r3, [r3, #24]
 8002278:	4a4c      	ldr	r2, [pc, #304]	; (80023ac <HAL_GPIO_Init+0x2b8>)
 800227a:	f043 0301 	orr.w	r3, r3, #1
 800227e:	6193      	str	r3, [r2, #24]
 8002280:	4b4a      	ldr	r3, [pc, #296]	; (80023ac <HAL_GPIO_Init+0x2b8>)
 8002282:	699b      	ldr	r3, [r3, #24]
 8002284:	f003 0301 	and.w	r3, r3, #1
 8002288:	60bb      	str	r3, [r7, #8]
 800228a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800228c:	4a48      	ldr	r2, [pc, #288]	; (80023b0 <HAL_GPIO_Init+0x2bc>)
 800228e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002290:	089b      	lsrs	r3, r3, #2
 8002292:	3302      	adds	r3, #2
 8002294:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002298:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800229a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800229c:	f003 0303 	and.w	r3, r3, #3
 80022a0:	009b      	lsls	r3, r3, #2
 80022a2:	220f      	movs	r2, #15
 80022a4:	fa02 f303 	lsl.w	r3, r2, r3
 80022a8:	43db      	mvns	r3, r3
 80022aa:	68fa      	ldr	r2, [r7, #12]
 80022ac:	4013      	ands	r3, r2
 80022ae:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	4a40      	ldr	r2, [pc, #256]	; (80023b4 <HAL_GPIO_Init+0x2c0>)
 80022b4:	4293      	cmp	r3, r2
 80022b6:	d013      	beq.n	80022e0 <HAL_GPIO_Init+0x1ec>
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	4a3f      	ldr	r2, [pc, #252]	; (80023b8 <HAL_GPIO_Init+0x2c4>)
 80022bc:	4293      	cmp	r3, r2
 80022be:	d00d      	beq.n	80022dc <HAL_GPIO_Init+0x1e8>
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	4a3e      	ldr	r2, [pc, #248]	; (80023bc <HAL_GPIO_Init+0x2c8>)
 80022c4:	4293      	cmp	r3, r2
 80022c6:	d007      	beq.n	80022d8 <HAL_GPIO_Init+0x1e4>
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	4a3d      	ldr	r2, [pc, #244]	; (80023c0 <HAL_GPIO_Init+0x2cc>)
 80022cc:	4293      	cmp	r3, r2
 80022ce:	d101      	bne.n	80022d4 <HAL_GPIO_Init+0x1e0>
 80022d0:	2303      	movs	r3, #3
 80022d2:	e006      	b.n	80022e2 <HAL_GPIO_Init+0x1ee>
 80022d4:	2304      	movs	r3, #4
 80022d6:	e004      	b.n	80022e2 <HAL_GPIO_Init+0x1ee>
 80022d8:	2302      	movs	r3, #2
 80022da:	e002      	b.n	80022e2 <HAL_GPIO_Init+0x1ee>
 80022dc:	2301      	movs	r3, #1
 80022de:	e000      	b.n	80022e2 <HAL_GPIO_Init+0x1ee>
 80022e0:	2300      	movs	r3, #0
 80022e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022e4:	f002 0203 	and.w	r2, r2, #3
 80022e8:	0092      	lsls	r2, r2, #2
 80022ea:	4093      	lsls	r3, r2
 80022ec:	68fa      	ldr	r2, [r7, #12]
 80022ee:	4313      	orrs	r3, r2
 80022f0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80022f2:	492f      	ldr	r1, [pc, #188]	; (80023b0 <HAL_GPIO_Init+0x2bc>)
 80022f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022f6:	089b      	lsrs	r3, r3, #2
 80022f8:	3302      	adds	r3, #2
 80022fa:	68fa      	ldr	r2, [r7, #12]
 80022fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002308:	2b00      	cmp	r3, #0
 800230a:	d006      	beq.n	800231a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800230c:	4b2d      	ldr	r3, [pc, #180]	; (80023c4 <HAL_GPIO_Init+0x2d0>)
 800230e:	681a      	ldr	r2, [r3, #0]
 8002310:	492c      	ldr	r1, [pc, #176]	; (80023c4 <HAL_GPIO_Init+0x2d0>)
 8002312:	69bb      	ldr	r3, [r7, #24]
 8002314:	4313      	orrs	r3, r2
 8002316:	600b      	str	r3, [r1, #0]
 8002318:	e006      	b.n	8002328 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800231a:	4b2a      	ldr	r3, [pc, #168]	; (80023c4 <HAL_GPIO_Init+0x2d0>)
 800231c:	681a      	ldr	r2, [r3, #0]
 800231e:	69bb      	ldr	r3, [r7, #24]
 8002320:	43db      	mvns	r3, r3
 8002322:	4928      	ldr	r1, [pc, #160]	; (80023c4 <HAL_GPIO_Init+0x2d0>)
 8002324:	4013      	ands	r3, r2
 8002326:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002330:	2b00      	cmp	r3, #0
 8002332:	d006      	beq.n	8002342 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002334:	4b23      	ldr	r3, [pc, #140]	; (80023c4 <HAL_GPIO_Init+0x2d0>)
 8002336:	685a      	ldr	r2, [r3, #4]
 8002338:	4922      	ldr	r1, [pc, #136]	; (80023c4 <HAL_GPIO_Init+0x2d0>)
 800233a:	69bb      	ldr	r3, [r7, #24]
 800233c:	4313      	orrs	r3, r2
 800233e:	604b      	str	r3, [r1, #4]
 8002340:	e006      	b.n	8002350 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002342:	4b20      	ldr	r3, [pc, #128]	; (80023c4 <HAL_GPIO_Init+0x2d0>)
 8002344:	685a      	ldr	r2, [r3, #4]
 8002346:	69bb      	ldr	r3, [r7, #24]
 8002348:	43db      	mvns	r3, r3
 800234a:	491e      	ldr	r1, [pc, #120]	; (80023c4 <HAL_GPIO_Init+0x2d0>)
 800234c:	4013      	ands	r3, r2
 800234e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002358:	2b00      	cmp	r3, #0
 800235a:	d006      	beq.n	800236a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800235c:	4b19      	ldr	r3, [pc, #100]	; (80023c4 <HAL_GPIO_Init+0x2d0>)
 800235e:	689a      	ldr	r2, [r3, #8]
 8002360:	4918      	ldr	r1, [pc, #96]	; (80023c4 <HAL_GPIO_Init+0x2d0>)
 8002362:	69bb      	ldr	r3, [r7, #24]
 8002364:	4313      	orrs	r3, r2
 8002366:	608b      	str	r3, [r1, #8]
 8002368:	e006      	b.n	8002378 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800236a:	4b16      	ldr	r3, [pc, #88]	; (80023c4 <HAL_GPIO_Init+0x2d0>)
 800236c:	689a      	ldr	r2, [r3, #8]
 800236e:	69bb      	ldr	r3, [r7, #24]
 8002370:	43db      	mvns	r3, r3
 8002372:	4914      	ldr	r1, [pc, #80]	; (80023c4 <HAL_GPIO_Init+0x2d0>)
 8002374:	4013      	ands	r3, r2
 8002376:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	685b      	ldr	r3, [r3, #4]
 800237c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002380:	2b00      	cmp	r3, #0
 8002382:	d021      	beq.n	80023c8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002384:	4b0f      	ldr	r3, [pc, #60]	; (80023c4 <HAL_GPIO_Init+0x2d0>)
 8002386:	68da      	ldr	r2, [r3, #12]
 8002388:	490e      	ldr	r1, [pc, #56]	; (80023c4 <HAL_GPIO_Init+0x2d0>)
 800238a:	69bb      	ldr	r3, [r7, #24]
 800238c:	4313      	orrs	r3, r2
 800238e:	60cb      	str	r3, [r1, #12]
 8002390:	e021      	b.n	80023d6 <HAL_GPIO_Init+0x2e2>
 8002392:	bf00      	nop
 8002394:	10320000 	.word	0x10320000
 8002398:	10310000 	.word	0x10310000
 800239c:	10220000 	.word	0x10220000
 80023a0:	10210000 	.word	0x10210000
 80023a4:	10120000 	.word	0x10120000
 80023a8:	10110000 	.word	0x10110000
 80023ac:	40021000 	.word	0x40021000
 80023b0:	40010000 	.word	0x40010000
 80023b4:	40010800 	.word	0x40010800
 80023b8:	40010c00 	.word	0x40010c00
 80023bc:	40011000 	.word	0x40011000
 80023c0:	40011400 	.word	0x40011400
 80023c4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80023c8:	4b0b      	ldr	r3, [pc, #44]	; (80023f8 <HAL_GPIO_Init+0x304>)
 80023ca:	68da      	ldr	r2, [r3, #12]
 80023cc:	69bb      	ldr	r3, [r7, #24]
 80023ce:	43db      	mvns	r3, r3
 80023d0:	4909      	ldr	r1, [pc, #36]	; (80023f8 <HAL_GPIO_Init+0x304>)
 80023d2:	4013      	ands	r3, r2
 80023d4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80023d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023d8:	3301      	adds	r3, #1
 80023da:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	681a      	ldr	r2, [r3, #0]
 80023e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023e2:	fa22 f303 	lsr.w	r3, r2, r3
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	f47f ae8e 	bne.w	8002108 <HAL_GPIO_Init+0x14>
  }
}
 80023ec:	bf00      	nop
 80023ee:	bf00      	nop
 80023f0:	372c      	adds	r7, #44	; 0x2c
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bc80      	pop	{r7}
 80023f6:	4770      	bx	lr
 80023f8:	40010400 	.word	0x40010400

080023fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80023fc:	b480      	push	{r7}
 80023fe:	b083      	sub	sp, #12
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
 8002404:	460b      	mov	r3, r1
 8002406:	807b      	strh	r3, [r7, #2]
 8002408:	4613      	mov	r3, r2
 800240a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800240c:	787b      	ldrb	r3, [r7, #1]
 800240e:	2b00      	cmp	r3, #0
 8002410:	d003      	beq.n	800241a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002412:	887a      	ldrh	r2, [r7, #2]
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002418:	e003      	b.n	8002422 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800241a:	887b      	ldrh	r3, [r7, #2]
 800241c:	041a      	lsls	r2, r3, #16
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	611a      	str	r2, [r3, #16]
}
 8002422:	bf00      	nop
 8002424:	370c      	adds	r7, #12
 8002426:	46bd      	mov	sp, r7
 8002428:	bc80      	pop	{r7}
 800242a:	4770      	bx	lr

0800242c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800242c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800242e:	b08b      	sub	sp, #44	; 0x2c
 8002430:	af06      	add	r7, sp, #24
 8002432:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2b00      	cmp	r3, #0
 8002438:	d101      	bne.n	800243e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800243a:	2301      	movs	r3, #1
 800243c:	e0fd      	b.n	800263a <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8002444:	b2db      	uxtb	r3, r3
 8002446:	2b00      	cmp	r3, #0
 8002448:	d106      	bne.n	8002458 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	2200      	movs	r2, #0
 800244e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002452:	6878      	ldr	r0, [r7, #4]
 8002454:	f7ff f8c2 	bl	80015dc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2203      	movs	r2, #3
 800245c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	4618      	mov	r0, r3
 8002466:	f002 f92a 	bl	80046be <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	603b      	str	r3, [r7, #0]
 8002470:	687e      	ldr	r6, [r7, #4]
 8002472:	466d      	mov	r5, sp
 8002474:	f106 0410 	add.w	r4, r6, #16
 8002478:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800247a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800247c:	6823      	ldr	r3, [r4, #0]
 800247e:	602b      	str	r3, [r5, #0]
 8002480:	1d33      	adds	r3, r6, #4
 8002482:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002484:	6838      	ldr	r0, [r7, #0]
 8002486:	f002 f90a 	bl	800469e <USB_CoreInit>
 800248a:	4603      	mov	r3, r0
 800248c:	2b00      	cmp	r3, #0
 800248e:	d005      	beq.n	800249c <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2202      	movs	r2, #2
 8002494:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8002498:	2301      	movs	r3, #1
 800249a:	e0ce      	b.n	800263a <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	2100      	movs	r1, #0
 80024a2:	4618      	mov	r0, r3
 80024a4:	f002 f925 	bl	80046f2 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80024a8:	2300      	movs	r3, #0
 80024aa:	73fb      	strb	r3, [r7, #15]
 80024ac:	e04c      	b.n	8002548 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80024ae:	7bfb      	ldrb	r3, [r7, #15]
 80024b0:	6879      	ldr	r1, [r7, #4]
 80024b2:	1c5a      	adds	r2, r3, #1
 80024b4:	4613      	mov	r3, r2
 80024b6:	009b      	lsls	r3, r3, #2
 80024b8:	4413      	add	r3, r2
 80024ba:	00db      	lsls	r3, r3, #3
 80024bc:	440b      	add	r3, r1
 80024be:	3301      	adds	r3, #1
 80024c0:	2201      	movs	r2, #1
 80024c2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80024c4:	7bfb      	ldrb	r3, [r7, #15]
 80024c6:	6879      	ldr	r1, [r7, #4]
 80024c8:	1c5a      	adds	r2, r3, #1
 80024ca:	4613      	mov	r3, r2
 80024cc:	009b      	lsls	r3, r3, #2
 80024ce:	4413      	add	r3, r2
 80024d0:	00db      	lsls	r3, r3, #3
 80024d2:	440b      	add	r3, r1
 80024d4:	7bfa      	ldrb	r2, [r7, #15]
 80024d6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80024d8:	7bfa      	ldrb	r2, [r7, #15]
 80024da:	7bfb      	ldrb	r3, [r7, #15]
 80024dc:	b298      	uxth	r0, r3
 80024de:	6879      	ldr	r1, [r7, #4]
 80024e0:	4613      	mov	r3, r2
 80024e2:	009b      	lsls	r3, r3, #2
 80024e4:	4413      	add	r3, r2
 80024e6:	00db      	lsls	r3, r3, #3
 80024e8:	440b      	add	r3, r1
 80024ea:	3336      	adds	r3, #54	; 0x36
 80024ec:	4602      	mov	r2, r0
 80024ee:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80024f0:	7bfb      	ldrb	r3, [r7, #15]
 80024f2:	6879      	ldr	r1, [r7, #4]
 80024f4:	1c5a      	adds	r2, r3, #1
 80024f6:	4613      	mov	r3, r2
 80024f8:	009b      	lsls	r3, r3, #2
 80024fa:	4413      	add	r3, r2
 80024fc:	00db      	lsls	r3, r3, #3
 80024fe:	440b      	add	r3, r1
 8002500:	3303      	adds	r3, #3
 8002502:	2200      	movs	r2, #0
 8002504:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002506:	7bfa      	ldrb	r2, [r7, #15]
 8002508:	6879      	ldr	r1, [r7, #4]
 800250a:	4613      	mov	r3, r2
 800250c:	009b      	lsls	r3, r3, #2
 800250e:	4413      	add	r3, r2
 8002510:	00db      	lsls	r3, r3, #3
 8002512:	440b      	add	r3, r1
 8002514:	3338      	adds	r3, #56	; 0x38
 8002516:	2200      	movs	r2, #0
 8002518:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800251a:	7bfa      	ldrb	r2, [r7, #15]
 800251c:	6879      	ldr	r1, [r7, #4]
 800251e:	4613      	mov	r3, r2
 8002520:	009b      	lsls	r3, r3, #2
 8002522:	4413      	add	r3, r2
 8002524:	00db      	lsls	r3, r3, #3
 8002526:	440b      	add	r3, r1
 8002528:	333c      	adds	r3, #60	; 0x3c
 800252a:	2200      	movs	r2, #0
 800252c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800252e:	7bfa      	ldrb	r2, [r7, #15]
 8002530:	6879      	ldr	r1, [r7, #4]
 8002532:	4613      	mov	r3, r2
 8002534:	009b      	lsls	r3, r3, #2
 8002536:	4413      	add	r3, r2
 8002538:	00db      	lsls	r3, r3, #3
 800253a:	440b      	add	r3, r1
 800253c:	3340      	adds	r3, #64	; 0x40
 800253e:	2200      	movs	r2, #0
 8002540:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002542:	7bfb      	ldrb	r3, [r7, #15]
 8002544:	3301      	adds	r3, #1
 8002546:	73fb      	strb	r3, [r7, #15]
 8002548:	7bfa      	ldrb	r2, [r7, #15]
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	685b      	ldr	r3, [r3, #4]
 800254e:	429a      	cmp	r2, r3
 8002550:	d3ad      	bcc.n	80024ae <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002552:	2300      	movs	r3, #0
 8002554:	73fb      	strb	r3, [r7, #15]
 8002556:	e044      	b.n	80025e2 <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002558:	7bfa      	ldrb	r2, [r7, #15]
 800255a:	6879      	ldr	r1, [r7, #4]
 800255c:	4613      	mov	r3, r2
 800255e:	009b      	lsls	r3, r3, #2
 8002560:	4413      	add	r3, r2
 8002562:	00db      	lsls	r3, r3, #3
 8002564:	440b      	add	r3, r1
 8002566:	f203 1369 	addw	r3, r3, #361	; 0x169
 800256a:	2200      	movs	r2, #0
 800256c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800256e:	7bfa      	ldrb	r2, [r7, #15]
 8002570:	6879      	ldr	r1, [r7, #4]
 8002572:	4613      	mov	r3, r2
 8002574:	009b      	lsls	r3, r3, #2
 8002576:	4413      	add	r3, r2
 8002578:	00db      	lsls	r3, r3, #3
 800257a:	440b      	add	r3, r1
 800257c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002580:	7bfa      	ldrb	r2, [r7, #15]
 8002582:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002584:	7bfa      	ldrb	r2, [r7, #15]
 8002586:	6879      	ldr	r1, [r7, #4]
 8002588:	4613      	mov	r3, r2
 800258a:	009b      	lsls	r3, r3, #2
 800258c:	4413      	add	r3, r2
 800258e:	00db      	lsls	r3, r3, #3
 8002590:	440b      	add	r3, r1
 8002592:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8002596:	2200      	movs	r2, #0
 8002598:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800259a:	7bfa      	ldrb	r2, [r7, #15]
 800259c:	6879      	ldr	r1, [r7, #4]
 800259e:	4613      	mov	r3, r2
 80025a0:	009b      	lsls	r3, r3, #2
 80025a2:	4413      	add	r3, r2
 80025a4:	00db      	lsls	r3, r3, #3
 80025a6:	440b      	add	r3, r1
 80025a8:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80025ac:	2200      	movs	r2, #0
 80025ae:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80025b0:	7bfa      	ldrb	r2, [r7, #15]
 80025b2:	6879      	ldr	r1, [r7, #4]
 80025b4:	4613      	mov	r3, r2
 80025b6:	009b      	lsls	r3, r3, #2
 80025b8:	4413      	add	r3, r2
 80025ba:	00db      	lsls	r3, r3, #3
 80025bc:	440b      	add	r3, r1
 80025be:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80025c2:	2200      	movs	r2, #0
 80025c4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80025c6:	7bfa      	ldrb	r2, [r7, #15]
 80025c8:	6879      	ldr	r1, [r7, #4]
 80025ca:	4613      	mov	r3, r2
 80025cc:	009b      	lsls	r3, r3, #2
 80025ce:	4413      	add	r3, r2
 80025d0:	00db      	lsls	r3, r3, #3
 80025d2:	440b      	add	r3, r1
 80025d4:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80025d8:	2200      	movs	r2, #0
 80025da:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80025dc:	7bfb      	ldrb	r3, [r7, #15]
 80025de:	3301      	adds	r3, #1
 80025e0:	73fb      	strb	r3, [r7, #15]
 80025e2:	7bfa      	ldrb	r2, [r7, #15]
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	685b      	ldr	r3, [r3, #4]
 80025e8:	429a      	cmp	r2, r3
 80025ea:	d3b5      	bcc.n	8002558 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	603b      	str	r3, [r7, #0]
 80025f2:	687e      	ldr	r6, [r7, #4]
 80025f4:	466d      	mov	r5, sp
 80025f6:	f106 0410 	add.w	r4, r6, #16
 80025fa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80025fc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80025fe:	6823      	ldr	r3, [r4, #0]
 8002600:	602b      	str	r3, [r5, #0]
 8002602:	1d33      	adds	r3, r6, #4
 8002604:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002606:	6838      	ldr	r0, [r7, #0]
 8002608:	f002 f87f 	bl	800470a <USB_DevInit>
 800260c:	4603      	mov	r3, r0
 800260e:	2b00      	cmp	r3, #0
 8002610:	d005      	beq.n	800261e <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	2202      	movs	r2, #2
 8002616:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 800261a:	2301      	movs	r3, #1
 800261c:	e00d      	b.n	800263a <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	2200      	movs	r2, #0
 8002622:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	2201      	movs	r2, #1
 800262a:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	4618      	mov	r0, r3
 8002634:	f002 f889 	bl	800474a <USB_DevDisconnect>

  return HAL_OK;
 8002638:	2300      	movs	r3, #0
}
 800263a:	4618      	mov	r0, r3
 800263c:	3714      	adds	r7, #20
 800263e:	46bd      	mov	sp, r7
 8002640:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08002644 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002644:	b480      	push	{r7}
 8002646:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8002648:	4b03      	ldr	r3, [pc, #12]	; (8002658 <HAL_PWR_EnableBkUpAccess+0x14>)
 800264a:	2201      	movs	r2, #1
 800264c:	601a      	str	r2, [r3, #0]
}
 800264e:	bf00      	nop
 8002650:	46bd      	mov	sp, r7
 8002652:	bc80      	pop	{r7}
 8002654:	4770      	bx	lr
 8002656:	bf00      	nop
 8002658:	420e0020 	.word	0x420e0020

0800265c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b086      	sub	sp, #24
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2b00      	cmp	r3, #0
 8002668:	d101      	bne.n	800266e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800266a:	2301      	movs	r3, #1
 800266c:	e272      	b.n	8002b54 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f003 0301 	and.w	r3, r3, #1
 8002676:	2b00      	cmp	r3, #0
 8002678:	f000 8087 	beq.w	800278a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800267c:	4b92      	ldr	r3, [pc, #584]	; (80028c8 <HAL_RCC_OscConfig+0x26c>)
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	f003 030c 	and.w	r3, r3, #12
 8002684:	2b04      	cmp	r3, #4
 8002686:	d00c      	beq.n	80026a2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002688:	4b8f      	ldr	r3, [pc, #572]	; (80028c8 <HAL_RCC_OscConfig+0x26c>)
 800268a:	685b      	ldr	r3, [r3, #4]
 800268c:	f003 030c 	and.w	r3, r3, #12
 8002690:	2b08      	cmp	r3, #8
 8002692:	d112      	bne.n	80026ba <HAL_RCC_OscConfig+0x5e>
 8002694:	4b8c      	ldr	r3, [pc, #560]	; (80028c8 <HAL_RCC_OscConfig+0x26c>)
 8002696:	685b      	ldr	r3, [r3, #4]
 8002698:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800269c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026a0:	d10b      	bne.n	80026ba <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026a2:	4b89      	ldr	r3, [pc, #548]	; (80028c8 <HAL_RCC_OscConfig+0x26c>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d06c      	beq.n	8002788 <HAL_RCC_OscConfig+0x12c>
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	685b      	ldr	r3, [r3, #4]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d168      	bne.n	8002788 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80026b6:	2301      	movs	r3, #1
 80026b8:	e24c      	b.n	8002b54 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	685b      	ldr	r3, [r3, #4]
 80026be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026c2:	d106      	bne.n	80026d2 <HAL_RCC_OscConfig+0x76>
 80026c4:	4b80      	ldr	r3, [pc, #512]	; (80028c8 <HAL_RCC_OscConfig+0x26c>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	4a7f      	ldr	r2, [pc, #508]	; (80028c8 <HAL_RCC_OscConfig+0x26c>)
 80026ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026ce:	6013      	str	r3, [r2, #0]
 80026d0:	e02e      	b.n	8002730 <HAL_RCC_OscConfig+0xd4>
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	685b      	ldr	r3, [r3, #4]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d10c      	bne.n	80026f4 <HAL_RCC_OscConfig+0x98>
 80026da:	4b7b      	ldr	r3, [pc, #492]	; (80028c8 <HAL_RCC_OscConfig+0x26c>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	4a7a      	ldr	r2, [pc, #488]	; (80028c8 <HAL_RCC_OscConfig+0x26c>)
 80026e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026e4:	6013      	str	r3, [r2, #0]
 80026e6:	4b78      	ldr	r3, [pc, #480]	; (80028c8 <HAL_RCC_OscConfig+0x26c>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	4a77      	ldr	r2, [pc, #476]	; (80028c8 <HAL_RCC_OscConfig+0x26c>)
 80026ec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80026f0:	6013      	str	r3, [r2, #0]
 80026f2:	e01d      	b.n	8002730 <HAL_RCC_OscConfig+0xd4>
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	685b      	ldr	r3, [r3, #4]
 80026f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80026fc:	d10c      	bne.n	8002718 <HAL_RCC_OscConfig+0xbc>
 80026fe:	4b72      	ldr	r3, [pc, #456]	; (80028c8 <HAL_RCC_OscConfig+0x26c>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	4a71      	ldr	r2, [pc, #452]	; (80028c8 <HAL_RCC_OscConfig+0x26c>)
 8002704:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002708:	6013      	str	r3, [r2, #0]
 800270a:	4b6f      	ldr	r3, [pc, #444]	; (80028c8 <HAL_RCC_OscConfig+0x26c>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	4a6e      	ldr	r2, [pc, #440]	; (80028c8 <HAL_RCC_OscConfig+0x26c>)
 8002710:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002714:	6013      	str	r3, [r2, #0]
 8002716:	e00b      	b.n	8002730 <HAL_RCC_OscConfig+0xd4>
 8002718:	4b6b      	ldr	r3, [pc, #428]	; (80028c8 <HAL_RCC_OscConfig+0x26c>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	4a6a      	ldr	r2, [pc, #424]	; (80028c8 <HAL_RCC_OscConfig+0x26c>)
 800271e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002722:	6013      	str	r3, [r2, #0]
 8002724:	4b68      	ldr	r3, [pc, #416]	; (80028c8 <HAL_RCC_OscConfig+0x26c>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4a67      	ldr	r2, [pc, #412]	; (80028c8 <HAL_RCC_OscConfig+0x26c>)
 800272a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800272e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	685b      	ldr	r3, [r3, #4]
 8002734:	2b00      	cmp	r3, #0
 8002736:	d013      	beq.n	8002760 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002738:	f7ff f8be 	bl	80018b8 <HAL_GetTick>
 800273c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800273e:	e008      	b.n	8002752 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002740:	f7ff f8ba 	bl	80018b8 <HAL_GetTick>
 8002744:	4602      	mov	r2, r0
 8002746:	693b      	ldr	r3, [r7, #16]
 8002748:	1ad3      	subs	r3, r2, r3
 800274a:	2b64      	cmp	r3, #100	; 0x64
 800274c:	d901      	bls.n	8002752 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800274e:	2303      	movs	r3, #3
 8002750:	e200      	b.n	8002b54 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002752:	4b5d      	ldr	r3, [pc, #372]	; (80028c8 <HAL_RCC_OscConfig+0x26c>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800275a:	2b00      	cmp	r3, #0
 800275c:	d0f0      	beq.n	8002740 <HAL_RCC_OscConfig+0xe4>
 800275e:	e014      	b.n	800278a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002760:	f7ff f8aa 	bl	80018b8 <HAL_GetTick>
 8002764:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002766:	e008      	b.n	800277a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002768:	f7ff f8a6 	bl	80018b8 <HAL_GetTick>
 800276c:	4602      	mov	r2, r0
 800276e:	693b      	ldr	r3, [r7, #16]
 8002770:	1ad3      	subs	r3, r2, r3
 8002772:	2b64      	cmp	r3, #100	; 0x64
 8002774:	d901      	bls.n	800277a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002776:	2303      	movs	r3, #3
 8002778:	e1ec      	b.n	8002b54 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800277a:	4b53      	ldr	r3, [pc, #332]	; (80028c8 <HAL_RCC_OscConfig+0x26c>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002782:	2b00      	cmp	r3, #0
 8002784:	d1f0      	bne.n	8002768 <HAL_RCC_OscConfig+0x10c>
 8002786:	e000      	b.n	800278a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002788:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f003 0302 	and.w	r3, r3, #2
 8002792:	2b00      	cmp	r3, #0
 8002794:	d063      	beq.n	800285e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002796:	4b4c      	ldr	r3, [pc, #304]	; (80028c8 <HAL_RCC_OscConfig+0x26c>)
 8002798:	685b      	ldr	r3, [r3, #4]
 800279a:	f003 030c 	and.w	r3, r3, #12
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d00b      	beq.n	80027ba <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80027a2:	4b49      	ldr	r3, [pc, #292]	; (80028c8 <HAL_RCC_OscConfig+0x26c>)
 80027a4:	685b      	ldr	r3, [r3, #4]
 80027a6:	f003 030c 	and.w	r3, r3, #12
 80027aa:	2b08      	cmp	r3, #8
 80027ac:	d11c      	bne.n	80027e8 <HAL_RCC_OscConfig+0x18c>
 80027ae:	4b46      	ldr	r3, [pc, #280]	; (80028c8 <HAL_RCC_OscConfig+0x26c>)
 80027b0:	685b      	ldr	r3, [r3, #4]
 80027b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d116      	bne.n	80027e8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027ba:	4b43      	ldr	r3, [pc, #268]	; (80028c8 <HAL_RCC_OscConfig+0x26c>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f003 0302 	and.w	r3, r3, #2
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d005      	beq.n	80027d2 <HAL_RCC_OscConfig+0x176>
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	691b      	ldr	r3, [r3, #16]
 80027ca:	2b01      	cmp	r3, #1
 80027cc:	d001      	beq.n	80027d2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80027ce:	2301      	movs	r3, #1
 80027d0:	e1c0      	b.n	8002b54 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027d2:	4b3d      	ldr	r3, [pc, #244]	; (80028c8 <HAL_RCC_OscConfig+0x26c>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	695b      	ldr	r3, [r3, #20]
 80027de:	00db      	lsls	r3, r3, #3
 80027e0:	4939      	ldr	r1, [pc, #228]	; (80028c8 <HAL_RCC_OscConfig+0x26c>)
 80027e2:	4313      	orrs	r3, r2
 80027e4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027e6:	e03a      	b.n	800285e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	691b      	ldr	r3, [r3, #16]
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d020      	beq.n	8002832 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80027f0:	4b36      	ldr	r3, [pc, #216]	; (80028cc <HAL_RCC_OscConfig+0x270>)
 80027f2:	2201      	movs	r2, #1
 80027f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027f6:	f7ff f85f 	bl	80018b8 <HAL_GetTick>
 80027fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027fc:	e008      	b.n	8002810 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027fe:	f7ff f85b 	bl	80018b8 <HAL_GetTick>
 8002802:	4602      	mov	r2, r0
 8002804:	693b      	ldr	r3, [r7, #16]
 8002806:	1ad3      	subs	r3, r2, r3
 8002808:	2b02      	cmp	r3, #2
 800280a:	d901      	bls.n	8002810 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800280c:	2303      	movs	r3, #3
 800280e:	e1a1      	b.n	8002b54 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002810:	4b2d      	ldr	r3, [pc, #180]	; (80028c8 <HAL_RCC_OscConfig+0x26c>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f003 0302 	and.w	r3, r3, #2
 8002818:	2b00      	cmp	r3, #0
 800281a:	d0f0      	beq.n	80027fe <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800281c:	4b2a      	ldr	r3, [pc, #168]	; (80028c8 <HAL_RCC_OscConfig+0x26c>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	695b      	ldr	r3, [r3, #20]
 8002828:	00db      	lsls	r3, r3, #3
 800282a:	4927      	ldr	r1, [pc, #156]	; (80028c8 <HAL_RCC_OscConfig+0x26c>)
 800282c:	4313      	orrs	r3, r2
 800282e:	600b      	str	r3, [r1, #0]
 8002830:	e015      	b.n	800285e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002832:	4b26      	ldr	r3, [pc, #152]	; (80028cc <HAL_RCC_OscConfig+0x270>)
 8002834:	2200      	movs	r2, #0
 8002836:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002838:	f7ff f83e 	bl	80018b8 <HAL_GetTick>
 800283c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800283e:	e008      	b.n	8002852 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002840:	f7ff f83a 	bl	80018b8 <HAL_GetTick>
 8002844:	4602      	mov	r2, r0
 8002846:	693b      	ldr	r3, [r7, #16]
 8002848:	1ad3      	subs	r3, r2, r3
 800284a:	2b02      	cmp	r3, #2
 800284c:	d901      	bls.n	8002852 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800284e:	2303      	movs	r3, #3
 8002850:	e180      	b.n	8002b54 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002852:	4b1d      	ldr	r3, [pc, #116]	; (80028c8 <HAL_RCC_OscConfig+0x26c>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f003 0302 	and.w	r3, r3, #2
 800285a:	2b00      	cmp	r3, #0
 800285c:	d1f0      	bne.n	8002840 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f003 0308 	and.w	r3, r3, #8
 8002866:	2b00      	cmp	r3, #0
 8002868:	d03a      	beq.n	80028e0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	699b      	ldr	r3, [r3, #24]
 800286e:	2b00      	cmp	r3, #0
 8002870:	d019      	beq.n	80028a6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002872:	4b17      	ldr	r3, [pc, #92]	; (80028d0 <HAL_RCC_OscConfig+0x274>)
 8002874:	2201      	movs	r2, #1
 8002876:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002878:	f7ff f81e 	bl	80018b8 <HAL_GetTick>
 800287c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800287e:	e008      	b.n	8002892 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002880:	f7ff f81a 	bl	80018b8 <HAL_GetTick>
 8002884:	4602      	mov	r2, r0
 8002886:	693b      	ldr	r3, [r7, #16]
 8002888:	1ad3      	subs	r3, r2, r3
 800288a:	2b02      	cmp	r3, #2
 800288c:	d901      	bls.n	8002892 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800288e:	2303      	movs	r3, #3
 8002890:	e160      	b.n	8002b54 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002892:	4b0d      	ldr	r3, [pc, #52]	; (80028c8 <HAL_RCC_OscConfig+0x26c>)
 8002894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002896:	f003 0302 	and.w	r3, r3, #2
 800289a:	2b00      	cmp	r3, #0
 800289c:	d0f0      	beq.n	8002880 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800289e:	2001      	movs	r0, #1
 80028a0:	f000 fac4 	bl	8002e2c <RCC_Delay>
 80028a4:	e01c      	b.n	80028e0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80028a6:	4b0a      	ldr	r3, [pc, #40]	; (80028d0 <HAL_RCC_OscConfig+0x274>)
 80028a8:	2200      	movs	r2, #0
 80028aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028ac:	f7ff f804 	bl	80018b8 <HAL_GetTick>
 80028b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028b2:	e00f      	b.n	80028d4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80028b4:	f7ff f800 	bl	80018b8 <HAL_GetTick>
 80028b8:	4602      	mov	r2, r0
 80028ba:	693b      	ldr	r3, [r7, #16]
 80028bc:	1ad3      	subs	r3, r2, r3
 80028be:	2b02      	cmp	r3, #2
 80028c0:	d908      	bls.n	80028d4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80028c2:	2303      	movs	r3, #3
 80028c4:	e146      	b.n	8002b54 <HAL_RCC_OscConfig+0x4f8>
 80028c6:	bf00      	nop
 80028c8:	40021000 	.word	0x40021000
 80028cc:	42420000 	.word	0x42420000
 80028d0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028d4:	4b92      	ldr	r3, [pc, #584]	; (8002b20 <HAL_RCC_OscConfig+0x4c4>)
 80028d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028d8:	f003 0302 	and.w	r3, r3, #2
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d1e9      	bne.n	80028b4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f003 0304 	and.w	r3, r3, #4
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	f000 80a6 	beq.w	8002a3a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80028ee:	2300      	movs	r3, #0
 80028f0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80028f2:	4b8b      	ldr	r3, [pc, #556]	; (8002b20 <HAL_RCC_OscConfig+0x4c4>)
 80028f4:	69db      	ldr	r3, [r3, #28]
 80028f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d10d      	bne.n	800291a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028fe:	4b88      	ldr	r3, [pc, #544]	; (8002b20 <HAL_RCC_OscConfig+0x4c4>)
 8002900:	69db      	ldr	r3, [r3, #28]
 8002902:	4a87      	ldr	r2, [pc, #540]	; (8002b20 <HAL_RCC_OscConfig+0x4c4>)
 8002904:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002908:	61d3      	str	r3, [r2, #28]
 800290a:	4b85      	ldr	r3, [pc, #532]	; (8002b20 <HAL_RCC_OscConfig+0x4c4>)
 800290c:	69db      	ldr	r3, [r3, #28]
 800290e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002912:	60bb      	str	r3, [r7, #8]
 8002914:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002916:	2301      	movs	r3, #1
 8002918:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800291a:	4b82      	ldr	r3, [pc, #520]	; (8002b24 <HAL_RCC_OscConfig+0x4c8>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002922:	2b00      	cmp	r3, #0
 8002924:	d118      	bne.n	8002958 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002926:	4b7f      	ldr	r3, [pc, #508]	; (8002b24 <HAL_RCC_OscConfig+0x4c8>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	4a7e      	ldr	r2, [pc, #504]	; (8002b24 <HAL_RCC_OscConfig+0x4c8>)
 800292c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002930:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002932:	f7fe ffc1 	bl	80018b8 <HAL_GetTick>
 8002936:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002938:	e008      	b.n	800294c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800293a:	f7fe ffbd 	bl	80018b8 <HAL_GetTick>
 800293e:	4602      	mov	r2, r0
 8002940:	693b      	ldr	r3, [r7, #16]
 8002942:	1ad3      	subs	r3, r2, r3
 8002944:	2b64      	cmp	r3, #100	; 0x64
 8002946:	d901      	bls.n	800294c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002948:	2303      	movs	r3, #3
 800294a:	e103      	b.n	8002b54 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800294c:	4b75      	ldr	r3, [pc, #468]	; (8002b24 <HAL_RCC_OscConfig+0x4c8>)
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002954:	2b00      	cmp	r3, #0
 8002956:	d0f0      	beq.n	800293a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	68db      	ldr	r3, [r3, #12]
 800295c:	2b01      	cmp	r3, #1
 800295e:	d106      	bne.n	800296e <HAL_RCC_OscConfig+0x312>
 8002960:	4b6f      	ldr	r3, [pc, #444]	; (8002b20 <HAL_RCC_OscConfig+0x4c4>)
 8002962:	6a1b      	ldr	r3, [r3, #32]
 8002964:	4a6e      	ldr	r2, [pc, #440]	; (8002b20 <HAL_RCC_OscConfig+0x4c4>)
 8002966:	f043 0301 	orr.w	r3, r3, #1
 800296a:	6213      	str	r3, [r2, #32]
 800296c:	e02d      	b.n	80029ca <HAL_RCC_OscConfig+0x36e>
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	68db      	ldr	r3, [r3, #12]
 8002972:	2b00      	cmp	r3, #0
 8002974:	d10c      	bne.n	8002990 <HAL_RCC_OscConfig+0x334>
 8002976:	4b6a      	ldr	r3, [pc, #424]	; (8002b20 <HAL_RCC_OscConfig+0x4c4>)
 8002978:	6a1b      	ldr	r3, [r3, #32]
 800297a:	4a69      	ldr	r2, [pc, #420]	; (8002b20 <HAL_RCC_OscConfig+0x4c4>)
 800297c:	f023 0301 	bic.w	r3, r3, #1
 8002980:	6213      	str	r3, [r2, #32]
 8002982:	4b67      	ldr	r3, [pc, #412]	; (8002b20 <HAL_RCC_OscConfig+0x4c4>)
 8002984:	6a1b      	ldr	r3, [r3, #32]
 8002986:	4a66      	ldr	r2, [pc, #408]	; (8002b20 <HAL_RCC_OscConfig+0x4c4>)
 8002988:	f023 0304 	bic.w	r3, r3, #4
 800298c:	6213      	str	r3, [r2, #32]
 800298e:	e01c      	b.n	80029ca <HAL_RCC_OscConfig+0x36e>
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	68db      	ldr	r3, [r3, #12]
 8002994:	2b05      	cmp	r3, #5
 8002996:	d10c      	bne.n	80029b2 <HAL_RCC_OscConfig+0x356>
 8002998:	4b61      	ldr	r3, [pc, #388]	; (8002b20 <HAL_RCC_OscConfig+0x4c4>)
 800299a:	6a1b      	ldr	r3, [r3, #32]
 800299c:	4a60      	ldr	r2, [pc, #384]	; (8002b20 <HAL_RCC_OscConfig+0x4c4>)
 800299e:	f043 0304 	orr.w	r3, r3, #4
 80029a2:	6213      	str	r3, [r2, #32]
 80029a4:	4b5e      	ldr	r3, [pc, #376]	; (8002b20 <HAL_RCC_OscConfig+0x4c4>)
 80029a6:	6a1b      	ldr	r3, [r3, #32]
 80029a8:	4a5d      	ldr	r2, [pc, #372]	; (8002b20 <HAL_RCC_OscConfig+0x4c4>)
 80029aa:	f043 0301 	orr.w	r3, r3, #1
 80029ae:	6213      	str	r3, [r2, #32]
 80029b0:	e00b      	b.n	80029ca <HAL_RCC_OscConfig+0x36e>
 80029b2:	4b5b      	ldr	r3, [pc, #364]	; (8002b20 <HAL_RCC_OscConfig+0x4c4>)
 80029b4:	6a1b      	ldr	r3, [r3, #32]
 80029b6:	4a5a      	ldr	r2, [pc, #360]	; (8002b20 <HAL_RCC_OscConfig+0x4c4>)
 80029b8:	f023 0301 	bic.w	r3, r3, #1
 80029bc:	6213      	str	r3, [r2, #32]
 80029be:	4b58      	ldr	r3, [pc, #352]	; (8002b20 <HAL_RCC_OscConfig+0x4c4>)
 80029c0:	6a1b      	ldr	r3, [r3, #32]
 80029c2:	4a57      	ldr	r2, [pc, #348]	; (8002b20 <HAL_RCC_OscConfig+0x4c4>)
 80029c4:	f023 0304 	bic.w	r3, r3, #4
 80029c8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	68db      	ldr	r3, [r3, #12]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d015      	beq.n	80029fe <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029d2:	f7fe ff71 	bl	80018b8 <HAL_GetTick>
 80029d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029d8:	e00a      	b.n	80029f0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029da:	f7fe ff6d 	bl	80018b8 <HAL_GetTick>
 80029de:	4602      	mov	r2, r0
 80029e0:	693b      	ldr	r3, [r7, #16]
 80029e2:	1ad3      	subs	r3, r2, r3
 80029e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80029e8:	4293      	cmp	r3, r2
 80029ea:	d901      	bls.n	80029f0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80029ec:	2303      	movs	r3, #3
 80029ee:	e0b1      	b.n	8002b54 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029f0:	4b4b      	ldr	r3, [pc, #300]	; (8002b20 <HAL_RCC_OscConfig+0x4c4>)
 80029f2:	6a1b      	ldr	r3, [r3, #32]
 80029f4:	f003 0302 	and.w	r3, r3, #2
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d0ee      	beq.n	80029da <HAL_RCC_OscConfig+0x37e>
 80029fc:	e014      	b.n	8002a28 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029fe:	f7fe ff5b 	bl	80018b8 <HAL_GetTick>
 8002a02:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a04:	e00a      	b.n	8002a1c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a06:	f7fe ff57 	bl	80018b8 <HAL_GetTick>
 8002a0a:	4602      	mov	r2, r0
 8002a0c:	693b      	ldr	r3, [r7, #16]
 8002a0e:	1ad3      	subs	r3, r2, r3
 8002a10:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a14:	4293      	cmp	r3, r2
 8002a16:	d901      	bls.n	8002a1c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002a18:	2303      	movs	r3, #3
 8002a1a:	e09b      	b.n	8002b54 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a1c:	4b40      	ldr	r3, [pc, #256]	; (8002b20 <HAL_RCC_OscConfig+0x4c4>)
 8002a1e:	6a1b      	ldr	r3, [r3, #32]
 8002a20:	f003 0302 	and.w	r3, r3, #2
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d1ee      	bne.n	8002a06 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002a28:	7dfb      	ldrb	r3, [r7, #23]
 8002a2a:	2b01      	cmp	r3, #1
 8002a2c:	d105      	bne.n	8002a3a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a2e:	4b3c      	ldr	r3, [pc, #240]	; (8002b20 <HAL_RCC_OscConfig+0x4c4>)
 8002a30:	69db      	ldr	r3, [r3, #28]
 8002a32:	4a3b      	ldr	r2, [pc, #236]	; (8002b20 <HAL_RCC_OscConfig+0x4c4>)
 8002a34:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a38:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	69db      	ldr	r3, [r3, #28]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	f000 8087 	beq.w	8002b52 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002a44:	4b36      	ldr	r3, [pc, #216]	; (8002b20 <HAL_RCC_OscConfig+0x4c4>)
 8002a46:	685b      	ldr	r3, [r3, #4]
 8002a48:	f003 030c 	and.w	r3, r3, #12
 8002a4c:	2b08      	cmp	r3, #8
 8002a4e:	d061      	beq.n	8002b14 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	69db      	ldr	r3, [r3, #28]
 8002a54:	2b02      	cmp	r3, #2
 8002a56:	d146      	bne.n	8002ae6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a58:	4b33      	ldr	r3, [pc, #204]	; (8002b28 <HAL_RCC_OscConfig+0x4cc>)
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a5e:	f7fe ff2b 	bl	80018b8 <HAL_GetTick>
 8002a62:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a64:	e008      	b.n	8002a78 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a66:	f7fe ff27 	bl	80018b8 <HAL_GetTick>
 8002a6a:	4602      	mov	r2, r0
 8002a6c:	693b      	ldr	r3, [r7, #16]
 8002a6e:	1ad3      	subs	r3, r2, r3
 8002a70:	2b02      	cmp	r3, #2
 8002a72:	d901      	bls.n	8002a78 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002a74:	2303      	movs	r3, #3
 8002a76:	e06d      	b.n	8002b54 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a78:	4b29      	ldr	r3, [pc, #164]	; (8002b20 <HAL_RCC_OscConfig+0x4c4>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d1f0      	bne.n	8002a66 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6a1b      	ldr	r3, [r3, #32]
 8002a88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a8c:	d108      	bne.n	8002aa0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002a8e:	4b24      	ldr	r3, [pc, #144]	; (8002b20 <HAL_RCC_OscConfig+0x4c4>)
 8002a90:	685b      	ldr	r3, [r3, #4]
 8002a92:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	689b      	ldr	r3, [r3, #8]
 8002a9a:	4921      	ldr	r1, [pc, #132]	; (8002b20 <HAL_RCC_OscConfig+0x4c4>)
 8002a9c:	4313      	orrs	r3, r2
 8002a9e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002aa0:	4b1f      	ldr	r3, [pc, #124]	; (8002b20 <HAL_RCC_OscConfig+0x4c4>)
 8002aa2:	685b      	ldr	r3, [r3, #4]
 8002aa4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6a19      	ldr	r1, [r3, #32]
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ab0:	430b      	orrs	r3, r1
 8002ab2:	491b      	ldr	r1, [pc, #108]	; (8002b20 <HAL_RCC_OscConfig+0x4c4>)
 8002ab4:	4313      	orrs	r3, r2
 8002ab6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ab8:	4b1b      	ldr	r3, [pc, #108]	; (8002b28 <HAL_RCC_OscConfig+0x4cc>)
 8002aba:	2201      	movs	r2, #1
 8002abc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002abe:	f7fe fefb 	bl	80018b8 <HAL_GetTick>
 8002ac2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002ac4:	e008      	b.n	8002ad8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ac6:	f7fe fef7 	bl	80018b8 <HAL_GetTick>
 8002aca:	4602      	mov	r2, r0
 8002acc:	693b      	ldr	r3, [r7, #16]
 8002ace:	1ad3      	subs	r3, r2, r3
 8002ad0:	2b02      	cmp	r3, #2
 8002ad2:	d901      	bls.n	8002ad8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002ad4:	2303      	movs	r3, #3
 8002ad6:	e03d      	b.n	8002b54 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002ad8:	4b11      	ldr	r3, [pc, #68]	; (8002b20 <HAL_RCC_OscConfig+0x4c4>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d0f0      	beq.n	8002ac6 <HAL_RCC_OscConfig+0x46a>
 8002ae4:	e035      	b.n	8002b52 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ae6:	4b10      	ldr	r3, [pc, #64]	; (8002b28 <HAL_RCC_OscConfig+0x4cc>)
 8002ae8:	2200      	movs	r2, #0
 8002aea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002aec:	f7fe fee4 	bl	80018b8 <HAL_GetTick>
 8002af0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002af2:	e008      	b.n	8002b06 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002af4:	f7fe fee0 	bl	80018b8 <HAL_GetTick>
 8002af8:	4602      	mov	r2, r0
 8002afa:	693b      	ldr	r3, [r7, #16]
 8002afc:	1ad3      	subs	r3, r2, r3
 8002afe:	2b02      	cmp	r3, #2
 8002b00:	d901      	bls.n	8002b06 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002b02:	2303      	movs	r3, #3
 8002b04:	e026      	b.n	8002b54 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b06:	4b06      	ldr	r3, [pc, #24]	; (8002b20 <HAL_RCC_OscConfig+0x4c4>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d1f0      	bne.n	8002af4 <HAL_RCC_OscConfig+0x498>
 8002b12:	e01e      	b.n	8002b52 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	69db      	ldr	r3, [r3, #28]
 8002b18:	2b01      	cmp	r3, #1
 8002b1a:	d107      	bne.n	8002b2c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002b1c:	2301      	movs	r3, #1
 8002b1e:	e019      	b.n	8002b54 <HAL_RCC_OscConfig+0x4f8>
 8002b20:	40021000 	.word	0x40021000
 8002b24:	40007000 	.word	0x40007000
 8002b28:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002b2c:	4b0b      	ldr	r3, [pc, #44]	; (8002b5c <HAL_RCC_OscConfig+0x500>)
 8002b2e:	685b      	ldr	r3, [r3, #4]
 8002b30:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6a1b      	ldr	r3, [r3, #32]
 8002b3c:	429a      	cmp	r2, r3
 8002b3e:	d106      	bne.n	8002b4e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b4a:	429a      	cmp	r2, r3
 8002b4c:	d001      	beq.n	8002b52 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002b4e:	2301      	movs	r3, #1
 8002b50:	e000      	b.n	8002b54 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002b52:	2300      	movs	r3, #0
}
 8002b54:	4618      	mov	r0, r3
 8002b56:	3718      	adds	r7, #24
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	bd80      	pop	{r7, pc}
 8002b5c:	40021000 	.word	0x40021000

08002b60 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b084      	sub	sp, #16
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
 8002b68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d101      	bne.n	8002b74 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b70:	2301      	movs	r3, #1
 8002b72:	e0d0      	b.n	8002d16 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002b74:	4b6a      	ldr	r3, [pc, #424]	; (8002d20 <HAL_RCC_ClockConfig+0x1c0>)
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f003 0307 	and.w	r3, r3, #7
 8002b7c:	683a      	ldr	r2, [r7, #0]
 8002b7e:	429a      	cmp	r2, r3
 8002b80:	d910      	bls.n	8002ba4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b82:	4b67      	ldr	r3, [pc, #412]	; (8002d20 <HAL_RCC_ClockConfig+0x1c0>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f023 0207 	bic.w	r2, r3, #7
 8002b8a:	4965      	ldr	r1, [pc, #404]	; (8002d20 <HAL_RCC_ClockConfig+0x1c0>)
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	4313      	orrs	r3, r2
 8002b90:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b92:	4b63      	ldr	r3, [pc, #396]	; (8002d20 <HAL_RCC_ClockConfig+0x1c0>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f003 0307 	and.w	r3, r3, #7
 8002b9a:	683a      	ldr	r2, [r7, #0]
 8002b9c:	429a      	cmp	r2, r3
 8002b9e:	d001      	beq.n	8002ba4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002ba0:	2301      	movs	r3, #1
 8002ba2:	e0b8      	b.n	8002d16 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f003 0302 	and.w	r3, r3, #2
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d020      	beq.n	8002bf2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f003 0304 	and.w	r3, r3, #4
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d005      	beq.n	8002bc8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002bbc:	4b59      	ldr	r3, [pc, #356]	; (8002d24 <HAL_RCC_ClockConfig+0x1c4>)
 8002bbe:	685b      	ldr	r3, [r3, #4]
 8002bc0:	4a58      	ldr	r2, [pc, #352]	; (8002d24 <HAL_RCC_ClockConfig+0x1c4>)
 8002bc2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002bc6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f003 0308 	and.w	r3, r3, #8
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d005      	beq.n	8002be0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002bd4:	4b53      	ldr	r3, [pc, #332]	; (8002d24 <HAL_RCC_ClockConfig+0x1c4>)
 8002bd6:	685b      	ldr	r3, [r3, #4]
 8002bd8:	4a52      	ldr	r2, [pc, #328]	; (8002d24 <HAL_RCC_ClockConfig+0x1c4>)
 8002bda:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002bde:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002be0:	4b50      	ldr	r3, [pc, #320]	; (8002d24 <HAL_RCC_ClockConfig+0x1c4>)
 8002be2:	685b      	ldr	r3, [r3, #4]
 8002be4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	689b      	ldr	r3, [r3, #8]
 8002bec:	494d      	ldr	r1, [pc, #308]	; (8002d24 <HAL_RCC_ClockConfig+0x1c4>)
 8002bee:	4313      	orrs	r3, r2
 8002bf0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f003 0301 	and.w	r3, r3, #1
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d040      	beq.n	8002c80 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	685b      	ldr	r3, [r3, #4]
 8002c02:	2b01      	cmp	r3, #1
 8002c04:	d107      	bne.n	8002c16 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c06:	4b47      	ldr	r3, [pc, #284]	; (8002d24 <HAL_RCC_ClockConfig+0x1c4>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d115      	bne.n	8002c3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c12:	2301      	movs	r3, #1
 8002c14:	e07f      	b.n	8002d16 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	685b      	ldr	r3, [r3, #4]
 8002c1a:	2b02      	cmp	r3, #2
 8002c1c:	d107      	bne.n	8002c2e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c1e:	4b41      	ldr	r3, [pc, #260]	; (8002d24 <HAL_RCC_ClockConfig+0x1c4>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d109      	bne.n	8002c3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	e073      	b.n	8002d16 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c2e:	4b3d      	ldr	r3, [pc, #244]	; (8002d24 <HAL_RCC_ClockConfig+0x1c4>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f003 0302 	and.w	r3, r3, #2
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d101      	bne.n	8002c3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	e06b      	b.n	8002d16 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c3e:	4b39      	ldr	r3, [pc, #228]	; (8002d24 <HAL_RCC_ClockConfig+0x1c4>)
 8002c40:	685b      	ldr	r3, [r3, #4]
 8002c42:	f023 0203 	bic.w	r2, r3, #3
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	685b      	ldr	r3, [r3, #4]
 8002c4a:	4936      	ldr	r1, [pc, #216]	; (8002d24 <HAL_RCC_ClockConfig+0x1c4>)
 8002c4c:	4313      	orrs	r3, r2
 8002c4e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002c50:	f7fe fe32 	bl	80018b8 <HAL_GetTick>
 8002c54:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c56:	e00a      	b.n	8002c6e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c58:	f7fe fe2e 	bl	80018b8 <HAL_GetTick>
 8002c5c:	4602      	mov	r2, r0
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	1ad3      	subs	r3, r2, r3
 8002c62:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d901      	bls.n	8002c6e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002c6a:	2303      	movs	r3, #3
 8002c6c:	e053      	b.n	8002d16 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c6e:	4b2d      	ldr	r3, [pc, #180]	; (8002d24 <HAL_RCC_ClockConfig+0x1c4>)
 8002c70:	685b      	ldr	r3, [r3, #4]
 8002c72:	f003 020c 	and.w	r2, r3, #12
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	685b      	ldr	r3, [r3, #4]
 8002c7a:	009b      	lsls	r3, r3, #2
 8002c7c:	429a      	cmp	r2, r3
 8002c7e:	d1eb      	bne.n	8002c58 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002c80:	4b27      	ldr	r3, [pc, #156]	; (8002d20 <HAL_RCC_ClockConfig+0x1c0>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f003 0307 	and.w	r3, r3, #7
 8002c88:	683a      	ldr	r2, [r7, #0]
 8002c8a:	429a      	cmp	r2, r3
 8002c8c:	d210      	bcs.n	8002cb0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c8e:	4b24      	ldr	r3, [pc, #144]	; (8002d20 <HAL_RCC_ClockConfig+0x1c0>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f023 0207 	bic.w	r2, r3, #7
 8002c96:	4922      	ldr	r1, [pc, #136]	; (8002d20 <HAL_RCC_ClockConfig+0x1c0>)
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	4313      	orrs	r3, r2
 8002c9c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c9e:	4b20      	ldr	r3, [pc, #128]	; (8002d20 <HAL_RCC_ClockConfig+0x1c0>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f003 0307 	and.w	r3, r3, #7
 8002ca6:	683a      	ldr	r2, [r7, #0]
 8002ca8:	429a      	cmp	r2, r3
 8002caa:	d001      	beq.n	8002cb0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002cac:	2301      	movs	r3, #1
 8002cae:	e032      	b.n	8002d16 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f003 0304 	and.w	r3, r3, #4
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d008      	beq.n	8002cce <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002cbc:	4b19      	ldr	r3, [pc, #100]	; (8002d24 <HAL_RCC_ClockConfig+0x1c4>)
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	68db      	ldr	r3, [r3, #12]
 8002cc8:	4916      	ldr	r1, [pc, #88]	; (8002d24 <HAL_RCC_ClockConfig+0x1c4>)
 8002cca:	4313      	orrs	r3, r2
 8002ccc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f003 0308 	and.w	r3, r3, #8
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d009      	beq.n	8002cee <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002cda:	4b12      	ldr	r3, [pc, #72]	; (8002d24 <HAL_RCC_ClockConfig+0x1c4>)
 8002cdc:	685b      	ldr	r3, [r3, #4]
 8002cde:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	691b      	ldr	r3, [r3, #16]
 8002ce6:	00db      	lsls	r3, r3, #3
 8002ce8:	490e      	ldr	r1, [pc, #56]	; (8002d24 <HAL_RCC_ClockConfig+0x1c4>)
 8002cea:	4313      	orrs	r3, r2
 8002cec:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002cee:	f000 f821 	bl	8002d34 <HAL_RCC_GetSysClockFreq>
 8002cf2:	4602      	mov	r2, r0
 8002cf4:	4b0b      	ldr	r3, [pc, #44]	; (8002d24 <HAL_RCC_ClockConfig+0x1c4>)
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	091b      	lsrs	r3, r3, #4
 8002cfa:	f003 030f 	and.w	r3, r3, #15
 8002cfe:	490a      	ldr	r1, [pc, #40]	; (8002d28 <HAL_RCC_ClockConfig+0x1c8>)
 8002d00:	5ccb      	ldrb	r3, [r1, r3]
 8002d02:	fa22 f303 	lsr.w	r3, r2, r3
 8002d06:	4a09      	ldr	r2, [pc, #36]	; (8002d2c <HAL_RCC_ClockConfig+0x1cc>)
 8002d08:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002d0a:	4b09      	ldr	r3, [pc, #36]	; (8002d30 <HAL_RCC_ClockConfig+0x1d0>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	4618      	mov	r0, r3
 8002d10:	f7fe fd90 	bl	8001834 <HAL_InitTick>

  return HAL_OK;
 8002d14:	2300      	movs	r3, #0
}
 8002d16:	4618      	mov	r0, r3
 8002d18:	3710      	adds	r7, #16
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	bd80      	pop	{r7, pc}
 8002d1e:	bf00      	nop
 8002d20:	40022000 	.word	0x40022000
 8002d24:	40021000 	.word	0x40021000
 8002d28:	08008788 	.word	0x08008788
 8002d2c:	20000008 	.word	0x20000008
 8002d30:	2000000c 	.word	0x2000000c

08002d34 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d34:	b490      	push	{r4, r7}
 8002d36:	b08a      	sub	sp, #40	; 0x28
 8002d38:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002d3a:	4b29      	ldr	r3, [pc, #164]	; (8002de0 <HAL_RCC_GetSysClockFreq+0xac>)
 8002d3c:	1d3c      	adds	r4, r7, #4
 8002d3e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002d40:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002d44:	f240 2301 	movw	r3, #513	; 0x201
 8002d48:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	61fb      	str	r3, [r7, #28]
 8002d4e:	2300      	movs	r3, #0
 8002d50:	61bb      	str	r3, [r7, #24]
 8002d52:	2300      	movs	r3, #0
 8002d54:	627b      	str	r3, [r7, #36]	; 0x24
 8002d56:	2300      	movs	r3, #0
 8002d58:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002d5e:	4b21      	ldr	r3, [pc, #132]	; (8002de4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002d60:	685b      	ldr	r3, [r3, #4]
 8002d62:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002d64:	69fb      	ldr	r3, [r7, #28]
 8002d66:	f003 030c 	and.w	r3, r3, #12
 8002d6a:	2b04      	cmp	r3, #4
 8002d6c:	d002      	beq.n	8002d74 <HAL_RCC_GetSysClockFreq+0x40>
 8002d6e:	2b08      	cmp	r3, #8
 8002d70:	d003      	beq.n	8002d7a <HAL_RCC_GetSysClockFreq+0x46>
 8002d72:	e02b      	b.n	8002dcc <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002d74:	4b1c      	ldr	r3, [pc, #112]	; (8002de8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002d76:	623b      	str	r3, [r7, #32]
      break;
 8002d78:	e02b      	b.n	8002dd2 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002d7a:	69fb      	ldr	r3, [r7, #28]
 8002d7c:	0c9b      	lsrs	r3, r3, #18
 8002d7e:	f003 030f 	and.w	r3, r3, #15
 8002d82:	3328      	adds	r3, #40	; 0x28
 8002d84:	443b      	add	r3, r7
 8002d86:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002d8a:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002d8c:	69fb      	ldr	r3, [r7, #28]
 8002d8e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d012      	beq.n	8002dbc <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002d96:	4b13      	ldr	r3, [pc, #76]	; (8002de4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002d98:	685b      	ldr	r3, [r3, #4]
 8002d9a:	0c5b      	lsrs	r3, r3, #17
 8002d9c:	f003 0301 	and.w	r3, r3, #1
 8002da0:	3328      	adds	r3, #40	; 0x28
 8002da2:	443b      	add	r3, r7
 8002da4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002da8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002daa:	697b      	ldr	r3, [r7, #20]
 8002dac:	4a0e      	ldr	r2, [pc, #56]	; (8002de8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002dae:	fb03 f202 	mul.w	r2, r3, r2
 8002db2:	69bb      	ldr	r3, [r7, #24]
 8002db4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002db8:	627b      	str	r3, [r7, #36]	; 0x24
 8002dba:	e004      	b.n	8002dc6 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002dbc:	697b      	ldr	r3, [r7, #20]
 8002dbe:	4a0b      	ldr	r2, [pc, #44]	; (8002dec <HAL_RCC_GetSysClockFreq+0xb8>)
 8002dc0:	fb02 f303 	mul.w	r3, r2, r3
 8002dc4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dc8:	623b      	str	r3, [r7, #32]
      break;
 8002dca:	e002      	b.n	8002dd2 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002dcc:	4b06      	ldr	r3, [pc, #24]	; (8002de8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002dce:	623b      	str	r3, [r7, #32]
      break;
 8002dd0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002dd2:	6a3b      	ldr	r3, [r7, #32]
}
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	3728      	adds	r7, #40	; 0x28
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	bc90      	pop	{r4, r7}
 8002ddc:	4770      	bx	lr
 8002dde:	bf00      	nop
 8002de0:	08008268 	.word	0x08008268
 8002de4:	40021000 	.word	0x40021000
 8002de8:	007a1200 	.word	0x007a1200
 8002dec:	003d0900 	.word	0x003d0900

08002df0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002df0:	b480      	push	{r7}
 8002df2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002df4:	4b02      	ldr	r3, [pc, #8]	; (8002e00 <HAL_RCC_GetHCLKFreq+0x10>)
 8002df6:	681b      	ldr	r3, [r3, #0]
}
 8002df8:	4618      	mov	r0, r3
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	bc80      	pop	{r7}
 8002dfe:	4770      	bx	lr
 8002e00:	20000008 	.word	0x20000008

08002e04 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002e08:	f7ff fff2 	bl	8002df0 <HAL_RCC_GetHCLKFreq>
 8002e0c:	4602      	mov	r2, r0
 8002e0e:	4b05      	ldr	r3, [pc, #20]	; (8002e24 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002e10:	685b      	ldr	r3, [r3, #4]
 8002e12:	0adb      	lsrs	r3, r3, #11
 8002e14:	f003 0307 	and.w	r3, r3, #7
 8002e18:	4903      	ldr	r1, [pc, #12]	; (8002e28 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002e1a:	5ccb      	ldrb	r3, [r1, r3]
 8002e1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e20:	4618      	mov	r0, r3
 8002e22:	bd80      	pop	{r7, pc}
 8002e24:	40021000 	.word	0x40021000
 8002e28:	08008798 	.word	0x08008798

08002e2c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002e2c:	b480      	push	{r7}
 8002e2e:	b085      	sub	sp, #20
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002e34:	4b0a      	ldr	r3, [pc, #40]	; (8002e60 <RCC_Delay+0x34>)
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	4a0a      	ldr	r2, [pc, #40]	; (8002e64 <RCC_Delay+0x38>)
 8002e3a:	fba2 2303 	umull	r2, r3, r2, r3
 8002e3e:	0a5b      	lsrs	r3, r3, #9
 8002e40:	687a      	ldr	r2, [r7, #4]
 8002e42:	fb02 f303 	mul.w	r3, r2, r3
 8002e46:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002e48:	bf00      	nop
  }
  while (Delay --);
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	1e5a      	subs	r2, r3, #1
 8002e4e:	60fa      	str	r2, [r7, #12]
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d1f9      	bne.n	8002e48 <RCC_Delay+0x1c>
}
 8002e54:	bf00      	nop
 8002e56:	bf00      	nop
 8002e58:	3714      	adds	r7, #20
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	bc80      	pop	{r7}
 8002e5e:	4770      	bx	lr
 8002e60:	20000008 	.word	0x20000008
 8002e64:	10624dd3 	.word	0x10624dd3

08002e68 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b086      	sub	sp, #24
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002e70:	2300      	movs	r3, #0
 8002e72:	613b      	str	r3, [r7, #16]
 8002e74:	2300      	movs	r3, #0
 8002e76:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f003 0301 	and.w	r3, r3, #1
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d07d      	beq.n	8002f80 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002e84:	2300      	movs	r3, #0
 8002e86:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e88:	4b4f      	ldr	r3, [pc, #316]	; (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e8a:	69db      	ldr	r3, [r3, #28]
 8002e8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d10d      	bne.n	8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e94:	4b4c      	ldr	r3, [pc, #304]	; (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e96:	69db      	ldr	r3, [r3, #28]
 8002e98:	4a4b      	ldr	r2, [pc, #300]	; (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e9a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e9e:	61d3      	str	r3, [r2, #28]
 8002ea0:	4b49      	ldr	r3, [pc, #292]	; (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ea2:	69db      	ldr	r3, [r3, #28]
 8002ea4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ea8:	60bb      	str	r3, [r7, #8]
 8002eaa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002eac:	2301      	movs	r3, #1
 8002eae:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002eb0:	4b46      	ldr	r3, [pc, #280]	; (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d118      	bne.n	8002eee <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ebc:	4b43      	ldr	r3, [pc, #268]	; (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	4a42      	ldr	r2, [pc, #264]	; (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002ec2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ec6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ec8:	f7fe fcf6 	bl	80018b8 <HAL_GetTick>
 8002ecc:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ece:	e008      	b.n	8002ee2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ed0:	f7fe fcf2 	bl	80018b8 <HAL_GetTick>
 8002ed4:	4602      	mov	r2, r0
 8002ed6:	693b      	ldr	r3, [r7, #16]
 8002ed8:	1ad3      	subs	r3, r2, r3
 8002eda:	2b64      	cmp	r3, #100	; 0x64
 8002edc:	d901      	bls.n	8002ee2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002ede:	2303      	movs	r3, #3
 8002ee0:	e06d      	b.n	8002fbe <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ee2:	4b3a      	ldr	r3, [pc, #232]	; (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d0f0      	beq.n	8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002eee:	4b36      	ldr	r3, [pc, #216]	; (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ef0:	6a1b      	ldr	r3, [r3, #32]
 8002ef2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ef6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d02e      	beq.n	8002f5c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	685b      	ldr	r3, [r3, #4]
 8002f02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f06:	68fa      	ldr	r2, [r7, #12]
 8002f08:	429a      	cmp	r2, r3
 8002f0a:	d027      	beq.n	8002f5c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002f0c:	4b2e      	ldr	r3, [pc, #184]	; (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f0e:	6a1b      	ldr	r3, [r3, #32]
 8002f10:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f14:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002f16:	4b2e      	ldr	r3, [pc, #184]	; (8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002f18:	2201      	movs	r2, #1
 8002f1a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002f1c:	4b2c      	ldr	r3, [pc, #176]	; (8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002f1e:	2200      	movs	r2, #0
 8002f20:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002f22:	4a29      	ldr	r2, [pc, #164]	; (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	f003 0301 	and.w	r3, r3, #1
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d014      	beq.n	8002f5c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f32:	f7fe fcc1 	bl	80018b8 <HAL_GetTick>
 8002f36:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f38:	e00a      	b.n	8002f50 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f3a:	f7fe fcbd 	bl	80018b8 <HAL_GetTick>
 8002f3e:	4602      	mov	r2, r0
 8002f40:	693b      	ldr	r3, [r7, #16]
 8002f42:	1ad3      	subs	r3, r2, r3
 8002f44:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f48:	4293      	cmp	r3, r2
 8002f4a:	d901      	bls.n	8002f50 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002f4c:	2303      	movs	r3, #3
 8002f4e:	e036      	b.n	8002fbe <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f50:	4b1d      	ldr	r3, [pc, #116]	; (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f52:	6a1b      	ldr	r3, [r3, #32]
 8002f54:	f003 0302 	and.w	r3, r3, #2
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d0ee      	beq.n	8002f3a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002f5c:	4b1a      	ldr	r3, [pc, #104]	; (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f5e:	6a1b      	ldr	r3, [r3, #32]
 8002f60:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	685b      	ldr	r3, [r3, #4]
 8002f68:	4917      	ldr	r1, [pc, #92]	; (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f6a:	4313      	orrs	r3, r2
 8002f6c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002f6e:	7dfb      	ldrb	r3, [r7, #23]
 8002f70:	2b01      	cmp	r3, #1
 8002f72:	d105      	bne.n	8002f80 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f74:	4b14      	ldr	r3, [pc, #80]	; (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f76:	69db      	ldr	r3, [r3, #28]
 8002f78:	4a13      	ldr	r2, [pc, #76]	; (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f7a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f7e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f003 0302 	and.w	r3, r3, #2
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d008      	beq.n	8002f9e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002f8c:	4b0e      	ldr	r3, [pc, #56]	; (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f8e:	685b      	ldr	r3, [r3, #4]
 8002f90:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	689b      	ldr	r3, [r3, #8]
 8002f98:	490b      	ldr	r1, [pc, #44]	; (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f9a:	4313      	orrs	r3, r2
 8002f9c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f003 0310 	and.w	r3, r3, #16
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d008      	beq.n	8002fbc <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002faa:	4b07      	ldr	r3, [pc, #28]	; (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002fac:	685b      	ldr	r3, [r3, #4]
 8002fae:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	68db      	ldr	r3, [r3, #12]
 8002fb6:	4904      	ldr	r1, [pc, #16]	; (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002fb8:	4313      	orrs	r3, r2
 8002fba:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002fbc:	2300      	movs	r3, #0
}
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	3718      	adds	r7, #24
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	bd80      	pop	{r7, pc}
 8002fc6:	bf00      	nop
 8002fc8:	40021000 	.word	0x40021000
 8002fcc:	40007000 	.word	0x40007000
 8002fd0:	42420440 	.word	0x42420440

08002fd4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8002fd4:	b590      	push	{r4, r7, lr}
 8002fd6:	b08d      	sub	sp, #52	; 0x34
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002fdc:	4b58      	ldr	r3, [pc, #352]	; (8003140 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 8002fde:	f107 040c 	add.w	r4, r7, #12
 8002fe2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002fe4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002fe8:	f240 2301 	movw	r3, #513	; 0x201
 8002fec:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8002fee:	2300      	movs	r3, #0
 8002ff0:	627b      	str	r3, [r7, #36]	; 0x24
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	61fb      	str	r3, [r7, #28]
 8002ffe:	2300      	movs	r3, #0
 8003000:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	2b10      	cmp	r3, #16
 8003006:	d00a      	beq.n	800301e <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2b10      	cmp	r3, #16
 800300c:	f200 808e 	bhi.w	800312c <HAL_RCCEx_GetPeriphCLKFreq+0x158>
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2b01      	cmp	r3, #1
 8003014:	d049      	beq.n	80030aa <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2b02      	cmp	r3, #2
 800301a:	d079      	beq.n	8003110 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 800301c:	e086      	b.n	800312c <HAL_RCCEx_GetPeriphCLKFreq+0x158>
      temp_reg = RCC->CFGR;
 800301e:	4b49      	ldr	r3, [pc, #292]	; (8003144 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8003020:	685b      	ldr	r3, [r3, #4]
 8003022:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8003024:	4b47      	ldr	r3, [pc, #284]	; (8003144 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800302c:	2b00      	cmp	r3, #0
 800302e:	d07f      	beq.n	8003130 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003030:	69fb      	ldr	r3, [r7, #28]
 8003032:	0c9b      	lsrs	r3, r3, #18
 8003034:	f003 030f 	and.w	r3, r3, #15
 8003038:	3330      	adds	r3, #48	; 0x30
 800303a:	443b      	add	r3, r7
 800303c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003040:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003042:	69fb      	ldr	r3, [r7, #28]
 8003044:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003048:	2b00      	cmp	r3, #0
 800304a:	d017      	beq.n	800307c <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800304c:	4b3d      	ldr	r3, [pc, #244]	; (8003144 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 800304e:	685b      	ldr	r3, [r3, #4]
 8003050:	0c5b      	lsrs	r3, r3, #17
 8003052:	f003 0301 	and.w	r3, r3, #1
 8003056:	3330      	adds	r3, #48	; 0x30
 8003058:	443b      	add	r3, r7
 800305a:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800305e:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003060:	69fb      	ldr	r3, [r7, #28]
 8003062:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003066:	2b00      	cmp	r3, #0
 8003068:	d00d      	beq.n	8003086 <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 800306a:	4a37      	ldr	r2, [pc, #220]	; (8003148 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 800306c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800306e:	fbb2 f2f3 	udiv	r2, r2, r3
 8003072:	6a3b      	ldr	r3, [r7, #32]
 8003074:	fb02 f303 	mul.w	r3, r2, r3
 8003078:	62fb      	str	r3, [r7, #44]	; 0x2c
 800307a:	e004      	b.n	8003086 <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800307c:	6a3b      	ldr	r3, [r7, #32]
 800307e:	4a33      	ldr	r2, [pc, #204]	; (800314c <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8003080:	fb02 f303 	mul.w	r3, r2, r3
 8003084:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8003086:	4b2f      	ldr	r3, [pc, #188]	; (8003144 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8003088:	685b      	ldr	r3, [r3, #4]
 800308a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800308e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003092:	d102      	bne.n	800309a <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
          frequency = pllclk;
 8003094:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003096:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003098:	e04a      	b.n	8003130 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
          frequency = (pllclk * 2) / 3;
 800309a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800309c:	005b      	lsls	r3, r3, #1
 800309e:	4a2c      	ldr	r2, [pc, #176]	; (8003150 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 80030a0:	fba2 2303 	umull	r2, r3, r2, r3
 80030a4:	085b      	lsrs	r3, r3, #1
 80030a6:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80030a8:	e042      	b.n	8003130 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
      temp_reg = RCC->BDCR;
 80030aa:	4b26      	ldr	r3, [pc, #152]	; (8003144 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80030ac:	6a1b      	ldr	r3, [r3, #32]
 80030ae:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80030b0:	69fb      	ldr	r3, [r7, #28]
 80030b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80030b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80030ba:	d108      	bne.n	80030ce <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
 80030bc:	69fb      	ldr	r3, [r7, #28]
 80030be:	f003 0302 	and.w	r3, r3, #2
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d003      	beq.n	80030ce <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
        frequency = LSE_VALUE;
 80030c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80030ca:	62bb      	str	r3, [r7, #40]	; 0x28
 80030cc:	e01f      	b.n	800310e <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80030ce:	69fb      	ldr	r3, [r7, #28]
 80030d0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80030d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80030d8:	d109      	bne.n	80030ee <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
 80030da:	4b1a      	ldr	r3, [pc, #104]	; (8003144 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80030dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030de:	f003 0302 	and.w	r3, r3, #2
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d003      	beq.n	80030ee <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
        frequency = LSI_VALUE;
 80030e6:	f649 4340 	movw	r3, #40000	; 0x9c40
 80030ea:	62bb      	str	r3, [r7, #40]	; 0x28
 80030ec:	e00f      	b.n	800310e <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80030ee:	69fb      	ldr	r3, [r7, #28]
 80030f0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80030f4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80030f8:	d11c      	bne.n	8003134 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 80030fa:	4b12      	ldr	r3, [pc, #72]	; (8003144 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003102:	2b00      	cmp	r3, #0
 8003104:	d016      	beq.n	8003134 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
        frequency = HSE_VALUE / 128U;
 8003106:	f24f 4324 	movw	r3, #62500	; 0xf424
 800310a:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800310c:	e012      	b.n	8003134 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 800310e:	e011      	b.n	8003134 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8003110:	f7ff fe78 	bl	8002e04 <HAL_RCC_GetPCLK2Freq>
 8003114:	4602      	mov	r2, r0
 8003116:	4b0b      	ldr	r3, [pc, #44]	; (8003144 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8003118:	685b      	ldr	r3, [r3, #4]
 800311a:	0b9b      	lsrs	r3, r3, #14
 800311c:	f003 0303 	and.w	r3, r3, #3
 8003120:	3301      	adds	r3, #1
 8003122:	005b      	lsls	r3, r3, #1
 8003124:	fbb2 f3f3 	udiv	r3, r2, r3
 8003128:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800312a:	e004      	b.n	8003136 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 800312c:	bf00      	nop
 800312e:	e002      	b.n	8003136 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8003130:	bf00      	nop
 8003132:	e000      	b.n	8003136 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8003134:	bf00      	nop
    }
  }
  return (frequency);
 8003136:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8003138:	4618      	mov	r0, r3
 800313a:	3734      	adds	r7, #52	; 0x34
 800313c:	46bd      	mov	sp, r7
 800313e:	bd90      	pop	{r4, r7, pc}
 8003140:	08008278 	.word	0x08008278
 8003144:	40021000 	.word	0x40021000
 8003148:	007a1200 	.word	0x007a1200
 800314c:	003d0900 	.word	0x003d0900
 8003150:	aaaaaaab 	.word	0xaaaaaaab

08003154 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b084      	sub	sp, #16
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 800315c:	2300      	movs	r3, #0
 800315e:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2b00      	cmp	r3, #0
 8003164:	d101      	bne.n	800316a <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8003166:	2301      	movs	r3, #1
 8003168:	e084      	b.n	8003274 <HAL_RTC_Init+0x120>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	7c5b      	ldrb	r3, [r3, #17]
 800316e:	b2db      	uxtb	r3, r3
 8003170:	2b00      	cmp	r3, #0
 8003172:	d105      	bne.n	8003180 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2200      	movs	r2, #0
 8003178:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800317a:	6878      	ldr	r0, [r7, #4]
 800317c:	f7fe f978 	bl	8001470 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2202      	movs	r2, #2
 8003184:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003186:	6878      	ldr	r0, [r7, #4]
 8003188:	f000 f9c8 	bl	800351c <HAL_RTC_WaitForSynchro>
 800318c:	4603      	mov	r3, r0
 800318e:	2b00      	cmp	r3, #0
 8003190:	d004      	beq.n	800319c <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	2204      	movs	r2, #4
 8003196:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8003198:	2301      	movs	r3, #1
 800319a:	e06b      	b.n	8003274 <HAL_RTC_Init+0x120>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800319c:	6878      	ldr	r0, [r7, #4]
 800319e:	f000 fa81 	bl	80036a4 <RTC_EnterInitMode>
 80031a2:	4603      	mov	r3, r0
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d004      	beq.n	80031b2 <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2204      	movs	r2, #4
 80031ac:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 80031ae:	2301      	movs	r3, #1
 80031b0:	e060      	b.n	8003274 <HAL_RTC_Init+0x120>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	685a      	ldr	r2, [r3, #4]
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f022 0207 	bic.w	r2, r2, #7
 80031c0:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	689b      	ldr	r3, [r3, #8]
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d005      	beq.n	80031d6 <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 80031ca:	4b2c      	ldr	r3, [pc, #176]	; (800327c <HAL_RTC_Init+0x128>)
 80031cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ce:	4a2b      	ldr	r2, [pc, #172]	; (800327c <HAL_RTC_Init+0x128>)
 80031d0:	f023 0301 	bic.w	r3, r3, #1
 80031d4:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 80031d6:	4b29      	ldr	r3, [pc, #164]	; (800327c <HAL_RTC_Init+0x128>)
 80031d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031da:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	689b      	ldr	r3, [r3, #8]
 80031e2:	4926      	ldr	r1, [pc, #152]	; (800327c <HAL_RTC_Init+0x128>)
 80031e4:	4313      	orrs	r3, r2
 80031e6:	62cb      	str	r3, [r1, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	685b      	ldr	r3, [r3, #4]
 80031ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031f0:	d003      	beq.n	80031fa <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	685b      	ldr	r3, [r3, #4]
 80031f6:	60fb      	str	r3, [r7, #12]
 80031f8:	e00e      	b.n	8003218 <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 80031fa:	2001      	movs	r0, #1
 80031fc:	f7ff feea 	bl	8002fd4 <HAL_RCCEx_GetPeriphCLKFreq>
 8003200:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	2b00      	cmp	r3, #0
 8003206:	d104      	bne.n	8003212 <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2204      	movs	r2, #4
 800320c:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 800320e:	2301      	movs	r3, #1
 8003210:	e030      	b.n	8003274 <HAL_RTC_Init+0x120>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	3b01      	subs	r3, #1
 8003216:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    MODIFY_REG(hrtc->Instance->PRLH, RTC_PRLH_PRL, (prescaler >> 16U));
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	689b      	ldr	r3, [r3, #8]
 800321e:	f023 010f 	bic.w	r1, r3, #15
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	0c1a      	lsrs	r2, r3, #16
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	430a      	orrs	r2, r1
 800322c:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hrtc->Instance->PRLL, RTC_PRLL_PRL, (prescaler & RTC_PRLL_PRL));
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	68db      	ldr	r3, [r3, #12]
 8003234:	0c1b      	lsrs	r3, r3, #16
 8003236:	041b      	lsls	r3, r3, #16
 8003238:	68fa      	ldr	r2, [r7, #12]
 800323a:	b291      	uxth	r1, r2
 800323c:	687a      	ldr	r2, [r7, #4]
 800323e:	6812      	ldr	r2, [r2, #0]
 8003240:	430b      	orrs	r3, r1
 8003242:	60d3      	str	r3, [r2, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8003244:	6878      	ldr	r0, [r7, #4]
 8003246:	f000 fa55 	bl	80036f4 <RTC_ExitInitMode>
 800324a:	4603      	mov	r3, r0
 800324c:	2b00      	cmp	r3, #0
 800324e:	d004      	beq.n	800325a <HAL_RTC_Init+0x106>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2204      	movs	r2, #4
 8003254:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 8003256:	2301      	movs	r3, #1
 8003258:	e00c      	b.n	8003274 <HAL_RTC_Init+0x120>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	2200      	movs	r2, #0
 800325e:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2201      	movs	r2, #1
 8003264:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2201      	movs	r2, #1
 800326a:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2201      	movs	r2, #1
 8003270:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 8003272:	2300      	movs	r3, #0
  }
}
 8003274:	4618      	mov	r0, r3
 8003276:	3710      	adds	r7, #16
 8003278:	46bd      	mov	sp, r7
 800327a:	bd80      	pop	{r7, pc}
 800327c:	40006c00 	.word	0x40006c00

08003280 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003280:	b590      	push	{r4, r7, lr}
 8003282:	b087      	sub	sp, #28
 8003284:	af00      	add	r7, sp, #0
 8003286:	60f8      	str	r0, [r7, #12]
 8003288:	60b9      	str	r1, [r7, #8]
 800328a:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U;
 800328c:	2300      	movs	r3, #0
 800328e:	617b      	str	r3, [r7, #20]
 8003290:	2300      	movs	r3, #0
 8003292:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	2b00      	cmp	r3, #0
 8003298:	d002      	beq.n	80032a0 <HAL_RTC_SetTime+0x20>
 800329a:	68bb      	ldr	r3, [r7, #8]
 800329c:	2b00      	cmp	r3, #0
 800329e:	d101      	bne.n	80032a4 <HAL_RTC_SetTime+0x24>
  {
    return HAL_ERROR;
 80032a0:	2301      	movs	r3, #1
 80032a2:	e080      	b.n	80033a6 <HAL_RTC_SetTime+0x126>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	7c1b      	ldrb	r3, [r3, #16]
 80032a8:	2b01      	cmp	r3, #1
 80032aa:	d101      	bne.n	80032b0 <HAL_RTC_SetTime+0x30>
 80032ac:	2302      	movs	r3, #2
 80032ae:	e07a      	b.n	80033a6 <HAL_RTC_SetTime+0x126>
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	2201      	movs	r2, #1
 80032b4:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	2202      	movs	r2, #2
 80032ba:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d113      	bne.n	80032ea <HAL_RTC_SetTime+0x6a>
  {
    assert_param(IS_RTC_HOUR24(sTime->Hours));
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 80032c2:	68bb      	ldr	r3, [r7, #8]
 80032c4:	781b      	ldrb	r3, [r3, #0]
 80032c6:	461a      	mov	r2, r3
 80032c8:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80032cc:	fb03 f202 	mul.w	r2, r3, r2
                              ((uint32_t)sTime->Minutes * 60U) + \
 80032d0:	68bb      	ldr	r3, [r7, #8]
 80032d2:	785b      	ldrb	r3, [r3, #1]
 80032d4:	4619      	mov	r1, r3
 80032d6:	460b      	mov	r3, r1
 80032d8:	011b      	lsls	r3, r3, #4
 80032da:	1a5b      	subs	r3, r3, r1
 80032dc:	009b      	lsls	r3, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 80032de:	4413      	add	r3, r2
                              ((uint32_t)sTime->Seconds));
 80032e0:	68ba      	ldr	r2, [r7, #8]
 80032e2:	7892      	ldrb	r2, [r2, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 80032e4:	4413      	add	r3, r2
 80032e6:	617b      	str	r3, [r7, #20]
 80032e8:	e01e      	b.n	8003328 <HAL_RTC_SetTime+0xa8>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));

    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 80032ea:	68bb      	ldr	r3, [r7, #8]
 80032ec:	781b      	ldrb	r3, [r3, #0]
 80032ee:	4618      	mov	r0, r3
 80032f0:	f000 fa28 	bl	8003744 <RTC_Bcd2ToByte>
 80032f4:	4603      	mov	r3, r0
 80032f6:	461a      	mov	r2, r3
 80032f8:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80032fc:	fb03 f402 	mul.w	r4, r3, r2
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 8003300:	68bb      	ldr	r3, [r7, #8]
 8003302:	785b      	ldrb	r3, [r3, #1]
 8003304:	4618      	mov	r0, r3
 8003306:	f000 fa1d 	bl	8003744 <RTC_Bcd2ToByte>
 800330a:	4603      	mov	r3, r0
 800330c:	461a      	mov	r2, r3
 800330e:	4613      	mov	r3, r2
 8003310:	011b      	lsls	r3, r3, #4
 8003312:	1a9b      	subs	r3, r3, r2
 8003314:	009b      	lsls	r3, r3, #2
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8003316:	441c      	add	r4, r3
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 8003318:	68bb      	ldr	r3, [r7, #8]
 800331a:	789b      	ldrb	r3, [r3, #2]
 800331c:	4618      	mov	r0, r3
 800331e:	f000 fa11 	bl	8003744 <RTC_Bcd2ToByte>
 8003322:	4603      	mov	r3, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8003324:	4423      	add	r3, r4
 8003326:	617b      	str	r3, [r7, #20]
  }

  /* Write time counter in RTC registers */
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8003328:	6979      	ldr	r1, [r7, #20]
 800332a:	68f8      	ldr	r0, [r7, #12]
 800332c:	f000 f953 	bl	80035d6 <RTC_WriteTimeCounter>
 8003330:	4603      	mov	r3, r0
 8003332:	2b00      	cmp	r3, #0
 8003334:	d007      	beq.n	8003346 <HAL_RTC_SetTime+0xc6>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	2204      	movs	r2, #4
 800333a:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	2200      	movs	r2, #0
 8003340:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 8003342:	2301      	movs	r3, #1
 8003344:	e02f      	b.n	80033a6 <HAL_RTC_SetTime+0x126>
  }
  else
  {
    /* Clear Second and overflow flags */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	685a      	ldr	r2, [r3, #4]
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f022 0205 	bic.w	r2, r2, #5
 8003354:	605a      	str	r2, [r3, #4]

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8003356:	68f8      	ldr	r0, [r7, #12]
 8003358:	f000 f964 	bl	8003624 <RTC_ReadAlarmCounter>
 800335c:	6138      	str	r0, [r7, #16]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 800335e:	693b      	ldr	r3, [r7, #16]
 8003360:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003364:	d018      	beq.n	8003398 <HAL_RTC_SetTime+0x118>
    {
      if (counter_alarm < counter_time)
 8003366:	693a      	ldr	r2, [r7, #16]
 8003368:	697b      	ldr	r3, [r7, #20]
 800336a:	429a      	cmp	r2, r3
 800336c:	d214      	bcs.n	8003398 <HAL_RTC_SetTime+0x118>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 800336e:	693b      	ldr	r3, [r7, #16]
 8003370:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8003374:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8003378:	613b      	str	r3, [r7, #16]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 800337a:	6939      	ldr	r1, [r7, #16]
 800337c:	68f8      	ldr	r0, [r7, #12]
 800337e:	f000 f96a 	bl	8003656 <RTC_WriteAlarmCounter>
 8003382:	4603      	mov	r3, r0
 8003384:	2b00      	cmp	r3, #0
 8003386:	d007      	beq.n	8003398 <HAL_RTC_SetTime+0x118>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	2204      	movs	r2, #4
 800338c:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	2200      	movs	r2, #0
 8003392:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8003394:	2301      	movs	r3, #1
 8003396:	e006      	b.n	80033a6 <HAL_RTC_SetTime+0x126>
        }
      }
    }

    hrtc->State = HAL_RTC_STATE_READY;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	2201      	movs	r2, #1
 800339c:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	2200      	movs	r2, #0
 80033a2:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 80033a4:	2300      	movs	r3, #0
  }
}
 80033a6:	4618      	mov	r0, r3
 80033a8:	371c      	adds	r7, #28
 80033aa:	46bd      	mov	sp, r7
 80033ac:	bd90      	pop	{r4, r7, pc}
	...

080033b0 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b088      	sub	sp, #32
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	60f8      	str	r0, [r7, #12]
 80033b8:	60b9      	str	r1, [r7, #8]
 80033ba:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, hours = 0U;
 80033bc:	2300      	movs	r3, #0
 80033be:	61fb      	str	r3, [r7, #28]
 80033c0:	2300      	movs	r3, #0
 80033c2:	61bb      	str	r3, [r7, #24]
 80033c4:	2300      	movs	r3, #0
 80033c6:	617b      	str	r3, [r7, #20]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d002      	beq.n	80033d4 <HAL_RTC_SetDate+0x24>
 80033ce:	68bb      	ldr	r3, [r7, #8]
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d101      	bne.n	80033d8 <HAL_RTC_SetDate+0x28>
  {
    return HAL_ERROR;
 80033d4:	2301      	movs	r3, #1
 80033d6:	e097      	b.n	8003508 <HAL_RTC_SetDate+0x158>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	7c1b      	ldrb	r3, [r3, #16]
 80033dc:	2b01      	cmp	r3, #1
 80033de:	d101      	bne.n	80033e4 <HAL_RTC_SetDate+0x34>
 80033e0:	2302      	movs	r3, #2
 80033e2:	e091      	b.n	8003508 <HAL_RTC_SetDate+0x158>
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	2201      	movs	r2, #1
 80033e8:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	2202      	movs	r2, #2
 80033ee:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d10c      	bne.n	8003410 <HAL_RTC_SetDate+0x60>
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = sDate->Year;
 80033f6:	68bb      	ldr	r3, [r7, #8]
 80033f8:	78da      	ldrb	r2, [r3, #3]
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 80033fe:	68bb      	ldr	r3, [r7, #8]
 8003400:	785a      	ldrb	r2, [r3, #1]
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 8003406:	68bb      	ldr	r3, [r7, #8]
 8003408:	789a      	ldrb	r2, [r3, #2]
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	739a      	strb	r2, [r3, #14]
 800340e:	e01a      	b.n	8003446 <HAL_RTC_SetDate+0x96>
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 8003410:	68bb      	ldr	r3, [r7, #8]
 8003412:	78db      	ldrb	r3, [r3, #3]
 8003414:	4618      	mov	r0, r3
 8003416:	f000 f995 	bl	8003744 <RTC_Bcd2ToByte>
 800341a:	4603      	mov	r3, r0
 800341c:	461a      	mov	r2, r3
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 8003422:	68bb      	ldr	r3, [r7, #8]
 8003424:	785b      	ldrb	r3, [r3, #1]
 8003426:	4618      	mov	r0, r3
 8003428:	f000 f98c 	bl	8003744 <RTC_Bcd2ToByte>
 800342c:	4603      	mov	r3, r0
 800342e:	461a      	mov	r2, r3
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 8003434:	68bb      	ldr	r3, [r7, #8]
 8003436:	789b      	ldrb	r3, [r3, #2]
 8003438:	4618      	mov	r0, r3
 800343a:	f000 f983 	bl	8003744 <RTC_Bcd2ToByte>
 800343e:	4603      	mov	r3, r0
 8003440:	461a      	mov	r2, r3
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	739a      	strb	r2, [r3, #14]
  }

  /* WeekDay set by user can be ignored because automatically calculated */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	7bdb      	ldrb	r3, [r3, #15]
 800344a:	4618      	mov	r0, r3
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	7b59      	ldrb	r1, [r3, #13]
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	7b9b      	ldrb	r3, [r3, #14]
 8003454:	461a      	mov	r2, r3
 8003456:	f000 f993 	bl	8003780 <RTC_WeekDayNum>
 800345a:	4603      	mov	r3, r0
 800345c:	461a      	mov	r2, r3
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	731a      	strb	r2, [r3, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	7b1a      	ldrb	r2, [r3, #12]
 8003466:	68bb      	ldr	r3, [r7, #8]
 8003468:	701a      	strb	r2, [r3, #0]

  /* Reset time to be aligned on the same day */
  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 800346a:	68f8      	ldr	r0, [r7, #12]
 800346c:	f000 f883 	bl	8003576 <RTC_ReadTimeCounter>
 8003470:	61f8      	str	r0, [r7, #28]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 8003472:	69fb      	ldr	r3, [r7, #28]
 8003474:	4a26      	ldr	r2, [pc, #152]	; (8003510 <HAL_RTC_SetDate+0x160>)
 8003476:	fba2 2303 	umull	r2, r3, r2, r3
 800347a:	0adb      	lsrs	r3, r3, #11
 800347c:	617b      	str	r3, [r7, #20]
  if (hours > 24U)
 800347e:	697b      	ldr	r3, [r7, #20]
 8003480:	2b18      	cmp	r3, #24
 8003482:	d93a      	bls.n	80034fa <HAL_RTC_SetDate+0x14a>
  {
    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= ((hours / 24U) * 24U * 3600U);
 8003484:	697b      	ldr	r3, [r7, #20]
 8003486:	4a23      	ldr	r2, [pc, #140]	; (8003514 <HAL_RTC_SetDate+0x164>)
 8003488:	fba2 2303 	umull	r2, r3, r2, r3
 800348c:	091b      	lsrs	r3, r3, #4
 800348e:	4a22      	ldr	r2, [pc, #136]	; (8003518 <HAL_RTC_SetDate+0x168>)
 8003490:	fb02 f303 	mul.w	r3, r2, r3
 8003494:	69fa      	ldr	r2, [r7, #28]
 8003496:	1ad3      	subs	r3, r2, r3
 8003498:	61fb      	str	r3, [r7, #28]
    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 800349a:	69f9      	ldr	r1, [r7, #28]
 800349c:	68f8      	ldr	r0, [r7, #12]
 800349e:	f000 f89a 	bl	80035d6 <RTC_WriteTimeCounter>
 80034a2:	4603      	mov	r3, r0
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d007      	beq.n	80034b8 <HAL_RTC_SetDate+0x108>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	2204      	movs	r2, #4
 80034ac:	745a      	strb	r2, [r3, #17]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	2200      	movs	r2, #0
 80034b2:	741a      	strb	r2, [r3, #16]

      return HAL_ERROR;
 80034b4:	2301      	movs	r3, #1
 80034b6:	e027      	b.n	8003508 <HAL_RTC_SetDate+0x158>
    }

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 80034b8:	68f8      	ldr	r0, [r7, #12]
 80034ba:	f000 f8b3 	bl	8003624 <RTC_ReadAlarmCounter>
 80034be:	61b8      	str	r0, [r7, #24]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 80034c0:	69bb      	ldr	r3, [r7, #24]
 80034c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034c6:	d018      	beq.n	80034fa <HAL_RTC_SetDate+0x14a>
    {
      if (counter_alarm < counter_time)
 80034c8:	69ba      	ldr	r2, [r7, #24]
 80034ca:	69fb      	ldr	r3, [r7, #28]
 80034cc:	429a      	cmp	r2, r3
 80034ce:	d214      	bcs.n	80034fa <HAL_RTC_SetDate+0x14a>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 80034d0:	69bb      	ldr	r3, [r7, #24]
 80034d2:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 80034d6:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80034da:	61bb      	str	r3, [r7, #24]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 80034dc:	69b9      	ldr	r1, [r7, #24]
 80034de:	68f8      	ldr	r0, [r7, #12]
 80034e0:	f000 f8b9 	bl	8003656 <RTC_WriteAlarmCounter>
 80034e4:	4603      	mov	r3, r0
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d007      	beq.n	80034fa <HAL_RTC_SetDate+0x14a>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	2204      	movs	r2, #4
 80034ee:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	2200      	movs	r2, #0
 80034f4:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 80034f6:	2301      	movs	r3, #1
 80034f8:	e006      	b.n	8003508 <HAL_RTC_SetDate+0x158>
    }


  }

  hrtc->State = HAL_RTC_STATE_READY ;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	2201      	movs	r2, #1
 80034fe:	745a      	strb	r2, [r3, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	2200      	movs	r2, #0
 8003504:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8003506:	2300      	movs	r3, #0
}
 8003508:	4618      	mov	r0, r3
 800350a:	3720      	adds	r7, #32
 800350c:	46bd      	mov	sp, r7
 800350e:	bd80      	pop	{r7, pc}
 8003510:	91a2b3c5 	.word	0x91a2b3c5
 8003514:	aaaaaaab 	.word	0xaaaaaaab
 8003518:	00015180 	.word	0x00015180

0800351c <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	b084      	sub	sp, #16
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003524:	2300      	movs	r3, #0
 8003526:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2b00      	cmp	r3, #0
 800352c:	d101      	bne.n	8003532 <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 800352e:	2301      	movs	r3, #1
 8003530:	e01d      	b.n	800356e <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	685a      	ldr	r2, [r3, #4]
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f022 0208 	bic.w	r2, r2, #8
 8003540:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8003542:	f7fe f9b9 	bl	80018b8 <HAL_GetTick>
 8003546:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8003548:	e009      	b.n	800355e <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 800354a:	f7fe f9b5 	bl	80018b8 <HAL_GetTick>
 800354e:	4602      	mov	r2, r0
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	1ad3      	subs	r3, r2, r3
 8003554:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003558:	d901      	bls.n	800355e <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 800355a:	2303      	movs	r3, #3
 800355c:	e007      	b.n	800356e <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	685b      	ldr	r3, [r3, #4]
 8003564:	f003 0308 	and.w	r3, r3, #8
 8003568:	2b00      	cmp	r3, #0
 800356a:	d0ee      	beq.n	800354a <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 800356c:	2300      	movs	r3, #0
}
 800356e:	4618      	mov	r0, r3
 8003570:	3710      	adds	r7, #16
 8003572:	46bd      	mov	sp, r7
 8003574:	bd80      	pop	{r7, pc}

08003576 <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 8003576:	b480      	push	{r7}
 8003578:	b087      	sub	sp, #28
 800357a:	af00      	add	r7, sp, #0
 800357c:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 800357e:	2300      	movs	r3, #0
 8003580:	827b      	strh	r3, [r7, #18]
 8003582:	2300      	movs	r3, #0
 8003584:	823b      	strh	r3, [r7, #16]
 8003586:	2300      	movs	r3, #0
 8003588:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 800358a:	2300      	movs	r3, #0
 800358c:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	699b      	ldr	r3, [r3, #24]
 8003594:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	69db      	ldr	r3, [r3, #28]
 800359c:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	699b      	ldr	r3, [r3, #24]
 80035a4:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 80035a6:	8a7a      	ldrh	r2, [r7, #18]
 80035a8:	8a3b      	ldrh	r3, [r7, #16]
 80035aa:	429a      	cmp	r2, r3
 80035ac:	d008      	beq.n	80035c0 <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 80035ae:	8a3b      	ldrh	r3, [r7, #16]
 80035b0:	041a      	lsls	r2, r3, #16
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	69db      	ldr	r3, [r3, #28]
 80035b8:	b29b      	uxth	r3, r3
 80035ba:	4313      	orrs	r3, r2
 80035bc:	617b      	str	r3, [r7, #20]
 80035be:	e004      	b.n	80035ca <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 80035c0:	8a7b      	ldrh	r3, [r7, #18]
 80035c2:	041a      	lsls	r2, r3, #16
 80035c4:	89fb      	ldrh	r3, [r7, #14]
 80035c6:	4313      	orrs	r3, r2
 80035c8:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 80035ca:	697b      	ldr	r3, [r7, #20]
}
 80035cc:	4618      	mov	r0, r3
 80035ce:	371c      	adds	r7, #28
 80035d0:	46bd      	mov	sp, r7
 80035d2:	bc80      	pop	{r7}
 80035d4:	4770      	bx	lr

080035d6 <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 80035d6:	b580      	push	{r7, lr}
 80035d8:	b084      	sub	sp, #16
 80035da:	af00      	add	r7, sp, #0
 80035dc:	6078      	str	r0, [r7, #4]
 80035de:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80035e0:	2300      	movs	r3, #0
 80035e2:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80035e4:	6878      	ldr	r0, [r7, #4]
 80035e6:	f000 f85d 	bl	80036a4 <RTC_EnterInitMode>
 80035ea:	4603      	mov	r3, r0
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d002      	beq.n	80035f6 <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 80035f0:	2301      	movs	r3, #1
 80035f2:	73fb      	strb	r3, [r7, #15]
 80035f4:	e011      	b.n	800361a <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	683a      	ldr	r2, [r7, #0]
 80035fc:	0c12      	lsrs	r2, r2, #16
 80035fe:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	683a      	ldr	r2, [r7, #0]
 8003606:	b292      	uxth	r2, r2
 8003608:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 800360a:	6878      	ldr	r0, [r7, #4]
 800360c:	f000 f872 	bl	80036f4 <RTC_ExitInitMode>
 8003610:	4603      	mov	r3, r0
 8003612:	2b00      	cmp	r3, #0
 8003614:	d001      	beq.n	800361a <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 8003616:	2301      	movs	r3, #1
 8003618:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800361a:	7bfb      	ldrb	r3, [r7, #15]
}
 800361c:	4618      	mov	r0, r3
 800361e:	3710      	adds	r7, #16
 8003620:	46bd      	mov	sp, r7
 8003622:	bd80      	pop	{r7, pc}

08003624 <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 8003624:	b480      	push	{r7}
 8003626:	b085      	sub	sp, #20
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 800362c:	2300      	movs	r3, #0
 800362e:	81fb      	strh	r3, [r7, #14]
 8003630:	2300      	movs	r3, #0
 8003632:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	6a1b      	ldr	r3, [r3, #32]
 800363a:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003642:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 8003644:	89fb      	ldrh	r3, [r7, #14]
 8003646:	041a      	lsls	r2, r3, #16
 8003648:	89bb      	ldrh	r3, [r7, #12]
 800364a:	4313      	orrs	r3, r2
}
 800364c:	4618      	mov	r0, r3
 800364e:	3714      	adds	r7, #20
 8003650:	46bd      	mov	sp, r7
 8003652:	bc80      	pop	{r7}
 8003654:	4770      	bx	lr

08003656 <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 8003656:	b580      	push	{r7, lr}
 8003658:	b084      	sub	sp, #16
 800365a:	af00      	add	r7, sp, #0
 800365c:	6078      	str	r0, [r7, #4]
 800365e:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003660:	2300      	movs	r3, #0
 8003662:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8003664:	6878      	ldr	r0, [r7, #4]
 8003666:	f000 f81d 	bl	80036a4 <RTC_EnterInitMode>
 800366a:	4603      	mov	r3, r0
 800366c:	2b00      	cmp	r3, #0
 800366e:	d002      	beq.n	8003676 <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 8003670:	2301      	movs	r3, #1
 8003672:	73fb      	strb	r3, [r7, #15]
 8003674:	e011      	b.n	800369a <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	683a      	ldr	r2, [r7, #0]
 800367c:	0c12      	lsrs	r2, r2, #16
 800367e:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	683a      	ldr	r2, [r7, #0]
 8003686:	b292      	uxth	r2, r2
 8003688:	625a      	str	r2, [r3, #36]	; 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 800368a:	6878      	ldr	r0, [r7, #4]
 800368c:	f000 f832 	bl	80036f4 <RTC_ExitInitMode>
 8003690:	4603      	mov	r3, r0
 8003692:	2b00      	cmp	r3, #0
 8003694:	d001      	beq.n	800369a <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 8003696:	2301      	movs	r3, #1
 8003698:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800369a:	7bfb      	ldrb	r3, [r7, #15]
}
 800369c:	4618      	mov	r0, r3
 800369e:	3710      	adds	r7, #16
 80036a0:	46bd      	mov	sp, r7
 80036a2:	bd80      	pop	{r7, pc}

080036a4 <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b084      	sub	sp, #16
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80036ac:	2300      	movs	r3, #0
 80036ae:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 80036b0:	f7fe f902 	bl	80018b8 <HAL_GetTick>
 80036b4:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80036b6:	e009      	b.n	80036cc <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80036b8:	f7fe f8fe 	bl	80018b8 <HAL_GetTick>
 80036bc:	4602      	mov	r2, r0
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	1ad3      	subs	r3, r2, r3
 80036c2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80036c6:	d901      	bls.n	80036cc <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 80036c8:	2303      	movs	r3, #3
 80036ca:	e00f      	b.n	80036ec <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	685b      	ldr	r3, [r3, #4]
 80036d2:	f003 0320 	and.w	r3, r3, #32
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d0ee      	beq.n	80036b8 <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	685a      	ldr	r2, [r3, #4]
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f042 0210 	orr.w	r2, r2, #16
 80036e8:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 80036ea:	2300      	movs	r3, #0
}
 80036ec:	4618      	mov	r0, r3
 80036ee:	3710      	adds	r7, #16
 80036f0:	46bd      	mov	sp, r7
 80036f2:	bd80      	pop	{r7, pc}

080036f4 <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b084      	sub	sp, #16
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80036fc:	2300      	movs	r3, #0
 80036fe:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	685a      	ldr	r2, [r3, #4]
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f022 0210 	bic.w	r2, r2, #16
 800370e:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8003710:	f7fe f8d2 	bl	80018b8 <HAL_GetTick>
 8003714:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8003716:	e009      	b.n	800372c <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8003718:	f7fe f8ce 	bl	80018b8 <HAL_GetTick>
 800371c:	4602      	mov	r2, r0
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	1ad3      	subs	r3, r2, r3
 8003722:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003726:	d901      	bls.n	800372c <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 8003728:	2303      	movs	r3, #3
 800372a:	e007      	b.n	800373c <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	685b      	ldr	r3, [r3, #4]
 8003732:	f003 0320 	and.w	r3, r3, #32
 8003736:	2b00      	cmp	r3, #0
 8003738:	d0ee      	beq.n	8003718 <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 800373a:	2300      	movs	r3, #0
}
 800373c:	4618      	mov	r0, r3
 800373e:	3710      	adds	r7, #16
 8003740:	46bd      	mov	sp, r7
 8003742:	bd80      	pop	{r7, pc}

08003744 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8003744:	b480      	push	{r7}
 8003746:	b085      	sub	sp, #20
 8003748:	af00      	add	r7, sp, #0
 800374a:	4603      	mov	r3, r0
 800374c:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 800374e:	2300      	movs	r3, #0
 8003750:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 8003752:	79fb      	ldrb	r3, [r7, #7]
 8003754:	091b      	lsrs	r3, r3, #4
 8003756:	b2db      	uxtb	r3, r3
 8003758:	461a      	mov	r2, r3
 800375a:	4613      	mov	r3, r2
 800375c:	009b      	lsls	r3, r3, #2
 800375e:	4413      	add	r3, r2
 8003760:	005b      	lsls	r3, r3, #1
 8003762:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8003764:	79fb      	ldrb	r3, [r7, #7]
 8003766:	f003 030f 	and.w	r3, r3, #15
 800376a:	b2da      	uxtb	r2, r3
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	b2db      	uxtb	r3, r3
 8003770:	4413      	add	r3, r2
 8003772:	b2db      	uxtb	r3, r3
}
 8003774:	4618      	mov	r0, r3
 8003776:	3714      	adds	r7, #20
 8003778:	46bd      	mov	sp, r7
 800377a:	bc80      	pop	{r7}
 800377c:	4770      	bx	lr
	...

08003780 <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 8003780:	b480      	push	{r7}
 8003782:	b085      	sub	sp, #20
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
 8003788:	460b      	mov	r3, r1
 800378a:	70fb      	strb	r3, [r7, #3]
 800378c:	4613      	mov	r3, r2
 800378e:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 8003790:	2300      	movs	r3, #0
 8003792:	60bb      	str	r3, [r7, #8]
 8003794:	2300      	movs	r3, #0
 8003796:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 800379e:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 80037a0:	78fb      	ldrb	r3, [r7, #3]
 80037a2:	2b02      	cmp	r3, #2
 80037a4:	d82d      	bhi.n	8003802 <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 80037a6:	78fa      	ldrb	r2, [r7, #3]
 80037a8:	4613      	mov	r3, r2
 80037aa:	005b      	lsls	r3, r3, #1
 80037ac:	4413      	add	r3, r2
 80037ae:	00db      	lsls	r3, r3, #3
 80037b0:	1a9b      	subs	r3, r3, r2
 80037b2:	4a2c      	ldr	r2, [pc, #176]	; (8003864 <RTC_WeekDayNum+0xe4>)
 80037b4:	fba2 2303 	umull	r2, r3, r2, r3
 80037b8:	085a      	lsrs	r2, r3, #1
 80037ba:	78bb      	ldrb	r3, [r7, #2]
 80037bc:	441a      	add	r2, r3
 80037be:	68bb      	ldr	r3, [r7, #8]
 80037c0:	441a      	add	r2, r3
 80037c2:	68bb      	ldr	r3, [r7, #8]
 80037c4:	3b01      	subs	r3, #1
 80037c6:	089b      	lsrs	r3, r3, #2
 80037c8:	441a      	add	r2, r3
 80037ca:	68bb      	ldr	r3, [r7, #8]
 80037cc:	3b01      	subs	r3, #1
 80037ce:	4926      	ldr	r1, [pc, #152]	; (8003868 <RTC_WeekDayNum+0xe8>)
 80037d0:	fba1 1303 	umull	r1, r3, r1, r3
 80037d4:	095b      	lsrs	r3, r3, #5
 80037d6:	1ad2      	subs	r2, r2, r3
 80037d8:	68bb      	ldr	r3, [r7, #8]
 80037da:	3b01      	subs	r3, #1
 80037dc:	4922      	ldr	r1, [pc, #136]	; (8003868 <RTC_WeekDayNum+0xe8>)
 80037de:	fba1 1303 	umull	r1, r3, r1, r3
 80037e2:	09db      	lsrs	r3, r3, #7
 80037e4:	4413      	add	r3, r2
 80037e6:	1d1a      	adds	r2, r3, #4
 80037e8:	4b20      	ldr	r3, [pc, #128]	; (800386c <RTC_WeekDayNum+0xec>)
 80037ea:	fba3 1302 	umull	r1, r3, r3, r2
 80037ee:	1ad1      	subs	r1, r2, r3
 80037f0:	0849      	lsrs	r1, r1, #1
 80037f2:	440b      	add	r3, r1
 80037f4:	0899      	lsrs	r1, r3, #2
 80037f6:	460b      	mov	r3, r1
 80037f8:	00db      	lsls	r3, r3, #3
 80037fa:	1a5b      	subs	r3, r3, r1
 80037fc:	1ad3      	subs	r3, r2, r3
 80037fe:	60fb      	str	r3, [r7, #12]
 8003800:	e029      	b.n	8003856 <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 8003802:	78fa      	ldrb	r2, [r7, #3]
 8003804:	4613      	mov	r3, r2
 8003806:	005b      	lsls	r3, r3, #1
 8003808:	4413      	add	r3, r2
 800380a:	00db      	lsls	r3, r3, #3
 800380c:	1a9b      	subs	r3, r3, r2
 800380e:	4a15      	ldr	r2, [pc, #84]	; (8003864 <RTC_WeekDayNum+0xe4>)
 8003810:	fba2 2303 	umull	r2, r3, r2, r3
 8003814:	085a      	lsrs	r2, r3, #1
 8003816:	78bb      	ldrb	r3, [r7, #2]
 8003818:	441a      	add	r2, r3
 800381a:	68bb      	ldr	r3, [r7, #8]
 800381c:	441a      	add	r2, r3
 800381e:	68bb      	ldr	r3, [r7, #8]
 8003820:	089b      	lsrs	r3, r3, #2
 8003822:	441a      	add	r2, r3
 8003824:	68bb      	ldr	r3, [r7, #8]
 8003826:	4910      	ldr	r1, [pc, #64]	; (8003868 <RTC_WeekDayNum+0xe8>)
 8003828:	fba1 1303 	umull	r1, r3, r1, r3
 800382c:	095b      	lsrs	r3, r3, #5
 800382e:	1ad2      	subs	r2, r2, r3
 8003830:	68bb      	ldr	r3, [r7, #8]
 8003832:	490d      	ldr	r1, [pc, #52]	; (8003868 <RTC_WeekDayNum+0xe8>)
 8003834:	fba1 1303 	umull	r1, r3, r1, r3
 8003838:	09db      	lsrs	r3, r3, #7
 800383a:	4413      	add	r3, r2
 800383c:	1c9a      	adds	r2, r3, #2
 800383e:	4b0b      	ldr	r3, [pc, #44]	; (800386c <RTC_WeekDayNum+0xec>)
 8003840:	fba3 1302 	umull	r1, r3, r3, r2
 8003844:	1ad1      	subs	r1, r2, r3
 8003846:	0849      	lsrs	r1, r1, #1
 8003848:	440b      	add	r3, r1
 800384a:	0899      	lsrs	r1, r3, #2
 800384c:	460b      	mov	r3, r1
 800384e:	00db      	lsls	r3, r3, #3
 8003850:	1a5b      	subs	r3, r3, r1
 8003852:	1ad3      	subs	r3, r2, r3
 8003854:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	b2db      	uxtb	r3, r3
}
 800385a:	4618      	mov	r0, r3
 800385c:	3714      	adds	r7, #20
 800385e:	46bd      	mov	sp, r7
 8003860:	bc80      	pop	{r7}
 8003862:	4770      	bx	lr
 8003864:	38e38e39 	.word	0x38e38e39
 8003868:	51eb851f 	.word	0x51eb851f
 800386c:	24924925 	.word	0x24924925

08003870 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003870:	b580      	push	{r7, lr}
 8003872:	b082      	sub	sp, #8
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2b00      	cmp	r3, #0
 800387c:	d101      	bne.n	8003882 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800387e:	2301      	movs	r3, #1
 8003880:	e076      	b.n	8003970 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003886:	2b00      	cmp	r3, #0
 8003888:	d108      	bne.n	800389c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	685b      	ldr	r3, [r3, #4]
 800388e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003892:	d009      	beq.n	80038a8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2200      	movs	r2, #0
 8003898:	61da      	str	r2, [r3, #28]
 800389a:	e005      	b.n	80038a8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2200      	movs	r2, #0
 80038a0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	2200      	movs	r2, #0
 80038a6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2200      	movs	r2, #0
 80038ac:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80038b4:	b2db      	uxtb	r3, r3
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d106      	bne.n	80038c8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	2200      	movs	r2, #0
 80038be:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80038c2:	6878      	ldr	r0, [r7, #4]
 80038c4:	f7fd fdf8 	bl	80014b8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2202      	movs	r2, #2
 80038cc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	681a      	ldr	r2, [r3, #0]
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80038de:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	685b      	ldr	r3, [r3, #4]
 80038e4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	689b      	ldr	r3, [r3, #8]
 80038ec:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80038f0:	431a      	orrs	r2, r3
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	68db      	ldr	r3, [r3, #12]
 80038f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80038fa:	431a      	orrs	r2, r3
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	691b      	ldr	r3, [r3, #16]
 8003900:	f003 0302 	and.w	r3, r3, #2
 8003904:	431a      	orrs	r2, r3
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	695b      	ldr	r3, [r3, #20]
 800390a:	f003 0301 	and.w	r3, r3, #1
 800390e:	431a      	orrs	r2, r3
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	699b      	ldr	r3, [r3, #24]
 8003914:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003918:	431a      	orrs	r2, r3
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	69db      	ldr	r3, [r3, #28]
 800391e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003922:	431a      	orrs	r2, r3
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6a1b      	ldr	r3, [r3, #32]
 8003928:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800392c:	ea42 0103 	orr.w	r1, r2, r3
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003934:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	430a      	orrs	r2, r1
 800393e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	699b      	ldr	r3, [r3, #24]
 8003944:	0c1a      	lsrs	r2, r3, #16
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f002 0204 	and.w	r2, r2, #4
 800394e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	69da      	ldr	r2, [r3, #28]
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800395e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2200      	movs	r2, #0
 8003964:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	2201      	movs	r2, #1
 800396a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800396e:	2300      	movs	r3, #0
}
 8003970:	4618      	mov	r0, r3
 8003972:	3708      	adds	r7, #8
 8003974:	46bd      	mov	sp, r7
 8003976:	bd80      	pop	{r7, pc}

08003978 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b088      	sub	sp, #32
 800397c:	af00      	add	r7, sp, #0
 800397e:	60f8      	str	r0, [r7, #12]
 8003980:	60b9      	str	r1, [r7, #8]
 8003982:	603b      	str	r3, [r7, #0]
 8003984:	4613      	mov	r3, r2
 8003986:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003988:	2300      	movs	r3, #0
 800398a:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003992:	2b01      	cmp	r3, #1
 8003994:	d101      	bne.n	800399a <HAL_SPI_Transmit+0x22>
 8003996:	2302      	movs	r3, #2
 8003998:	e126      	b.n	8003be8 <HAL_SPI_Transmit+0x270>
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	2201      	movs	r2, #1
 800399e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80039a2:	f7fd ff89 	bl	80018b8 <HAL_GetTick>
 80039a6:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80039a8:	88fb      	ldrh	r3, [r7, #6]
 80039aa:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80039b2:	b2db      	uxtb	r3, r3
 80039b4:	2b01      	cmp	r3, #1
 80039b6:	d002      	beq.n	80039be <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80039b8:	2302      	movs	r3, #2
 80039ba:	77fb      	strb	r3, [r7, #31]
    goto error;
 80039bc:	e10b      	b.n	8003bd6 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80039be:	68bb      	ldr	r3, [r7, #8]
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d002      	beq.n	80039ca <HAL_SPI_Transmit+0x52>
 80039c4:	88fb      	ldrh	r3, [r7, #6]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d102      	bne.n	80039d0 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80039ca:	2301      	movs	r3, #1
 80039cc:	77fb      	strb	r3, [r7, #31]
    goto error;
 80039ce:	e102      	b.n	8003bd6 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	2203      	movs	r2, #3
 80039d4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	2200      	movs	r2, #0
 80039dc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	68ba      	ldr	r2, [r7, #8]
 80039e2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	88fa      	ldrh	r2, [r7, #6]
 80039e8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	88fa      	ldrh	r2, [r7, #6]
 80039ee:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	2200      	movs	r2, #0
 80039f4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	2200      	movs	r2, #0
 80039fa:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	2200      	movs	r2, #0
 8003a00:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	2200      	movs	r2, #0
 8003a06:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	689b      	ldr	r3, [r3, #8]
 8003a12:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a16:	d10f      	bne.n	8003a38 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	681a      	ldr	r2, [r3, #0]
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a26:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	681a      	ldr	r2, [r3, #0]
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003a36:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a42:	2b40      	cmp	r3, #64	; 0x40
 8003a44:	d007      	beq.n	8003a56 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	681a      	ldr	r2, [r3, #0]
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003a54:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	68db      	ldr	r3, [r3, #12]
 8003a5a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a5e:	d14b      	bne.n	8003af8 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	685b      	ldr	r3, [r3, #4]
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d002      	beq.n	8003a6e <HAL_SPI_Transmit+0xf6>
 8003a68:	8afb      	ldrh	r3, [r7, #22]
 8003a6a:	2b01      	cmp	r3, #1
 8003a6c:	d13e      	bne.n	8003aec <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a72:	881a      	ldrh	r2, [r3, #0]
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a7e:	1c9a      	adds	r2, r3, #2
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a88:	b29b      	uxth	r3, r3
 8003a8a:	3b01      	subs	r3, #1
 8003a8c:	b29a      	uxth	r2, r3
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003a92:	e02b      	b.n	8003aec <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	689b      	ldr	r3, [r3, #8]
 8003a9a:	f003 0302 	and.w	r3, r3, #2
 8003a9e:	2b02      	cmp	r3, #2
 8003aa0:	d112      	bne.n	8003ac8 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aa6:	881a      	ldrh	r2, [r3, #0]
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ab2:	1c9a      	adds	r2, r3, #2
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003abc:	b29b      	uxth	r3, r3
 8003abe:	3b01      	subs	r3, #1
 8003ac0:	b29a      	uxth	r2, r3
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	86da      	strh	r2, [r3, #54]	; 0x36
 8003ac6:	e011      	b.n	8003aec <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003ac8:	f7fd fef6 	bl	80018b8 <HAL_GetTick>
 8003acc:	4602      	mov	r2, r0
 8003ace:	69bb      	ldr	r3, [r7, #24]
 8003ad0:	1ad3      	subs	r3, r2, r3
 8003ad2:	683a      	ldr	r2, [r7, #0]
 8003ad4:	429a      	cmp	r2, r3
 8003ad6:	d803      	bhi.n	8003ae0 <HAL_SPI_Transmit+0x168>
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ade:	d102      	bne.n	8003ae6 <HAL_SPI_Transmit+0x16e>
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d102      	bne.n	8003aec <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8003ae6:	2303      	movs	r3, #3
 8003ae8:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003aea:	e074      	b.n	8003bd6 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003af0:	b29b      	uxth	r3, r3
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d1ce      	bne.n	8003a94 <HAL_SPI_Transmit+0x11c>
 8003af6:	e04c      	b.n	8003b92 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	685b      	ldr	r3, [r3, #4]
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d002      	beq.n	8003b06 <HAL_SPI_Transmit+0x18e>
 8003b00:	8afb      	ldrh	r3, [r7, #22]
 8003b02:	2b01      	cmp	r3, #1
 8003b04:	d140      	bne.n	8003b88 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	330c      	adds	r3, #12
 8003b10:	7812      	ldrb	r2, [r2, #0]
 8003b12:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b18:	1c5a      	adds	r2, r3, #1
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b22:	b29b      	uxth	r3, r3
 8003b24:	3b01      	subs	r3, #1
 8003b26:	b29a      	uxth	r2, r3
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003b2c:	e02c      	b.n	8003b88 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	689b      	ldr	r3, [r3, #8]
 8003b34:	f003 0302 	and.w	r3, r3, #2
 8003b38:	2b02      	cmp	r3, #2
 8003b3a:	d113      	bne.n	8003b64 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	330c      	adds	r3, #12
 8003b46:	7812      	ldrb	r2, [r2, #0]
 8003b48:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b4e:	1c5a      	adds	r2, r3, #1
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b58:	b29b      	uxth	r3, r3
 8003b5a:	3b01      	subs	r3, #1
 8003b5c:	b29a      	uxth	r2, r3
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	86da      	strh	r2, [r3, #54]	; 0x36
 8003b62:	e011      	b.n	8003b88 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003b64:	f7fd fea8 	bl	80018b8 <HAL_GetTick>
 8003b68:	4602      	mov	r2, r0
 8003b6a:	69bb      	ldr	r3, [r7, #24]
 8003b6c:	1ad3      	subs	r3, r2, r3
 8003b6e:	683a      	ldr	r2, [r7, #0]
 8003b70:	429a      	cmp	r2, r3
 8003b72:	d803      	bhi.n	8003b7c <HAL_SPI_Transmit+0x204>
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b7a:	d102      	bne.n	8003b82 <HAL_SPI_Transmit+0x20a>
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d102      	bne.n	8003b88 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8003b82:	2303      	movs	r3, #3
 8003b84:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003b86:	e026      	b.n	8003bd6 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b8c:	b29b      	uxth	r3, r3
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d1cd      	bne.n	8003b2e <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003b92:	69ba      	ldr	r2, [r7, #24]
 8003b94:	6839      	ldr	r1, [r7, #0]
 8003b96:	68f8      	ldr	r0, [r7, #12]
 8003b98:	f000 f8b2 	bl	8003d00 <SPI_EndRxTxTransaction>
 8003b9c:	4603      	mov	r3, r0
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d002      	beq.n	8003ba8 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	2220      	movs	r2, #32
 8003ba6:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	689b      	ldr	r3, [r3, #8]
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d10a      	bne.n	8003bc6 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003bb0:	2300      	movs	r3, #0
 8003bb2:	613b      	str	r3, [r7, #16]
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	68db      	ldr	r3, [r3, #12]
 8003bba:	613b      	str	r3, [r7, #16]
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	689b      	ldr	r3, [r3, #8]
 8003bc2:	613b      	str	r3, [r7, #16]
 8003bc4:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d002      	beq.n	8003bd4 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8003bce:	2301      	movs	r3, #1
 8003bd0:	77fb      	strb	r3, [r7, #31]
 8003bd2:	e000      	b.n	8003bd6 <HAL_SPI_Transmit+0x25e>
  }

error:
 8003bd4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	2201      	movs	r2, #1
 8003bda:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	2200      	movs	r2, #0
 8003be2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003be6:	7ffb      	ldrb	r3, [r7, #31]
}
 8003be8:	4618      	mov	r0, r3
 8003bea:	3720      	adds	r7, #32
 8003bec:	46bd      	mov	sp, r7
 8003bee:	bd80      	pop	{r7, pc}

08003bf0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b088      	sub	sp, #32
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	60f8      	str	r0, [r7, #12]
 8003bf8:	60b9      	str	r1, [r7, #8]
 8003bfa:	603b      	str	r3, [r7, #0]
 8003bfc:	4613      	mov	r3, r2
 8003bfe:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003c00:	f7fd fe5a 	bl	80018b8 <HAL_GetTick>
 8003c04:	4602      	mov	r2, r0
 8003c06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c08:	1a9b      	subs	r3, r3, r2
 8003c0a:	683a      	ldr	r2, [r7, #0]
 8003c0c:	4413      	add	r3, r2
 8003c0e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003c10:	f7fd fe52 	bl	80018b8 <HAL_GetTick>
 8003c14:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003c16:	4b39      	ldr	r3, [pc, #228]	; (8003cfc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	015b      	lsls	r3, r3, #5
 8003c1c:	0d1b      	lsrs	r3, r3, #20
 8003c1e:	69fa      	ldr	r2, [r7, #28]
 8003c20:	fb02 f303 	mul.w	r3, r2, r3
 8003c24:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003c26:	e054      	b.n	8003cd2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c2e:	d050      	beq.n	8003cd2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003c30:	f7fd fe42 	bl	80018b8 <HAL_GetTick>
 8003c34:	4602      	mov	r2, r0
 8003c36:	69bb      	ldr	r3, [r7, #24]
 8003c38:	1ad3      	subs	r3, r2, r3
 8003c3a:	69fa      	ldr	r2, [r7, #28]
 8003c3c:	429a      	cmp	r2, r3
 8003c3e:	d902      	bls.n	8003c46 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003c40:	69fb      	ldr	r3, [r7, #28]
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d13d      	bne.n	8003cc2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	685a      	ldr	r2, [r3, #4]
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003c54:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	685b      	ldr	r3, [r3, #4]
 8003c5a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003c5e:	d111      	bne.n	8003c84 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	689b      	ldr	r3, [r3, #8]
 8003c64:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c68:	d004      	beq.n	8003c74 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	689b      	ldr	r3, [r3, #8]
 8003c6e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c72:	d107      	bne.n	8003c84 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	681a      	ldr	r2, [r3, #0]
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c82:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c88:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c8c:	d10f      	bne.n	8003cae <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	681a      	ldr	r2, [r3, #0]
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003c9c:	601a      	str	r2, [r3, #0]
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	681a      	ldr	r2, [r3, #0]
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003cac:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	2201      	movs	r2, #1
 8003cb2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	2200      	movs	r2, #0
 8003cba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003cbe:	2303      	movs	r3, #3
 8003cc0:	e017      	b.n	8003cf2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003cc2:	697b      	ldr	r3, [r7, #20]
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d101      	bne.n	8003ccc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003cc8:	2300      	movs	r3, #0
 8003cca:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003ccc:	697b      	ldr	r3, [r7, #20]
 8003cce:	3b01      	subs	r3, #1
 8003cd0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	689a      	ldr	r2, [r3, #8]
 8003cd8:	68bb      	ldr	r3, [r7, #8]
 8003cda:	4013      	ands	r3, r2
 8003cdc:	68ba      	ldr	r2, [r7, #8]
 8003cde:	429a      	cmp	r2, r3
 8003ce0:	bf0c      	ite	eq
 8003ce2:	2301      	moveq	r3, #1
 8003ce4:	2300      	movne	r3, #0
 8003ce6:	b2db      	uxtb	r3, r3
 8003ce8:	461a      	mov	r2, r3
 8003cea:	79fb      	ldrb	r3, [r7, #7]
 8003cec:	429a      	cmp	r2, r3
 8003cee:	d19b      	bne.n	8003c28 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003cf0:	2300      	movs	r3, #0
}
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	3720      	adds	r7, #32
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	bd80      	pop	{r7, pc}
 8003cfa:	bf00      	nop
 8003cfc:	20000008 	.word	0x20000008

08003d00 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b086      	sub	sp, #24
 8003d04:	af02      	add	r7, sp, #8
 8003d06:	60f8      	str	r0, [r7, #12]
 8003d08:	60b9      	str	r1, [r7, #8]
 8003d0a:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	9300      	str	r3, [sp, #0]
 8003d10:	68bb      	ldr	r3, [r7, #8]
 8003d12:	2200      	movs	r2, #0
 8003d14:	2180      	movs	r1, #128	; 0x80
 8003d16:	68f8      	ldr	r0, [r7, #12]
 8003d18:	f7ff ff6a 	bl	8003bf0 <SPI_WaitFlagStateUntilTimeout>
 8003d1c:	4603      	mov	r3, r0
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d007      	beq.n	8003d32 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d26:	f043 0220 	orr.w	r2, r3, #32
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8003d2e:	2303      	movs	r3, #3
 8003d30:	e000      	b.n	8003d34 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8003d32:	2300      	movs	r3, #0
}
 8003d34:	4618      	mov	r0, r3
 8003d36:	3710      	adds	r7, #16
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	bd80      	pop	{r7, pc}

08003d3c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b082      	sub	sp, #8
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d101      	bne.n	8003d4e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003d4a:	2301      	movs	r3, #1
 8003d4c:	e041      	b.n	8003dd2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d54:	b2db      	uxtb	r3, r3
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d106      	bne.n	8003d68 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003d62:	6878      	ldr	r0, [r7, #4]
 8003d64:	f7fd fbe8 	bl	8001538 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2202      	movs	r2, #2
 8003d6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681a      	ldr	r2, [r3, #0]
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	3304      	adds	r3, #4
 8003d78:	4619      	mov	r1, r3
 8003d7a:	4610      	mov	r0, r2
 8003d7c:	f000 f9d2 	bl	8004124 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2201      	movs	r2, #1
 8003d84:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2201      	movs	r2, #1
 8003d8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2201      	movs	r2, #1
 8003d94:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2201      	movs	r2, #1
 8003d9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2201      	movs	r2, #1
 8003da4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2201      	movs	r2, #1
 8003dac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2201      	movs	r2, #1
 8003db4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2201      	movs	r2, #1
 8003dbc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2201      	movs	r2, #1
 8003dc4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2201      	movs	r2, #1
 8003dcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003dd0:	2300      	movs	r3, #0
}
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	3708      	adds	r7, #8
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	bd80      	pop	{r7, pc}
	...

08003ddc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b084      	sub	sp, #16
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]
 8003de4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d109      	bne.n	8003e00 <HAL_TIM_PWM_Start+0x24>
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003df2:	b2db      	uxtb	r3, r3
 8003df4:	2b01      	cmp	r3, #1
 8003df6:	bf14      	ite	ne
 8003df8:	2301      	movne	r3, #1
 8003dfa:	2300      	moveq	r3, #0
 8003dfc:	b2db      	uxtb	r3, r3
 8003dfe:	e022      	b.n	8003e46 <HAL_TIM_PWM_Start+0x6a>
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	2b04      	cmp	r3, #4
 8003e04:	d109      	bne.n	8003e1a <HAL_TIM_PWM_Start+0x3e>
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003e0c:	b2db      	uxtb	r3, r3
 8003e0e:	2b01      	cmp	r3, #1
 8003e10:	bf14      	ite	ne
 8003e12:	2301      	movne	r3, #1
 8003e14:	2300      	moveq	r3, #0
 8003e16:	b2db      	uxtb	r3, r3
 8003e18:	e015      	b.n	8003e46 <HAL_TIM_PWM_Start+0x6a>
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	2b08      	cmp	r3, #8
 8003e1e:	d109      	bne.n	8003e34 <HAL_TIM_PWM_Start+0x58>
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003e26:	b2db      	uxtb	r3, r3
 8003e28:	2b01      	cmp	r3, #1
 8003e2a:	bf14      	ite	ne
 8003e2c:	2301      	movne	r3, #1
 8003e2e:	2300      	moveq	r3, #0
 8003e30:	b2db      	uxtb	r3, r3
 8003e32:	e008      	b.n	8003e46 <HAL_TIM_PWM_Start+0x6a>
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e3a:	b2db      	uxtb	r3, r3
 8003e3c:	2b01      	cmp	r3, #1
 8003e3e:	bf14      	ite	ne
 8003e40:	2301      	movne	r3, #1
 8003e42:	2300      	moveq	r3, #0
 8003e44:	b2db      	uxtb	r3, r3
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d001      	beq.n	8003e4e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003e4a:	2301      	movs	r3, #1
 8003e4c:	e05e      	b.n	8003f0c <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d104      	bne.n	8003e5e <HAL_TIM_PWM_Start+0x82>
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2202      	movs	r2, #2
 8003e58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003e5c:	e013      	b.n	8003e86 <HAL_TIM_PWM_Start+0xaa>
 8003e5e:	683b      	ldr	r3, [r7, #0]
 8003e60:	2b04      	cmp	r3, #4
 8003e62:	d104      	bne.n	8003e6e <HAL_TIM_PWM_Start+0x92>
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2202      	movs	r2, #2
 8003e68:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003e6c:	e00b      	b.n	8003e86 <HAL_TIM_PWM_Start+0xaa>
 8003e6e:	683b      	ldr	r3, [r7, #0]
 8003e70:	2b08      	cmp	r3, #8
 8003e72:	d104      	bne.n	8003e7e <HAL_TIM_PWM_Start+0xa2>
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2202      	movs	r2, #2
 8003e78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003e7c:	e003      	b.n	8003e86 <HAL_TIM_PWM_Start+0xaa>
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	2202      	movs	r2, #2
 8003e82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	2201      	movs	r2, #1
 8003e8c:	6839      	ldr	r1, [r7, #0]
 8003e8e:	4618      	mov	r0, r3
 8003e90:	f000 fb32 	bl	80044f8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	4a1e      	ldr	r2, [pc, #120]	; (8003f14 <HAL_TIM_PWM_Start+0x138>)
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d107      	bne.n	8003eae <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003eac:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	4a18      	ldr	r2, [pc, #96]	; (8003f14 <HAL_TIM_PWM_Start+0x138>)
 8003eb4:	4293      	cmp	r3, r2
 8003eb6:	d00e      	beq.n	8003ed6 <HAL_TIM_PWM_Start+0xfa>
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ec0:	d009      	beq.n	8003ed6 <HAL_TIM_PWM_Start+0xfa>
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	4a14      	ldr	r2, [pc, #80]	; (8003f18 <HAL_TIM_PWM_Start+0x13c>)
 8003ec8:	4293      	cmp	r3, r2
 8003eca:	d004      	beq.n	8003ed6 <HAL_TIM_PWM_Start+0xfa>
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	4a12      	ldr	r2, [pc, #72]	; (8003f1c <HAL_TIM_PWM_Start+0x140>)
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	d111      	bne.n	8003efa <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	689b      	ldr	r3, [r3, #8]
 8003edc:	f003 0307 	and.w	r3, r3, #7
 8003ee0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	2b06      	cmp	r3, #6
 8003ee6:	d010      	beq.n	8003f0a <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	681a      	ldr	r2, [r3, #0]
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f042 0201 	orr.w	r2, r2, #1
 8003ef6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ef8:	e007      	b.n	8003f0a <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	681a      	ldr	r2, [r3, #0]
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f042 0201 	orr.w	r2, r2, #1
 8003f08:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003f0a:	2300      	movs	r3, #0
}
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	3710      	adds	r7, #16
 8003f10:	46bd      	mov	sp, r7
 8003f12:	bd80      	pop	{r7, pc}
 8003f14:	40012c00 	.word	0x40012c00
 8003f18:	40000400 	.word	0x40000400
 8003f1c:	40000800 	.word	0x40000800

08003f20 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003f20:	b580      	push	{r7, lr}
 8003f22:	b084      	sub	sp, #16
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	60f8      	str	r0, [r7, #12]
 8003f28:	60b9      	str	r1, [r7, #8]
 8003f2a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f32:	2b01      	cmp	r3, #1
 8003f34:	d101      	bne.n	8003f3a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003f36:	2302      	movs	r3, #2
 8003f38:	e0ac      	b.n	8004094 <HAL_TIM_PWM_ConfigChannel+0x174>
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	2201      	movs	r2, #1
 8003f3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	2b0c      	cmp	r3, #12
 8003f46:	f200 809f 	bhi.w	8004088 <HAL_TIM_PWM_ConfigChannel+0x168>
 8003f4a:	a201      	add	r2, pc, #4	; (adr r2, 8003f50 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8003f4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f50:	08003f85 	.word	0x08003f85
 8003f54:	08004089 	.word	0x08004089
 8003f58:	08004089 	.word	0x08004089
 8003f5c:	08004089 	.word	0x08004089
 8003f60:	08003fc5 	.word	0x08003fc5
 8003f64:	08004089 	.word	0x08004089
 8003f68:	08004089 	.word	0x08004089
 8003f6c:	08004089 	.word	0x08004089
 8003f70:	08004007 	.word	0x08004007
 8003f74:	08004089 	.word	0x08004089
 8003f78:	08004089 	.word	0x08004089
 8003f7c:	08004089 	.word	0x08004089
 8003f80:	08004047 	.word	0x08004047
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	68b9      	ldr	r1, [r7, #8]
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	f000 f92c 	bl	80041e8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	699a      	ldr	r2, [r3, #24]
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f042 0208 	orr.w	r2, r2, #8
 8003f9e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	699a      	ldr	r2, [r3, #24]
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f022 0204 	bic.w	r2, r2, #4
 8003fae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	6999      	ldr	r1, [r3, #24]
 8003fb6:	68bb      	ldr	r3, [r7, #8]
 8003fb8:	691a      	ldr	r2, [r3, #16]
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	430a      	orrs	r2, r1
 8003fc0:	619a      	str	r2, [r3, #24]
      break;
 8003fc2:	e062      	b.n	800408a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	68b9      	ldr	r1, [r7, #8]
 8003fca:	4618      	mov	r0, r3
 8003fcc:	f000 f972 	bl	80042b4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	699a      	ldr	r2, [r3, #24]
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003fde:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	699a      	ldr	r2, [r3, #24]
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003fee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	6999      	ldr	r1, [r3, #24]
 8003ff6:	68bb      	ldr	r3, [r7, #8]
 8003ff8:	691b      	ldr	r3, [r3, #16]
 8003ffa:	021a      	lsls	r2, r3, #8
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	430a      	orrs	r2, r1
 8004002:	619a      	str	r2, [r3, #24]
      break;
 8004004:	e041      	b.n	800408a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	68b9      	ldr	r1, [r7, #8]
 800400c:	4618      	mov	r0, r3
 800400e:	f000 f9bb 	bl	8004388 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	69da      	ldr	r2, [r3, #28]
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f042 0208 	orr.w	r2, r2, #8
 8004020:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	69da      	ldr	r2, [r3, #28]
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f022 0204 	bic.w	r2, r2, #4
 8004030:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	69d9      	ldr	r1, [r3, #28]
 8004038:	68bb      	ldr	r3, [r7, #8]
 800403a:	691a      	ldr	r2, [r3, #16]
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	430a      	orrs	r2, r1
 8004042:	61da      	str	r2, [r3, #28]
      break;
 8004044:	e021      	b.n	800408a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	68b9      	ldr	r1, [r7, #8]
 800404c:	4618      	mov	r0, r3
 800404e:	f000 fa05 	bl	800445c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	69da      	ldr	r2, [r3, #28]
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004060:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	69da      	ldr	r2, [r3, #28]
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004070:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	69d9      	ldr	r1, [r3, #28]
 8004078:	68bb      	ldr	r3, [r7, #8]
 800407a:	691b      	ldr	r3, [r3, #16]
 800407c:	021a      	lsls	r2, r3, #8
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	430a      	orrs	r2, r1
 8004084:	61da      	str	r2, [r3, #28]
      break;
 8004086:	e000      	b.n	800408a <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8004088:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	2200      	movs	r2, #0
 800408e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004092:	2300      	movs	r3, #0
}
 8004094:	4618      	mov	r0, r3
 8004096:	3710      	adds	r7, #16
 8004098:	46bd      	mov	sp, r7
 800409a:	bd80      	pop	{r7, pc}

0800409c <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800409c:	b480      	push	{r7}
 800409e:	b085      	sub	sp, #20
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
 80040a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80040a6:	2300      	movs	r3, #0
 80040a8:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 80040aa:	683b      	ldr	r3, [r7, #0]
 80040ac:	2b0c      	cmp	r3, #12
 80040ae:	d831      	bhi.n	8004114 <HAL_TIM_ReadCapturedValue+0x78>
 80040b0:	a201      	add	r2, pc, #4	; (adr r2, 80040b8 <HAL_TIM_ReadCapturedValue+0x1c>)
 80040b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040b6:	bf00      	nop
 80040b8:	080040ed 	.word	0x080040ed
 80040bc:	08004115 	.word	0x08004115
 80040c0:	08004115 	.word	0x08004115
 80040c4:	08004115 	.word	0x08004115
 80040c8:	080040f7 	.word	0x080040f7
 80040cc:	08004115 	.word	0x08004115
 80040d0:	08004115 	.word	0x08004115
 80040d4:	08004115 	.word	0x08004115
 80040d8:	08004101 	.word	0x08004101
 80040dc:	08004115 	.word	0x08004115
 80040e0:	08004115 	.word	0x08004115
 80040e4:	08004115 	.word	0x08004115
 80040e8:	0800410b 	.word	0x0800410b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040f2:	60fb      	str	r3, [r7, #12]

      break;
 80040f4:	e00f      	b.n	8004116 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040fc:	60fb      	str	r3, [r7, #12]

      break;
 80040fe:	e00a      	b.n	8004116 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004106:	60fb      	str	r3, [r7, #12]

      break;
 8004108:	e005      	b.n	8004116 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004110:	60fb      	str	r3, [r7, #12]

      break;
 8004112:	e000      	b.n	8004116 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8004114:	bf00      	nop
  }

  return tmpreg;
 8004116:	68fb      	ldr	r3, [r7, #12]
}
 8004118:	4618      	mov	r0, r3
 800411a:	3714      	adds	r7, #20
 800411c:	46bd      	mov	sp, r7
 800411e:	bc80      	pop	{r7}
 8004120:	4770      	bx	lr
 8004122:	bf00      	nop

08004124 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004124:	b480      	push	{r7}
 8004126:	b085      	sub	sp, #20
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
 800412c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	4a29      	ldr	r2, [pc, #164]	; (80041dc <TIM_Base_SetConfig+0xb8>)
 8004138:	4293      	cmp	r3, r2
 800413a:	d00b      	beq.n	8004154 <TIM_Base_SetConfig+0x30>
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004142:	d007      	beq.n	8004154 <TIM_Base_SetConfig+0x30>
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	4a26      	ldr	r2, [pc, #152]	; (80041e0 <TIM_Base_SetConfig+0xbc>)
 8004148:	4293      	cmp	r3, r2
 800414a:	d003      	beq.n	8004154 <TIM_Base_SetConfig+0x30>
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	4a25      	ldr	r2, [pc, #148]	; (80041e4 <TIM_Base_SetConfig+0xc0>)
 8004150:	4293      	cmp	r3, r2
 8004152:	d108      	bne.n	8004166 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800415a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	685b      	ldr	r3, [r3, #4]
 8004160:	68fa      	ldr	r2, [r7, #12]
 8004162:	4313      	orrs	r3, r2
 8004164:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	4a1c      	ldr	r2, [pc, #112]	; (80041dc <TIM_Base_SetConfig+0xb8>)
 800416a:	4293      	cmp	r3, r2
 800416c:	d00b      	beq.n	8004186 <TIM_Base_SetConfig+0x62>
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004174:	d007      	beq.n	8004186 <TIM_Base_SetConfig+0x62>
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	4a19      	ldr	r2, [pc, #100]	; (80041e0 <TIM_Base_SetConfig+0xbc>)
 800417a:	4293      	cmp	r3, r2
 800417c:	d003      	beq.n	8004186 <TIM_Base_SetConfig+0x62>
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	4a18      	ldr	r2, [pc, #96]	; (80041e4 <TIM_Base_SetConfig+0xc0>)
 8004182:	4293      	cmp	r3, r2
 8004184:	d108      	bne.n	8004198 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800418c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	68db      	ldr	r3, [r3, #12]
 8004192:	68fa      	ldr	r2, [r7, #12]
 8004194:	4313      	orrs	r3, r2
 8004196:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800419e:	683b      	ldr	r3, [r7, #0]
 80041a0:	695b      	ldr	r3, [r3, #20]
 80041a2:	4313      	orrs	r3, r2
 80041a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	68fa      	ldr	r2, [r7, #12]
 80041aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	689a      	ldr	r2, [r3, #8]
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80041b4:	683b      	ldr	r3, [r7, #0]
 80041b6:	681a      	ldr	r2, [r3, #0]
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	4a07      	ldr	r2, [pc, #28]	; (80041dc <TIM_Base_SetConfig+0xb8>)
 80041c0:	4293      	cmp	r3, r2
 80041c2:	d103      	bne.n	80041cc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80041c4:	683b      	ldr	r3, [r7, #0]
 80041c6:	691a      	ldr	r2, [r3, #16]
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2201      	movs	r2, #1
 80041d0:	615a      	str	r2, [r3, #20]
}
 80041d2:	bf00      	nop
 80041d4:	3714      	adds	r7, #20
 80041d6:	46bd      	mov	sp, r7
 80041d8:	bc80      	pop	{r7}
 80041da:	4770      	bx	lr
 80041dc:	40012c00 	.word	0x40012c00
 80041e0:	40000400 	.word	0x40000400
 80041e4:	40000800 	.word	0x40000800

080041e8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80041e8:	b480      	push	{r7}
 80041ea:	b087      	sub	sp, #28
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
 80041f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6a1b      	ldr	r3, [r3, #32]
 80041f6:	f023 0201 	bic.w	r2, r3, #1
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6a1b      	ldr	r3, [r3, #32]
 8004202:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	685b      	ldr	r3, [r3, #4]
 8004208:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	699b      	ldr	r3, [r3, #24]
 800420e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004216:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	f023 0303 	bic.w	r3, r3, #3
 800421e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	68fa      	ldr	r2, [r7, #12]
 8004226:	4313      	orrs	r3, r2
 8004228:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800422a:	697b      	ldr	r3, [r7, #20]
 800422c:	f023 0302 	bic.w	r3, r3, #2
 8004230:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004232:	683b      	ldr	r3, [r7, #0]
 8004234:	689b      	ldr	r3, [r3, #8]
 8004236:	697a      	ldr	r2, [r7, #20]
 8004238:	4313      	orrs	r3, r2
 800423a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	4a1c      	ldr	r2, [pc, #112]	; (80042b0 <TIM_OC1_SetConfig+0xc8>)
 8004240:	4293      	cmp	r3, r2
 8004242:	d10c      	bne.n	800425e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004244:	697b      	ldr	r3, [r7, #20]
 8004246:	f023 0308 	bic.w	r3, r3, #8
 800424a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	68db      	ldr	r3, [r3, #12]
 8004250:	697a      	ldr	r2, [r7, #20]
 8004252:	4313      	orrs	r3, r2
 8004254:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004256:	697b      	ldr	r3, [r7, #20]
 8004258:	f023 0304 	bic.w	r3, r3, #4
 800425c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	4a13      	ldr	r2, [pc, #76]	; (80042b0 <TIM_OC1_SetConfig+0xc8>)
 8004262:	4293      	cmp	r3, r2
 8004264:	d111      	bne.n	800428a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004266:	693b      	ldr	r3, [r7, #16]
 8004268:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800426c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800426e:	693b      	ldr	r3, [r7, #16]
 8004270:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004274:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004276:	683b      	ldr	r3, [r7, #0]
 8004278:	695b      	ldr	r3, [r3, #20]
 800427a:	693a      	ldr	r2, [r7, #16]
 800427c:	4313      	orrs	r3, r2
 800427e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	699b      	ldr	r3, [r3, #24]
 8004284:	693a      	ldr	r2, [r7, #16]
 8004286:	4313      	orrs	r3, r2
 8004288:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	693a      	ldr	r2, [r7, #16]
 800428e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	68fa      	ldr	r2, [r7, #12]
 8004294:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004296:	683b      	ldr	r3, [r7, #0]
 8004298:	685a      	ldr	r2, [r3, #4]
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	697a      	ldr	r2, [r7, #20]
 80042a2:	621a      	str	r2, [r3, #32]
}
 80042a4:	bf00      	nop
 80042a6:	371c      	adds	r7, #28
 80042a8:	46bd      	mov	sp, r7
 80042aa:	bc80      	pop	{r7}
 80042ac:	4770      	bx	lr
 80042ae:	bf00      	nop
 80042b0:	40012c00 	.word	0x40012c00

080042b4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80042b4:	b480      	push	{r7}
 80042b6:	b087      	sub	sp, #28
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
 80042bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6a1b      	ldr	r3, [r3, #32]
 80042c2:	f023 0210 	bic.w	r2, r3, #16
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6a1b      	ldr	r3, [r3, #32]
 80042ce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	685b      	ldr	r3, [r3, #4]
 80042d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	699b      	ldr	r3, [r3, #24]
 80042da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80042e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042ea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80042ec:	683b      	ldr	r3, [r7, #0]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	021b      	lsls	r3, r3, #8
 80042f2:	68fa      	ldr	r2, [r7, #12]
 80042f4:	4313      	orrs	r3, r2
 80042f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80042f8:	697b      	ldr	r3, [r7, #20]
 80042fa:	f023 0320 	bic.w	r3, r3, #32
 80042fe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	689b      	ldr	r3, [r3, #8]
 8004304:	011b      	lsls	r3, r3, #4
 8004306:	697a      	ldr	r2, [r7, #20]
 8004308:	4313      	orrs	r3, r2
 800430a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	4a1d      	ldr	r2, [pc, #116]	; (8004384 <TIM_OC2_SetConfig+0xd0>)
 8004310:	4293      	cmp	r3, r2
 8004312:	d10d      	bne.n	8004330 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004314:	697b      	ldr	r3, [r7, #20]
 8004316:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800431a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	68db      	ldr	r3, [r3, #12]
 8004320:	011b      	lsls	r3, r3, #4
 8004322:	697a      	ldr	r2, [r7, #20]
 8004324:	4313      	orrs	r3, r2
 8004326:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004328:	697b      	ldr	r3, [r7, #20]
 800432a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800432e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	4a14      	ldr	r2, [pc, #80]	; (8004384 <TIM_OC2_SetConfig+0xd0>)
 8004334:	4293      	cmp	r3, r2
 8004336:	d113      	bne.n	8004360 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004338:	693b      	ldr	r3, [r7, #16]
 800433a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800433e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004340:	693b      	ldr	r3, [r7, #16]
 8004342:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004346:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004348:	683b      	ldr	r3, [r7, #0]
 800434a:	695b      	ldr	r3, [r3, #20]
 800434c:	009b      	lsls	r3, r3, #2
 800434e:	693a      	ldr	r2, [r7, #16]
 8004350:	4313      	orrs	r3, r2
 8004352:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	699b      	ldr	r3, [r3, #24]
 8004358:	009b      	lsls	r3, r3, #2
 800435a:	693a      	ldr	r2, [r7, #16]
 800435c:	4313      	orrs	r3, r2
 800435e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	693a      	ldr	r2, [r7, #16]
 8004364:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	68fa      	ldr	r2, [r7, #12]
 800436a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800436c:	683b      	ldr	r3, [r7, #0]
 800436e:	685a      	ldr	r2, [r3, #4]
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	697a      	ldr	r2, [r7, #20]
 8004378:	621a      	str	r2, [r3, #32]
}
 800437a:	bf00      	nop
 800437c:	371c      	adds	r7, #28
 800437e:	46bd      	mov	sp, r7
 8004380:	bc80      	pop	{r7}
 8004382:	4770      	bx	lr
 8004384:	40012c00 	.word	0x40012c00

08004388 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004388:	b480      	push	{r7}
 800438a:	b087      	sub	sp, #28
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
 8004390:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6a1b      	ldr	r3, [r3, #32]
 8004396:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6a1b      	ldr	r3, [r3, #32]
 80043a2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	685b      	ldr	r3, [r3, #4]
 80043a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	69db      	ldr	r3, [r3, #28]
 80043ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	f023 0303 	bic.w	r3, r3, #3
 80043be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	68fa      	ldr	r2, [r7, #12]
 80043c6:	4313      	orrs	r3, r2
 80043c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80043ca:	697b      	ldr	r3, [r7, #20]
 80043cc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80043d0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	689b      	ldr	r3, [r3, #8]
 80043d6:	021b      	lsls	r3, r3, #8
 80043d8:	697a      	ldr	r2, [r7, #20]
 80043da:	4313      	orrs	r3, r2
 80043dc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	4a1d      	ldr	r2, [pc, #116]	; (8004458 <TIM_OC3_SetConfig+0xd0>)
 80043e2:	4293      	cmp	r3, r2
 80043e4:	d10d      	bne.n	8004402 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80043e6:	697b      	ldr	r3, [r7, #20]
 80043e8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80043ec:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80043ee:	683b      	ldr	r3, [r7, #0]
 80043f0:	68db      	ldr	r3, [r3, #12]
 80043f2:	021b      	lsls	r3, r3, #8
 80043f4:	697a      	ldr	r2, [r7, #20]
 80043f6:	4313      	orrs	r3, r2
 80043f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80043fa:	697b      	ldr	r3, [r7, #20]
 80043fc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004400:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	4a14      	ldr	r2, [pc, #80]	; (8004458 <TIM_OC3_SetConfig+0xd0>)
 8004406:	4293      	cmp	r3, r2
 8004408:	d113      	bne.n	8004432 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800440a:	693b      	ldr	r3, [r7, #16]
 800440c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004410:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004412:	693b      	ldr	r3, [r7, #16]
 8004414:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004418:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800441a:	683b      	ldr	r3, [r7, #0]
 800441c:	695b      	ldr	r3, [r3, #20]
 800441e:	011b      	lsls	r3, r3, #4
 8004420:	693a      	ldr	r2, [r7, #16]
 8004422:	4313      	orrs	r3, r2
 8004424:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004426:	683b      	ldr	r3, [r7, #0]
 8004428:	699b      	ldr	r3, [r3, #24]
 800442a:	011b      	lsls	r3, r3, #4
 800442c:	693a      	ldr	r2, [r7, #16]
 800442e:	4313      	orrs	r3, r2
 8004430:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	693a      	ldr	r2, [r7, #16]
 8004436:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	68fa      	ldr	r2, [r7, #12]
 800443c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800443e:	683b      	ldr	r3, [r7, #0]
 8004440:	685a      	ldr	r2, [r3, #4]
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	697a      	ldr	r2, [r7, #20]
 800444a:	621a      	str	r2, [r3, #32]
}
 800444c:	bf00      	nop
 800444e:	371c      	adds	r7, #28
 8004450:	46bd      	mov	sp, r7
 8004452:	bc80      	pop	{r7}
 8004454:	4770      	bx	lr
 8004456:	bf00      	nop
 8004458:	40012c00 	.word	0x40012c00

0800445c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800445c:	b480      	push	{r7}
 800445e:	b087      	sub	sp, #28
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
 8004464:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6a1b      	ldr	r3, [r3, #32]
 800446a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6a1b      	ldr	r3, [r3, #32]
 8004476:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	685b      	ldr	r3, [r3, #4]
 800447c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	69db      	ldr	r3, [r3, #28]
 8004482:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800448a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004492:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	021b      	lsls	r3, r3, #8
 800449a:	68fa      	ldr	r2, [r7, #12]
 800449c:	4313      	orrs	r3, r2
 800449e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80044a0:	693b      	ldr	r3, [r7, #16]
 80044a2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80044a6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80044a8:	683b      	ldr	r3, [r7, #0]
 80044aa:	689b      	ldr	r3, [r3, #8]
 80044ac:	031b      	lsls	r3, r3, #12
 80044ae:	693a      	ldr	r2, [r7, #16]
 80044b0:	4313      	orrs	r3, r2
 80044b2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	4a0f      	ldr	r2, [pc, #60]	; (80044f4 <TIM_OC4_SetConfig+0x98>)
 80044b8:	4293      	cmp	r3, r2
 80044ba:	d109      	bne.n	80044d0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80044bc:	697b      	ldr	r3, [r7, #20]
 80044be:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80044c2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80044c4:	683b      	ldr	r3, [r7, #0]
 80044c6:	695b      	ldr	r3, [r3, #20]
 80044c8:	019b      	lsls	r3, r3, #6
 80044ca:	697a      	ldr	r2, [r7, #20]
 80044cc:	4313      	orrs	r3, r2
 80044ce:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	697a      	ldr	r2, [r7, #20]
 80044d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	68fa      	ldr	r2, [r7, #12]
 80044da:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80044dc:	683b      	ldr	r3, [r7, #0]
 80044de:	685a      	ldr	r2, [r3, #4]
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	693a      	ldr	r2, [r7, #16]
 80044e8:	621a      	str	r2, [r3, #32]
}
 80044ea:	bf00      	nop
 80044ec:	371c      	adds	r7, #28
 80044ee:	46bd      	mov	sp, r7
 80044f0:	bc80      	pop	{r7}
 80044f2:	4770      	bx	lr
 80044f4:	40012c00 	.word	0x40012c00

080044f8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80044f8:	b480      	push	{r7}
 80044fa:	b087      	sub	sp, #28
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	60f8      	str	r0, [r7, #12]
 8004500:	60b9      	str	r1, [r7, #8]
 8004502:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004504:	68bb      	ldr	r3, [r7, #8]
 8004506:	f003 031f 	and.w	r3, r3, #31
 800450a:	2201      	movs	r2, #1
 800450c:	fa02 f303 	lsl.w	r3, r2, r3
 8004510:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	6a1a      	ldr	r2, [r3, #32]
 8004516:	697b      	ldr	r3, [r7, #20]
 8004518:	43db      	mvns	r3, r3
 800451a:	401a      	ands	r2, r3
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	6a1a      	ldr	r2, [r3, #32]
 8004524:	68bb      	ldr	r3, [r7, #8]
 8004526:	f003 031f 	and.w	r3, r3, #31
 800452a:	6879      	ldr	r1, [r7, #4]
 800452c:	fa01 f303 	lsl.w	r3, r1, r3
 8004530:	431a      	orrs	r2, r3
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	621a      	str	r2, [r3, #32]
}
 8004536:	bf00      	nop
 8004538:	371c      	adds	r7, #28
 800453a:	46bd      	mov	sp, r7
 800453c:	bc80      	pop	{r7}
 800453e:	4770      	bx	lr

08004540 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004540:	b480      	push	{r7}
 8004542:	b085      	sub	sp, #20
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]
 8004548:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004550:	2b01      	cmp	r3, #1
 8004552:	d101      	bne.n	8004558 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004554:	2302      	movs	r3, #2
 8004556:	e046      	b.n	80045e6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2201      	movs	r2, #1
 800455c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2202      	movs	r2, #2
 8004564:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	685b      	ldr	r3, [r3, #4]
 800456e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	689b      	ldr	r3, [r3, #8]
 8004576:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800457e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	68fa      	ldr	r2, [r7, #12]
 8004586:	4313      	orrs	r3, r2
 8004588:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	68fa      	ldr	r2, [r7, #12]
 8004590:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	4a16      	ldr	r2, [pc, #88]	; (80045f0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004598:	4293      	cmp	r3, r2
 800459a:	d00e      	beq.n	80045ba <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045a4:	d009      	beq.n	80045ba <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	4a12      	ldr	r2, [pc, #72]	; (80045f4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80045ac:	4293      	cmp	r3, r2
 80045ae:	d004      	beq.n	80045ba <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	4a10      	ldr	r2, [pc, #64]	; (80045f8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80045b6:	4293      	cmp	r3, r2
 80045b8:	d10c      	bne.n	80045d4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80045ba:	68bb      	ldr	r3, [r7, #8]
 80045bc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80045c0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80045c2:	683b      	ldr	r3, [r7, #0]
 80045c4:	685b      	ldr	r3, [r3, #4]
 80045c6:	68ba      	ldr	r2, [r7, #8]
 80045c8:	4313      	orrs	r3, r2
 80045ca:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	68ba      	ldr	r2, [r7, #8]
 80045d2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2201      	movs	r2, #1
 80045d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2200      	movs	r2, #0
 80045e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80045e4:	2300      	movs	r3, #0
}
 80045e6:	4618      	mov	r0, r3
 80045e8:	3714      	adds	r7, #20
 80045ea:	46bd      	mov	sp, r7
 80045ec:	bc80      	pop	{r7}
 80045ee:	4770      	bx	lr
 80045f0:	40012c00 	.word	0x40012c00
 80045f4:	40000400 	.word	0x40000400
 80045f8:	40000800 	.word	0x40000800

080045fc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80045fc:	b480      	push	{r7}
 80045fe:	b085      	sub	sp, #20
 8004600:	af00      	add	r7, sp, #0
 8004602:	6078      	str	r0, [r7, #4]
 8004604:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004606:	2300      	movs	r3, #0
 8004608:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004610:	2b01      	cmp	r3, #1
 8004612:	d101      	bne.n	8004618 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004614:	2302      	movs	r3, #2
 8004616:	e03d      	b.n	8004694 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2201      	movs	r2, #1
 800461c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004626:	683b      	ldr	r3, [r7, #0]
 8004628:	68db      	ldr	r3, [r3, #12]
 800462a:	4313      	orrs	r3, r2
 800462c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004634:	683b      	ldr	r3, [r7, #0]
 8004636:	689b      	ldr	r3, [r3, #8]
 8004638:	4313      	orrs	r3, r2
 800463a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004642:	683b      	ldr	r3, [r7, #0]
 8004644:	685b      	ldr	r3, [r3, #4]
 8004646:	4313      	orrs	r3, r2
 8004648:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004650:	683b      	ldr	r3, [r7, #0]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	4313      	orrs	r3, r2
 8004656:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	691b      	ldr	r3, [r3, #16]
 8004662:	4313      	orrs	r3, r2
 8004664:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	695b      	ldr	r3, [r3, #20]
 8004670:	4313      	orrs	r3, r2
 8004672:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800467a:	683b      	ldr	r3, [r7, #0]
 800467c:	69db      	ldr	r3, [r3, #28]
 800467e:	4313      	orrs	r3, r2
 8004680:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	68fa      	ldr	r2, [r7, #12]
 8004688:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	2200      	movs	r2, #0
 800468e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004692:	2300      	movs	r3, #0
}
 8004694:	4618      	mov	r0, r3
 8004696:	3714      	adds	r7, #20
 8004698:	46bd      	mov	sp, r7
 800469a:	bc80      	pop	{r7}
 800469c:	4770      	bx	lr

0800469e <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800469e:	b084      	sub	sp, #16
 80046a0:	b480      	push	{r7}
 80046a2:	b083      	sub	sp, #12
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]
 80046a8:	f107 0014 	add.w	r0, r7, #20
 80046ac:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80046b0:	2300      	movs	r3, #0
}
 80046b2:	4618      	mov	r0, r3
 80046b4:	370c      	adds	r7, #12
 80046b6:	46bd      	mov	sp, r7
 80046b8:	bc80      	pop	{r7}
 80046ba:	b004      	add	sp, #16
 80046bc:	4770      	bx	lr

080046be <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80046be:	b480      	push	{r7}
 80046c0:	b085      	sub	sp, #20
 80046c2:	af00      	add	r7, sp, #0
 80046c4:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80046c6:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80046ca:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80046d2:	b29a      	uxth	r2, r3
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	b29b      	uxth	r3, r3
 80046d8:	43db      	mvns	r3, r3
 80046da:	b29b      	uxth	r3, r3
 80046dc:	4013      	ands	r3, r2
 80046de:	b29a      	uxth	r2, r3
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80046e6:	2300      	movs	r3, #0
}
 80046e8:	4618      	mov	r0, r3
 80046ea:	3714      	adds	r7, #20
 80046ec:	46bd      	mov	sp, r7
 80046ee:	bc80      	pop	{r7}
 80046f0:	4770      	bx	lr

080046f2 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 80046f2:	b480      	push	{r7}
 80046f4:	b083      	sub	sp, #12
 80046f6:	af00      	add	r7, sp, #0
 80046f8:	6078      	str	r0, [r7, #4]
 80046fa:	460b      	mov	r3, r1
 80046fc:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80046fe:	2300      	movs	r3, #0
}
 8004700:	4618      	mov	r0, r3
 8004702:	370c      	adds	r7, #12
 8004704:	46bd      	mov	sp, r7
 8004706:	bc80      	pop	{r7}
 8004708:	4770      	bx	lr

0800470a <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800470a:	b084      	sub	sp, #16
 800470c:	b480      	push	{r7}
 800470e:	b083      	sub	sp, #12
 8004710:	af00      	add	r7, sp, #0
 8004712:	6078      	str	r0, [r7, #4]
 8004714:	f107 0014 	add.w	r0, r7, #20
 8004718:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2201      	movs	r2, #1
 8004720:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2200      	movs	r2, #0
 8004728:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2200      	movs	r2, #0
 8004730:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2200      	movs	r2, #0
 8004738:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800473c:	2300      	movs	r3, #0
}
 800473e:	4618      	mov	r0, r3
 8004740:	370c      	adds	r7, #12
 8004742:	46bd      	mov	sp, r7
 8004744:	bc80      	pop	{r7}
 8004746:	b004      	add	sp, #16
 8004748:	4770      	bx	lr

0800474a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 800474a:	b480      	push	{r7}
 800474c:	b083      	sub	sp, #12
 800474e:	af00      	add	r7, sp, #0
 8004750:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8004752:	2300      	movs	r3, #0
}
 8004754:	4618      	mov	r0, r3
 8004756:	370c      	adds	r7, #12
 8004758:	46bd      	mov	sp, r7
 800475a:	bc80      	pop	{r7}
 800475c:	4770      	bx	lr
	...

08004760 <__errno>:
 8004760:	4b01      	ldr	r3, [pc, #4]	; (8004768 <__errno+0x8>)
 8004762:	6818      	ldr	r0, [r3, #0]
 8004764:	4770      	bx	lr
 8004766:	bf00      	nop
 8004768:	20000014 	.word	0x20000014

0800476c <__libc_init_array>:
 800476c:	b570      	push	{r4, r5, r6, lr}
 800476e:	2600      	movs	r6, #0
 8004770:	4d0c      	ldr	r5, [pc, #48]	; (80047a4 <__libc_init_array+0x38>)
 8004772:	4c0d      	ldr	r4, [pc, #52]	; (80047a8 <__libc_init_array+0x3c>)
 8004774:	1b64      	subs	r4, r4, r5
 8004776:	10a4      	asrs	r4, r4, #2
 8004778:	42a6      	cmp	r6, r4
 800477a:	d109      	bne.n	8004790 <__libc_init_array+0x24>
 800477c:	f003 fd42 	bl	8008204 <_init>
 8004780:	2600      	movs	r6, #0
 8004782:	4d0a      	ldr	r5, [pc, #40]	; (80047ac <__libc_init_array+0x40>)
 8004784:	4c0a      	ldr	r4, [pc, #40]	; (80047b0 <__libc_init_array+0x44>)
 8004786:	1b64      	subs	r4, r4, r5
 8004788:	10a4      	asrs	r4, r4, #2
 800478a:	42a6      	cmp	r6, r4
 800478c:	d105      	bne.n	800479a <__libc_init_array+0x2e>
 800478e:	bd70      	pop	{r4, r5, r6, pc}
 8004790:	f855 3b04 	ldr.w	r3, [r5], #4
 8004794:	4798      	blx	r3
 8004796:	3601      	adds	r6, #1
 8004798:	e7ee      	b.n	8004778 <__libc_init_array+0xc>
 800479a:	f855 3b04 	ldr.w	r3, [r5], #4
 800479e:	4798      	blx	r3
 80047a0:	3601      	adds	r6, #1
 80047a2:	e7f2      	b.n	800478a <__libc_init_array+0x1e>
 80047a4:	08008d58 	.word	0x08008d58
 80047a8:	08008d58 	.word	0x08008d58
 80047ac:	08008d58 	.word	0x08008d58
 80047b0:	08008d5c 	.word	0x08008d5c

080047b4 <memset>:
 80047b4:	4603      	mov	r3, r0
 80047b6:	4402      	add	r2, r0
 80047b8:	4293      	cmp	r3, r2
 80047ba:	d100      	bne.n	80047be <memset+0xa>
 80047bc:	4770      	bx	lr
 80047be:	f803 1b01 	strb.w	r1, [r3], #1
 80047c2:	e7f9      	b.n	80047b8 <memset+0x4>

080047c4 <__cvt>:
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80047ca:	461f      	mov	r7, r3
 80047cc:	bfbb      	ittet	lt
 80047ce:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 80047d2:	461f      	movlt	r7, r3
 80047d4:	2300      	movge	r3, #0
 80047d6:	232d      	movlt	r3, #45	; 0x2d
 80047d8:	b088      	sub	sp, #32
 80047da:	4614      	mov	r4, r2
 80047dc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80047de:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80047e0:	7013      	strb	r3, [r2, #0]
 80047e2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80047e4:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 80047e8:	f023 0820 	bic.w	r8, r3, #32
 80047ec:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80047f0:	d005      	beq.n	80047fe <__cvt+0x3a>
 80047f2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80047f6:	d100      	bne.n	80047fa <__cvt+0x36>
 80047f8:	3501      	adds	r5, #1
 80047fa:	2302      	movs	r3, #2
 80047fc:	e000      	b.n	8004800 <__cvt+0x3c>
 80047fe:	2303      	movs	r3, #3
 8004800:	aa07      	add	r2, sp, #28
 8004802:	9204      	str	r2, [sp, #16]
 8004804:	aa06      	add	r2, sp, #24
 8004806:	e9cd a202 	strd	sl, r2, [sp, #8]
 800480a:	e9cd 3500 	strd	r3, r5, [sp]
 800480e:	4622      	mov	r2, r4
 8004810:	463b      	mov	r3, r7
 8004812:	f000 fcdd 	bl	80051d0 <_dtoa_r>
 8004816:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800481a:	4606      	mov	r6, r0
 800481c:	d102      	bne.n	8004824 <__cvt+0x60>
 800481e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004820:	07db      	lsls	r3, r3, #31
 8004822:	d522      	bpl.n	800486a <__cvt+0xa6>
 8004824:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004828:	eb06 0905 	add.w	r9, r6, r5
 800482c:	d110      	bne.n	8004850 <__cvt+0x8c>
 800482e:	7833      	ldrb	r3, [r6, #0]
 8004830:	2b30      	cmp	r3, #48	; 0x30
 8004832:	d10a      	bne.n	800484a <__cvt+0x86>
 8004834:	2200      	movs	r2, #0
 8004836:	2300      	movs	r3, #0
 8004838:	4620      	mov	r0, r4
 800483a:	4639      	mov	r1, r7
 800483c:	f7fc f8b4 	bl	80009a8 <__aeabi_dcmpeq>
 8004840:	b918      	cbnz	r0, 800484a <__cvt+0x86>
 8004842:	f1c5 0501 	rsb	r5, r5, #1
 8004846:	f8ca 5000 	str.w	r5, [sl]
 800484a:	f8da 3000 	ldr.w	r3, [sl]
 800484e:	4499      	add	r9, r3
 8004850:	2200      	movs	r2, #0
 8004852:	2300      	movs	r3, #0
 8004854:	4620      	mov	r0, r4
 8004856:	4639      	mov	r1, r7
 8004858:	f7fc f8a6 	bl	80009a8 <__aeabi_dcmpeq>
 800485c:	b108      	cbz	r0, 8004862 <__cvt+0x9e>
 800485e:	f8cd 901c 	str.w	r9, [sp, #28]
 8004862:	2230      	movs	r2, #48	; 0x30
 8004864:	9b07      	ldr	r3, [sp, #28]
 8004866:	454b      	cmp	r3, r9
 8004868:	d307      	bcc.n	800487a <__cvt+0xb6>
 800486a:	4630      	mov	r0, r6
 800486c:	9b07      	ldr	r3, [sp, #28]
 800486e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8004870:	1b9b      	subs	r3, r3, r6
 8004872:	6013      	str	r3, [r2, #0]
 8004874:	b008      	add	sp, #32
 8004876:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800487a:	1c59      	adds	r1, r3, #1
 800487c:	9107      	str	r1, [sp, #28]
 800487e:	701a      	strb	r2, [r3, #0]
 8004880:	e7f0      	b.n	8004864 <__cvt+0xa0>

08004882 <__exponent>:
 8004882:	4603      	mov	r3, r0
 8004884:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004886:	2900      	cmp	r1, #0
 8004888:	f803 2b02 	strb.w	r2, [r3], #2
 800488c:	bfb6      	itet	lt
 800488e:	222d      	movlt	r2, #45	; 0x2d
 8004890:	222b      	movge	r2, #43	; 0x2b
 8004892:	4249      	neglt	r1, r1
 8004894:	2909      	cmp	r1, #9
 8004896:	7042      	strb	r2, [r0, #1]
 8004898:	dd2b      	ble.n	80048f2 <__exponent+0x70>
 800489a:	f10d 0407 	add.w	r4, sp, #7
 800489e:	46a4      	mov	ip, r4
 80048a0:	270a      	movs	r7, #10
 80048a2:	fb91 f6f7 	sdiv	r6, r1, r7
 80048a6:	460a      	mov	r2, r1
 80048a8:	46a6      	mov	lr, r4
 80048aa:	fb07 1516 	mls	r5, r7, r6, r1
 80048ae:	2a63      	cmp	r2, #99	; 0x63
 80048b0:	f105 0530 	add.w	r5, r5, #48	; 0x30
 80048b4:	4631      	mov	r1, r6
 80048b6:	f104 34ff 	add.w	r4, r4, #4294967295
 80048ba:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80048be:	dcf0      	bgt.n	80048a2 <__exponent+0x20>
 80048c0:	3130      	adds	r1, #48	; 0x30
 80048c2:	f1ae 0502 	sub.w	r5, lr, #2
 80048c6:	f804 1c01 	strb.w	r1, [r4, #-1]
 80048ca:	4629      	mov	r1, r5
 80048cc:	1c44      	adds	r4, r0, #1
 80048ce:	4561      	cmp	r1, ip
 80048d0:	d30a      	bcc.n	80048e8 <__exponent+0x66>
 80048d2:	f10d 0209 	add.w	r2, sp, #9
 80048d6:	eba2 020e 	sub.w	r2, r2, lr
 80048da:	4565      	cmp	r5, ip
 80048dc:	bf88      	it	hi
 80048de:	2200      	movhi	r2, #0
 80048e0:	4413      	add	r3, r2
 80048e2:	1a18      	subs	r0, r3, r0
 80048e4:	b003      	add	sp, #12
 80048e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80048e8:	f811 2b01 	ldrb.w	r2, [r1], #1
 80048ec:	f804 2f01 	strb.w	r2, [r4, #1]!
 80048f0:	e7ed      	b.n	80048ce <__exponent+0x4c>
 80048f2:	2330      	movs	r3, #48	; 0x30
 80048f4:	3130      	adds	r1, #48	; 0x30
 80048f6:	7083      	strb	r3, [r0, #2]
 80048f8:	70c1      	strb	r1, [r0, #3]
 80048fa:	1d03      	adds	r3, r0, #4
 80048fc:	e7f1      	b.n	80048e2 <__exponent+0x60>
	...

08004900 <_printf_float>:
 8004900:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004904:	b091      	sub	sp, #68	; 0x44
 8004906:	460c      	mov	r4, r1
 8004908:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 800490c:	4616      	mov	r6, r2
 800490e:	461f      	mov	r7, r3
 8004910:	4605      	mov	r5, r0
 8004912:	f001 fb41 	bl	8005f98 <_localeconv_r>
 8004916:	6803      	ldr	r3, [r0, #0]
 8004918:	4618      	mov	r0, r3
 800491a:	9309      	str	r3, [sp, #36]	; 0x24
 800491c:	f7fb fc18 	bl	8000150 <strlen>
 8004920:	2300      	movs	r3, #0
 8004922:	930e      	str	r3, [sp, #56]	; 0x38
 8004924:	f8d8 3000 	ldr.w	r3, [r8]
 8004928:	900a      	str	r0, [sp, #40]	; 0x28
 800492a:	3307      	adds	r3, #7
 800492c:	f023 0307 	bic.w	r3, r3, #7
 8004930:	f103 0208 	add.w	r2, r3, #8
 8004934:	f894 9018 	ldrb.w	r9, [r4, #24]
 8004938:	f8d4 b000 	ldr.w	fp, [r4]
 800493c:	f8c8 2000 	str.w	r2, [r8]
 8004940:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004944:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004948:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 800494c:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8004950:	930b      	str	r3, [sp, #44]	; 0x2c
 8004952:	f04f 32ff 	mov.w	r2, #4294967295
 8004956:	4640      	mov	r0, r8
 8004958:	4b9c      	ldr	r3, [pc, #624]	; (8004bcc <_printf_float+0x2cc>)
 800495a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800495c:	f7fc f856 	bl	8000a0c <__aeabi_dcmpun>
 8004960:	bb70      	cbnz	r0, 80049c0 <_printf_float+0xc0>
 8004962:	f04f 32ff 	mov.w	r2, #4294967295
 8004966:	4640      	mov	r0, r8
 8004968:	4b98      	ldr	r3, [pc, #608]	; (8004bcc <_printf_float+0x2cc>)
 800496a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800496c:	f7fc f830 	bl	80009d0 <__aeabi_dcmple>
 8004970:	bb30      	cbnz	r0, 80049c0 <_printf_float+0xc0>
 8004972:	2200      	movs	r2, #0
 8004974:	2300      	movs	r3, #0
 8004976:	4640      	mov	r0, r8
 8004978:	4651      	mov	r1, sl
 800497a:	f7fc f81f 	bl	80009bc <__aeabi_dcmplt>
 800497e:	b110      	cbz	r0, 8004986 <_printf_float+0x86>
 8004980:	232d      	movs	r3, #45	; 0x2d
 8004982:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004986:	4b92      	ldr	r3, [pc, #584]	; (8004bd0 <_printf_float+0x2d0>)
 8004988:	4892      	ldr	r0, [pc, #584]	; (8004bd4 <_printf_float+0x2d4>)
 800498a:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800498e:	bf94      	ite	ls
 8004990:	4698      	movls	r8, r3
 8004992:	4680      	movhi	r8, r0
 8004994:	2303      	movs	r3, #3
 8004996:	f04f 0a00 	mov.w	sl, #0
 800499a:	6123      	str	r3, [r4, #16]
 800499c:	f02b 0304 	bic.w	r3, fp, #4
 80049a0:	6023      	str	r3, [r4, #0]
 80049a2:	4633      	mov	r3, r6
 80049a4:	4621      	mov	r1, r4
 80049a6:	4628      	mov	r0, r5
 80049a8:	9700      	str	r7, [sp, #0]
 80049aa:	aa0f      	add	r2, sp, #60	; 0x3c
 80049ac:	f000 f9d4 	bl	8004d58 <_printf_common>
 80049b0:	3001      	adds	r0, #1
 80049b2:	f040 8090 	bne.w	8004ad6 <_printf_float+0x1d6>
 80049b6:	f04f 30ff 	mov.w	r0, #4294967295
 80049ba:	b011      	add	sp, #68	; 0x44
 80049bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80049c0:	4642      	mov	r2, r8
 80049c2:	4653      	mov	r3, sl
 80049c4:	4640      	mov	r0, r8
 80049c6:	4651      	mov	r1, sl
 80049c8:	f7fc f820 	bl	8000a0c <__aeabi_dcmpun>
 80049cc:	b148      	cbz	r0, 80049e2 <_printf_float+0xe2>
 80049ce:	f1ba 0f00 	cmp.w	sl, #0
 80049d2:	bfb8      	it	lt
 80049d4:	232d      	movlt	r3, #45	; 0x2d
 80049d6:	4880      	ldr	r0, [pc, #512]	; (8004bd8 <_printf_float+0x2d8>)
 80049d8:	bfb8      	it	lt
 80049da:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80049de:	4b7f      	ldr	r3, [pc, #508]	; (8004bdc <_printf_float+0x2dc>)
 80049e0:	e7d3      	b.n	800498a <_printf_float+0x8a>
 80049e2:	6863      	ldr	r3, [r4, #4]
 80049e4:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80049e8:	1c5a      	adds	r2, r3, #1
 80049ea:	d142      	bne.n	8004a72 <_printf_float+0x172>
 80049ec:	2306      	movs	r3, #6
 80049ee:	6063      	str	r3, [r4, #4]
 80049f0:	2200      	movs	r2, #0
 80049f2:	9206      	str	r2, [sp, #24]
 80049f4:	aa0e      	add	r2, sp, #56	; 0x38
 80049f6:	e9cd 9204 	strd	r9, r2, [sp, #16]
 80049fa:	aa0d      	add	r2, sp, #52	; 0x34
 80049fc:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8004a00:	9203      	str	r2, [sp, #12]
 8004a02:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8004a06:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8004a0a:	6023      	str	r3, [r4, #0]
 8004a0c:	6863      	ldr	r3, [r4, #4]
 8004a0e:	4642      	mov	r2, r8
 8004a10:	9300      	str	r3, [sp, #0]
 8004a12:	4628      	mov	r0, r5
 8004a14:	4653      	mov	r3, sl
 8004a16:	910b      	str	r1, [sp, #44]	; 0x2c
 8004a18:	f7ff fed4 	bl	80047c4 <__cvt>
 8004a1c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004a1e:	4680      	mov	r8, r0
 8004a20:	2947      	cmp	r1, #71	; 0x47
 8004a22:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004a24:	d108      	bne.n	8004a38 <_printf_float+0x138>
 8004a26:	1cc8      	adds	r0, r1, #3
 8004a28:	db02      	blt.n	8004a30 <_printf_float+0x130>
 8004a2a:	6863      	ldr	r3, [r4, #4]
 8004a2c:	4299      	cmp	r1, r3
 8004a2e:	dd40      	ble.n	8004ab2 <_printf_float+0x1b2>
 8004a30:	f1a9 0902 	sub.w	r9, r9, #2
 8004a34:	fa5f f989 	uxtb.w	r9, r9
 8004a38:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004a3c:	d81f      	bhi.n	8004a7e <_printf_float+0x17e>
 8004a3e:	464a      	mov	r2, r9
 8004a40:	3901      	subs	r1, #1
 8004a42:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004a46:	910d      	str	r1, [sp, #52]	; 0x34
 8004a48:	f7ff ff1b 	bl	8004882 <__exponent>
 8004a4c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004a4e:	4682      	mov	sl, r0
 8004a50:	1813      	adds	r3, r2, r0
 8004a52:	2a01      	cmp	r2, #1
 8004a54:	6123      	str	r3, [r4, #16]
 8004a56:	dc02      	bgt.n	8004a5e <_printf_float+0x15e>
 8004a58:	6822      	ldr	r2, [r4, #0]
 8004a5a:	07d2      	lsls	r2, r2, #31
 8004a5c:	d501      	bpl.n	8004a62 <_printf_float+0x162>
 8004a5e:	3301      	adds	r3, #1
 8004a60:	6123      	str	r3, [r4, #16]
 8004a62:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d09b      	beq.n	80049a2 <_printf_float+0xa2>
 8004a6a:	232d      	movs	r3, #45	; 0x2d
 8004a6c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004a70:	e797      	b.n	80049a2 <_printf_float+0xa2>
 8004a72:	2947      	cmp	r1, #71	; 0x47
 8004a74:	d1bc      	bne.n	80049f0 <_printf_float+0xf0>
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d1ba      	bne.n	80049f0 <_printf_float+0xf0>
 8004a7a:	2301      	movs	r3, #1
 8004a7c:	e7b7      	b.n	80049ee <_printf_float+0xee>
 8004a7e:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8004a82:	d118      	bne.n	8004ab6 <_printf_float+0x1b6>
 8004a84:	2900      	cmp	r1, #0
 8004a86:	6863      	ldr	r3, [r4, #4]
 8004a88:	dd0b      	ble.n	8004aa2 <_printf_float+0x1a2>
 8004a8a:	6121      	str	r1, [r4, #16]
 8004a8c:	b913      	cbnz	r3, 8004a94 <_printf_float+0x194>
 8004a8e:	6822      	ldr	r2, [r4, #0]
 8004a90:	07d0      	lsls	r0, r2, #31
 8004a92:	d502      	bpl.n	8004a9a <_printf_float+0x19a>
 8004a94:	3301      	adds	r3, #1
 8004a96:	440b      	add	r3, r1
 8004a98:	6123      	str	r3, [r4, #16]
 8004a9a:	f04f 0a00 	mov.w	sl, #0
 8004a9e:	65a1      	str	r1, [r4, #88]	; 0x58
 8004aa0:	e7df      	b.n	8004a62 <_printf_float+0x162>
 8004aa2:	b913      	cbnz	r3, 8004aaa <_printf_float+0x1aa>
 8004aa4:	6822      	ldr	r2, [r4, #0]
 8004aa6:	07d2      	lsls	r2, r2, #31
 8004aa8:	d501      	bpl.n	8004aae <_printf_float+0x1ae>
 8004aaa:	3302      	adds	r3, #2
 8004aac:	e7f4      	b.n	8004a98 <_printf_float+0x198>
 8004aae:	2301      	movs	r3, #1
 8004ab0:	e7f2      	b.n	8004a98 <_printf_float+0x198>
 8004ab2:	f04f 0967 	mov.w	r9, #103	; 0x67
 8004ab6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004ab8:	4299      	cmp	r1, r3
 8004aba:	db05      	blt.n	8004ac8 <_printf_float+0x1c8>
 8004abc:	6823      	ldr	r3, [r4, #0]
 8004abe:	6121      	str	r1, [r4, #16]
 8004ac0:	07d8      	lsls	r0, r3, #31
 8004ac2:	d5ea      	bpl.n	8004a9a <_printf_float+0x19a>
 8004ac4:	1c4b      	adds	r3, r1, #1
 8004ac6:	e7e7      	b.n	8004a98 <_printf_float+0x198>
 8004ac8:	2900      	cmp	r1, #0
 8004aca:	bfcc      	ite	gt
 8004acc:	2201      	movgt	r2, #1
 8004ace:	f1c1 0202 	rsble	r2, r1, #2
 8004ad2:	4413      	add	r3, r2
 8004ad4:	e7e0      	b.n	8004a98 <_printf_float+0x198>
 8004ad6:	6823      	ldr	r3, [r4, #0]
 8004ad8:	055a      	lsls	r2, r3, #21
 8004ada:	d407      	bmi.n	8004aec <_printf_float+0x1ec>
 8004adc:	6923      	ldr	r3, [r4, #16]
 8004ade:	4642      	mov	r2, r8
 8004ae0:	4631      	mov	r1, r6
 8004ae2:	4628      	mov	r0, r5
 8004ae4:	47b8      	blx	r7
 8004ae6:	3001      	adds	r0, #1
 8004ae8:	d12b      	bne.n	8004b42 <_printf_float+0x242>
 8004aea:	e764      	b.n	80049b6 <_printf_float+0xb6>
 8004aec:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004af0:	f240 80dd 	bls.w	8004cae <_printf_float+0x3ae>
 8004af4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004af8:	2200      	movs	r2, #0
 8004afa:	2300      	movs	r3, #0
 8004afc:	f7fb ff54 	bl	80009a8 <__aeabi_dcmpeq>
 8004b00:	2800      	cmp	r0, #0
 8004b02:	d033      	beq.n	8004b6c <_printf_float+0x26c>
 8004b04:	2301      	movs	r3, #1
 8004b06:	4631      	mov	r1, r6
 8004b08:	4628      	mov	r0, r5
 8004b0a:	4a35      	ldr	r2, [pc, #212]	; (8004be0 <_printf_float+0x2e0>)
 8004b0c:	47b8      	blx	r7
 8004b0e:	3001      	adds	r0, #1
 8004b10:	f43f af51 	beq.w	80049b6 <_printf_float+0xb6>
 8004b14:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004b18:	429a      	cmp	r2, r3
 8004b1a:	db02      	blt.n	8004b22 <_printf_float+0x222>
 8004b1c:	6823      	ldr	r3, [r4, #0]
 8004b1e:	07d8      	lsls	r0, r3, #31
 8004b20:	d50f      	bpl.n	8004b42 <_printf_float+0x242>
 8004b22:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004b26:	4631      	mov	r1, r6
 8004b28:	4628      	mov	r0, r5
 8004b2a:	47b8      	blx	r7
 8004b2c:	3001      	adds	r0, #1
 8004b2e:	f43f af42 	beq.w	80049b6 <_printf_float+0xb6>
 8004b32:	f04f 0800 	mov.w	r8, #0
 8004b36:	f104 091a 	add.w	r9, r4, #26
 8004b3a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004b3c:	3b01      	subs	r3, #1
 8004b3e:	4543      	cmp	r3, r8
 8004b40:	dc09      	bgt.n	8004b56 <_printf_float+0x256>
 8004b42:	6823      	ldr	r3, [r4, #0]
 8004b44:	079b      	lsls	r3, r3, #30
 8004b46:	f100 8102 	bmi.w	8004d4e <_printf_float+0x44e>
 8004b4a:	68e0      	ldr	r0, [r4, #12]
 8004b4c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004b4e:	4298      	cmp	r0, r3
 8004b50:	bfb8      	it	lt
 8004b52:	4618      	movlt	r0, r3
 8004b54:	e731      	b.n	80049ba <_printf_float+0xba>
 8004b56:	2301      	movs	r3, #1
 8004b58:	464a      	mov	r2, r9
 8004b5a:	4631      	mov	r1, r6
 8004b5c:	4628      	mov	r0, r5
 8004b5e:	47b8      	blx	r7
 8004b60:	3001      	adds	r0, #1
 8004b62:	f43f af28 	beq.w	80049b6 <_printf_float+0xb6>
 8004b66:	f108 0801 	add.w	r8, r8, #1
 8004b6a:	e7e6      	b.n	8004b3a <_printf_float+0x23a>
 8004b6c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	dc38      	bgt.n	8004be4 <_printf_float+0x2e4>
 8004b72:	2301      	movs	r3, #1
 8004b74:	4631      	mov	r1, r6
 8004b76:	4628      	mov	r0, r5
 8004b78:	4a19      	ldr	r2, [pc, #100]	; (8004be0 <_printf_float+0x2e0>)
 8004b7a:	47b8      	blx	r7
 8004b7c:	3001      	adds	r0, #1
 8004b7e:	f43f af1a 	beq.w	80049b6 <_printf_float+0xb6>
 8004b82:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004b86:	4313      	orrs	r3, r2
 8004b88:	d102      	bne.n	8004b90 <_printf_float+0x290>
 8004b8a:	6823      	ldr	r3, [r4, #0]
 8004b8c:	07d9      	lsls	r1, r3, #31
 8004b8e:	d5d8      	bpl.n	8004b42 <_printf_float+0x242>
 8004b90:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004b94:	4631      	mov	r1, r6
 8004b96:	4628      	mov	r0, r5
 8004b98:	47b8      	blx	r7
 8004b9a:	3001      	adds	r0, #1
 8004b9c:	f43f af0b 	beq.w	80049b6 <_printf_float+0xb6>
 8004ba0:	f04f 0900 	mov.w	r9, #0
 8004ba4:	f104 0a1a 	add.w	sl, r4, #26
 8004ba8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004baa:	425b      	negs	r3, r3
 8004bac:	454b      	cmp	r3, r9
 8004bae:	dc01      	bgt.n	8004bb4 <_printf_float+0x2b4>
 8004bb0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004bb2:	e794      	b.n	8004ade <_printf_float+0x1de>
 8004bb4:	2301      	movs	r3, #1
 8004bb6:	4652      	mov	r2, sl
 8004bb8:	4631      	mov	r1, r6
 8004bba:	4628      	mov	r0, r5
 8004bbc:	47b8      	blx	r7
 8004bbe:	3001      	adds	r0, #1
 8004bc0:	f43f aef9 	beq.w	80049b6 <_printf_float+0xb6>
 8004bc4:	f109 0901 	add.w	r9, r9, #1
 8004bc8:	e7ee      	b.n	8004ba8 <_printf_float+0x2a8>
 8004bca:	bf00      	nop
 8004bcc:	7fefffff 	.word	0x7fefffff
 8004bd0:	080087a4 	.word	0x080087a4
 8004bd4:	080087a8 	.word	0x080087a8
 8004bd8:	080087b0 	.word	0x080087b0
 8004bdc:	080087ac 	.word	0x080087ac
 8004be0:	080087b4 	.word	0x080087b4
 8004be4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004be6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004be8:	429a      	cmp	r2, r3
 8004bea:	bfa8      	it	ge
 8004bec:	461a      	movge	r2, r3
 8004bee:	2a00      	cmp	r2, #0
 8004bf0:	4691      	mov	r9, r2
 8004bf2:	dc37      	bgt.n	8004c64 <_printf_float+0x364>
 8004bf4:	f04f 0b00 	mov.w	fp, #0
 8004bf8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004bfc:	f104 021a 	add.w	r2, r4, #26
 8004c00:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8004c04:	ebaa 0309 	sub.w	r3, sl, r9
 8004c08:	455b      	cmp	r3, fp
 8004c0a:	dc33      	bgt.n	8004c74 <_printf_float+0x374>
 8004c0c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004c10:	429a      	cmp	r2, r3
 8004c12:	db3b      	blt.n	8004c8c <_printf_float+0x38c>
 8004c14:	6823      	ldr	r3, [r4, #0]
 8004c16:	07da      	lsls	r2, r3, #31
 8004c18:	d438      	bmi.n	8004c8c <_printf_float+0x38c>
 8004c1a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004c1c:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004c1e:	eba3 020a 	sub.w	r2, r3, sl
 8004c22:	eba3 0901 	sub.w	r9, r3, r1
 8004c26:	4591      	cmp	r9, r2
 8004c28:	bfa8      	it	ge
 8004c2a:	4691      	movge	r9, r2
 8004c2c:	f1b9 0f00 	cmp.w	r9, #0
 8004c30:	dc34      	bgt.n	8004c9c <_printf_float+0x39c>
 8004c32:	f04f 0800 	mov.w	r8, #0
 8004c36:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004c3a:	f104 0a1a 	add.w	sl, r4, #26
 8004c3e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004c42:	1a9b      	subs	r3, r3, r2
 8004c44:	eba3 0309 	sub.w	r3, r3, r9
 8004c48:	4543      	cmp	r3, r8
 8004c4a:	f77f af7a 	ble.w	8004b42 <_printf_float+0x242>
 8004c4e:	2301      	movs	r3, #1
 8004c50:	4652      	mov	r2, sl
 8004c52:	4631      	mov	r1, r6
 8004c54:	4628      	mov	r0, r5
 8004c56:	47b8      	blx	r7
 8004c58:	3001      	adds	r0, #1
 8004c5a:	f43f aeac 	beq.w	80049b6 <_printf_float+0xb6>
 8004c5e:	f108 0801 	add.w	r8, r8, #1
 8004c62:	e7ec      	b.n	8004c3e <_printf_float+0x33e>
 8004c64:	4613      	mov	r3, r2
 8004c66:	4631      	mov	r1, r6
 8004c68:	4642      	mov	r2, r8
 8004c6a:	4628      	mov	r0, r5
 8004c6c:	47b8      	blx	r7
 8004c6e:	3001      	adds	r0, #1
 8004c70:	d1c0      	bne.n	8004bf4 <_printf_float+0x2f4>
 8004c72:	e6a0      	b.n	80049b6 <_printf_float+0xb6>
 8004c74:	2301      	movs	r3, #1
 8004c76:	4631      	mov	r1, r6
 8004c78:	4628      	mov	r0, r5
 8004c7a:	920b      	str	r2, [sp, #44]	; 0x2c
 8004c7c:	47b8      	blx	r7
 8004c7e:	3001      	adds	r0, #1
 8004c80:	f43f ae99 	beq.w	80049b6 <_printf_float+0xb6>
 8004c84:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004c86:	f10b 0b01 	add.w	fp, fp, #1
 8004c8a:	e7b9      	b.n	8004c00 <_printf_float+0x300>
 8004c8c:	4631      	mov	r1, r6
 8004c8e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004c92:	4628      	mov	r0, r5
 8004c94:	47b8      	blx	r7
 8004c96:	3001      	adds	r0, #1
 8004c98:	d1bf      	bne.n	8004c1a <_printf_float+0x31a>
 8004c9a:	e68c      	b.n	80049b6 <_printf_float+0xb6>
 8004c9c:	464b      	mov	r3, r9
 8004c9e:	4631      	mov	r1, r6
 8004ca0:	4628      	mov	r0, r5
 8004ca2:	eb08 020a 	add.w	r2, r8, sl
 8004ca6:	47b8      	blx	r7
 8004ca8:	3001      	adds	r0, #1
 8004caa:	d1c2      	bne.n	8004c32 <_printf_float+0x332>
 8004cac:	e683      	b.n	80049b6 <_printf_float+0xb6>
 8004cae:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004cb0:	2a01      	cmp	r2, #1
 8004cb2:	dc01      	bgt.n	8004cb8 <_printf_float+0x3b8>
 8004cb4:	07db      	lsls	r3, r3, #31
 8004cb6:	d537      	bpl.n	8004d28 <_printf_float+0x428>
 8004cb8:	2301      	movs	r3, #1
 8004cba:	4642      	mov	r2, r8
 8004cbc:	4631      	mov	r1, r6
 8004cbe:	4628      	mov	r0, r5
 8004cc0:	47b8      	blx	r7
 8004cc2:	3001      	adds	r0, #1
 8004cc4:	f43f ae77 	beq.w	80049b6 <_printf_float+0xb6>
 8004cc8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004ccc:	4631      	mov	r1, r6
 8004cce:	4628      	mov	r0, r5
 8004cd0:	47b8      	blx	r7
 8004cd2:	3001      	adds	r0, #1
 8004cd4:	f43f ae6f 	beq.w	80049b6 <_printf_float+0xb6>
 8004cd8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004cdc:	2200      	movs	r2, #0
 8004cde:	2300      	movs	r3, #0
 8004ce0:	f7fb fe62 	bl	80009a8 <__aeabi_dcmpeq>
 8004ce4:	b9d8      	cbnz	r0, 8004d1e <_printf_float+0x41e>
 8004ce6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004ce8:	f108 0201 	add.w	r2, r8, #1
 8004cec:	3b01      	subs	r3, #1
 8004cee:	4631      	mov	r1, r6
 8004cf0:	4628      	mov	r0, r5
 8004cf2:	47b8      	blx	r7
 8004cf4:	3001      	adds	r0, #1
 8004cf6:	d10e      	bne.n	8004d16 <_printf_float+0x416>
 8004cf8:	e65d      	b.n	80049b6 <_printf_float+0xb6>
 8004cfa:	2301      	movs	r3, #1
 8004cfc:	464a      	mov	r2, r9
 8004cfe:	4631      	mov	r1, r6
 8004d00:	4628      	mov	r0, r5
 8004d02:	47b8      	blx	r7
 8004d04:	3001      	adds	r0, #1
 8004d06:	f43f ae56 	beq.w	80049b6 <_printf_float+0xb6>
 8004d0a:	f108 0801 	add.w	r8, r8, #1
 8004d0e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004d10:	3b01      	subs	r3, #1
 8004d12:	4543      	cmp	r3, r8
 8004d14:	dcf1      	bgt.n	8004cfa <_printf_float+0x3fa>
 8004d16:	4653      	mov	r3, sl
 8004d18:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004d1c:	e6e0      	b.n	8004ae0 <_printf_float+0x1e0>
 8004d1e:	f04f 0800 	mov.w	r8, #0
 8004d22:	f104 091a 	add.w	r9, r4, #26
 8004d26:	e7f2      	b.n	8004d0e <_printf_float+0x40e>
 8004d28:	2301      	movs	r3, #1
 8004d2a:	4642      	mov	r2, r8
 8004d2c:	e7df      	b.n	8004cee <_printf_float+0x3ee>
 8004d2e:	2301      	movs	r3, #1
 8004d30:	464a      	mov	r2, r9
 8004d32:	4631      	mov	r1, r6
 8004d34:	4628      	mov	r0, r5
 8004d36:	47b8      	blx	r7
 8004d38:	3001      	adds	r0, #1
 8004d3a:	f43f ae3c 	beq.w	80049b6 <_printf_float+0xb6>
 8004d3e:	f108 0801 	add.w	r8, r8, #1
 8004d42:	68e3      	ldr	r3, [r4, #12]
 8004d44:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8004d46:	1a5b      	subs	r3, r3, r1
 8004d48:	4543      	cmp	r3, r8
 8004d4a:	dcf0      	bgt.n	8004d2e <_printf_float+0x42e>
 8004d4c:	e6fd      	b.n	8004b4a <_printf_float+0x24a>
 8004d4e:	f04f 0800 	mov.w	r8, #0
 8004d52:	f104 0919 	add.w	r9, r4, #25
 8004d56:	e7f4      	b.n	8004d42 <_printf_float+0x442>

08004d58 <_printf_common>:
 8004d58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004d5c:	4616      	mov	r6, r2
 8004d5e:	4699      	mov	r9, r3
 8004d60:	688a      	ldr	r2, [r1, #8]
 8004d62:	690b      	ldr	r3, [r1, #16]
 8004d64:	4607      	mov	r7, r0
 8004d66:	4293      	cmp	r3, r2
 8004d68:	bfb8      	it	lt
 8004d6a:	4613      	movlt	r3, r2
 8004d6c:	6033      	str	r3, [r6, #0]
 8004d6e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004d72:	460c      	mov	r4, r1
 8004d74:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004d78:	b10a      	cbz	r2, 8004d7e <_printf_common+0x26>
 8004d7a:	3301      	adds	r3, #1
 8004d7c:	6033      	str	r3, [r6, #0]
 8004d7e:	6823      	ldr	r3, [r4, #0]
 8004d80:	0699      	lsls	r1, r3, #26
 8004d82:	bf42      	ittt	mi
 8004d84:	6833      	ldrmi	r3, [r6, #0]
 8004d86:	3302      	addmi	r3, #2
 8004d88:	6033      	strmi	r3, [r6, #0]
 8004d8a:	6825      	ldr	r5, [r4, #0]
 8004d8c:	f015 0506 	ands.w	r5, r5, #6
 8004d90:	d106      	bne.n	8004da0 <_printf_common+0x48>
 8004d92:	f104 0a19 	add.w	sl, r4, #25
 8004d96:	68e3      	ldr	r3, [r4, #12]
 8004d98:	6832      	ldr	r2, [r6, #0]
 8004d9a:	1a9b      	subs	r3, r3, r2
 8004d9c:	42ab      	cmp	r3, r5
 8004d9e:	dc28      	bgt.n	8004df2 <_printf_common+0x9a>
 8004da0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004da4:	1e13      	subs	r3, r2, #0
 8004da6:	6822      	ldr	r2, [r4, #0]
 8004da8:	bf18      	it	ne
 8004daa:	2301      	movne	r3, #1
 8004dac:	0692      	lsls	r2, r2, #26
 8004dae:	d42d      	bmi.n	8004e0c <_printf_common+0xb4>
 8004db0:	4649      	mov	r1, r9
 8004db2:	4638      	mov	r0, r7
 8004db4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004db8:	47c0      	blx	r8
 8004dba:	3001      	adds	r0, #1
 8004dbc:	d020      	beq.n	8004e00 <_printf_common+0xa8>
 8004dbe:	6823      	ldr	r3, [r4, #0]
 8004dc0:	68e5      	ldr	r5, [r4, #12]
 8004dc2:	f003 0306 	and.w	r3, r3, #6
 8004dc6:	2b04      	cmp	r3, #4
 8004dc8:	bf18      	it	ne
 8004dca:	2500      	movne	r5, #0
 8004dcc:	6832      	ldr	r2, [r6, #0]
 8004dce:	f04f 0600 	mov.w	r6, #0
 8004dd2:	68a3      	ldr	r3, [r4, #8]
 8004dd4:	bf08      	it	eq
 8004dd6:	1aad      	subeq	r5, r5, r2
 8004dd8:	6922      	ldr	r2, [r4, #16]
 8004dda:	bf08      	it	eq
 8004ddc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004de0:	4293      	cmp	r3, r2
 8004de2:	bfc4      	itt	gt
 8004de4:	1a9b      	subgt	r3, r3, r2
 8004de6:	18ed      	addgt	r5, r5, r3
 8004de8:	341a      	adds	r4, #26
 8004dea:	42b5      	cmp	r5, r6
 8004dec:	d11a      	bne.n	8004e24 <_printf_common+0xcc>
 8004dee:	2000      	movs	r0, #0
 8004df0:	e008      	b.n	8004e04 <_printf_common+0xac>
 8004df2:	2301      	movs	r3, #1
 8004df4:	4652      	mov	r2, sl
 8004df6:	4649      	mov	r1, r9
 8004df8:	4638      	mov	r0, r7
 8004dfa:	47c0      	blx	r8
 8004dfc:	3001      	adds	r0, #1
 8004dfe:	d103      	bne.n	8004e08 <_printf_common+0xb0>
 8004e00:	f04f 30ff 	mov.w	r0, #4294967295
 8004e04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e08:	3501      	adds	r5, #1
 8004e0a:	e7c4      	b.n	8004d96 <_printf_common+0x3e>
 8004e0c:	2030      	movs	r0, #48	; 0x30
 8004e0e:	18e1      	adds	r1, r4, r3
 8004e10:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004e14:	1c5a      	adds	r2, r3, #1
 8004e16:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004e1a:	4422      	add	r2, r4
 8004e1c:	3302      	adds	r3, #2
 8004e1e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004e22:	e7c5      	b.n	8004db0 <_printf_common+0x58>
 8004e24:	2301      	movs	r3, #1
 8004e26:	4622      	mov	r2, r4
 8004e28:	4649      	mov	r1, r9
 8004e2a:	4638      	mov	r0, r7
 8004e2c:	47c0      	blx	r8
 8004e2e:	3001      	adds	r0, #1
 8004e30:	d0e6      	beq.n	8004e00 <_printf_common+0xa8>
 8004e32:	3601      	adds	r6, #1
 8004e34:	e7d9      	b.n	8004dea <_printf_common+0x92>
	...

08004e38 <_printf_i>:
 8004e38:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004e3c:	7e0f      	ldrb	r7, [r1, #24]
 8004e3e:	4691      	mov	r9, r2
 8004e40:	2f78      	cmp	r7, #120	; 0x78
 8004e42:	4680      	mov	r8, r0
 8004e44:	460c      	mov	r4, r1
 8004e46:	469a      	mov	sl, r3
 8004e48:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004e4a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004e4e:	d807      	bhi.n	8004e60 <_printf_i+0x28>
 8004e50:	2f62      	cmp	r7, #98	; 0x62
 8004e52:	d80a      	bhi.n	8004e6a <_printf_i+0x32>
 8004e54:	2f00      	cmp	r7, #0
 8004e56:	f000 80d9 	beq.w	800500c <_printf_i+0x1d4>
 8004e5a:	2f58      	cmp	r7, #88	; 0x58
 8004e5c:	f000 80a4 	beq.w	8004fa8 <_printf_i+0x170>
 8004e60:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004e64:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004e68:	e03a      	b.n	8004ee0 <_printf_i+0xa8>
 8004e6a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004e6e:	2b15      	cmp	r3, #21
 8004e70:	d8f6      	bhi.n	8004e60 <_printf_i+0x28>
 8004e72:	a101      	add	r1, pc, #4	; (adr r1, 8004e78 <_printf_i+0x40>)
 8004e74:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004e78:	08004ed1 	.word	0x08004ed1
 8004e7c:	08004ee5 	.word	0x08004ee5
 8004e80:	08004e61 	.word	0x08004e61
 8004e84:	08004e61 	.word	0x08004e61
 8004e88:	08004e61 	.word	0x08004e61
 8004e8c:	08004e61 	.word	0x08004e61
 8004e90:	08004ee5 	.word	0x08004ee5
 8004e94:	08004e61 	.word	0x08004e61
 8004e98:	08004e61 	.word	0x08004e61
 8004e9c:	08004e61 	.word	0x08004e61
 8004ea0:	08004e61 	.word	0x08004e61
 8004ea4:	08004ff3 	.word	0x08004ff3
 8004ea8:	08004f15 	.word	0x08004f15
 8004eac:	08004fd5 	.word	0x08004fd5
 8004eb0:	08004e61 	.word	0x08004e61
 8004eb4:	08004e61 	.word	0x08004e61
 8004eb8:	08005015 	.word	0x08005015
 8004ebc:	08004e61 	.word	0x08004e61
 8004ec0:	08004f15 	.word	0x08004f15
 8004ec4:	08004e61 	.word	0x08004e61
 8004ec8:	08004e61 	.word	0x08004e61
 8004ecc:	08004fdd 	.word	0x08004fdd
 8004ed0:	682b      	ldr	r3, [r5, #0]
 8004ed2:	1d1a      	adds	r2, r3, #4
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	602a      	str	r2, [r5, #0]
 8004ed8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004edc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004ee0:	2301      	movs	r3, #1
 8004ee2:	e0a4      	b.n	800502e <_printf_i+0x1f6>
 8004ee4:	6820      	ldr	r0, [r4, #0]
 8004ee6:	6829      	ldr	r1, [r5, #0]
 8004ee8:	0606      	lsls	r6, r0, #24
 8004eea:	f101 0304 	add.w	r3, r1, #4
 8004eee:	d50a      	bpl.n	8004f06 <_printf_i+0xce>
 8004ef0:	680e      	ldr	r6, [r1, #0]
 8004ef2:	602b      	str	r3, [r5, #0]
 8004ef4:	2e00      	cmp	r6, #0
 8004ef6:	da03      	bge.n	8004f00 <_printf_i+0xc8>
 8004ef8:	232d      	movs	r3, #45	; 0x2d
 8004efa:	4276      	negs	r6, r6
 8004efc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004f00:	230a      	movs	r3, #10
 8004f02:	485e      	ldr	r0, [pc, #376]	; (800507c <_printf_i+0x244>)
 8004f04:	e019      	b.n	8004f3a <_printf_i+0x102>
 8004f06:	680e      	ldr	r6, [r1, #0]
 8004f08:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004f0c:	602b      	str	r3, [r5, #0]
 8004f0e:	bf18      	it	ne
 8004f10:	b236      	sxthne	r6, r6
 8004f12:	e7ef      	b.n	8004ef4 <_printf_i+0xbc>
 8004f14:	682b      	ldr	r3, [r5, #0]
 8004f16:	6820      	ldr	r0, [r4, #0]
 8004f18:	1d19      	adds	r1, r3, #4
 8004f1a:	6029      	str	r1, [r5, #0]
 8004f1c:	0601      	lsls	r1, r0, #24
 8004f1e:	d501      	bpl.n	8004f24 <_printf_i+0xec>
 8004f20:	681e      	ldr	r6, [r3, #0]
 8004f22:	e002      	b.n	8004f2a <_printf_i+0xf2>
 8004f24:	0646      	lsls	r6, r0, #25
 8004f26:	d5fb      	bpl.n	8004f20 <_printf_i+0xe8>
 8004f28:	881e      	ldrh	r6, [r3, #0]
 8004f2a:	2f6f      	cmp	r7, #111	; 0x6f
 8004f2c:	bf0c      	ite	eq
 8004f2e:	2308      	moveq	r3, #8
 8004f30:	230a      	movne	r3, #10
 8004f32:	4852      	ldr	r0, [pc, #328]	; (800507c <_printf_i+0x244>)
 8004f34:	2100      	movs	r1, #0
 8004f36:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004f3a:	6865      	ldr	r5, [r4, #4]
 8004f3c:	2d00      	cmp	r5, #0
 8004f3e:	bfa8      	it	ge
 8004f40:	6821      	ldrge	r1, [r4, #0]
 8004f42:	60a5      	str	r5, [r4, #8]
 8004f44:	bfa4      	itt	ge
 8004f46:	f021 0104 	bicge.w	r1, r1, #4
 8004f4a:	6021      	strge	r1, [r4, #0]
 8004f4c:	b90e      	cbnz	r6, 8004f52 <_printf_i+0x11a>
 8004f4e:	2d00      	cmp	r5, #0
 8004f50:	d04d      	beq.n	8004fee <_printf_i+0x1b6>
 8004f52:	4615      	mov	r5, r2
 8004f54:	fbb6 f1f3 	udiv	r1, r6, r3
 8004f58:	fb03 6711 	mls	r7, r3, r1, r6
 8004f5c:	5dc7      	ldrb	r7, [r0, r7]
 8004f5e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004f62:	4637      	mov	r7, r6
 8004f64:	42bb      	cmp	r3, r7
 8004f66:	460e      	mov	r6, r1
 8004f68:	d9f4      	bls.n	8004f54 <_printf_i+0x11c>
 8004f6a:	2b08      	cmp	r3, #8
 8004f6c:	d10b      	bne.n	8004f86 <_printf_i+0x14e>
 8004f6e:	6823      	ldr	r3, [r4, #0]
 8004f70:	07de      	lsls	r6, r3, #31
 8004f72:	d508      	bpl.n	8004f86 <_printf_i+0x14e>
 8004f74:	6923      	ldr	r3, [r4, #16]
 8004f76:	6861      	ldr	r1, [r4, #4]
 8004f78:	4299      	cmp	r1, r3
 8004f7a:	bfde      	ittt	le
 8004f7c:	2330      	movle	r3, #48	; 0x30
 8004f7e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004f82:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004f86:	1b52      	subs	r2, r2, r5
 8004f88:	6122      	str	r2, [r4, #16]
 8004f8a:	464b      	mov	r3, r9
 8004f8c:	4621      	mov	r1, r4
 8004f8e:	4640      	mov	r0, r8
 8004f90:	f8cd a000 	str.w	sl, [sp]
 8004f94:	aa03      	add	r2, sp, #12
 8004f96:	f7ff fedf 	bl	8004d58 <_printf_common>
 8004f9a:	3001      	adds	r0, #1
 8004f9c:	d14c      	bne.n	8005038 <_printf_i+0x200>
 8004f9e:	f04f 30ff 	mov.w	r0, #4294967295
 8004fa2:	b004      	add	sp, #16
 8004fa4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004fa8:	4834      	ldr	r0, [pc, #208]	; (800507c <_printf_i+0x244>)
 8004faa:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004fae:	6829      	ldr	r1, [r5, #0]
 8004fb0:	6823      	ldr	r3, [r4, #0]
 8004fb2:	f851 6b04 	ldr.w	r6, [r1], #4
 8004fb6:	6029      	str	r1, [r5, #0]
 8004fb8:	061d      	lsls	r5, r3, #24
 8004fba:	d514      	bpl.n	8004fe6 <_printf_i+0x1ae>
 8004fbc:	07df      	lsls	r7, r3, #31
 8004fbe:	bf44      	itt	mi
 8004fc0:	f043 0320 	orrmi.w	r3, r3, #32
 8004fc4:	6023      	strmi	r3, [r4, #0]
 8004fc6:	b91e      	cbnz	r6, 8004fd0 <_printf_i+0x198>
 8004fc8:	6823      	ldr	r3, [r4, #0]
 8004fca:	f023 0320 	bic.w	r3, r3, #32
 8004fce:	6023      	str	r3, [r4, #0]
 8004fd0:	2310      	movs	r3, #16
 8004fd2:	e7af      	b.n	8004f34 <_printf_i+0xfc>
 8004fd4:	6823      	ldr	r3, [r4, #0]
 8004fd6:	f043 0320 	orr.w	r3, r3, #32
 8004fda:	6023      	str	r3, [r4, #0]
 8004fdc:	2378      	movs	r3, #120	; 0x78
 8004fde:	4828      	ldr	r0, [pc, #160]	; (8005080 <_printf_i+0x248>)
 8004fe0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004fe4:	e7e3      	b.n	8004fae <_printf_i+0x176>
 8004fe6:	0659      	lsls	r1, r3, #25
 8004fe8:	bf48      	it	mi
 8004fea:	b2b6      	uxthmi	r6, r6
 8004fec:	e7e6      	b.n	8004fbc <_printf_i+0x184>
 8004fee:	4615      	mov	r5, r2
 8004ff0:	e7bb      	b.n	8004f6a <_printf_i+0x132>
 8004ff2:	682b      	ldr	r3, [r5, #0]
 8004ff4:	6826      	ldr	r6, [r4, #0]
 8004ff6:	1d18      	adds	r0, r3, #4
 8004ff8:	6961      	ldr	r1, [r4, #20]
 8004ffa:	6028      	str	r0, [r5, #0]
 8004ffc:	0635      	lsls	r5, r6, #24
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	d501      	bpl.n	8005006 <_printf_i+0x1ce>
 8005002:	6019      	str	r1, [r3, #0]
 8005004:	e002      	b.n	800500c <_printf_i+0x1d4>
 8005006:	0670      	lsls	r0, r6, #25
 8005008:	d5fb      	bpl.n	8005002 <_printf_i+0x1ca>
 800500a:	8019      	strh	r1, [r3, #0]
 800500c:	2300      	movs	r3, #0
 800500e:	4615      	mov	r5, r2
 8005010:	6123      	str	r3, [r4, #16]
 8005012:	e7ba      	b.n	8004f8a <_printf_i+0x152>
 8005014:	682b      	ldr	r3, [r5, #0]
 8005016:	2100      	movs	r1, #0
 8005018:	1d1a      	adds	r2, r3, #4
 800501a:	602a      	str	r2, [r5, #0]
 800501c:	681d      	ldr	r5, [r3, #0]
 800501e:	6862      	ldr	r2, [r4, #4]
 8005020:	4628      	mov	r0, r5
 8005022:	f000 ffc9 	bl	8005fb8 <memchr>
 8005026:	b108      	cbz	r0, 800502c <_printf_i+0x1f4>
 8005028:	1b40      	subs	r0, r0, r5
 800502a:	6060      	str	r0, [r4, #4]
 800502c:	6863      	ldr	r3, [r4, #4]
 800502e:	6123      	str	r3, [r4, #16]
 8005030:	2300      	movs	r3, #0
 8005032:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005036:	e7a8      	b.n	8004f8a <_printf_i+0x152>
 8005038:	462a      	mov	r2, r5
 800503a:	4649      	mov	r1, r9
 800503c:	4640      	mov	r0, r8
 800503e:	6923      	ldr	r3, [r4, #16]
 8005040:	47d0      	blx	sl
 8005042:	3001      	adds	r0, #1
 8005044:	d0ab      	beq.n	8004f9e <_printf_i+0x166>
 8005046:	6823      	ldr	r3, [r4, #0]
 8005048:	079b      	lsls	r3, r3, #30
 800504a:	d413      	bmi.n	8005074 <_printf_i+0x23c>
 800504c:	68e0      	ldr	r0, [r4, #12]
 800504e:	9b03      	ldr	r3, [sp, #12]
 8005050:	4298      	cmp	r0, r3
 8005052:	bfb8      	it	lt
 8005054:	4618      	movlt	r0, r3
 8005056:	e7a4      	b.n	8004fa2 <_printf_i+0x16a>
 8005058:	2301      	movs	r3, #1
 800505a:	4632      	mov	r2, r6
 800505c:	4649      	mov	r1, r9
 800505e:	4640      	mov	r0, r8
 8005060:	47d0      	blx	sl
 8005062:	3001      	adds	r0, #1
 8005064:	d09b      	beq.n	8004f9e <_printf_i+0x166>
 8005066:	3501      	adds	r5, #1
 8005068:	68e3      	ldr	r3, [r4, #12]
 800506a:	9903      	ldr	r1, [sp, #12]
 800506c:	1a5b      	subs	r3, r3, r1
 800506e:	42ab      	cmp	r3, r5
 8005070:	dcf2      	bgt.n	8005058 <_printf_i+0x220>
 8005072:	e7eb      	b.n	800504c <_printf_i+0x214>
 8005074:	2500      	movs	r5, #0
 8005076:	f104 0619 	add.w	r6, r4, #25
 800507a:	e7f5      	b.n	8005068 <_printf_i+0x230>
 800507c:	080087b6 	.word	0x080087b6
 8005080:	080087c7 	.word	0x080087c7

08005084 <iprintf>:
 8005084:	b40f      	push	{r0, r1, r2, r3}
 8005086:	4b0a      	ldr	r3, [pc, #40]	; (80050b0 <iprintf+0x2c>)
 8005088:	b513      	push	{r0, r1, r4, lr}
 800508a:	681c      	ldr	r4, [r3, #0]
 800508c:	b124      	cbz	r4, 8005098 <iprintf+0x14>
 800508e:	69a3      	ldr	r3, [r4, #24]
 8005090:	b913      	cbnz	r3, 8005098 <iprintf+0x14>
 8005092:	4620      	mov	r0, r4
 8005094:	f000 fee2 	bl	8005e5c <__sinit>
 8005098:	ab05      	add	r3, sp, #20
 800509a:	4620      	mov	r0, r4
 800509c:	9a04      	ldr	r2, [sp, #16]
 800509e:	68a1      	ldr	r1, [r4, #8]
 80050a0:	9301      	str	r3, [sp, #4]
 80050a2:	f001 fc3f 	bl	8006924 <_vfiprintf_r>
 80050a6:	b002      	add	sp, #8
 80050a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80050ac:	b004      	add	sp, #16
 80050ae:	4770      	bx	lr
 80050b0:	20000014 	.word	0x20000014

080050b4 <quorem>:
 80050b4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80050b8:	6903      	ldr	r3, [r0, #16]
 80050ba:	690c      	ldr	r4, [r1, #16]
 80050bc:	4607      	mov	r7, r0
 80050be:	42a3      	cmp	r3, r4
 80050c0:	f2c0 8082 	blt.w	80051c8 <quorem+0x114>
 80050c4:	3c01      	subs	r4, #1
 80050c6:	f100 0514 	add.w	r5, r0, #20
 80050ca:	f101 0814 	add.w	r8, r1, #20
 80050ce:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80050d2:	9301      	str	r3, [sp, #4]
 80050d4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80050d8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80050dc:	3301      	adds	r3, #1
 80050de:	429a      	cmp	r2, r3
 80050e0:	fbb2 f6f3 	udiv	r6, r2, r3
 80050e4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80050e8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80050ec:	d331      	bcc.n	8005152 <quorem+0x9e>
 80050ee:	f04f 0e00 	mov.w	lr, #0
 80050f2:	4640      	mov	r0, r8
 80050f4:	46ac      	mov	ip, r5
 80050f6:	46f2      	mov	sl, lr
 80050f8:	f850 2b04 	ldr.w	r2, [r0], #4
 80050fc:	b293      	uxth	r3, r2
 80050fe:	fb06 e303 	mla	r3, r6, r3, lr
 8005102:	0c12      	lsrs	r2, r2, #16
 8005104:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8005108:	b29b      	uxth	r3, r3
 800510a:	fb06 e202 	mla	r2, r6, r2, lr
 800510e:	ebaa 0303 	sub.w	r3, sl, r3
 8005112:	f8dc a000 	ldr.w	sl, [ip]
 8005116:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800511a:	fa1f fa8a 	uxth.w	sl, sl
 800511e:	4453      	add	r3, sl
 8005120:	f8dc a000 	ldr.w	sl, [ip]
 8005124:	b292      	uxth	r2, r2
 8005126:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800512a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800512e:	b29b      	uxth	r3, r3
 8005130:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005134:	4581      	cmp	r9, r0
 8005136:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800513a:	f84c 3b04 	str.w	r3, [ip], #4
 800513e:	d2db      	bcs.n	80050f8 <quorem+0x44>
 8005140:	f855 300b 	ldr.w	r3, [r5, fp]
 8005144:	b92b      	cbnz	r3, 8005152 <quorem+0x9e>
 8005146:	9b01      	ldr	r3, [sp, #4]
 8005148:	3b04      	subs	r3, #4
 800514a:	429d      	cmp	r5, r3
 800514c:	461a      	mov	r2, r3
 800514e:	d32f      	bcc.n	80051b0 <quorem+0xfc>
 8005150:	613c      	str	r4, [r7, #16]
 8005152:	4638      	mov	r0, r7
 8005154:	f001 f9ca 	bl	80064ec <__mcmp>
 8005158:	2800      	cmp	r0, #0
 800515a:	db25      	blt.n	80051a8 <quorem+0xf4>
 800515c:	4628      	mov	r0, r5
 800515e:	f04f 0c00 	mov.w	ip, #0
 8005162:	3601      	adds	r6, #1
 8005164:	f858 1b04 	ldr.w	r1, [r8], #4
 8005168:	f8d0 e000 	ldr.w	lr, [r0]
 800516c:	b28b      	uxth	r3, r1
 800516e:	ebac 0303 	sub.w	r3, ip, r3
 8005172:	fa1f f28e 	uxth.w	r2, lr
 8005176:	4413      	add	r3, r2
 8005178:	0c0a      	lsrs	r2, r1, #16
 800517a:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800517e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005182:	b29b      	uxth	r3, r3
 8005184:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005188:	45c1      	cmp	r9, r8
 800518a:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800518e:	f840 3b04 	str.w	r3, [r0], #4
 8005192:	d2e7      	bcs.n	8005164 <quorem+0xb0>
 8005194:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005198:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800519c:	b922      	cbnz	r2, 80051a8 <quorem+0xf4>
 800519e:	3b04      	subs	r3, #4
 80051a0:	429d      	cmp	r5, r3
 80051a2:	461a      	mov	r2, r3
 80051a4:	d30a      	bcc.n	80051bc <quorem+0x108>
 80051a6:	613c      	str	r4, [r7, #16]
 80051a8:	4630      	mov	r0, r6
 80051aa:	b003      	add	sp, #12
 80051ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80051b0:	6812      	ldr	r2, [r2, #0]
 80051b2:	3b04      	subs	r3, #4
 80051b4:	2a00      	cmp	r2, #0
 80051b6:	d1cb      	bne.n	8005150 <quorem+0x9c>
 80051b8:	3c01      	subs	r4, #1
 80051ba:	e7c6      	b.n	800514a <quorem+0x96>
 80051bc:	6812      	ldr	r2, [r2, #0]
 80051be:	3b04      	subs	r3, #4
 80051c0:	2a00      	cmp	r2, #0
 80051c2:	d1f0      	bne.n	80051a6 <quorem+0xf2>
 80051c4:	3c01      	subs	r4, #1
 80051c6:	e7eb      	b.n	80051a0 <quorem+0xec>
 80051c8:	2000      	movs	r0, #0
 80051ca:	e7ee      	b.n	80051aa <quorem+0xf6>
 80051cc:	0000      	movs	r0, r0
	...

080051d0 <_dtoa_r>:
 80051d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051d4:	4616      	mov	r6, r2
 80051d6:	461f      	mov	r7, r3
 80051d8:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80051da:	b099      	sub	sp, #100	; 0x64
 80051dc:	4605      	mov	r5, r0
 80051de:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80051e2:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 80051e6:	b974      	cbnz	r4, 8005206 <_dtoa_r+0x36>
 80051e8:	2010      	movs	r0, #16
 80051ea:	f000 fedd 	bl	8005fa8 <malloc>
 80051ee:	4602      	mov	r2, r0
 80051f0:	6268      	str	r0, [r5, #36]	; 0x24
 80051f2:	b920      	cbnz	r0, 80051fe <_dtoa_r+0x2e>
 80051f4:	21ea      	movs	r1, #234	; 0xea
 80051f6:	4ba8      	ldr	r3, [pc, #672]	; (8005498 <_dtoa_r+0x2c8>)
 80051f8:	48a8      	ldr	r0, [pc, #672]	; (800549c <_dtoa_r+0x2cc>)
 80051fa:	f001 fde9 	bl	8006dd0 <__assert_func>
 80051fe:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005202:	6004      	str	r4, [r0, #0]
 8005204:	60c4      	str	r4, [r0, #12]
 8005206:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005208:	6819      	ldr	r1, [r3, #0]
 800520a:	b151      	cbz	r1, 8005222 <_dtoa_r+0x52>
 800520c:	685a      	ldr	r2, [r3, #4]
 800520e:	2301      	movs	r3, #1
 8005210:	4093      	lsls	r3, r2
 8005212:	604a      	str	r2, [r1, #4]
 8005214:	608b      	str	r3, [r1, #8]
 8005216:	4628      	mov	r0, r5
 8005218:	f000 ff2a 	bl	8006070 <_Bfree>
 800521c:	2200      	movs	r2, #0
 800521e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005220:	601a      	str	r2, [r3, #0]
 8005222:	1e3b      	subs	r3, r7, #0
 8005224:	bfaf      	iteee	ge
 8005226:	2300      	movge	r3, #0
 8005228:	2201      	movlt	r2, #1
 800522a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800522e:	9305      	strlt	r3, [sp, #20]
 8005230:	bfa8      	it	ge
 8005232:	f8c8 3000 	strge.w	r3, [r8]
 8005236:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800523a:	4b99      	ldr	r3, [pc, #612]	; (80054a0 <_dtoa_r+0x2d0>)
 800523c:	bfb8      	it	lt
 800523e:	f8c8 2000 	strlt.w	r2, [r8]
 8005242:	ea33 0309 	bics.w	r3, r3, r9
 8005246:	d119      	bne.n	800527c <_dtoa_r+0xac>
 8005248:	f242 730f 	movw	r3, #9999	; 0x270f
 800524c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800524e:	6013      	str	r3, [r2, #0]
 8005250:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005254:	4333      	orrs	r3, r6
 8005256:	f000 857f 	beq.w	8005d58 <_dtoa_r+0xb88>
 800525a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800525c:	b953      	cbnz	r3, 8005274 <_dtoa_r+0xa4>
 800525e:	4b91      	ldr	r3, [pc, #580]	; (80054a4 <_dtoa_r+0x2d4>)
 8005260:	e022      	b.n	80052a8 <_dtoa_r+0xd8>
 8005262:	4b91      	ldr	r3, [pc, #580]	; (80054a8 <_dtoa_r+0x2d8>)
 8005264:	9303      	str	r3, [sp, #12]
 8005266:	3308      	adds	r3, #8
 8005268:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800526a:	6013      	str	r3, [r2, #0]
 800526c:	9803      	ldr	r0, [sp, #12]
 800526e:	b019      	add	sp, #100	; 0x64
 8005270:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005274:	4b8b      	ldr	r3, [pc, #556]	; (80054a4 <_dtoa_r+0x2d4>)
 8005276:	9303      	str	r3, [sp, #12]
 8005278:	3303      	adds	r3, #3
 800527a:	e7f5      	b.n	8005268 <_dtoa_r+0x98>
 800527c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8005280:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8005284:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005288:	2200      	movs	r2, #0
 800528a:	2300      	movs	r3, #0
 800528c:	f7fb fb8c 	bl	80009a8 <__aeabi_dcmpeq>
 8005290:	4680      	mov	r8, r0
 8005292:	b158      	cbz	r0, 80052ac <_dtoa_r+0xdc>
 8005294:	2301      	movs	r3, #1
 8005296:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005298:	6013      	str	r3, [r2, #0]
 800529a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800529c:	2b00      	cmp	r3, #0
 800529e:	f000 8558 	beq.w	8005d52 <_dtoa_r+0xb82>
 80052a2:	4882      	ldr	r0, [pc, #520]	; (80054ac <_dtoa_r+0x2dc>)
 80052a4:	6018      	str	r0, [r3, #0]
 80052a6:	1e43      	subs	r3, r0, #1
 80052a8:	9303      	str	r3, [sp, #12]
 80052aa:	e7df      	b.n	800526c <_dtoa_r+0x9c>
 80052ac:	ab16      	add	r3, sp, #88	; 0x58
 80052ae:	9301      	str	r3, [sp, #4]
 80052b0:	ab17      	add	r3, sp, #92	; 0x5c
 80052b2:	9300      	str	r3, [sp, #0]
 80052b4:	4628      	mov	r0, r5
 80052b6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80052ba:	f001 f9bf 	bl	800663c <__d2b>
 80052be:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80052c2:	4683      	mov	fp, r0
 80052c4:	2c00      	cmp	r4, #0
 80052c6:	d07f      	beq.n	80053c8 <_dtoa_r+0x1f8>
 80052c8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80052cc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80052ce:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 80052d2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80052d6:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 80052da:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 80052de:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 80052e2:	2200      	movs	r2, #0
 80052e4:	4b72      	ldr	r3, [pc, #456]	; (80054b0 <_dtoa_r+0x2e0>)
 80052e6:	f7fa ff3f 	bl	8000168 <__aeabi_dsub>
 80052ea:	a365      	add	r3, pc, #404	; (adr r3, 8005480 <_dtoa_r+0x2b0>)
 80052ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052f0:	f7fb f8f2 	bl	80004d8 <__aeabi_dmul>
 80052f4:	a364      	add	r3, pc, #400	; (adr r3, 8005488 <_dtoa_r+0x2b8>)
 80052f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052fa:	f7fa ff37 	bl	800016c <__adddf3>
 80052fe:	4606      	mov	r6, r0
 8005300:	4620      	mov	r0, r4
 8005302:	460f      	mov	r7, r1
 8005304:	f7fb f87e 	bl	8000404 <__aeabi_i2d>
 8005308:	a361      	add	r3, pc, #388	; (adr r3, 8005490 <_dtoa_r+0x2c0>)
 800530a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800530e:	f7fb f8e3 	bl	80004d8 <__aeabi_dmul>
 8005312:	4602      	mov	r2, r0
 8005314:	460b      	mov	r3, r1
 8005316:	4630      	mov	r0, r6
 8005318:	4639      	mov	r1, r7
 800531a:	f7fa ff27 	bl	800016c <__adddf3>
 800531e:	4606      	mov	r6, r0
 8005320:	460f      	mov	r7, r1
 8005322:	f7fb fb89 	bl	8000a38 <__aeabi_d2iz>
 8005326:	2200      	movs	r2, #0
 8005328:	4682      	mov	sl, r0
 800532a:	2300      	movs	r3, #0
 800532c:	4630      	mov	r0, r6
 800532e:	4639      	mov	r1, r7
 8005330:	f7fb fb44 	bl	80009bc <__aeabi_dcmplt>
 8005334:	b148      	cbz	r0, 800534a <_dtoa_r+0x17a>
 8005336:	4650      	mov	r0, sl
 8005338:	f7fb f864 	bl	8000404 <__aeabi_i2d>
 800533c:	4632      	mov	r2, r6
 800533e:	463b      	mov	r3, r7
 8005340:	f7fb fb32 	bl	80009a8 <__aeabi_dcmpeq>
 8005344:	b908      	cbnz	r0, 800534a <_dtoa_r+0x17a>
 8005346:	f10a 3aff 	add.w	sl, sl, #4294967295
 800534a:	f1ba 0f16 	cmp.w	sl, #22
 800534e:	d858      	bhi.n	8005402 <_dtoa_r+0x232>
 8005350:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005354:	4b57      	ldr	r3, [pc, #348]	; (80054b4 <_dtoa_r+0x2e4>)
 8005356:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800535a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800535e:	f7fb fb2d 	bl	80009bc <__aeabi_dcmplt>
 8005362:	2800      	cmp	r0, #0
 8005364:	d04f      	beq.n	8005406 <_dtoa_r+0x236>
 8005366:	2300      	movs	r3, #0
 8005368:	f10a 3aff 	add.w	sl, sl, #4294967295
 800536c:	930f      	str	r3, [sp, #60]	; 0x3c
 800536e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8005370:	1b1c      	subs	r4, r3, r4
 8005372:	1e63      	subs	r3, r4, #1
 8005374:	9309      	str	r3, [sp, #36]	; 0x24
 8005376:	bf49      	itett	mi
 8005378:	f1c4 0301 	rsbmi	r3, r4, #1
 800537c:	2300      	movpl	r3, #0
 800537e:	9306      	strmi	r3, [sp, #24]
 8005380:	2300      	movmi	r3, #0
 8005382:	bf54      	ite	pl
 8005384:	9306      	strpl	r3, [sp, #24]
 8005386:	9309      	strmi	r3, [sp, #36]	; 0x24
 8005388:	f1ba 0f00 	cmp.w	sl, #0
 800538c:	db3d      	blt.n	800540a <_dtoa_r+0x23a>
 800538e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005390:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8005394:	4453      	add	r3, sl
 8005396:	9309      	str	r3, [sp, #36]	; 0x24
 8005398:	2300      	movs	r3, #0
 800539a:	930a      	str	r3, [sp, #40]	; 0x28
 800539c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800539e:	2b09      	cmp	r3, #9
 80053a0:	f200 808c 	bhi.w	80054bc <_dtoa_r+0x2ec>
 80053a4:	2b05      	cmp	r3, #5
 80053a6:	bfc4      	itt	gt
 80053a8:	3b04      	subgt	r3, #4
 80053aa:	9322      	strgt	r3, [sp, #136]	; 0x88
 80053ac:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80053ae:	bfc8      	it	gt
 80053b0:	2400      	movgt	r4, #0
 80053b2:	f1a3 0302 	sub.w	r3, r3, #2
 80053b6:	bfd8      	it	le
 80053b8:	2401      	movle	r4, #1
 80053ba:	2b03      	cmp	r3, #3
 80053bc:	f200 808a 	bhi.w	80054d4 <_dtoa_r+0x304>
 80053c0:	e8df f003 	tbb	[pc, r3]
 80053c4:	5b4d4f2d 	.word	0x5b4d4f2d
 80053c8:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 80053cc:	441c      	add	r4, r3
 80053ce:	f204 4332 	addw	r3, r4, #1074	; 0x432
 80053d2:	2b20      	cmp	r3, #32
 80053d4:	bfc3      	ittte	gt
 80053d6:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80053da:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 80053de:	fa09 f303 	lslgt.w	r3, r9, r3
 80053e2:	f1c3 0320 	rsble	r3, r3, #32
 80053e6:	bfc6      	itte	gt
 80053e8:	fa26 f000 	lsrgt.w	r0, r6, r0
 80053ec:	4318      	orrgt	r0, r3
 80053ee:	fa06 f003 	lslle.w	r0, r6, r3
 80053f2:	f7fa fff7 	bl	80003e4 <__aeabi_ui2d>
 80053f6:	2301      	movs	r3, #1
 80053f8:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 80053fc:	3c01      	subs	r4, #1
 80053fe:	9313      	str	r3, [sp, #76]	; 0x4c
 8005400:	e76f      	b.n	80052e2 <_dtoa_r+0x112>
 8005402:	2301      	movs	r3, #1
 8005404:	e7b2      	b.n	800536c <_dtoa_r+0x19c>
 8005406:	900f      	str	r0, [sp, #60]	; 0x3c
 8005408:	e7b1      	b.n	800536e <_dtoa_r+0x19e>
 800540a:	9b06      	ldr	r3, [sp, #24]
 800540c:	eba3 030a 	sub.w	r3, r3, sl
 8005410:	9306      	str	r3, [sp, #24]
 8005412:	f1ca 0300 	rsb	r3, sl, #0
 8005416:	930a      	str	r3, [sp, #40]	; 0x28
 8005418:	2300      	movs	r3, #0
 800541a:	930e      	str	r3, [sp, #56]	; 0x38
 800541c:	e7be      	b.n	800539c <_dtoa_r+0x1cc>
 800541e:	2300      	movs	r3, #0
 8005420:	930b      	str	r3, [sp, #44]	; 0x2c
 8005422:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005424:	2b00      	cmp	r3, #0
 8005426:	dc58      	bgt.n	80054da <_dtoa_r+0x30a>
 8005428:	f04f 0901 	mov.w	r9, #1
 800542c:	464b      	mov	r3, r9
 800542e:	f8cd 9020 	str.w	r9, [sp, #32]
 8005432:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 8005436:	2200      	movs	r2, #0
 8005438:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800543a:	6042      	str	r2, [r0, #4]
 800543c:	2204      	movs	r2, #4
 800543e:	f102 0614 	add.w	r6, r2, #20
 8005442:	429e      	cmp	r6, r3
 8005444:	6841      	ldr	r1, [r0, #4]
 8005446:	d94e      	bls.n	80054e6 <_dtoa_r+0x316>
 8005448:	4628      	mov	r0, r5
 800544a:	f000 fdd1 	bl	8005ff0 <_Balloc>
 800544e:	9003      	str	r0, [sp, #12]
 8005450:	2800      	cmp	r0, #0
 8005452:	d14c      	bne.n	80054ee <_dtoa_r+0x31e>
 8005454:	4602      	mov	r2, r0
 8005456:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800545a:	4b17      	ldr	r3, [pc, #92]	; (80054b8 <_dtoa_r+0x2e8>)
 800545c:	e6cc      	b.n	80051f8 <_dtoa_r+0x28>
 800545e:	2301      	movs	r3, #1
 8005460:	e7de      	b.n	8005420 <_dtoa_r+0x250>
 8005462:	2300      	movs	r3, #0
 8005464:	930b      	str	r3, [sp, #44]	; 0x2c
 8005466:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005468:	eb0a 0903 	add.w	r9, sl, r3
 800546c:	f109 0301 	add.w	r3, r9, #1
 8005470:	2b01      	cmp	r3, #1
 8005472:	9308      	str	r3, [sp, #32]
 8005474:	bfb8      	it	lt
 8005476:	2301      	movlt	r3, #1
 8005478:	e7dd      	b.n	8005436 <_dtoa_r+0x266>
 800547a:	2301      	movs	r3, #1
 800547c:	e7f2      	b.n	8005464 <_dtoa_r+0x294>
 800547e:	bf00      	nop
 8005480:	636f4361 	.word	0x636f4361
 8005484:	3fd287a7 	.word	0x3fd287a7
 8005488:	8b60c8b3 	.word	0x8b60c8b3
 800548c:	3fc68a28 	.word	0x3fc68a28
 8005490:	509f79fb 	.word	0x509f79fb
 8005494:	3fd34413 	.word	0x3fd34413
 8005498:	080087e5 	.word	0x080087e5
 800549c:	080087fc 	.word	0x080087fc
 80054a0:	7ff00000 	.word	0x7ff00000
 80054a4:	080087e1 	.word	0x080087e1
 80054a8:	080087d8 	.word	0x080087d8
 80054ac:	080087b5 	.word	0x080087b5
 80054b0:	3ff80000 	.word	0x3ff80000
 80054b4:	08008950 	.word	0x08008950
 80054b8:	08008857 	.word	0x08008857
 80054bc:	2401      	movs	r4, #1
 80054be:	2300      	movs	r3, #0
 80054c0:	940b      	str	r4, [sp, #44]	; 0x2c
 80054c2:	9322      	str	r3, [sp, #136]	; 0x88
 80054c4:	f04f 39ff 	mov.w	r9, #4294967295
 80054c8:	2200      	movs	r2, #0
 80054ca:	2312      	movs	r3, #18
 80054cc:	f8cd 9020 	str.w	r9, [sp, #32]
 80054d0:	9223      	str	r2, [sp, #140]	; 0x8c
 80054d2:	e7b0      	b.n	8005436 <_dtoa_r+0x266>
 80054d4:	2301      	movs	r3, #1
 80054d6:	930b      	str	r3, [sp, #44]	; 0x2c
 80054d8:	e7f4      	b.n	80054c4 <_dtoa_r+0x2f4>
 80054da:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 80054de:	464b      	mov	r3, r9
 80054e0:	f8cd 9020 	str.w	r9, [sp, #32]
 80054e4:	e7a7      	b.n	8005436 <_dtoa_r+0x266>
 80054e6:	3101      	adds	r1, #1
 80054e8:	6041      	str	r1, [r0, #4]
 80054ea:	0052      	lsls	r2, r2, #1
 80054ec:	e7a7      	b.n	800543e <_dtoa_r+0x26e>
 80054ee:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80054f0:	9a03      	ldr	r2, [sp, #12]
 80054f2:	601a      	str	r2, [r3, #0]
 80054f4:	9b08      	ldr	r3, [sp, #32]
 80054f6:	2b0e      	cmp	r3, #14
 80054f8:	f200 80a8 	bhi.w	800564c <_dtoa_r+0x47c>
 80054fc:	2c00      	cmp	r4, #0
 80054fe:	f000 80a5 	beq.w	800564c <_dtoa_r+0x47c>
 8005502:	f1ba 0f00 	cmp.w	sl, #0
 8005506:	dd34      	ble.n	8005572 <_dtoa_r+0x3a2>
 8005508:	4a9a      	ldr	r2, [pc, #616]	; (8005774 <_dtoa_r+0x5a4>)
 800550a:	f00a 030f 	and.w	r3, sl, #15
 800550e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005512:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8005516:	e9d3 3400 	ldrd	r3, r4, [r3]
 800551a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800551e:	ea4f 142a 	mov.w	r4, sl, asr #4
 8005522:	d016      	beq.n	8005552 <_dtoa_r+0x382>
 8005524:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005528:	4b93      	ldr	r3, [pc, #588]	; (8005778 <_dtoa_r+0x5a8>)
 800552a:	2703      	movs	r7, #3
 800552c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005530:	f7fb f8fc 	bl	800072c <__aeabi_ddiv>
 8005534:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005538:	f004 040f 	and.w	r4, r4, #15
 800553c:	4e8e      	ldr	r6, [pc, #568]	; (8005778 <_dtoa_r+0x5a8>)
 800553e:	b954      	cbnz	r4, 8005556 <_dtoa_r+0x386>
 8005540:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005544:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005548:	f7fb f8f0 	bl	800072c <__aeabi_ddiv>
 800554c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005550:	e029      	b.n	80055a6 <_dtoa_r+0x3d6>
 8005552:	2702      	movs	r7, #2
 8005554:	e7f2      	b.n	800553c <_dtoa_r+0x36c>
 8005556:	07e1      	lsls	r1, r4, #31
 8005558:	d508      	bpl.n	800556c <_dtoa_r+0x39c>
 800555a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800555e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005562:	f7fa ffb9 	bl	80004d8 <__aeabi_dmul>
 8005566:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800556a:	3701      	adds	r7, #1
 800556c:	1064      	asrs	r4, r4, #1
 800556e:	3608      	adds	r6, #8
 8005570:	e7e5      	b.n	800553e <_dtoa_r+0x36e>
 8005572:	f000 80a5 	beq.w	80056c0 <_dtoa_r+0x4f0>
 8005576:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800557a:	f1ca 0400 	rsb	r4, sl, #0
 800557e:	4b7d      	ldr	r3, [pc, #500]	; (8005774 <_dtoa_r+0x5a4>)
 8005580:	f004 020f 	and.w	r2, r4, #15
 8005584:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005588:	e9d3 2300 	ldrd	r2, r3, [r3]
 800558c:	f7fa ffa4 	bl	80004d8 <__aeabi_dmul>
 8005590:	2702      	movs	r7, #2
 8005592:	2300      	movs	r3, #0
 8005594:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005598:	4e77      	ldr	r6, [pc, #476]	; (8005778 <_dtoa_r+0x5a8>)
 800559a:	1124      	asrs	r4, r4, #4
 800559c:	2c00      	cmp	r4, #0
 800559e:	f040 8084 	bne.w	80056aa <_dtoa_r+0x4da>
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d1d2      	bne.n	800554c <_dtoa_r+0x37c>
 80055a6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	f000 808b 	beq.w	80056c4 <_dtoa_r+0x4f4>
 80055ae:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80055b2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80055b6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80055ba:	2200      	movs	r2, #0
 80055bc:	4b6f      	ldr	r3, [pc, #444]	; (800577c <_dtoa_r+0x5ac>)
 80055be:	f7fb f9fd 	bl	80009bc <__aeabi_dcmplt>
 80055c2:	2800      	cmp	r0, #0
 80055c4:	d07e      	beq.n	80056c4 <_dtoa_r+0x4f4>
 80055c6:	9b08      	ldr	r3, [sp, #32]
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d07b      	beq.n	80056c4 <_dtoa_r+0x4f4>
 80055cc:	f1b9 0f00 	cmp.w	r9, #0
 80055d0:	dd38      	ble.n	8005644 <_dtoa_r+0x474>
 80055d2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80055d6:	2200      	movs	r2, #0
 80055d8:	4b69      	ldr	r3, [pc, #420]	; (8005780 <_dtoa_r+0x5b0>)
 80055da:	f7fa ff7d 	bl	80004d8 <__aeabi_dmul>
 80055de:	464c      	mov	r4, r9
 80055e0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80055e4:	f10a 38ff 	add.w	r8, sl, #4294967295
 80055e8:	3701      	adds	r7, #1
 80055ea:	4638      	mov	r0, r7
 80055ec:	f7fa ff0a 	bl	8000404 <__aeabi_i2d>
 80055f0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80055f4:	f7fa ff70 	bl	80004d8 <__aeabi_dmul>
 80055f8:	2200      	movs	r2, #0
 80055fa:	4b62      	ldr	r3, [pc, #392]	; (8005784 <_dtoa_r+0x5b4>)
 80055fc:	f7fa fdb6 	bl	800016c <__adddf3>
 8005600:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8005604:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005608:	9611      	str	r6, [sp, #68]	; 0x44
 800560a:	2c00      	cmp	r4, #0
 800560c:	d15d      	bne.n	80056ca <_dtoa_r+0x4fa>
 800560e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005612:	2200      	movs	r2, #0
 8005614:	4b5c      	ldr	r3, [pc, #368]	; (8005788 <_dtoa_r+0x5b8>)
 8005616:	f7fa fda7 	bl	8000168 <__aeabi_dsub>
 800561a:	4602      	mov	r2, r0
 800561c:	460b      	mov	r3, r1
 800561e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005622:	4633      	mov	r3, r6
 8005624:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005626:	f7fb f9e7 	bl	80009f8 <__aeabi_dcmpgt>
 800562a:	2800      	cmp	r0, #0
 800562c:	f040 829c 	bne.w	8005b68 <_dtoa_r+0x998>
 8005630:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005634:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005636:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800563a:	f7fb f9bf 	bl	80009bc <__aeabi_dcmplt>
 800563e:	2800      	cmp	r0, #0
 8005640:	f040 8290 	bne.w	8005b64 <_dtoa_r+0x994>
 8005644:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8005648:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800564c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800564e:	2b00      	cmp	r3, #0
 8005650:	f2c0 8152 	blt.w	80058f8 <_dtoa_r+0x728>
 8005654:	f1ba 0f0e 	cmp.w	sl, #14
 8005658:	f300 814e 	bgt.w	80058f8 <_dtoa_r+0x728>
 800565c:	4b45      	ldr	r3, [pc, #276]	; (8005774 <_dtoa_r+0x5a4>)
 800565e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8005662:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005666:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800566a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800566c:	2b00      	cmp	r3, #0
 800566e:	f280 80db 	bge.w	8005828 <_dtoa_r+0x658>
 8005672:	9b08      	ldr	r3, [sp, #32]
 8005674:	2b00      	cmp	r3, #0
 8005676:	f300 80d7 	bgt.w	8005828 <_dtoa_r+0x658>
 800567a:	f040 8272 	bne.w	8005b62 <_dtoa_r+0x992>
 800567e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005682:	2200      	movs	r2, #0
 8005684:	4b40      	ldr	r3, [pc, #256]	; (8005788 <_dtoa_r+0x5b8>)
 8005686:	f7fa ff27 	bl	80004d8 <__aeabi_dmul>
 800568a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800568e:	f7fb f9a9 	bl	80009e4 <__aeabi_dcmpge>
 8005692:	9c08      	ldr	r4, [sp, #32]
 8005694:	4626      	mov	r6, r4
 8005696:	2800      	cmp	r0, #0
 8005698:	f040 8248 	bne.w	8005b2c <_dtoa_r+0x95c>
 800569c:	2331      	movs	r3, #49	; 0x31
 800569e:	9f03      	ldr	r7, [sp, #12]
 80056a0:	f10a 0a01 	add.w	sl, sl, #1
 80056a4:	f807 3b01 	strb.w	r3, [r7], #1
 80056a8:	e244      	b.n	8005b34 <_dtoa_r+0x964>
 80056aa:	07e2      	lsls	r2, r4, #31
 80056ac:	d505      	bpl.n	80056ba <_dtoa_r+0x4ea>
 80056ae:	e9d6 2300 	ldrd	r2, r3, [r6]
 80056b2:	f7fa ff11 	bl	80004d8 <__aeabi_dmul>
 80056b6:	2301      	movs	r3, #1
 80056b8:	3701      	adds	r7, #1
 80056ba:	1064      	asrs	r4, r4, #1
 80056bc:	3608      	adds	r6, #8
 80056be:	e76d      	b.n	800559c <_dtoa_r+0x3cc>
 80056c0:	2702      	movs	r7, #2
 80056c2:	e770      	b.n	80055a6 <_dtoa_r+0x3d6>
 80056c4:	46d0      	mov	r8, sl
 80056c6:	9c08      	ldr	r4, [sp, #32]
 80056c8:	e78f      	b.n	80055ea <_dtoa_r+0x41a>
 80056ca:	9903      	ldr	r1, [sp, #12]
 80056cc:	4b29      	ldr	r3, [pc, #164]	; (8005774 <_dtoa_r+0x5a4>)
 80056ce:	4421      	add	r1, r4
 80056d0:	9112      	str	r1, [sp, #72]	; 0x48
 80056d2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80056d4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80056d8:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80056dc:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80056e0:	2900      	cmp	r1, #0
 80056e2:	d055      	beq.n	8005790 <_dtoa_r+0x5c0>
 80056e4:	2000      	movs	r0, #0
 80056e6:	4929      	ldr	r1, [pc, #164]	; (800578c <_dtoa_r+0x5bc>)
 80056e8:	f7fb f820 	bl	800072c <__aeabi_ddiv>
 80056ec:	463b      	mov	r3, r7
 80056ee:	4632      	mov	r2, r6
 80056f0:	f7fa fd3a 	bl	8000168 <__aeabi_dsub>
 80056f4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80056f8:	9f03      	ldr	r7, [sp, #12]
 80056fa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80056fe:	f7fb f99b 	bl	8000a38 <__aeabi_d2iz>
 8005702:	4604      	mov	r4, r0
 8005704:	f7fa fe7e 	bl	8000404 <__aeabi_i2d>
 8005708:	4602      	mov	r2, r0
 800570a:	460b      	mov	r3, r1
 800570c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005710:	f7fa fd2a 	bl	8000168 <__aeabi_dsub>
 8005714:	4602      	mov	r2, r0
 8005716:	460b      	mov	r3, r1
 8005718:	3430      	adds	r4, #48	; 0x30
 800571a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800571e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005722:	f807 4b01 	strb.w	r4, [r7], #1
 8005726:	f7fb f949 	bl	80009bc <__aeabi_dcmplt>
 800572a:	2800      	cmp	r0, #0
 800572c:	d174      	bne.n	8005818 <_dtoa_r+0x648>
 800572e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005732:	2000      	movs	r0, #0
 8005734:	4911      	ldr	r1, [pc, #68]	; (800577c <_dtoa_r+0x5ac>)
 8005736:	f7fa fd17 	bl	8000168 <__aeabi_dsub>
 800573a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800573e:	f7fb f93d 	bl	80009bc <__aeabi_dcmplt>
 8005742:	2800      	cmp	r0, #0
 8005744:	f040 80b7 	bne.w	80058b6 <_dtoa_r+0x6e6>
 8005748:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800574a:	429f      	cmp	r7, r3
 800574c:	f43f af7a 	beq.w	8005644 <_dtoa_r+0x474>
 8005750:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005754:	2200      	movs	r2, #0
 8005756:	4b0a      	ldr	r3, [pc, #40]	; (8005780 <_dtoa_r+0x5b0>)
 8005758:	f7fa febe 	bl	80004d8 <__aeabi_dmul>
 800575c:	2200      	movs	r2, #0
 800575e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005762:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005766:	4b06      	ldr	r3, [pc, #24]	; (8005780 <_dtoa_r+0x5b0>)
 8005768:	f7fa feb6 	bl	80004d8 <__aeabi_dmul>
 800576c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005770:	e7c3      	b.n	80056fa <_dtoa_r+0x52a>
 8005772:	bf00      	nop
 8005774:	08008950 	.word	0x08008950
 8005778:	08008928 	.word	0x08008928
 800577c:	3ff00000 	.word	0x3ff00000
 8005780:	40240000 	.word	0x40240000
 8005784:	401c0000 	.word	0x401c0000
 8005788:	40140000 	.word	0x40140000
 800578c:	3fe00000 	.word	0x3fe00000
 8005790:	4630      	mov	r0, r6
 8005792:	4639      	mov	r1, r7
 8005794:	f7fa fea0 	bl	80004d8 <__aeabi_dmul>
 8005798:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800579a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800579e:	9c03      	ldr	r4, [sp, #12]
 80057a0:	9314      	str	r3, [sp, #80]	; 0x50
 80057a2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80057a6:	f7fb f947 	bl	8000a38 <__aeabi_d2iz>
 80057aa:	9015      	str	r0, [sp, #84]	; 0x54
 80057ac:	f7fa fe2a 	bl	8000404 <__aeabi_i2d>
 80057b0:	4602      	mov	r2, r0
 80057b2:	460b      	mov	r3, r1
 80057b4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80057b8:	f7fa fcd6 	bl	8000168 <__aeabi_dsub>
 80057bc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80057be:	4606      	mov	r6, r0
 80057c0:	3330      	adds	r3, #48	; 0x30
 80057c2:	f804 3b01 	strb.w	r3, [r4], #1
 80057c6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80057c8:	460f      	mov	r7, r1
 80057ca:	429c      	cmp	r4, r3
 80057cc:	f04f 0200 	mov.w	r2, #0
 80057d0:	d124      	bne.n	800581c <_dtoa_r+0x64c>
 80057d2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80057d6:	4bb0      	ldr	r3, [pc, #704]	; (8005a98 <_dtoa_r+0x8c8>)
 80057d8:	f7fa fcc8 	bl	800016c <__adddf3>
 80057dc:	4602      	mov	r2, r0
 80057de:	460b      	mov	r3, r1
 80057e0:	4630      	mov	r0, r6
 80057e2:	4639      	mov	r1, r7
 80057e4:	f7fb f908 	bl	80009f8 <__aeabi_dcmpgt>
 80057e8:	2800      	cmp	r0, #0
 80057ea:	d163      	bne.n	80058b4 <_dtoa_r+0x6e4>
 80057ec:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80057f0:	2000      	movs	r0, #0
 80057f2:	49a9      	ldr	r1, [pc, #676]	; (8005a98 <_dtoa_r+0x8c8>)
 80057f4:	f7fa fcb8 	bl	8000168 <__aeabi_dsub>
 80057f8:	4602      	mov	r2, r0
 80057fa:	460b      	mov	r3, r1
 80057fc:	4630      	mov	r0, r6
 80057fe:	4639      	mov	r1, r7
 8005800:	f7fb f8dc 	bl	80009bc <__aeabi_dcmplt>
 8005804:	2800      	cmp	r0, #0
 8005806:	f43f af1d 	beq.w	8005644 <_dtoa_r+0x474>
 800580a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800580c:	1e7b      	subs	r3, r7, #1
 800580e:	9314      	str	r3, [sp, #80]	; 0x50
 8005810:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8005814:	2b30      	cmp	r3, #48	; 0x30
 8005816:	d0f8      	beq.n	800580a <_dtoa_r+0x63a>
 8005818:	46c2      	mov	sl, r8
 800581a:	e03b      	b.n	8005894 <_dtoa_r+0x6c4>
 800581c:	4b9f      	ldr	r3, [pc, #636]	; (8005a9c <_dtoa_r+0x8cc>)
 800581e:	f7fa fe5b 	bl	80004d8 <__aeabi_dmul>
 8005822:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005826:	e7bc      	b.n	80057a2 <_dtoa_r+0x5d2>
 8005828:	9f03      	ldr	r7, [sp, #12]
 800582a:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800582e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005832:	4640      	mov	r0, r8
 8005834:	4649      	mov	r1, r9
 8005836:	f7fa ff79 	bl	800072c <__aeabi_ddiv>
 800583a:	f7fb f8fd 	bl	8000a38 <__aeabi_d2iz>
 800583e:	4604      	mov	r4, r0
 8005840:	f7fa fde0 	bl	8000404 <__aeabi_i2d>
 8005844:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005848:	f7fa fe46 	bl	80004d8 <__aeabi_dmul>
 800584c:	4602      	mov	r2, r0
 800584e:	460b      	mov	r3, r1
 8005850:	4640      	mov	r0, r8
 8005852:	4649      	mov	r1, r9
 8005854:	f7fa fc88 	bl	8000168 <__aeabi_dsub>
 8005858:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800585c:	f807 6b01 	strb.w	r6, [r7], #1
 8005860:	9e03      	ldr	r6, [sp, #12]
 8005862:	f8dd c020 	ldr.w	ip, [sp, #32]
 8005866:	1bbe      	subs	r6, r7, r6
 8005868:	45b4      	cmp	ip, r6
 800586a:	4602      	mov	r2, r0
 800586c:	460b      	mov	r3, r1
 800586e:	d136      	bne.n	80058de <_dtoa_r+0x70e>
 8005870:	f7fa fc7c 	bl	800016c <__adddf3>
 8005874:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005878:	4680      	mov	r8, r0
 800587a:	4689      	mov	r9, r1
 800587c:	f7fb f8bc 	bl	80009f8 <__aeabi_dcmpgt>
 8005880:	bb58      	cbnz	r0, 80058da <_dtoa_r+0x70a>
 8005882:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005886:	4640      	mov	r0, r8
 8005888:	4649      	mov	r1, r9
 800588a:	f7fb f88d 	bl	80009a8 <__aeabi_dcmpeq>
 800588e:	b108      	cbz	r0, 8005894 <_dtoa_r+0x6c4>
 8005890:	07e1      	lsls	r1, r4, #31
 8005892:	d422      	bmi.n	80058da <_dtoa_r+0x70a>
 8005894:	4628      	mov	r0, r5
 8005896:	4659      	mov	r1, fp
 8005898:	f000 fbea 	bl	8006070 <_Bfree>
 800589c:	2300      	movs	r3, #0
 800589e:	703b      	strb	r3, [r7, #0]
 80058a0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80058a2:	f10a 0001 	add.w	r0, sl, #1
 80058a6:	6018      	str	r0, [r3, #0]
 80058a8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	f43f acde 	beq.w	800526c <_dtoa_r+0x9c>
 80058b0:	601f      	str	r7, [r3, #0]
 80058b2:	e4db      	b.n	800526c <_dtoa_r+0x9c>
 80058b4:	4627      	mov	r7, r4
 80058b6:	463b      	mov	r3, r7
 80058b8:	461f      	mov	r7, r3
 80058ba:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80058be:	2a39      	cmp	r2, #57	; 0x39
 80058c0:	d107      	bne.n	80058d2 <_dtoa_r+0x702>
 80058c2:	9a03      	ldr	r2, [sp, #12]
 80058c4:	429a      	cmp	r2, r3
 80058c6:	d1f7      	bne.n	80058b8 <_dtoa_r+0x6e8>
 80058c8:	2230      	movs	r2, #48	; 0x30
 80058ca:	9903      	ldr	r1, [sp, #12]
 80058cc:	f108 0801 	add.w	r8, r8, #1
 80058d0:	700a      	strb	r2, [r1, #0]
 80058d2:	781a      	ldrb	r2, [r3, #0]
 80058d4:	3201      	adds	r2, #1
 80058d6:	701a      	strb	r2, [r3, #0]
 80058d8:	e79e      	b.n	8005818 <_dtoa_r+0x648>
 80058da:	46d0      	mov	r8, sl
 80058dc:	e7eb      	b.n	80058b6 <_dtoa_r+0x6e6>
 80058de:	2200      	movs	r2, #0
 80058e0:	4b6e      	ldr	r3, [pc, #440]	; (8005a9c <_dtoa_r+0x8cc>)
 80058e2:	f7fa fdf9 	bl	80004d8 <__aeabi_dmul>
 80058e6:	2200      	movs	r2, #0
 80058e8:	2300      	movs	r3, #0
 80058ea:	4680      	mov	r8, r0
 80058ec:	4689      	mov	r9, r1
 80058ee:	f7fb f85b 	bl	80009a8 <__aeabi_dcmpeq>
 80058f2:	2800      	cmp	r0, #0
 80058f4:	d09b      	beq.n	800582e <_dtoa_r+0x65e>
 80058f6:	e7cd      	b.n	8005894 <_dtoa_r+0x6c4>
 80058f8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80058fa:	2a00      	cmp	r2, #0
 80058fc:	f000 80d0 	beq.w	8005aa0 <_dtoa_r+0x8d0>
 8005900:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8005902:	2a01      	cmp	r2, #1
 8005904:	f300 80ae 	bgt.w	8005a64 <_dtoa_r+0x894>
 8005908:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800590a:	2a00      	cmp	r2, #0
 800590c:	f000 80a6 	beq.w	8005a5c <_dtoa_r+0x88c>
 8005910:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005914:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8005916:	9f06      	ldr	r7, [sp, #24]
 8005918:	9a06      	ldr	r2, [sp, #24]
 800591a:	2101      	movs	r1, #1
 800591c:	441a      	add	r2, r3
 800591e:	9206      	str	r2, [sp, #24]
 8005920:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005922:	4628      	mov	r0, r5
 8005924:	441a      	add	r2, r3
 8005926:	9209      	str	r2, [sp, #36]	; 0x24
 8005928:	f000 fc58 	bl	80061dc <__i2b>
 800592c:	4606      	mov	r6, r0
 800592e:	2f00      	cmp	r7, #0
 8005930:	dd0c      	ble.n	800594c <_dtoa_r+0x77c>
 8005932:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005934:	2b00      	cmp	r3, #0
 8005936:	dd09      	ble.n	800594c <_dtoa_r+0x77c>
 8005938:	42bb      	cmp	r3, r7
 800593a:	bfa8      	it	ge
 800593c:	463b      	movge	r3, r7
 800593e:	9a06      	ldr	r2, [sp, #24]
 8005940:	1aff      	subs	r7, r7, r3
 8005942:	1ad2      	subs	r2, r2, r3
 8005944:	9206      	str	r2, [sp, #24]
 8005946:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005948:	1ad3      	subs	r3, r2, r3
 800594a:	9309      	str	r3, [sp, #36]	; 0x24
 800594c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800594e:	b1f3      	cbz	r3, 800598e <_dtoa_r+0x7be>
 8005950:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005952:	2b00      	cmp	r3, #0
 8005954:	f000 80a8 	beq.w	8005aa8 <_dtoa_r+0x8d8>
 8005958:	2c00      	cmp	r4, #0
 800595a:	dd10      	ble.n	800597e <_dtoa_r+0x7ae>
 800595c:	4631      	mov	r1, r6
 800595e:	4622      	mov	r2, r4
 8005960:	4628      	mov	r0, r5
 8005962:	f000 fcf9 	bl	8006358 <__pow5mult>
 8005966:	465a      	mov	r2, fp
 8005968:	4601      	mov	r1, r0
 800596a:	4606      	mov	r6, r0
 800596c:	4628      	mov	r0, r5
 800596e:	f000 fc4b 	bl	8006208 <__multiply>
 8005972:	4680      	mov	r8, r0
 8005974:	4659      	mov	r1, fp
 8005976:	4628      	mov	r0, r5
 8005978:	f000 fb7a 	bl	8006070 <_Bfree>
 800597c:	46c3      	mov	fp, r8
 800597e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005980:	1b1a      	subs	r2, r3, r4
 8005982:	d004      	beq.n	800598e <_dtoa_r+0x7be>
 8005984:	4659      	mov	r1, fp
 8005986:	4628      	mov	r0, r5
 8005988:	f000 fce6 	bl	8006358 <__pow5mult>
 800598c:	4683      	mov	fp, r0
 800598e:	2101      	movs	r1, #1
 8005990:	4628      	mov	r0, r5
 8005992:	f000 fc23 	bl	80061dc <__i2b>
 8005996:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005998:	4604      	mov	r4, r0
 800599a:	2b00      	cmp	r3, #0
 800599c:	f340 8086 	ble.w	8005aac <_dtoa_r+0x8dc>
 80059a0:	461a      	mov	r2, r3
 80059a2:	4601      	mov	r1, r0
 80059a4:	4628      	mov	r0, r5
 80059a6:	f000 fcd7 	bl	8006358 <__pow5mult>
 80059aa:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80059ac:	4604      	mov	r4, r0
 80059ae:	2b01      	cmp	r3, #1
 80059b0:	dd7f      	ble.n	8005ab2 <_dtoa_r+0x8e2>
 80059b2:	f04f 0800 	mov.w	r8, #0
 80059b6:	6923      	ldr	r3, [r4, #16]
 80059b8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80059bc:	6918      	ldr	r0, [r3, #16]
 80059be:	f000 fbbf 	bl	8006140 <__hi0bits>
 80059c2:	f1c0 0020 	rsb	r0, r0, #32
 80059c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80059c8:	4418      	add	r0, r3
 80059ca:	f010 001f 	ands.w	r0, r0, #31
 80059ce:	f000 8092 	beq.w	8005af6 <_dtoa_r+0x926>
 80059d2:	f1c0 0320 	rsb	r3, r0, #32
 80059d6:	2b04      	cmp	r3, #4
 80059d8:	f340 808a 	ble.w	8005af0 <_dtoa_r+0x920>
 80059dc:	f1c0 001c 	rsb	r0, r0, #28
 80059e0:	9b06      	ldr	r3, [sp, #24]
 80059e2:	4407      	add	r7, r0
 80059e4:	4403      	add	r3, r0
 80059e6:	9306      	str	r3, [sp, #24]
 80059e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80059ea:	4403      	add	r3, r0
 80059ec:	9309      	str	r3, [sp, #36]	; 0x24
 80059ee:	9b06      	ldr	r3, [sp, #24]
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	dd05      	ble.n	8005a00 <_dtoa_r+0x830>
 80059f4:	4659      	mov	r1, fp
 80059f6:	461a      	mov	r2, r3
 80059f8:	4628      	mov	r0, r5
 80059fa:	f000 fd07 	bl	800640c <__lshift>
 80059fe:	4683      	mov	fp, r0
 8005a00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	dd05      	ble.n	8005a12 <_dtoa_r+0x842>
 8005a06:	4621      	mov	r1, r4
 8005a08:	461a      	mov	r2, r3
 8005a0a:	4628      	mov	r0, r5
 8005a0c:	f000 fcfe 	bl	800640c <__lshift>
 8005a10:	4604      	mov	r4, r0
 8005a12:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d070      	beq.n	8005afa <_dtoa_r+0x92a>
 8005a18:	4621      	mov	r1, r4
 8005a1a:	4658      	mov	r0, fp
 8005a1c:	f000 fd66 	bl	80064ec <__mcmp>
 8005a20:	2800      	cmp	r0, #0
 8005a22:	da6a      	bge.n	8005afa <_dtoa_r+0x92a>
 8005a24:	2300      	movs	r3, #0
 8005a26:	4659      	mov	r1, fp
 8005a28:	220a      	movs	r2, #10
 8005a2a:	4628      	mov	r0, r5
 8005a2c:	f000 fb42 	bl	80060b4 <__multadd>
 8005a30:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005a32:	4683      	mov	fp, r0
 8005a34:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	f000 8194 	beq.w	8005d66 <_dtoa_r+0xb96>
 8005a3e:	4631      	mov	r1, r6
 8005a40:	2300      	movs	r3, #0
 8005a42:	220a      	movs	r2, #10
 8005a44:	4628      	mov	r0, r5
 8005a46:	f000 fb35 	bl	80060b4 <__multadd>
 8005a4a:	f1b9 0f00 	cmp.w	r9, #0
 8005a4e:	4606      	mov	r6, r0
 8005a50:	f300 8093 	bgt.w	8005b7a <_dtoa_r+0x9aa>
 8005a54:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005a56:	2b02      	cmp	r3, #2
 8005a58:	dc57      	bgt.n	8005b0a <_dtoa_r+0x93a>
 8005a5a:	e08e      	b.n	8005b7a <_dtoa_r+0x9aa>
 8005a5c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8005a5e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005a62:	e757      	b.n	8005914 <_dtoa_r+0x744>
 8005a64:	9b08      	ldr	r3, [sp, #32]
 8005a66:	1e5c      	subs	r4, r3, #1
 8005a68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005a6a:	42a3      	cmp	r3, r4
 8005a6c:	bfb7      	itett	lt
 8005a6e:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8005a70:	1b1c      	subge	r4, r3, r4
 8005a72:	1ae2      	sublt	r2, r4, r3
 8005a74:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8005a76:	bfbe      	ittt	lt
 8005a78:	940a      	strlt	r4, [sp, #40]	; 0x28
 8005a7a:	189b      	addlt	r3, r3, r2
 8005a7c:	930e      	strlt	r3, [sp, #56]	; 0x38
 8005a7e:	9b08      	ldr	r3, [sp, #32]
 8005a80:	bfb8      	it	lt
 8005a82:	2400      	movlt	r4, #0
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	bfbb      	ittet	lt
 8005a88:	9b06      	ldrlt	r3, [sp, #24]
 8005a8a:	9a08      	ldrlt	r2, [sp, #32]
 8005a8c:	9f06      	ldrge	r7, [sp, #24]
 8005a8e:	1a9f      	sublt	r7, r3, r2
 8005a90:	bfac      	ite	ge
 8005a92:	9b08      	ldrge	r3, [sp, #32]
 8005a94:	2300      	movlt	r3, #0
 8005a96:	e73f      	b.n	8005918 <_dtoa_r+0x748>
 8005a98:	3fe00000 	.word	0x3fe00000
 8005a9c:	40240000 	.word	0x40240000
 8005aa0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8005aa2:	9f06      	ldr	r7, [sp, #24]
 8005aa4:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8005aa6:	e742      	b.n	800592e <_dtoa_r+0x75e>
 8005aa8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005aaa:	e76b      	b.n	8005984 <_dtoa_r+0x7b4>
 8005aac:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005aae:	2b01      	cmp	r3, #1
 8005ab0:	dc19      	bgt.n	8005ae6 <_dtoa_r+0x916>
 8005ab2:	9b04      	ldr	r3, [sp, #16]
 8005ab4:	b9bb      	cbnz	r3, 8005ae6 <_dtoa_r+0x916>
 8005ab6:	9b05      	ldr	r3, [sp, #20]
 8005ab8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005abc:	b99b      	cbnz	r3, 8005ae6 <_dtoa_r+0x916>
 8005abe:	9b05      	ldr	r3, [sp, #20]
 8005ac0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005ac4:	0d1b      	lsrs	r3, r3, #20
 8005ac6:	051b      	lsls	r3, r3, #20
 8005ac8:	b183      	cbz	r3, 8005aec <_dtoa_r+0x91c>
 8005aca:	f04f 0801 	mov.w	r8, #1
 8005ace:	9b06      	ldr	r3, [sp, #24]
 8005ad0:	3301      	adds	r3, #1
 8005ad2:	9306      	str	r3, [sp, #24]
 8005ad4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ad6:	3301      	adds	r3, #1
 8005ad8:	9309      	str	r3, [sp, #36]	; 0x24
 8005ada:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	f47f af6a 	bne.w	80059b6 <_dtoa_r+0x7e6>
 8005ae2:	2001      	movs	r0, #1
 8005ae4:	e76f      	b.n	80059c6 <_dtoa_r+0x7f6>
 8005ae6:	f04f 0800 	mov.w	r8, #0
 8005aea:	e7f6      	b.n	8005ada <_dtoa_r+0x90a>
 8005aec:	4698      	mov	r8, r3
 8005aee:	e7f4      	b.n	8005ada <_dtoa_r+0x90a>
 8005af0:	f43f af7d 	beq.w	80059ee <_dtoa_r+0x81e>
 8005af4:	4618      	mov	r0, r3
 8005af6:	301c      	adds	r0, #28
 8005af8:	e772      	b.n	80059e0 <_dtoa_r+0x810>
 8005afa:	9b08      	ldr	r3, [sp, #32]
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	dc36      	bgt.n	8005b6e <_dtoa_r+0x99e>
 8005b00:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005b02:	2b02      	cmp	r3, #2
 8005b04:	dd33      	ble.n	8005b6e <_dtoa_r+0x99e>
 8005b06:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005b0a:	f1b9 0f00 	cmp.w	r9, #0
 8005b0e:	d10d      	bne.n	8005b2c <_dtoa_r+0x95c>
 8005b10:	4621      	mov	r1, r4
 8005b12:	464b      	mov	r3, r9
 8005b14:	2205      	movs	r2, #5
 8005b16:	4628      	mov	r0, r5
 8005b18:	f000 facc 	bl	80060b4 <__multadd>
 8005b1c:	4601      	mov	r1, r0
 8005b1e:	4604      	mov	r4, r0
 8005b20:	4658      	mov	r0, fp
 8005b22:	f000 fce3 	bl	80064ec <__mcmp>
 8005b26:	2800      	cmp	r0, #0
 8005b28:	f73f adb8 	bgt.w	800569c <_dtoa_r+0x4cc>
 8005b2c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005b2e:	9f03      	ldr	r7, [sp, #12]
 8005b30:	ea6f 0a03 	mvn.w	sl, r3
 8005b34:	f04f 0800 	mov.w	r8, #0
 8005b38:	4621      	mov	r1, r4
 8005b3a:	4628      	mov	r0, r5
 8005b3c:	f000 fa98 	bl	8006070 <_Bfree>
 8005b40:	2e00      	cmp	r6, #0
 8005b42:	f43f aea7 	beq.w	8005894 <_dtoa_r+0x6c4>
 8005b46:	f1b8 0f00 	cmp.w	r8, #0
 8005b4a:	d005      	beq.n	8005b58 <_dtoa_r+0x988>
 8005b4c:	45b0      	cmp	r8, r6
 8005b4e:	d003      	beq.n	8005b58 <_dtoa_r+0x988>
 8005b50:	4641      	mov	r1, r8
 8005b52:	4628      	mov	r0, r5
 8005b54:	f000 fa8c 	bl	8006070 <_Bfree>
 8005b58:	4631      	mov	r1, r6
 8005b5a:	4628      	mov	r0, r5
 8005b5c:	f000 fa88 	bl	8006070 <_Bfree>
 8005b60:	e698      	b.n	8005894 <_dtoa_r+0x6c4>
 8005b62:	2400      	movs	r4, #0
 8005b64:	4626      	mov	r6, r4
 8005b66:	e7e1      	b.n	8005b2c <_dtoa_r+0x95c>
 8005b68:	46c2      	mov	sl, r8
 8005b6a:	4626      	mov	r6, r4
 8005b6c:	e596      	b.n	800569c <_dtoa_r+0x4cc>
 8005b6e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005b70:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	f000 80fd 	beq.w	8005d74 <_dtoa_r+0xba4>
 8005b7a:	2f00      	cmp	r7, #0
 8005b7c:	dd05      	ble.n	8005b8a <_dtoa_r+0x9ba>
 8005b7e:	4631      	mov	r1, r6
 8005b80:	463a      	mov	r2, r7
 8005b82:	4628      	mov	r0, r5
 8005b84:	f000 fc42 	bl	800640c <__lshift>
 8005b88:	4606      	mov	r6, r0
 8005b8a:	f1b8 0f00 	cmp.w	r8, #0
 8005b8e:	d05c      	beq.n	8005c4a <_dtoa_r+0xa7a>
 8005b90:	4628      	mov	r0, r5
 8005b92:	6871      	ldr	r1, [r6, #4]
 8005b94:	f000 fa2c 	bl	8005ff0 <_Balloc>
 8005b98:	4607      	mov	r7, r0
 8005b9a:	b928      	cbnz	r0, 8005ba8 <_dtoa_r+0x9d8>
 8005b9c:	4602      	mov	r2, r0
 8005b9e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8005ba2:	4b7f      	ldr	r3, [pc, #508]	; (8005da0 <_dtoa_r+0xbd0>)
 8005ba4:	f7ff bb28 	b.w	80051f8 <_dtoa_r+0x28>
 8005ba8:	6932      	ldr	r2, [r6, #16]
 8005baa:	f106 010c 	add.w	r1, r6, #12
 8005bae:	3202      	adds	r2, #2
 8005bb0:	0092      	lsls	r2, r2, #2
 8005bb2:	300c      	adds	r0, #12
 8005bb4:	f000 fa0e 	bl	8005fd4 <memcpy>
 8005bb8:	2201      	movs	r2, #1
 8005bba:	4639      	mov	r1, r7
 8005bbc:	4628      	mov	r0, r5
 8005bbe:	f000 fc25 	bl	800640c <__lshift>
 8005bc2:	46b0      	mov	r8, r6
 8005bc4:	4606      	mov	r6, r0
 8005bc6:	9b03      	ldr	r3, [sp, #12]
 8005bc8:	3301      	adds	r3, #1
 8005bca:	9308      	str	r3, [sp, #32]
 8005bcc:	9b03      	ldr	r3, [sp, #12]
 8005bce:	444b      	add	r3, r9
 8005bd0:	930a      	str	r3, [sp, #40]	; 0x28
 8005bd2:	9b04      	ldr	r3, [sp, #16]
 8005bd4:	f003 0301 	and.w	r3, r3, #1
 8005bd8:	9309      	str	r3, [sp, #36]	; 0x24
 8005bda:	9b08      	ldr	r3, [sp, #32]
 8005bdc:	4621      	mov	r1, r4
 8005bde:	3b01      	subs	r3, #1
 8005be0:	4658      	mov	r0, fp
 8005be2:	9304      	str	r3, [sp, #16]
 8005be4:	f7ff fa66 	bl	80050b4 <quorem>
 8005be8:	4603      	mov	r3, r0
 8005bea:	4641      	mov	r1, r8
 8005bec:	3330      	adds	r3, #48	; 0x30
 8005bee:	9006      	str	r0, [sp, #24]
 8005bf0:	4658      	mov	r0, fp
 8005bf2:	930b      	str	r3, [sp, #44]	; 0x2c
 8005bf4:	f000 fc7a 	bl	80064ec <__mcmp>
 8005bf8:	4632      	mov	r2, r6
 8005bfa:	4681      	mov	r9, r0
 8005bfc:	4621      	mov	r1, r4
 8005bfe:	4628      	mov	r0, r5
 8005c00:	f000 fc90 	bl	8006524 <__mdiff>
 8005c04:	68c2      	ldr	r2, [r0, #12]
 8005c06:	4607      	mov	r7, r0
 8005c08:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005c0a:	bb02      	cbnz	r2, 8005c4e <_dtoa_r+0xa7e>
 8005c0c:	4601      	mov	r1, r0
 8005c0e:	4658      	mov	r0, fp
 8005c10:	f000 fc6c 	bl	80064ec <__mcmp>
 8005c14:	4602      	mov	r2, r0
 8005c16:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005c18:	4639      	mov	r1, r7
 8005c1a:	4628      	mov	r0, r5
 8005c1c:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8005c20:	f000 fa26 	bl	8006070 <_Bfree>
 8005c24:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005c26:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005c28:	9f08      	ldr	r7, [sp, #32]
 8005c2a:	ea43 0102 	orr.w	r1, r3, r2
 8005c2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c30:	430b      	orrs	r3, r1
 8005c32:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005c34:	d10d      	bne.n	8005c52 <_dtoa_r+0xa82>
 8005c36:	2b39      	cmp	r3, #57	; 0x39
 8005c38:	d029      	beq.n	8005c8e <_dtoa_r+0xabe>
 8005c3a:	f1b9 0f00 	cmp.w	r9, #0
 8005c3e:	dd01      	ble.n	8005c44 <_dtoa_r+0xa74>
 8005c40:	9b06      	ldr	r3, [sp, #24]
 8005c42:	3331      	adds	r3, #49	; 0x31
 8005c44:	9a04      	ldr	r2, [sp, #16]
 8005c46:	7013      	strb	r3, [r2, #0]
 8005c48:	e776      	b.n	8005b38 <_dtoa_r+0x968>
 8005c4a:	4630      	mov	r0, r6
 8005c4c:	e7b9      	b.n	8005bc2 <_dtoa_r+0x9f2>
 8005c4e:	2201      	movs	r2, #1
 8005c50:	e7e2      	b.n	8005c18 <_dtoa_r+0xa48>
 8005c52:	f1b9 0f00 	cmp.w	r9, #0
 8005c56:	db06      	blt.n	8005c66 <_dtoa_r+0xa96>
 8005c58:	9922      	ldr	r1, [sp, #136]	; 0x88
 8005c5a:	ea41 0909 	orr.w	r9, r1, r9
 8005c5e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005c60:	ea59 0101 	orrs.w	r1, r9, r1
 8005c64:	d120      	bne.n	8005ca8 <_dtoa_r+0xad8>
 8005c66:	2a00      	cmp	r2, #0
 8005c68:	ddec      	ble.n	8005c44 <_dtoa_r+0xa74>
 8005c6a:	4659      	mov	r1, fp
 8005c6c:	2201      	movs	r2, #1
 8005c6e:	4628      	mov	r0, r5
 8005c70:	9308      	str	r3, [sp, #32]
 8005c72:	f000 fbcb 	bl	800640c <__lshift>
 8005c76:	4621      	mov	r1, r4
 8005c78:	4683      	mov	fp, r0
 8005c7a:	f000 fc37 	bl	80064ec <__mcmp>
 8005c7e:	2800      	cmp	r0, #0
 8005c80:	9b08      	ldr	r3, [sp, #32]
 8005c82:	dc02      	bgt.n	8005c8a <_dtoa_r+0xaba>
 8005c84:	d1de      	bne.n	8005c44 <_dtoa_r+0xa74>
 8005c86:	07da      	lsls	r2, r3, #31
 8005c88:	d5dc      	bpl.n	8005c44 <_dtoa_r+0xa74>
 8005c8a:	2b39      	cmp	r3, #57	; 0x39
 8005c8c:	d1d8      	bne.n	8005c40 <_dtoa_r+0xa70>
 8005c8e:	2339      	movs	r3, #57	; 0x39
 8005c90:	9a04      	ldr	r2, [sp, #16]
 8005c92:	7013      	strb	r3, [r2, #0]
 8005c94:	463b      	mov	r3, r7
 8005c96:	461f      	mov	r7, r3
 8005c98:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8005c9c:	3b01      	subs	r3, #1
 8005c9e:	2a39      	cmp	r2, #57	; 0x39
 8005ca0:	d050      	beq.n	8005d44 <_dtoa_r+0xb74>
 8005ca2:	3201      	adds	r2, #1
 8005ca4:	701a      	strb	r2, [r3, #0]
 8005ca6:	e747      	b.n	8005b38 <_dtoa_r+0x968>
 8005ca8:	2a00      	cmp	r2, #0
 8005caa:	dd03      	ble.n	8005cb4 <_dtoa_r+0xae4>
 8005cac:	2b39      	cmp	r3, #57	; 0x39
 8005cae:	d0ee      	beq.n	8005c8e <_dtoa_r+0xabe>
 8005cb0:	3301      	adds	r3, #1
 8005cb2:	e7c7      	b.n	8005c44 <_dtoa_r+0xa74>
 8005cb4:	9a08      	ldr	r2, [sp, #32]
 8005cb6:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005cb8:	f802 3c01 	strb.w	r3, [r2, #-1]
 8005cbc:	428a      	cmp	r2, r1
 8005cbe:	d02a      	beq.n	8005d16 <_dtoa_r+0xb46>
 8005cc0:	4659      	mov	r1, fp
 8005cc2:	2300      	movs	r3, #0
 8005cc4:	220a      	movs	r2, #10
 8005cc6:	4628      	mov	r0, r5
 8005cc8:	f000 f9f4 	bl	80060b4 <__multadd>
 8005ccc:	45b0      	cmp	r8, r6
 8005cce:	4683      	mov	fp, r0
 8005cd0:	f04f 0300 	mov.w	r3, #0
 8005cd4:	f04f 020a 	mov.w	r2, #10
 8005cd8:	4641      	mov	r1, r8
 8005cda:	4628      	mov	r0, r5
 8005cdc:	d107      	bne.n	8005cee <_dtoa_r+0xb1e>
 8005cde:	f000 f9e9 	bl	80060b4 <__multadd>
 8005ce2:	4680      	mov	r8, r0
 8005ce4:	4606      	mov	r6, r0
 8005ce6:	9b08      	ldr	r3, [sp, #32]
 8005ce8:	3301      	adds	r3, #1
 8005cea:	9308      	str	r3, [sp, #32]
 8005cec:	e775      	b.n	8005bda <_dtoa_r+0xa0a>
 8005cee:	f000 f9e1 	bl	80060b4 <__multadd>
 8005cf2:	4631      	mov	r1, r6
 8005cf4:	4680      	mov	r8, r0
 8005cf6:	2300      	movs	r3, #0
 8005cf8:	220a      	movs	r2, #10
 8005cfa:	4628      	mov	r0, r5
 8005cfc:	f000 f9da 	bl	80060b4 <__multadd>
 8005d00:	4606      	mov	r6, r0
 8005d02:	e7f0      	b.n	8005ce6 <_dtoa_r+0xb16>
 8005d04:	f1b9 0f00 	cmp.w	r9, #0
 8005d08:	bfcc      	ite	gt
 8005d0a:	464f      	movgt	r7, r9
 8005d0c:	2701      	movle	r7, #1
 8005d0e:	f04f 0800 	mov.w	r8, #0
 8005d12:	9a03      	ldr	r2, [sp, #12]
 8005d14:	4417      	add	r7, r2
 8005d16:	4659      	mov	r1, fp
 8005d18:	2201      	movs	r2, #1
 8005d1a:	4628      	mov	r0, r5
 8005d1c:	9308      	str	r3, [sp, #32]
 8005d1e:	f000 fb75 	bl	800640c <__lshift>
 8005d22:	4621      	mov	r1, r4
 8005d24:	4683      	mov	fp, r0
 8005d26:	f000 fbe1 	bl	80064ec <__mcmp>
 8005d2a:	2800      	cmp	r0, #0
 8005d2c:	dcb2      	bgt.n	8005c94 <_dtoa_r+0xac4>
 8005d2e:	d102      	bne.n	8005d36 <_dtoa_r+0xb66>
 8005d30:	9b08      	ldr	r3, [sp, #32]
 8005d32:	07db      	lsls	r3, r3, #31
 8005d34:	d4ae      	bmi.n	8005c94 <_dtoa_r+0xac4>
 8005d36:	463b      	mov	r3, r7
 8005d38:	461f      	mov	r7, r3
 8005d3a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005d3e:	2a30      	cmp	r2, #48	; 0x30
 8005d40:	d0fa      	beq.n	8005d38 <_dtoa_r+0xb68>
 8005d42:	e6f9      	b.n	8005b38 <_dtoa_r+0x968>
 8005d44:	9a03      	ldr	r2, [sp, #12]
 8005d46:	429a      	cmp	r2, r3
 8005d48:	d1a5      	bne.n	8005c96 <_dtoa_r+0xac6>
 8005d4a:	2331      	movs	r3, #49	; 0x31
 8005d4c:	f10a 0a01 	add.w	sl, sl, #1
 8005d50:	e779      	b.n	8005c46 <_dtoa_r+0xa76>
 8005d52:	4b14      	ldr	r3, [pc, #80]	; (8005da4 <_dtoa_r+0xbd4>)
 8005d54:	f7ff baa8 	b.w	80052a8 <_dtoa_r+0xd8>
 8005d58:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	f47f aa81 	bne.w	8005262 <_dtoa_r+0x92>
 8005d60:	4b11      	ldr	r3, [pc, #68]	; (8005da8 <_dtoa_r+0xbd8>)
 8005d62:	f7ff baa1 	b.w	80052a8 <_dtoa_r+0xd8>
 8005d66:	f1b9 0f00 	cmp.w	r9, #0
 8005d6a:	dc03      	bgt.n	8005d74 <_dtoa_r+0xba4>
 8005d6c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005d6e:	2b02      	cmp	r3, #2
 8005d70:	f73f aecb 	bgt.w	8005b0a <_dtoa_r+0x93a>
 8005d74:	9f03      	ldr	r7, [sp, #12]
 8005d76:	4621      	mov	r1, r4
 8005d78:	4658      	mov	r0, fp
 8005d7a:	f7ff f99b 	bl	80050b4 <quorem>
 8005d7e:	9a03      	ldr	r2, [sp, #12]
 8005d80:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8005d84:	f807 3b01 	strb.w	r3, [r7], #1
 8005d88:	1aba      	subs	r2, r7, r2
 8005d8a:	4591      	cmp	r9, r2
 8005d8c:	ddba      	ble.n	8005d04 <_dtoa_r+0xb34>
 8005d8e:	4659      	mov	r1, fp
 8005d90:	2300      	movs	r3, #0
 8005d92:	220a      	movs	r2, #10
 8005d94:	4628      	mov	r0, r5
 8005d96:	f000 f98d 	bl	80060b4 <__multadd>
 8005d9a:	4683      	mov	fp, r0
 8005d9c:	e7eb      	b.n	8005d76 <_dtoa_r+0xba6>
 8005d9e:	bf00      	nop
 8005da0:	08008857 	.word	0x08008857
 8005da4:	080087b4 	.word	0x080087b4
 8005da8:	080087d8 	.word	0x080087d8

08005dac <std>:
 8005dac:	2300      	movs	r3, #0
 8005dae:	b510      	push	{r4, lr}
 8005db0:	4604      	mov	r4, r0
 8005db2:	e9c0 3300 	strd	r3, r3, [r0]
 8005db6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005dba:	6083      	str	r3, [r0, #8]
 8005dbc:	8181      	strh	r1, [r0, #12]
 8005dbe:	6643      	str	r3, [r0, #100]	; 0x64
 8005dc0:	81c2      	strh	r2, [r0, #14]
 8005dc2:	6183      	str	r3, [r0, #24]
 8005dc4:	4619      	mov	r1, r3
 8005dc6:	2208      	movs	r2, #8
 8005dc8:	305c      	adds	r0, #92	; 0x5c
 8005dca:	f7fe fcf3 	bl	80047b4 <memset>
 8005dce:	4b05      	ldr	r3, [pc, #20]	; (8005de4 <std+0x38>)
 8005dd0:	6224      	str	r4, [r4, #32]
 8005dd2:	6263      	str	r3, [r4, #36]	; 0x24
 8005dd4:	4b04      	ldr	r3, [pc, #16]	; (8005de8 <std+0x3c>)
 8005dd6:	62a3      	str	r3, [r4, #40]	; 0x28
 8005dd8:	4b04      	ldr	r3, [pc, #16]	; (8005dec <std+0x40>)
 8005dda:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005ddc:	4b04      	ldr	r3, [pc, #16]	; (8005df0 <std+0x44>)
 8005dde:	6323      	str	r3, [r4, #48]	; 0x30
 8005de0:	bd10      	pop	{r4, pc}
 8005de2:	bf00      	nop
 8005de4:	08006ba5 	.word	0x08006ba5
 8005de8:	08006bc7 	.word	0x08006bc7
 8005dec:	08006bff 	.word	0x08006bff
 8005df0:	08006c23 	.word	0x08006c23

08005df4 <_cleanup_r>:
 8005df4:	4901      	ldr	r1, [pc, #4]	; (8005dfc <_cleanup_r+0x8>)
 8005df6:	f000 b8af 	b.w	8005f58 <_fwalk_reent>
 8005dfa:	bf00      	nop
 8005dfc:	08006f31 	.word	0x08006f31

08005e00 <__sfmoreglue>:
 8005e00:	2268      	movs	r2, #104	; 0x68
 8005e02:	b570      	push	{r4, r5, r6, lr}
 8005e04:	1e4d      	subs	r5, r1, #1
 8005e06:	4355      	muls	r5, r2
 8005e08:	460e      	mov	r6, r1
 8005e0a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005e0e:	f000 fced 	bl	80067ec <_malloc_r>
 8005e12:	4604      	mov	r4, r0
 8005e14:	b140      	cbz	r0, 8005e28 <__sfmoreglue+0x28>
 8005e16:	2100      	movs	r1, #0
 8005e18:	e9c0 1600 	strd	r1, r6, [r0]
 8005e1c:	300c      	adds	r0, #12
 8005e1e:	60a0      	str	r0, [r4, #8]
 8005e20:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005e24:	f7fe fcc6 	bl	80047b4 <memset>
 8005e28:	4620      	mov	r0, r4
 8005e2a:	bd70      	pop	{r4, r5, r6, pc}

08005e2c <__sfp_lock_acquire>:
 8005e2c:	4801      	ldr	r0, [pc, #4]	; (8005e34 <__sfp_lock_acquire+0x8>)
 8005e2e:	f000 b8b8 	b.w	8005fa2 <__retarget_lock_acquire_recursive>
 8005e32:	bf00      	nop
 8005e34:	20000a05 	.word	0x20000a05

08005e38 <__sfp_lock_release>:
 8005e38:	4801      	ldr	r0, [pc, #4]	; (8005e40 <__sfp_lock_release+0x8>)
 8005e3a:	f000 b8b3 	b.w	8005fa4 <__retarget_lock_release_recursive>
 8005e3e:	bf00      	nop
 8005e40:	20000a05 	.word	0x20000a05

08005e44 <__sinit_lock_acquire>:
 8005e44:	4801      	ldr	r0, [pc, #4]	; (8005e4c <__sinit_lock_acquire+0x8>)
 8005e46:	f000 b8ac 	b.w	8005fa2 <__retarget_lock_acquire_recursive>
 8005e4a:	bf00      	nop
 8005e4c:	20000a06 	.word	0x20000a06

08005e50 <__sinit_lock_release>:
 8005e50:	4801      	ldr	r0, [pc, #4]	; (8005e58 <__sinit_lock_release+0x8>)
 8005e52:	f000 b8a7 	b.w	8005fa4 <__retarget_lock_release_recursive>
 8005e56:	bf00      	nop
 8005e58:	20000a06 	.word	0x20000a06

08005e5c <__sinit>:
 8005e5c:	b510      	push	{r4, lr}
 8005e5e:	4604      	mov	r4, r0
 8005e60:	f7ff fff0 	bl	8005e44 <__sinit_lock_acquire>
 8005e64:	69a3      	ldr	r3, [r4, #24]
 8005e66:	b11b      	cbz	r3, 8005e70 <__sinit+0x14>
 8005e68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005e6c:	f7ff bff0 	b.w	8005e50 <__sinit_lock_release>
 8005e70:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005e74:	6523      	str	r3, [r4, #80]	; 0x50
 8005e76:	4b13      	ldr	r3, [pc, #76]	; (8005ec4 <__sinit+0x68>)
 8005e78:	4a13      	ldr	r2, [pc, #76]	; (8005ec8 <__sinit+0x6c>)
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	62a2      	str	r2, [r4, #40]	; 0x28
 8005e7e:	42a3      	cmp	r3, r4
 8005e80:	bf08      	it	eq
 8005e82:	2301      	moveq	r3, #1
 8005e84:	4620      	mov	r0, r4
 8005e86:	bf08      	it	eq
 8005e88:	61a3      	streq	r3, [r4, #24]
 8005e8a:	f000 f81f 	bl	8005ecc <__sfp>
 8005e8e:	6060      	str	r0, [r4, #4]
 8005e90:	4620      	mov	r0, r4
 8005e92:	f000 f81b 	bl	8005ecc <__sfp>
 8005e96:	60a0      	str	r0, [r4, #8]
 8005e98:	4620      	mov	r0, r4
 8005e9a:	f000 f817 	bl	8005ecc <__sfp>
 8005e9e:	2200      	movs	r2, #0
 8005ea0:	2104      	movs	r1, #4
 8005ea2:	60e0      	str	r0, [r4, #12]
 8005ea4:	6860      	ldr	r0, [r4, #4]
 8005ea6:	f7ff ff81 	bl	8005dac <std>
 8005eaa:	2201      	movs	r2, #1
 8005eac:	2109      	movs	r1, #9
 8005eae:	68a0      	ldr	r0, [r4, #8]
 8005eb0:	f7ff ff7c 	bl	8005dac <std>
 8005eb4:	2202      	movs	r2, #2
 8005eb6:	2112      	movs	r1, #18
 8005eb8:	68e0      	ldr	r0, [r4, #12]
 8005eba:	f7ff ff77 	bl	8005dac <std>
 8005ebe:	2301      	movs	r3, #1
 8005ec0:	61a3      	str	r3, [r4, #24]
 8005ec2:	e7d1      	b.n	8005e68 <__sinit+0xc>
 8005ec4:	080087a0 	.word	0x080087a0
 8005ec8:	08005df5 	.word	0x08005df5

08005ecc <__sfp>:
 8005ecc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ece:	4607      	mov	r7, r0
 8005ed0:	f7ff ffac 	bl	8005e2c <__sfp_lock_acquire>
 8005ed4:	4b1e      	ldr	r3, [pc, #120]	; (8005f50 <__sfp+0x84>)
 8005ed6:	681e      	ldr	r6, [r3, #0]
 8005ed8:	69b3      	ldr	r3, [r6, #24]
 8005eda:	b913      	cbnz	r3, 8005ee2 <__sfp+0x16>
 8005edc:	4630      	mov	r0, r6
 8005ede:	f7ff ffbd 	bl	8005e5c <__sinit>
 8005ee2:	3648      	adds	r6, #72	; 0x48
 8005ee4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005ee8:	3b01      	subs	r3, #1
 8005eea:	d503      	bpl.n	8005ef4 <__sfp+0x28>
 8005eec:	6833      	ldr	r3, [r6, #0]
 8005eee:	b30b      	cbz	r3, 8005f34 <__sfp+0x68>
 8005ef0:	6836      	ldr	r6, [r6, #0]
 8005ef2:	e7f7      	b.n	8005ee4 <__sfp+0x18>
 8005ef4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005ef8:	b9d5      	cbnz	r5, 8005f30 <__sfp+0x64>
 8005efa:	4b16      	ldr	r3, [pc, #88]	; (8005f54 <__sfp+0x88>)
 8005efc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005f00:	60e3      	str	r3, [r4, #12]
 8005f02:	6665      	str	r5, [r4, #100]	; 0x64
 8005f04:	f000 f84c 	bl	8005fa0 <__retarget_lock_init_recursive>
 8005f08:	f7ff ff96 	bl	8005e38 <__sfp_lock_release>
 8005f0c:	2208      	movs	r2, #8
 8005f0e:	4629      	mov	r1, r5
 8005f10:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005f14:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005f18:	6025      	str	r5, [r4, #0]
 8005f1a:	61a5      	str	r5, [r4, #24]
 8005f1c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005f20:	f7fe fc48 	bl	80047b4 <memset>
 8005f24:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005f28:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005f2c:	4620      	mov	r0, r4
 8005f2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005f30:	3468      	adds	r4, #104	; 0x68
 8005f32:	e7d9      	b.n	8005ee8 <__sfp+0x1c>
 8005f34:	2104      	movs	r1, #4
 8005f36:	4638      	mov	r0, r7
 8005f38:	f7ff ff62 	bl	8005e00 <__sfmoreglue>
 8005f3c:	4604      	mov	r4, r0
 8005f3e:	6030      	str	r0, [r6, #0]
 8005f40:	2800      	cmp	r0, #0
 8005f42:	d1d5      	bne.n	8005ef0 <__sfp+0x24>
 8005f44:	f7ff ff78 	bl	8005e38 <__sfp_lock_release>
 8005f48:	230c      	movs	r3, #12
 8005f4a:	603b      	str	r3, [r7, #0]
 8005f4c:	e7ee      	b.n	8005f2c <__sfp+0x60>
 8005f4e:	bf00      	nop
 8005f50:	080087a0 	.word	0x080087a0
 8005f54:	ffff0001 	.word	0xffff0001

08005f58 <_fwalk_reent>:
 8005f58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005f5c:	4606      	mov	r6, r0
 8005f5e:	4688      	mov	r8, r1
 8005f60:	2700      	movs	r7, #0
 8005f62:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005f66:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005f6a:	f1b9 0901 	subs.w	r9, r9, #1
 8005f6e:	d505      	bpl.n	8005f7c <_fwalk_reent+0x24>
 8005f70:	6824      	ldr	r4, [r4, #0]
 8005f72:	2c00      	cmp	r4, #0
 8005f74:	d1f7      	bne.n	8005f66 <_fwalk_reent+0xe>
 8005f76:	4638      	mov	r0, r7
 8005f78:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005f7c:	89ab      	ldrh	r3, [r5, #12]
 8005f7e:	2b01      	cmp	r3, #1
 8005f80:	d907      	bls.n	8005f92 <_fwalk_reent+0x3a>
 8005f82:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005f86:	3301      	adds	r3, #1
 8005f88:	d003      	beq.n	8005f92 <_fwalk_reent+0x3a>
 8005f8a:	4629      	mov	r1, r5
 8005f8c:	4630      	mov	r0, r6
 8005f8e:	47c0      	blx	r8
 8005f90:	4307      	orrs	r7, r0
 8005f92:	3568      	adds	r5, #104	; 0x68
 8005f94:	e7e9      	b.n	8005f6a <_fwalk_reent+0x12>
	...

08005f98 <_localeconv_r>:
 8005f98:	4800      	ldr	r0, [pc, #0]	; (8005f9c <_localeconv_r+0x4>)
 8005f9a:	4770      	bx	lr
 8005f9c:	20000168 	.word	0x20000168

08005fa0 <__retarget_lock_init_recursive>:
 8005fa0:	4770      	bx	lr

08005fa2 <__retarget_lock_acquire_recursive>:
 8005fa2:	4770      	bx	lr

08005fa4 <__retarget_lock_release_recursive>:
 8005fa4:	4770      	bx	lr
	...

08005fa8 <malloc>:
 8005fa8:	4b02      	ldr	r3, [pc, #8]	; (8005fb4 <malloc+0xc>)
 8005faa:	4601      	mov	r1, r0
 8005fac:	6818      	ldr	r0, [r3, #0]
 8005fae:	f000 bc1d 	b.w	80067ec <_malloc_r>
 8005fb2:	bf00      	nop
 8005fb4:	20000014 	.word	0x20000014

08005fb8 <memchr>:
 8005fb8:	4603      	mov	r3, r0
 8005fba:	b510      	push	{r4, lr}
 8005fbc:	b2c9      	uxtb	r1, r1
 8005fbe:	4402      	add	r2, r0
 8005fc0:	4293      	cmp	r3, r2
 8005fc2:	4618      	mov	r0, r3
 8005fc4:	d101      	bne.n	8005fca <memchr+0x12>
 8005fc6:	2000      	movs	r0, #0
 8005fc8:	e003      	b.n	8005fd2 <memchr+0x1a>
 8005fca:	7804      	ldrb	r4, [r0, #0]
 8005fcc:	3301      	adds	r3, #1
 8005fce:	428c      	cmp	r4, r1
 8005fd0:	d1f6      	bne.n	8005fc0 <memchr+0x8>
 8005fd2:	bd10      	pop	{r4, pc}

08005fd4 <memcpy>:
 8005fd4:	440a      	add	r2, r1
 8005fd6:	4291      	cmp	r1, r2
 8005fd8:	f100 33ff 	add.w	r3, r0, #4294967295
 8005fdc:	d100      	bne.n	8005fe0 <memcpy+0xc>
 8005fde:	4770      	bx	lr
 8005fe0:	b510      	push	{r4, lr}
 8005fe2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005fe6:	4291      	cmp	r1, r2
 8005fe8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005fec:	d1f9      	bne.n	8005fe2 <memcpy+0xe>
 8005fee:	bd10      	pop	{r4, pc}

08005ff0 <_Balloc>:
 8005ff0:	b570      	push	{r4, r5, r6, lr}
 8005ff2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005ff4:	4604      	mov	r4, r0
 8005ff6:	460d      	mov	r5, r1
 8005ff8:	b976      	cbnz	r6, 8006018 <_Balloc+0x28>
 8005ffa:	2010      	movs	r0, #16
 8005ffc:	f7ff ffd4 	bl	8005fa8 <malloc>
 8006000:	4602      	mov	r2, r0
 8006002:	6260      	str	r0, [r4, #36]	; 0x24
 8006004:	b920      	cbnz	r0, 8006010 <_Balloc+0x20>
 8006006:	2166      	movs	r1, #102	; 0x66
 8006008:	4b17      	ldr	r3, [pc, #92]	; (8006068 <_Balloc+0x78>)
 800600a:	4818      	ldr	r0, [pc, #96]	; (800606c <_Balloc+0x7c>)
 800600c:	f000 fee0 	bl	8006dd0 <__assert_func>
 8006010:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006014:	6006      	str	r6, [r0, #0]
 8006016:	60c6      	str	r6, [r0, #12]
 8006018:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800601a:	68f3      	ldr	r3, [r6, #12]
 800601c:	b183      	cbz	r3, 8006040 <_Balloc+0x50>
 800601e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006020:	68db      	ldr	r3, [r3, #12]
 8006022:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006026:	b9b8      	cbnz	r0, 8006058 <_Balloc+0x68>
 8006028:	2101      	movs	r1, #1
 800602a:	fa01 f605 	lsl.w	r6, r1, r5
 800602e:	1d72      	adds	r2, r6, #5
 8006030:	4620      	mov	r0, r4
 8006032:	0092      	lsls	r2, r2, #2
 8006034:	f000 fb5e 	bl	80066f4 <_calloc_r>
 8006038:	b160      	cbz	r0, 8006054 <_Balloc+0x64>
 800603a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800603e:	e00e      	b.n	800605e <_Balloc+0x6e>
 8006040:	2221      	movs	r2, #33	; 0x21
 8006042:	2104      	movs	r1, #4
 8006044:	4620      	mov	r0, r4
 8006046:	f000 fb55 	bl	80066f4 <_calloc_r>
 800604a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800604c:	60f0      	str	r0, [r6, #12]
 800604e:	68db      	ldr	r3, [r3, #12]
 8006050:	2b00      	cmp	r3, #0
 8006052:	d1e4      	bne.n	800601e <_Balloc+0x2e>
 8006054:	2000      	movs	r0, #0
 8006056:	bd70      	pop	{r4, r5, r6, pc}
 8006058:	6802      	ldr	r2, [r0, #0]
 800605a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800605e:	2300      	movs	r3, #0
 8006060:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006064:	e7f7      	b.n	8006056 <_Balloc+0x66>
 8006066:	bf00      	nop
 8006068:	080087e5 	.word	0x080087e5
 800606c:	080088c8 	.word	0x080088c8

08006070 <_Bfree>:
 8006070:	b570      	push	{r4, r5, r6, lr}
 8006072:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006074:	4605      	mov	r5, r0
 8006076:	460c      	mov	r4, r1
 8006078:	b976      	cbnz	r6, 8006098 <_Bfree+0x28>
 800607a:	2010      	movs	r0, #16
 800607c:	f7ff ff94 	bl	8005fa8 <malloc>
 8006080:	4602      	mov	r2, r0
 8006082:	6268      	str	r0, [r5, #36]	; 0x24
 8006084:	b920      	cbnz	r0, 8006090 <_Bfree+0x20>
 8006086:	218a      	movs	r1, #138	; 0x8a
 8006088:	4b08      	ldr	r3, [pc, #32]	; (80060ac <_Bfree+0x3c>)
 800608a:	4809      	ldr	r0, [pc, #36]	; (80060b0 <_Bfree+0x40>)
 800608c:	f000 fea0 	bl	8006dd0 <__assert_func>
 8006090:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006094:	6006      	str	r6, [r0, #0]
 8006096:	60c6      	str	r6, [r0, #12]
 8006098:	b13c      	cbz	r4, 80060aa <_Bfree+0x3a>
 800609a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800609c:	6862      	ldr	r2, [r4, #4]
 800609e:	68db      	ldr	r3, [r3, #12]
 80060a0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80060a4:	6021      	str	r1, [r4, #0]
 80060a6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80060aa:	bd70      	pop	{r4, r5, r6, pc}
 80060ac:	080087e5 	.word	0x080087e5
 80060b0:	080088c8 	.word	0x080088c8

080060b4 <__multadd>:
 80060b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80060b8:	4607      	mov	r7, r0
 80060ba:	460c      	mov	r4, r1
 80060bc:	461e      	mov	r6, r3
 80060be:	2000      	movs	r0, #0
 80060c0:	690d      	ldr	r5, [r1, #16]
 80060c2:	f101 0c14 	add.w	ip, r1, #20
 80060c6:	f8dc 3000 	ldr.w	r3, [ip]
 80060ca:	3001      	adds	r0, #1
 80060cc:	b299      	uxth	r1, r3
 80060ce:	fb02 6101 	mla	r1, r2, r1, r6
 80060d2:	0c1e      	lsrs	r6, r3, #16
 80060d4:	0c0b      	lsrs	r3, r1, #16
 80060d6:	fb02 3306 	mla	r3, r2, r6, r3
 80060da:	b289      	uxth	r1, r1
 80060dc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80060e0:	4285      	cmp	r5, r0
 80060e2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80060e6:	f84c 1b04 	str.w	r1, [ip], #4
 80060ea:	dcec      	bgt.n	80060c6 <__multadd+0x12>
 80060ec:	b30e      	cbz	r6, 8006132 <__multadd+0x7e>
 80060ee:	68a3      	ldr	r3, [r4, #8]
 80060f0:	42ab      	cmp	r3, r5
 80060f2:	dc19      	bgt.n	8006128 <__multadd+0x74>
 80060f4:	6861      	ldr	r1, [r4, #4]
 80060f6:	4638      	mov	r0, r7
 80060f8:	3101      	adds	r1, #1
 80060fa:	f7ff ff79 	bl	8005ff0 <_Balloc>
 80060fe:	4680      	mov	r8, r0
 8006100:	b928      	cbnz	r0, 800610e <__multadd+0x5a>
 8006102:	4602      	mov	r2, r0
 8006104:	21b5      	movs	r1, #181	; 0xb5
 8006106:	4b0c      	ldr	r3, [pc, #48]	; (8006138 <__multadd+0x84>)
 8006108:	480c      	ldr	r0, [pc, #48]	; (800613c <__multadd+0x88>)
 800610a:	f000 fe61 	bl	8006dd0 <__assert_func>
 800610e:	6922      	ldr	r2, [r4, #16]
 8006110:	f104 010c 	add.w	r1, r4, #12
 8006114:	3202      	adds	r2, #2
 8006116:	0092      	lsls	r2, r2, #2
 8006118:	300c      	adds	r0, #12
 800611a:	f7ff ff5b 	bl	8005fd4 <memcpy>
 800611e:	4621      	mov	r1, r4
 8006120:	4638      	mov	r0, r7
 8006122:	f7ff ffa5 	bl	8006070 <_Bfree>
 8006126:	4644      	mov	r4, r8
 8006128:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800612c:	3501      	adds	r5, #1
 800612e:	615e      	str	r6, [r3, #20]
 8006130:	6125      	str	r5, [r4, #16]
 8006132:	4620      	mov	r0, r4
 8006134:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006138:	08008857 	.word	0x08008857
 800613c:	080088c8 	.word	0x080088c8

08006140 <__hi0bits>:
 8006140:	0c02      	lsrs	r2, r0, #16
 8006142:	0412      	lsls	r2, r2, #16
 8006144:	4603      	mov	r3, r0
 8006146:	b9ca      	cbnz	r2, 800617c <__hi0bits+0x3c>
 8006148:	0403      	lsls	r3, r0, #16
 800614a:	2010      	movs	r0, #16
 800614c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8006150:	bf04      	itt	eq
 8006152:	021b      	lsleq	r3, r3, #8
 8006154:	3008      	addeq	r0, #8
 8006156:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800615a:	bf04      	itt	eq
 800615c:	011b      	lsleq	r3, r3, #4
 800615e:	3004      	addeq	r0, #4
 8006160:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8006164:	bf04      	itt	eq
 8006166:	009b      	lsleq	r3, r3, #2
 8006168:	3002      	addeq	r0, #2
 800616a:	2b00      	cmp	r3, #0
 800616c:	db05      	blt.n	800617a <__hi0bits+0x3a>
 800616e:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8006172:	f100 0001 	add.w	r0, r0, #1
 8006176:	bf08      	it	eq
 8006178:	2020      	moveq	r0, #32
 800617a:	4770      	bx	lr
 800617c:	2000      	movs	r0, #0
 800617e:	e7e5      	b.n	800614c <__hi0bits+0xc>

08006180 <__lo0bits>:
 8006180:	6803      	ldr	r3, [r0, #0]
 8006182:	4602      	mov	r2, r0
 8006184:	f013 0007 	ands.w	r0, r3, #7
 8006188:	d00b      	beq.n	80061a2 <__lo0bits+0x22>
 800618a:	07d9      	lsls	r1, r3, #31
 800618c:	d421      	bmi.n	80061d2 <__lo0bits+0x52>
 800618e:	0798      	lsls	r0, r3, #30
 8006190:	bf49      	itett	mi
 8006192:	085b      	lsrmi	r3, r3, #1
 8006194:	089b      	lsrpl	r3, r3, #2
 8006196:	2001      	movmi	r0, #1
 8006198:	6013      	strmi	r3, [r2, #0]
 800619a:	bf5c      	itt	pl
 800619c:	2002      	movpl	r0, #2
 800619e:	6013      	strpl	r3, [r2, #0]
 80061a0:	4770      	bx	lr
 80061a2:	b299      	uxth	r1, r3
 80061a4:	b909      	cbnz	r1, 80061aa <__lo0bits+0x2a>
 80061a6:	2010      	movs	r0, #16
 80061a8:	0c1b      	lsrs	r3, r3, #16
 80061aa:	b2d9      	uxtb	r1, r3
 80061ac:	b909      	cbnz	r1, 80061b2 <__lo0bits+0x32>
 80061ae:	3008      	adds	r0, #8
 80061b0:	0a1b      	lsrs	r3, r3, #8
 80061b2:	0719      	lsls	r1, r3, #28
 80061b4:	bf04      	itt	eq
 80061b6:	091b      	lsreq	r3, r3, #4
 80061b8:	3004      	addeq	r0, #4
 80061ba:	0799      	lsls	r1, r3, #30
 80061bc:	bf04      	itt	eq
 80061be:	089b      	lsreq	r3, r3, #2
 80061c0:	3002      	addeq	r0, #2
 80061c2:	07d9      	lsls	r1, r3, #31
 80061c4:	d403      	bmi.n	80061ce <__lo0bits+0x4e>
 80061c6:	085b      	lsrs	r3, r3, #1
 80061c8:	f100 0001 	add.w	r0, r0, #1
 80061cc:	d003      	beq.n	80061d6 <__lo0bits+0x56>
 80061ce:	6013      	str	r3, [r2, #0]
 80061d0:	4770      	bx	lr
 80061d2:	2000      	movs	r0, #0
 80061d4:	4770      	bx	lr
 80061d6:	2020      	movs	r0, #32
 80061d8:	4770      	bx	lr
	...

080061dc <__i2b>:
 80061dc:	b510      	push	{r4, lr}
 80061de:	460c      	mov	r4, r1
 80061e0:	2101      	movs	r1, #1
 80061e2:	f7ff ff05 	bl	8005ff0 <_Balloc>
 80061e6:	4602      	mov	r2, r0
 80061e8:	b928      	cbnz	r0, 80061f6 <__i2b+0x1a>
 80061ea:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80061ee:	4b04      	ldr	r3, [pc, #16]	; (8006200 <__i2b+0x24>)
 80061f0:	4804      	ldr	r0, [pc, #16]	; (8006204 <__i2b+0x28>)
 80061f2:	f000 fded 	bl	8006dd0 <__assert_func>
 80061f6:	2301      	movs	r3, #1
 80061f8:	6144      	str	r4, [r0, #20]
 80061fa:	6103      	str	r3, [r0, #16]
 80061fc:	bd10      	pop	{r4, pc}
 80061fe:	bf00      	nop
 8006200:	08008857 	.word	0x08008857
 8006204:	080088c8 	.word	0x080088c8

08006208 <__multiply>:
 8006208:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800620c:	4691      	mov	r9, r2
 800620e:	690a      	ldr	r2, [r1, #16]
 8006210:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006214:	460c      	mov	r4, r1
 8006216:	429a      	cmp	r2, r3
 8006218:	bfbe      	ittt	lt
 800621a:	460b      	movlt	r3, r1
 800621c:	464c      	movlt	r4, r9
 800621e:	4699      	movlt	r9, r3
 8006220:	6927      	ldr	r7, [r4, #16]
 8006222:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8006226:	68a3      	ldr	r3, [r4, #8]
 8006228:	6861      	ldr	r1, [r4, #4]
 800622a:	eb07 060a 	add.w	r6, r7, sl
 800622e:	42b3      	cmp	r3, r6
 8006230:	b085      	sub	sp, #20
 8006232:	bfb8      	it	lt
 8006234:	3101      	addlt	r1, #1
 8006236:	f7ff fedb 	bl	8005ff0 <_Balloc>
 800623a:	b930      	cbnz	r0, 800624a <__multiply+0x42>
 800623c:	4602      	mov	r2, r0
 800623e:	f240 115d 	movw	r1, #349	; 0x15d
 8006242:	4b43      	ldr	r3, [pc, #268]	; (8006350 <__multiply+0x148>)
 8006244:	4843      	ldr	r0, [pc, #268]	; (8006354 <__multiply+0x14c>)
 8006246:	f000 fdc3 	bl	8006dd0 <__assert_func>
 800624a:	f100 0514 	add.w	r5, r0, #20
 800624e:	462b      	mov	r3, r5
 8006250:	2200      	movs	r2, #0
 8006252:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006256:	4543      	cmp	r3, r8
 8006258:	d321      	bcc.n	800629e <__multiply+0x96>
 800625a:	f104 0314 	add.w	r3, r4, #20
 800625e:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8006262:	f109 0314 	add.w	r3, r9, #20
 8006266:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800626a:	9202      	str	r2, [sp, #8]
 800626c:	1b3a      	subs	r2, r7, r4
 800626e:	3a15      	subs	r2, #21
 8006270:	f022 0203 	bic.w	r2, r2, #3
 8006274:	3204      	adds	r2, #4
 8006276:	f104 0115 	add.w	r1, r4, #21
 800627a:	428f      	cmp	r7, r1
 800627c:	bf38      	it	cc
 800627e:	2204      	movcc	r2, #4
 8006280:	9201      	str	r2, [sp, #4]
 8006282:	9a02      	ldr	r2, [sp, #8]
 8006284:	9303      	str	r3, [sp, #12]
 8006286:	429a      	cmp	r2, r3
 8006288:	d80c      	bhi.n	80062a4 <__multiply+0x9c>
 800628a:	2e00      	cmp	r6, #0
 800628c:	dd03      	ble.n	8006296 <__multiply+0x8e>
 800628e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006292:	2b00      	cmp	r3, #0
 8006294:	d059      	beq.n	800634a <__multiply+0x142>
 8006296:	6106      	str	r6, [r0, #16]
 8006298:	b005      	add	sp, #20
 800629a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800629e:	f843 2b04 	str.w	r2, [r3], #4
 80062a2:	e7d8      	b.n	8006256 <__multiply+0x4e>
 80062a4:	f8b3 a000 	ldrh.w	sl, [r3]
 80062a8:	f1ba 0f00 	cmp.w	sl, #0
 80062ac:	d023      	beq.n	80062f6 <__multiply+0xee>
 80062ae:	46a9      	mov	r9, r5
 80062b0:	f04f 0c00 	mov.w	ip, #0
 80062b4:	f104 0e14 	add.w	lr, r4, #20
 80062b8:	f85e 2b04 	ldr.w	r2, [lr], #4
 80062bc:	f8d9 1000 	ldr.w	r1, [r9]
 80062c0:	fa1f fb82 	uxth.w	fp, r2
 80062c4:	b289      	uxth	r1, r1
 80062c6:	fb0a 110b 	mla	r1, sl, fp, r1
 80062ca:	4461      	add	r1, ip
 80062cc:	f8d9 c000 	ldr.w	ip, [r9]
 80062d0:	0c12      	lsrs	r2, r2, #16
 80062d2:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80062d6:	fb0a c202 	mla	r2, sl, r2, ip
 80062da:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80062de:	b289      	uxth	r1, r1
 80062e0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80062e4:	4577      	cmp	r7, lr
 80062e6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80062ea:	f849 1b04 	str.w	r1, [r9], #4
 80062ee:	d8e3      	bhi.n	80062b8 <__multiply+0xb0>
 80062f0:	9a01      	ldr	r2, [sp, #4]
 80062f2:	f845 c002 	str.w	ip, [r5, r2]
 80062f6:	9a03      	ldr	r2, [sp, #12]
 80062f8:	3304      	adds	r3, #4
 80062fa:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80062fe:	f1b9 0f00 	cmp.w	r9, #0
 8006302:	d020      	beq.n	8006346 <__multiply+0x13e>
 8006304:	46ae      	mov	lr, r5
 8006306:	f04f 0a00 	mov.w	sl, #0
 800630a:	6829      	ldr	r1, [r5, #0]
 800630c:	f104 0c14 	add.w	ip, r4, #20
 8006310:	f8bc b000 	ldrh.w	fp, [ip]
 8006314:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8006318:	b289      	uxth	r1, r1
 800631a:	fb09 220b 	mla	r2, r9, fp, r2
 800631e:	4492      	add	sl, r2
 8006320:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8006324:	f84e 1b04 	str.w	r1, [lr], #4
 8006328:	f85c 2b04 	ldr.w	r2, [ip], #4
 800632c:	f8be 1000 	ldrh.w	r1, [lr]
 8006330:	0c12      	lsrs	r2, r2, #16
 8006332:	fb09 1102 	mla	r1, r9, r2, r1
 8006336:	4567      	cmp	r7, ip
 8006338:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800633c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006340:	d8e6      	bhi.n	8006310 <__multiply+0x108>
 8006342:	9a01      	ldr	r2, [sp, #4]
 8006344:	50a9      	str	r1, [r5, r2]
 8006346:	3504      	adds	r5, #4
 8006348:	e79b      	b.n	8006282 <__multiply+0x7a>
 800634a:	3e01      	subs	r6, #1
 800634c:	e79d      	b.n	800628a <__multiply+0x82>
 800634e:	bf00      	nop
 8006350:	08008857 	.word	0x08008857
 8006354:	080088c8 	.word	0x080088c8

08006358 <__pow5mult>:
 8006358:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800635c:	4615      	mov	r5, r2
 800635e:	f012 0203 	ands.w	r2, r2, #3
 8006362:	4606      	mov	r6, r0
 8006364:	460f      	mov	r7, r1
 8006366:	d007      	beq.n	8006378 <__pow5mult+0x20>
 8006368:	4c25      	ldr	r4, [pc, #148]	; (8006400 <__pow5mult+0xa8>)
 800636a:	3a01      	subs	r2, #1
 800636c:	2300      	movs	r3, #0
 800636e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006372:	f7ff fe9f 	bl	80060b4 <__multadd>
 8006376:	4607      	mov	r7, r0
 8006378:	10ad      	asrs	r5, r5, #2
 800637a:	d03d      	beq.n	80063f8 <__pow5mult+0xa0>
 800637c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800637e:	b97c      	cbnz	r4, 80063a0 <__pow5mult+0x48>
 8006380:	2010      	movs	r0, #16
 8006382:	f7ff fe11 	bl	8005fa8 <malloc>
 8006386:	4602      	mov	r2, r0
 8006388:	6270      	str	r0, [r6, #36]	; 0x24
 800638a:	b928      	cbnz	r0, 8006398 <__pow5mult+0x40>
 800638c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8006390:	4b1c      	ldr	r3, [pc, #112]	; (8006404 <__pow5mult+0xac>)
 8006392:	481d      	ldr	r0, [pc, #116]	; (8006408 <__pow5mult+0xb0>)
 8006394:	f000 fd1c 	bl	8006dd0 <__assert_func>
 8006398:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800639c:	6004      	str	r4, [r0, #0]
 800639e:	60c4      	str	r4, [r0, #12]
 80063a0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80063a4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80063a8:	b94c      	cbnz	r4, 80063be <__pow5mult+0x66>
 80063aa:	f240 2171 	movw	r1, #625	; 0x271
 80063ae:	4630      	mov	r0, r6
 80063b0:	f7ff ff14 	bl	80061dc <__i2b>
 80063b4:	2300      	movs	r3, #0
 80063b6:	4604      	mov	r4, r0
 80063b8:	f8c8 0008 	str.w	r0, [r8, #8]
 80063bc:	6003      	str	r3, [r0, #0]
 80063be:	f04f 0900 	mov.w	r9, #0
 80063c2:	07eb      	lsls	r3, r5, #31
 80063c4:	d50a      	bpl.n	80063dc <__pow5mult+0x84>
 80063c6:	4639      	mov	r1, r7
 80063c8:	4622      	mov	r2, r4
 80063ca:	4630      	mov	r0, r6
 80063cc:	f7ff ff1c 	bl	8006208 <__multiply>
 80063d0:	4680      	mov	r8, r0
 80063d2:	4639      	mov	r1, r7
 80063d4:	4630      	mov	r0, r6
 80063d6:	f7ff fe4b 	bl	8006070 <_Bfree>
 80063da:	4647      	mov	r7, r8
 80063dc:	106d      	asrs	r5, r5, #1
 80063de:	d00b      	beq.n	80063f8 <__pow5mult+0xa0>
 80063e0:	6820      	ldr	r0, [r4, #0]
 80063e2:	b938      	cbnz	r0, 80063f4 <__pow5mult+0x9c>
 80063e4:	4622      	mov	r2, r4
 80063e6:	4621      	mov	r1, r4
 80063e8:	4630      	mov	r0, r6
 80063ea:	f7ff ff0d 	bl	8006208 <__multiply>
 80063ee:	6020      	str	r0, [r4, #0]
 80063f0:	f8c0 9000 	str.w	r9, [r0]
 80063f4:	4604      	mov	r4, r0
 80063f6:	e7e4      	b.n	80063c2 <__pow5mult+0x6a>
 80063f8:	4638      	mov	r0, r7
 80063fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80063fe:	bf00      	nop
 8006400:	08008a18 	.word	0x08008a18
 8006404:	080087e5 	.word	0x080087e5
 8006408:	080088c8 	.word	0x080088c8

0800640c <__lshift>:
 800640c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006410:	460c      	mov	r4, r1
 8006412:	4607      	mov	r7, r0
 8006414:	4691      	mov	r9, r2
 8006416:	6923      	ldr	r3, [r4, #16]
 8006418:	6849      	ldr	r1, [r1, #4]
 800641a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800641e:	68a3      	ldr	r3, [r4, #8]
 8006420:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006424:	f108 0601 	add.w	r6, r8, #1
 8006428:	42b3      	cmp	r3, r6
 800642a:	db0b      	blt.n	8006444 <__lshift+0x38>
 800642c:	4638      	mov	r0, r7
 800642e:	f7ff fddf 	bl	8005ff0 <_Balloc>
 8006432:	4605      	mov	r5, r0
 8006434:	b948      	cbnz	r0, 800644a <__lshift+0x3e>
 8006436:	4602      	mov	r2, r0
 8006438:	f240 11d9 	movw	r1, #473	; 0x1d9
 800643c:	4b29      	ldr	r3, [pc, #164]	; (80064e4 <__lshift+0xd8>)
 800643e:	482a      	ldr	r0, [pc, #168]	; (80064e8 <__lshift+0xdc>)
 8006440:	f000 fcc6 	bl	8006dd0 <__assert_func>
 8006444:	3101      	adds	r1, #1
 8006446:	005b      	lsls	r3, r3, #1
 8006448:	e7ee      	b.n	8006428 <__lshift+0x1c>
 800644a:	2300      	movs	r3, #0
 800644c:	f100 0114 	add.w	r1, r0, #20
 8006450:	f100 0210 	add.w	r2, r0, #16
 8006454:	4618      	mov	r0, r3
 8006456:	4553      	cmp	r3, sl
 8006458:	db37      	blt.n	80064ca <__lshift+0xbe>
 800645a:	6920      	ldr	r0, [r4, #16]
 800645c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006460:	f104 0314 	add.w	r3, r4, #20
 8006464:	f019 091f 	ands.w	r9, r9, #31
 8006468:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800646c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8006470:	d02f      	beq.n	80064d2 <__lshift+0xc6>
 8006472:	468a      	mov	sl, r1
 8006474:	f04f 0c00 	mov.w	ip, #0
 8006478:	f1c9 0e20 	rsb	lr, r9, #32
 800647c:	681a      	ldr	r2, [r3, #0]
 800647e:	fa02 f209 	lsl.w	r2, r2, r9
 8006482:	ea42 020c 	orr.w	r2, r2, ip
 8006486:	f84a 2b04 	str.w	r2, [sl], #4
 800648a:	f853 2b04 	ldr.w	r2, [r3], #4
 800648e:	4298      	cmp	r0, r3
 8006490:	fa22 fc0e 	lsr.w	ip, r2, lr
 8006494:	d8f2      	bhi.n	800647c <__lshift+0x70>
 8006496:	1b03      	subs	r3, r0, r4
 8006498:	3b15      	subs	r3, #21
 800649a:	f023 0303 	bic.w	r3, r3, #3
 800649e:	3304      	adds	r3, #4
 80064a0:	f104 0215 	add.w	r2, r4, #21
 80064a4:	4290      	cmp	r0, r2
 80064a6:	bf38      	it	cc
 80064a8:	2304      	movcc	r3, #4
 80064aa:	f841 c003 	str.w	ip, [r1, r3]
 80064ae:	f1bc 0f00 	cmp.w	ip, #0
 80064b2:	d001      	beq.n	80064b8 <__lshift+0xac>
 80064b4:	f108 0602 	add.w	r6, r8, #2
 80064b8:	3e01      	subs	r6, #1
 80064ba:	4638      	mov	r0, r7
 80064bc:	4621      	mov	r1, r4
 80064be:	612e      	str	r6, [r5, #16]
 80064c0:	f7ff fdd6 	bl	8006070 <_Bfree>
 80064c4:	4628      	mov	r0, r5
 80064c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80064ca:	f842 0f04 	str.w	r0, [r2, #4]!
 80064ce:	3301      	adds	r3, #1
 80064d0:	e7c1      	b.n	8006456 <__lshift+0x4a>
 80064d2:	3904      	subs	r1, #4
 80064d4:	f853 2b04 	ldr.w	r2, [r3], #4
 80064d8:	4298      	cmp	r0, r3
 80064da:	f841 2f04 	str.w	r2, [r1, #4]!
 80064de:	d8f9      	bhi.n	80064d4 <__lshift+0xc8>
 80064e0:	e7ea      	b.n	80064b8 <__lshift+0xac>
 80064e2:	bf00      	nop
 80064e4:	08008857 	.word	0x08008857
 80064e8:	080088c8 	.word	0x080088c8

080064ec <__mcmp>:
 80064ec:	4603      	mov	r3, r0
 80064ee:	690a      	ldr	r2, [r1, #16]
 80064f0:	6900      	ldr	r0, [r0, #16]
 80064f2:	b530      	push	{r4, r5, lr}
 80064f4:	1a80      	subs	r0, r0, r2
 80064f6:	d10d      	bne.n	8006514 <__mcmp+0x28>
 80064f8:	3314      	adds	r3, #20
 80064fa:	3114      	adds	r1, #20
 80064fc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006500:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006504:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006508:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800650c:	4295      	cmp	r5, r2
 800650e:	d002      	beq.n	8006516 <__mcmp+0x2a>
 8006510:	d304      	bcc.n	800651c <__mcmp+0x30>
 8006512:	2001      	movs	r0, #1
 8006514:	bd30      	pop	{r4, r5, pc}
 8006516:	42a3      	cmp	r3, r4
 8006518:	d3f4      	bcc.n	8006504 <__mcmp+0x18>
 800651a:	e7fb      	b.n	8006514 <__mcmp+0x28>
 800651c:	f04f 30ff 	mov.w	r0, #4294967295
 8006520:	e7f8      	b.n	8006514 <__mcmp+0x28>
	...

08006524 <__mdiff>:
 8006524:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006528:	460d      	mov	r5, r1
 800652a:	4607      	mov	r7, r0
 800652c:	4611      	mov	r1, r2
 800652e:	4628      	mov	r0, r5
 8006530:	4614      	mov	r4, r2
 8006532:	f7ff ffdb 	bl	80064ec <__mcmp>
 8006536:	1e06      	subs	r6, r0, #0
 8006538:	d111      	bne.n	800655e <__mdiff+0x3a>
 800653a:	4631      	mov	r1, r6
 800653c:	4638      	mov	r0, r7
 800653e:	f7ff fd57 	bl	8005ff0 <_Balloc>
 8006542:	4602      	mov	r2, r0
 8006544:	b928      	cbnz	r0, 8006552 <__mdiff+0x2e>
 8006546:	f240 2132 	movw	r1, #562	; 0x232
 800654a:	4b3a      	ldr	r3, [pc, #232]	; (8006634 <__mdiff+0x110>)
 800654c:	483a      	ldr	r0, [pc, #232]	; (8006638 <__mdiff+0x114>)
 800654e:	f000 fc3f 	bl	8006dd0 <__assert_func>
 8006552:	2301      	movs	r3, #1
 8006554:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8006558:	4610      	mov	r0, r2
 800655a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800655e:	bfa4      	itt	ge
 8006560:	4623      	movge	r3, r4
 8006562:	462c      	movge	r4, r5
 8006564:	4638      	mov	r0, r7
 8006566:	6861      	ldr	r1, [r4, #4]
 8006568:	bfa6      	itte	ge
 800656a:	461d      	movge	r5, r3
 800656c:	2600      	movge	r6, #0
 800656e:	2601      	movlt	r6, #1
 8006570:	f7ff fd3e 	bl	8005ff0 <_Balloc>
 8006574:	4602      	mov	r2, r0
 8006576:	b918      	cbnz	r0, 8006580 <__mdiff+0x5c>
 8006578:	f44f 7110 	mov.w	r1, #576	; 0x240
 800657c:	4b2d      	ldr	r3, [pc, #180]	; (8006634 <__mdiff+0x110>)
 800657e:	e7e5      	b.n	800654c <__mdiff+0x28>
 8006580:	f102 0814 	add.w	r8, r2, #20
 8006584:	46c2      	mov	sl, r8
 8006586:	f04f 0c00 	mov.w	ip, #0
 800658a:	6927      	ldr	r7, [r4, #16]
 800658c:	60c6      	str	r6, [r0, #12]
 800658e:	692e      	ldr	r6, [r5, #16]
 8006590:	f104 0014 	add.w	r0, r4, #20
 8006594:	f105 0914 	add.w	r9, r5, #20
 8006598:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 800659c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80065a0:	3410      	adds	r4, #16
 80065a2:	f854 bf04 	ldr.w	fp, [r4, #4]!
 80065a6:	f859 3b04 	ldr.w	r3, [r9], #4
 80065aa:	fa1f f18b 	uxth.w	r1, fp
 80065ae:	448c      	add	ip, r1
 80065b0:	b299      	uxth	r1, r3
 80065b2:	0c1b      	lsrs	r3, r3, #16
 80065b4:	ebac 0101 	sub.w	r1, ip, r1
 80065b8:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80065bc:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80065c0:	b289      	uxth	r1, r1
 80065c2:	ea4f 4c23 	mov.w	ip, r3, asr #16
 80065c6:	454e      	cmp	r6, r9
 80065c8:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80065cc:	f84a 3b04 	str.w	r3, [sl], #4
 80065d0:	d8e7      	bhi.n	80065a2 <__mdiff+0x7e>
 80065d2:	1b73      	subs	r3, r6, r5
 80065d4:	3b15      	subs	r3, #21
 80065d6:	f023 0303 	bic.w	r3, r3, #3
 80065da:	3515      	adds	r5, #21
 80065dc:	3304      	adds	r3, #4
 80065de:	42ae      	cmp	r6, r5
 80065e0:	bf38      	it	cc
 80065e2:	2304      	movcc	r3, #4
 80065e4:	4418      	add	r0, r3
 80065e6:	4443      	add	r3, r8
 80065e8:	461e      	mov	r6, r3
 80065ea:	4605      	mov	r5, r0
 80065ec:	4575      	cmp	r5, lr
 80065ee:	d30e      	bcc.n	800660e <__mdiff+0xea>
 80065f0:	f10e 0103 	add.w	r1, lr, #3
 80065f4:	1a09      	subs	r1, r1, r0
 80065f6:	f021 0103 	bic.w	r1, r1, #3
 80065fa:	3803      	subs	r0, #3
 80065fc:	4586      	cmp	lr, r0
 80065fe:	bf38      	it	cc
 8006600:	2100      	movcc	r1, #0
 8006602:	4419      	add	r1, r3
 8006604:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8006608:	b18b      	cbz	r3, 800662e <__mdiff+0x10a>
 800660a:	6117      	str	r7, [r2, #16]
 800660c:	e7a4      	b.n	8006558 <__mdiff+0x34>
 800660e:	f855 8b04 	ldr.w	r8, [r5], #4
 8006612:	fa1f f188 	uxth.w	r1, r8
 8006616:	4461      	add	r1, ip
 8006618:	140c      	asrs	r4, r1, #16
 800661a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800661e:	b289      	uxth	r1, r1
 8006620:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8006624:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8006628:	f846 1b04 	str.w	r1, [r6], #4
 800662c:	e7de      	b.n	80065ec <__mdiff+0xc8>
 800662e:	3f01      	subs	r7, #1
 8006630:	e7e8      	b.n	8006604 <__mdiff+0xe0>
 8006632:	bf00      	nop
 8006634:	08008857 	.word	0x08008857
 8006638:	080088c8 	.word	0x080088c8

0800663c <__d2b>:
 800663c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8006640:	2101      	movs	r1, #1
 8006642:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8006646:	4690      	mov	r8, r2
 8006648:	461d      	mov	r5, r3
 800664a:	f7ff fcd1 	bl	8005ff0 <_Balloc>
 800664e:	4604      	mov	r4, r0
 8006650:	b930      	cbnz	r0, 8006660 <__d2b+0x24>
 8006652:	4602      	mov	r2, r0
 8006654:	f240 310a 	movw	r1, #778	; 0x30a
 8006658:	4b24      	ldr	r3, [pc, #144]	; (80066ec <__d2b+0xb0>)
 800665a:	4825      	ldr	r0, [pc, #148]	; (80066f0 <__d2b+0xb4>)
 800665c:	f000 fbb8 	bl	8006dd0 <__assert_func>
 8006660:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8006664:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8006668:	bb2d      	cbnz	r5, 80066b6 <__d2b+0x7a>
 800666a:	9301      	str	r3, [sp, #4]
 800666c:	f1b8 0300 	subs.w	r3, r8, #0
 8006670:	d026      	beq.n	80066c0 <__d2b+0x84>
 8006672:	4668      	mov	r0, sp
 8006674:	9300      	str	r3, [sp, #0]
 8006676:	f7ff fd83 	bl	8006180 <__lo0bits>
 800667a:	9900      	ldr	r1, [sp, #0]
 800667c:	b1f0      	cbz	r0, 80066bc <__d2b+0x80>
 800667e:	9a01      	ldr	r2, [sp, #4]
 8006680:	f1c0 0320 	rsb	r3, r0, #32
 8006684:	fa02 f303 	lsl.w	r3, r2, r3
 8006688:	430b      	orrs	r3, r1
 800668a:	40c2      	lsrs	r2, r0
 800668c:	6163      	str	r3, [r4, #20]
 800668e:	9201      	str	r2, [sp, #4]
 8006690:	9b01      	ldr	r3, [sp, #4]
 8006692:	2b00      	cmp	r3, #0
 8006694:	bf14      	ite	ne
 8006696:	2102      	movne	r1, #2
 8006698:	2101      	moveq	r1, #1
 800669a:	61a3      	str	r3, [r4, #24]
 800669c:	6121      	str	r1, [r4, #16]
 800669e:	b1c5      	cbz	r5, 80066d2 <__d2b+0x96>
 80066a0:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80066a4:	4405      	add	r5, r0
 80066a6:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80066aa:	603d      	str	r5, [r7, #0]
 80066ac:	6030      	str	r0, [r6, #0]
 80066ae:	4620      	mov	r0, r4
 80066b0:	b002      	add	sp, #8
 80066b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80066b6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80066ba:	e7d6      	b.n	800666a <__d2b+0x2e>
 80066bc:	6161      	str	r1, [r4, #20]
 80066be:	e7e7      	b.n	8006690 <__d2b+0x54>
 80066c0:	a801      	add	r0, sp, #4
 80066c2:	f7ff fd5d 	bl	8006180 <__lo0bits>
 80066c6:	2101      	movs	r1, #1
 80066c8:	9b01      	ldr	r3, [sp, #4]
 80066ca:	6121      	str	r1, [r4, #16]
 80066cc:	6163      	str	r3, [r4, #20]
 80066ce:	3020      	adds	r0, #32
 80066d0:	e7e5      	b.n	800669e <__d2b+0x62>
 80066d2:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 80066d6:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80066da:	6038      	str	r0, [r7, #0]
 80066dc:	6918      	ldr	r0, [r3, #16]
 80066de:	f7ff fd2f 	bl	8006140 <__hi0bits>
 80066e2:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 80066e6:	6031      	str	r1, [r6, #0]
 80066e8:	e7e1      	b.n	80066ae <__d2b+0x72>
 80066ea:	bf00      	nop
 80066ec:	08008857 	.word	0x08008857
 80066f0:	080088c8 	.word	0x080088c8

080066f4 <_calloc_r>:
 80066f4:	b570      	push	{r4, r5, r6, lr}
 80066f6:	fba1 5402 	umull	r5, r4, r1, r2
 80066fa:	b934      	cbnz	r4, 800670a <_calloc_r+0x16>
 80066fc:	4629      	mov	r1, r5
 80066fe:	f000 f875 	bl	80067ec <_malloc_r>
 8006702:	4606      	mov	r6, r0
 8006704:	b928      	cbnz	r0, 8006712 <_calloc_r+0x1e>
 8006706:	4630      	mov	r0, r6
 8006708:	bd70      	pop	{r4, r5, r6, pc}
 800670a:	220c      	movs	r2, #12
 800670c:	2600      	movs	r6, #0
 800670e:	6002      	str	r2, [r0, #0]
 8006710:	e7f9      	b.n	8006706 <_calloc_r+0x12>
 8006712:	462a      	mov	r2, r5
 8006714:	4621      	mov	r1, r4
 8006716:	f7fe f84d 	bl	80047b4 <memset>
 800671a:	e7f4      	b.n	8006706 <_calloc_r+0x12>

0800671c <_free_r>:
 800671c:	b538      	push	{r3, r4, r5, lr}
 800671e:	4605      	mov	r5, r0
 8006720:	2900      	cmp	r1, #0
 8006722:	d040      	beq.n	80067a6 <_free_r+0x8a>
 8006724:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006728:	1f0c      	subs	r4, r1, #4
 800672a:	2b00      	cmp	r3, #0
 800672c:	bfb8      	it	lt
 800672e:	18e4      	addlt	r4, r4, r3
 8006730:	f000 fcd6 	bl	80070e0 <__malloc_lock>
 8006734:	4a1c      	ldr	r2, [pc, #112]	; (80067a8 <_free_r+0x8c>)
 8006736:	6813      	ldr	r3, [r2, #0]
 8006738:	b933      	cbnz	r3, 8006748 <_free_r+0x2c>
 800673a:	6063      	str	r3, [r4, #4]
 800673c:	6014      	str	r4, [r2, #0]
 800673e:	4628      	mov	r0, r5
 8006740:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006744:	f000 bcd2 	b.w	80070ec <__malloc_unlock>
 8006748:	42a3      	cmp	r3, r4
 800674a:	d908      	bls.n	800675e <_free_r+0x42>
 800674c:	6820      	ldr	r0, [r4, #0]
 800674e:	1821      	adds	r1, r4, r0
 8006750:	428b      	cmp	r3, r1
 8006752:	bf01      	itttt	eq
 8006754:	6819      	ldreq	r1, [r3, #0]
 8006756:	685b      	ldreq	r3, [r3, #4]
 8006758:	1809      	addeq	r1, r1, r0
 800675a:	6021      	streq	r1, [r4, #0]
 800675c:	e7ed      	b.n	800673a <_free_r+0x1e>
 800675e:	461a      	mov	r2, r3
 8006760:	685b      	ldr	r3, [r3, #4]
 8006762:	b10b      	cbz	r3, 8006768 <_free_r+0x4c>
 8006764:	42a3      	cmp	r3, r4
 8006766:	d9fa      	bls.n	800675e <_free_r+0x42>
 8006768:	6811      	ldr	r1, [r2, #0]
 800676a:	1850      	adds	r0, r2, r1
 800676c:	42a0      	cmp	r0, r4
 800676e:	d10b      	bne.n	8006788 <_free_r+0x6c>
 8006770:	6820      	ldr	r0, [r4, #0]
 8006772:	4401      	add	r1, r0
 8006774:	1850      	adds	r0, r2, r1
 8006776:	4283      	cmp	r3, r0
 8006778:	6011      	str	r1, [r2, #0]
 800677a:	d1e0      	bne.n	800673e <_free_r+0x22>
 800677c:	6818      	ldr	r0, [r3, #0]
 800677e:	685b      	ldr	r3, [r3, #4]
 8006780:	4401      	add	r1, r0
 8006782:	6011      	str	r1, [r2, #0]
 8006784:	6053      	str	r3, [r2, #4]
 8006786:	e7da      	b.n	800673e <_free_r+0x22>
 8006788:	d902      	bls.n	8006790 <_free_r+0x74>
 800678a:	230c      	movs	r3, #12
 800678c:	602b      	str	r3, [r5, #0]
 800678e:	e7d6      	b.n	800673e <_free_r+0x22>
 8006790:	6820      	ldr	r0, [r4, #0]
 8006792:	1821      	adds	r1, r4, r0
 8006794:	428b      	cmp	r3, r1
 8006796:	bf01      	itttt	eq
 8006798:	6819      	ldreq	r1, [r3, #0]
 800679a:	685b      	ldreq	r3, [r3, #4]
 800679c:	1809      	addeq	r1, r1, r0
 800679e:	6021      	streq	r1, [r4, #0]
 80067a0:	6063      	str	r3, [r4, #4]
 80067a2:	6054      	str	r4, [r2, #4]
 80067a4:	e7cb      	b.n	800673e <_free_r+0x22>
 80067a6:	bd38      	pop	{r3, r4, r5, pc}
 80067a8:	20000a08 	.word	0x20000a08

080067ac <sbrk_aligned>:
 80067ac:	b570      	push	{r4, r5, r6, lr}
 80067ae:	4e0e      	ldr	r6, [pc, #56]	; (80067e8 <sbrk_aligned+0x3c>)
 80067b0:	460c      	mov	r4, r1
 80067b2:	6831      	ldr	r1, [r6, #0]
 80067b4:	4605      	mov	r5, r0
 80067b6:	b911      	cbnz	r1, 80067be <sbrk_aligned+0x12>
 80067b8:	f000 f9e4 	bl	8006b84 <_sbrk_r>
 80067bc:	6030      	str	r0, [r6, #0]
 80067be:	4621      	mov	r1, r4
 80067c0:	4628      	mov	r0, r5
 80067c2:	f000 f9df 	bl	8006b84 <_sbrk_r>
 80067c6:	1c43      	adds	r3, r0, #1
 80067c8:	d00a      	beq.n	80067e0 <sbrk_aligned+0x34>
 80067ca:	1cc4      	adds	r4, r0, #3
 80067cc:	f024 0403 	bic.w	r4, r4, #3
 80067d0:	42a0      	cmp	r0, r4
 80067d2:	d007      	beq.n	80067e4 <sbrk_aligned+0x38>
 80067d4:	1a21      	subs	r1, r4, r0
 80067d6:	4628      	mov	r0, r5
 80067d8:	f000 f9d4 	bl	8006b84 <_sbrk_r>
 80067dc:	3001      	adds	r0, #1
 80067de:	d101      	bne.n	80067e4 <sbrk_aligned+0x38>
 80067e0:	f04f 34ff 	mov.w	r4, #4294967295
 80067e4:	4620      	mov	r0, r4
 80067e6:	bd70      	pop	{r4, r5, r6, pc}
 80067e8:	20000a0c 	.word	0x20000a0c

080067ec <_malloc_r>:
 80067ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80067f0:	1ccd      	adds	r5, r1, #3
 80067f2:	f025 0503 	bic.w	r5, r5, #3
 80067f6:	3508      	adds	r5, #8
 80067f8:	2d0c      	cmp	r5, #12
 80067fa:	bf38      	it	cc
 80067fc:	250c      	movcc	r5, #12
 80067fe:	2d00      	cmp	r5, #0
 8006800:	4607      	mov	r7, r0
 8006802:	db01      	blt.n	8006808 <_malloc_r+0x1c>
 8006804:	42a9      	cmp	r1, r5
 8006806:	d905      	bls.n	8006814 <_malloc_r+0x28>
 8006808:	230c      	movs	r3, #12
 800680a:	2600      	movs	r6, #0
 800680c:	603b      	str	r3, [r7, #0]
 800680e:	4630      	mov	r0, r6
 8006810:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006814:	4e2e      	ldr	r6, [pc, #184]	; (80068d0 <_malloc_r+0xe4>)
 8006816:	f000 fc63 	bl	80070e0 <__malloc_lock>
 800681a:	6833      	ldr	r3, [r6, #0]
 800681c:	461c      	mov	r4, r3
 800681e:	bb34      	cbnz	r4, 800686e <_malloc_r+0x82>
 8006820:	4629      	mov	r1, r5
 8006822:	4638      	mov	r0, r7
 8006824:	f7ff ffc2 	bl	80067ac <sbrk_aligned>
 8006828:	1c43      	adds	r3, r0, #1
 800682a:	4604      	mov	r4, r0
 800682c:	d14d      	bne.n	80068ca <_malloc_r+0xde>
 800682e:	6834      	ldr	r4, [r6, #0]
 8006830:	4626      	mov	r6, r4
 8006832:	2e00      	cmp	r6, #0
 8006834:	d140      	bne.n	80068b8 <_malloc_r+0xcc>
 8006836:	6823      	ldr	r3, [r4, #0]
 8006838:	4631      	mov	r1, r6
 800683a:	4638      	mov	r0, r7
 800683c:	eb04 0803 	add.w	r8, r4, r3
 8006840:	f000 f9a0 	bl	8006b84 <_sbrk_r>
 8006844:	4580      	cmp	r8, r0
 8006846:	d13a      	bne.n	80068be <_malloc_r+0xd2>
 8006848:	6821      	ldr	r1, [r4, #0]
 800684a:	3503      	adds	r5, #3
 800684c:	1a6d      	subs	r5, r5, r1
 800684e:	f025 0503 	bic.w	r5, r5, #3
 8006852:	3508      	adds	r5, #8
 8006854:	2d0c      	cmp	r5, #12
 8006856:	bf38      	it	cc
 8006858:	250c      	movcc	r5, #12
 800685a:	4638      	mov	r0, r7
 800685c:	4629      	mov	r1, r5
 800685e:	f7ff ffa5 	bl	80067ac <sbrk_aligned>
 8006862:	3001      	adds	r0, #1
 8006864:	d02b      	beq.n	80068be <_malloc_r+0xd2>
 8006866:	6823      	ldr	r3, [r4, #0]
 8006868:	442b      	add	r3, r5
 800686a:	6023      	str	r3, [r4, #0]
 800686c:	e00e      	b.n	800688c <_malloc_r+0xa0>
 800686e:	6822      	ldr	r2, [r4, #0]
 8006870:	1b52      	subs	r2, r2, r5
 8006872:	d41e      	bmi.n	80068b2 <_malloc_r+0xc6>
 8006874:	2a0b      	cmp	r2, #11
 8006876:	d916      	bls.n	80068a6 <_malloc_r+0xba>
 8006878:	1961      	adds	r1, r4, r5
 800687a:	42a3      	cmp	r3, r4
 800687c:	6025      	str	r5, [r4, #0]
 800687e:	bf18      	it	ne
 8006880:	6059      	strne	r1, [r3, #4]
 8006882:	6863      	ldr	r3, [r4, #4]
 8006884:	bf08      	it	eq
 8006886:	6031      	streq	r1, [r6, #0]
 8006888:	5162      	str	r2, [r4, r5]
 800688a:	604b      	str	r3, [r1, #4]
 800688c:	4638      	mov	r0, r7
 800688e:	f104 060b 	add.w	r6, r4, #11
 8006892:	f000 fc2b 	bl	80070ec <__malloc_unlock>
 8006896:	f026 0607 	bic.w	r6, r6, #7
 800689a:	1d23      	adds	r3, r4, #4
 800689c:	1af2      	subs	r2, r6, r3
 800689e:	d0b6      	beq.n	800680e <_malloc_r+0x22>
 80068a0:	1b9b      	subs	r3, r3, r6
 80068a2:	50a3      	str	r3, [r4, r2]
 80068a4:	e7b3      	b.n	800680e <_malloc_r+0x22>
 80068a6:	6862      	ldr	r2, [r4, #4]
 80068a8:	42a3      	cmp	r3, r4
 80068aa:	bf0c      	ite	eq
 80068ac:	6032      	streq	r2, [r6, #0]
 80068ae:	605a      	strne	r2, [r3, #4]
 80068b0:	e7ec      	b.n	800688c <_malloc_r+0xa0>
 80068b2:	4623      	mov	r3, r4
 80068b4:	6864      	ldr	r4, [r4, #4]
 80068b6:	e7b2      	b.n	800681e <_malloc_r+0x32>
 80068b8:	4634      	mov	r4, r6
 80068ba:	6876      	ldr	r6, [r6, #4]
 80068bc:	e7b9      	b.n	8006832 <_malloc_r+0x46>
 80068be:	230c      	movs	r3, #12
 80068c0:	4638      	mov	r0, r7
 80068c2:	603b      	str	r3, [r7, #0]
 80068c4:	f000 fc12 	bl	80070ec <__malloc_unlock>
 80068c8:	e7a1      	b.n	800680e <_malloc_r+0x22>
 80068ca:	6025      	str	r5, [r4, #0]
 80068cc:	e7de      	b.n	800688c <_malloc_r+0xa0>
 80068ce:	bf00      	nop
 80068d0:	20000a08 	.word	0x20000a08

080068d4 <__sfputc_r>:
 80068d4:	6893      	ldr	r3, [r2, #8]
 80068d6:	b410      	push	{r4}
 80068d8:	3b01      	subs	r3, #1
 80068da:	2b00      	cmp	r3, #0
 80068dc:	6093      	str	r3, [r2, #8]
 80068de:	da07      	bge.n	80068f0 <__sfputc_r+0x1c>
 80068e0:	6994      	ldr	r4, [r2, #24]
 80068e2:	42a3      	cmp	r3, r4
 80068e4:	db01      	blt.n	80068ea <__sfputc_r+0x16>
 80068e6:	290a      	cmp	r1, #10
 80068e8:	d102      	bne.n	80068f0 <__sfputc_r+0x1c>
 80068ea:	bc10      	pop	{r4}
 80068ec:	f000 b99e 	b.w	8006c2c <__swbuf_r>
 80068f0:	6813      	ldr	r3, [r2, #0]
 80068f2:	1c58      	adds	r0, r3, #1
 80068f4:	6010      	str	r0, [r2, #0]
 80068f6:	7019      	strb	r1, [r3, #0]
 80068f8:	4608      	mov	r0, r1
 80068fa:	bc10      	pop	{r4}
 80068fc:	4770      	bx	lr

080068fe <__sfputs_r>:
 80068fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006900:	4606      	mov	r6, r0
 8006902:	460f      	mov	r7, r1
 8006904:	4614      	mov	r4, r2
 8006906:	18d5      	adds	r5, r2, r3
 8006908:	42ac      	cmp	r4, r5
 800690a:	d101      	bne.n	8006910 <__sfputs_r+0x12>
 800690c:	2000      	movs	r0, #0
 800690e:	e007      	b.n	8006920 <__sfputs_r+0x22>
 8006910:	463a      	mov	r2, r7
 8006912:	4630      	mov	r0, r6
 8006914:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006918:	f7ff ffdc 	bl	80068d4 <__sfputc_r>
 800691c:	1c43      	adds	r3, r0, #1
 800691e:	d1f3      	bne.n	8006908 <__sfputs_r+0xa>
 8006920:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006924 <_vfiprintf_r>:
 8006924:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006928:	460d      	mov	r5, r1
 800692a:	4614      	mov	r4, r2
 800692c:	4698      	mov	r8, r3
 800692e:	4606      	mov	r6, r0
 8006930:	b09d      	sub	sp, #116	; 0x74
 8006932:	b118      	cbz	r0, 800693c <_vfiprintf_r+0x18>
 8006934:	6983      	ldr	r3, [r0, #24]
 8006936:	b90b      	cbnz	r3, 800693c <_vfiprintf_r+0x18>
 8006938:	f7ff fa90 	bl	8005e5c <__sinit>
 800693c:	4b89      	ldr	r3, [pc, #548]	; (8006b64 <_vfiprintf_r+0x240>)
 800693e:	429d      	cmp	r5, r3
 8006940:	d11b      	bne.n	800697a <_vfiprintf_r+0x56>
 8006942:	6875      	ldr	r5, [r6, #4]
 8006944:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006946:	07d9      	lsls	r1, r3, #31
 8006948:	d405      	bmi.n	8006956 <_vfiprintf_r+0x32>
 800694a:	89ab      	ldrh	r3, [r5, #12]
 800694c:	059a      	lsls	r2, r3, #22
 800694e:	d402      	bmi.n	8006956 <_vfiprintf_r+0x32>
 8006950:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006952:	f7ff fb26 	bl	8005fa2 <__retarget_lock_acquire_recursive>
 8006956:	89ab      	ldrh	r3, [r5, #12]
 8006958:	071b      	lsls	r3, r3, #28
 800695a:	d501      	bpl.n	8006960 <_vfiprintf_r+0x3c>
 800695c:	692b      	ldr	r3, [r5, #16]
 800695e:	b9eb      	cbnz	r3, 800699c <_vfiprintf_r+0x78>
 8006960:	4629      	mov	r1, r5
 8006962:	4630      	mov	r0, r6
 8006964:	f000 f9c6 	bl	8006cf4 <__swsetup_r>
 8006968:	b1c0      	cbz	r0, 800699c <_vfiprintf_r+0x78>
 800696a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800696c:	07dc      	lsls	r4, r3, #31
 800696e:	d50e      	bpl.n	800698e <_vfiprintf_r+0x6a>
 8006970:	f04f 30ff 	mov.w	r0, #4294967295
 8006974:	b01d      	add	sp, #116	; 0x74
 8006976:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800697a:	4b7b      	ldr	r3, [pc, #492]	; (8006b68 <_vfiprintf_r+0x244>)
 800697c:	429d      	cmp	r5, r3
 800697e:	d101      	bne.n	8006984 <_vfiprintf_r+0x60>
 8006980:	68b5      	ldr	r5, [r6, #8]
 8006982:	e7df      	b.n	8006944 <_vfiprintf_r+0x20>
 8006984:	4b79      	ldr	r3, [pc, #484]	; (8006b6c <_vfiprintf_r+0x248>)
 8006986:	429d      	cmp	r5, r3
 8006988:	bf08      	it	eq
 800698a:	68f5      	ldreq	r5, [r6, #12]
 800698c:	e7da      	b.n	8006944 <_vfiprintf_r+0x20>
 800698e:	89ab      	ldrh	r3, [r5, #12]
 8006990:	0598      	lsls	r0, r3, #22
 8006992:	d4ed      	bmi.n	8006970 <_vfiprintf_r+0x4c>
 8006994:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006996:	f7ff fb05 	bl	8005fa4 <__retarget_lock_release_recursive>
 800699a:	e7e9      	b.n	8006970 <_vfiprintf_r+0x4c>
 800699c:	2300      	movs	r3, #0
 800699e:	9309      	str	r3, [sp, #36]	; 0x24
 80069a0:	2320      	movs	r3, #32
 80069a2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80069a6:	2330      	movs	r3, #48	; 0x30
 80069a8:	f04f 0901 	mov.w	r9, #1
 80069ac:	f8cd 800c 	str.w	r8, [sp, #12]
 80069b0:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8006b70 <_vfiprintf_r+0x24c>
 80069b4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80069b8:	4623      	mov	r3, r4
 80069ba:	469a      	mov	sl, r3
 80069bc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80069c0:	b10a      	cbz	r2, 80069c6 <_vfiprintf_r+0xa2>
 80069c2:	2a25      	cmp	r2, #37	; 0x25
 80069c4:	d1f9      	bne.n	80069ba <_vfiprintf_r+0x96>
 80069c6:	ebba 0b04 	subs.w	fp, sl, r4
 80069ca:	d00b      	beq.n	80069e4 <_vfiprintf_r+0xc0>
 80069cc:	465b      	mov	r3, fp
 80069ce:	4622      	mov	r2, r4
 80069d0:	4629      	mov	r1, r5
 80069d2:	4630      	mov	r0, r6
 80069d4:	f7ff ff93 	bl	80068fe <__sfputs_r>
 80069d8:	3001      	adds	r0, #1
 80069da:	f000 80aa 	beq.w	8006b32 <_vfiprintf_r+0x20e>
 80069de:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80069e0:	445a      	add	r2, fp
 80069e2:	9209      	str	r2, [sp, #36]	; 0x24
 80069e4:	f89a 3000 	ldrb.w	r3, [sl]
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	f000 80a2 	beq.w	8006b32 <_vfiprintf_r+0x20e>
 80069ee:	2300      	movs	r3, #0
 80069f0:	f04f 32ff 	mov.w	r2, #4294967295
 80069f4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80069f8:	f10a 0a01 	add.w	sl, sl, #1
 80069fc:	9304      	str	r3, [sp, #16]
 80069fe:	9307      	str	r3, [sp, #28]
 8006a00:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006a04:	931a      	str	r3, [sp, #104]	; 0x68
 8006a06:	4654      	mov	r4, sl
 8006a08:	2205      	movs	r2, #5
 8006a0a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006a0e:	4858      	ldr	r0, [pc, #352]	; (8006b70 <_vfiprintf_r+0x24c>)
 8006a10:	f7ff fad2 	bl	8005fb8 <memchr>
 8006a14:	9a04      	ldr	r2, [sp, #16]
 8006a16:	b9d8      	cbnz	r0, 8006a50 <_vfiprintf_r+0x12c>
 8006a18:	06d1      	lsls	r1, r2, #27
 8006a1a:	bf44      	itt	mi
 8006a1c:	2320      	movmi	r3, #32
 8006a1e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006a22:	0713      	lsls	r3, r2, #28
 8006a24:	bf44      	itt	mi
 8006a26:	232b      	movmi	r3, #43	; 0x2b
 8006a28:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006a2c:	f89a 3000 	ldrb.w	r3, [sl]
 8006a30:	2b2a      	cmp	r3, #42	; 0x2a
 8006a32:	d015      	beq.n	8006a60 <_vfiprintf_r+0x13c>
 8006a34:	4654      	mov	r4, sl
 8006a36:	2000      	movs	r0, #0
 8006a38:	f04f 0c0a 	mov.w	ip, #10
 8006a3c:	9a07      	ldr	r2, [sp, #28]
 8006a3e:	4621      	mov	r1, r4
 8006a40:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006a44:	3b30      	subs	r3, #48	; 0x30
 8006a46:	2b09      	cmp	r3, #9
 8006a48:	d94e      	bls.n	8006ae8 <_vfiprintf_r+0x1c4>
 8006a4a:	b1b0      	cbz	r0, 8006a7a <_vfiprintf_r+0x156>
 8006a4c:	9207      	str	r2, [sp, #28]
 8006a4e:	e014      	b.n	8006a7a <_vfiprintf_r+0x156>
 8006a50:	eba0 0308 	sub.w	r3, r0, r8
 8006a54:	fa09 f303 	lsl.w	r3, r9, r3
 8006a58:	4313      	orrs	r3, r2
 8006a5a:	46a2      	mov	sl, r4
 8006a5c:	9304      	str	r3, [sp, #16]
 8006a5e:	e7d2      	b.n	8006a06 <_vfiprintf_r+0xe2>
 8006a60:	9b03      	ldr	r3, [sp, #12]
 8006a62:	1d19      	adds	r1, r3, #4
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	9103      	str	r1, [sp, #12]
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	bfbb      	ittet	lt
 8006a6c:	425b      	neglt	r3, r3
 8006a6e:	f042 0202 	orrlt.w	r2, r2, #2
 8006a72:	9307      	strge	r3, [sp, #28]
 8006a74:	9307      	strlt	r3, [sp, #28]
 8006a76:	bfb8      	it	lt
 8006a78:	9204      	strlt	r2, [sp, #16]
 8006a7a:	7823      	ldrb	r3, [r4, #0]
 8006a7c:	2b2e      	cmp	r3, #46	; 0x2e
 8006a7e:	d10c      	bne.n	8006a9a <_vfiprintf_r+0x176>
 8006a80:	7863      	ldrb	r3, [r4, #1]
 8006a82:	2b2a      	cmp	r3, #42	; 0x2a
 8006a84:	d135      	bne.n	8006af2 <_vfiprintf_r+0x1ce>
 8006a86:	9b03      	ldr	r3, [sp, #12]
 8006a88:	3402      	adds	r4, #2
 8006a8a:	1d1a      	adds	r2, r3, #4
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	9203      	str	r2, [sp, #12]
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	bfb8      	it	lt
 8006a94:	f04f 33ff 	movlt.w	r3, #4294967295
 8006a98:	9305      	str	r3, [sp, #20]
 8006a9a:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8006b74 <_vfiprintf_r+0x250>
 8006a9e:	2203      	movs	r2, #3
 8006aa0:	4650      	mov	r0, sl
 8006aa2:	7821      	ldrb	r1, [r4, #0]
 8006aa4:	f7ff fa88 	bl	8005fb8 <memchr>
 8006aa8:	b140      	cbz	r0, 8006abc <_vfiprintf_r+0x198>
 8006aaa:	2340      	movs	r3, #64	; 0x40
 8006aac:	eba0 000a 	sub.w	r0, r0, sl
 8006ab0:	fa03 f000 	lsl.w	r0, r3, r0
 8006ab4:	9b04      	ldr	r3, [sp, #16]
 8006ab6:	3401      	adds	r4, #1
 8006ab8:	4303      	orrs	r3, r0
 8006aba:	9304      	str	r3, [sp, #16]
 8006abc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006ac0:	2206      	movs	r2, #6
 8006ac2:	482d      	ldr	r0, [pc, #180]	; (8006b78 <_vfiprintf_r+0x254>)
 8006ac4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006ac8:	f7ff fa76 	bl	8005fb8 <memchr>
 8006acc:	2800      	cmp	r0, #0
 8006ace:	d03f      	beq.n	8006b50 <_vfiprintf_r+0x22c>
 8006ad0:	4b2a      	ldr	r3, [pc, #168]	; (8006b7c <_vfiprintf_r+0x258>)
 8006ad2:	bb1b      	cbnz	r3, 8006b1c <_vfiprintf_r+0x1f8>
 8006ad4:	9b03      	ldr	r3, [sp, #12]
 8006ad6:	3307      	adds	r3, #7
 8006ad8:	f023 0307 	bic.w	r3, r3, #7
 8006adc:	3308      	adds	r3, #8
 8006ade:	9303      	str	r3, [sp, #12]
 8006ae0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ae2:	443b      	add	r3, r7
 8006ae4:	9309      	str	r3, [sp, #36]	; 0x24
 8006ae6:	e767      	b.n	80069b8 <_vfiprintf_r+0x94>
 8006ae8:	460c      	mov	r4, r1
 8006aea:	2001      	movs	r0, #1
 8006aec:	fb0c 3202 	mla	r2, ip, r2, r3
 8006af0:	e7a5      	b.n	8006a3e <_vfiprintf_r+0x11a>
 8006af2:	2300      	movs	r3, #0
 8006af4:	f04f 0c0a 	mov.w	ip, #10
 8006af8:	4619      	mov	r1, r3
 8006afa:	3401      	adds	r4, #1
 8006afc:	9305      	str	r3, [sp, #20]
 8006afe:	4620      	mov	r0, r4
 8006b00:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006b04:	3a30      	subs	r2, #48	; 0x30
 8006b06:	2a09      	cmp	r2, #9
 8006b08:	d903      	bls.n	8006b12 <_vfiprintf_r+0x1ee>
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d0c5      	beq.n	8006a9a <_vfiprintf_r+0x176>
 8006b0e:	9105      	str	r1, [sp, #20]
 8006b10:	e7c3      	b.n	8006a9a <_vfiprintf_r+0x176>
 8006b12:	4604      	mov	r4, r0
 8006b14:	2301      	movs	r3, #1
 8006b16:	fb0c 2101 	mla	r1, ip, r1, r2
 8006b1a:	e7f0      	b.n	8006afe <_vfiprintf_r+0x1da>
 8006b1c:	ab03      	add	r3, sp, #12
 8006b1e:	9300      	str	r3, [sp, #0]
 8006b20:	462a      	mov	r2, r5
 8006b22:	4630      	mov	r0, r6
 8006b24:	4b16      	ldr	r3, [pc, #88]	; (8006b80 <_vfiprintf_r+0x25c>)
 8006b26:	a904      	add	r1, sp, #16
 8006b28:	f7fd feea 	bl	8004900 <_printf_float>
 8006b2c:	4607      	mov	r7, r0
 8006b2e:	1c78      	adds	r0, r7, #1
 8006b30:	d1d6      	bne.n	8006ae0 <_vfiprintf_r+0x1bc>
 8006b32:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006b34:	07d9      	lsls	r1, r3, #31
 8006b36:	d405      	bmi.n	8006b44 <_vfiprintf_r+0x220>
 8006b38:	89ab      	ldrh	r3, [r5, #12]
 8006b3a:	059a      	lsls	r2, r3, #22
 8006b3c:	d402      	bmi.n	8006b44 <_vfiprintf_r+0x220>
 8006b3e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006b40:	f7ff fa30 	bl	8005fa4 <__retarget_lock_release_recursive>
 8006b44:	89ab      	ldrh	r3, [r5, #12]
 8006b46:	065b      	lsls	r3, r3, #25
 8006b48:	f53f af12 	bmi.w	8006970 <_vfiprintf_r+0x4c>
 8006b4c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006b4e:	e711      	b.n	8006974 <_vfiprintf_r+0x50>
 8006b50:	ab03      	add	r3, sp, #12
 8006b52:	9300      	str	r3, [sp, #0]
 8006b54:	462a      	mov	r2, r5
 8006b56:	4630      	mov	r0, r6
 8006b58:	4b09      	ldr	r3, [pc, #36]	; (8006b80 <_vfiprintf_r+0x25c>)
 8006b5a:	a904      	add	r1, sp, #16
 8006b5c:	f7fe f96c 	bl	8004e38 <_printf_i>
 8006b60:	e7e4      	b.n	8006b2c <_vfiprintf_r+0x208>
 8006b62:	bf00      	nop
 8006b64:	08008888 	.word	0x08008888
 8006b68:	080088a8 	.word	0x080088a8
 8006b6c:	08008868 	.word	0x08008868
 8006b70:	08008a24 	.word	0x08008a24
 8006b74:	08008a2a 	.word	0x08008a2a
 8006b78:	08008a2e 	.word	0x08008a2e
 8006b7c:	08004901 	.word	0x08004901
 8006b80:	080068ff 	.word	0x080068ff

08006b84 <_sbrk_r>:
 8006b84:	b538      	push	{r3, r4, r5, lr}
 8006b86:	2300      	movs	r3, #0
 8006b88:	4d05      	ldr	r5, [pc, #20]	; (8006ba0 <_sbrk_r+0x1c>)
 8006b8a:	4604      	mov	r4, r0
 8006b8c:	4608      	mov	r0, r1
 8006b8e:	602b      	str	r3, [r5, #0]
 8006b90:	f7fa fdd8 	bl	8001744 <_sbrk>
 8006b94:	1c43      	adds	r3, r0, #1
 8006b96:	d102      	bne.n	8006b9e <_sbrk_r+0x1a>
 8006b98:	682b      	ldr	r3, [r5, #0]
 8006b9a:	b103      	cbz	r3, 8006b9e <_sbrk_r+0x1a>
 8006b9c:	6023      	str	r3, [r4, #0]
 8006b9e:	bd38      	pop	{r3, r4, r5, pc}
 8006ba0:	20000a10 	.word	0x20000a10

08006ba4 <__sread>:
 8006ba4:	b510      	push	{r4, lr}
 8006ba6:	460c      	mov	r4, r1
 8006ba8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006bac:	f000 faa4 	bl	80070f8 <_read_r>
 8006bb0:	2800      	cmp	r0, #0
 8006bb2:	bfab      	itete	ge
 8006bb4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006bb6:	89a3      	ldrhlt	r3, [r4, #12]
 8006bb8:	181b      	addge	r3, r3, r0
 8006bba:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006bbe:	bfac      	ite	ge
 8006bc0:	6563      	strge	r3, [r4, #84]	; 0x54
 8006bc2:	81a3      	strhlt	r3, [r4, #12]
 8006bc4:	bd10      	pop	{r4, pc}

08006bc6 <__swrite>:
 8006bc6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006bca:	461f      	mov	r7, r3
 8006bcc:	898b      	ldrh	r3, [r1, #12]
 8006bce:	4605      	mov	r5, r0
 8006bd0:	05db      	lsls	r3, r3, #23
 8006bd2:	460c      	mov	r4, r1
 8006bd4:	4616      	mov	r6, r2
 8006bd6:	d505      	bpl.n	8006be4 <__swrite+0x1e>
 8006bd8:	2302      	movs	r3, #2
 8006bda:	2200      	movs	r2, #0
 8006bdc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006be0:	f000 f9f4 	bl	8006fcc <_lseek_r>
 8006be4:	89a3      	ldrh	r3, [r4, #12]
 8006be6:	4632      	mov	r2, r6
 8006be8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006bec:	81a3      	strh	r3, [r4, #12]
 8006bee:	4628      	mov	r0, r5
 8006bf0:	463b      	mov	r3, r7
 8006bf2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006bf6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006bfa:	f000 b869 	b.w	8006cd0 <_write_r>

08006bfe <__sseek>:
 8006bfe:	b510      	push	{r4, lr}
 8006c00:	460c      	mov	r4, r1
 8006c02:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c06:	f000 f9e1 	bl	8006fcc <_lseek_r>
 8006c0a:	1c43      	adds	r3, r0, #1
 8006c0c:	89a3      	ldrh	r3, [r4, #12]
 8006c0e:	bf15      	itete	ne
 8006c10:	6560      	strne	r0, [r4, #84]	; 0x54
 8006c12:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006c16:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006c1a:	81a3      	strheq	r3, [r4, #12]
 8006c1c:	bf18      	it	ne
 8006c1e:	81a3      	strhne	r3, [r4, #12]
 8006c20:	bd10      	pop	{r4, pc}

08006c22 <__sclose>:
 8006c22:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c26:	f000 b8f1 	b.w	8006e0c <_close_r>
	...

08006c2c <__swbuf_r>:
 8006c2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c2e:	460e      	mov	r6, r1
 8006c30:	4614      	mov	r4, r2
 8006c32:	4605      	mov	r5, r0
 8006c34:	b118      	cbz	r0, 8006c3e <__swbuf_r+0x12>
 8006c36:	6983      	ldr	r3, [r0, #24]
 8006c38:	b90b      	cbnz	r3, 8006c3e <__swbuf_r+0x12>
 8006c3a:	f7ff f90f 	bl	8005e5c <__sinit>
 8006c3e:	4b21      	ldr	r3, [pc, #132]	; (8006cc4 <__swbuf_r+0x98>)
 8006c40:	429c      	cmp	r4, r3
 8006c42:	d12b      	bne.n	8006c9c <__swbuf_r+0x70>
 8006c44:	686c      	ldr	r4, [r5, #4]
 8006c46:	69a3      	ldr	r3, [r4, #24]
 8006c48:	60a3      	str	r3, [r4, #8]
 8006c4a:	89a3      	ldrh	r3, [r4, #12]
 8006c4c:	071a      	lsls	r2, r3, #28
 8006c4e:	d52f      	bpl.n	8006cb0 <__swbuf_r+0x84>
 8006c50:	6923      	ldr	r3, [r4, #16]
 8006c52:	b36b      	cbz	r3, 8006cb0 <__swbuf_r+0x84>
 8006c54:	6923      	ldr	r3, [r4, #16]
 8006c56:	6820      	ldr	r0, [r4, #0]
 8006c58:	b2f6      	uxtb	r6, r6
 8006c5a:	1ac0      	subs	r0, r0, r3
 8006c5c:	6963      	ldr	r3, [r4, #20]
 8006c5e:	4637      	mov	r7, r6
 8006c60:	4283      	cmp	r3, r0
 8006c62:	dc04      	bgt.n	8006c6e <__swbuf_r+0x42>
 8006c64:	4621      	mov	r1, r4
 8006c66:	4628      	mov	r0, r5
 8006c68:	f000 f962 	bl	8006f30 <_fflush_r>
 8006c6c:	bb30      	cbnz	r0, 8006cbc <__swbuf_r+0x90>
 8006c6e:	68a3      	ldr	r3, [r4, #8]
 8006c70:	3001      	adds	r0, #1
 8006c72:	3b01      	subs	r3, #1
 8006c74:	60a3      	str	r3, [r4, #8]
 8006c76:	6823      	ldr	r3, [r4, #0]
 8006c78:	1c5a      	adds	r2, r3, #1
 8006c7a:	6022      	str	r2, [r4, #0]
 8006c7c:	701e      	strb	r6, [r3, #0]
 8006c7e:	6963      	ldr	r3, [r4, #20]
 8006c80:	4283      	cmp	r3, r0
 8006c82:	d004      	beq.n	8006c8e <__swbuf_r+0x62>
 8006c84:	89a3      	ldrh	r3, [r4, #12]
 8006c86:	07db      	lsls	r3, r3, #31
 8006c88:	d506      	bpl.n	8006c98 <__swbuf_r+0x6c>
 8006c8a:	2e0a      	cmp	r6, #10
 8006c8c:	d104      	bne.n	8006c98 <__swbuf_r+0x6c>
 8006c8e:	4621      	mov	r1, r4
 8006c90:	4628      	mov	r0, r5
 8006c92:	f000 f94d 	bl	8006f30 <_fflush_r>
 8006c96:	b988      	cbnz	r0, 8006cbc <__swbuf_r+0x90>
 8006c98:	4638      	mov	r0, r7
 8006c9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006c9c:	4b0a      	ldr	r3, [pc, #40]	; (8006cc8 <__swbuf_r+0x9c>)
 8006c9e:	429c      	cmp	r4, r3
 8006ca0:	d101      	bne.n	8006ca6 <__swbuf_r+0x7a>
 8006ca2:	68ac      	ldr	r4, [r5, #8]
 8006ca4:	e7cf      	b.n	8006c46 <__swbuf_r+0x1a>
 8006ca6:	4b09      	ldr	r3, [pc, #36]	; (8006ccc <__swbuf_r+0xa0>)
 8006ca8:	429c      	cmp	r4, r3
 8006caa:	bf08      	it	eq
 8006cac:	68ec      	ldreq	r4, [r5, #12]
 8006cae:	e7ca      	b.n	8006c46 <__swbuf_r+0x1a>
 8006cb0:	4621      	mov	r1, r4
 8006cb2:	4628      	mov	r0, r5
 8006cb4:	f000 f81e 	bl	8006cf4 <__swsetup_r>
 8006cb8:	2800      	cmp	r0, #0
 8006cba:	d0cb      	beq.n	8006c54 <__swbuf_r+0x28>
 8006cbc:	f04f 37ff 	mov.w	r7, #4294967295
 8006cc0:	e7ea      	b.n	8006c98 <__swbuf_r+0x6c>
 8006cc2:	bf00      	nop
 8006cc4:	08008888 	.word	0x08008888
 8006cc8:	080088a8 	.word	0x080088a8
 8006ccc:	08008868 	.word	0x08008868

08006cd0 <_write_r>:
 8006cd0:	b538      	push	{r3, r4, r5, lr}
 8006cd2:	4604      	mov	r4, r0
 8006cd4:	4608      	mov	r0, r1
 8006cd6:	4611      	mov	r1, r2
 8006cd8:	2200      	movs	r2, #0
 8006cda:	4d05      	ldr	r5, [pc, #20]	; (8006cf0 <_write_r+0x20>)
 8006cdc:	602a      	str	r2, [r5, #0]
 8006cde:	461a      	mov	r2, r3
 8006ce0:	f7fa f80e 	bl	8000d00 <_write>
 8006ce4:	1c43      	adds	r3, r0, #1
 8006ce6:	d102      	bne.n	8006cee <_write_r+0x1e>
 8006ce8:	682b      	ldr	r3, [r5, #0]
 8006cea:	b103      	cbz	r3, 8006cee <_write_r+0x1e>
 8006cec:	6023      	str	r3, [r4, #0]
 8006cee:	bd38      	pop	{r3, r4, r5, pc}
 8006cf0:	20000a10 	.word	0x20000a10

08006cf4 <__swsetup_r>:
 8006cf4:	4b32      	ldr	r3, [pc, #200]	; (8006dc0 <__swsetup_r+0xcc>)
 8006cf6:	b570      	push	{r4, r5, r6, lr}
 8006cf8:	681d      	ldr	r5, [r3, #0]
 8006cfa:	4606      	mov	r6, r0
 8006cfc:	460c      	mov	r4, r1
 8006cfe:	b125      	cbz	r5, 8006d0a <__swsetup_r+0x16>
 8006d00:	69ab      	ldr	r3, [r5, #24]
 8006d02:	b913      	cbnz	r3, 8006d0a <__swsetup_r+0x16>
 8006d04:	4628      	mov	r0, r5
 8006d06:	f7ff f8a9 	bl	8005e5c <__sinit>
 8006d0a:	4b2e      	ldr	r3, [pc, #184]	; (8006dc4 <__swsetup_r+0xd0>)
 8006d0c:	429c      	cmp	r4, r3
 8006d0e:	d10f      	bne.n	8006d30 <__swsetup_r+0x3c>
 8006d10:	686c      	ldr	r4, [r5, #4]
 8006d12:	89a3      	ldrh	r3, [r4, #12]
 8006d14:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006d18:	0719      	lsls	r1, r3, #28
 8006d1a:	d42c      	bmi.n	8006d76 <__swsetup_r+0x82>
 8006d1c:	06dd      	lsls	r5, r3, #27
 8006d1e:	d411      	bmi.n	8006d44 <__swsetup_r+0x50>
 8006d20:	2309      	movs	r3, #9
 8006d22:	6033      	str	r3, [r6, #0]
 8006d24:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006d28:	f04f 30ff 	mov.w	r0, #4294967295
 8006d2c:	81a3      	strh	r3, [r4, #12]
 8006d2e:	e03e      	b.n	8006dae <__swsetup_r+0xba>
 8006d30:	4b25      	ldr	r3, [pc, #148]	; (8006dc8 <__swsetup_r+0xd4>)
 8006d32:	429c      	cmp	r4, r3
 8006d34:	d101      	bne.n	8006d3a <__swsetup_r+0x46>
 8006d36:	68ac      	ldr	r4, [r5, #8]
 8006d38:	e7eb      	b.n	8006d12 <__swsetup_r+0x1e>
 8006d3a:	4b24      	ldr	r3, [pc, #144]	; (8006dcc <__swsetup_r+0xd8>)
 8006d3c:	429c      	cmp	r4, r3
 8006d3e:	bf08      	it	eq
 8006d40:	68ec      	ldreq	r4, [r5, #12]
 8006d42:	e7e6      	b.n	8006d12 <__swsetup_r+0x1e>
 8006d44:	0758      	lsls	r0, r3, #29
 8006d46:	d512      	bpl.n	8006d6e <__swsetup_r+0x7a>
 8006d48:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006d4a:	b141      	cbz	r1, 8006d5e <__swsetup_r+0x6a>
 8006d4c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006d50:	4299      	cmp	r1, r3
 8006d52:	d002      	beq.n	8006d5a <__swsetup_r+0x66>
 8006d54:	4630      	mov	r0, r6
 8006d56:	f7ff fce1 	bl	800671c <_free_r>
 8006d5a:	2300      	movs	r3, #0
 8006d5c:	6363      	str	r3, [r4, #52]	; 0x34
 8006d5e:	89a3      	ldrh	r3, [r4, #12]
 8006d60:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006d64:	81a3      	strh	r3, [r4, #12]
 8006d66:	2300      	movs	r3, #0
 8006d68:	6063      	str	r3, [r4, #4]
 8006d6a:	6923      	ldr	r3, [r4, #16]
 8006d6c:	6023      	str	r3, [r4, #0]
 8006d6e:	89a3      	ldrh	r3, [r4, #12]
 8006d70:	f043 0308 	orr.w	r3, r3, #8
 8006d74:	81a3      	strh	r3, [r4, #12]
 8006d76:	6923      	ldr	r3, [r4, #16]
 8006d78:	b94b      	cbnz	r3, 8006d8e <__swsetup_r+0x9a>
 8006d7a:	89a3      	ldrh	r3, [r4, #12]
 8006d7c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006d80:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006d84:	d003      	beq.n	8006d8e <__swsetup_r+0x9a>
 8006d86:	4621      	mov	r1, r4
 8006d88:	4630      	mov	r0, r6
 8006d8a:	f000 f957 	bl	800703c <__smakebuf_r>
 8006d8e:	89a0      	ldrh	r0, [r4, #12]
 8006d90:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006d94:	f010 0301 	ands.w	r3, r0, #1
 8006d98:	d00a      	beq.n	8006db0 <__swsetup_r+0xbc>
 8006d9a:	2300      	movs	r3, #0
 8006d9c:	60a3      	str	r3, [r4, #8]
 8006d9e:	6963      	ldr	r3, [r4, #20]
 8006da0:	425b      	negs	r3, r3
 8006da2:	61a3      	str	r3, [r4, #24]
 8006da4:	6923      	ldr	r3, [r4, #16]
 8006da6:	b943      	cbnz	r3, 8006dba <__swsetup_r+0xc6>
 8006da8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006dac:	d1ba      	bne.n	8006d24 <__swsetup_r+0x30>
 8006dae:	bd70      	pop	{r4, r5, r6, pc}
 8006db0:	0781      	lsls	r1, r0, #30
 8006db2:	bf58      	it	pl
 8006db4:	6963      	ldrpl	r3, [r4, #20]
 8006db6:	60a3      	str	r3, [r4, #8]
 8006db8:	e7f4      	b.n	8006da4 <__swsetup_r+0xb0>
 8006dba:	2000      	movs	r0, #0
 8006dbc:	e7f7      	b.n	8006dae <__swsetup_r+0xba>
 8006dbe:	bf00      	nop
 8006dc0:	20000014 	.word	0x20000014
 8006dc4:	08008888 	.word	0x08008888
 8006dc8:	080088a8 	.word	0x080088a8
 8006dcc:	08008868 	.word	0x08008868

08006dd0 <__assert_func>:
 8006dd0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006dd2:	4614      	mov	r4, r2
 8006dd4:	461a      	mov	r2, r3
 8006dd6:	4b09      	ldr	r3, [pc, #36]	; (8006dfc <__assert_func+0x2c>)
 8006dd8:	4605      	mov	r5, r0
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	68d8      	ldr	r0, [r3, #12]
 8006dde:	b14c      	cbz	r4, 8006df4 <__assert_func+0x24>
 8006de0:	4b07      	ldr	r3, [pc, #28]	; (8006e00 <__assert_func+0x30>)
 8006de2:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006de6:	9100      	str	r1, [sp, #0]
 8006de8:	462b      	mov	r3, r5
 8006dea:	4906      	ldr	r1, [pc, #24]	; (8006e04 <__assert_func+0x34>)
 8006dec:	f000 f8dc 	bl	8006fa8 <fiprintf>
 8006df0:	f000 f9a1 	bl	8007136 <abort>
 8006df4:	4b04      	ldr	r3, [pc, #16]	; (8006e08 <__assert_func+0x38>)
 8006df6:	461c      	mov	r4, r3
 8006df8:	e7f3      	b.n	8006de2 <__assert_func+0x12>
 8006dfa:	bf00      	nop
 8006dfc:	20000014 	.word	0x20000014
 8006e00:	08008a35 	.word	0x08008a35
 8006e04:	08008a42 	.word	0x08008a42
 8006e08:	08008a70 	.word	0x08008a70

08006e0c <_close_r>:
 8006e0c:	b538      	push	{r3, r4, r5, lr}
 8006e0e:	2300      	movs	r3, #0
 8006e10:	4d05      	ldr	r5, [pc, #20]	; (8006e28 <_close_r+0x1c>)
 8006e12:	4604      	mov	r4, r0
 8006e14:	4608      	mov	r0, r1
 8006e16:	602b      	str	r3, [r5, #0]
 8006e18:	f7fa fc63 	bl	80016e2 <_close>
 8006e1c:	1c43      	adds	r3, r0, #1
 8006e1e:	d102      	bne.n	8006e26 <_close_r+0x1a>
 8006e20:	682b      	ldr	r3, [r5, #0]
 8006e22:	b103      	cbz	r3, 8006e26 <_close_r+0x1a>
 8006e24:	6023      	str	r3, [r4, #0]
 8006e26:	bd38      	pop	{r3, r4, r5, pc}
 8006e28:	20000a10 	.word	0x20000a10

08006e2c <__sflush_r>:
 8006e2c:	898a      	ldrh	r2, [r1, #12]
 8006e2e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e30:	4605      	mov	r5, r0
 8006e32:	0710      	lsls	r0, r2, #28
 8006e34:	460c      	mov	r4, r1
 8006e36:	d457      	bmi.n	8006ee8 <__sflush_r+0xbc>
 8006e38:	684b      	ldr	r3, [r1, #4]
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	dc04      	bgt.n	8006e48 <__sflush_r+0x1c>
 8006e3e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	dc01      	bgt.n	8006e48 <__sflush_r+0x1c>
 8006e44:	2000      	movs	r0, #0
 8006e46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006e48:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006e4a:	2e00      	cmp	r6, #0
 8006e4c:	d0fa      	beq.n	8006e44 <__sflush_r+0x18>
 8006e4e:	2300      	movs	r3, #0
 8006e50:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006e54:	682f      	ldr	r7, [r5, #0]
 8006e56:	602b      	str	r3, [r5, #0]
 8006e58:	d032      	beq.n	8006ec0 <__sflush_r+0x94>
 8006e5a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006e5c:	89a3      	ldrh	r3, [r4, #12]
 8006e5e:	075a      	lsls	r2, r3, #29
 8006e60:	d505      	bpl.n	8006e6e <__sflush_r+0x42>
 8006e62:	6863      	ldr	r3, [r4, #4]
 8006e64:	1ac0      	subs	r0, r0, r3
 8006e66:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006e68:	b10b      	cbz	r3, 8006e6e <__sflush_r+0x42>
 8006e6a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006e6c:	1ac0      	subs	r0, r0, r3
 8006e6e:	2300      	movs	r3, #0
 8006e70:	4602      	mov	r2, r0
 8006e72:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006e74:	4628      	mov	r0, r5
 8006e76:	6a21      	ldr	r1, [r4, #32]
 8006e78:	47b0      	blx	r6
 8006e7a:	1c43      	adds	r3, r0, #1
 8006e7c:	89a3      	ldrh	r3, [r4, #12]
 8006e7e:	d106      	bne.n	8006e8e <__sflush_r+0x62>
 8006e80:	6829      	ldr	r1, [r5, #0]
 8006e82:	291d      	cmp	r1, #29
 8006e84:	d82c      	bhi.n	8006ee0 <__sflush_r+0xb4>
 8006e86:	4a29      	ldr	r2, [pc, #164]	; (8006f2c <__sflush_r+0x100>)
 8006e88:	40ca      	lsrs	r2, r1
 8006e8a:	07d6      	lsls	r6, r2, #31
 8006e8c:	d528      	bpl.n	8006ee0 <__sflush_r+0xb4>
 8006e8e:	2200      	movs	r2, #0
 8006e90:	6062      	str	r2, [r4, #4]
 8006e92:	6922      	ldr	r2, [r4, #16]
 8006e94:	04d9      	lsls	r1, r3, #19
 8006e96:	6022      	str	r2, [r4, #0]
 8006e98:	d504      	bpl.n	8006ea4 <__sflush_r+0x78>
 8006e9a:	1c42      	adds	r2, r0, #1
 8006e9c:	d101      	bne.n	8006ea2 <__sflush_r+0x76>
 8006e9e:	682b      	ldr	r3, [r5, #0]
 8006ea0:	b903      	cbnz	r3, 8006ea4 <__sflush_r+0x78>
 8006ea2:	6560      	str	r0, [r4, #84]	; 0x54
 8006ea4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006ea6:	602f      	str	r7, [r5, #0]
 8006ea8:	2900      	cmp	r1, #0
 8006eaa:	d0cb      	beq.n	8006e44 <__sflush_r+0x18>
 8006eac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006eb0:	4299      	cmp	r1, r3
 8006eb2:	d002      	beq.n	8006eba <__sflush_r+0x8e>
 8006eb4:	4628      	mov	r0, r5
 8006eb6:	f7ff fc31 	bl	800671c <_free_r>
 8006eba:	2000      	movs	r0, #0
 8006ebc:	6360      	str	r0, [r4, #52]	; 0x34
 8006ebe:	e7c2      	b.n	8006e46 <__sflush_r+0x1a>
 8006ec0:	6a21      	ldr	r1, [r4, #32]
 8006ec2:	2301      	movs	r3, #1
 8006ec4:	4628      	mov	r0, r5
 8006ec6:	47b0      	blx	r6
 8006ec8:	1c41      	adds	r1, r0, #1
 8006eca:	d1c7      	bne.n	8006e5c <__sflush_r+0x30>
 8006ecc:	682b      	ldr	r3, [r5, #0]
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d0c4      	beq.n	8006e5c <__sflush_r+0x30>
 8006ed2:	2b1d      	cmp	r3, #29
 8006ed4:	d001      	beq.n	8006eda <__sflush_r+0xae>
 8006ed6:	2b16      	cmp	r3, #22
 8006ed8:	d101      	bne.n	8006ede <__sflush_r+0xb2>
 8006eda:	602f      	str	r7, [r5, #0]
 8006edc:	e7b2      	b.n	8006e44 <__sflush_r+0x18>
 8006ede:	89a3      	ldrh	r3, [r4, #12]
 8006ee0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006ee4:	81a3      	strh	r3, [r4, #12]
 8006ee6:	e7ae      	b.n	8006e46 <__sflush_r+0x1a>
 8006ee8:	690f      	ldr	r7, [r1, #16]
 8006eea:	2f00      	cmp	r7, #0
 8006eec:	d0aa      	beq.n	8006e44 <__sflush_r+0x18>
 8006eee:	0793      	lsls	r3, r2, #30
 8006ef0:	bf18      	it	ne
 8006ef2:	2300      	movne	r3, #0
 8006ef4:	680e      	ldr	r6, [r1, #0]
 8006ef6:	bf08      	it	eq
 8006ef8:	694b      	ldreq	r3, [r1, #20]
 8006efa:	1bf6      	subs	r6, r6, r7
 8006efc:	600f      	str	r7, [r1, #0]
 8006efe:	608b      	str	r3, [r1, #8]
 8006f00:	2e00      	cmp	r6, #0
 8006f02:	dd9f      	ble.n	8006e44 <__sflush_r+0x18>
 8006f04:	4633      	mov	r3, r6
 8006f06:	463a      	mov	r2, r7
 8006f08:	4628      	mov	r0, r5
 8006f0a:	6a21      	ldr	r1, [r4, #32]
 8006f0c:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8006f10:	47e0      	blx	ip
 8006f12:	2800      	cmp	r0, #0
 8006f14:	dc06      	bgt.n	8006f24 <__sflush_r+0xf8>
 8006f16:	89a3      	ldrh	r3, [r4, #12]
 8006f18:	f04f 30ff 	mov.w	r0, #4294967295
 8006f1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006f20:	81a3      	strh	r3, [r4, #12]
 8006f22:	e790      	b.n	8006e46 <__sflush_r+0x1a>
 8006f24:	4407      	add	r7, r0
 8006f26:	1a36      	subs	r6, r6, r0
 8006f28:	e7ea      	b.n	8006f00 <__sflush_r+0xd4>
 8006f2a:	bf00      	nop
 8006f2c:	20400001 	.word	0x20400001

08006f30 <_fflush_r>:
 8006f30:	b538      	push	{r3, r4, r5, lr}
 8006f32:	690b      	ldr	r3, [r1, #16]
 8006f34:	4605      	mov	r5, r0
 8006f36:	460c      	mov	r4, r1
 8006f38:	b913      	cbnz	r3, 8006f40 <_fflush_r+0x10>
 8006f3a:	2500      	movs	r5, #0
 8006f3c:	4628      	mov	r0, r5
 8006f3e:	bd38      	pop	{r3, r4, r5, pc}
 8006f40:	b118      	cbz	r0, 8006f4a <_fflush_r+0x1a>
 8006f42:	6983      	ldr	r3, [r0, #24]
 8006f44:	b90b      	cbnz	r3, 8006f4a <_fflush_r+0x1a>
 8006f46:	f7fe ff89 	bl	8005e5c <__sinit>
 8006f4a:	4b14      	ldr	r3, [pc, #80]	; (8006f9c <_fflush_r+0x6c>)
 8006f4c:	429c      	cmp	r4, r3
 8006f4e:	d11b      	bne.n	8006f88 <_fflush_r+0x58>
 8006f50:	686c      	ldr	r4, [r5, #4]
 8006f52:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d0ef      	beq.n	8006f3a <_fflush_r+0xa>
 8006f5a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006f5c:	07d0      	lsls	r0, r2, #31
 8006f5e:	d404      	bmi.n	8006f6a <_fflush_r+0x3a>
 8006f60:	0599      	lsls	r1, r3, #22
 8006f62:	d402      	bmi.n	8006f6a <_fflush_r+0x3a>
 8006f64:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006f66:	f7ff f81c 	bl	8005fa2 <__retarget_lock_acquire_recursive>
 8006f6a:	4628      	mov	r0, r5
 8006f6c:	4621      	mov	r1, r4
 8006f6e:	f7ff ff5d 	bl	8006e2c <__sflush_r>
 8006f72:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006f74:	4605      	mov	r5, r0
 8006f76:	07da      	lsls	r2, r3, #31
 8006f78:	d4e0      	bmi.n	8006f3c <_fflush_r+0xc>
 8006f7a:	89a3      	ldrh	r3, [r4, #12]
 8006f7c:	059b      	lsls	r3, r3, #22
 8006f7e:	d4dd      	bmi.n	8006f3c <_fflush_r+0xc>
 8006f80:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006f82:	f7ff f80f 	bl	8005fa4 <__retarget_lock_release_recursive>
 8006f86:	e7d9      	b.n	8006f3c <_fflush_r+0xc>
 8006f88:	4b05      	ldr	r3, [pc, #20]	; (8006fa0 <_fflush_r+0x70>)
 8006f8a:	429c      	cmp	r4, r3
 8006f8c:	d101      	bne.n	8006f92 <_fflush_r+0x62>
 8006f8e:	68ac      	ldr	r4, [r5, #8]
 8006f90:	e7df      	b.n	8006f52 <_fflush_r+0x22>
 8006f92:	4b04      	ldr	r3, [pc, #16]	; (8006fa4 <_fflush_r+0x74>)
 8006f94:	429c      	cmp	r4, r3
 8006f96:	bf08      	it	eq
 8006f98:	68ec      	ldreq	r4, [r5, #12]
 8006f9a:	e7da      	b.n	8006f52 <_fflush_r+0x22>
 8006f9c:	08008888 	.word	0x08008888
 8006fa0:	080088a8 	.word	0x080088a8
 8006fa4:	08008868 	.word	0x08008868

08006fa8 <fiprintf>:
 8006fa8:	b40e      	push	{r1, r2, r3}
 8006faa:	b503      	push	{r0, r1, lr}
 8006fac:	4601      	mov	r1, r0
 8006fae:	ab03      	add	r3, sp, #12
 8006fb0:	4805      	ldr	r0, [pc, #20]	; (8006fc8 <fiprintf+0x20>)
 8006fb2:	f853 2b04 	ldr.w	r2, [r3], #4
 8006fb6:	6800      	ldr	r0, [r0, #0]
 8006fb8:	9301      	str	r3, [sp, #4]
 8006fba:	f7ff fcb3 	bl	8006924 <_vfiprintf_r>
 8006fbe:	b002      	add	sp, #8
 8006fc0:	f85d eb04 	ldr.w	lr, [sp], #4
 8006fc4:	b003      	add	sp, #12
 8006fc6:	4770      	bx	lr
 8006fc8:	20000014 	.word	0x20000014

08006fcc <_lseek_r>:
 8006fcc:	b538      	push	{r3, r4, r5, lr}
 8006fce:	4604      	mov	r4, r0
 8006fd0:	4608      	mov	r0, r1
 8006fd2:	4611      	mov	r1, r2
 8006fd4:	2200      	movs	r2, #0
 8006fd6:	4d05      	ldr	r5, [pc, #20]	; (8006fec <_lseek_r+0x20>)
 8006fd8:	602a      	str	r2, [r5, #0]
 8006fda:	461a      	mov	r2, r3
 8006fdc:	f7fa fba5 	bl	800172a <_lseek>
 8006fe0:	1c43      	adds	r3, r0, #1
 8006fe2:	d102      	bne.n	8006fea <_lseek_r+0x1e>
 8006fe4:	682b      	ldr	r3, [r5, #0]
 8006fe6:	b103      	cbz	r3, 8006fea <_lseek_r+0x1e>
 8006fe8:	6023      	str	r3, [r4, #0]
 8006fea:	bd38      	pop	{r3, r4, r5, pc}
 8006fec:	20000a10 	.word	0x20000a10

08006ff0 <__swhatbuf_r>:
 8006ff0:	b570      	push	{r4, r5, r6, lr}
 8006ff2:	460e      	mov	r6, r1
 8006ff4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ff8:	4614      	mov	r4, r2
 8006ffa:	2900      	cmp	r1, #0
 8006ffc:	461d      	mov	r5, r3
 8006ffe:	b096      	sub	sp, #88	; 0x58
 8007000:	da08      	bge.n	8007014 <__swhatbuf_r+0x24>
 8007002:	2200      	movs	r2, #0
 8007004:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8007008:	602a      	str	r2, [r5, #0]
 800700a:	061a      	lsls	r2, r3, #24
 800700c:	d410      	bmi.n	8007030 <__swhatbuf_r+0x40>
 800700e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007012:	e00e      	b.n	8007032 <__swhatbuf_r+0x42>
 8007014:	466a      	mov	r2, sp
 8007016:	f000 f895 	bl	8007144 <_fstat_r>
 800701a:	2800      	cmp	r0, #0
 800701c:	dbf1      	blt.n	8007002 <__swhatbuf_r+0x12>
 800701e:	9a01      	ldr	r2, [sp, #4]
 8007020:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007024:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007028:	425a      	negs	r2, r3
 800702a:	415a      	adcs	r2, r3
 800702c:	602a      	str	r2, [r5, #0]
 800702e:	e7ee      	b.n	800700e <__swhatbuf_r+0x1e>
 8007030:	2340      	movs	r3, #64	; 0x40
 8007032:	2000      	movs	r0, #0
 8007034:	6023      	str	r3, [r4, #0]
 8007036:	b016      	add	sp, #88	; 0x58
 8007038:	bd70      	pop	{r4, r5, r6, pc}
	...

0800703c <__smakebuf_r>:
 800703c:	898b      	ldrh	r3, [r1, #12]
 800703e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007040:	079d      	lsls	r5, r3, #30
 8007042:	4606      	mov	r6, r0
 8007044:	460c      	mov	r4, r1
 8007046:	d507      	bpl.n	8007058 <__smakebuf_r+0x1c>
 8007048:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800704c:	6023      	str	r3, [r4, #0]
 800704e:	6123      	str	r3, [r4, #16]
 8007050:	2301      	movs	r3, #1
 8007052:	6163      	str	r3, [r4, #20]
 8007054:	b002      	add	sp, #8
 8007056:	bd70      	pop	{r4, r5, r6, pc}
 8007058:	466a      	mov	r2, sp
 800705a:	ab01      	add	r3, sp, #4
 800705c:	f7ff ffc8 	bl	8006ff0 <__swhatbuf_r>
 8007060:	9900      	ldr	r1, [sp, #0]
 8007062:	4605      	mov	r5, r0
 8007064:	4630      	mov	r0, r6
 8007066:	f7ff fbc1 	bl	80067ec <_malloc_r>
 800706a:	b948      	cbnz	r0, 8007080 <__smakebuf_r+0x44>
 800706c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007070:	059a      	lsls	r2, r3, #22
 8007072:	d4ef      	bmi.n	8007054 <__smakebuf_r+0x18>
 8007074:	f023 0303 	bic.w	r3, r3, #3
 8007078:	f043 0302 	orr.w	r3, r3, #2
 800707c:	81a3      	strh	r3, [r4, #12]
 800707e:	e7e3      	b.n	8007048 <__smakebuf_r+0xc>
 8007080:	4b0d      	ldr	r3, [pc, #52]	; (80070b8 <__smakebuf_r+0x7c>)
 8007082:	62b3      	str	r3, [r6, #40]	; 0x28
 8007084:	89a3      	ldrh	r3, [r4, #12]
 8007086:	6020      	str	r0, [r4, #0]
 8007088:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800708c:	81a3      	strh	r3, [r4, #12]
 800708e:	9b00      	ldr	r3, [sp, #0]
 8007090:	6120      	str	r0, [r4, #16]
 8007092:	6163      	str	r3, [r4, #20]
 8007094:	9b01      	ldr	r3, [sp, #4]
 8007096:	b15b      	cbz	r3, 80070b0 <__smakebuf_r+0x74>
 8007098:	4630      	mov	r0, r6
 800709a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800709e:	f000 f863 	bl	8007168 <_isatty_r>
 80070a2:	b128      	cbz	r0, 80070b0 <__smakebuf_r+0x74>
 80070a4:	89a3      	ldrh	r3, [r4, #12]
 80070a6:	f023 0303 	bic.w	r3, r3, #3
 80070aa:	f043 0301 	orr.w	r3, r3, #1
 80070ae:	81a3      	strh	r3, [r4, #12]
 80070b0:	89a0      	ldrh	r0, [r4, #12]
 80070b2:	4305      	orrs	r5, r0
 80070b4:	81a5      	strh	r5, [r4, #12]
 80070b6:	e7cd      	b.n	8007054 <__smakebuf_r+0x18>
 80070b8:	08005df5 	.word	0x08005df5

080070bc <__ascii_mbtowc>:
 80070bc:	b082      	sub	sp, #8
 80070be:	b901      	cbnz	r1, 80070c2 <__ascii_mbtowc+0x6>
 80070c0:	a901      	add	r1, sp, #4
 80070c2:	b142      	cbz	r2, 80070d6 <__ascii_mbtowc+0x1a>
 80070c4:	b14b      	cbz	r3, 80070da <__ascii_mbtowc+0x1e>
 80070c6:	7813      	ldrb	r3, [r2, #0]
 80070c8:	600b      	str	r3, [r1, #0]
 80070ca:	7812      	ldrb	r2, [r2, #0]
 80070cc:	1e10      	subs	r0, r2, #0
 80070ce:	bf18      	it	ne
 80070d0:	2001      	movne	r0, #1
 80070d2:	b002      	add	sp, #8
 80070d4:	4770      	bx	lr
 80070d6:	4610      	mov	r0, r2
 80070d8:	e7fb      	b.n	80070d2 <__ascii_mbtowc+0x16>
 80070da:	f06f 0001 	mvn.w	r0, #1
 80070de:	e7f8      	b.n	80070d2 <__ascii_mbtowc+0x16>

080070e0 <__malloc_lock>:
 80070e0:	4801      	ldr	r0, [pc, #4]	; (80070e8 <__malloc_lock+0x8>)
 80070e2:	f7fe bf5e 	b.w	8005fa2 <__retarget_lock_acquire_recursive>
 80070e6:	bf00      	nop
 80070e8:	20000a04 	.word	0x20000a04

080070ec <__malloc_unlock>:
 80070ec:	4801      	ldr	r0, [pc, #4]	; (80070f4 <__malloc_unlock+0x8>)
 80070ee:	f7fe bf59 	b.w	8005fa4 <__retarget_lock_release_recursive>
 80070f2:	bf00      	nop
 80070f4:	20000a04 	.word	0x20000a04

080070f8 <_read_r>:
 80070f8:	b538      	push	{r3, r4, r5, lr}
 80070fa:	4604      	mov	r4, r0
 80070fc:	4608      	mov	r0, r1
 80070fe:	4611      	mov	r1, r2
 8007100:	2200      	movs	r2, #0
 8007102:	4d05      	ldr	r5, [pc, #20]	; (8007118 <_read_r+0x20>)
 8007104:	602a      	str	r2, [r5, #0]
 8007106:	461a      	mov	r2, r3
 8007108:	f7fa face 	bl	80016a8 <_read>
 800710c:	1c43      	adds	r3, r0, #1
 800710e:	d102      	bne.n	8007116 <_read_r+0x1e>
 8007110:	682b      	ldr	r3, [r5, #0]
 8007112:	b103      	cbz	r3, 8007116 <_read_r+0x1e>
 8007114:	6023      	str	r3, [r4, #0]
 8007116:	bd38      	pop	{r3, r4, r5, pc}
 8007118:	20000a10 	.word	0x20000a10

0800711c <__ascii_wctomb>:
 800711c:	4603      	mov	r3, r0
 800711e:	4608      	mov	r0, r1
 8007120:	b141      	cbz	r1, 8007134 <__ascii_wctomb+0x18>
 8007122:	2aff      	cmp	r2, #255	; 0xff
 8007124:	d904      	bls.n	8007130 <__ascii_wctomb+0x14>
 8007126:	228a      	movs	r2, #138	; 0x8a
 8007128:	f04f 30ff 	mov.w	r0, #4294967295
 800712c:	601a      	str	r2, [r3, #0]
 800712e:	4770      	bx	lr
 8007130:	2001      	movs	r0, #1
 8007132:	700a      	strb	r2, [r1, #0]
 8007134:	4770      	bx	lr

08007136 <abort>:
 8007136:	2006      	movs	r0, #6
 8007138:	b508      	push	{r3, lr}
 800713a:	f000 f84d 	bl	80071d8 <raise>
 800713e:	2001      	movs	r0, #1
 8007140:	f7fa faa8 	bl	8001694 <_exit>

08007144 <_fstat_r>:
 8007144:	b538      	push	{r3, r4, r5, lr}
 8007146:	2300      	movs	r3, #0
 8007148:	4d06      	ldr	r5, [pc, #24]	; (8007164 <_fstat_r+0x20>)
 800714a:	4604      	mov	r4, r0
 800714c:	4608      	mov	r0, r1
 800714e:	4611      	mov	r1, r2
 8007150:	602b      	str	r3, [r5, #0]
 8007152:	f7fa fad1 	bl	80016f8 <_fstat>
 8007156:	1c43      	adds	r3, r0, #1
 8007158:	d102      	bne.n	8007160 <_fstat_r+0x1c>
 800715a:	682b      	ldr	r3, [r5, #0]
 800715c:	b103      	cbz	r3, 8007160 <_fstat_r+0x1c>
 800715e:	6023      	str	r3, [r4, #0]
 8007160:	bd38      	pop	{r3, r4, r5, pc}
 8007162:	bf00      	nop
 8007164:	20000a10 	.word	0x20000a10

08007168 <_isatty_r>:
 8007168:	b538      	push	{r3, r4, r5, lr}
 800716a:	2300      	movs	r3, #0
 800716c:	4d05      	ldr	r5, [pc, #20]	; (8007184 <_isatty_r+0x1c>)
 800716e:	4604      	mov	r4, r0
 8007170:	4608      	mov	r0, r1
 8007172:	602b      	str	r3, [r5, #0]
 8007174:	f7fa facf 	bl	8001716 <_isatty>
 8007178:	1c43      	adds	r3, r0, #1
 800717a:	d102      	bne.n	8007182 <_isatty_r+0x1a>
 800717c:	682b      	ldr	r3, [r5, #0]
 800717e:	b103      	cbz	r3, 8007182 <_isatty_r+0x1a>
 8007180:	6023      	str	r3, [r4, #0]
 8007182:	bd38      	pop	{r3, r4, r5, pc}
 8007184:	20000a10 	.word	0x20000a10

08007188 <_raise_r>:
 8007188:	291f      	cmp	r1, #31
 800718a:	b538      	push	{r3, r4, r5, lr}
 800718c:	4604      	mov	r4, r0
 800718e:	460d      	mov	r5, r1
 8007190:	d904      	bls.n	800719c <_raise_r+0x14>
 8007192:	2316      	movs	r3, #22
 8007194:	6003      	str	r3, [r0, #0]
 8007196:	f04f 30ff 	mov.w	r0, #4294967295
 800719a:	bd38      	pop	{r3, r4, r5, pc}
 800719c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800719e:	b112      	cbz	r2, 80071a6 <_raise_r+0x1e>
 80071a0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80071a4:	b94b      	cbnz	r3, 80071ba <_raise_r+0x32>
 80071a6:	4620      	mov	r0, r4
 80071a8:	f000 f830 	bl	800720c <_getpid_r>
 80071ac:	462a      	mov	r2, r5
 80071ae:	4601      	mov	r1, r0
 80071b0:	4620      	mov	r0, r4
 80071b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80071b6:	f000 b817 	b.w	80071e8 <_kill_r>
 80071ba:	2b01      	cmp	r3, #1
 80071bc:	d00a      	beq.n	80071d4 <_raise_r+0x4c>
 80071be:	1c59      	adds	r1, r3, #1
 80071c0:	d103      	bne.n	80071ca <_raise_r+0x42>
 80071c2:	2316      	movs	r3, #22
 80071c4:	6003      	str	r3, [r0, #0]
 80071c6:	2001      	movs	r0, #1
 80071c8:	e7e7      	b.n	800719a <_raise_r+0x12>
 80071ca:	2400      	movs	r4, #0
 80071cc:	4628      	mov	r0, r5
 80071ce:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80071d2:	4798      	blx	r3
 80071d4:	2000      	movs	r0, #0
 80071d6:	e7e0      	b.n	800719a <_raise_r+0x12>

080071d8 <raise>:
 80071d8:	4b02      	ldr	r3, [pc, #8]	; (80071e4 <raise+0xc>)
 80071da:	4601      	mov	r1, r0
 80071dc:	6818      	ldr	r0, [r3, #0]
 80071de:	f7ff bfd3 	b.w	8007188 <_raise_r>
 80071e2:	bf00      	nop
 80071e4:	20000014 	.word	0x20000014

080071e8 <_kill_r>:
 80071e8:	b538      	push	{r3, r4, r5, lr}
 80071ea:	2300      	movs	r3, #0
 80071ec:	4d06      	ldr	r5, [pc, #24]	; (8007208 <_kill_r+0x20>)
 80071ee:	4604      	mov	r4, r0
 80071f0:	4608      	mov	r0, r1
 80071f2:	4611      	mov	r1, r2
 80071f4:	602b      	str	r3, [r5, #0]
 80071f6:	f7fa fa3d 	bl	8001674 <_kill>
 80071fa:	1c43      	adds	r3, r0, #1
 80071fc:	d102      	bne.n	8007204 <_kill_r+0x1c>
 80071fe:	682b      	ldr	r3, [r5, #0]
 8007200:	b103      	cbz	r3, 8007204 <_kill_r+0x1c>
 8007202:	6023      	str	r3, [r4, #0]
 8007204:	bd38      	pop	{r3, r4, r5, pc}
 8007206:	bf00      	nop
 8007208:	20000a10 	.word	0x20000a10

0800720c <_getpid_r>:
 800720c:	f7fa ba2b 	b.w	8001666 <_getpid>

08007210 <sin>:
 8007210:	b530      	push	{r4, r5, lr}
 8007212:	4a20      	ldr	r2, [pc, #128]	; (8007294 <sin+0x84>)
 8007214:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007218:	4293      	cmp	r3, r2
 800721a:	b087      	sub	sp, #28
 800721c:	dc06      	bgt.n	800722c <sin+0x1c>
 800721e:	2300      	movs	r3, #0
 8007220:	2200      	movs	r2, #0
 8007222:	9300      	str	r3, [sp, #0]
 8007224:	2300      	movs	r3, #0
 8007226:	f000 fe33 	bl	8007e90 <__kernel_sin>
 800722a:	e006      	b.n	800723a <sin+0x2a>
 800722c:	4a1a      	ldr	r2, [pc, #104]	; (8007298 <sin+0x88>)
 800722e:	4293      	cmp	r3, r2
 8007230:	dd05      	ble.n	800723e <sin+0x2e>
 8007232:	4602      	mov	r2, r0
 8007234:	460b      	mov	r3, r1
 8007236:	f7f8 ff97 	bl	8000168 <__aeabi_dsub>
 800723a:	b007      	add	sp, #28
 800723c:	bd30      	pop	{r4, r5, pc}
 800723e:	aa02      	add	r2, sp, #8
 8007240:	f000 f82e 	bl	80072a0 <__ieee754_rem_pio2>
 8007244:	f000 0003 	and.w	r0, r0, #3
 8007248:	2801      	cmp	r0, #1
 800724a:	d009      	beq.n	8007260 <sin+0x50>
 800724c:	2802      	cmp	r0, #2
 800724e:	d00e      	beq.n	800726e <sin+0x5e>
 8007250:	b9c0      	cbnz	r0, 8007284 <sin+0x74>
 8007252:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007256:	2301      	movs	r3, #1
 8007258:	9300      	str	r3, [sp, #0]
 800725a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800725e:	e7e2      	b.n	8007226 <sin+0x16>
 8007260:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007264:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007268:	f000 fa12 	bl	8007690 <__kernel_cos>
 800726c:	e7e5      	b.n	800723a <sin+0x2a>
 800726e:	2301      	movs	r3, #1
 8007270:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007274:	9300      	str	r3, [sp, #0]
 8007276:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800727a:	f000 fe09 	bl	8007e90 <__kernel_sin>
 800727e:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8007282:	e7da      	b.n	800723a <sin+0x2a>
 8007284:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007288:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800728c:	f000 fa00 	bl	8007690 <__kernel_cos>
 8007290:	e7f5      	b.n	800727e <sin+0x6e>
 8007292:	bf00      	nop
 8007294:	3fe921fb 	.word	0x3fe921fb
 8007298:	7fefffff 	.word	0x7fefffff
 800729c:	00000000 	.word	0x00000000

080072a0 <__ieee754_rem_pio2>:
 80072a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072a4:	4614      	mov	r4, r2
 80072a6:	4ac4      	ldr	r2, [pc, #784]	; (80075b8 <__ieee754_rem_pio2+0x318>)
 80072a8:	f021 4a00 	bic.w	sl, r1, #2147483648	; 0x80000000
 80072ac:	b08d      	sub	sp, #52	; 0x34
 80072ae:	4592      	cmp	sl, r2
 80072b0:	9104      	str	r1, [sp, #16]
 80072b2:	dc07      	bgt.n	80072c4 <__ieee754_rem_pio2+0x24>
 80072b4:	2200      	movs	r2, #0
 80072b6:	2300      	movs	r3, #0
 80072b8:	e9c4 0100 	strd	r0, r1, [r4]
 80072bc:	e9c4 2302 	strd	r2, r3, [r4, #8]
 80072c0:	2500      	movs	r5, #0
 80072c2:	e024      	b.n	800730e <__ieee754_rem_pio2+0x6e>
 80072c4:	4abd      	ldr	r2, [pc, #756]	; (80075bc <__ieee754_rem_pio2+0x31c>)
 80072c6:	4592      	cmp	sl, r2
 80072c8:	dc72      	bgt.n	80073b0 <__ieee754_rem_pio2+0x110>
 80072ca:	9b04      	ldr	r3, [sp, #16]
 80072cc:	4dbc      	ldr	r5, [pc, #752]	; (80075c0 <__ieee754_rem_pio2+0x320>)
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	a3ab      	add	r3, pc, #684	; (adr r3, 8007580 <__ieee754_rem_pio2+0x2e0>)
 80072d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072d6:	dd36      	ble.n	8007346 <__ieee754_rem_pio2+0xa6>
 80072d8:	f7f8 ff46 	bl	8000168 <__aeabi_dsub>
 80072dc:	45aa      	cmp	sl, r5
 80072de:	4606      	mov	r6, r0
 80072e0:	460f      	mov	r7, r1
 80072e2:	d018      	beq.n	8007316 <__ieee754_rem_pio2+0x76>
 80072e4:	a3a8      	add	r3, pc, #672	; (adr r3, 8007588 <__ieee754_rem_pio2+0x2e8>)
 80072e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072ea:	f7f8 ff3d 	bl	8000168 <__aeabi_dsub>
 80072ee:	4602      	mov	r2, r0
 80072f0:	460b      	mov	r3, r1
 80072f2:	4630      	mov	r0, r6
 80072f4:	e9c4 2300 	strd	r2, r3, [r4]
 80072f8:	4639      	mov	r1, r7
 80072fa:	f7f8 ff35 	bl	8000168 <__aeabi_dsub>
 80072fe:	a3a2      	add	r3, pc, #648	; (adr r3, 8007588 <__ieee754_rem_pio2+0x2e8>)
 8007300:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007304:	f7f8 ff30 	bl	8000168 <__aeabi_dsub>
 8007308:	2501      	movs	r5, #1
 800730a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800730e:	4628      	mov	r0, r5
 8007310:	b00d      	add	sp, #52	; 0x34
 8007312:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007316:	a39e      	add	r3, pc, #632	; (adr r3, 8007590 <__ieee754_rem_pio2+0x2f0>)
 8007318:	e9d3 2300 	ldrd	r2, r3, [r3]
 800731c:	f7f8 ff24 	bl	8000168 <__aeabi_dsub>
 8007320:	a39d      	add	r3, pc, #628	; (adr r3, 8007598 <__ieee754_rem_pio2+0x2f8>)
 8007322:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007326:	4606      	mov	r6, r0
 8007328:	460f      	mov	r7, r1
 800732a:	f7f8 ff1d 	bl	8000168 <__aeabi_dsub>
 800732e:	4602      	mov	r2, r0
 8007330:	460b      	mov	r3, r1
 8007332:	4630      	mov	r0, r6
 8007334:	e9c4 2300 	strd	r2, r3, [r4]
 8007338:	4639      	mov	r1, r7
 800733a:	f7f8 ff15 	bl	8000168 <__aeabi_dsub>
 800733e:	a396      	add	r3, pc, #600	; (adr r3, 8007598 <__ieee754_rem_pio2+0x2f8>)
 8007340:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007344:	e7de      	b.n	8007304 <__ieee754_rem_pio2+0x64>
 8007346:	f7f8 ff11 	bl	800016c <__adddf3>
 800734a:	45aa      	cmp	sl, r5
 800734c:	4606      	mov	r6, r0
 800734e:	460f      	mov	r7, r1
 8007350:	d016      	beq.n	8007380 <__ieee754_rem_pio2+0xe0>
 8007352:	a38d      	add	r3, pc, #564	; (adr r3, 8007588 <__ieee754_rem_pio2+0x2e8>)
 8007354:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007358:	f7f8 ff08 	bl	800016c <__adddf3>
 800735c:	4602      	mov	r2, r0
 800735e:	460b      	mov	r3, r1
 8007360:	4630      	mov	r0, r6
 8007362:	e9c4 2300 	strd	r2, r3, [r4]
 8007366:	4639      	mov	r1, r7
 8007368:	f7f8 fefe 	bl	8000168 <__aeabi_dsub>
 800736c:	a386      	add	r3, pc, #536	; (adr r3, 8007588 <__ieee754_rem_pio2+0x2e8>)
 800736e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007372:	f7f8 fefb 	bl	800016c <__adddf3>
 8007376:	f04f 35ff 	mov.w	r5, #4294967295
 800737a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800737e:	e7c6      	b.n	800730e <__ieee754_rem_pio2+0x6e>
 8007380:	a383      	add	r3, pc, #524	; (adr r3, 8007590 <__ieee754_rem_pio2+0x2f0>)
 8007382:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007386:	f7f8 fef1 	bl	800016c <__adddf3>
 800738a:	a383      	add	r3, pc, #524	; (adr r3, 8007598 <__ieee754_rem_pio2+0x2f8>)
 800738c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007390:	4606      	mov	r6, r0
 8007392:	460f      	mov	r7, r1
 8007394:	f7f8 feea 	bl	800016c <__adddf3>
 8007398:	4602      	mov	r2, r0
 800739a:	460b      	mov	r3, r1
 800739c:	4630      	mov	r0, r6
 800739e:	e9c4 2300 	strd	r2, r3, [r4]
 80073a2:	4639      	mov	r1, r7
 80073a4:	f7f8 fee0 	bl	8000168 <__aeabi_dsub>
 80073a8:	a37b      	add	r3, pc, #492	; (adr r3, 8007598 <__ieee754_rem_pio2+0x2f8>)
 80073aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073ae:	e7e0      	b.n	8007372 <__ieee754_rem_pio2+0xd2>
 80073b0:	4a84      	ldr	r2, [pc, #528]	; (80075c4 <__ieee754_rem_pio2+0x324>)
 80073b2:	4592      	cmp	sl, r2
 80073b4:	f300 80d5 	bgt.w	8007562 <__ieee754_rem_pio2+0x2c2>
 80073b8:	f000 fe20 	bl	8007ffc <fabs>
 80073bc:	a378      	add	r3, pc, #480	; (adr r3, 80075a0 <__ieee754_rem_pio2+0x300>)
 80073be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073c2:	4606      	mov	r6, r0
 80073c4:	460f      	mov	r7, r1
 80073c6:	f7f9 f887 	bl	80004d8 <__aeabi_dmul>
 80073ca:	2200      	movs	r2, #0
 80073cc:	4b7e      	ldr	r3, [pc, #504]	; (80075c8 <__ieee754_rem_pio2+0x328>)
 80073ce:	f7f8 fecd 	bl	800016c <__adddf3>
 80073d2:	f7f9 fb31 	bl	8000a38 <__aeabi_d2iz>
 80073d6:	4605      	mov	r5, r0
 80073d8:	f7f9 f814 	bl	8000404 <__aeabi_i2d>
 80073dc:	4602      	mov	r2, r0
 80073de:	460b      	mov	r3, r1
 80073e0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80073e4:	a366      	add	r3, pc, #408	; (adr r3, 8007580 <__ieee754_rem_pio2+0x2e0>)
 80073e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073ea:	f7f9 f875 	bl	80004d8 <__aeabi_dmul>
 80073ee:	4602      	mov	r2, r0
 80073f0:	460b      	mov	r3, r1
 80073f2:	4630      	mov	r0, r6
 80073f4:	4639      	mov	r1, r7
 80073f6:	f7f8 feb7 	bl	8000168 <__aeabi_dsub>
 80073fa:	a363      	add	r3, pc, #396	; (adr r3, 8007588 <__ieee754_rem_pio2+0x2e8>)
 80073fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007400:	4680      	mov	r8, r0
 8007402:	4689      	mov	r9, r1
 8007404:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007408:	f7f9 f866 	bl	80004d8 <__aeabi_dmul>
 800740c:	2d1f      	cmp	r5, #31
 800740e:	4606      	mov	r6, r0
 8007410:	460f      	mov	r7, r1
 8007412:	dc0e      	bgt.n	8007432 <__ieee754_rem_pio2+0x192>
 8007414:	4b6d      	ldr	r3, [pc, #436]	; (80075cc <__ieee754_rem_pio2+0x32c>)
 8007416:	1e6a      	subs	r2, r5, #1
 8007418:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800741c:	4553      	cmp	r3, sl
 800741e:	d008      	beq.n	8007432 <__ieee754_rem_pio2+0x192>
 8007420:	4632      	mov	r2, r6
 8007422:	463b      	mov	r3, r7
 8007424:	4640      	mov	r0, r8
 8007426:	4649      	mov	r1, r9
 8007428:	f7f8 fe9e 	bl	8000168 <__aeabi_dsub>
 800742c:	e9c4 0100 	strd	r0, r1, [r4]
 8007430:	e013      	b.n	800745a <__ieee754_rem_pio2+0x1ba>
 8007432:	463b      	mov	r3, r7
 8007434:	4632      	mov	r2, r6
 8007436:	4640      	mov	r0, r8
 8007438:	4649      	mov	r1, r9
 800743a:	f7f8 fe95 	bl	8000168 <__aeabi_dsub>
 800743e:	ea4f 532a 	mov.w	r3, sl, asr #20
 8007442:	9305      	str	r3, [sp, #20]
 8007444:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8007448:	ebc3 5a1a 	rsb	sl, r3, sl, lsr #20
 800744c:	f1ba 0f10 	cmp.w	sl, #16
 8007450:	dc1f      	bgt.n	8007492 <__ieee754_rem_pio2+0x1f2>
 8007452:	4602      	mov	r2, r0
 8007454:	460b      	mov	r3, r1
 8007456:	e9c4 2300 	strd	r2, r3, [r4]
 800745a:	e9d4 2a00 	ldrd	r2, sl, [r4]
 800745e:	4640      	mov	r0, r8
 8007460:	4653      	mov	r3, sl
 8007462:	4649      	mov	r1, r9
 8007464:	f7f8 fe80 	bl	8000168 <__aeabi_dsub>
 8007468:	4632      	mov	r2, r6
 800746a:	463b      	mov	r3, r7
 800746c:	f7f8 fe7c 	bl	8000168 <__aeabi_dsub>
 8007470:	460b      	mov	r3, r1
 8007472:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8007476:	9904      	ldr	r1, [sp, #16]
 8007478:	4602      	mov	r2, r0
 800747a:	2900      	cmp	r1, #0
 800747c:	f6bf af47 	bge.w	800730e <__ieee754_rem_pio2+0x6e>
 8007480:	f10a 4100 	add.w	r1, sl, #2147483648	; 0x80000000
 8007484:	e9c4 1201 	strd	r1, r2, [r4, #4]
 8007488:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800748c:	60e3      	str	r3, [r4, #12]
 800748e:	426d      	negs	r5, r5
 8007490:	e73d      	b.n	800730e <__ieee754_rem_pio2+0x6e>
 8007492:	a33f      	add	r3, pc, #252	; (adr r3, 8007590 <__ieee754_rem_pio2+0x2f0>)
 8007494:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007498:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800749c:	f7f9 f81c 	bl	80004d8 <__aeabi_dmul>
 80074a0:	4606      	mov	r6, r0
 80074a2:	460f      	mov	r7, r1
 80074a4:	4602      	mov	r2, r0
 80074a6:	460b      	mov	r3, r1
 80074a8:	4640      	mov	r0, r8
 80074aa:	4649      	mov	r1, r9
 80074ac:	f7f8 fe5c 	bl	8000168 <__aeabi_dsub>
 80074b0:	4602      	mov	r2, r0
 80074b2:	460b      	mov	r3, r1
 80074b4:	4682      	mov	sl, r0
 80074b6:	468b      	mov	fp, r1
 80074b8:	4640      	mov	r0, r8
 80074ba:	4649      	mov	r1, r9
 80074bc:	f7f8 fe54 	bl	8000168 <__aeabi_dsub>
 80074c0:	4632      	mov	r2, r6
 80074c2:	463b      	mov	r3, r7
 80074c4:	f7f8 fe50 	bl	8000168 <__aeabi_dsub>
 80074c8:	a333      	add	r3, pc, #204	; (adr r3, 8007598 <__ieee754_rem_pio2+0x2f8>)
 80074ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074ce:	4606      	mov	r6, r0
 80074d0:	460f      	mov	r7, r1
 80074d2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80074d6:	f7f8 ffff 	bl	80004d8 <__aeabi_dmul>
 80074da:	4632      	mov	r2, r6
 80074dc:	463b      	mov	r3, r7
 80074de:	f7f8 fe43 	bl	8000168 <__aeabi_dsub>
 80074e2:	4602      	mov	r2, r0
 80074e4:	460b      	mov	r3, r1
 80074e6:	4606      	mov	r6, r0
 80074e8:	460f      	mov	r7, r1
 80074ea:	4650      	mov	r0, sl
 80074ec:	4659      	mov	r1, fp
 80074ee:	f7f8 fe3b 	bl	8000168 <__aeabi_dsub>
 80074f2:	9a05      	ldr	r2, [sp, #20]
 80074f4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80074f8:	1ad3      	subs	r3, r2, r3
 80074fa:	2b31      	cmp	r3, #49	; 0x31
 80074fc:	dc06      	bgt.n	800750c <__ieee754_rem_pio2+0x26c>
 80074fe:	4602      	mov	r2, r0
 8007500:	460b      	mov	r3, r1
 8007502:	46d0      	mov	r8, sl
 8007504:	46d9      	mov	r9, fp
 8007506:	e9c4 2300 	strd	r2, r3, [r4]
 800750a:	e7a6      	b.n	800745a <__ieee754_rem_pio2+0x1ba>
 800750c:	a326      	add	r3, pc, #152	; (adr r3, 80075a8 <__ieee754_rem_pio2+0x308>)
 800750e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007512:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007516:	f7f8 ffdf 	bl	80004d8 <__aeabi_dmul>
 800751a:	4606      	mov	r6, r0
 800751c:	460f      	mov	r7, r1
 800751e:	4602      	mov	r2, r0
 8007520:	460b      	mov	r3, r1
 8007522:	4650      	mov	r0, sl
 8007524:	4659      	mov	r1, fp
 8007526:	f7f8 fe1f 	bl	8000168 <__aeabi_dsub>
 800752a:	4602      	mov	r2, r0
 800752c:	460b      	mov	r3, r1
 800752e:	4680      	mov	r8, r0
 8007530:	4689      	mov	r9, r1
 8007532:	4650      	mov	r0, sl
 8007534:	4659      	mov	r1, fp
 8007536:	f7f8 fe17 	bl	8000168 <__aeabi_dsub>
 800753a:	4632      	mov	r2, r6
 800753c:	463b      	mov	r3, r7
 800753e:	f7f8 fe13 	bl	8000168 <__aeabi_dsub>
 8007542:	a31b      	add	r3, pc, #108	; (adr r3, 80075b0 <__ieee754_rem_pio2+0x310>)
 8007544:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007548:	4606      	mov	r6, r0
 800754a:	460f      	mov	r7, r1
 800754c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007550:	f7f8 ffc2 	bl	80004d8 <__aeabi_dmul>
 8007554:	4632      	mov	r2, r6
 8007556:	463b      	mov	r3, r7
 8007558:	f7f8 fe06 	bl	8000168 <__aeabi_dsub>
 800755c:	4606      	mov	r6, r0
 800755e:	460f      	mov	r7, r1
 8007560:	e75e      	b.n	8007420 <__ieee754_rem_pio2+0x180>
 8007562:	4a1b      	ldr	r2, [pc, #108]	; (80075d0 <__ieee754_rem_pio2+0x330>)
 8007564:	4592      	cmp	sl, r2
 8007566:	dd35      	ble.n	80075d4 <__ieee754_rem_pio2+0x334>
 8007568:	4602      	mov	r2, r0
 800756a:	460b      	mov	r3, r1
 800756c:	f7f8 fdfc 	bl	8000168 <__aeabi_dsub>
 8007570:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8007574:	e9c4 0100 	strd	r0, r1, [r4]
 8007578:	e6a2      	b.n	80072c0 <__ieee754_rem_pio2+0x20>
 800757a:	bf00      	nop
 800757c:	f3af 8000 	nop.w
 8007580:	54400000 	.word	0x54400000
 8007584:	3ff921fb 	.word	0x3ff921fb
 8007588:	1a626331 	.word	0x1a626331
 800758c:	3dd0b461 	.word	0x3dd0b461
 8007590:	1a600000 	.word	0x1a600000
 8007594:	3dd0b461 	.word	0x3dd0b461
 8007598:	2e037073 	.word	0x2e037073
 800759c:	3ba3198a 	.word	0x3ba3198a
 80075a0:	6dc9c883 	.word	0x6dc9c883
 80075a4:	3fe45f30 	.word	0x3fe45f30
 80075a8:	2e000000 	.word	0x2e000000
 80075ac:	3ba3198a 	.word	0x3ba3198a
 80075b0:	252049c1 	.word	0x252049c1
 80075b4:	397b839a 	.word	0x397b839a
 80075b8:	3fe921fb 	.word	0x3fe921fb
 80075bc:	4002d97b 	.word	0x4002d97b
 80075c0:	3ff921fb 	.word	0x3ff921fb
 80075c4:	413921fb 	.word	0x413921fb
 80075c8:	3fe00000 	.word	0x3fe00000
 80075cc:	08008b7c 	.word	0x08008b7c
 80075d0:	7fefffff 	.word	0x7fefffff
 80075d4:	ea4f 552a 	mov.w	r5, sl, asr #20
 80075d8:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 80075dc:	ebaa 5105 	sub.w	r1, sl, r5, lsl #20
 80075e0:	460f      	mov	r7, r1
 80075e2:	4606      	mov	r6, r0
 80075e4:	f7f9 fa28 	bl	8000a38 <__aeabi_d2iz>
 80075e8:	f7f8 ff0c 	bl	8000404 <__aeabi_i2d>
 80075ec:	4602      	mov	r2, r0
 80075ee:	460b      	mov	r3, r1
 80075f0:	4630      	mov	r0, r6
 80075f2:	4639      	mov	r1, r7
 80075f4:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80075f8:	f7f8 fdb6 	bl	8000168 <__aeabi_dsub>
 80075fc:	2200      	movs	r2, #0
 80075fe:	4b22      	ldr	r3, [pc, #136]	; (8007688 <__ieee754_rem_pio2+0x3e8>)
 8007600:	f7f8 ff6a 	bl	80004d8 <__aeabi_dmul>
 8007604:	460f      	mov	r7, r1
 8007606:	4606      	mov	r6, r0
 8007608:	f7f9 fa16 	bl	8000a38 <__aeabi_d2iz>
 800760c:	f7f8 fefa 	bl	8000404 <__aeabi_i2d>
 8007610:	4602      	mov	r2, r0
 8007612:	460b      	mov	r3, r1
 8007614:	4630      	mov	r0, r6
 8007616:	4639      	mov	r1, r7
 8007618:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800761c:	f7f8 fda4 	bl	8000168 <__aeabi_dsub>
 8007620:	2200      	movs	r2, #0
 8007622:	4b19      	ldr	r3, [pc, #100]	; (8007688 <__ieee754_rem_pio2+0x3e8>)
 8007624:	f7f8 ff58 	bl	80004d8 <__aeabi_dmul>
 8007628:	f04f 0803 	mov.w	r8, #3
 800762c:	2600      	movs	r6, #0
 800762e:	2700      	movs	r7, #0
 8007630:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8007634:	f10d 0928 	add.w	r9, sp, #40	; 0x28
 8007638:	4632      	mov	r2, r6
 800763a:	e879 0102 	ldrd	r0, r1, [r9], #-8
 800763e:	463b      	mov	r3, r7
 8007640:	46c2      	mov	sl, r8
 8007642:	f108 38ff 	add.w	r8, r8, #4294967295
 8007646:	f7f9 f9af 	bl	80009a8 <__aeabi_dcmpeq>
 800764a:	2800      	cmp	r0, #0
 800764c:	d1f4      	bne.n	8007638 <__ieee754_rem_pio2+0x398>
 800764e:	4b0f      	ldr	r3, [pc, #60]	; (800768c <__ieee754_rem_pio2+0x3ec>)
 8007650:	462a      	mov	r2, r5
 8007652:	9301      	str	r3, [sp, #4]
 8007654:	2302      	movs	r3, #2
 8007656:	4621      	mov	r1, r4
 8007658:	9300      	str	r3, [sp, #0]
 800765a:	a806      	add	r0, sp, #24
 800765c:	4653      	mov	r3, sl
 800765e:	f000 f8d5 	bl	800780c <__kernel_rem_pio2>
 8007662:	9b04      	ldr	r3, [sp, #16]
 8007664:	4605      	mov	r5, r0
 8007666:	2b00      	cmp	r3, #0
 8007668:	f6bf ae51 	bge.w	800730e <__ieee754_rem_pio2+0x6e>
 800766c:	e9d4 2100 	ldrd	r2, r1, [r4]
 8007670:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007674:	e9c4 2300 	strd	r2, r3, [r4]
 8007678:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 800767c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007680:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8007684:	e703      	b.n	800748e <__ieee754_rem_pio2+0x1ee>
 8007686:	bf00      	nop
 8007688:	41700000 	.word	0x41700000
 800768c:	08008bfc 	.word	0x08008bfc

08007690 <__kernel_cos>:
 8007690:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007694:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8007698:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 800769c:	4680      	mov	r8, r0
 800769e:	460f      	mov	r7, r1
 80076a0:	e9cd 2300 	strd	r2, r3, [sp]
 80076a4:	da04      	bge.n	80076b0 <__kernel_cos+0x20>
 80076a6:	f7f9 f9c7 	bl	8000a38 <__aeabi_d2iz>
 80076aa:	2800      	cmp	r0, #0
 80076ac:	f000 8086 	beq.w	80077bc <__kernel_cos+0x12c>
 80076b0:	4642      	mov	r2, r8
 80076b2:	463b      	mov	r3, r7
 80076b4:	4640      	mov	r0, r8
 80076b6:	4639      	mov	r1, r7
 80076b8:	f7f8 ff0e 	bl	80004d8 <__aeabi_dmul>
 80076bc:	2200      	movs	r2, #0
 80076be:	4b4e      	ldr	r3, [pc, #312]	; (80077f8 <__kernel_cos+0x168>)
 80076c0:	4604      	mov	r4, r0
 80076c2:	460d      	mov	r5, r1
 80076c4:	f7f8 ff08 	bl	80004d8 <__aeabi_dmul>
 80076c8:	a33f      	add	r3, pc, #252	; (adr r3, 80077c8 <__kernel_cos+0x138>)
 80076ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076ce:	4682      	mov	sl, r0
 80076d0:	468b      	mov	fp, r1
 80076d2:	4620      	mov	r0, r4
 80076d4:	4629      	mov	r1, r5
 80076d6:	f7f8 feff 	bl	80004d8 <__aeabi_dmul>
 80076da:	a33d      	add	r3, pc, #244	; (adr r3, 80077d0 <__kernel_cos+0x140>)
 80076dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076e0:	f7f8 fd44 	bl	800016c <__adddf3>
 80076e4:	4622      	mov	r2, r4
 80076e6:	462b      	mov	r3, r5
 80076e8:	f7f8 fef6 	bl	80004d8 <__aeabi_dmul>
 80076ec:	a33a      	add	r3, pc, #232	; (adr r3, 80077d8 <__kernel_cos+0x148>)
 80076ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076f2:	f7f8 fd39 	bl	8000168 <__aeabi_dsub>
 80076f6:	4622      	mov	r2, r4
 80076f8:	462b      	mov	r3, r5
 80076fa:	f7f8 feed 	bl	80004d8 <__aeabi_dmul>
 80076fe:	a338      	add	r3, pc, #224	; (adr r3, 80077e0 <__kernel_cos+0x150>)
 8007700:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007704:	f7f8 fd32 	bl	800016c <__adddf3>
 8007708:	4622      	mov	r2, r4
 800770a:	462b      	mov	r3, r5
 800770c:	f7f8 fee4 	bl	80004d8 <__aeabi_dmul>
 8007710:	a335      	add	r3, pc, #212	; (adr r3, 80077e8 <__kernel_cos+0x158>)
 8007712:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007716:	f7f8 fd27 	bl	8000168 <__aeabi_dsub>
 800771a:	4622      	mov	r2, r4
 800771c:	462b      	mov	r3, r5
 800771e:	f7f8 fedb 	bl	80004d8 <__aeabi_dmul>
 8007722:	a333      	add	r3, pc, #204	; (adr r3, 80077f0 <__kernel_cos+0x160>)
 8007724:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007728:	f7f8 fd20 	bl	800016c <__adddf3>
 800772c:	4622      	mov	r2, r4
 800772e:	462b      	mov	r3, r5
 8007730:	f7f8 fed2 	bl	80004d8 <__aeabi_dmul>
 8007734:	4622      	mov	r2, r4
 8007736:	462b      	mov	r3, r5
 8007738:	f7f8 fece 	bl	80004d8 <__aeabi_dmul>
 800773c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007740:	4604      	mov	r4, r0
 8007742:	460d      	mov	r5, r1
 8007744:	4640      	mov	r0, r8
 8007746:	4639      	mov	r1, r7
 8007748:	f7f8 fec6 	bl	80004d8 <__aeabi_dmul>
 800774c:	460b      	mov	r3, r1
 800774e:	4602      	mov	r2, r0
 8007750:	4629      	mov	r1, r5
 8007752:	4620      	mov	r0, r4
 8007754:	f7f8 fd08 	bl	8000168 <__aeabi_dsub>
 8007758:	4b28      	ldr	r3, [pc, #160]	; (80077fc <__kernel_cos+0x16c>)
 800775a:	4680      	mov	r8, r0
 800775c:	429e      	cmp	r6, r3
 800775e:	4689      	mov	r9, r1
 8007760:	dc0e      	bgt.n	8007780 <__kernel_cos+0xf0>
 8007762:	4602      	mov	r2, r0
 8007764:	460b      	mov	r3, r1
 8007766:	4650      	mov	r0, sl
 8007768:	4659      	mov	r1, fp
 800776a:	f7f8 fcfd 	bl	8000168 <__aeabi_dsub>
 800776e:	4602      	mov	r2, r0
 8007770:	2000      	movs	r0, #0
 8007772:	460b      	mov	r3, r1
 8007774:	4922      	ldr	r1, [pc, #136]	; (8007800 <__kernel_cos+0x170>)
 8007776:	f7f8 fcf7 	bl	8000168 <__aeabi_dsub>
 800777a:	b003      	add	sp, #12
 800777c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007780:	2400      	movs	r4, #0
 8007782:	4b20      	ldr	r3, [pc, #128]	; (8007804 <__kernel_cos+0x174>)
 8007784:	4622      	mov	r2, r4
 8007786:	429e      	cmp	r6, r3
 8007788:	bfcc      	ite	gt
 800778a:	4d1f      	ldrgt	r5, [pc, #124]	; (8007808 <__kernel_cos+0x178>)
 800778c:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 8007790:	462b      	mov	r3, r5
 8007792:	2000      	movs	r0, #0
 8007794:	491a      	ldr	r1, [pc, #104]	; (8007800 <__kernel_cos+0x170>)
 8007796:	f7f8 fce7 	bl	8000168 <__aeabi_dsub>
 800779a:	4622      	mov	r2, r4
 800779c:	4606      	mov	r6, r0
 800779e:	460f      	mov	r7, r1
 80077a0:	462b      	mov	r3, r5
 80077a2:	4650      	mov	r0, sl
 80077a4:	4659      	mov	r1, fp
 80077a6:	f7f8 fcdf 	bl	8000168 <__aeabi_dsub>
 80077aa:	4642      	mov	r2, r8
 80077ac:	464b      	mov	r3, r9
 80077ae:	f7f8 fcdb 	bl	8000168 <__aeabi_dsub>
 80077b2:	4602      	mov	r2, r0
 80077b4:	460b      	mov	r3, r1
 80077b6:	4630      	mov	r0, r6
 80077b8:	4639      	mov	r1, r7
 80077ba:	e7dc      	b.n	8007776 <__kernel_cos+0xe6>
 80077bc:	2000      	movs	r0, #0
 80077be:	4910      	ldr	r1, [pc, #64]	; (8007800 <__kernel_cos+0x170>)
 80077c0:	e7db      	b.n	800777a <__kernel_cos+0xea>
 80077c2:	bf00      	nop
 80077c4:	f3af 8000 	nop.w
 80077c8:	be8838d4 	.word	0xbe8838d4
 80077cc:	bda8fae9 	.word	0xbda8fae9
 80077d0:	bdb4b1c4 	.word	0xbdb4b1c4
 80077d4:	3e21ee9e 	.word	0x3e21ee9e
 80077d8:	809c52ad 	.word	0x809c52ad
 80077dc:	3e927e4f 	.word	0x3e927e4f
 80077e0:	19cb1590 	.word	0x19cb1590
 80077e4:	3efa01a0 	.word	0x3efa01a0
 80077e8:	16c15177 	.word	0x16c15177
 80077ec:	3f56c16c 	.word	0x3f56c16c
 80077f0:	5555554c 	.word	0x5555554c
 80077f4:	3fa55555 	.word	0x3fa55555
 80077f8:	3fe00000 	.word	0x3fe00000
 80077fc:	3fd33332 	.word	0x3fd33332
 8007800:	3ff00000 	.word	0x3ff00000
 8007804:	3fe90000 	.word	0x3fe90000
 8007808:	3fd20000 	.word	0x3fd20000

0800780c <__kernel_rem_pio2>:
 800780c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007810:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 8007814:	9308      	str	r3, [sp, #32]
 8007816:	9106      	str	r1, [sp, #24]
 8007818:	4bb6      	ldr	r3, [pc, #728]	; (8007af4 <__kernel_rem_pio2+0x2e8>)
 800781a:	99a2      	ldr	r1, [sp, #648]	; 0x288
 800781c:	f112 0f14 	cmn.w	r2, #20
 8007820:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007824:	bfa8      	it	ge
 8007826:	1ed4      	subge	r4, r2, #3
 8007828:	9302      	str	r3, [sp, #8]
 800782a:	9b08      	ldr	r3, [sp, #32]
 800782c:	bfb8      	it	lt
 800782e:	2400      	movlt	r4, #0
 8007830:	f103 33ff 	add.w	r3, r3, #4294967295
 8007834:	9307      	str	r3, [sp, #28]
 8007836:	bfa4      	itt	ge
 8007838:	2318      	movge	r3, #24
 800783a:	fb94 f4f3 	sdivge	r4, r4, r3
 800783e:	f06f 0317 	mvn.w	r3, #23
 8007842:	fb04 3303 	mla	r3, r4, r3, r3
 8007846:	eb03 0b02 	add.w	fp, r3, r2
 800784a:	9a07      	ldr	r2, [sp, #28]
 800784c:	9b02      	ldr	r3, [sp, #8]
 800784e:	1aa7      	subs	r7, r4, r2
 8007850:	eb03 0802 	add.w	r8, r3, r2
 8007854:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 8007856:	2500      	movs	r5, #0
 8007858:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800785c:	2200      	movs	r2, #0
 800785e:	2300      	movs	r3, #0
 8007860:	9009      	str	r0, [sp, #36]	; 0x24
 8007862:	ae20      	add	r6, sp, #128	; 0x80
 8007864:	4545      	cmp	r5, r8
 8007866:	dd14      	ble.n	8007892 <__kernel_rem_pio2+0x86>
 8007868:	f04f 0800 	mov.w	r8, #0
 800786c:	9a08      	ldr	r2, [sp, #32]
 800786e:	ab20      	add	r3, sp, #128	; 0x80
 8007870:	eb03 05c2 	add.w	r5, r3, r2, lsl #3
 8007874:	f50d 7ae0 	add.w	sl, sp, #448	; 0x1c0
 8007878:	9b02      	ldr	r3, [sp, #8]
 800787a:	4598      	cmp	r8, r3
 800787c:	dc35      	bgt.n	80078ea <__kernel_rem_pio2+0xde>
 800787e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007880:	2200      	movs	r2, #0
 8007882:	f1a3 0908 	sub.w	r9, r3, #8
 8007886:	2300      	movs	r3, #0
 8007888:	462f      	mov	r7, r5
 800788a:	2600      	movs	r6, #0
 800788c:	e9cd 2300 	strd	r2, r3, [sp]
 8007890:	e01f      	b.n	80078d2 <__kernel_rem_pio2+0xc6>
 8007892:	42ef      	cmn	r7, r5
 8007894:	d40b      	bmi.n	80078ae <__kernel_rem_pio2+0xa2>
 8007896:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800789a:	e9cd 2300 	strd	r2, r3, [sp]
 800789e:	f7f8 fdb1 	bl	8000404 <__aeabi_i2d>
 80078a2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80078a6:	e8e6 0102 	strd	r0, r1, [r6], #8
 80078aa:	3501      	adds	r5, #1
 80078ac:	e7da      	b.n	8007864 <__kernel_rem_pio2+0x58>
 80078ae:	4610      	mov	r0, r2
 80078b0:	4619      	mov	r1, r3
 80078b2:	e7f8      	b.n	80078a6 <__kernel_rem_pio2+0x9a>
 80078b4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80078b8:	e9f9 0102 	ldrd	r0, r1, [r9, #8]!
 80078bc:	f7f8 fe0c 	bl	80004d8 <__aeabi_dmul>
 80078c0:	4602      	mov	r2, r0
 80078c2:	460b      	mov	r3, r1
 80078c4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80078c8:	f7f8 fc50 	bl	800016c <__adddf3>
 80078cc:	e9cd 0100 	strd	r0, r1, [sp]
 80078d0:	3601      	adds	r6, #1
 80078d2:	9b07      	ldr	r3, [sp, #28]
 80078d4:	3f08      	subs	r7, #8
 80078d6:	429e      	cmp	r6, r3
 80078d8:	ddec      	ble.n	80078b4 <__kernel_rem_pio2+0xa8>
 80078da:	e9dd 2300 	ldrd	r2, r3, [sp]
 80078de:	f108 0801 	add.w	r8, r8, #1
 80078e2:	e8ea 2302 	strd	r2, r3, [sl], #8
 80078e6:	3508      	adds	r5, #8
 80078e8:	e7c6      	b.n	8007878 <__kernel_rem_pio2+0x6c>
 80078ea:	9b02      	ldr	r3, [sp, #8]
 80078ec:	aa0c      	add	r2, sp, #48	; 0x30
 80078ee:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80078f2:	930b      	str	r3, [sp, #44]	; 0x2c
 80078f4:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 80078f6:	9e02      	ldr	r6, [sp, #8]
 80078f8:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80078fc:	930a      	str	r3, [sp, #40]	; 0x28
 80078fe:	ab98      	add	r3, sp, #608	; 0x260
 8007900:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007904:	e953 4528 	ldrd	r4, r5, [r3, #-160]	; 0xa0
 8007908:	ab70      	add	r3, sp, #448	; 0x1c0
 800790a:	eb03 0ac6 	add.w	sl, r3, r6, lsl #3
 800790e:	46d0      	mov	r8, sl
 8007910:	46b1      	mov	r9, r6
 8007912:	af0c      	add	r7, sp, #48	; 0x30
 8007914:	9700      	str	r7, [sp, #0]
 8007916:	f1b9 0f00 	cmp.w	r9, #0
 800791a:	f1a8 0808 	sub.w	r8, r8, #8
 800791e:	dc71      	bgt.n	8007a04 <__kernel_rem_pio2+0x1f8>
 8007920:	465a      	mov	r2, fp
 8007922:	4620      	mov	r0, r4
 8007924:	4629      	mov	r1, r5
 8007926:	f000 fbef 	bl	8008108 <scalbn>
 800792a:	2200      	movs	r2, #0
 800792c:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8007930:	4604      	mov	r4, r0
 8007932:	460d      	mov	r5, r1
 8007934:	f7f8 fdd0 	bl	80004d8 <__aeabi_dmul>
 8007938:	f000 fb66 	bl	8008008 <floor>
 800793c:	2200      	movs	r2, #0
 800793e:	4b6e      	ldr	r3, [pc, #440]	; (8007af8 <__kernel_rem_pio2+0x2ec>)
 8007940:	f7f8 fdca 	bl	80004d8 <__aeabi_dmul>
 8007944:	4602      	mov	r2, r0
 8007946:	460b      	mov	r3, r1
 8007948:	4620      	mov	r0, r4
 800794a:	4629      	mov	r1, r5
 800794c:	f7f8 fc0c 	bl	8000168 <__aeabi_dsub>
 8007950:	460d      	mov	r5, r1
 8007952:	4604      	mov	r4, r0
 8007954:	f7f9 f870 	bl	8000a38 <__aeabi_d2iz>
 8007958:	9004      	str	r0, [sp, #16]
 800795a:	f7f8 fd53 	bl	8000404 <__aeabi_i2d>
 800795e:	4602      	mov	r2, r0
 8007960:	460b      	mov	r3, r1
 8007962:	4620      	mov	r0, r4
 8007964:	4629      	mov	r1, r5
 8007966:	f7f8 fbff 	bl	8000168 <__aeabi_dsub>
 800796a:	f1bb 0f00 	cmp.w	fp, #0
 800796e:	4680      	mov	r8, r0
 8007970:	4689      	mov	r9, r1
 8007972:	dd70      	ble.n	8007a56 <__kernel_rem_pio2+0x24a>
 8007974:	1e72      	subs	r2, r6, #1
 8007976:	ab0c      	add	r3, sp, #48	; 0x30
 8007978:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800797c:	9c04      	ldr	r4, [sp, #16]
 800797e:	f1cb 0118 	rsb	r1, fp, #24
 8007982:	fa40 f301 	asr.w	r3, r0, r1
 8007986:	441c      	add	r4, r3
 8007988:	408b      	lsls	r3, r1
 800798a:	1ac0      	subs	r0, r0, r3
 800798c:	ab0c      	add	r3, sp, #48	; 0x30
 800798e:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8007992:	f1cb 0317 	rsb	r3, fp, #23
 8007996:	9404      	str	r4, [sp, #16]
 8007998:	fa40 f303 	asr.w	r3, r0, r3
 800799c:	9300      	str	r3, [sp, #0]
 800799e:	9b00      	ldr	r3, [sp, #0]
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	dd66      	ble.n	8007a72 <__kernel_rem_pio2+0x266>
 80079a4:	2200      	movs	r2, #0
 80079a6:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 80079aa:	4614      	mov	r4, r2
 80079ac:	9b04      	ldr	r3, [sp, #16]
 80079ae:	3301      	adds	r3, #1
 80079b0:	9304      	str	r3, [sp, #16]
 80079b2:	4296      	cmp	r6, r2
 80079b4:	f300 80ac 	bgt.w	8007b10 <__kernel_rem_pio2+0x304>
 80079b8:	f1bb 0f00 	cmp.w	fp, #0
 80079bc:	dd07      	ble.n	80079ce <__kernel_rem_pio2+0x1c2>
 80079be:	f1bb 0f01 	cmp.w	fp, #1
 80079c2:	f000 80b4 	beq.w	8007b2e <__kernel_rem_pio2+0x322>
 80079c6:	f1bb 0f02 	cmp.w	fp, #2
 80079ca:	f000 80ba 	beq.w	8007b42 <__kernel_rem_pio2+0x336>
 80079ce:	9b00      	ldr	r3, [sp, #0]
 80079d0:	2b02      	cmp	r3, #2
 80079d2:	d14e      	bne.n	8007a72 <__kernel_rem_pio2+0x266>
 80079d4:	4642      	mov	r2, r8
 80079d6:	464b      	mov	r3, r9
 80079d8:	2000      	movs	r0, #0
 80079da:	4948      	ldr	r1, [pc, #288]	; (8007afc <__kernel_rem_pio2+0x2f0>)
 80079dc:	f7f8 fbc4 	bl	8000168 <__aeabi_dsub>
 80079e0:	4680      	mov	r8, r0
 80079e2:	4689      	mov	r9, r1
 80079e4:	2c00      	cmp	r4, #0
 80079e6:	d044      	beq.n	8007a72 <__kernel_rem_pio2+0x266>
 80079e8:	465a      	mov	r2, fp
 80079ea:	2000      	movs	r0, #0
 80079ec:	4943      	ldr	r1, [pc, #268]	; (8007afc <__kernel_rem_pio2+0x2f0>)
 80079ee:	f000 fb8b 	bl	8008108 <scalbn>
 80079f2:	4602      	mov	r2, r0
 80079f4:	460b      	mov	r3, r1
 80079f6:	4640      	mov	r0, r8
 80079f8:	4649      	mov	r1, r9
 80079fa:	f7f8 fbb5 	bl	8000168 <__aeabi_dsub>
 80079fe:	4680      	mov	r8, r0
 8007a00:	4689      	mov	r9, r1
 8007a02:	e036      	b.n	8007a72 <__kernel_rem_pio2+0x266>
 8007a04:	2200      	movs	r2, #0
 8007a06:	4b3e      	ldr	r3, [pc, #248]	; (8007b00 <__kernel_rem_pio2+0x2f4>)
 8007a08:	4620      	mov	r0, r4
 8007a0a:	4629      	mov	r1, r5
 8007a0c:	f7f8 fd64 	bl	80004d8 <__aeabi_dmul>
 8007a10:	f7f9 f812 	bl	8000a38 <__aeabi_d2iz>
 8007a14:	f7f8 fcf6 	bl	8000404 <__aeabi_i2d>
 8007a18:	4602      	mov	r2, r0
 8007a1a:	460b      	mov	r3, r1
 8007a1c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007a20:	2200      	movs	r2, #0
 8007a22:	4b38      	ldr	r3, [pc, #224]	; (8007b04 <__kernel_rem_pio2+0x2f8>)
 8007a24:	f7f8 fd58 	bl	80004d8 <__aeabi_dmul>
 8007a28:	4602      	mov	r2, r0
 8007a2a:	460b      	mov	r3, r1
 8007a2c:	4620      	mov	r0, r4
 8007a2e:	4629      	mov	r1, r5
 8007a30:	f7f8 fb9a 	bl	8000168 <__aeabi_dsub>
 8007a34:	f7f9 f800 	bl	8000a38 <__aeabi_d2iz>
 8007a38:	9b00      	ldr	r3, [sp, #0]
 8007a3a:	f109 39ff 	add.w	r9, r9, #4294967295
 8007a3e:	f843 0b04 	str.w	r0, [r3], #4
 8007a42:	9300      	str	r3, [sp, #0]
 8007a44:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007a48:	e9d8 2300 	ldrd	r2, r3, [r8]
 8007a4c:	f7f8 fb8e 	bl	800016c <__adddf3>
 8007a50:	4604      	mov	r4, r0
 8007a52:	460d      	mov	r5, r1
 8007a54:	e75f      	b.n	8007916 <__kernel_rem_pio2+0x10a>
 8007a56:	d105      	bne.n	8007a64 <__kernel_rem_pio2+0x258>
 8007a58:	1e73      	subs	r3, r6, #1
 8007a5a:	aa0c      	add	r2, sp, #48	; 0x30
 8007a5c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8007a60:	15c3      	asrs	r3, r0, #23
 8007a62:	e79b      	b.n	800799c <__kernel_rem_pio2+0x190>
 8007a64:	2200      	movs	r2, #0
 8007a66:	4b28      	ldr	r3, [pc, #160]	; (8007b08 <__kernel_rem_pio2+0x2fc>)
 8007a68:	f7f8 ffbc 	bl	80009e4 <__aeabi_dcmpge>
 8007a6c:	2800      	cmp	r0, #0
 8007a6e:	d13e      	bne.n	8007aee <__kernel_rem_pio2+0x2e2>
 8007a70:	9000      	str	r0, [sp, #0]
 8007a72:	2200      	movs	r2, #0
 8007a74:	2300      	movs	r3, #0
 8007a76:	4640      	mov	r0, r8
 8007a78:	4649      	mov	r1, r9
 8007a7a:	f7f8 ff95 	bl	80009a8 <__aeabi_dcmpeq>
 8007a7e:	2800      	cmp	r0, #0
 8007a80:	f000 80b1 	beq.w	8007be6 <__kernel_rem_pio2+0x3da>
 8007a84:	1e74      	subs	r4, r6, #1
 8007a86:	4623      	mov	r3, r4
 8007a88:	2200      	movs	r2, #0
 8007a8a:	9902      	ldr	r1, [sp, #8]
 8007a8c:	428b      	cmp	r3, r1
 8007a8e:	da5f      	bge.n	8007b50 <__kernel_rem_pio2+0x344>
 8007a90:	2a00      	cmp	r2, #0
 8007a92:	d074      	beq.n	8007b7e <__kernel_rem_pio2+0x372>
 8007a94:	ab0c      	add	r3, sp, #48	; 0x30
 8007a96:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8007a9a:	f1ab 0b18 	sub.w	fp, fp, #24
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	f000 809f 	beq.w	8007be2 <__kernel_rem_pio2+0x3d6>
 8007aa4:	465a      	mov	r2, fp
 8007aa6:	2000      	movs	r0, #0
 8007aa8:	4914      	ldr	r1, [pc, #80]	; (8007afc <__kernel_rem_pio2+0x2f0>)
 8007aaa:	f000 fb2d 	bl	8008108 <scalbn>
 8007aae:	46a2      	mov	sl, r4
 8007ab0:	4606      	mov	r6, r0
 8007ab2:	460f      	mov	r7, r1
 8007ab4:	f04f 0800 	mov.w	r8, #0
 8007ab8:	ab70      	add	r3, sp, #448	; 0x1c0
 8007aba:	f8df 9044 	ldr.w	r9, [pc, #68]	; 8007b00 <__kernel_rem_pio2+0x2f4>
 8007abe:	00e5      	lsls	r5, r4, #3
 8007ac0:	eb03 0bc4 	add.w	fp, r3, r4, lsl #3
 8007ac4:	f1ba 0f00 	cmp.w	sl, #0
 8007ac8:	f280 80c3 	bge.w	8007c52 <__kernel_rem_pio2+0x446>
 8007acc:	4626      	mov	r6, r4
 8007ace:	2e00      	cmp	r6, #0
 8007ad0:	f2c0 80f5 	blt.w	8007cbe <__kernel_rem_pio2+0x4b2>
 8007ad4:	4b0d      	ldr	r3, [pc, #52]	; (8007b0c <__kernel_rem_pio2+0x300>)
 8007ad6:	f04f 0a00 	mov.w	sl, #0
 8007ada:	9307      	str	r3, [sp, #28]
 8007adc:	ab70      	add	r3, sp, #448	; 0x1c0
 8007ade:	f04f 0b00 	mov.w	fp, #0
 8007ae2:	f04f 0800 	mov.w	r8, #0
 8007ae6:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 8007aea:	1ba7      	subs	r7, r4, r6
 8007aec:	e0db      	b.n	8007ca6 <__kernel_rem_pio2+0x49a>
 8007aee:	2302      	movs	r3, #2
 8007af0:	9300      	str	r3, [sp, #0]
 8007af2:	e757      	b.n	80079a4 <__kernel_rem_pio2+0x198>
 8007af4:	08008d48 	.word	0x08008d48
 8007af8:	40200000 	.word	0x40200000
 8007afc:	3ff00000 	.word	0x3ff00000
 8007b00:	3e700000 	.word	0x3e700000
 8007b04:	41700000 	.word	0x41700000
 8007b08:	3fe00000 	.word	0x3fe00000
 8007b0c:	08008d08 	.word	0x08008d08
 8007b10:	683b      	ldr	r3, [r7, #0]
 8007b12:	b944      	cbnz	r4, 8007b26 <__kernel_rem_pio2+0x31a>
 8007b14:	b11b      	cbz	r3, 8007b1e <__kernel_rem_pio2+0x312>
 8007b16:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8007b1a:	603b      	str	r3, [r7, #0]
 8007b1c:	2301      	movs	r3, #1
 8007b1e:	461c      	mov	r4, r3
 8007b20:	3201      	adds	r2, #1
 8007b22:	3704      	adds	r7, #4
 8007b24:	e745      	b.n	80079b2 <__kernel_rem_pio2+0x1a6>
 8007b26:	1acb      	subs	r3, r1, r3
 8007b28:	603b      	str	r3, [r7, #0]
 8007b2a:	4623      	mov	r3, r4
 8007b2c:	e7f7      	b.n	8007b1e <__kernel_rem_pio2+0x312>
 8007b2e:	1e72      	subs	r2, r6, #1
 8007b30:	ab0c      	add	r3, sp, #48	; 0x30
 8007b32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b36:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8007b3a:	a90c      	add	r1, sp, #48	; 0x30
 8007b3c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8007b40:	e745      	b.n	80079ce <__kernel_rem_pio2+0x1c2>
 8007b42:	1e72      	subs	r2, r6, #1
 8007b44:	ab0c      	add	r3, sp, #48	; 0x30
 8007b46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b4a:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8007b4e:	e7f4      	b.n	8007b3a <__kernel_rem_pio2+0x32e>
 8007b50:	a90c      	add	r1, sp, #48	; 0x30
 8007b52:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8007b56:	3b01      	subs	r3, #1
 8007b58:	430a      	orrs	r2, r1
 8007b5a:	e796      	b.n	8007a8a <__kernel_rem_pio2+0x27e>
 8007b5c:	3401      	adds	r4, #1
 8007b5e:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8007b62:	2a00      	cmp	r2, #0
 8007b64:	d0fa      	beq.n	8007b5c <__kernel_rem_pio2+0x350>
 8007b66:	9b08      	ldr	r3, [sp, #32]
 8007b68:	f106 0801 	add.w	r8, r6, #1
 8007b6c:	18f5      	adds	r5, r6, r3
 8007b6e:	ab20      	add	r3, sp, #128	; 0x80
 8007b70:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8007b74:	4434      	add	r4, r6
 8007b76:	4544      	cmp	r4, r8
 8007b78:	da04      	bge.n	8007b84 <__kernel_rem_pio2+0x378>
 8007b7a:	4626      	mov	r6, r4
 8007b7c:	e6bf      	b.n	80078fe <__kernel_rem_pio2+0xf2>
 8007b7e:	2401      	movs	r4, #1
 8007b80:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007b82:	e7ec      	b.n	8007b5e <__kernel_rem_pio2+0x352>
 8007b84:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007b86:	f04f 0900 	mov.w	r9, #0
 8007b8a:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8007b8e:	f7f8 fc39 	bl	8000404 <__aeabi_i2d>
 8007b92:	2600      	movs	r6, #0
 8007b94:	2700      	movs	r7, #0
 8007b96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b98:	e9c5 0100 	strd	r0, r1, [r5]
 8007b9c:	3b08      	subs	r3, #8
 8007b9e:	9300      	str	r3, [sp, #0]
 8007ba0:	9504      	str	r5, [sp, #16]
 8007ba2:	9b07      	ldr	r3, [sp, #28]
 8007ba4:	4599      	cmp	r9, r3
 8007ba6:	dd05      	ble.n	8007bb4 <__kernel_rem_pio2+0x3a8>
 8007ba8:	e9ea 6702 	strd	r6, r7, [sl, #8]!
 8007bac:	f108 0801 	add.w	r8, r8, #1
 8007bb0:	3508      	adds	r5, #8
 8007bb2:	e7e0      	b.n	8007b76 <__kernel_rem_pio2+0x36a>
 8007bb4:	f8dd c010 	ldr.w	ip, [sp, #16]
 8007bb8:	9900      	ldr	r1, [sp, #0]
 8007bba:	f109 0901 	add.w	r9, r9, #1
 8007bbe:	e9f1 2302 	ldrd	r2, r3, [r1, #8]!
 8007bc2:	9100      	str	r1, [sp, #0]
 8007bc4:	e87c 0102 	ldrd	r0, r1, [ip], #-8
 8007bc8:	f8cd c010 	str.w	ip, [sp, #16]
 8007bcc:	f7f8 fc84 	bl	80004d8 <__aeabi_dmul>
 8007bd0:	4602      	mov	r2, r0
 8007bd2:	460b      	mov	r3, r1
 8007bd4:	4630      	mov	r0, r6
 8007bd6:	4639      	mov	r1, r7
 8007bd8:	f7f8 fac8 	bl	800016c <__adddf3>
 8007bdc:	4606      	mov	r6, r0
 8007bde:	460f      	mov	r7, r1
 8007be0:	e7df      	b.n	8007ba2 <__kernel_rem_pio2+0x396>
 8007be2:	3c01      	subs	r4, #1
 8007be4:	e756      	b.n	8007a94 <__kernel_rem_pio2+0x288>
 8007be6:	f1cb 0200 	rsb	r2, fp, #0
 8007bea:	4640      	mov	r0, r8
 8007bec:	4649      	mov	r1, r9
 8007bee:	f000 fa8b 	bl	8008108 <scalbn>
 8007bf2:	2200      	movs	r2, #0
 8007bf4:	4ba4      	ldr	r3, [pc, #656]	; (8007e88 <__kernel_rem_pio2+0x67c>)
 8007bf6:	4604      	mov	r4, r0
 8007bf8:	460d      	mov	r5, r1
 8007bfa:	f7f8 fef3 	bl	80009e4 <__aeabi_dcmpge>
 8007bfe:	b1f8      	cbz	r0, 8007c40 <__kernel_rem_pio2+0x434>
 8007c00:	2200      	movs	r2, #0
 8007c02:	4ba2      	ldr	r3, [pc, #648]	; (8007e8c <__kernel_rem_pio2+0x680>)
 8007c04:	4620      	mov	r0, r4
 8007c06:	4629      	mov	r1, r5
 8007c08:	f7f8 fc66 	bl	80004d8 <__aeabi_dmul>
 8007c0c:	f7f8 ff14 	bl	8000a38 <__aeabi_d2iz>
 8007c10:	4607      	mov	r7, r0
 8007c12:	f7f8 fbf7 	bl	8000404 <__aeabi_i2d>
 8007c16:	2200      	movs	r2, #0
 8007c18:	4b9b      	ldr	r3, [pc, #620]	; (8007e88 <__kernel_rem_pio2+0x67c>)
 8007c1a:	f7f8 fc5d 	bl	80004d8 <__aeabi_dmul>
 8007c1e:	460b      	mov	r3, r1
 8007c20:	4602      	mov	r2, r0
 8007c22:	4629      	mov	r1, r5
 8007c24:	4620      	mov	r0, r4
 8007c26:	f7f8 fa9f 	bl	8000168 <__aeabi_dsub>
 8007c2a:	f7f8 ff05 	bl	8000a38 <__aeabi_d2iz>
 8007c2e:	1c74      	adds	r4, r6, #1
 8007c30:	ab0c      	add	r3, sp, #48	; 0x30
 8007c32:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
 8007c36:	f10b 0b18 	add.w	fp, fp, #24
 8007c3a:	f843 7024 	str.w	r7, [r3, r4, lsl #2]
 8007c3e:	e731      	b.n	8007aa4 <__kernel_rem_pio2+0x298>
 8007c40:	4620      	mov	r0, r4
 8007c42:	4629      	mov	r1, r5
 8007c44:	f7f8 fef8 	bl	8000a38 <__aeabi_d2iz>
 8007c48:	ab0c      	add	r3, sp, #48	; 0x30
 8007c4a:	4634      	mov	r4, r6
 8007c4c:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
 8007c50:	e728      	b.n	8007aa4 <__kernel_rem_pio2+0x298>
 8007c52:	ab0c      	add	r3, sp, #48	; 0x30
 8007c54:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 8007c58:	f7f8 fbd4 	bl	8000404 <__aeabi_i2d>
 8007c5c:	4632      	mov	r2, r6
 8007c5e:	463b      	mov	r3, r7
 8007c60:	f7f8 fc3a 	bl	80004d8 <__aeabi_dmul>
 8007c64:	4642      	mov	r2, r8
 8007c66:	e86b 0102 	strd	r0, r1, [fp], #-8
 8007c6a:	464b      	mov	r3, r9
 8007c6c:	4630      	mov	r0, r6
 8007c6e:	4639      	mov	r1, r7
 8007c70:	f7f8 fc32 	bl	80004d8 <__aeabi_dmul>
 8007c74:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007c78:	4606      	mov	r6, r0
 8007c7a:	460f      	mov	r7, r1
 8007c7c:	e722      	b.n	8007ac4 <__kernel_rem_pio2+0x2b8>
 8007c7e:	f8dd c01c 	ldr.w	ip, [sp, #28]
 8007c82:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 8007c86:	e8fc 0102 	ldrd	r0, r1, [ip], #8
 8007c8a:	f8cd c01c 	str.w	ip, [sp, #28]
 8007c8e:	f7f8 fc23 	bl	80004d8 <__aeabi_dmul>
 8007c92:	4602      	mov	r2, r0
 8007c94:	460b      	mov	r3, r1
 8007c96:	4650      	mov	r0, sl
 8007c98:	4659      	mov	r1, fp
 8007c9a:	f7f8 fa67 	bl	800016c <__adddf3>
 8007c9e:	4682      	mov	sl, r0
 8007ca0:	468b      	mov	fp, r1
 8007ca2:	f108 0801 	add.w	r8, r8, #1
 8007ca6:	9b02      	ldr	r3, [sp, #8]
 8007ca8:	4598      	cmp	r8, r3
 8007caa:	dc01      	bgt.n	8007cb0 <__kernel_rem_pio2+0x4a4>
 8007cac:	45b8      	cmp	r8, r7
 8007cae:	dde6      	ble.n	8007c7e <__kernel_rem_pio2+0x472>
 8007cb0:	ab48      	add	r3, sp, #288	; 0x120
 8007cb2:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8007cb6:	e9c7 ab00 	strd	sl, fp, [r7]
 8007cba:	3e01      	subs	r6, #1
 8007cbc:	e707      	b.n	8007ace <__kernel_rem_pio2+0x2c2>
 8007cbe:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 8007cc0:	2b02      	cmp	r3, #2
 8007cc2:	dc09      	bgt.n	8007cd8 <__kernel_rem_pio2+0x4cc>
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	dc32      	bgt.n	8007d2e <__kernel_rem_pio2+0x522>
 8007cc8:	d05a      	beq.n	8007d80 <__kernel_rem_pio2+0x574>
 8007cca:	9b04      	ldr	r3, [sp, #16]
 8007ccc:	f003 0007 	and.w	r0, r3, #7
 8007cd0:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 8007cd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007cd8:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 8007cda:	2b03      	cmp	r3, #3
 8007cdc:	d1f5      	bne.n	8007cca <__kernel_rem_pio2+0x4be>
 8007cde:	ab48      	add	r3, sp, #288	; 0x120
 8007ce0:	441d      	add	r5, r3
 8007ce2:	46aa      	mov	sl, r5
 8007ce4:	46a3      	mov	fp, r4
 8007ce6:	f1bb 0f00 	cmp.w	fp, #0
 8007cea:	dc76      	bgt.n	8007dda <__kernel_rem_pio2+0x5ce>
 8007cec:	46aa      	mov	sl, r5
 8007cee:	46a3      	mov	fp, r4
 8007cf0:	f1bb 0f01 	cmp.w	fp, #1
 8007cf4:	f300 8090 	bgt.w	8007e18 <__kernel_rem_pio2+0x60c>
 8007cf8:	2700      	movs	r7, #0
 8007cfa:	463e      	mov	r6, r7
 8007cfc:	2c01      	cmp	r4, #1
 8007cfe:	f300 80aa 	bgt.w	8007e56 <__kernel_rem_pio2+0x64a>
 8007d02:	e9dd 5048 	ldrd	r5, r0, [sp, #288]	; 0x120
 8007d06:	e9dd 414a 	ldrd	r4, r1, [sp, #296]	; 0x128
 8007d0a:	9b00      	ldr	r3, [sp, #0]
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	f040 80ac 	bne.w	8007e6a <__kernel_rem_pio2+0x65e>
 8007d12:	4603      	mov	r3, r0
 8007d14:	462a      	mov	r2, r5
 8007d16:	9806      	ldr	r0, [sp, #24]
 8007d18:	e9c0 2300 	strd	r2, r3, [r0]
 8007d1c:	4622      	mov	r2, r4
 8007d1e:	460b      	mov	r3, r1
 8007d20:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8007d24:	463a      	mov	r2, r7
 8007d26:	4633      	mov	r3, r6
 8007d28:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8007d2c:	e7cd      	b.n	8007cca <__kernel_rem_pio2+0x4be>
 8007d2e:	2000      	movs	r0, #0
 8007d30:	46a0      	mov	r8, r4
 8007d32:	4601      	mov	r1, r0
 8007d34:	ab48      	add	r3, sp, #288	; 0x120
 8007d36:	441d      	add	r5, r3
 8007d38:	f1b8 0f00 	cmp.w	r8, #0
 8007d3c:	da3a      	bge.n	8007db4 <__kernel_rem_pio2+0x5a8>
 8007d3e:	9b00      	ldr	r3, [sp, #0]
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d03e      	beq.n	8007dc2 <__kernel_rem_pio2+0x5b6>
 8007d44:	f101 4500 	add.w	r5, r1, #2147483648	; 0x80000000
 8007d48:	4602      	mov	r2, r0
 8007d4a:	462b      	mov	r3, r5
 8007d4c:	9d06      	ldr	r5, [sp, #24]
 8007d4e:	2601      	movs	r6, #1
 8007d50:	e9c5 2300 	strd	r2, r3, [r5]
 8007d54:	460b      	mov	r3, r1
 8007d56:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 8007d5a:	f7f8 fa05 	bl	8000168 <__aeabi_dsub>
 8007d5e:	4684      	mov	ip, r0
 8007d60:	460f      	mov	r7, r1
 8007d62:	ad48      	add	r5, sp, #288	; 0x120
 8007d64:	42b4      	cmp	r4, r6
 8007d66:	f105 0508 	add.w	r5, r5, #8
 8007d6a:	da2c      	bge.n	8007dc6 <__kernel_rem_pio2+0x5ba>
 8007d6c:	9b00      	ldr	r3, [sp, #0]
 8007d6e:	b10b      	cbz	r3, 8007d74 <__kernel_rem_pio2+0x568>
 8007d70:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 8007d74:	4662      	mov	r2, ip
 8007d76:	463b      	mov	r3, r7
 8007d78:	9906      	ldr	r1, [sp, #24]
 8007d7a:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8007d7e:	e7a4      	b.n	8007cca <__kernel_rem_pio2+0x4be>
 8007d80:	9ea2      	ldr	r6, [sp, #648]	; 0x288
 8007d82:	ab48      	add	r3, sp, #288	; 0x120
 8007d84:	4637      	mov	r7, r6
 8007d86:	441d      	add	r5, r3
 8007d88:	2c00      	cmp	r4, #0
 8007d8a:	da09      	bge.n	8007da0 <__kernel_rem_pio2+0x594>
 8007d8c:	9b00      	ldr	r3, [sp, #0]
 8007d8e:	b10b      	cbz	r3, 8007d94 <__kernel_rem_pio2+0x588>
 8007d90:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 8007d94:	4632      	mov	r2, r6
 8007d96:	463b      	mov	r3, r7
 8007d98:	9906      	ldr	r1, [sp, #24]
 8007d9a:	e9c1 2300 	strd	r2, r3, [r1]
 8007d9e:	e794      	b.n	8007cca <__kernel_rem_pio2+0x4be>
 8007da0:	4630      	mov	r0, r6
 8007da2:	e875 2302 	ldrd	r2, r3, [r5], #-8
 8007da6:	4639      	mov	r1, r7
 8007da8:	f7f8 f9e0 	bl	800016c <__adddf3>
 8007dac:	3c01      	subs	r4, #1
 8007dae:	4606      	mov	r6, r0
 8007db0:	460f      	mov	r7, r1
 8007db2:	e7e9      	b.n	8007d88 <__kernel_rem_pio2+0x57c>
 8007db4:	e875 2302 	ldrd	r2, r3, [r5], #-8
 8007db8:	f7f8 f9d8 	bl	800016c <__adddf3>
 8007dbc:	f108 38ff 	add.w	r8, r8, #4294967295
 8007dc0:	e7ba      	b.n	8007d38 <__kernel_rem_pio2+0x52c>
 8007dc2:	460d      	mov	r5, r1
 8007dc4:	e7c0      	b.n	8007d48 <__kernel_rem_pio2+0x53c>
 8007dc6:	4660      	mov	r0, ip
 8007dc8:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007dcc:	4639      	mov	r1, r7
 8007dce:	f7f8 f9cd 	bl	800016c <__adddf3>
 8007dd2:	3601      	adds	r6, #1
 8007dd4:	4684      	mov	ip, r0
 8007dd6:	460f      	mov	r7, r1
 8007dd8:	e7c4      	b.n	8007d64 <__kernel_rem_pio2+0x558>
 8007dda:	e9da 6700 	ldrd	r6, r7, [sl]
 8007dde:	e95a 8902 	ldrd	r8, r9, [sl, #-8]
 8007de2:	4632      	mov	r2, r6
 8007de4:	463b      	mov	r3, r7
 8007de6:	4640      	mov	r0, r8
 8007de8:	4649      	mov	r1, r9
 8007dea:	f7f8 f9bf 	bl	800016c <__adddf3>
 8007dee:	4602      	mov	r2, r0
 8007df0:	460b      	mov	r3, r1
 8007df2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007df6:	4640      	mov	r0, r8
 8007df8:	4649      	mov	r1, r9
 8007dfa:	f7f8 f9b5 	bl	8000168 <__aeabi_dsub>
 8007dfe:	4632      	mov	r2, r6
 8007e00:	463b      	mov	r3, r7
 8007e02:	f7f8 f9b3 	bl	800016c <__adddf3>
 8007e06:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007e0a:	e86a 0102 	strd	r0, r1, [sl], #-8
 8007e0e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007e12:	e9ca 2300 	strd	r2, r3, [sl]
 8007e16:	e766      	b.n	8007ce6 <__kernel_rem_pio2+0x4da>
 8007e18:	e9da 8900 	ldrd	r8, r9, [sl]
 8007e1c:	e95a 6702 	ldrd	r6, r7, [sl, #-8]
 8007e20:	4642      	mov	r2, r8
 8007e22:	464b      	mov	r3, r9
 8007e24:	4630      	mov	r0, r6
 8007e26:	4639      	mov	r1, r7
 8007e28:	f7f8 f9a0 	bl	800016c <__adddf3>
 8007e2c:	4602      	mov	r2, r0
 8007e2e:	460b      	mov	r3, r1
 8007e30:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007e34:	4630      	mov	r0, r6
 8007e36:	4639      	mov	r1, r7
 8007e38:	f7f8 f996 	bl	8000168 <__aeabi_dsub>
 8007e3c:	4642      	mov	r2, r8
 8007e3e:	464b      	mov	r3, r9
 8007e40:	f7f8 f994 	bl	800016c <__adddf3>
 8007e44:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007e48:	e86a 0102 	strd	r0, r1, [sl], #-8
 8007e4c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007e50:	e9ca 2300 	strd	r2, r3, [sl]
 8007e54:	e74c      	b.n	8007cf0 <__kernel_rem_pio2+0x4e4>
 8007e56:	4638      	mov	r0, r7
 8007e58:	e875 2302 	ldrd	r2, r3, [r5], #-8
 8007e5c:	4631      	mov	r1, r6
 8007e5e:	f7f8 f985 	bl	800016c <__adddf3>
 8007e62:	3c01      	subs	r4, #1
 8007e64:	4607      	mov	r7, r0
 8007e66:	460e      	mov	r6, r1
 8007e68:	e748      	b.n	8007cfc <__kernel_rem_pio2+0x4f0>
 8007e6a:	9b06      	ldr	r3, [sp, #24]
 8007e6c:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8007e70:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8007e74:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 8007e78:	e9c3 0401 	strd	r0, r4, [r3, #4]
 8007e7c:	e9c3 1703 	strd	r1, r7, [r3, #12]
 8007e80:	601d      	str	r5, [r3, #0]
 8007e82:	615e      	str	r6, [r3, #20]
 8007e84:	e721      	b.n	8007cca <__kernel_rem_pio2+0x4be>
 8007e86:	bf00      	nop
 8007e88:	41700000 	.word	0x41700000
 8007e8c:	3e700000 	.word	0x3e700000

08007e90 <__kernel_sin>:
 8007e90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007e94:	b086      	sub	sp, #24
 8007e96:	e9cd 2300 	strd	r2, r3, [sp]
 8007e9a:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007e9e:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8007ea2:	4682      	mov	sl, r0
 8007ea4:	460c      	mov	r4, r1
 8007ea6:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8007ea8:	da03      	bge.n	8007eb2 <__kernel_sin+0x22>
 8007eaa:	f7f8 fdc5 	bl	8000a38 <__aeabi_d2iz>
 8007eae:	2800      	cmp	r0, #0
 8007eb0:	d050      	beq.n	8007f54 <__kernel_sin+0xc4>
 8007eb2:	4652      	mov	r2, sl
 8007eb4:	4623      	mov	r3, r4
 8007eb6:	4650      	mov	r0, sl
 8007eb8:	4621      	mov	r1, r4
 8007eba:	f7f8 fb0d 	bl	80004d8 <__aeabi_dmul>
 8007ebe:	4606      	mov	r6, r0
 8007ec0:	460f      	mov	r7, r1
 8007ec2:	4602      	mov	r2, r0
 8007ec4:	460b      	mov	r3, r1
 8007ec6:	4650      	mov	r0, sl
 8007ec8:	4621      	mov	r1, r4
 8007eca:	f7f8 fb05 	bl	80004d8 <__aeabi_dmul>
 8007ece:	a33e      	add	r3, pc, #248	; (adr r3, 8007fc8 <__kernel_sin+0x138>)
 8007ed0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ed4:	4680      	mov	r8, r0
 8007ed6:	4689      	mov	r9, r1
 8007ed8:	4630      	mov	r0, r6
 8007eda:	4639      	mov	r1, r7
 8007edc:	f7f8 fafc 	bl	80004d8 <__aeabi_dmul>
 8007ee0:	a33b      	add	r3, pc, #236	; (adr r3, 8007fd0 <__kernel_sin+0x140>)
 8007ee2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ee6:	f7f8 f93f 	bl	8000168 <__aeabi_dsub>
 8007eea:	4632      	mov	r2, r6
 8007eec:	463b      	mov	r3, r7
 8007eee:	f7f8 faf3 	bl	80004d8 <__aeabi_dmul>
 8007ef2:	a339      	add	r3, pc, #228	; (adr r3, 8007fd8 <__kernel_sin+0x148>)
 8007ef4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ef8:	f7f8 f938 	bl	800016c <__adddf3>
 8007efc:	4632      	mov	r2, r6
 8007efe:	463b      	mov	r3, r7
 8007f00:	f7f8 faea 	bl	80004d8 <__aeabi_dmul>
 8007f04:	a336      	add	r3, pc, #216	; (adr r3, 8007fe0 <__kernel_sin+0x150>)
 8007f06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f0a:	f7f8 f92d 	bl	8000168 <__aeabi_dsub>
 8007f0e:	4632      	mov	r2, r6
 8007f10:	463b      	mov	r3, r7
 8007f12:	f7f8 fae1 	bl	80004d8 <__aeabi_dmul>
 8007f16:	a334      	add	r3, pc, #208	; (adr r3, 8007fe8 <__kernel_sin+0x158>)
 8007f18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f1c:	f7f8 f926 	bl	800016c <__adddf3>
 8007f20:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007f24:	b9dd      	cbnz	r5, 8007f5e <__kernel_sin+0xce>
 8007f26:	4602      	mov	r2, r0
 8007f28:	460b      	mov	r3, r1
 8007f2a:	4630      	mov	r0, r6
 8007f2c:	4639      	mov	r1, r7
 8007f2e:	f7f8 fad3 	bl	80004d8 <__aeabi_dmul>
 8007f32:	a32f      	add	r3, pc, #188	; (adr r3, 8007ff0 <__kernel_sin+0x160>)
 8007f34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f38:	f7f8 f916 	bl	8000168 <__aeabi_dsub>
 8007f3c:	4642      	mov	r2, r8
 8007f3e:	464b      	mov	r3, r9
 8007f40:	f7f8 faca 	bl	80004d8 <__aeabi_dmul>
 8007f44:	4602      	mov	r2, r0
 8007f46:	460b      	mov	r3, r1
 8007f48:	4650      	mov	r0, sl
 8007f4a:	4621      	mov	r1, r4
 8007f4c:	f7f8 f90e 	bl	800016c <__adddf3>
 8007f50:	4682      	mov	sl, r0
 8007f52:	460c      	mov	r4, r1
 8007f54:	4650      	mov	r0, sl
 8007f56:	4621      	mov	r1, r4
 8007f58:	b006      	add	sp, #24
 8007f5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f5e:	2200      	movs	r2, #0
 8007f60:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007f64:	4b24      	ldr	r3, [pc, #144]	; (8007ff8 <__kernel_sin+0x168>)
 8007f66:	f7f8 fab7 	bl	80004d8 <__aeabi_dmul>
 8007f6a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007f6e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007f72:	4640      	mov	r0, r8
 8007f74:	4649      	mov	r1, r9
 8007f76:	f7f8 faaf 	bl	80004d8 <__aeabi_dmul>
 8007f7a:	4602      	mov	r2, r0
 8007f7c:	460b      	mov	r3, r1
 8007f7e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007f82:	f7f8 f8f1 	bl	8000168 <__aeabi_dsub>
 8007f86:	4632      	mov	r2, r6
 8007f88:	463b      	mov	r3, r7
 8007f8a:	f7f8 faa5 	bl	80004d8 <__aeabi_dmul>
 8007f8e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007f92:	f7f8 f8e9 	bl	8000168 <__aeabi_dsub>
 8007f96:	a316      	add	r3, pc, #88	; (adr r3, 8007ff0 <__kernel_sin+0x160>)
 8007f98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f9c:	4606      	mov	r6, r0
 8007f9e:	460f      	mov	r7, r1
 8007fa0:	4640      	mov	r0, r8
 8007fa2:	4649      	mov	r1, r9
 8007fa4:	f7f8 fa98 	bl	80004d8 <__aeabi_dmul>
 8007fa8:	4602      	mov	r2, r0
 8007faa:	460b      	mov	r3, r1
 8007fac:	4630      	mov	r0, r6
 8007fae:	4639      	mov	r1, r7
 8007fb0:	f7f8 f8dc 	bl	800016c <__adddf3>
 8007fb4:	4602      	mov	r2, r0
 8007fb6:	460b      	mov	r3, r1
 8007fb8:	4650      	mov	r0, sl
 8007fba:	4621      	mov	r1, r4
 8007fbc:	f7f8 f8d4 	bl	8000168 <__aeabi_dsub>
 8007fc0:	e7c6      	b.n	8007f50 <__kernel_sin+0xc0>
 8007fc2:	bf00      	nop
 8007fc4:	f3af 8000 	nop.w
 8007fc8:	5acfd57c 	.word	0x5acfd57c
 8007fcc:	3de5d93a 	.word	0x3de5d93a
 8007fd0:	8a2b9ceb 	.word	0x8a2b9ceb
 8007fd4:	3e5ae5e6 	.word	0x3e5ae5e6
 8007fd8:	57b1fe7d 	.word	0x57b1fe7d
 8007fdc:	3ec71de3 	.word	0x3ec71de3
 8007fe0:	19c161d5 	.word	0x19c161d5
 8007fe4:	3f2a01a0 	.word	0x3f2a01a0
 8007fe8:	1110f8a6 	.word	0x1110f8a6
 8007fec:	3f811111 	.word	0x3f811111
 8007ff0:	55555549 	.word	0x55555549
 8007ff4:	3fc55555 	.word	0x3fc55555
 8007ff8:	3fe00000 	.word	0x3fe00000

08007ffc <fabs>:
 8007ffc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8008000:	4770      	bx	lr
 8008002:	0000      	movs	r0, r0
 8008004:	0000      	movs	r0, r0
	...

08008008 <floor>:
 8008008:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800800c:	f3c1 580a 	ubfx	r8, r1, #20, #11
 8008010:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 8008014:	2e13      	cmp	r6, #19
 8008016:	4602      	mov	r2, r0
 8008018:	460b      	mov	r3, r1
 800801a:	4607      	mov	r7, r0
 800801c:	460c      	mov	r4, r1
 800801e:	4605      	mov	r5, r0
 8008020:	dc33      	bgt.n	800808a <floor+0x82>
 8008022:	2e00      	cmp	r6, #0
 8008024:	da14      	bge.n	8008050 <floor+0x48>
 8008026:	a334      	add	r3, pc, #208	; (adr r3, 80080f8 <floor+0xf0>)
 8008028:	e9d3 2300 	ldrd	r2, r3, [r3]
 800802c:	f7f8 f89e 	bl	800016c <__adddf3>
 8008030:	2200      	movs	r2, #0
 8008032:	2300      	movs	r3, #0
 8008034:	f7f8 fce0 	bl	80009f8 <__aeabi_dcmpgt>
 8008038:	b138      	cbz	r0, 800804a <floor+0x42>
 800803a:	2c00      	cmp	r4, #0
 800803c:	da58      	bge.n	80080f0 <floor+0xe8>
 800803e:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8008042:	431d      	orrs	r5, r3
 8008044:	d001      	beq.n	800804a <floor+0x42>
 8008046:	2500      	movs	r5, #0
 8008048:	4c2d      	ldr	r4, [pc, #180]	; (8008100 <floor+0xf8>)
 800804a:	4623      	mov	r3, r4
 800804c:	462f      	mov	r7, r5
 800804e:	e025      	b.n	800809c <floor+0x94>
 8008050:	4a2c      	ldr	r2, [pc, #176]	; (8008104 <floor+0xfc>)
 8008052:	fa42 f806 	asr.w	r8, r2, r6
 8008056:	ea01 0208 	and.w	r2, r1, r8
 800805a:	4302      	orrs	r2, r0
 800805c:	d01e      	beq.n	800809c <floor+0x94>
 800805e:	a326      	add	r3, pc, #152	; (adr r3, 80080f8 <floor+0xf0>)
 8008060:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008064:	f7f8 f882 	bl	800016c <__adddf3>
 8008068:	2200      	movs	r2, #0
 800806a:	2300      	movs	r3, #0
 800806c:	f7f8 fcc4 	bl	80009f8 <__aeabi_dcmpgt>
 8008070:	2800      	cmp	r0, #0
 8008072:	d0ea      	beq.n	800804a <floor+0x42>
 8008074:	2c00      	cmp	r4, #0
 8008076:	bfbe      	ittt	lt
 8008078:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800807c:	fa43 f606 	asrlt.w	r6, r3, r6
 8008080:	19a4      	addlt	r4, r4, r6
 8008082:	2500      	movs	r5, #0
 8008084:	ea24 0408 	bic.w	r4, r4, r8
 8008088:	e7df      	b.n	800804a <floor+0x42>
 800808a:	2e33      	cmp	r6, #51	; 0x33
 800808c:	dd0a      	ble.n	80080a4 <floor+0x9c>
 800808e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8008092:	d103      	bne.n	800809c <floor+0x94>
 8008094:	f7f8 f86a 	bl	800016c <__adddf3>
 8008098:	4607      	mov	r7, r0
 800809a:	460b      	mov	r3, r1
 800809c:	4638      	mov	r0, r7
 800809e:	4619      	mov	r1, r3
 80080a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80080a4:	f04f 32ff 	mov.w	r2, #4294967295
 80080a8:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 80080ac:	fa22 f808 	lsr.w	r8, r2, r8
 80080b0:	ea18 0f00 	tst.w	r8, r0
 80080b4:	d0f2      	beq.n	800809c <floor+0x94>
 80080b6:	a310      	add	r3, pc, #64	; (adr r3, 80080f8 <floor+0xf0>)
 80080b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080bc:	f7f8 f856 	bl	800016c <__adddf3>
 80080c0:	2200      	movs	r2, #0
 80080c2:	2300      	movs	r3, #0
 80080c4:	f7f8 fc98 	bl	80009f8 <__aeabi_dcmpgt>
 80080c8:	2800      	cmp	r0, #0
 80080ca:	d0be      	beq.n	800804a <floor+0x42>
 80080cc:	2c00      	cmp	r4, #0
 80080ce:	da02      	bge.n	80080d6 <floor+0xce>
 80080d0:	2e14      	cmp	r6, #20
 80080d2:	d103      	bne.n	80080dc <floor+0xd4>
 80080d4:	3401      	adds	r4, #1
 80080d6:	ea25 0508 	bic.w	r5, r5, r8
 80080da:	e7b6      	b.n	800804a <floor+0x42>
 80080dc:	2301      	movs	r3, #1
 80080de:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 80080e2:	fa03 f606 	lsl.w	r6, r3, r6
 80080e6:	4435      	add	r5, r6
 80080e8:	42bd      	cmp	r5, r7
 80080ea:	bf38      	it	cc
 80080ec:	18e4      	addcc	r4, r4, r3
 80080ee:	e7f2      	b.n	80080d6 <floor+0xce>
 80080f0:	2500      	movs	r5, #0
 80080f2:	462c      	mov	r4, r5
 80080f4:	e7a9      	b.n	800804a <floor+0x42>
 80080f6:	bf00      	nop
 80080f8:	8800759c 	.word	0x8800759c
 80080fc:	7e37e43c 	.word	0x7e37e43c
 8008100:	bff00000 	.word	0xbff00000
 8008104:	000fffff 	.word	0x000fffff

08008108 <scalbn>:
 8008108:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800810a:	f3c1 560a 	ubfx	r6, r1, #20, #11
 800810e:	4604      	mov	r4, r0
 8008110:	460d      	mov	r5, r1
 8008112:	4617      	mov	r7, r2
 8008114:	460b      	mov	r3, r1
 8008116:	b996      	cbnz	r6, 800813e <scalbn+0x36>
 8008118:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800811c:	4303      	orrs	r3, r0
 800811e:	d039      	beq.n	8008194 <scalbn+0x8c>
 8008120:	4b33      	ldr	r3, [pc, #204]	; (80081f0 <scalbn+0xe8>)
 8008122:	2200      	movs	r2, #0
 8008124:	f7f8 f9d8 	bl	80004d8 <__aeabi_dmul>
 8008128:	4b32      	ldr	r3, [pc, #200]	; (80081f4 <scalbn+0xec>)
 800812a:	4604      	mov	r4, r0
 800812c:	429f      	cmp	r7, r3
 800812e:	460d      	mov	r5, r1
 8008130:	da0f      	bge.n	8008152 <scalbn+0x4a>
 8008132:	a32b      	add	r3, pc, #172	; (adr r3, 80081e0 <scalbn+0xd8>)
 8008134:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008138:	f7f8 f9ce 	bl	80004d8 <__aeabi_dmul>
 800813c:	e006      	b.n	800814c <scalbn+0x44>
 800813e:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8008142:	4296      	cmp	r6, r2
 8008144:	d10a      	bne.n	800815c <scalbn+0x54>
 8008146:	4602      	mov	r2, r0
 8008148:	f7f8 f810 	bl	800016c <__adddf3>
 800814c:	4604      	mov	r4, r0
 800814e:	460d      	mov	r5, r1
 8008150:	e020      	b.n	8008194 <scalbn+0x8c>
 8008152:	460b      	mov	r3, r1
 8008154:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8008158:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 800815c:	f240 72fe 	movw	r2, #2046	; 0x7fe
 8008160:	19b9      	adds	r1, r7, r6
 8008162:	4291      	cmp	r1, r2
 8008164:	dd0e      	ble.n	8008184 <scalbn+0x7c>
 8008166:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 800816a:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 800816e:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 8008172:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 8008176:	4820      	ldr	r0, [pc, #128]	; (80081f8 <scalbn+0xf0>)
 8008178:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 800817c:	a31a      	add	r3, pc, #104	; (adr r3, 80081e8 <scalbn+0xe0>)
 800817e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008182:	e7d9      	b.n	8008138 <scalbn+0x30>
 8008184:	2900      	cmp	r1, #0
 8008186:	dd08      	ble.n	800819a <scalbn+0x92>
 8008188:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800818c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008190:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 8008194:	4620      	mov	r0, r4
 8008196:	4629      	mov	r1, r5
 8008198:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800819a:	f111 0f35 	cmn.w	r1, #53	; 0x35
 800819e:	da12      	bge.n	80081c6 <scalbn+0xbe>
 80081a0:	f24c 3350 	movw	r3, #50000	; 0xc350
 80081a4:	429f      	cmp	r7, r3
 80081a6:	ea4f 73d5 	mov.w	r3, r5, lsr #31
 80081aa:	ea4f 74c3 	mov.w	r4, r3, lsl #31
 80081ae:	dcdc      	bgt.n	800816a <scalbn+0x62>
 80081b0:	a30b      	add	r3, pc, #44	; (adr r3, 80081e0 <scalbn+0xd8>)
 80081b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081b6:	f044 71d2 	orr.w	r1, r4, #27525120	; 0x1a40000
 80081ba:	f441 31b7 	orr.w	r1, r1, #93696	; 0x16e00
 80081be:	480f      	ldr	r0, [pc, #60]	; (80081fc <scalbn+0xf4>)
 80081c0:	f041 011f 	orr.w	r1, r1, #31
 80081c4:	e7b8      	b.n	8008138 <scalbn+0x30>
 80081c6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80081ca:	3136      	adds	r1, #54	; 0x36
 80081cc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80081d0:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 80081d4:	4620      	mov	r0, r4
 80081d6:	4629      	mov	r1, r5
 80081d8:	2200      	movs	r2, #0
 80081da:	4b09      	ldr	r3, [pc, #36]	; (8008200 <scalbn+0xf8>)
 80081dc:	e7ac      	b.n	8008138 <scalbn+0x30>
 80081de:	bf00      	nop
 80081e0:	c2f8f359 	.word	0xc2f8f359
 80081e4:	01a56e1f 	.word	0x01a56e1f
 80081e8:	8800759c 	.word	0x8800759c
 80081ec:	7e37e43c 	.word	0x7e37e43c
 80081f0:	43500000 	.word	0x43500000
 80081f4:	ffff3cb0 	.word	0xffff3cb0
 80081f8:	8800759c 	.word	0x8800759c
 80081fc:	c2f8f359 	.word	0xc2f8f359
 8008200:	3c900000 	.word	0x3c900000

08008204 <_init>:
 8008204:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008206:	bf00      	nop
 8008208:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800820a:	bc08      	pop	{r3}
 800820c:	469e      	mov	lr, r3
 800820e:	4770      	bx	lr

08008210 <_fini>:
 8008210:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008212:	bf00      	nop
 8008214:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008216:	bc08      	pop	{r3}
 8008218:	469e      	mov	lr, r3
 800821a:	4770      	bx	lr
